
RadTag9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cbb8  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d44  0801cc78  0801cc78  0001dc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080209bc  080209bc  000224c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080209bc  080209bc  000219bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080209c4  080209c4  000224c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080209c4  080209c4  000219c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080209c8  080209c8  000219c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c0  20000000  080209cc  00022000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000633c  200004c0  08020e8c  000224c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200067fc  08020e8c  000227fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000224c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008a8bf  00000000  00000000  000224e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00010b36  00000000  00000000  000acda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00021cfd  00000000  00000000  000bd8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e50  00000000  00000000  000df5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000032af  00000000  00000000  000e2430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035758  00000000  00000000  000e56df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006f48b  00000000  00000000  0011ae37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eff38  00000000  00000000  0018a2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0027a1fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087c0  00000000  00000000  0027a240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00282a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004c0 	.word	0x200004c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801cc4c 	.word	0x0801cc4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c4 	.word	0x200004c4
 8000104:	0801cc4c 	.word	0x0801cc4c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f002 f989 	bl	800277c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f002 f8cd 	bl	8002614 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f97b 	bl	800277c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f002 f971 	bl	800277c <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f8f7 	bl	800269c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f8ed 	bl	800269c <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	0008      	movs	r0, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 fceb 	bl	8000eb4 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fc73 	bl	8000dd4 <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fcdd 	bl	8000eb4 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fcd3 	bl	8000eb4 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fc81 	bl	8000e24 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fc77 	bl	8000e24 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__clzsi2>:
 8000544:	211c      	movs	r1, #28
 8000546:	2301      	movs	r3, #1
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	4298      	cmp	r0, r3
 800054c:	d301      	bcc.n	8000552 <__clzsi2+0xe>
 800054e:	0c00      	lsrs	r0, r0, #16
 8000550:	3910      	subs	r1, #16
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	4298      	cmp	r0, r3
 8000556:	d301      	bcc.n	800055c <__clzsi2+0x18>
 8000558:	0a00      	lsrs	r0, r0, #8
 800055a:	3908      	subs	r1, #8
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	4298      	cmp	r0, r3
 8000560:	d301      	bcc.n	8000566 <__clzsi2+0x22>
 8000562:	0900      	lsrs	r0, r0, #4
 8000564:	3904      	subs	r1, #4
 8000566:	a202      	add	r2, pc, #8	@ (adr r2, 8000570 <__clzsi2+0x2c>)
 8000568:	5c10      	ldrb	r0, [r2, r0]
 800056a:	1840      	adds	r0, r0, r1
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	02020304 	.word	0x02020304
 8000574:	01010101 	.word	0x01010101
	...

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffead 	.word	0xfffffead
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f83c 	bl	800062c <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	@ 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffb2 	bl	8000530 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f001 f88b 	bl	80016ec <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	@ 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fe0b 	bl	80011f8 <__aeabi_fsub>
 80005e2:	f001 f883 	bl	80016ec <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	@ 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff5f 	bl	80004bc <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f003 f839 	bl	800367c <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f002 fc06 	bl	8002e24 <__aeabi_dsub>
 8000618:	f003 f830 	bl	800367c <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	4657      	mov	r7, sl
 8000630:	464e      	mov	r6, r9
 8000632:	4645      	mov	r5, r8
 8000634:	46de      	mov	lr, fp
 8000636:	b5e0      	push	{r5, r6, r7, lr}
 8000638:	0004      	movs	r4, r0
 800063a:	000d      	movs	r5, r1
 800063c:	4692      	mov	sl, r2
 800063e:	4699      	mov	r9, r3
 8000640:	b083      	sub	sp, #12
 8000642:	428b      	cmp	r3, r1
 8000644:	d830      	bhi.n	80006a8 <__udivmoddi4+0x7c>
 8000646:	d02d      	beq.n	80006a4 <__udivmoddi4+0x78>
 8000648:	4649      	mov	r1, r9
 800064a:	4650      	mov	r0, sl
 800064c:	f003 f96e 	bl	800392c <__clzdi2>
 8000650:	0029      	movs	r1, r5
 8000652:	0006      	movs	r6, r0
 8000654:	0020      	movs	r0, r4
 8000656:	f003 f969 	bl	800392c <__clzdi2>
 800065a:	1a33      	subs	r3, r6, r0
 800065c:	4698      	mov	r8, r3
 800065e:	3b20      	subs	r3, #32
 8000660:	d434      	bmi.n	80006cc <__udivmoddi4+0xa0>
 8000662:	469b      	mov	fp, r3
 8000664:	4653      	mov	r3, sl
 8000666:	465a      	mov	r2, fp
 8000668:	4093      	lsls	r3, r2
 800066a:	4642      	mov	r2, r8
 800066c:	001f      	movs	r7, r3
 800066e:	4653      	mov	r3, sl
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d83b      	bhi.n	80006f0 <__udivmoddi4+0xc4>
 8000678:	42af      	cmp	r7, r5
 800067a:	d100      	bne.n	800067e <__udivmoddi4+0x52>
 800067c:	e079      	b.n	8000772 <__udivmoddi4+0x146>
 800067e:	465b      	mov	r3, fp
 8000680:	1ba4      	subs	r4, r4, r6
 8000682:	41bd      	sbcs	r5, r7
 8000684:	2b00      	cmp	r3, #0
 8000686:	da00      	bge.n	800068a <__udivmoddi4+0x5e>
 8000688:	e076      	b.n	8000778 <__udivmoddi4+0x14c>
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	9200      	str	r2, [sp, #0]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	465a      	mov	r2, fp
 8000696:	4093      	lsls	r3, r2
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	4642      	mov	r2, r8
 800069e:	4093      	lsls	r3, r2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	e029      	b.n	80006f8 <__udivmoddi4+0xcc>
 80006a4:	4282      	cmp	r2, r0
 80006a6:	d9cf      	bls.n	8000648 <__udivmoddi4+0x1c>
 80006a8:	2200      	movs	r2, #0
 80006aa:	2300      	movs	r3, #0
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <__udivmoddi4+0x8e>
 80006b6:	601c      	str	r4, [r3, #0]
 80006b8:	605d      	str	r5, [r3, #4]
 80006ba:	9800      	ldr	r0, [sp, #0]
 80006bc:	9901      	ldr	r1, [sp, #4]
 80006be:	b003      	add	sp, #12
 80006c0:	bcf0      	pop	{r4, r5, r6, r7}
 80006c2:	46bb      	mov	fp, r7
 80006c4:	46b2      	mov	sl, r6
 80006c6:	46a9      	mov	r9, r5
 80006c8:	46a0      	mov	r8, r4
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	4642      	mov	r2, r8
 80006ce:	469b      	mov	fp, r3
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	4652      	mov	r2, sl
 80006d6:	40da      	lsrs	r2, r3
 80006d8:	4641      	mov	r1, r8
 80006da:	0013      	movs	r3, r2
 80006dc:	464a      	mov	r2, r9
 80006de:	408a      	lsls	r2, r1
 80006e0:	0017      	movs	r7, r2
 80006e2:	4642      	mov	r2, r8
 80006e4:	431f      	orrs	r7, r3
 80006e6:	4653      	mov	r3, sl
 80006e8:	4093      	lsls	r3, r2
 80006ea:	001e      	movs	r6, r3
 80006ec:	42af      	cmp	r7, r5
 80006ee:	d9c3      	bls.n	8000678 <__udivmoddi4+0x4c>
 80006f0:	2200      	movs	r2, #0
 80006f2:	2300      	movs	r3, #0
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	4643      	mov	r3, r8
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0d8      	beq.n	80006b0 <__udivmoddi4+0x84>
 80006fe:	07fb      	lsls	r3, r7, #31
 8000700:	0872      	lsrs	r2, r6, #1
 8000702:	431a      	orrs	r2, r3
 8000704:	4646      	mov	r6, r8
 8000706:	087b      	lsrs	r3, r7, #1
 8000708:	e00e      	b.n	8000728 <__udivmoddi4+0xfc>
 800070a:	42ab      	cmp	r3, r5
 800070c:	d101      	bne.n	8000712 <__udivmoddi4+0xe6>
 800070e:	42a2      	cmp	r2, r4
 8000710:	d80c      	bhi.n	800072c <__udivmoddi4+0x100>
 8000712:	1aa4      	subs	r4, r4, r2
 8000714:	419d      	sbcs	r5, r3
 8000716:	2001      	movs	r0, #1
 8000718:	1924      	adds	r4, r4, r4
 800071a:	416d      	adcs	r5, r5
 800071c:	2100      	movs	r1, #0
 800071e:	3e01      	subs	r6, #1
 8000720:	1824      	adds	r4, r4, r0
 8000722:	414d      	adcs	r5, r1
 8000724:	2e00      	cmp	r6, #0
 8000726:	d006      	beq.n	8000736 <__udivmoddi4+0x10a>
 8000728:	42ab      	cmp	r3, r5
 800072a:	d9ee      	bls.n	800070a <__udivmoddi4+0xde>
 800072c:	3e01      	subs	r6, #1
 800072e:	1924      	adds	r4, r4, r4
 8000730:	416d      	adcs	r5, r5
 8000732:	2e00      	cmp	r6, #0
 8000734:	d1f8      	bne.n	8000728 <__udivmoddi4+0xfc>
 8000736:	9800      	ldr	r0, [sp, #0]
 8000738:	9901      	ldr	r1, [sp, #4]
 800073a:	465b      	mov	r3, fp
 800073c:	1900      	adds	r0, r0, r4
 800073e:	4169      	adcs	r1, r5
 8000740:	2b00      	cmp	r3, #0
 8000742:	db24      	blt.n	800078e <__udivmoddi4+0x162>
 8000744:	002b      	movs	r3, r5
 8000746:	465a      	mov	r2, fp
 8000748:	4644      	mov	r4, r8
 800074a:	40d3      	lsrs	r3, r2
 800074c:	002a      	movs	r2, r5
 800074e:	40e2      	lsrs	r2, r4
 8000750:	001c      	movs	r4, r3
 8000752:	465b      	mov	r3, fp
 8000754:	0015      	movs	r5, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	db2a      	blt.n	80007b0 <__udivmoddi4+0x184>
 800075a:	0026      	movs	r6, r4
 800075c:	409e      	lsls	r6, r3
 800075e:	0033      	movs	r3, r6
 8000760:	0026      	movs	r6, r4
 8000762:	4647      	mov	r7, r8
 8000764:	40be      	lsls	r6, r7
 8000766:	0032      	movs	r2, r6
 8000768:	1a80      	subs	r0, r0, r2
 800076a:	4199      	sbcs	r1, r3
 800076c:	9000      	str	r0, [sp, #0]
 800076e:	9101      	str	r1, [sp, #4]
 8000770:	e79e      	b.n	80006b0 <__udivmoddi4+0x84>
 8000772:	42a3      	cmp	r3, r4
 8000774:	d8bc      	bhi.n	80006f0 <__udivmoddi4+0xc4>
 8000776:	e782      	b.n	800067e <__udivmoddi4+0x52>
 8000778:	4642      	mov	r2, r8
 800077a:	2320      	movs	r3, #32
 800077c:	2100      	movs	r1, #0
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	2200      	movs	r2, #0
 8000782:	9100      	str	r1, [sp, #0]
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	40da      	lsrs	r2, r3
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	e785      	b.n	800069a <__udivmoddi4+0x6e>
 800078e:	4642      	mov	r2, r8
 8000790:	2320      	movs	r3, #32
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	002a      	movs	r2, r5
 8000796:	4646      	mov	r6, r8
 8000798:	409a      	lsls	r2, r3
 800079a:	0023      	movs	r3, r4
 800079c:	40f3      	lsrs	r3, r6
 800079e:	4644      	mov	r4, r8
 80007a0:	4313      	orrs	r3, r2
 80007a2:	002a      	movs	r2, r5
 80007a4:	40e2      	lsrs	r2, r4
 80007a6:	001c      	movs	r4, r3
 80007a8:	465b      	mov	r3, fp
 80007aa:	0015      	movs	r5, r2
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dad4      	bge.n	800075a <__udivmoddi4+0x12e>
 80007b0:	4642      	mov	r2, r8
 80007b2:	002f      	movs	r7, r5
 80007b4:	2320      	movs	r3, #32
 80007b6:	0026      	movs	r6, r4
 80007b8:	4097      	lsls	r7, r2
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	40de      	lsrs	r6, r3
 80007be:	003b      	movs	r3, r7
 80007c0:	4333      	orrs	r3, r6
 80007c2:	e7cd      	b.n	8000760 <__udivmoddi4+0x134>

080007c4 <__aeabi_fadd>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	024b      	lsls	r3, r1, #9
 80007c8:	0a5a      	lsrs	r2, r3, #9
 80007ca:	4694      	mov	ip, r2
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	0fc9      	lsrs	r1, r1, #31
 80007d0:	46ce      	mov	lr, r9
 80007d2:	4647      	mov	r7, r8
 80007d4:	4689      	mov	r9, r1
 80007d6:	0045      	lsls	r5, r0, #1
 80007d8:	0246      	lsls	r6, r0, #9
 80007da:	0e2d      	lsrs	r5, r5, #24
 80007dc:	0e12      	lsrs	r2, r2, #24
 80007de:	b580      	push	{r7, lr}
 80007e0:	0999      	lsrs	r1, r3, #6
 80007e2:	0a77      	lsrs	r7, r6, #9
 80007e4:	0fc4      	lsrs	r4, r0, #31
 80007e6:	09b6      	lsrs	r6, r6, #6
 80007e8:	1aab      	subs	r3, r5, r2
 80007ea:	454c      	cmp	r4, r9
 80007ec:	d020      	beq.n	8000830 <__aeabi_fadd+0x6c>
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dd0c      	ble.n	800080c <__aeabi_fadd+0x48>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d134      	bne.n	8000860 <__aeabi_fadd+0x9c>
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d02a      	beq.n	8000850 <__aeabi_fadd+0x8c>
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x3e>
 8000800:	e08f      	b.n	8000922 <__aeabi_fadd+0x15e>
 8000802:	2bff      	cmp	r3, #255	@ 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x44>
 8000806:	e0cd      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000808:	0013      	movs	r3, r2
 800080a:	e02f      	b.n	800086c <__aeabi_fadd+0xa8>
 800080c:	2b00      	cmp	r3, #0
 800080e:	d060      	beq.n	80008d2 <__aeabi_fadd+0x10e>
 8000810:	1b53      	subs	r3, r2, r5
 8000812:	2d00      	cmp	r5, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x54>
 8000816:	e0ee      	b.n	80009f6 <__aeabi_fadd+0x232>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x5a>
 800081c:	e13e      	b.n	8000a9c <__aeabi_fadd+0x2d8>
 800081e:	1e5c      	subs	r4, r3, #1
 8000820:	2b01      	cmp	r3, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x62>
 8000824:	e16b      	b.n	8000afe <__aeabi_fadd+0x33a>
 8000826:	2bff      	cmp	r3, #255	@ 0xff
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x68>
 800082a:	e0b9      	b.n	80009a0 <__aeabi_fadd+0x1dc>
 800082c:	0023      	movs	r3, r4
 800082e:	e0e7      	b.n	8000a00 <__aeabi_fadd+0x23c>
 8000830:	2b00      	cmp	r3, #0
 8000832:	dc00      	bgt.n	8000836 <__aeabi_fadd+0x72>
 8000834:	e0a4      	b.n	8000980 <__aeabi_fadd+0x1bc>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d069      	beq.n	800090e <__aeabi_fadd+0x14a>
 800083a:	2dff      	cmp	r5, #255	@ 0xff
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x7c>
 800083e:	e0b1      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	04d2      	lsls	r2, r2, #19
 8000844:	4311      	orrs	r1, r2
 8000846:	2b1b      	cmp	r3, #27
 8000848:	dc00      	bgt.n	800084c <__aeabi_fadd+0x88>
 800084a:	e0e9      	b.n	8000a20 <__aeabi_fadd+0x25c>
 800084c:	002b      	movs	r3, r5
 800084e:	3605      	adds	r6, #5
 8000850:	08f7      	lsrs	r7, r6, #3
 8000852:	2bff      	cmp	r3, #255	@ 0xff
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x94>
 8000856:	e0a5      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000858:	027a      	lsls	r2, r7, #9
 800085a:	0a52      	lsrs	r2, r2, #9
 800085c:	b2d8      	uxtb	r0, r3
 800085e:	e030      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000860:	2dff      	cmp	r5, #255	@ 0xff
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0xa2>
 8000864:	e09e      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	04d2      	lsls	r2, r2, #19
 800086a:	4311      	orrs	r1, r2
 800086c:	2001      	movs	r0, #1
 800086e:	2b1b      	cmp	r3, #27
 8000870:	dc08      	bgt.n	8000884 <__aeabi_fadd+0xc0>
 8000872:	0008      	movs	r0, r1
 8000874:	2220      	movs	r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4099      	lsls	r1, r3
 800087c:	000b      	movs	r3, r1
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4193      	sbcs	r3, r2
 8000882:	4318      	orrs	r0, r3
 8000884:	1a36      	subs	r6, r6, r0
 8000886:	0173      	lsls	r3, r6, #5
 8000888:	d400      	bmi.n	800088c <__aeabi_fadd+0xc8>
 800088a:	e071      	b.n	8000970 <__aeabi_fadd+0x1ac>
 800088c:	01b6      	lsls	r6, r6, #6
 800088e:	09b7      	lsrs	r7, r6, #6
 8000890:	0038      	movs	r0, r7
 8000892:	f7ff fe57 	bl	8000544 <__clzsi2>
 8000896:	003b      	movs	r3, r7
 8000898:	3805      	subs	r0, #5
 800089a:	4083      	lsls	r3, r0
 800089c:	4285      	cmp	r5, r0
 800089e:	dd4d      	ble.n	800093c <__aeabi_fadd+0x178>
 80008a0:	4eb4      	ldr	r6, [pc, #720]	@ (8000b74 <__aeabi_fadd+0x3b0>)
 80008a2:	1a2d      	subs	r5, r5, r0
 80008a4:	401e      	ands	r6, r3
 80008a6:	075a      	lsls	r2, r3, #29
 80008a8:	d068      	beq.n	800097c <__aeabi_fadd+0x1b8>
 80008aa:	220f      	movs	r2, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d064      	beq.n	800097c <__aeabi_fadd+0x1b8>
 80008b2:	3604      	adds	r6, #4
 80008b4:	0173      	lsls	r3, r6, #5
 80008b6:	d561      	bpl.n	800097c <__aeabi_fadd+0x1b8>
 80008b8:	1c68      	adds	r0, r5, #1
 80008ba:	2dfe      	cmp	r5, #254	@ 0xfe
 80008bc:	d154      	bne.n	8000968 <__aeabi_fadd+0x1a4>
 80008be:	20ff      	movs	r0, #255	@ 0xff
 80008c0:	2200      	movs	r2, #0
 80008c2:	05c0      	lsls	r0, r0, #23
 80008c4:	4310      	orrs	r0, r2
 80008c6:	07e4      	lsls	r4, r4, #31
 80008c8:	4320      	orrs	r0, r4
 80008ca:	bcc0      	pop	{r6, r7}
 80008cc:	46b9      	mov	r9, r7
 80008ce:	46b0      	mov	r8, r6
 80008d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d2:	22fe      	movs	r2, #254	@ 0xfe
 80008d4:	4690      	mov	r8, r2
 80008d6:	1c68      	adds	r0, r5, #1
 80008d8:	0002      	movs	r2, r0
 80008da:	4640      	mov	r0, r8
 80008dc:	4210      	tst	r0, r2
 80008de:	d16b      	bne.n	80009b8 <__aeabi_fadd+0x1f4>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fadd+0x122>
 80008e4:	e0dd      	b.n	8000aa2 <__aeabi_fadd+0x2de>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x128>
 80008ea:	e102      	b.n	8000af2 <__aeabi_fadd+0x32e>
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d0b3      	beq.n	8000858 <__aeabi_fadd+0x94>
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	1a77      	subs	r7, r6, r1
 80008f4:	04d2      	lsls	r2, r2, #19
 80008f6:	4217      	tst	r7, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x138>
 80008fa:	e136      	b.n	8000b6a <__aeabi_fadd+0x3a6>
 80008fc:	464c      	mov	r4, r9
 80008fe:	1b8e      	subs	r6, r1, r6
 8000900:	d061      	beq.n	80009c6 <__aeabi_fadd+0x202>
 8000902:	2001      	movs	r0, #1
 8000904:	4216      	tst	r6, r2
 8000906:	d130      	bne.n	800096a <__aeabi_fadd+0x1a6>
 8000908:	2300      	movs	r3, #0
 800090a:	08f7      	lsrs	r7, r6, #3
 800090c:	e7a4      	b.n	8000858 <__aeabi_fadd+0x94>
 800090e:	2900      	cmp	r1, #0
 8000910:	d09e      	beq.n	8000850 <__aeabi_fadd+0x8c>
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2b01      	cmp	r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x156>
 8000918:	e0ca      	b.n	8000ab0 <__aeabi_fadd+0x2ec>
 800091a:	2bff      	cmp	r3, #255	@ 0xff
 800091c:	d042      	beq.n	80009a4 <__aeabi_fadd+0x1e0>
 800091e:	0013      	movs	r3, r2
 8000920:	e791      	b.n	8000846 <__aeabi_fadd+0x82>
 8000922:	1a71      	subs	r1, r6, r1
 8000924:	014b      	lsls	r3, r1, #5
 8000926:	d400      	bmi.n	800092a <__aeabi_fadd+0x166>
 8000928:	e0d1      	b.n	8000ace <__aeabi_fadd+0x30a>
 800092a:	018f      	lsls	r7, r1, #6
 800092c:	09bf      	lsrs	r7, r7, #6
 800092e:	0038      	movs	r0, r7
 8000930:	f7ff fe08 	bl	8000544 <__clzsi2>
 8000934:	003b      	movs	r3, r7
 8000936:	3805      	subs	r0, #5
 8000938:	4083      	lsls	r3, r0
 800093a:	2501      	movs	r5, #1
 800093c:	2220      	movs	r2, #32
 800093e:	1b40      	subs	r0, r0, r5
 8000940:	3001      	adds	r0, #1
 8000942:	1a12      	subs	r2, r2, r0
 8000944:	001e      	movs	r6, r3
 8000946:	4093      	lsls	r3, r2
 8000948:	40c6      	lsrs	r6, r0
 800094a:	1e5a      	subs	r2, r3, #1
 800094c:	4193      	sbcs	r3, r2
 800094e:	431e      	orrs	r6, r3
 8000950:	d039      	beq.n	80009c6 <__aeabi_fadd+0x202>
 8000952:	0773      	lsls	r3, r6, #29
 8000954:	d100      	bne.n	8000958 <__aeabi_fadd+0x194>
 8000956:	e11b      	b.n	8000b90 <__aeabi_fadd+0x3cc>
 8000958:	230f      	movs	r3, #15
 800095a:	2500      	movs	r5, #0
 800095c:	4033      	ands	r3, r6
 800095e:	2b04      	cmp	r3, #4
 8000960:	d1a7      	bne.n	80008b2 <__aeabi_fadd+0xee>
 8000962:	2001      	movs	r0, #1
 8000964:	0172      	lsls	r2, r6, #5
 8000966:	d57c      	bpl.n	8000a62 <__aeabi_fadd+0x29e>
 8000968:	b2c0      	uxtb	r0, r0
 800096a:	01b2      	lsls	r2, r6, #6
 800096c:	0a52      	lsrs	r2, r2, #9
 800096e:	e7a8      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000970:	0773      	lsls	r3, r6, #29
 8000972:	d003      	beq.n	800097c <__aeabi_fadd+0x1b8>
 8000974:	230f      	movs	r3, #15
 8000976:	4033      	ands	r3, r6
 8000978:	2b04      	cmp	r3, #4
 800097a:	d19a      	bne.n	80008b2 <__aeabi_fadd+0xee>
 800097c:	002b      	movs	r3, r5
 800097e:	e767      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <__aeabi_fadd+0x208>
 8000984:	1b53      	subs	r3, r2, r5
 8000986:	2d00      	cmp	r5, #0
 8000988:	d17b      	bne.n	8000a82 <__aeabi_fadd+0x2be>
 800098a:	2e00      	cmp	r6, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fadd+0x1cc>
 800098e:	e086      	b.n	8000a9e <__aeabi_fadd+0x2da>
 8000990:	1e5d      	subs	r5, r3, #1
 8000992:	2b01      	cmp	r3, #1
 8000994:	d100      	bne.n	8000998 <__aeabi_fadd+0x1d4>
 8000996:	e08b      	b.n	8000ab0 <__aeabi_fadd+0x2ec>
 8000998:	2bff      	cmp	r3, #255	@ 0xff
 800099a:	d002      	beq.n	80009a2 <__aeabi_fadd+0x1de>
 800099c:	002b      	movs	r3, r5
 800099e:	e075      	b.n	8000a8c <__aeabi_fadd+0x2c8>
 80009a0:	464c      	mov	r4, r9
 80009a2:	4667      	mov	r7, ip
 80009a4:	2f00      	cmp	r7, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x1e6>
 80009a8:	e789      	b.n	80008be <__aeabi_fadd+0xfa>
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	03d2      	lsls	r2, r2, #15
 80009ae:	433a      	orrs	r2, r7
 80009b0:	0252      	lsls	r2, r2, #9
 80009b2:	20ff      	movs	r0, #255	@ 0xff
 80009b4:	0a52      	lsrs	r2, r2, #9
 80009b6:	e784      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009b8:	1a77      	subs	r7, r6, r1
 80009ba:	017b      	lsls	r3, r7, #5
 80009bc:	d46b      	bmi.n	8000a96 <__aeabi_fadd+0x2d2>
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fadd+0x200>
 80009c2:	e765      	b.n	8000890 <__aeabi_fadd+0xcc>
 80009c4:	2400      	movs	r4, #0
 80009c6:	2000      	movs	r0, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	e77a      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009cc:	22fe      	movs	r2, #254	@ 0xfe
 80009ce:	1c6b      	adds	r3, r5, #1
 80009d0:	421a      	tst	r2, r3
 80009d2:	d149      	bne.n	8000a68 <__aeabi_fadd+0x2a4>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d000      	beq.n	80009da <__aeabi_fadd+0x216>
 80009d8:	e09f      	b.n	8000b1a <__aeabi_fadd+0x356>
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x21c>
 80009de:	e0ba      	b.n	8000b56 <__aeabi_fadd+0x392>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x222>
 80009e4:	e0cf      	b.n	8000b86 <__aeabi_fadd+0x3c2>
 80009e6:	1872      	adds	r2, r6, r1
 80009e8:	0153      	lsls	r3, r2, #5
 80009ea:	d400      	bmi.n	80009ee <__aeabi_fadd+0x22a>
 80009ec:	e0cd      	b.n	8000b8a <__aeabi_fadd+0x3c6>
 80009ee:	0192      	lsls	r2, r2, #6
 80009f0:	2001      	movs	r0, #1
 80009f2:	0a52      	lsrs	r2, r2, #9
 80009f4:	e765      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009f6:	2aff      	cmp	r2, #255	@ 0xff
 80009f8:	d0d2      	beq.n	80009a0 <__aeabi_fadd+0x1dc>
 80009fa:	2080      	movs	r0, #128	@ 0x80
 80009fc:	04c0      	lsls	r0, r0, #19
 80009fe:	4306      	orrs	r6, r0
 8000a00:	2001      	movs	r0, #1
 8000a02:	2b1b      	cmp	r3, #27
 8000a04:	dc08      	bgt.n	8000a18 <__aeabi_fadd+0x254>
 8000a06:	0030      	movs	r0, r6
 8000a08:	2420      	movs	r4, #32
 8000a0a:	40d8      	lsrs	r0, r3
 8000a0c:	1ae3      	subs	r3, r4, r3
 8000a0e:	409e      	lsls	r6, r3
 8000a10:	0033      	movs	r3, r6
 8000a12:	1e5c      	subs	r4, r3, #1
 8000a14:	41a3      	sbcs	r3, r4
 8000a16:	4318      	orrs	r0, r3
 8000a18:	464c      	mov	r4, r9
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	1a0e      	subs	r6, r1, r0
 8000a1e:	e732      	b.n	8000886 <__aeabi_fadd+0xc2>
 8000a20:	0008      	movs	r0, r1
 8000a22:	2220      	movs	r2, #32
 8000a24:	40d8      	lsrs	r0, r3
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	4099      	lsls	r1, r3
 8000a2a:	000b      	movs	r3, r1
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4193      	sbcs	r3, r2
 8000a30:	4303      	orrs	r3, r0
 8000a32:	18f6      	adds	r6, r6, r3
 8000a34:	0173      	lsls	r3, r6, #5
 8000a36:	d59b      	bpl.n	8000970 <__aeabi_fadd+0x1ac>
 8000a38:	3501      	adds	r5, #1
 8000a3a:	2dff      	cmp	r5, #255	@ 0xff
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x27c>
 8000a3e:	e73e      	b.n	80008be <__aeabi_fadd+0xfa>
 8000a40:	2301      	movs	r3, #1
 8000a42:	494d      	ldr	r1, [pc, #308]	@ (8000b78 <__aeabi_fadd+0x3b4>)
 8000a44:	0872      	lsrs	r2, r6, #1
 8000a46:	4033      	ands	r3, r6
 8000a48:	400a      	ands	r2, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	0016      	movs	r6, r2
 8000a4e:	0753      	lsls	r3, r2, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fadd+0x298>
 8000a52:	230f      	movs	r3, #15
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fadd+0x298>
 8000a5a:	e72a      	b.n	80008b2 <__aeabi_fadd+0xee>
 8000a5c:	0173      	lsls	r3, r6, #5
 8000a5e:	d500      	bpl.n	8000a62 <__aeabi_fadd+0x29e>
 8000a60:	e72a      	b.n	80008b8 <__aeabi_fadd+0xf4>
 8000a62:	002b      	movs	r3, r5
 8000a64:	08f7      	lsrs	r7, r6, #3
 8000a66:	e6f7      	b.n	8000858 <__aeabi_fadd+0x94>
 8000a68:	2bff      	cmp	r3, #255	@ 0xff
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fadd+0x2aa>
 8000a6c:	e727      	b.n	80008be <__aeabi_fadd+0xfa>
 8000a6e:	1871      	adds	r1, r6, r1
 8000a70:	0849      	lsrs	r1, r1, #1
 8000a72:	074a      	lsls	r2, r1, #29
 8000a74:	d02f      	beq.n	8000ad6 <__aeabi_fadd+0x312>
 8000a76:	220f      	movs	r2, #15
 8000a78:	400a      	ands	r2, r1
 8000a7a:	2a04      	cmp	r2, #4
 8000a7c:	d02b      	beq.n	8000ad6 <__aeabi_fadd+0x312>
 8000a7e:	1d0e      	adds	r6, r1, #4
 8000a80:	e6e6      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000a82:	2aff      	cmp	r2, #255	@ 0xff
 8000a84:	d08d      	beq.n	80009a2 <__aeabi_fadd+0x1de>
 8000a86:	2080      	movs	r0, #128	@ 0x80
 8000a88:	04c0      	lsls	r0, r0, #19
 8000a8a:	4306      	orrs	r6, r0
 8000a8c:	2b1b      	cmp	r3, #27
 8000a8e:	dd24      	ble.n	8000ada <__aeabi_fadd+0x316>
 8000a90:	0013      	movs	r3, r2
 8000a92:	1d4e      	adds	r6, r1, #5
 8000a94:	e6dc      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000a96:	464c      	mov	r4, r9
 8000a98:	1b8f      	subs	r7, r1, r6
 8000a9a:	e6f9      	b.n	8000890 <__aeabi_fadd+0xcc>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	000e      	movs	r6, r1
 8000aa0:	e6d6      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d149      	bne.n	8000b3a <__aeabi_fadd+0x376>
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d068      	beq.n	8000b7c <__aeabi_fadd+0x3b8>
 8000aaa:	4667      	mov	r7, ip
 8000aac:	464c      	mov	r4, r9
 8000aae:	e77c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000ab0:	1870      	adds	r0, r6, r1
 8000ab2:	0143      	lsls	r3, r0, #5
 8000ab4:	d574      	bpl.n	8000ba0 <__aeabi_fadd+0x3dc>
 8000ab6:	4930      	ldr	r1, [pc, #192]	@ (8000b78 <__aeabi_fadd+0x3b4>)
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	4001      	ands	r1, r0
 8000abc:	0743      	lsls	r3, r0, #29
 8000abe:	d009      	beq.n	8000ad4 <__aeabi_fadd+0x310>
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4003      	ands	r3, r0
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d005      	beq.n	8000ad4 <__aeabi_fadd+0x310>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	1d0e      	adds	r6, r1, #4
 8000acc:	e6c0      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	08cf      	lsrs	r7, r1, #3
 8000ad2:	e6c1      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	08cf      	lsrs	r7, r1, #3
 8000ad8:	e6be      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ada:	2520      	movs	r5, #32
 8000adc:	0030      	movs	r0, r6
 8000ade:	40d8      	lsrs	r0, r3
 8000ae0:	1aeb      	subs	r3, r5, r3
 8000ae2:	409e      	lsls	r6, r3
 8000ae4:	0033      	movs	r3, r6
 8000ae6:	1e5d      	subs	r5, r3, #1
 8000ae8:	41ab      	sbcs	r3, r5
 8000aea:	4303      	orrs	r3, r0
 8000aec:	0015      	movs	r5, r2
 8000aee:	185e      	adds	r6, r3, r1
 8000af0:	e7a0      	b.n	8000a34 <__aeabi_fadd+0x270>
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fadd+0x334>
 8000af6:	e765      	b.n	80009c4 <__aeabi_fadd+0x200>
 8000af8:	464c      	mov	r4, r9
 8000afa:	4667      	mov	r7, ip
 8000afc:	e6ac      	b.n	8000858 <__aeabi_fadd+0x94>
 8000afe:	1b8f      	subs	r7, r1, r6
 8000b00:	017b      	lsls	r3, r7, #5
 8000b02:	d52e      	bpl.n	8000b62 <__aeabi_fadd+0x39e>
 8000b04:	01bf      	lsls	r7, r7, #6
 8000b06:	09bf      	lsrs	r7, r7, #6
 8000b08:	0038      	movs	r0, r7
 8000b0a:	f7ff fd1b 	bl	8000544 <__clzsi2>
 8000b0e:	003b      	movs	r3, r7
 8000b10:	3805      	subs	r0, #5
 8000b12:	4083      	lsls	r3, r0
 8000b14:	464c      	mov	r4, r9
 8000b16:	3501      	adds	r5, #1
 8000b18:	e710      	b.n	800093c <__aeabi_fadd+0x178>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fadd+0x35c>
 8000b1e:	e740      	b.n	80009a2 <__aeabi_fadd+0x1de>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fadd+0x362>
 8000b24:	e741      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	03db      	lsls	r3, r3, #15
 8000b2a:	429f      	cmp	r7, r3
 8000b2c:	d200      	bcs.n	8000b30 <__aeabi_fadd+0x36c>
 8000b2e:	e73c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	d300      	bcc.n	8000b36 <__aeabi_fadd+0x372>
 8000b34:	e739      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b36:	4667      	mov	r7, ip
 8000b38:	e737      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_fadd+0x37c>
 8000b3e:	e734      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	03db      	lsls	r3, r3, #15
 8000b44:	429f      	cmp	r7, r3
 8000b46:	d200      	bcs.n	8000b4a <__aeabi_fadd+0x386>
 8000b48:	e72f      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b4a:	459c      	cmp	ip, r3
 8000b4c:	d300      	bcc.n	8000b50 <__aeabi_fadd+0x38c>
 8000b4e:	e72c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b50:	464c      	mov	r4, r9
 8000b52:	4667      	mov	r7, ip
 8000b54:	e729      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fadd+0x398>
 8000b5a:	e734      	b.n	80009c6 <__aeabi_fadd+0x202>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	08cf      	lsrs	r7, r1, #3
 8000b60:	e67a      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b62:	464c      	mov	r4, r9
 8000b64:	2301      	movs	r3, #1
 8000b66:	08ff      	lsrs	r7, r7, #3
 8000b68:	e676      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b6a:	2f00      	cmp	r7, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fadd+0x3ac>
 8000b6e:	e729      	b.n	80009c4 <__aeabi_fadd+0x200>
 8000b70:	08ff      	lsrs	r7, r7, #3
 8000b72:	e671      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b74:	fbffffff 	.word	0xfbffffff
 8000b78:	7dffffff 	.word	0x7dffffff
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	2400      	movs	r4, #0
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	03d2      	lsls	r2, r2, #15
 8000b84:	e69d      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000b86:	2300      	movs	r3, #0
 8000b88:	e666      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	08d7      	lsrs	r7, r2, #3
 8000b8e:	e663      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b90:	2001      	movs	r0, #1
 8000b92:	0172      	lsls	r2, r6, #5
 8000b94:	d500      	bpl.n	8000b98 <__aeabi_fadd+0x3d4>
 8000b96:	e6e7      	b.n	8000968 <__aeabi_fadd+0x1a4>
 8000b98:	0031      	movs	r1, r6
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	08cf      	lsrs	r7, r1, #3
 8000b9e:	e65b      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	08c7      	lsrs	r7, r0, #3
 8000ba4:	e658      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ba6:	46c0      	nop			@ (mov r8, r8)

08000ba8 <__aeabi_fdiv>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	4646      	mov	r6, r8
 8000bac:	464f      	mov	r7, r9
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	b5c0      	push	{r6, r7, lr}
 8000bb4:	0fc3      	lsrs	r3, r0, #31
 8000bb6:	0047      	lsls	r7, r0, #1
 8000bb8:	4698      	mov	r8, r3
 8000bba:	1c0e      	adds	r6, r1, #0
 8000bbc:	0a6d      	lsrs	r5, r5, #9
 8000bbe:	0e3f      	lsrs	r7, r7, #24
 8000bc0:	d05b      	beq.n	8000c7a <__aeabi_fdiv+0xd2>
 8000bc2:	2fff      	cmp	r7, #255	@ 0xff
 8000bc4:	d021      	beq.n	8000c0a <__aeabi_fdiv+0x62>
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	00ed      	lsls	r5, r5, #3
 8000bca:	04db      	lsls	r3, r3, #19
 8000bcc:	431d      	orrs	r5, r3
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	3f7f      	subs	r7, #127	@ 0x7f
 8000bd6:	0274      	lsls	r4, r6, #9
 8000bd8:	0073      	lsls	r3, r6, #1
 8000bda:	0a64      	lsrs	r4, r4, #9
 8000bdc:	0e1b      	lsrs	r3, r3, #24
 8000bde:	0ff6      	lsrs	r6, r6, #31
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d020      	beq.n	8000c26 <__aeabi_fdiv+0x7e>
 8000be4:	2bff      	cmp	r3, #255	@ 0xff
 8000be6:	d043      	beq.n	8000c70 <__aeabi_fdiv+0xc8>
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	2000      	movs	r0, #0
 8000bec:	00e4      	lsls	r4, r4, #3
 8000bee:	04d2      	lsls	r2, r2, #19
 8000bf0:	4314      	orrs	r4, r2
 8000bf2:	3b7f      	subs	r3, #127	@ 0x7f
 8000bf4:	4642      	mov	r2, r8
 8000bf6:	1aff      	subs	r7, r7, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4072      	eors	r2, r6
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d900      	bls.n	8000c02 <__aeabi_fdiv+0x5a>
 8000c00:	e09d      	b.n	8000d3e <__aeabi_fdiv+0x196>
 8000c02:	4971      	ldr	r1, [pc, #452]	@ (8000dc8 <__aeabi_fdiv+0x220>)
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	58cb      	ldr	r3, [r1, r3]
 8000c08:	469f      	mov	pc, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d15a      	bne.n	8000cc4 <__aeabi_fdiv+0x11c>
 8000c0e:	2308      	movs	r3, #8
 8000c10:	4699      	mov	r9, r3
 8000c12:	3b06      	subs	r3, #6
 8000c14:	0274      	lsls	r4, r6, #9
 8000c16:	469a      	mov	sl, r3
 8000c18:	0073      	lsls	r3, r6, #1
 8000c1a:	27ff      	movs	r7, #255	@ 0xff
 8000c1c:	0a64      	lsrs	r4, r4, #9
 8000c1e:	0e1b      	lsrs	r3, r3, #24
 8000c20:	0ff6      	lsrs	r6, r6, #31
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1de      	bne.n	8000be4 <__aeabi_fdiv+0x3c>
 8000c26:	2c00      	cmp	r4, #0
 8000c28:	d13b      	bne.n	8000ca2 <__aeabi_fdiv+0xfa>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	4072      	eors	r2, r6
 8000c32:	4319      	orrs	r1, r3
 8000c34:	290e      	cmp	r1, #14
 8000c36:	d818      	bhi.n	8000c6a <__aeabi_fdiv+0xc2>
 8000c38:	4864      	ldr	r0, [pc, #400]	@ (8000dcc <__aeabi_fdiv+0x224>)
 8000c3a:	0089      	lsls	r1, r1, #2
 8000c3c:	5841      	ldr	r1, [r0, r1]
 8000c3e:	468f      	mov	pc, r1
 8000c40:	4653      	mov	r3, sl
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fdiv+0xa0>
 8000c46:	e0b8      	b.n	8000dba <__aeabi_fdiv+0x212>
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d06e      	beq.n	8000d2a <__aeabi_fdiv+0x182>
 8000c4c:	4642      	mov	r2, r8
 8000c4e:	002c      	movs	r4, r5
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d140      	bne.n	8000cd6 <__aeabi_fdiv+0x12e>
 8000c54:	2000      	movs	r0, #0
 8000c56:	2400      	movs	r4, #0
 8000c58:	05c0      	lsls	r0, r0, #23
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	07d2      	lsls	r2, r2, #31
 8000c5e:	4310      	orrs	r0, r2
 8000c60:	bce0      	pop	{r5, r6, r7}
 8000c62:	46ba      	mov	sl, r7
 8000c64:	46b1      	mov	r9, r6
 8000c66:	46a8      	mov	r8, r5
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6a:	20ff      	movs	r0, #255	@ 0xff
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	e7f3      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d120      	bne.n	8000cb6 <__aeabi_fdiv+0x10e>
 8000c74:	2302      	movs	r3, #2
 8000c76:	3fff      	subs	r7, #255	@ 0xff
 8000c78:	e7d8      	b.n	8000c2c <__aeabi_fdiv+0x84>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d105      	bne.n	8000c8a <__aeabi_fdiv+0xe2>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	4699      	mov	r9, r3
 8000c82:	3b03      	subs	r3, #3
 8000c84:	2700      	movs	r7, #0
 8000c86:	469a      	mov	sl, r3
 8000c88:	e7a5      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000c8a:	0028      	movs	r0, r5
 8000c8c:	f7ff fc5a 	bl	8000544 <__clzsi2>
 8000c90:	2776      	movs	r7, #118	@ 0x76
 8000c92:	1f43      	subs	r3, r0, #5
 8000c94:	409d      	lsls	r5, r3
 8000c96:	2300      	movs	r3, #0
 8000c98:	427f      	negs	r7, r7
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	469a      	mov	sl, r3
 8000c9e:	1a3f      	subs	r7, r7, r0
 8000ca0:	e799      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fc4e 	bl	8000544 <__clzsi2>
 8000ca8:	1f43      	subs	r3, r0, #5
 8000caa:	409c      	lsls	r4, r3
 8000cac:	2376      	movs	r3, #118	@ 0x76
 8000cae:	425b      	negs	r3, r3
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e79e      	b.n	8000bf4 <__aeabi_fdiv+0x4c>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	464a      	mov	r2, r9
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	4691      	mov	r9, r2
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	33fc      	adds	r3, #252	@ 0xfc
 8000cc2:	e797      	b.n	8000bf4 <__aeabi_fdiv+0x4c>
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	3b09      	subs	r3, #9
 8000cca:	27ff      	movs	r7, #255	@ 0xff
 8000ccc:	469a      	mov	sl, r3
 8000cce:	e782      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000cd0:	2803      	cmp	r0, #3
 8000cd2:	d02c      	beq.n	8000d2e <__aeabi_fdiv+0x186>
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	0038      	movs	r0, r7
 8000cd8:	307f      	adds	r0, #127	@ 0x7f
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dd47      	ble.n	8000d6e <__aeabi_fdiv+0x1c6>
 8000cde:	0763      	lsls	r3, r4, #29
 8000ce0:	d004      	beq.n	8000cec <__aeabi_fdiv+0x144>
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	4023      	ands	r3, r4
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fdiv+0x144>
 8000cea:	3404      	adds	r4, #4
 8000cec:	0123      	lsls	r3, r4, #4
 8000cee:	d503      	bpl.n	8000cf8 <__aeabi_fdiv+0x150>
 8000cf0:	0038      	movs	r0, r7
 8000cf2:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <__aeabi_fdiv+0x228>)
 8000cf4:	3080      	adds	r0, #128	@ 0x80
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	28fe      	cmp	r0, #254	@ 0xfe
 8000cfa:	dcb6      	bgt.n	8000c6a <__aeabi_fdiv+0xc2>
 8000cfc:	01a4      	lsls	r4, r4, #6
 8000cfe:	0a64      	lsrs	r4, r4, #9
 8000d00:	b2c0      	uxtb	r0, r0
 8000d02:	e7a9      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d04:	2480      	movs	r4, #128	@ 0x80
 8000d06:	2200      	movs	r2, #0
 8000d08:	20ff      	movs	r0, #255	@ 0xff
 8000d0a:	03e4      	lsls	r4, r4, #15
 8000d0c:	e7a4      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d0e:	2380      	movs	r3, #128	@ 0x80
 8000d10:	03db      	lsls	r3, r3, #15
 8000d12:	421d      	tst	r5, r3
 8000d14:	d001      	beq.n	8000d1a <__aeabi_fdiv+0x172>
 8000d16:	421c      	tst	r4, r3
 8000d18:	d00b      	beq.n	8000d32 <__aeabi_fdiv+0x18a>
 8000d1a:	2480      	movs	r4, #128	@ 0x80
 8000d1c:	03e4      	lsls	r4, r4, #15
 8000d1e:	432c      	orrs	r4, r5
 8000d20:	0264      	lsls	r4, r4, #9
 8000d22:	4642      	mov	r2, r8
 8000d24:	20ff      	movs	r0, #255	@ 0xff
 8000d26:	0a64      	lsrs	r4, r4, #9
 8000d28:	e796      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d2a:	4646      	mov	r6, r8
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	03db      	lsls	r3, r3, #15
 8000d32:	431c      	orrs	r4, r3
 8000d34:	0264      	lsls	r4, r4, #9
 8000d36:	0032      	movs	r2, r6
 8000d38:	20ff      	movs	r0, #255	@ 0xff
 8000d3a:	0a64      	lsrs	r4, r4, #9
 8000d3c:	e78c      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d3e:	016d      	lsls	r5, r5, #5
 8000d40:	0160      	lsls	r0, r4, #5
 8000d42:	4285      	cmp	r5, r0
 8000d44:	d22d      	bcs.n	8000da2 <__aeabi_fdiv+0x1fa>
 8000d46:	231b      	movs	r3, #27
 8000d48:	2400      	movs	r4, #0
 8000d4a:	3f01      	subs	r7, #1
 8000d4c:	2601      	movs	r6, #1
 8000d4e:	0029      	movs	r1, r5
 8000d50:	0064      	lsls	r4, r4, #1
 8000d52:	006d      	lsls	r5, r5, #1
 8000d54:	2900      	cmp	r1, #0
 8000d56:	db01      	blt.n	8000d5c <__aeabi_fdiv+0x1b4>
 8000d58:	4285      	cmp	r5, r0
 8000d5a:	d301      	bcc.n	8000d60 <__aeabi_fdiv+0x1b8>
 8000d5c:	1a2d      	subs	r5, r5, r0
 8000d5e:	4334      	orrs	r4, r6
 8000d60:	3b01      	subs	r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f3      	bne.n	8000d4e <__aeabi_fdiv+0x1a6>
 8000d66:	1e6b      	subs	r3, r5, #1
 8000d68:	419d      	sbcs	r5, r3
 8000d6a:	432c      	orrs	r4, r5
 8000d6c:	e7b3      	b.n	8000cd6 <__aeabi_fdiv+0x12e>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	1a1b      	subs	r3, r3, r0
 8000d72:	2b1b      	cmp	r3, #27
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_fdiv+0x1d0>
 8000d76:	e76d      	b.n	8000c54 <__aeabi_fdiv+0xac>
 8000d78:	0021      	movs	r1, r4
 8000d7a:	379e      	adds	r7, #158	@ 0x9e
 8000d7c:	40d9      	lsrs	r1, r3
 8000d7e:	40bc      	lsls	r4, r7
 8000d80:	000b      	movs	r3, r1
 8000d82:	1e61      	subs	r1, r4, #1
 8000d84:	418c      	sbcs	r4, r1
 8000d86:	4323      	orrs	r3, r4
 8000d88:	0759      	lsls	r1, r3, #29
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_fdiv+0x1ee>
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	4019      	ands	r1, r3
 8000d90:	2904      	cmp	r1, #4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fdiv+0x1ee>
 8000d94:	3304      	adds	r3, #4
 8000d96:	0159      	lsls	r1, r3, #5
 8000d98:	d413      	bmi.n	8000dc2 <__aeabi_fdiv+0x21a>
 8000d9a:	019b      	lsls	r3, r3, #6
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	0a5c      	lsrs	r4, r3, #9
 8000da0:	e75a      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000da2:	231a      	movs	r3, #26
 8000da4:	2401      	movs	r4, #1
 8000da6:	1a2d      	subs	r5, r5, r0
 8000da8:	e7d0      	b.n	8000d4c <__aeabi_fdiv+0x1a4>
 8000daa:	1e98      	subs	r0, r3, #2
 8000dac:	4243      	negs	r3, r0
 8000dae:	4158      	adcs	r0, r3
 8000db0:	4240      	negs	r0, r0
 8000db2:	0032      	movs	r2, r6
 8000db4:	2400      	movs	r4, #0
 8000db6:	b2c0      	uxtb	r0, r0
 8000db8:	e74e      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dba:	4642      	mov	r2, r8
 8000dbc:	20ff      	movs	r0, #255	@ 0xff
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	e74a      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	e747      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dc8:	0801ccfc 	.word	0x0801ccfc
 8000dcc:	0801cd3c 	.word	0x0801cd3c
 8000dd0:	f7ffffff 	.word	0xf7ffffff

08000dd4 <__eqsf2>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	0042      	lsls	r2, r0, #1
 8000dd8:	024e      	lsls	r6, r1, #9
 8000dda:	004c      	lsls	r4, r1, #1
 8000ddc:	0245      	lsls	r5, r0, #9
 8000dde:	0a6d      	lsrs	r5, r5, #9
 8000de0:	0e12      	lsrs	r2, r2, #24
 8000de2:	0fc3      	lsrs	r3, r0, #31
 8000de4:	0a76      	lsrs	r6, r6, #9
 8000de6:	0e24      	lsrs	r4, r4, #24
 8000de8:	0fc9      	lsrs	r1, r1, #31
 8000dea:	2aff      	cmp	r2, #255	@ 0xff
 8000dec:	d010      	beq.n	8000e10 <__eqsf2+0x3c>
 8000dee:	2cff      	cmp	r4, #255	@ 0xff
 8000df0:	d00c      	beq.n	8000e0c <__eqsf2+0x38>
 8000df2:	2001      	movs	r0, #1
 8000df4:	42a2      	cmp	r2, r4
 8000df6:	d10a      	bne.n	8000e0e <__eqsf2+0x3a>
 8000df8:	42b5      	cmp	r5, r6
 8000dfa:	d108      	bne.n	8000e0e <__eqsf2+0x3a>
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d00f      	beq.n	8000e20 <__eqsf2+0x4c>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d104      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e04:	0028      	movs	r0, r5
 8000e06:	1e43      	subs	r3, r0, #1
 8000e08:	4198      	sbcs	r0, r3
 8000e0a:	e000      	b.n	8000e0e <__eqsf2+0x3a>
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	2001      	movs	r0, #1
 8000e12:	2cff      	cmp	r4, #255	@ 0xff
 8000e14:	d1fb      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e16:	4335      	orrs	r5, r6
 8000e18:	d1f9      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e1a:	404b      	eors	r3, r1
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	e7f6      	b.n	8000e0e <__eqsf2+0x3a>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7f4      	b.n	8000e0e <__eqsf2+0x3a>

08000e24 <__gesf2>:
 8000e24:	b530      	push	{r4, r5, lr}
 8000e26:	0042      	lsls	r2, r0, #1
 8000e28:	0244      	lsls	r4, r0, #9
 8000e2a:	024d      	lsls	r5, r1, #9
 8000e2c:	0fc3      	lsrs	r3, r0, #31
 8000e2e:	0048      	lsls	r0, r1, #1
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	0a6d      	lsrs	r5, r5, #9
 8000e36:	0e00      	lsrs	r0, r0, #24
 8000e38:	0fc9      	lsrs	r1, r1, #31
 8000e3a:	2aff      	cmp	r2, #255	@ 0xff
 8000e3c:	d018      	beq.n	8000e70 <__gesf2+0x4c>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d00a      	beq.n	8000e58 <__gesf2+0x34>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d11e      	bne.n	8000e84 <__gesf2+0x60>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d10a      	bne.n	8000e60 <__gesf2+0x3c>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d029      	beq.n	8000ea2 <__gesf2+0x7e>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d12d      	bne.n	8000eae <__gesf2+0x8a>
 8000e52:	0048      	lsls	r0, r1, #1
 8000e54:	3801      	subs	r0, #1
 8000e56:	bd30      	pop	{r4, r5, pc}
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d125      	bne.n	8000ea8 <__gesf2+0x84>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d101      	bne.n	8000e64 <__gesf2+0x40>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d0f6      	beq.n	8000e52 <__gesf2+0x2e>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d019      	beq.n	8000e9c <__gesf2+0x78>
 8000e68:	2001      	movs	r0, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	4318      	orrs	r0, r3
 8000e6e:	e7f2      	b.n	8000e56 <__gesf2+0x32>
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d119      	bne.n	8000ea8 <__gesf2+0x84>
 8000e74:	28ff      	cmp	r0, #255	@ 0xff
 8000e76:	d1f7      	bne.n	8000e68 <__gesf2+0x44>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d115      	bne.n	8000ea8 <__gesf2+0x84>
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d1f2      	bne.n	8000e68 <__gesf2+0x44>
 8000e82:	e7e8      	b.n	8000e56 <__gesf2+0x32>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d0ef      	beq.n	8000e68 <__gesf2+0x44>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d1ed      	bne.n	8000e68 <__gesf2+0x44>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	dceb      	bgt.n	8000e68 <__gesf2+0x44>
 8000e90:	db04      	blt.n	8000e9c <__gesf2+0x78>
 8000e92:	42ac      	cmp	r4, r5
 8000e94:	d8e8      	bhi.n	8000e68 <__gesf2+0x44>
 8000e96:	2000      	movs	r0, #0
 8000e98:	42ac      	cmp	r4, r5
 8000e9a:	d2dc      	bcs.n	8000e56 <__gesf2+0x32>
 8000e9c:	0058      	lsls	r0, r3, #1
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	e7d9      	b.n	8000e56 <__gesf2+0x32>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0d7      	beq.n	8000e56 <__gesf2+0x32>
 8000ea6:	e7df      	b.n	8000e68 <__gesf2+0x44>
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	4240      	negs	r0, r0
 8000eac:	e7d3      	b.n	8000e56 <__gesf2+0x32>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d1da      	bne.n	8000e68 <__gesf2+0x44>
 8000eb2:	e7ee      	b.n	8000e92 <__gesf2+0x6e>

08000eb4 <__lesf2>:
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	0042      	lsls	r2, r0, #1
 8000eb8:	0244      	lsls	r4, r0, #9
 8000eba:	024d      	lsls	r5, r1, #9
 8000ebc:	0fc3      	lsrs	r3, r0, #31
 8000ebe:	0048      	lsls	r0, r1, #1
 8000ec0:	0a64      	lsrs	r4, r4, #9
 8000ec2:	0e12      	lsrs	r2, r2, #24
 8000ec4:	0a6d      	lsrs	r5, r5, #9
 8000ec6:	0e00      	lsrs	r0, r0, #24
 8000ec8:	0fc9      	lsrs	r1, r1, #31
 8000eca:	2aff      	cmp	r2, #255	@ 0xff
 8000ecc:	d017      	beq.n	8000efe <__lesf2+0x4a>
 8000ece:	28ff      	cmp	r0, #255	@ 0xff
 8000ed0:	d00a      	beq.n	8000ee8 <__lesf2+0x34>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d11b      	bne.n	8000f0e <__lesf2+0x5a>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d10a      	bne.n	8000ef0 <__lesf2+0x3c>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d01d      	beq.n	8000f1a <__lesf2+0x66>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d12d      	bne.n	8000f3e <__lesf2+0x8a>
 8000ee2:	0048      	lsls	r0, r1, #1
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e011      	b.n	8000f0c <__lesf2+0x58>
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d10e      	bne.n	8000f0a <__lesf2+0x56>
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d101      	bne.n	8000ef4 <__lesf2+0x40>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0f6      	beq.n	8000ee2 <__lesf2+0x2e>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d10c      	bne.n	8000f12 <__lesf2+0x5e>
 8000ef8:	0058      	lsls	r0, r3, #1
 8000efa:	3801      	subs	r0, #1
 8000efc:	e006      	b.n	8000f0c <__lesf2+0x58>
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d103      	bne.n	8000f0a <__lesf2+0x56>
 8000f02:	28ff      	cmp	r0, #255	@ 0xff
 8000f04:	d105      	bne.n	8000f12 <__lesf2+0x5e>
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	d015      	beq.n	8000f36 <__lesf2+0x82>
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	bd30      	pop	{r4, r5, pc}
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d106      	bne.n	8000f20 <__lesf2+0x6c>
 8000f12:	2001      	movs	r0, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	4318      	orrs	r0, r3
 8000f18:	e7f8      	b.n	8000f0c <__lesf2+0x58>
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d0f6      	beq.n	8000f0c <__lesf2+0x58>
 8000f1e:	e7f8      	b.n	8000f12 <__lesf2+0x5e>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d1f6      	bne.n	8000f12 <__lesf2+0x5e>
 8000f24:	4282      	cmp	r2, r0
 8000f26:	dcf4      	bgt.n	8000f12 <__lesf2+0x5e>
 8000f28:	dbe6      	blt.n	8000ef8 <__lesf2+0x44>
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	d8f1      	bhi.n	8000f12 <__lesf2+0x5e>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	42ac      	cmp	r4, r5
 8000f32:	d2eb      	bcs.n	8000f0c <__lesf2+0x58>
 8000f34:	e7e0      	b.n	8000ef8 <__lesf2+0x44>
 8000f36:	2000      	movs	r0, #0
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	d1ea      	bne.n	8000f12 <__lesf2+0x5e>
 8000f3c:	e7e6      	b.n	8000f0c <__lesf2+0x58>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d1e7      	bne.n	8000f12 <__lesf2+0x5e>
 8000f42:	e7f2      	b.n	8000f2a <__lesf2+0x76>

08000f44 <__aeabi_fmul>:
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	464f      	mov	r7, r9
 8000f48:	4646      	mov	r6, r8
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	0044      	lsls	r4, r0, #1
 8000f4e:	b5c0      	push	{r6, r7, lr}
 8000f50:	0246      	lsls	r6, r0, #9
 8000f52:	1c0f      	adds	r7, r1, #0
 8000f54:	0a76      	lsrs	r6, r6, #9
 8000f56:	0e24      	lsrs	r4, r4, #24
 8000f58:	0fc5      	lsrs	r5, r0, #31
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fmul+0x1c>
 8000f5e:	e0da      	b.n	8001116 <__aeabi_fmul+0x1d2>
 8000f60:	2cff      	cmp	r4, #255	@ 0xff
 8000f62:	d074      	beq.n	800104e <__aeabi_fmul+0x10a>
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	00f6      	lsls	r6, r6, #3
 8000f68:	04db      	lsls	r3, r3, #19
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4699      	mov	r9, r3
 8000f70:	469a      	mov	sl, r3
 8000f72:	3c7f      	subs	r4, #127	@ 0x7f
 8000f74:	027b      	lsls	r3, r7, #9
 8000f76:	0a5b      	lsrs	r3, r3, #9
 8000f78:	4698      	mov	r8, r3
 8000f7a:	007b      	lsls	r3, r7, #1
 8000f7c:	0e1b      	lsrs	r3, r3, #24
 8000f7e:	0fff      	lsrs	r7, r7, #31
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d074      	beq.n	800106e <__aeabi_fmul+0x12a>
 8000f84:	2bff      	cmp	r3, #255	@ 0xff
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fmul+0x46>
 8000f88:	e08e      	b.n	80010a8 <__aeabi_fmul+0x164>
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	00d2      	lsls	r2, r2, #3
 8000f90:	04c9      	lsls	r1, r1, #19
 8000f92:	4311      	orrs	r1, r2
 8000f94:	3b7f      	subs	r3, #127	@ 0x7f
 8000f96:	002a      	movs	r2, r5
 8000f98:	18e4      	adds	r4, r4, r3
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	407a      	eors	r2, r7
 8000f9e:	4688      	mov	r8, r1
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	dc75      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	2000      	movs	r0, #0
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dd0f      	ble.n	8000fce <__aeabi_fmul+0x8a>
 8000fae:	4649      	mov	r1, r9
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	408b      	lsls	r3, r1
 8000fb4:	21a6      	movs	r1, #166	@ 0xa6
 8000fb6:	00c9      	lsls	r1, r1, #3
 8000fb8:	420b      	tst	r3, r1
 8000fba:	d169      	bne.n	8001090 <__aeabi_fmul+0x14c>
 8000fbc:	2190      	movs	r1, #144	@ 0x90
 8000fbe:	0089      	lsls	r1, r1, #2
 8000fc0:	420b      	tst	r3, r1
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0x82>
 8000fc4:	e100      	b.n	80011c8 <__aeabi_fmul+0x284>
 8000fc6:	2188      	movs	r1, #136	@ 0x88
 8000fc8:	4219      	tst	r1, r3
 8000fca:	d000      	beq.n	8000fce <__aeabi_fmul+0x8a>
 8000fcc:	e0f5      	b.n	80011ba <__aeabi_fmul+0x276>
 8000fce:	4641      	mov	r1, r8
 8000fd0:	0409      	lsls	r1, r1, #16
 8000fd2:	0c09      	lsrs	r1, r1, #16
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	0008      	movs	r0, r1
 8000fd8:	0c35      	lsrs	r5, r6, #16
 8000fda:	0436      	lsls	r6, r6, #16
 8000fdc:	0c1b      	lsrs	r3, r3, #16
 8000fde:	0c36      	lsrs	r6, r6, #16
 8000fe0:	4370      	muls	r0, r6
 8000fe2:	4369      	muls	r1, r5
 8000fe4:	435e      	muls	r6, r3
 8000fe6:	435d      	muls	r5, r3
 8000fe8:	1876      	adds	r6, r6, r1
 8000fea:	0c03      	lsrs	r3, r0, #16
 8000fec:	199b      	adds	r3, r3, r6
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d903      	bls.n	8000ffa <__aeabi_fmul+0xb6>
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	0249      	lsls	r1, r1, #9
 8000ff6:	468c      	mov	ip, r1
 8000ff8:	4465      	add	r5, ip
 8000ffa:	0400      	lsls	r0, r0, #16
 8000ffc:	0419      	lsls	r1, r3, #16
 8000ffe:	0c00      	lsrs	r0, r0, #16
 8001000:	1809      	adds	r1, r1, r0
 8001002:	018e      	lsls	r6, r1, #6
 8001004:	1e70      	subs	r0, r6, #1
 8001006:	4186      	sbcs	r6, r0
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	0e89      	lsrs	r1, r1, #26
 800100c:	195b      	adds	r3, r3, r5
 800100e:	430e      	orrs	r6, r1
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	431e      	orrs	r6, r3
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	d46c      	bmi.n	80010f2 <__aeabi_fmul+0x1ae>
 8001018:	0023      	movs	r3, r4
 800101a:	337f      	adds	r3, #127	@ 0x7f
 800101c:	2b00      	cmp	r3, #0
 800101e:	dc00      	bgt.n	8001022 <__aeabi_fmul+0xde>
 8001020:	e0b1      	b.n	8001186 <__aeabi_fmul+0x242>
 8001022:	0015      	movs	r5, r2
 8001024:	0771      	lsls	r1, r6, #29
 8001026:	d00b      	beq.n	8001040 <__aeabi_fmul+0xfc>
 8001028:	200f      	movs	r0, #15
 800102a:	0021      	movs	r1, r4
 800102c:	4030      	ands	r0, r6
 800102e:	2804      	cmp	r0, #4
 8001030:	d006      	beq.n	8001040 <__aeabi_fmul+0xfc>
 8001032:	3604      	adds	r6, #4
 8001034:	0132      	lsls	r2, r6, #4
 8001036:	d503      	bpl.n	8001040 <__aeabi_fmul+0xfc>
 8001038:	4b6e      	ldr	r3, [pc, #440]	@ (80011f4 <__aeabi_fmul+0x2b0>)
 800103a:	401e      	ands	r6, r3
 800103c:	000b      	movs	r3, r1
 800103e:	3380      	adds	r3, #128	@ 0x80
 8001040:	2bfe      	cmp	r3, #254	@ 0xfe
 8001042:	dd00      	ble.n	8001046 <__aeabi_fmul+0x102>
 8001044:	e0bd      	b.n	80011c2 <__aeabi_fmul+0x27e>
 8001046:	01b2      	lsls	r2, r6, #6
 8001048:	0a52      	lsrs	r2, r2, #9
 800104a:	b2db      	uxtb	r3, r3
 800104c:	e048      	b.n	80010e0 <__aeabi_fmul+0x19c>
 800104e:	2e00      	cmp	r6, #0
 8001050:	d000      	beq.n	8001054 <__aeabi_fmul+0x110>
 8001052:	e092      	b.n	800117a <__aeabi_fmul+0x236>
 8001054:	2308      	movs	r3, #8
 8001056:	4699      	mov	r9, r3
 8001058:	3b06      	subs	r3, #6
 800105a:	469a      	mov	sl, r3
 800105c:	027b      	lsls	r3, r7, #9
 800105e:	0a5b      	lsrs	r3, r3, #9
 8001060:	4698      	mov	r8, r3
 8001062:	007b      	lsls	r3, r7, #1
 8001064:	24ff      	movs	r4, #255	@ 0xff
 8001066:	0e1b      	lsrs	r3, r3, #24
 8001068:	0fff      	lsrs	r7, r7, #31
 800106a:	2b00      	cmp	r3, #0
 800106c:	d18a      	bne.n	8000f84 <__aeabi_fmul+0x40>
 800106e:	4642      	mov	r2, r8
 8001070:	2a00      	cmp	r2, #0
 8001072:	d164      	bne.n	800113e <__aeabi_fmul+0x1fa>
 8001074:	4649      	mov	r1, r9
 8001076:	3201      	adds	r2, #1
 8001078:	4311      	orrs	r1, r2
 800107a:	4689      	mov	r9, r1
 800107c:	290a      	cmp	r1, #10
 800107e:	dc08      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 8001080:	407d      	eors	r5, r7
 8001082:	2001      	movs	r0, #1
 8001084:	b2ea      	uxtb	r2, r5
 8001086:	2902      	cmp	r1, #2
 8001088:	dc91      	bgt.n	8000fae <__aeabi_fmul+0x6a>
 800108a:	0015      	movs	r5, r2
 800108c:	2200      	movs	r2, #0
 800108e:	e027      	b.n	80010e0 <__aeabi_fmul+0x19c>
 8001090:	0015      	movs	r5, r2
 8001092:	4653      	mov	r3, sl
 8001094:	2b02      	cmp	r3, #2
 8001096:	d100      	bne.n	800109a <__aeabi_fmul+0x156>
 8001098:	e093      	b.n	80011c2 <__aeabi_fmul+0x27e>
 800109a:	2b03      	cmp	r3, #3
 800109c:	d01a      	beq.n	80010d4 <__aeabi_fmul+0x190>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d12c      	bne.n	80010fc <__aeabi_fmul+0x1b8>
 80010a2:	2300      	movs	r3, #0
 80010a4:	2200      	movs	r2, #0
 80010a6:	e01b      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80010a8:	4643      	mov	r3, r8
 80010aa:	34ff      	adds	r4, #255	@ 0xff
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d055      	beq.n	800115c <__aeabi_fmul+0x218>
 80010b0:	2103      	movs	r1, #3
 80010b2:	464b      	mov	r3, r9
 80010b4:	430b      	orrs	r3, r1
 80010b6:	0019      	movs	r1, r3
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	dc00      	bgt.n	80010be <__aeabi_fmul+0x17a>
 80010bc:	e092      	b.n	80011e4 <__aeabi_fmul+0x2a0>
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fmul+0x180>
 80010c2:	e08c      	b.n	80011de <__aeabi_fmul+0x29a>
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	03d2      	lsls	r2, r2, #15
 80010c8:	4216      	tst	r6, r2
 80010ca:	d003      	beq.n	80010d4 <__aeabi_fmul+0x190>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4213      	tst	r3, r2
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fmul+0x190>
 80010d2:	e07d      	b.n	80011d0 <__aeabi_fmul+0x28c>
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	03d2      	lsls	r2, r2, #15
 80010d8:	4332      	orrs	r2, r6
 80010da:	0252      	lsls	r2, r2, #9
 80010dc:	0a52      	lsrs	r2, r2, #9
 80010de:	23ff      	movs	r3, #255	@ 0xff
 80010e0:	05d8      	lsls	r0, r3, #23
 80010e2:	07ed      	lsls	r5, r5, #31
 80010e4:	4310      	orrs	r0, r2
 80010e6:	4328      	orrs	r0, r5
 80010e8:	bce0      	pop	{r5, r6, r7}
 80010ea:	46ba      	mov	sl, r7
 80010ec:	46b1      	mov	r9, r6
 80010ee:	46a8      	mov	r8, r5
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f2:	2301      	movs	r3, #1
 80010f4:	0015      	movs	r5, r2
 80010f6:	0871      	lsrs	r1, r6, #1
 80010f8:	401e      	ands	r6, r3
 80010fa:	430e      	orrs	r6, r1
 80010fc:	0023      	movs	r3, r4
 80010fe:	3380      	adds	r3, #128	@ 0x80
 8001100:	1c61      	adds	r1, r4, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	dd41      	ble.n	800118a <__aeabi_fmul+0x246>
 8001106:	0772      	lsls	r2, r6, #29
 8001108:	d094      	beq.n	8001034 <__aeabi_fmul+0xf0>
 800110a:	220f      	movs	r2, #15
 800110c:	4032      	ands	r2, r6
 800110e:	2a04      	cmp	r2, #4
 8001110:	d000      	beq.n	8001114 <__aeabi_fmul+0x1d0>
 8001112:	e78e      	b.n	8001032 <__aeabi_fmul+0xee>
 8001114:	e78e      	b.n	8001034 <__aeabi_fmul+0xf0>
 8001116:	2e00      	cmp	r6, #0
 8001118:	d105      	bne.n	8001126 <__aeabi_fmul+0x1e2>
 800111a:	2304      	movs	r3, #4
 800111c:	4699      	mov	r9, r3
 800111e:	3b03      	subs	r3, #3
 8001120:	2400      	movs	r4, #0
 8001122:	469a      	mov	sl, r3
 8001124:	e726      	b.n	8000f74 <__aeabi_fmul+0x30>
 8001126:	0030      	movs	r0, r6
 8001128:	f7ff fa0c 	bl	8000544 <__clzsi2>
 800112c:	2476      	movs	r4, #118	@ 0x76
 800112e:	1f43      	subs	r3, r0, #5
 8001130:	409e      	lsls	r6, r3
 8001132:	2300      	movs	r3, #0
 8001134:	4264      	negs	r4, r4
 8001136:	4699      	mov	r9, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a24      	subs	r4, r4, r0
 800113c:	e71a      	b.n	8000f74 <__aeabi_fmul+0x30>
 800113e:	4640      	mov	r0, r8
 8001140:	f7ff fa00 	bl	8000544 <__clzsi2>
 8001144:	464b      	mov	r3, r9
 8001146:	1a24      	subs	r4, r4, r0
 8001148:	3c76      	subs	r4, #118	@ 0x76
 800114a:	2b0a      	cmp	r3, #10
 800114c:	dca1      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 800114e:	4643      	mov	r3, r8
 8001150:	3805      	subs	r0, #5
 8001152:	4083      	lsls	r3, r0
 8001154:	407d      	eors	r5, r7
 8001156:	4698      	mov	r8, r3
 8001158:	b2ea      	uxtb	r2, r5
 800115a:	e724      	b.n	8000fa6 <__aeabi_fmul+0x62>
 800115c:	464a      	mov	r2, r9
 800115e:	3302      	adds	r3, #2
 8001160:	4313      	orrs	r3, r2
 8001162:	002a      	movs	r2, r5
 8001164:	407a      	eors	r2, r7
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	2b0a      	cmp	r3, #10
 800116a:	dc92      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 800116c:	4649      	mov	r1, r9
 800116e:	0015      	movs	r5, r2
 8001170:	2900      	cmp	r1, #0
 8001172:	d026      	beq.n	80011c2 <__aeabi_fmul+0x27e>
 8001174:	4699      	mov	r9, r3
 8001176:	2002      	movs	r0, #2
 8001178:	e719      	b.n	8000fae <__aeabi_fmul+0x6a>
 800117a:	230c      	movs	r3, #12
 800117c:	4699      	mov	r9, r3
 800117e:	3b09      	subs	r3, #9
 8001180:	24ff      	movs	r4, #255	@ 0xff
 8001182:	469a      	mov	sl, r3
 8001184:	e6f6      	b.n	8000f74 <__aeabi_fmul+0x30>
 8001186:	0015      	movs	r5, r2
 8001188:	0021      	movs	r1, r4
 800118a:	2201      	movs	r2, #1
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b1b      	cmp	r3, #27
 8001190:	dd00      	ble.n	8001194 <__aeabi_fmul+0x250>
 8001192:	e786      	b.n	80010a2 <__aeabi_fmul+0x15e>
 8001194:	319e      	adds	r1, #158	@ 0x9e
 8001196:	0032      	movs	r2, r6
 8001198:	408e      	lsls	r6, r1
 800119a:	40da      	lsrs	r2, r3
 800119c:	1e73      	subs	r3, r6, #1
 800119e:	419e      	sbcs	r6, r3
 80011a0:	4332      	orrs	r2, r6
 80011a2:	0753      	lsls	r3, r2, #29
 80011a4:	d004      	beq.n	80011b0 <__aeabi_fmul+0x26c>
 80011a6:	230f      	movs	r3, #15
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fmul+0x26c>
 80011ae:	3204      	adds	r2, #4
 80011b0:	0153      	lsls	r3, r2, #5
 80011b2:	d510      	bpl.n	80011d6 <__aeabi_fmul+0x292>
 80011b4:	2301      	movs	r3, #1
 80011b6:	2200      	movs	r2, #0
 80011b8:	e792      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011ba:	003d      	movs	r5, r7
 80011bc:	4646      	mov	r6, r8
 80011be:	4682      	mov	sl, r0
 80011c0:	e767      	b.n	8001092 <__aeabi_fmul+0x14e>
 80011c2:	23ff      	movs	r3, #255	@ 0xff
 80011c4:	2200      	movs	r2, #0
 80011c6:	e78b      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	2500      	movs	r5, #0
 80011cc:	03d2      	lsls	r2, r2, #15
 80011ce:	e786      	b.n	80010de <__aeabi_fmul+0x19a>
 80011d0:	003d      	movs	r5, r7
 80011d2:	431a      	orrs	r2, r3
 80011d4:	e783      	b.n	80010de <__aeabi_fmul+0x19a>
 80011d6:	0192      	lsls	r2, r2, #6
 80011d8:	2300      	movs	r3, #0
 80011da:	0a52      	lsrs	r2, r2, #9
 80011dc:	e780      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011de:	003d      	movs	r5, r7
 80011e0:	4646      	mov	r6, r8
 80011e2:	e777      	b.n	80010d4 <__aeabi_fmul+0x190>
 80011e4:	002a      	movs	r2, r5
 80011e6:	2301      	movs	r3, #1
 80011e8:	407a      	eors	r2, r7
 80011ea:	408b      	lsls	r3, r1
 80011ec:	2003      	movs	r0, #3
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	e6e9      	b.n	8000fc6 <__aeabi_fmul+0x82>
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	f7ffffff 	.word	0xf7ffffff

080011f8 <__aeabi_fsub>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	4647      	mov	r7, r8
 80011fc:	46ce      	mov	lr, r9
 80011fe:	0243      	lsls	r3, r0, #9
 8001200:	b580      	push	{r7, lr}
 8001202:	0a5f      	lsrs	r7, r3, #9
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	0045      	lsls	r5, r0, #1
 8001208:	004a      	lsls	r2, r1, #1
 800120a:	469c      	mov	ip, r3
 800120c:	024b      	lsls	r3, r1, #9
 800120e:	0fc4      	lsrs	r4, r0, #31
 8001210:	0fce      	lsrs	r6, r1, #31
 8001212:	0e2d      	lsrs	r5, r5, #24
 8001214:	0a58      	lsrs	r0, r3, #9
 8001216:	0e12      	lsrs	r2, r2, #24
 8001218:	0999      	lsrs	r1, r3, #6
 800121a:	2aff      	cmp	r2, #255	@ 0xff
 800121c:	d06b      	beq.n	80012f6 <__aeabi_fsub+0xfe>
 800121e:	2301      	movs	r3, #1
 8001220:	405e      	eors	r6, r3
 8001222:	1aab      	subs	r3, r5, r2
 8001224:	42b4      	cmp	r4, r6
 8001226:	d04b      	beq.n	80012c0 <__aeabi_fsub+0xc8>
 8001228:	2b00      	cmp	r3, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_fsub+0x36>
 800122c:	e0ff      	b.n	800142e <__aeabi_fsub+0x236>
 800122e:	2a00      	cmp	r2, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_fsub+0x3c>
 8001232:	e088      	b.n	8001346 <__aeabi_fsub+0x14e>
 8001234:	2dff      	cmp	r5, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x42>
 8001238:	e0ef      	b.n	800141a <__aeabi_fsub+0x222>
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	04d2      	lsls	r2, r2, #19
 800123e:	4311      	orrs	r1, r2
 8001240:	2001      	movs	r0, #1
 8001242:	2b1b      	cmp	r3, #27
 8001244:	dc08      	bgt.n	8001258 <__aeabi_fsub+0x60>
 8001246:	0008      	movs	r0, r1
 8001248:	2220      	movs	r2, #32
 800124a:	40d8      	lsrs	r0, r3
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4099      	lsls	r1, r3
 8001250:	000b      	movs	r3, r1
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	4193      	sbcs	r3, r2
 8001256:	4318      	orrs	r0, r3
 8001258:	4663      	mov	r3, ip
 800125a:	1a1b      	subs	r3, r3, r0
 800125c:	469c      	mov	ip, r3
 800125e:	4663      	mov	r3, ip
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	d400      	bmi.n	8001266 <__aeabi_fsub+0x6e>
 8001264:	e0cd      	b.n	8001402 <__aeabi_fsub+0x20a>
 8001266:	4663      	mov	r3, ip
 8001268:	019f      	lsls	r7, r3, #6
 800126a:	09bf      	lsrs	r7, r7, #6
 800126c:	0038      	movs	r0, r7
 800126e:	f7ff f969 	bl	8000544 <__clzsi2>
 8001272:	003b      	movs	r3, r7
 8001274:	3805      	subs	r0, #5
 8001276:	4083      	lsls	r3, r0
 8001278:	4285      	cmp	r5, r0
 800127a:	dc00      	bgt.n	800127e <__aeabi_fsub+0x86>
 800127c:	e0a2      	b.n	80013c4 <__aeabi_fsub+0x1cc>
 800127e:	4ab7      	ldr	r2, [pc, #732]	@ (800155c <__aeabi_fsub+0x364>)
 8001280:	1a2d      	subs	r5, r5, r0
 8001282:	401a      	ands	r2, r3
 8001284:	4694      	mov	ip, r2
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x94>
 800128a:	e0c3      	b.n	8001414 <__aeabi_fsub+0x21c>
 800128c:	220f      	movs	r2, #15
 800128e:	4013      	ands	r3, r2
 8001290:	2b04      	cmp	r3, #4
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x9e>
 8001294:	e0be      	b.n	8001414 <__aeabi_fsub+0x21c>
 8001296:	2304      	movs	r3, #4
 8001298:	4698      	mov	r8, r3
 800129a:	44c4      	add	ip, r8
 800129c:	4663      	mov	r3, ip
 800129e:	015b      	lsls	r3, r3, #5
 80012a0:	d400      	bmi.n	80012a4 <__aeabi_fsub+0xac>
 80012a2:	e0b7      	b.n	8001414 <__aeabi_fsub+0x21c>
 80012a4:	1c68      	adds	r0, r5, #1
 80012a6:	2dfe      	cmp	r5, #254	@ 0xfe
 80012a8:	d000      	beq.n	80012ac <__aeabi_fsub+0xb4>
 80012aa:	e0a5      	b.n	80013f8 <__aeabi_fsub+0x200>
 80012ac:	20ff      	movs	r0, #255	@ 0xff
 80012ae:	2200      	movs	r2, #0
 80012b0:	05c0      	lsls	r0, r0, #23
 80012b2:	4310      	orrs	r0, r2
 80012b4:	07e4      	lsls	r4, r4, #31
 80012b6:	4320      	orrs	r0, r4
 80012b8:	bcc0      	pop	{r6, r7}
 80012ba:	46b9      	mov	r9, r7
 80012bc:	46b0      	mov	r8, r6
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_fsub+0xce>
 80012c4:	e1eb      	b.n	800169e <__aeabi_fsub+0x4a6>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d046      	beq.n	8001358 <__aeabi_fsub+0x160>
 80012ca:	2dff      	cmp	r5, #255	@ 0xff
 80012cc:	d100      	bne.n	80012d0 <__aeabi_fsub+0xd8>
 80012ce:	e0a4      	b.n	800141a <__aeabi_fsub+0x222>
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	04d2      	lsls	r2, r2, #19
 80012d4:	4311      	orrs	r1, r2
 80012d6:	2b1b      	cmp	r3, #27
 80012d8:	dc00      	bgt.n	80012dc <__aeabi_fsub+0xe4>
 80012da:	e0fb      	b.n	80014d4 <__aeabi_fsub+0x2dc>
 80012dc:	2305      	movs	r3, #5
 80012de:	4698      	mov	r8, r3
 80012e0:	002b      	movs	r3, r5
 80012e2:	44c4      	add	ip, r8
 80012e4:	4662      	mov	r2, ip
 80012e6:	08d7      	lsrs	r7, r2, #3
 80012e8:	2bff      	cmp	r3, #255	@ 0xff
 80012ea:	d100      	bne.n	80012ee <__aeabi_fsub+0xf6>
 80012ec:	e095      	b.n	800141a <__aeabi_fsub+0x222>
 80012ee:	027a      	lsls	r2, r7, #9
 80012f0:	0a52      	lsrs	r2, r2, #9
 80012f2:	b2d8      	uxtb	r0, r3
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80012f6:	002b      	movs	r3, r5
 80012f8:	3bff      	subs	r3, #255	@ 0xff
 80012fa:	4699      	mov	r9, r3
 80012fc:	2900      	cmp	r1, #0
 80012fe:	d118      	bne.n	8001332 <__aeabi_fsub+0x13a>
 8001300:	2301      	movs	r3, #1
 8001302:	405e      	eors	r6, r3
 8001304:	42b4      	cmp	r4, r6
 8001306:	d100      	bne.n	800130a <__aeabi_fsub+0x112>
 8001308:	e0ca      	b.n	80014a0 <__aeabi_fsub+0x2a8>
 800130a:	464b      	mov	r3, r9
 800130c:	2b00      	cmp	r3, #0
 800130e:	d02d      	beq.n	800136c <__aeabi_fsub+0x174>
 8001310:	2d00      	cmp	r5, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_fsub+0x11e>
 8001314:	e13c      	b.n	8001590 <__aeabi_fsub+0x398>
 8001316:	23ff      	movs	r3, #255	@ 0xff
 8001318:	4664      	mov	r4, ip
 800131a:	2c00      	cmp	r4, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x128>
 800131e:	e15f      	b.n	80015e0 <__aeabi_fsub+0x3e8>
 8001320:	1e5d      	subs	r5, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d100      	bne.n	8001328 <__aeabi_fsub+0x130>
 8001326:	e174      	b.n	8001612 <__aeabi_fsub+0x41a>
 8001328:	0034      	movs	r4, r6
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d074      	beq.n	8001418 <__aeabi_fsub+0x220>
 800132e:	002b      	movs	r3, r5
 8001330:	e103      	b.n	800153a <__aeabi_fsub+0x342>
 8001332:	42b4      	cmp	r4, r6
 8001334:	d100      	bne.n	8001338 <__aeabi_fsub+0x140>
 8001336:	e09c      	b.n	8001472 <__aeabi_fsub+0x27a>
 8001338:	2b00      	cmp	r3, #0
 800133a:	d017      	beq.n	800136c <__aeabi_fsub+0x174>
 800133c:	2d00      	cmp	r5, #0
 800133e:	d0ea      	beq.n	8001316 <__aeabi_fsub+0x11e>
 8001340:	0007      	movs	r7, r0
 8001342:	0034      	movs	r4, r6
 8001344:	e06c      	b.n	8001420 <__aeabi_fsub+0x228>
 8001346:	2900      	cmp	r1, #0
 8001348:	d0cc      	beq.n	80012e4 <__aeabi_fsub+0xec>
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d02b      	beq.n	80013a8 <__aeabi_fsub+0x1b0>
 8001350:	2bff      	cmp	r3, #255	@ 0xff
 8001352:	d062      	beq.n	800141a <__aeabi_fsub+0x222>
 8001354:	0013      	movs	r3, r2
 8001356:	e773      	b.n	8001240 <__aeabi_fsub+0x48>
 8001358:	2900      	cmp	r1, #0
 800135a:	d0c3      	beq.n	80012e4 <__aeabi_fsub+0xec>
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d100      	bne.n	8001364 <__aeabi_fsub+0x16c>
 8001362:	e11e      	b.n	80015a2 <__aeabi_fsub+0x3aa>
 8001364:	2bff      	cmp	r3, #255	@ 0xff
 8001366:	d058      	beq.n	800141a <__aeabi_fsub+0x222>
 8001368:	0013      	movs	r3, r2
 800136a:	e7b4      	b.n	80012d6 <__aeabi_fsub+0xde>
 800136c:	22fe      	movs	r2, #254	@ 0xfe
 800136e:	1c6b      	adds	r3, r5, #1
 8001370:	421a      	tst	r2, r3
 8001372:	d10d      	bne.n	8001390 <__aeabi_fsub+0x198>
 8001374:	2d00      	cmp	r5, #0
 8001376:	d060      	beq.n	800143a <__aeabi_fsub+0x242>
 8001378:	4663      	mov	r3, ip
 800137a:	2b00      	cmp	r3, #0
 800137c:	d000      	beq.n	8001380 <__aeabi_fsub+0x188>
 800137e:	e120      	b.n	80015c2 <__aeabi_fsub+0x3ca>
 8001380:	2900      	cmp	r1, #0
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x18e>
 8001384:	e128      	b.n	80015d8 <__aeabi_fsub+0x3e0>
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	2400      	movs	r4, #0
 800138a:	20ff      	movs	r0, #255	@ 0xff
 800138c:	03d2      	lsls	r2, r2, #15
 800138e:	e78f      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001390:	4663      	mov	r3, ip
 8001392:	1a5f      	subs	r7, r3, r1
 8001394:	017b      	lsls	r3, r7, #5
 8001396:	d500      	bpl.n	800139a <__aeabi_fsub+0x1a2>
 8001398:	e0fe      	b.n	8001598 <__aeabi_fsub+0x3a0>
 800139a:	2f00      	cmp	r7, #0
 800139c:	d000      	beq.n	80013a0 <__aeabi_fsub+0x1a8>
 800139e:	e765      	b.n	800126c <__aeabi_fsub+0x74>
 80013a0:	2400      	movs	r4, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	2200      	movs	r2, #0
 80013a6:	e783      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80013a8:	4663      	mov	r3, ip
 80013aa:	1a59      	subs	r1, r3, r1
 80013ac:	014b      	lsls	r3, r1, #5
 80013ae:	d400      	bmi.n	80013b2 <__aeabi_fsub+0x1ba>
 80013b0:	e119      	b.n	80015e6 <__aeabi_fsub+0x3ee>
 80013b2:	018f      	lsls	r7, r1, #6
 80013b4:	09bf      	lsrs	r7, r7, #6
 80013b6:	0038      	movs	r0, r7
 80013b8:	f7ff f8c4 	bl	8000544 <__clzsi2>
 80013bc:	003b      	movs	r3, r7
 80013be:	3805      	subs	r0, #5
 80013c0:	4083      	lsls	r3, r0
 80013c2:	2501      	movs	r5, #1
 80013c4:	2220      	movs	r2, #32
 80013c6:	1b40      	subs	r0, r0, r5
 80013c8:	3001      	adds	r0, #1
 80013ca:	1a12      	subs	r2, r2, r0
 80013cc:	0019      	movs	r1, r3
 80013ce:	4093      	lsls	r3, r2
 80013d0:	40c1      	lsrs	r1, r0
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	4193      	sbcs	r3, r2
 80013d6:	4319      	orrs	r1, r3
 80013d8:	468c      	mov	ip, r1
 80013da:	1e0b      	subs	r3, r1, #0
 80013dc:	d0e1      	beq.n	80013a2 <__aeabi_fsub+0x1aa>
 80013de:	075b      	lsls	r3, r3, #29
 80013e0:	d100      	bne.n	80013e4 <__aeabi_fsub+0x1ec>
 80013e2:	e152      	b.n	800168a <__aeabi_fsub+0x492>
 80013e4:	230f      	movs	r3, #15
 80013e6:	2500      	movs	r5, #0
 80013e8:	400b      	ands	r3, r1
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d000      	beq.n	80013f0 <__aeabi_fsub+0x1f8>
 80013ee:	e752      	b.n	8001296 <__aeabi_fsub+0x9e>
 80013f0:	2001      	movs	r0, #1
 80013f2:	014a      	lsls	r2, r1, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x200>
 80013f6:	e092      	b.n	800151e <__aeabi_fsub+0x326>
 80013f8:	b2c0      	uxtb	r0, r0
 80013fa:	4663      	mov	r3, ip
 80013fc:	019a      	lsls	r2, r3, #6
 80013fe:	0a52      	lsrs	r2, r2, #9
 8001400:	e756      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001402:	4663      	mov	r3, ip
 8001404:	075b      	lsls	r3, r3, #29
 8001406:	d005      	beq.n	8001414 <__aeabi_fsub+0x21c>
 8001408:	230f      	movs	r3, #15
 800140a:	4662      	mov	r2, ip
 800140c:	4013      	ands	r3, r2
 800140e:	2b04      	cmp	r3, #4
 8001410:	d000      	beq.n	8001414 <__aeabi_fsub+0x21c>
 8001412:	e740      	b.n	8001296 <__aeabi_fsub+0x9e>
 8001414:	002b      	movs	r3, r5
 8001416:	e765      	b.n	80012e4 <__aeabi_fsub+0xec>
 8001418:	0007      	movs	r7, r0
 800141a:	2f00      	cmp	r7, #0
 800141c:	d100      	bne.n	8001420 <__aeabi_fsub+0x228>
 800141e:	e745      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	03d2      	lsls	r2, r2, #15
 8001424:	433a      	orrs	r2, r7
 8001426:	0252      	lsls	r2, r2, #9
 8001428:	20ff      	movs	r0, #255	@ 0xff
 800142a:	0a52      	lsrs	r2, r2, #9
 800142c:	e740      	b.n	80012b0 <__aeabi_fsub+0xb8>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d179      	bne.n	8001526 <__aeabi_fsub+0x32e>
 8001432:	22fe      	movs	r2, #254	@ 0xfe
 8001434:	1c6b      	adds	r3, r5, #1
 8001436:	421a      	tst	r2, r3
 8001438:	d1aa      	bne.n	8001390 <__aeabi_fsub+0x198>
 800143a:	4663      	mov	r3, ip
 800143c:	2b00      	cmp	r3, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_fsub+0x24a>
 8001440:	e0f5      	b.n	800162e <__aeabi_fsub+0x436>
 8001442:	2900      	cmp	r1, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_fsub+0x250>
 8001446:	e0d1      	b.n	80015ec <__aeabi_fsub+0x3f4>
 8001448:	1a5f      	subs	r7, r3, r1
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	04db      	lsls	r3, r3, #19
 800144e:	421f      	tst	r7, r3
 8001450:	d100      	bne.n	8001454 <__aeabi_fsub+0x25c>
 8001452:	e10e      	b.n	8001672 <__aeabi_fsub+0x47a>
 8001454:	4662      	mov	r2, ip
 8001456:	2401      	movs	r4, #1
 8001458:	1a8a      	subs	r2, r1, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2000      	movs	r0, #0
 800145e:	4034      	ands	r4, r6
 8001460:	2a00      	cmp	r2, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x26e>
 8001464:	e724      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001466:	2001      	movs	r0, #1
 8001468:	421a      	tst	r2, r3
 800146a:	d1c6      	bne.n	80013fa <__aeabi_fsub+0x202>
 800146c:	2300      	movs	r3, #0
 800146e:	08d7      	lsrs	r7, r2, #3
 8001470:	e73d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d017      	beq.n	80014a6 <__aeabi_fsub+0x2ae>
 8001476:	2d00      	cmp	r5, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x284>
 800147a:	e0af      	b.n	80015dc <__aeabi_fsub+0x3e4>
 800147c:	23ff      	movs	r3, #255	@ 0xff
 800147e:	4665      	mov	r5, ip
 8001480:	2d00      	cmp	r5, #0
 8001482:	d100      	bne.n	8001486 <__aeabi_fsub+0x28e>
 8001484:	e0ad      	b.n	80015e2 <__aeabi_fsub+0x3ea>
 8001486:	1e5e      	subs	r6, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d100      	bne.n	800148e <__aeabi_fsub+0x296>
 800148c:	e089      	b.n	80015a2 <__aeabi_fsub+0x3aa>
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d0c2      	beq.n	8001418 <__aeabi_fsub+0x220>
 8001492:	2e1b      	cmp	r6, #27
 8001494:	dc00      	bgt.n	8001498 <__aeabi_fsub+0x2a0>
 8001496:	e0ab      	b.n	80015f0 <__aeabi_fsub+0x3f8>
 8001498:	1d4b      	adds	r3, r1, #5
 800149a:	469c      	mov	ip, r3
 800149c:	0013      	movs	r3, r2
 800149e:	e721      	b.n	80012e4 <__aeabi_fsub+0xec>
 80014a0:	464b      	mov	r3, r9
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d170      	bne.n	8001588 <__aeabi_fsub+0x390>
 80014a6:	22fe      	movs	r2, #254	@ 0xfe
 80014a8:	1c6b      	adds	r3, r5, #1
 80014aa:	421a      	tst	r2, r3
 80014ac:	d15e      	bne.n	800156c <__aeabi_fsub+0x374>
 80014ae:	2d00      	cmp	r5, #0
 80014b0:	d000      	beq.n	80014b4 <__aeabi_fsub+0x2bc>
 80014b2:	e0c3      	b.n	800163c <__aeabi_fsub+0x444>
 80014b4:	4663      	mov	r3, ip
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_fsub+0x2c4>
 80014ba:	e0d0      	b.n	800165e <__aeabi_fsub+0x466>
 80014bc:	2900      	cmp	r1, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x2ca>
 80014c0:	e094      	b.n	80015ec <__aeabi_fsub+0x3f4>
 80014c2:	000a      	movs	r2, r1
 80014c4:	4462      	add	r2, ip
 80014c6:	0153      	lsls	r3, r2, #5
 80014c8:	d400      	bmi.n	80014cc <__aeabi_fsub+0x2d4>
 80014ca:	e0d8      	b.n	800167e <__aeabi_fsub+0x486>
 80014cc:	0192      	lsls	r2, r2, #6
 80014ce:	2001      	movs	r0, #1
 80014d0:	0a52      	lsrs	r2, r2, #9
 80014d2:	e6ed      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80014d4:	0008      	movs	r0, r1
 80014d6:	2220      	movs	r2, #32
 80014d8:	40d8      	lsrs	r0, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4099      	lsls	r1, r3
 80014de:	000b      	movs	r3, r1
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	4193      	sbcs	r3, r2
 80014e4:	4303      	orrs	r3, r0
 80014e6:	449c      	add	ip, r3
 80014e8:	4663      	mov	r3, ip
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	d589      	bpl.n	8001402 <__aeabi_fsub+0x20a>
 80014ee:	3501      	adds	r5, #1
 80014f0:	2dff      	cmp	r5, #255	@ 0xff
 80014f2:	d100      	bne.n	80014f6 <__aeabi_fsub+0x2fe>
 80014f4:	e6da      	b.n	80012ac <__aeabi_fsub+0xb4>
 80014f6:	4662      	mov	r2, ip
 80014f8:	2301      	movs	r3, #1
 80014fa:	4919      	ldr	r1, [pc, #100]	@ (8001560 <__aeabi_fsub+0x368>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0852      	lsrs	r2, r2, #1
 8001500:	400a      	ands	r2, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	4694      	mov	ip, r2
 8001508:	075b      	lsls	r3, r3, #29
 800150a:	d004      	beq.n	8001516 <__aeabi_fsub+0x31e>
 800150c:	230f      	movs	r3, #15
 800150e:	4013      	ands	r3, r2
 8001510:	2b04      	cmp	r3, #4
 8001512:	d000      	beq.n	8001516 <__aeabi_fsub+0x31e>
 8001514:	e6bf      	b.n	8001296 <__aeabi_fsub+0x9e>
 8001516:	4663      	mov	r3, ip
 8001518:	015b      	lsls	r3, r3, #5
 800151a:	d500      	bpl.n	800151e <__aeabi_fsub+0x326>
 800151c:	e6c2      	b.n	80012a4 <__aeabi_fsub+0xac>
 800151e:	4663      	mov	r3, ip
 8001520:	08df      	lsrs	r7, r3, #3
 8001522:	002b      	movs	r3, r5
 8001524:	e6e3      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001526:	1b53      	subs	r3, r2, r5
 8001528:	2d00      	cmp	r5, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x336>
 800152c:	e6f4      	b.n	8001318 <__aeabi_fsub+0x120>
 800152e:	2080      	movs	r0, #128	@ 0x80
 8001530:	4664      	mov	r4, ip
 8001532:	04c0      	lsls	r0, r0, #19
 8001534:	4304      	orrs	r4, r0
 8001536:	46a4      	mov	ip, r4
 8001538:	0034      	movs	r4, r6
 800153a:	2001      	movs	r0, #1
 800153c:	2b1b      	cmp	r3, #27
 800153e:	dc09      	bgt.n	8001554 <__aeabi_fsub+0x35c>
 8001540:	2520      	movs	r5, #32
 8001542:	4660      	mov	r0, ip
 8001544:	40d8      	lsrs	r0, r3
 8001546:	1aeb      	subs	r3, r5, r3
 8001548:	4665      	mov	r5, ip
 800154a:	409d      	lsls	r5, r3
 800154c:	002b      	movs	r3, r5
 800154e:	1e5d      	subs	r5, r3, #1
 8001550:	41ab      	sbcs	r3, r5
 8001552:	4318      	orrs	r0, r3
 8001554:	1a0b      	subs	r3, r1, r0
 8001556:	469c      	mov	ip, r3
 8001558:	0015      	movs	r5, r2
 800155a:	e680      	b.n	800125e <__aeabi_fsub+0x66>
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff
 8001564:	22fe      	movs	r2, #254	@ 0xfe
 8001566:	1c6b      	adds	r3, r5, #1
 8001568:	4213      	tst	r3, r2
 800156a:	d0a3      	beq.n	80014b4 <__aeabi_fsub+0x2bc>
 800156c:	2bff      	cmp	r3, #255	@ 0xff
 800156e:	d100      	bne.n	8001572 <__aeabi_fsub+0x37a>
 8001570:	e69c      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001572:	4461      	add	r1, ip
 8001574:	0849      	lsrs	r1, r1, #1
 8001576:	074a      	lsls	r2, r1, #29
 8001578:	d049      	beq.n	800160e <__aeabi_fsub+0x416>
 800157a:	220f      	movs	r2, #15
 800157c:	400a      	ands	r2, r1
 800157e:	2a04      	cmp	r2, #4
 8001580:	d045      	beq.n	800160e <__aeabi_fsub+0x416>
 8001582:	1d0a      	adds	r2, r1, #4
 8001584:	4694      	mov	ip, r2
 8001586:	e6ad      	b.n	80012e4 <__aeabi_fsub+0xec>
 8001588:	2d00      	cmp	r5, #0
 800158a:	d100      	bne.n	800158e <__aeabi_fsub+0x396>
 800158c:	e776      	b.n	800147c <__aeabi_fsub+0x284>
 800158e:	e68d      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001590:	0034      	movs	r4, r6
 8001592:	20ff      	movs	r0, #255	@ 0xff
 8001594:	2200      	movs	r2, #0
 8001596:	e68b      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001598:	4663      	mov	r3, ip
 800159a:	2401      	movs	r4, #1
 800159c:	1acf      	subs	r7, r1, r3
 800159e:	4034      	ands	r4, r6
 80015a0:	e664      	b.n	800126c <__aeabi_fsub+0x74>
 80015a2:	4461      	add	r1, ip
 80015a4:	014b      	lsls	r3, r1, #5
 80015a6:	d56d      	bpl.n	8001684 <__aeabi_fsub+0x48c>
 80015a8:	0848      	lsrs	r0, r1, #1
 80015aa:	4944      	ldr	r1, [pc, #272]	@ (80016bc <__aeabi_fsub+0x4c4>)
 80015ac:	4001      	ands	r1, r0
 80015ae:	0743      	lsls	r3, r0, #29
 80015b0:	d02c      	beq.n	800160c <__aeabi_fsub+0x414>
 80015b2:	230f      	movs	r3, #15
 80015b4:	4003      	ands	r3, r0
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d028      	beq.n	800160c <__aeabi_fsub+0x414>
 80015ba:	1d0b      	adds	r3, r1, #4
 80015bc:	469c      	mov	ip, r3
 80015be:	2302      	movs	r3, #2
 80015c0:	e690      	b.n	80012e4 <__aeabi_fsub+0xec>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d100      	bne.n	80015c8 <__aeabi_fsub+0x3d0>
 80015c6:	e72b      	b.n	8001420 <__aeabi_fsub+0x228>
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	03db      	lsls	r3, r3, #15
 80015cc:	429f      	cmp	r7, r3
 80015ce:	d200      	bcs.n	80015d2 <__aeabi_fsub+0x3da>
 80015d0:	e726      	b.n	8001420 <__aeabi_fsub+0x228>
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d300      	bcc.n	80015d8 <__aeabi_fsub+0x3e0>
 80015d6:	e723      	b.n	8001420 <__aeabi_fsub+0x228>
 80015d8:	2401      	movs	r4, #1
 80015da:	4034      	ands	r4, r6
 80015dc:	0007      	movs	r7, r0
 80015de:	e71f      	b.n	8001420 <__aeabi_fsub+0x228>
 80015e0:	0034      	movs	r4, r6
 80015e2:	468c      	mov	ip, r1
 80015e4:	e67e      	b.n	80012e4 <__aeabi_fsub+0xec>
 80015e6:	2301      	movs	r3, #1
 80015e8:	08cf      	lsrs	r7, r1, #3
 80015ea:	e680      	b.n	80012ee <__aeabi_fsub+0xf6>
 80015ec:	2300      	movs	r3, #0
 80015ee:	e67e      	b.n	80012ee <__aeabi_fsub+0xf6>
 80015f0:	2020      	movs	r0, #32
 80015f2:	4665      	mov	r5, ip
 80015f4:	1b80      	subs	r0, r0, r6
 80015f6:	4085      	lsls	r5, r0
 80015f8:	4663      	mov	r3, ip
 80015fa:	0028      	movs	r0, r5
 80015fc:	40f3      	lsrs	r3, r6
 80015fe:	1e45      	subs	r5, r0, #1
 8001600:	41a8      	sbcs	r0, r5
 8001602:	4303      	orrs	r3, r0
 8001604:	469c      	mov	ip, r3
 8001606:	0015      	movs	r5, r2
 8001608:	448c      	add	ip, r1
 800160a:	e76d      	b.n	80014e8 <__aeabi_fsub+0x2f0>
 800160c:	2302      	movs	r3, #2
 800160e:	08cf      	lsrs	r7, r1, #3
 8001610:	e66d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001612:	1b0f      	subs	r7, r1, r4
 8001614:	017b      	lsls	r3, r7, #5
 8001616:	d528      	bpl.n	800166a <__aeabi_fsub+0x472>
 8001618:	01bf      	lsls	r7, r7, #6
 800161a:	09bf      	lsrs	r7, r7, #6
 800161c:	0038      	movs	r0, r7
 800161e:	f7fe ff91 	bl	8000544 <__clzsi2>
 8001622:	003b      	movs	r3, r7
 8001624:	3805      	subs	r0, #5
 8001626:	4083      	lsls	r3, r0
 8001628:	0034      	movs	r4, r6
 800162a:	2501      	movs	r5, #1
 800162c:	e6ca      	b.n	80013c4 <__aeabi_fsub+0x1cc>
 800162e:	2900      	cmp	r1, #0
 8001630:	d100      	bne.n	8001634 <__aeabi_fsub+0x43c>
 8001632:	e6b5      	b.n	80013a0 <__aeabi_fsub+0x1a8>
 8001634:	2401      	movs	r4, #1
 8001636:	0007      	movs	r7, r0
 8001638:	4034      	ands	r4, r6
 800163a:	e658      	b.n	80012ee <__aeabi_fsub+0xf6>
 800163c:	4663      	mov	r3, ip
 800163e:	2b00      	cmp	r3, #0
 8001640:	d100      	bne.n	8001644 <__aeabi_fsub+0x44c>
 8001642:	e6e9      	b.n	8001418 <__aeabi_fsub+0x220>
 8001644:	2900      	cmp	r1, #0
 8001646:	d100      	bne.n	800164a <__aeabi_fsub+0x452>
 8001648:	e6ea      	b.n	8001420 <__aeabi_fsub+0x228>
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	03db      	lsls	r3, r3, #15
 800164e:	429f      	cmp	r7, r3
 8001650:	d200      	bcs.n	8001654 <__aeabi_fsub+0x45c>
 8001652:	e6e5      	b.n	8001420 <__aeabi_fsub+0x228>
 8001654:	4298      	cmp	r0, r3
 8001656:	d300      	bcc.n	800165a <__aeabi_fsub+0x462>
 8001658:	e6e2      	b.n	8001420 <__aeabi_fsub+0x228>
 800165a:	0007      	movs	r7, r0
 800165c:	e6e0      	b.n	8001420 <__aeabi_fsub+0x228>
 800165e:	2900      	cmp	r1, #0
 8001660:	d100      	bne.n	8001664 <__aeabi_fsub+0x46c>
 8001662:	e69e      	b.n	80013a2 <__aeabi_fsub+0x1aa>
 8001664:	2300      	movs	r3, #0
 8001666:	08cf      	lsrs	r7, r1, #3
 8001668:	e641      	b.n	80012ee <__aeabi_fsub+0xf6>
 800166a:	0034      	movs	r4, r6
 800166c:	2301      	movs	r3, #1
 800166e:	08ff      	lsrs	r7, r7, #3
 8001670:	e63d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001672:	2f00      	cmp	r7, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_fsub+0x480>
 8001676:	e693      	b.n	80013a0 <__aeabi_fsub+0x1a8>
 8001678:	2300      	movs	r3, #0
 800167a:	08ff      	lsrs	r7, r7, #3
 800167c:	e637      	b.n	80012ee <__aeabi_fsub+0xf6>
 800167e:	2300      	movs	r3, #0
 8001680:	08d7      	lsrs	r7, r2, #3
 8001682:	e634      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001684:	2301      	movs	r3, #1
 8001686:	08cf      	lsrs	r7, r1, #3
 8001688:	e631      	b.n	80012ee <__aeabi_fsub+0xf6>
 800168a:	2280      	movs	r2, #128	@ 0x80
 800168c:	000b      	movs	r3, r1
 800168e:	04d2      	lsls	r2, r2, #19
 8001690:	2001      	movs	r0, #1
 8001692:	4013      	ands	r3, r2
 8001694:	4211      	tst	r1, r2
 8001696:	d000      	beq.n	800169a <__aeabi_fsub+0x4a2>
 8001698:	e6ae      	b.n	80013f8 <__aeabi_fsub+0x200>
 800169a:	08cf      	lsrs	r7, r1, #3
 800169c:	e627      	b.n	80012ee <__aeabi_fsub+0xf6>
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <__aeabi_fsub+0x4ac>
 80016a2:	e75f      	b.n	8001564 <__aeabi_fsub+0x36c>
 80016a4:	1b56      	subs	r6, r2, r5
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	d101      	bne.n	80016ae <__aeabi_fsub+0x4b6>
 80016aa:	0033      	movs	r3, r6
 80016ac:	e6e7      	b.n	800147e <__aeabi_fsub+0x286>
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	4660      	mov	r0, ip
 80016b2:	04db      	lsls	r3, r3, #19
 80016b4:	4318      	orrs	r0, r3
 80016b6:	4684      	mov	ip, r0
 80016b8:	e6eb      	b.n	8001492 <__aeabi_fsub+0x29a>
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	7dffffff 	.word	0x7dffffff

080016c0 <__aeabi_fcmpun>:
 80016c0:	0243      	lsls	r3, r0, #9
 80016c2:	024a      	lsls	r2, r1, #9
 80016c4:	0040      	lsls	r0, r0, #1
 80016c6:	0049      	lsls	r1, r1, #1
 80016c8:	0a5b      	lsrs	r3, r3, #9
 80016ca:	0a52      	lsrs	r2, r2, #9
 80016cc:	0e09      	lsrs	r1, r1, #24
 80016ce:	0e00      	lsrs	r0, r0, #24
 80016d0:	28ff      	cmp	r0, #255	@ 0xff
 80016d2:	d006      	beq.n	80016e2 <__aeabi_fcmpun+0x22>
 80016d4:	2000      	movs	r0, #0
 80016d6:	29ff      	cmp	r1, #255	@ 0xff
 80016d8:	d102      	bne.n	80016e0 <__aeabi_fcmpun+0x20>
 80016da:	1e53      	subs	r3, r2, #1
 80016dc:	419a      	sbcs	r2, r3
 80016de:	0010      	movs	r0, r2
 80016e0:	4770      	bx	lr
 80016e2:	38fe      	subs	r0, #254	@ 0xfe
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1fb      	bne.n	80016e0 <__aeabi_fcmpun+0x20>
 80016e8:	e7f4      	b.n	80016d4 <__aeabi_fcmpun+0x14>
 80016ea:	46c0      	nop			@ (mov r8, r8)

080016ec <__aeabi_f2iz>:
 80016ec:	0241      	lsls	r1, r0, #9
 80016ee:	0042      	lsls	r2, r0, #1
 80016f0:	0fc3      	lsrs	r3, r0, #31
 80016f2:	0a49      	lsrs	r1, r1, #9
 80016f4:	2000      	movs	r0, #0
 80016f6:	0e12      	lsrs	r2, r2, #24
 80016f8:	2a7e      	cmp	r2, #126	@ 0x7e
 80016fa:	dd03      	ble.n	8001704 <__aeabi_f2iz+0x18>
 80016fc:	2a9d      	cmp	r2, #157	@ 0x9d
 80016fe:	dd02      	ble.n	8001706 <__aeabi_f2iz+0x1a>
 8001700:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <__aeabi_f2iz+0x3c>)
 8001702:	1898      	adds	r0, r3, r2
 8001704:	4770      	bx	lr
 8001706:	2080      	movs	r0, #128	@ 0x80
 8001708:	0400      	lsls	r0, r0, #16
 800170a:	4301      	orrs	r1, r0
 800170c:	2a95      	cmp	r2, #149	@ 0x95
 800170e:	dc07      	bgt.n	8001720 <__aeabi_f2iz+0x34>
 8001710:	2096      	movs	r0, #150	@ 0x96
 8001712:	1a82      	subs	r2, r0, r2
 8001714:	40d1      	lsrs	r1, r2
 8001716:	4248      	negs	r0, r1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f3      	bne.n	8001704 <__aeabi_f2iz+0x18>
 800171c:	0008      	movs	r0, r1
 800171e:	e7f1      	b.n	8001704 <__aeabi_f2iz+0x18>
 8001720:	3a96      	subs	r2, #150	@ 0x96
 8001722:	4091      	lsls	r1, r2
 8001724:	e7f7      	b.n	8001716 <__aeabi_f2iz+0x2a>
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	7fffffff 	.word	0x7fffffff

0800172c <__aeabi_i2f>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	2800      	cmp	r0, #0
 8001730:	d012      	beq.n	8001758 <__aeabi_i2f+0x2c>
 8001732:	17c3      	asrs	r3, r0, #31
 8001734:	18c5      	adds	r5, r0, r3
 8001736:	405d      	eors	r5, r3
 8001738:	0fc4      	lsrs	r4, r0, #31
 800173a:	0028      	movs	r0, r5
 800173c:	f7fe ff02 	bl	8000544 <__clzsi2>
 8001740:	239e      	movs	r3, #158	@ 0x9e
 8001742:	1a1b      	subs	r3, r3, r0
 8001744:	2b96      	cmp	r3, #150	@ 0x96
 8001746:	dc0f      	bgt.n	8001768 <__aeabi_i2f+0x3c>
 8001748:	2808      	cmp	r0, #8
 800174a:	d038      	beq.n	80017be <__aeabi_i2f+0x92>
 800174c:	3808      	subs	r0, #8
 800174e:	4085      	lsls	r5, r0
 8001750:	026d      	lsls	r5, r5, #9
 8001752:	0a6d      	lsrs	r5, r5, #9
 8001754:	b2d8      	uxtb	r0, r3
 8001756:	e002      	b.n	800175e <__aeabi_i2f+0x32>
 8001758:	2400      	movs	r4, #0
 800175a:	2000      	movs	r0, #0
 800175c:	2500      	movs	r5, #0
 800175e:	05c0      	lsls	r0, r0, #23
 8001760:	4328      	orrs	r0, r5
 8001762:	07e4      	lsls	r4, r4, #31
 8001764:	4320      	orrs	r0, r4
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	2b99      	cmp	r3, #153	@ 0x99
 800176a:	dc14      	bgt.n	8001796 <__aeabi_i2f+0x6a>
 800176c:	1f42      	subs	r2, r0, #5
 800176e:	4095      	lsls	r5, r2
 8001770:	002a      	movs	r2, r5
 8001772:	4915      	ldr	r1, [pc, #84]	@ (80017c8 <__aeabi_i2f+0x9c>)
 8001774:	4011      	ands	r1, r2
 8001776:	0755      	lsls	r5, r2, #29
 8001778:	d01c      	beq.n	80017b4 <__aeabi_i2f+0x88>
 800177a:	250f      	movs	r5, #15
 800177c:	402a      	ands	r2, r5
 800177e:	2a04      	cmp	r2, #4
 8001780:	d018      	beq.n	80017b4 <__aeabi_i2f+0x88>
 8001782:	3104      	adds	r1, #4
 8001784:	08ca      	lsrs	r2, r1, #3
 8001786:	0149      	lsls	r1, r1, #5
 8001788:	d515      	bpl.n	80017b6 <__aeabi_i2f+0x8a>
 800178a:	239f      	movs	r3, #159	@ 0x9f
 800178c:	0252      	lsls	r2, r2, #9
 800178e:	1a18      	subs	r0, r3, r0
 8001790:	0a55      	lsrs	r5, r2, #9
 8001792:	b2c0      	uxtb	r0, r0
 8001794:	e7e3      	b.n	800175e <__aeabi_i2f+0x32>
 8001796:	2205      	movs	r2, #5
 8001798:	0029      	movs	r1, r5
 800179a:	1a12      	subs	r2, r2, r0
 800179c:	40d1      	lsrs	r1, r2
 800179e:	0002      	movs	r2, r0
 80017a0:	321b      	adds	r2, #27
 80017a2:	4095      	lsls	r5, r2
 80017a4:	002a      	movs	r2, r5
 80017a6:	1e55      	subs	r5, r2, #1
 80017a8:	41aa      	sbcs	r2, r5
 80017aa:	430a      	orrs	r2, r1
 80017ac:	4906      	ldr	r1, [pc, #24]	@ (80017c8 <__aeabi_i2f+0x9c>)
 80017ae:	4011      	ands	r1, r2
 80017b0:	0755      	lsls	r5, r2, #29
 80017b2:	d1e2      	bne.n	800177a <__aeabi_i2f+0x4e>
 80017b4:	08ca      	lsrs	r2, r1, #3
 80017b6:	0252      	lsls	r2, r2, #9
 80017b8:	0a55      	lsrs	r5, r2, #9
 80017ba:	b2d8      	uxtb	r0, r3
 80017bc:	e7cf      	b.n	800175e <__aeabi_i2f+0x32>
 80017be:	026d      	lsls	r5, r5, #9
 80017c0:	0a6d      	lsrs	r5, r5, #9
 80017c2:	308e      	adds	r0, #142	@ 0x8e
 80017c4:	e7cb      	b.n	800175e <__aeabi_i2f+0x32>
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	fbffffff 	.word	0xfbffffff

080017cc <__aeabi_ui2f>:
 80017cc:	b510      	push	{r4, lr}
 80017ce:	1e04      	subs	r4, r0, #0
 80017d0:	d00d      	beq.n	80017ee <__aeabi_ui2f+0x22>
 80017d2:	f7fe feb7 	bl	8000544 <__clzsi2>
 80017d6:	239e      	movs	r3, #158	@ 0x9e
 80017d8:	1a1b      	subs	r3, r3, r0
 80017da:	2b96      	cmp	r3, #150	@ 0x96
 80017dc:	dc0c      	bgt.n	80017f8 <__aeabi_ui2f+0x2c>
 80017de:	2808      	cmp	r0, #8
 80017e0:	d034      	beq.n	800184c <__aeabi_ui2f+0x80>
 80017e2:	3808      	subs	r0, #8
 80017e4:	4084      	lsls	r4, r0
 80017e6:	0264      	lsls	r4, r4, #9
 80017e8:	0a64      	lsrs	r4, r4, #9
 80017ea:	b2d8      	uxtb	r0, r3
 80017ec:	e001      	b.n	80017f2 <__aeabi_ui2f+0x26>
 80017ee:	2000      	movs	r0, #0
 80017f0:	2400      	movs	r4, #0
 80017f2:	05c0      	lsls	r0, r0, #23
 80017f4:	4320      	orrs	r0, r4
 80017f6:	bd10      	pop	{r4, pc}
 80017f8:	2b99      	cmp	r3, #153	@ 0x99
 80017fa:	dc13      	bgt.n	8001824 <__aeabi_ui2f+0x58>
 80017fc:	1f42      	subs	r2, r0, #5
 80017fe:	4094      	lsls	r4, r2
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <__aeabi_ui2f+0x88>)
 8001802:	4022      	ands	r2, r4
 8001804:	0761      	lsls	r1, r4, #29
 8001806:	d01c      	beq.n	8001842 <__aeabi_ui2f+0x76>
 8001808:	210f      	movs	r1, #15
 800180a:	4021      	ands	r1, r4
 800180c:	2904      	cmp	r1, #4
 800180e:	d018      	beq.n	8001842 <__aeabi_ui2f+0x76>
 8001810:	3204      	adds	r2, #4
 8001812:	08d4      	lsrs	r4, r2, #3
 8001814:	0152      	lsls	r2, r2, #5
 8001816:	d515      	bpl.n	8001844 <__aeabi_ui2f+0x78>
 8001818:	239f      	movs	r3, #159	@ 0x9f
 800181a:	0264      	lsls	r4, r4, #9
 800181c:	1a18      	subs	r0, r3, r0
 800181e:	0a64      	lsrs	r4, r4, #9
 8001820:	b2c0      	uxtb	r0, r0
 8001822:	e7e6      	b.n	80017f2 <__aeabi_ui2f+0x26>
 8001824:	0002      	movs	r2, r0
 8001826:	0021      	movs	r1, r4
 8001828:	321b      	adds	r2, #27
 800182a:	4091      	lsls	r1, r2
 800182c:	000a      	movs	r2, r1
 800182e:	1e51      	subs	r1, r2, #1
 8001830:	418a      	sbcs	r2, r1
 8001832:	2105      	movs	r1, #5
 8001834:	1a09      	subs	r1, r1, r0
 8001836:	40cc      	lsrs	r4, r1
 8001838:	4314      	orrs	r4, r2
 800183a:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <__aeabi_ui2f+0x88>)
 800183c:	4022      	ands	r2, r4
 800183e:	0761      	lsls	r1, r4, #29
 8001840:	d1e2      	bne.n	8001808 <__aeabi_ui2f+0x3c>
 8001842:	08d4      	lsrs	r4, r2, #3
 8001844:	0264      	lsls	r4, r4, #9
 8001846:	0a64      	lsrs	r4, r4, #9
 8001848:	b2d8      	uxtb	r0, r3
 800184a:	e7d2      	b.n	80017f2 <__aeabi_ui2f+0x26>
 800184c:	0264      	lsls	r4, r4, #9
 800184e:	0a64      	lsrs	r4, r4, #9
 8001850:	308e      	adds	r0, #142	@ 0x8e
 8001852:	e7ce      	b.n	80017f2 <__aeabi_ui2f+0x26>
 8001854:	fbffffff 	.word	0xfbffffff

08001858 <__aeabi_dadd>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	464f      	mov	r7, r9
 800185c:	4646      	mov	r6, r8
 800185e:	46d6      	mov	lr, sl
 8001860:	b5c0      	push	{r6, r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	9000      	str	r0, [sp, #0]
 8001866:	9101      	str	r1, [sp, #4]
 8001868:	030e      	lsls	r6, r1, #12
 800186a:	004c      	lsls	r4, r1, #1
 800186c:	0fcd      	lsrs	r5, r1, #31
 800186e:	0a71      	lsrs	r1, r6, #9
 8001870:	9e00      	ldr	r6, [sp, #0]
 8001872:	005f      	lsls	r7, r3, #1
 8001874:	0f76      	lsrs	r6, r6, #29
 8001876:	430e      	orrs	r6, r1
 8001878:	9900      	ldr	r1, [sp, #0]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	00c9      	lsls	r1, r1, #3
 8001880:	4689      	mov	r9, r1
 8001882:	0319      	lsls	r1, r3, #12
 8001884:	0d7b      	lsrs	r3, r7, #21
 8001886:	4698      	mov	r8, r3
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	0a49      	lsrs	r1, r1, #9
 800188c:	0fdb      	lsrs	r3, r3, #31
 800188e:	469c      	mov	ip, r3
 8001890:	9b00      	ldr	r3, [sp, #0]
 8001892:	9a00      	ldr	r2, [sp, #0]
 8001894:	0f5b      	lsrs	r3, r3, #29
 8001896:	430b      	orrs	r3, r1
 8001898:	4641      	mov	r1, r8
 800189a:	0d64      	lsrs	r4, r4, #21
 800189c:	00d2      	lsls	r2, r2, #3
 800189e:	1a61      	subs	r1, r4, r1
 80018a0:	4565      	cmp	r5, ip
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x4e>
 80018a4:	e0a6      	b.n	80019f4 <__aeabi_dadd+0x19c>
 80018a6:	2900      	cmp	r1, #0
 80018a8:	dd72      	ble.n	8001990 <__aeabi_dadd+0x138>
 80018aa:	4647      	mov	r7, r8
 80018ac:	2f00      	cmp	r7, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x5a>
 80018b0:	e0dd      	b.n	8001a6e <__aeabi_dadd+0x216>
 80018b2:	4fcc      	ldr	r7, [pc, #816]	@ (8001be4 <__aeabi_dadd+0x38c>)
 80018b4:	42bc      	cmp	r4, r7
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x62>
 80018b8:	e19a      	b.n	8001bf0 <__aeabi_dadd+0x398>
 80018ba:	2701      	movs	r7, #1
 80018bc:	2938      	cmp	r1, #56	@ 0x38
 80018be:	dc17      	bgt.n	80018f0 <__aeabi_dadd+0x98>
 80018c0:	2780      	movs	r7, #128	@ 0x80
 80018c2:	043f      	lsls	r7, r7, #16
 80018c4:	433b      	orrs	r3, r7
 80018c6:	291f      	cmp	r1, #31
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dadd+0x74>
 80018ca:	e1dd      	b.n	8001c88 <__aeabi_dadd+0x430>
 80018cc:	2720      	movs	r7, #32
 80018ce:	1a78      	subs	r0, r7, r1
 80018d0:	001f      	movs	r7, r3
 80018d2:	4087      	lsls	r7, r0
 80018d4:	46ba      	mov	sl, r7
 80018d6:	0017      	movs	r7, r2
 80018d8:	40cf      	lsrs	r7, r1
 80018da:	4684      	mov	ip, r0
 80018dc:	0038      	movs	r0, r7
 80018de:	4657      	mov	r7, sl
 80018e0:	4307      	orrs	r7, r0
 80018e2:	4660      	mov	r0, ip
 80018e4:	4082      	lsls	r2, r0
 80018e6:	40cb      	lsrs	r3, r1
 80018e8:	1e50      	subs	r0, r2, #1
 80018ea:	4182      	sbcs	r2, r0
 80018ec:	1af6      	subs	r6, r6, r3
 80018ee:	4317      	orrs	r7, r2
 80018f0:	464b      	mov	r3, r9
 80018f2:	1bdf      	subs	r7, r3, r7
 80018f4:	45b9      	cmp	r9, r7
 80018f6:	4180      	sbcs	r0, r0
 80018f8:	4240      	negs	r0, r0
 80018fa:	1a36      	subs	r6, r6, r0
 80018fc:	0233      	lsls	r3, r6, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_dadd+0xaa>
 8001900:	e0ff      	b.n	8001b02 <__aeabi_dadd+0x2aa>
 8001902:	0276      	lsls	r6, r6, #9
 8001904:	0a76      	lsrs	r6, r6, #9
 8001906:	2e00      	cmp	r6, #0
 8001908:	d100      	bne.n	800190c <__aeabi_dadd+0xb4>
 800190a:	e13c      	b.n	8001b86 <__aeabi_dadd+0x32e>
 800190c:	0030      	movs	r0, r6
 800190e:	f7fe fe19 	bl	8000544 <__clzsi2>
 8001912:	0003      	movs	r3, r0
 8001914:	3b08      	subs	r3, #8
 8001916:	2120      	movs	r1, #32
 8001918:	0038      	movs	r0, r7
 800191a:	1aca      	subs	r2, r1, r3
 800191c:	40d0      	lsrs	r0, r2
 800191e:	409e      	lsls	r6, r3
 8001920:	0002      	movs	r2, r0
 8001922:	409f      	lsls	r7, r3
 8001924:	4332      	orrs	r2, r6
 8001926:	429c      	cmp	r4, r3
 8001928:	dd00      	ble.n	800192c <__aeabi_dadd+0xd4>
 800192a:	e1a6      	b.n	8001c7a <__aeabi_dadd+0x422>
 800192c:	1b18      	subs	r0, r3, r4
 800192e:	3001      	adds	r0, #1
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	003e      	movs	r6, r7
 8001934:	408f      	lsls	r7, r1
 8001936:	40c6      	lsrs	r6, r0
 8001938:	1e7b      	subs	r3, r7, #1
 800193a:	419f      	sbcs	r7, r3
 800193c:	0013      	movs	r3, r2
 800193e:	408b      	lsls	r3, r1
 8001940:	4337      	orrs	r7, r6
 8001942:	431f      	orrs	r7, r3
 8001944:	40c2      	lsrs	r2, r0
 8001946:	003b      	movs	r3, r7
 8001948:	0016      	movs	r6, r2
 800194a:	2400      	movs	r4, #0
 800194c:	4313      	orrs	r3, r2
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0xfa>
 8001950:	e1df      	b.n	8001d12 <__aeabi_dadd+0x4ba>
 8001952:	077b      	lsls	r3, r7, #29
 8001954:	d100      	bne.n	8001958 <__aeabi_dadd+0x100>
 8001956:	e332      	b.n	8001fbe <__aeabi_dadd+0x766>
 8001958:	230f      	movs	r3, #15
 800195a:	003a      	movs	r2, r7
 800195c:	403b      	ands	r3, r7
 800195e:	2b04      	cmp	r3, #4
 8001960:	d004      	beq.n	800196c <__aeabi_dadd+0x114>
 8001962:	1d3a      	adds	r2, r7, #4
 8001964:	42ba      	cmp	r2, r7
 8001966:	41bf      	sbcs	r7, r7
 8001968:	427f      	negs	r7, r7
 800196a:	19f6      	adds	r6, r6, r7
 800196c:	0233      	lsls	r3, r6, #8
 800196e:	d400      	bmi.n	8001972 <__aeabi_dadd+0x11a>
 8001970:	e323      	b.n	8001fba <__aeabi_dadd+0x762>
 8001972:	4b9c      	ldr	r3, [pc, #624]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001974:	3401      	adds	r4, #1
 8001976:	429c      	cmp	r4, r3
 8001978:	d100      	bne.n	800197c <__aeabi_dadd+0x124>
 800197a:	e0b4      	b.n	8001ae6 <__aeabi_dadd+0x28e>
 800197c:	4b9a      	ldr	r3, [pc, #616]	@ (8001be8 <__aeabi_dadd+0x390>)
 800197e:	0564      	lsls	r4, r4, #21
 8001980:	401e      	ands	r6, r3
 8001982:	0d64      	lsrs	r4, r4, #21
 8001984:	0777      	lsls	r7, r6, #29
 8001986:	08d2      	lsrs	r2, r2, #3
 8001988:	0276      	lsls	r6, r6, #9
 800198a:	4317      	orrs	r7, r2
 800198c:	0b36      	lsrs	r6, r6, #12
 800198e:	e0ac      	b.n	8001aea <__aeabi_dadd+0x292>
 8001990:	2900      	cmp	r1, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dadd+0x13e>
 8001994:	e07e      	b.n	8001a94 <__aeabi_dadd+0x23c>
 8001996:	4641      	mov	r1, r8
 8001998:	1b09      	subs	r1, r1, r4
 800199a:	2c00      	cmp	r4, #0
 800199c:	d000      	beq.n	80019a0 <__aeabi_dadd+0x148>
 800199e:	e160      	b.n	8001c62 <__aeabi_dadd+0x40a>
 80019a0:	0034      	movs	r4, r6
 80019a2:	4648      	mov	r0, r9
 80019a4:	4304      	orrs	r4, r0
 80019a6:	d100      	bne.n	80019aa <__aeabi_dadd+0x152>
 80019a8:	e1c9      	b.n	8001d3e <__aeabi_dadd+0x4e6>
 80019aa:	1e4c      	subs	r4, r1, #1
 80019ac:	2901      	cmp	r1, #1
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dadd+0x15a>
 80019b0:	e22e      	b.n	8001e10 <__aeabi_dadd+0x5b8>
 80019b2:	4d8c      	ldr	r5, [pc, #560]	@ (8001be4 <__aeabi_dadd+0x38c>)
 80019b4:	42a9      	cmp	r1, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x162>
 80019b8:	e224      	b.n	8001e04 <__aeabi_dadd+0x5ac>
 80019ba:	2701      	movs	r7, #1
 80019bc:	2c38      	cmp	r4, #56	@ 0x38
 80019be:	dc11      	bgt.n	80019e4 <__aeabi_dadd+0x18c>
 80019c0:	0021      	movs	r1, r4
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x170>
 80019c6:	e20b      	b.n	8001de0 <__aeabi_dadd+0x588>
 80019c8:	2420      	movs	r4, #32
 80019ca:	0037      	movs	r7, r6
 80019cc:	4648      	mov	r0, r9
 80019ce:	1a64      	subs	r4, r4, r1
 80019d0:	40a7      	lsls	r7, r4
 80019d2:	40c8      	lsrs	r0, r1
 80019d4:	4307      	orrs	r7, r0
 80019d6:	4648      	mov	r0, r9
 80019d8:	40a0      	lsls	r0, r4
 80019da:	40ce      	lsrs	r6, r1
 80019dc:	1e44      	subs	r4, r0, #1
 80019de:	41a0      	sbcs	r0, r4
 80019e0:	1b9b      	subs	r3, r3, r6
 80019e2:	4307      	orrs	r7, r0
 80019e4:	1bd7      	subs	r7, r2, r7
 80019e6:	42ba      	cmp	r2, r7
 80019e8:	4192      	sbcs	r2, r2
 80019ea:	4252      	negs	r2, r2
 80019ec:	4665      	mov	r5, ip
 80019ee:	4644      	mov	r4, r8
 80019f0:	1a9e      	subs	r6, r3, r2
 80019f2:	e783      	b.n	80018fc <__aeabi_dadd+0xa4>
 80019f4:	2900      	cmp	r1, #0
 80019f6:	dc00      	bgt.n	80019fa <__aeabi_dadd+0x1a2>
 80019f8:	e09c      	b.n	8001b34 <__aeabi_dadd+0x2dc>
 80019fa:	4647      	mov	r7, r8
 80019fc:	2f00      	cmp	r7, #0
 80019fe:	d167      	bne.n	8001ad0 <__aeabi_dadd+0x278>
 8001a00:	001f      	movs	r7, r3
 8001a02:	4317      	orrs	r7, r2
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0x1b0>
 8001a06:	e0e4      	b.n	8001bd2 <__aeabi_dadd+0x37a>
 8001a08:	1e48      	subs	r0, r1, #1
 8001a0a:	2901      	cmp	r1, #1
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x1b8>
 8001a0e:	e19b      	b.n	8001d48 <__aeabi_dadd+0x4f0>
 8001a10:	4f74      	ldr	r7, [pc, #464]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a12:	42b9      	cmp	r1, r7
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dadd+0x1c0>
 8001a16:	e0eb      	b.n	8001bf0 <__aeabi_dadd+0x398>
 8001a18:	2701      	movs	r7, #1
 8001a1a:	0001      	movs	r1, r0
 8001a1c:	2838      	cmp	r0, #56	@ 0x38
 8001a1e:	dc11      	bgt.n	8001a44 <__aeabi_dadd+0x1ec>
 8001a20:	291f      	cmp	r1, #31
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dadd+0x1ce>
 8001a24:	e1c7      	b.n	8001db6 <__aeabi_dadd+0x55e>
 8001a26:	2720      	movs	r7, #32
 8001a28:	1a78      	subs	r0, r7, r1
 8001a2a:	001f      	movs	r7, r3
 8001a2c:	4684      	mov	ip, r0
 8001a2e:	4087      	lsls	r7, r0
 8001a30:	0010      	movs	r0, r2
 8001a32:	40c8      	lsrs	r0, r1
 8001a34:	4307      	orrs	r7, r0
 8001a36:	4660      	mov	r0, ip
 8001a38:	4082      	lsls	r2, r0
 8001a3a:	40cb      	lsrs	r3, r1
 8001a3c:	1e50      	subs	r0, r2, #1
 8001a3e:	4182      	sbcs	r2, r0
 8001a40:	18f6      	adds	r6, r6, r3
 8001a42:	4317      	orrs	r7, r2
 8001a44:	444f      	add	r7, r9
 8001a46:	454f      	cmp	r7, r9
 8001a48:	4180      	sbcs	r0, r0
 8001a4a:	4240      	negs	r0, r0
 8001a4c:	1836      	adds	r6, r6, r0
 8001a4e:	0233      	lsls	r3, r6, #8
 8001a50:	d557      	bpl.n	8001b02 <__aeabi_dadd+0x2aa>
 8001a52:	4b64      	ldr	r3, [pc, #400]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a54:	3401      	adds	r4, #1
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d045      	beq.n	8001ae6 <__aeabi_dadd+0x28e>
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4b62      	ldr	r3, [pc, #392]	@ (8001be8 <__aeabi_dadd+0x390>)
 8001a5e:	087a      	lsrs	r2, r7, #1
 8001a60:	401e      	ands	r6, r3
 8001a62:	4039      	ands	r1, r7
 8001a64:	430a      	orrs	r2, r1
 8001a66:	07f7      	lsls	r7, r6, #31
 8001a68:	4317      	orrs	r7, r2
 8001a6a:	0876      	lsrs	r6, r6, #1
 8001a6c:	e771      	b.n	8001952 <__aeabi_dadd+0xfa>
 8001a6e:	001f      	movs	r7, r3
 8001a70:	4317      	orrs	r7, r2
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x21e>
 8001a74:	e0ad      	b.n	8001bd2 <__aeabi_dadd+0x37a>
 8001a76:	1e4f      	subs	r7, r1, #1
 8001a78:	46bc      	mov	ip, r7
 8001a7a:	2901      	cmp	r1, #1
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dadd+0x228>
 8001a7e:	e182      	b.n	8001d86 <__aeabi_dadd+0x52e>
 8001a80:	4f58      	ldr	r7, [pc, #352]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a82:	42b9      	cmp	r1, r7
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dadd+0x230>
 8001a86:	e190      	b.n	8001daa <__aeabi_dadd+0x552>
 8001a88:	4661      	mov	r1, ip
 8001a8a:	2701      	movs	r7, #1
 8001a8c:	2938      	cmp	r1, #56	@ 0x38
 8001a8e:	dd00      	ble.n	8001a92 <__aeabi_dadd+0x23a>
 8001a90:	e72e      	b.n	80018f0 <__aeabi_dadd+0x98>
 8001a92:	e718      	b.n	80018c6 <__aeabi_dadd+0x6e>
 8001a94:	4f55      	ldr	r7, [pc, #340]	@ (8001bec <__aeabi_dadd+0x394>)
 8001a96:	1c61      	adds	r1, r4, #1
 8001a98:	4239      	tst	r1, r7
 8001a9a:	d000      	beq.n	8001a9e <__aeabi_dadd+0x246>
 8001a9c:	e0d0      	b.n	8001c40 <__aeabi_dadd+0x3e8>
 8001a9e:	0031      	movs	r1, r6
 8001aa0:	4648      	mov	r0, r9
 8001aa2:	001f      	movs	r7, r3
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	4317      	orrs	r7, r2
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d000      	beq.n	8001aae <__aeabi_dadd+0x256>
 8001aac:	e13d      	b.n	8001d2a <__aeabi_dadd+0x4d2>
 8001aae:	2900      	cmp	r1, #0
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dadd+0x25c>
 8001ab2:	e1bc      	b.n	8001e2e <__aeabi_dadd+0x5d6>
 8001ab4:	2f00      	cmp	r7, #0
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dadd+0x262>
 8001ab8:	e1bf      	b.n	8001e3a <__aeabi_dadd+0x5e2>
 8001aba:	464b      	mov	r3, r9
 8001abc:	2100      	movs	r1, #0
 8001abe:	08d8      	lsrs	r0, r3, #3
 8001ac0:	0777      	lsls	r7, r6, #29
 8001ac2:	4307      	orrs	r7, r0
 8001ac4:	08f0      	lsrs	r0, r6, #3
 8001ac6:	0306      	lsls	r6, r0, #12
 8001ac8:	054c      	lsls	r4, r1, #21
 8001aca:	0b36      	lsrs	r6, r6, #12
 8001acc:	0d64      	lsrs	r4, r4, #21
 8001ace:	e00c      	b.n	8001aea <__aeabi_dadd+0x292>
 8001ad0:	4f44      	ldr	r7, [pc, #272]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001ad2:	42bc      	cmp	r4, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dadd+0x280>
 8001ad6:	e08b      	b.n	8001bf0 <__aeabi_dadd+0x398>
 8001ad8:	2701      	movs	r7, #1
 8001ada:	2938      	cmp	r1, #56	@ 0x38
 8001adc:	dcb2      	bgt.n	8001a44 <__aeabi_dadd+0x1ec>
 8001ade:	2780      	movs	r7, #128	@ 0x80
 8001ae0:	043f      	lsls	r7, r7, #16
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	e79c      	b.n	8001a20 <__aeabi_dadd+0x1c8>
 8001ae6:	2600      	movs	r6, #0
 8001ae8:	2700      	movs	r7, #0
 8001aea:	0524      	lsls	r4, r4, #20
 8001aec:	4334      	orrs	r4, r6
 8001aee:	07ed      	lsls	r5, r5, #31
 8001af0:	432c      	orrs	r4, r5
 8001af2:	0038      	movs	r0, r7
 8001af4:	0021      	movs	r1, r4
 8001af6:	b002      	add	sp, #8
 8001af8:	bce0      	pop	{r5, r6, r7}
 8001afa:	46ba      	mov	sl, r7
 8001afc:	46b1      	mov	r9, r6
 8001afe:	46a8      	mov	r8, r5
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	077b      	lsls	r3, r7, #29
 8001b04:	d004      	beq.n	8001b10 <__aeabi_dadd+0x2b8>
 8001b06:	230f      	movs	r3, #15
 8001b08:	403b      	ands	r3, r7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d000      	beq.n	8001b10 <__aeabi_dadd+0x2b8>
 8001b0e:	e728      	b.n	8001962 <__aeabi_dadd+0x10a>
 8001b10:	08f8      	lsrs	r0, r7, #3
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b14:	0777      	lsls	r7, r6, #29
 8001b16:	4307      	orrs	r7, r0
 8001b18:	08f0      	lsrs	r0, r6, #3
 8001b1a:	429c      	cmp	r4, r3
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_dadd+0x2c8>
 8001b1e:	e24a      	b.n	8001fb6 <__aeabi_dadd+0x75e>
 8001b20:	003b      	movs	r3, r7
 8001b22:	4303      	orrs	r3, r0
 8001b24:	d059      	beq.n	8001bda <__aeabi_dadd+0x382>
 8001b26:	2680      	movs	r6, #128	@ 0x80
 8001b28:	0336      	lsls	r6, r6, #12
 8001b2a:	4306      	orrs	r6, r0
 8001b2c:	0336      	lsls	r6, r6, #12
 8001b2e:	4c2d      	ldr	r4, [pc, #180]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b30:	0b36      	lsrs	r6, r6, #12
 8001b32:	e7da      	b.n	8001aea <__aeabi_dadd+0x292>
 8001b34:	2900      	cmp	r1, #0
 8001b36:	d061      	beq.n	8001bfc <__aeabi_dadd+0x3a4>
 8001b38:	4641      	mov	r1, r8
 8001b3a:	1b09      	subs	r1, r1, r4
 8001b3c:	2c00      	cmp	r4, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dadd+0x2ea>
 8001b40:	e0b9      	b.n	8001cb6 <__aeabi_dadd+0x45e>
 8001b42:	4c28      	ldr	r4, [pc, #160]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b44:	45a0      	cmp	r8, r4
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dadd+0x2f2>
 8001b48:	e1a5      	b.n	8001e96 <__aeabi_dadd+0x63e>
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	2938      	cmp	r1, #56	@ 0x38
 8001b4e:	dc13      	bgt.n	8001b78 <__aeabi_dadd+0x320>
 8001b50:	2480      	movs	r4, #128	@ 0x80
 8001b52:	0424      	lsls	r4, r4, #16
 8001b54:	4326      	orrs	r6, r4
 8001b56:	291f      	cmp	r1, #31
 8001b58:	dd00      	ble.n	8001b5c <__aeabi_dadd+0x304>
 8001b5a:	e1c8      	b.n	8001eee <__aeabi_dadd+0x696>
 8001b5c:	2420      	movs	r4, #32
 8001b5e:	0037      	movs	r7, r6
 8001b60:	4648      	mov	r0, r9
 8001b62:	1a64      	subs	r4, r4, r1
 8001b64:	40a7      	lsls	r7, r4
 8001b66:	40c8      	lsrs	r0, r1
 8001b68:	4307      	orrs	r7, r0
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	40a0      	lsls	r0, r4
 8001b6e:	40ce      	lsrs	r6, r1
 8001b70:	1e44      	subs	r4, r0, #1
 8001b72:	41a0      	sbcs	r0, r4
 8001b74:	199b      	adds	r3, r3, r6
 8001b76:	4307      	orrs	r7, r0
 8001b78:	18bf      	adds	r7, r7, r2
 8001b7a:	4297      	cmp	r7, r2
 8001b7c:	4192      	sbcs	r2, r2
 8001b7e:	4252      	negs	r2, r2
 8001b80:	4644      	mov	r4, r8
 8001b82:	18d6      	adds	r6, r2, r3
 8001b84:	e763      	b.n	8001a4e <__aeabi_dadd+0x1f6>
 8001b86:	0038      	movs	r0, r7
 8001b88:	f7fe fcdc 	bl	8000544 <__clzsi2>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	3318      	adds	r3, #24
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dadd+0x33e>
 8001b94:	e6bf      	b.n	8001916 <__aeabi_dadd+0xbe>
 8001b96:	003a      	movs	r2, r7
 8001b98:	3808      	subs	r0, #8
 8001b9a:	4082      	lsls	r2, r0
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dadd+0x34a>
 8001ba0:	e083      	b.n	8001caa <__aeabi_dadd+0x452>
 8001ba2:	1b1b      	subs	r3, r3, r4
 8001ba4:	1c58      	adds	r0, r3, #1
 8001ba6:	281f      	cmp	r0, #31
 8001ba8:	dc00      	bgt.n	8001bac <__aeabi_dadd+0x354>
 8001baa:	e1b4      	b.n	8001f16 <__aeabi_dadd+0x6be>
 8001bac:	0017      	movs	r7, r2
 8001bae:	3b1f      	subs	r3, #31
 8001bb0:	40df      	lsrs	r7, r3
 8001bb2:	2820      	cmp	r0, #32
 8001bb4:	d005      	beq.n	8001bc2 <__aeabi_dadd+0x36a>
 8001bb6:	2340      	movs	r3, #64	@ 0x40
 8001bb8:	1a1b      	subs	r3, r3, r0
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	1e53      	subs	r3, r2, #1
 8001bbe:	419a      	sbcs	r2, r3
 8001bc0:	4317      	orrs	r7, r2
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2f00      	cmp	r7, #0
 8001bc6:	d00a      	beq.n	8001bde <__aeabi_dadd+0x386>
 8001bc8:	077b      	lsls	r3, r7, #29
 8001bca:	d000      	beq.n	8001bce <__aeabi_dadd+0x376>
 8001bcc:	e6c4      	b.n	8001958 <__aeabi_dadd+0x100>
 8001bce:	0026      	movs	r6, r4
 8001bd0:	e79e      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	000c      	movs	r4, r1
 8001bd6:	08d8      	lsrs	r0, r3, #3
 8001bd8:	e79b      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001bda:	2700      	movs	r7, #0
 8001bdc:	4c01      	ldr	r4, [pc, #4]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001bde:	2600      	movs	r6, #0
 8001be0:	e783      	b.n	8001aea <__aeabi_dadd+0x292>
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	000007ff 	.word	0x000007ff
 8001be8:	ff7fffff 	.word	0xff7fffff
 8001bec:	000007fe 	.word	0x000007fe
 8001bf0:	464b      	mov	r3, r9
 8001bf2:	0777      	lsls	r7, r6, #29
 8001bf4:	08d8      	lsrs	r0, r3, #3
 8001bf6:	4307      	orrs	r7, r0
 8001bf8:	08f0      	lsrs	r0, r6, #3
 8001bfa:	e791      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001bfc:	4fcd      	ldr	r7, [pc, #820]	@ (8001f34 <__aeabi_dadd+0x6dc>)
 8001bfe:	1c61      	adds	r1, r4, #1
 8001c00:	4239      	tst	r1, r7
 8001c02:	d16b      	bne.n	8001cdc <__aeabi_dadd+0x484>
 8001c04:	0031      	movs	r1, r6
 8001c06:	4648      	mov	r0, r9
 8001c08:	4301      	orrs	r1, r0
 8001c0a:	2c00      	cmp	r4, #0
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dadd+0x3b8>
 8001c0e:	e14b      	b.n	8001ea8 <__aeabi_dadd+0x650>
 8001c10:	001f      	movs	r7, r3
 8001c12:	4317      	orrs	r7, r2
 8001c14:	2900      	cmp	r1, #0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dadd+0x3c2>
 8001c18:	e181      	b.n	8001f1e <__aeabi_dadd+0x6c6>
 8001c1a:	2f00      	cmp	r7, #0
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dadd+0x3c8>
 8001c1e:	e74c      	b.n	8001aba <__aeabi_dadd+0x262>
 8001c20:	444a      	add	r2, r9
 8001c22:	454a      	cmp	r2, r9
 8001c24:	4180      	sbcs	r0, r0
 8001c26:	18f6      	adds	r6, r6, r3
 8001c28:	4240      	negs	r0, r0
 8001c2a:	1836      	adds	r6, r6, r0
 8001c2c:	0233      	lsls	r3, r6, #8
 8001c2e:	d500      	bpl.n	8001c32 <__aeabi_dadd+0x3da>
 8001c30:	e1b0      	b.n	8001f94 <__aeabi_dadd+0x73c>
 8001c32:	0017      	movs	r7, r2
 8001c34:	4691      	mov	r9, r2
 8001c36:	4337      	orrs	r7, r6
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dadd+0x3e4>
 8001c3a:	e73e      	b.n	8001aba <__aeabi_dadd+0x262>
 8001c3c:	2600      	movs	r6, #0
 8001c3e:	e754      	b.n	8001aea <__aeabi_dadd+0x292>
 8001c40:	4649      	mov	r1, r9
 8001c42:	1a89      	subs	r1, r1, r2
 8001c44:	4688      	mov	r8, r1
 8001c46:	45c1      	cmp	r9, r8
 8001c48:	41bf      	sbcs	r7, r7
 8001c4a:	1af1      	subs	r1, r6, r3
 8001c4c:	427f      	negs	r7, r7
 8001c4e:	1bc9      	subs	r1, r1, r7
 8001c50:	020f      	lsls	r7, r1, #8
 8001c52:	d461      	bmi.n	8001d18 <__aeabi_dadd+0x4c0>
 8001c54:	4647      	mov	r7, r8
 8001c56:	430f      	orrs	r7, r1
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dadd+0x404>
 8001c5a:	e0bd      	b.n	8001dd8 <__aeabi_dadd+0x580>
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	4647      	mov	r7, r8
 8001c60:	e651      	b.n	8001906 <__aeabi_dadd+0xae>
 8001c62:	4cb5      	ldr	r4, [pc, #724]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001c64:	45a0      	cmp	r8, r4
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dadd+0x412>
 8001c68:	e100      	b.n	8001e6c <__aeabi_dadd+0x614>
 8001c6a:	2701      	movs	r7, #1
 8001c6c:	2938      	cmp	r1, #56	@ 0x38
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dadd+0x41a>
 8001c70:	e6b8      	b.n	80019e4 <__aeabi_dadd+0x18c>
 8001c72:	2480      	movs	r4, #128	@ 0x80
 8001c74:	0424      	lsls	r4, r4, #16
 8001c76:	4326      	orrs	r6, r4
 8001c78:	e6a3      	b.n	80019c2 <__aeabi_dadd+0x16a>
 8001c7a:	4eb0      	ldr	r6, [pc, #704]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001c7c:	1ae4      	subs	r4, r4, r3
 8001c7e:	4016      	ands	r6, r2
 8001c80:	077b      	lsls	r3, r7, #29
 8001c82:	d000      	beq.n	8001c86 <__aeabi_dadd+0x42e>
 8001c84:	e73f      	b.n	8001b06 <__aeabi_dadd+0x2ae>
 8001c86:	e743      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001c88:	000f      	movs	r7, r1
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	3f20      	subs	r7, #32
 8001c8e:	40f8      	lsrs	r0, r7
 8001c90:	4684      	mov	ip, r0
 8001c92:	2920      	cmp	r1, #32
 8001c94:	d003      	beq.n	8001c9e <__aeabi_dadd+0x446>
 8001c96:	2740      	movs	r7, #64	@ 0x40
 8001c98:	1a79      	subs	r1, r7, r1
 8001c9a:	408b      	lsls	r3, r1
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	1e53      	subs	r3, r2, #1
 8001ca0:	419a      	sbcs	r2, r3
 8001ca2:	4663      	mov	r3, ip
 8001ca4:	0017      	movs	r7, r2
 8001ca6:	431f      	orrs	r7, r3
 8001ca8:	e622      	b.n	80018f0 <__aeabi_dadd+0x98>
 8001caa:	48a4      	ldr	r0, [pc, #656]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001cac:	1ae1      	subs	r1, r4, r3
 8001cae:	4010      	ands	r0, r2
 8001cb0:	0747      	lsls	r7, r0, #29
 8001cb2:	08c0      	lsrs	r0, r0, #3
 8001cb4:	e707      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001cb6:	0034      	movs	r4, r6
 8001cb8:	4648      	mov	r0, r9
 8001cba:	4304      	orrs	r4, r0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dadd+0x468>
 8001cbe:	e0fa      	b.n	8001eb6 <__aeabi_dadd+0x65e>
 8001cc0:	1e4c      	subs	r4, r1, #1
 8001cc2:	2901      	cmp	r1, #1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dadd+0x470>
 8001cc6:	e0d7      	b.n	8001e78 <__aeabi_dadd+0x620>
 8001cc8:	4f9b      	ldr	r7, [pc, #620]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001cca:	42b9      	cmp	r1, r7
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dadd+0x478>
 8001cce:	e0e2      	b.n	8001e96 <__aeabi_dadd+0x63e>
 8001cd0:	2701      	movs	r7, #1
 8001cd2:	2c38      	cmp	r4, #56	@ 0x38
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_dadd+0x480>
 8001cd6:	e74f      	b.n	8001b78 <__aeabi_dadd+0x320>
 8001cd8:	0021      	movs	r1, r4
 8001cda:	e73c      	b.n	8001b56 <__aeabi_dadd+0x2fe>
 8001cdc:	4c96      	ldr	r4, [pc, #600]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001cde:	42a1      	cmp	r1, r4
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dadd+0x48c>
 8001ce2:	e0dd      	b.n	8001ea0 <__aeabi_dadd+0x648>
 8001ce4:	444a      	add	r2, r9
 8001ce6:	454a      	cmp	r2, r9
 8001ce8:	4180      	sbcs	r0, r0
 8001cea:	18f3      	adds	r3, r6, r3
 8001cec:	4240      	negs	r0, r0
 8001cee:	1818      	adds	r0, r3, r0
 8001cf0:	07c7      	lsls	r7, r0, #31
 8001cf2:	0852      	lsrs	r2, r2, #1
 8001cf4:	4317      	orrs	r7, r2
 8001cf6:	0846      	lsrs	r6, r0, #1
 8001cf8:	0752      	lsls	r2, r2, #29
 8001cfa:	d005      	beq.n	8001d08 <__aeabi_dadd+0x4b0>
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	000c      	movs	r4, r1
 8001d00:	403a      	ands	r2, r7
 8001d02:	2a04      	cmp	r2, #4
 8001d04:	d000      	beq.n	8001d08 <__aeabi_dadd+0x4b0>
 8001d06:	e62c      	b.n	8001962 <__aeabi_dadd+0x10a>
 8001d08:	0776      	lsls	r6, r6, #29
 8001d0a:	08ff      	lsrs	r7, r7, #3
 8001d0c:	4337      	orrs	r7, r6
 8001d0e:	0900      	lsrs	r0, r0, #4
 8001d10:	e6d9      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001d12:	2700      	movs	r7, #0
 8001d14:	2600      	movs	r6, #0
 8001d16:	e6e8      	b.n	8001aea <__aeabi_dadd+0x292>
 8001d18:	4649      	mov	r1, r9
 8001d1a:	1a57      	subs	r7, r2, r1
 8001d1c:	42ba      	cmp	r2, r7
 8001d1e:	4192      	sbcs	r2, r2
 8001d20:	1b9e      	subs	r6, r3, r6
 8001d22:	4252      	negs	r2, r2
 8001d24:	4665      	mov	r5, ip
 8001d26:	1ab6      	subs	r6, r6, r2
 8001d28:	e5ed      	b.n	8001906 <__aeabi_dadd+0xae>
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dadd+0x4d8>
 8001d2e:	e0c6      	b.n	8001ebe <__aeabi_dadd+0x666>
 8001d30:	2f00      	cmp	r7, #0
 8001d32:	d167      	bne.n	8001e04 <__aeabi_dadd+0x5ac>
 8001d34:	2680      	movs	r6, #128	@ 0x80
 8001d36:	2500      	movs	r5, #0
 8001d38:	4c7f      	ldr	r4, [pc, #508]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001d3a:	0336      	lsls	r6, r6, #12
 8001d3c:	e6d5      	b.n	8001aea <__aeabi_dadd+0x292>
 8001d3e:	4665      	mov	r5, ip
 8001d40:	000c      	movs	r4, r1
 8001d42:	001e      	movs	r6, r3
 8001d44:	08d0      	lsrs	r0, r2, #3
 8001d46:	e6e4      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001d48:	444a      	add	r2, r9
 8001d4a:	454a      	cmp	r2, r9
 8001d4c:	4180      	sbcs	r0, r0
 8001d4e:	18f3      	adds	r3, r6, r3
 8001d50:	4240      	negs	r0, r0
 8001d52:	1818      	adds	r0, r3, r0
 8001d54:	0011      	movs	r1, r2
 8001d56:	0203      	lsls	r3, r0, #8
 8001d58:	d400      	bmi.n	8001d5c <__aeabi_dadd+0x504>
 8001d5a:	e096      	b.n	8001e8a <__aeabi_dadd+0x632>
 8001d5c:	4b77      	ldr	r3, [pc, #476]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001d5e:	0849      	lsrs	r1, r1, #1
 8001d60:	4018      	ands	r0, r3
 8001d62:	07c3      	lsls	r3, r0, #31
 8001d64:	430b      	orrs	r3, r1
 8001d66:	0844      	lsrs	r4, r0, #1
 8001d68:	0749      	lsls	r1, r1, #29
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dadd+0x516>
 8001d6c:	e129      	b.n	8001fc2 <__aeabi_dadd+0x76a>
 8001d6e:	220f      	movs	r2, #15
 8001d70:	401a      	ands	r2, r3
 8001d72:	2a04      	cmp	r2, #4
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dadd+0x520>
 8001d76:	e0ea      	b.n	8001f4e <__aeabi_dadd+0x6f6>
 8001d78:	1d1f      	adds	r7, r3, #4
 8001d7a:	429f      	cmp	r7, r3
 8001d7c:	41b6      	sbcs	r6, r6
 8001d7e:	4276      	negs	r6, r6
 8001d80:	1936      	adds	r6, r6, r4
 8001d82:	2402      	movs	r4, #2
 8001d84:	e6c4      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001d86:	4649      	mov	r1, r9
 8001d88:	1a8f      	subs	r7, r1, r2
 8001d8a:	45b9      	cmp	r9, r7
 8001d8c:	4180      	sbcs	r0, r0
 8001d8e:	1af6      	subs	r6, r6, r3
 8001d90:	4240      	negs	r0, r0
 8001d92:	1a36      	subs	r6, r6, r0
 8001d94:	0233      	lsls	r3, r6, #8
 8001d96:	d406      	bmi.n	8001da6 <__aeabi_dadd+0x54e>
 8001d98:	0773      	lsls	r3, r6, #29
 8001d9a:	08ff      	lsrs	r7, r7, #3
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	431f      	orrs	r7, r3
 8001da0:	08f0      	lsrs	r0, r6, #3
 8001da2:	e690      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001da4:	4665      	mov	r5, ip
 8001da6:	2401      	movs	r4, #1
 8001da8:	e5ab      	b.n	8001902 <__aeabi_dadd+0xaa>
 8001daa:	464b      	mov	r3, r9
 8001dac:	0777      	lsls	r7, r6, #29
 8001dae:	08d8      	lsrs	r0, r3, #3
 8001db0:	4307      	orrs	r7, r0
 8001db2:	08f0      	lsrs	r0, r6, #3
 8001db4:	e6b4      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001db6:	000f      	movs	r7, r1
 8001db8:	0018      	movs	r0, r3
 8001dba:	3f20      	subs	r7, #32
 8001dbc:	40f8      	lsrs	r0, r7
 8001dbe:	4684      	mov	ip, r0
 8001dc0:	2920      	cmp	r1, #32
 8001dc2:	d003      	beq.n	8001dcc <__aeabi_dadd+0x574>
 8001dc4:	2740      	movs	r7, #64	@ 0x40
 8001dc6:	1a79      	subs	r1, r7, r1
 8001dc8:	408b      	lsls	r3, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	1e53      	subs	r3, r2, #1
 8001dce:	419a      	sbcs	r2, r3
 8001dd0:	4663      	mov	r3, ip
 8001dd2:	0017      	movs	r7, r2
 8001dd4:	431f      	orrs	r7, r3
 8001dd6:	e635      	b.n	8001a44 <__aeabi_dadd+0x1ec>
 8001dd8:	2500      	movs	r5, #0
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2600      	movs	r6, #0
 8001dde:	e684      	b.n	8001aea <__aeabi_dadd+0x292>
 8001de0:	000c      	movs	r4, r1
 8001de2:	0035      	movs	r5, r6
 8001de4:	3c20      	subs	r4, #32
 8001de6:	40e5      	lsrs	r5, r4
 8001de8:	2920      	cmp	r1, #32
 8001dea:	d005      	beq.n	8001df8 <__aeabi_dadd+0x5a0>
 8001dec:	2440      	movs	r4, #64	@ 0x40
 8001dee:	1a61      	subs	r1, r4, r1
 8001df0:	408e      	lsls	r6, r1
 8001df2:	4649      	mov	r1, r9
 8001df4:	4331      	orrs	r1, r6
 8001df6:	4689      	mov	r9, r1
 8001df8:	4648      	mov	r0, r9
 8001dfa:	1e41      	subs	r1, r0, #1
 8001dfc:	4188      	sbcs	r0, r1
 8001dfe:	0007      	movs	r7, r0
 8001e00:	432f      	orrs	r7, r5
 8001e02:	e5ef      	b.n	80019e4 <__aeabi_dadd+0x18c>
 8001e04:	08d2      	lsrs	r2, r2, #3
 8001e06:	075f      	lsls	r7, r3, #29
 8001e08:	4665      	mov	r5, ip
 8001e0a:	4317      	orrs	r7, r2
 8001e0c:	08d8      	lsrs	r0, r3, #3
 8001e0e:	e687      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001e10:	1a17      	subs	r7, r2, r0
 8001e12:	42ba      	cmp	r2, r7
 8001e14:	4192      	sbcs	r2, r2
 8001e16:	1b9e      	subs	r6, r3, r6
 8001e18:	4252      	negs	r2, r2
 8001e1a:	1ab6      	subs	r6, r6, r2
 8001e1c:	0233      	lsls	r3, r6, #8
 8001e1e:	d4c1      	bmi.n	8001da4 <__aeabi_dadd+0x54c>
 8001e20:	0773      	lsls	r3, r6, #29
 8001e22:	08ff      	lsrs	r7, r7, #3
 8001e24:	4665      	mov	r5, ip
 8001e26:	2101      	movs	r1, #1
 8001e28:	431f      	orrs	r7, r3
 8001e2a:	08f0      	lsrs	r0, r6, #3
 8001e2c:	e64b      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001e2e:	2f00      	cmp	r7, #0
 8001e30:	d07b      	beq.n	8001f2a <__aeabi_dadd+0x6d2>
 8001e32:	4665      	mov	r5, ip
 8001e34:	001e      	movs	r6, r3
 8001e36:	4691      	mov	r9, r2
 8001e38:	e63f      	b.n	8001aba <__aeabi_dadd+0x262>
 8001e3a:	1a81      	subs	r1, r0, r2
 8001e3c:	4688      	mov	r8, r1
 8001e3e:	45c1      	cmp	r9, r8
 8001e40:	41a4      	sbcs	r4, r4
 8001e42:	1af1      	subs	r1, r6, r3
 8001e44:	4264      	negs	r4, r4
 8001e46:	1b09      	subs	r1, r1, r4
 8001e48:	2480      	movs	r4, #128	@ 0x80
 8001e4a:	0424      	lsls	r4, r4, #16
 8001e4c:	4221      	tst	r1, r4
 8001e4e:	d077      	beq.n	8001f40 <__aeabi_dadd+0x6e8>
 8001e50:	1a10      	subs	r0, r2, r0
 8001e52:	4282      	cmp	r2, r0
 8001e54:	4192      	sbcs	r2, r2
 8001e56:	0007      	movs	r7, r0
 8001e58:	1b9e      	subs	r6, r3, r6
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	1ab6      	subs	r6, r6, r2
 8001e5e:	4337      	orrs	r7, r6
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dadd+0x60c>
 8001e62:	e0a0      	b.n	8001fa6 <__aeabi_dadd+0x74e>
 8001e64:	4665      	mov	r5, ip
 8001e66:	2400      	movs	r4, #0
 8001e68:	2600      	movs	r6, #0
 8001e6a:	e63e      	b.n	8001aea <__aeabi_dadd+0x292>
 8001e6c:	075f      	lsls	r7, r3, #29
 8001e6e:	08d2      	lsrs	r2, r2, #3
 8001e70:	4665      	mov	r5, ip
 8001e72:	4317      	orrs	r7, r2
 8001e74:	08d8      	lsrs	r0, r3, #3
 8001e76:	e653      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001e78:	1881      	adds	r1, r0, r2
 8001e7a:	4291      	cmp	r1, r2
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	18f0      	adds	r0, r6, r3
 8001e80:	4252      	negs	r2, r2
 8001e82:	1880      	adds	r0, r0, r2
 8001e84:	0203      	lsls	r3, r0, #8
 8001e86:	d500      	bpl.n	8001e8a <__aeabi_dadd+0x632>
 8001e88:	e768      	b.n	8001d5c <__aeabi_dadd+0x504>
 8001e8a:	0747      	lsls	r7, r0, #29
 8001e8c:	08c9      	lsrs	r1, r1, #3
 8001e8e:	430f      	orrs	r7, r1
 8001e90:	08c0      	lsrs	r0, r0, #3
 8001e92:	2101      	movs	r1, #1
 8001e94:	e617      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	075f      	lsls	r7, r3, #29
 8001e9a:	4317      	orrs	r7, r2
 8001e9c:	08d8      	lsrs	r0, r3, #3
 8001e9e:	e63f      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001ea0:	000c      	movs	r4, r1
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	2700      	movs	r7, #0
 8001ea6:	e620      	b.n	8001aea <__aeabi_dadd+0x292>
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	d156      	bne.n	8001f5a <__aeabi_dadd+0x702>
 8001eac:	075f      	lsls	r7, r3, #29
 8001eae:	08d2      	lsrs	r2, r2, #3
 8001eb0:	4317      	orrs	r7, r2
 8001eb2:	08d8      	lsrs	r0, r3, #3
 8001eb4:	e634      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001eb6:	000c      	movs	r4, r1
 8001eb8:	001e      	movs	r6, r3
 8001eba:	08d0      	lsrs	r0, r2, #3
 8001ebc:	e629      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001ebe:	08c1      	lsrs	r1, r0, #3
 8001ec0:	0770      	lsls	r0, r6, #29
 8001ec2:	4301      	orrs	r1, r0
 8001ec4:	08f0      	lsrs	r0, r6, #3
 8001ec6:	2f00      	cmp	r7, #0
 8001ec8:	d062      	beq.n	8001f90 <__aeabi_dadd+0x738>
 8001eca:	2480      	movs	r4, #128	@ 0x80
 8001ecc:	0324      	lsls	r4, r4, #12
 8001ece:	4220      	tst	r0, r4
 8001ed0:	d007      	beq.n	8001ee2 <__aeabi_dadd+0x68a>
 8001ed2:	08de      	lsrs	r6, r3, #3
 8001ed4:	4226      	tst	r6, r4
 8001ed6:	d104      	bne.n	8001ee2 <__aeabi_dadd+0x68a>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	0030      	movs	r0, r6
 8001edc:	08d1      	lsrs	r1, r2, #3
 8001ede:	075b      	lsls	r3, r3, #29
 8001ee0:	4319      	orrs	r1, r3
 8001ee2:	0f4f      	lsrs	r7, r1, #29
 8001ee4:	00c9      	lsls	r1, r1, #3
 8001ee6:	08c9      	lsrs	r1, r1, #3
 8001ee8:	077f      	lsls	r7, r7, #29
 8001eea:	430f      	orrs	r7, r1
 8001eec:	e618      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001eee:	000c      	movs	r4, r1
 8001ef0:	0030      	movs	r0, r6
 8001ef2:	3c20      	subs	r4, #32
 8001ef4:	40e0      	lsrs	r0, r4
 8001ef6:	4684      	mov	ip, r0
 8001ef8:	2920      	cmp	r1, #32
 8001efa:	d005      	beq.n	8001f08 <__aeabi_dadd+0x6b0>
 8001efc:	2440      	movs	r4, #64	@ 0x40
 8001efe:	1a61      	subs	r1, r4, r1
 8001f00:	408e      	lsls	r6, r1
 8001f02:	4649      	mov	r1, r9
 8001f04:	4331      	orrs	r1, r6
 8001f06:	4689      	mov	r9, r1
 8001f08:	4648      	mov	r0, r9
 8001f0a:	1e41      	subs	r1, r0, #1
 8001f0c:	4188      	sbcs	r0, r1
 8001f0e:	4661      	mov	r1, ip
 8001f10:	0007      	movs	r7, r0
 8001f12:	430f      	orrs	r7, r1
 8001f14:	e630      	b.n	8001b78 <__aeabi_dadd+0x320>
 8001f16:	2120      	movs	r1, #32
 8001f18:	2700      	movs	r7, #0
 8001f1a:	1a09      	subs	r1, r1, r0
 8001f1c:	e50e      	b.n	800193c <__aeabi_dadd+0xe4>
 8001f1e:	001e      	movs	r6, r3
 8001f20:	2f00      	cmp	r7, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dadd+0x6ce>
 8001f24:	e522      	b.n	800196c <__aeabi_dadd+0x114>
 8001f26:	2400      	movs	r4, #0
 8001f28:	e758      	b.n	8001ddc <__aeabi_dadd+0x584>
 8001f2a:	2500      	movs	r5, #0
 8001f2c:	2400      	movs	r4, #0
 8001f2e:	2600      	movs	r6, #0
 8001f30:	e5db      	b.n	8001aea <__aeabi_dadd+0x292>
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	000007fe 	.word	0x000007fe
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	ff7fffff 	.word	0xff7fffff
 8001f40:	4647      	mov	r7, r8
 8001f42:	430f      	orrs	r7, r1
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dadd+0x6f0>
 8001f46:	e747      	b.n	8001dd8 <__aeabi_dadd+0x580>
 8001f48:	000e      	movs	r6, r1
 8001f4a:	46c1      	mov	r9, r8
 8001f4c:	e5b5      	b.n	8001aba <__aeabi_dadd+0x262>
 8001f4e:	08df      	lsrs	r7, r3, #3
 8001f50:	0764      	lsls	r4, r4, #29
 8001f52:	2102      	movs	r1, #2
 8001f54:	4327      	orrs	r7, r4
 8001f56:	0900      	lsrs	r0, r0, #4
 8001f58:	e5b5      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	08c0      	lsrs	r0, r0, #3
 8001f5e:	0777      	lsls	r7, r6, #29
 8001f60:	4307      	orrs	r7, r0
 8001f62:	4311      	orrs	r1, r2
 8001f64:	08f0      	lsrs	r0, r6, #3
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dadd+0x714>
 8001f6a:	e5d9      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f6c:	2180      	movs	r1, #128	@ 0x80
 8001f6e:	0309      	lsls	r1, r1, #12
 8001f70:	4208      	tst	r0, r1
 8001f72:	d007      	beq.n	8001f84 <__aeabi_dadd+0x72c>
 8001f74:	08dc      	lsrs	r4, r3, #3
 8001f76:	420c      	tst	r4, r1
 8001f78:	d104      	bne.n	8001f84 <__aeabi_dadd+0x72c>
 8001f7a:	08d2      	lsrs	r2, r2, #3
 8001f7c:	075b      	lsls	r3, r3, #29
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	0017      	movs	r7, r2
 8001f82:	0020      	movs	r0, r4
 8001f84:	0f7b      	lsrs	r3, r7, #29
 8001f86:	00ff      	lsls	r7, r7, #3
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	075b      	lsls	r3, r3, #29
 8001f8c:	431f      	orrs	r7, r3
 8001f8e:	e5c7      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f90:	000f      	movs	r7, r1
 8001f92:	e5c5      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <__aeabi_dadd+0x788>)
 8001f96:	08d2      	lsrs	r2, r2, #3
 8001f98:	4033      	ands	r3, r6
 8001f9a:	075f      	lsls	r7, r3, #29
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	2401      	movs	r4, #1
 8001fa0:	4317      	orrs	r7, r2
 8001fa2:	0b1e      	lsrs	r6, r3, #12
 8001fa4:	e5a1      	b.n	8001aea <__aeabi_dadd+0x292>
 8001fa6:	4226      	tst	r6, r4
 8001fa8:	d012      	beq.n	8001fd0 <__aeabi_dadd+0x778>
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <__aeabi_dadd+0x788>)
 8001fac:	4665      	mov	r5, ip
 8001fae:	0002      	movs	r2, r0
 8001fb0:	2401      	movs	r4, #1
 8001fb2:	401e      	ands	r6, r3
 8001fb4:	e4e6      	b.n	8001984 <__aeabi_dadd+0x12c>
 8001fb6:	0021      	movs	r1, r4
 8001fb8:	e585      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fba:	0017      	movs	r7, r2
 8001fbc:	e5a8      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	e4d4      	b.n	800196c <__aeabi_dadd+0x114>
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0764      	lsls	r4, r4, #29
 8001fc6:	431c      	orrs	r4, r3
 8001fc8:	0027      	movs	r7, r4
 8001fca:	2102      	movs	r1, #2
 8001fcc:	0900      	lsrs	r0, r0, #4
 8001fce:	e57a      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fd0:	08c0      	lsrs	r0, r0, #3
 8001fd2:	0777      	lsls	r7, r6, #29
 8001fd4:	4307      	orrs	r7, r0
 8001fd6:	4665      	mov	r5, ip
 8001fd8:	2100      	movs	r1, #0
 8001fda:	08f0      	lsrs	r0, r6, #3
 8001fdc:	e573      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	ff7fffff 	.word	0xff7fffff

08001fe4 <__aeabi_ddiv>:
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	46de      	mov	lr, fp
 8001fe8:	4645      	mov	r5, r8
 8001fea:	4657      	mov	r7, sl
 8001fec:	464e      	mov	r6, r9
 8001fee:	b5e0      	push	{r5, r6, r7, lr}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	9200      	str	r2, [sp, #0]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	030b      	lsls	r3, r1, #12
 8001ff8:	0b1b      	lsrs	r3, r3, #12
 8001ffa:	469b      	mov	fp, r3
 8001ffc:	0fca      	lsrs	r2, r1, #31
 8001ffe:	004b      	lsls	r3, r1, #1
 8002000:	0004      	movs	r4, r0
 8002002:	4680      	mov	r8, r0
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	9202      	str	r2, [sp, #8]
 8002008:	d100      	bne.n	800200c <__aeabi_ddiv+0x28>
 800200a:	e098      	b.n	800213e <__aeabi_ddiv+0x15a>
 800200c:	4a7c      	ldr	r2, [pc, #496]	@ (8002200 <__aeabi_ddiv+0x21c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d037      	beq.n	8002082 <__aeabi_ddiv+0x9e>
 8002012:	4659      	mov	r1, fp
 8002014:	0f42      	lsrs	r2, r0, #29
 8002016:	00c9      	lsls	r1, r1, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	0409      	lsls	r1, r1, #16
 800201e:	4311      	orrs	r1, r2
 8002020:	00c2      	lsls	r2, r0, #3
 8002022:	4690      	mov	r8, r2
 8002024:	4a77      	ldr	r2, [pc, #476]	@ (8002204 <__aeabi_ddiv+0x220>)
 8002026:	4689      	mov	r9, r1
 8002028:	4692      	mov	sl, r2
 800202a:	449a      	add	sl, r3
 800202c:	2300      	movs	r3, #0
 800202e:	2400      	movs	r4, #0
 8002030:	9303      	str	r3, [sp, #12]
 8002032:	9e00      	ldr	r6, [sp, #0]
 8002034:	9f01      	ldr	r7, [sp, #4]
 8002036:	033b      	lsls	r3, r7, #12
 8002038:	0b1b      	lsrs	r3, r3, #12
 800203a:	469b      	mov	fp, r3
 800203c:	007b      	lsls	r3, r7, #1
 800203e:	0030      	movs	r0, r6
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	0ffd      	lsrs	r5, r7, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d059      	beq.n	80020fc <__aeabi_ddiv+0x118>
 8002048:	4a6d      	ldr	r2, [pc, #436]	@ (8002200 <__aeabi_ddiv+0x21c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d048      	beq.n	80020e0 <__aeabi_ddiv+0xfc>
 800204e:	4659      	mov	r1, fp
 8002050:	0f72      	lsrs	r2, r6, #29
 8002052:	00c9      	lsls	r1, r1, #3
 8002054:	430a      	orrs	r2, r1
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	0409      	lsls	r1, r1, #16
 800205a:	4311      	orrs	r1, r2
 800205c:	468b      	mov	fp, r1
 800205e:	4969      	ldr	r1, [pc, #420]	@ (8002204 <__aeabi_ddiv+0x220>)
 8002060:	00f2      	lsls	r2, r6, #3
 8002062:	468c      	mov	ip, r1
 8002064:	4651      	mov	r1, sl
 8002066:	4463      	add	r3, ip
 8002068:	1acb      	subs	r3, r1, r3
 800206a:	469a      	mov	sl, r3
 800206c:	2100      	movs	r1, #0
 800206e:	9e02      	ldr	r6, [sp, #8]
 8002070:	406e      	eors	r6, r5
 8002072:	b2f6      	uxtb	r6, r6
 8002074:	2c0f      	cmp	r4, #15
 8002076:	d900      	bls.n	800207a <__aeabi_ddiv+0x96>
 8002078:	e0ce      	b.n	8002218 <__aeabi_ddiv+0x234>
 800207a:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <__aeabi_ddiv+0x224>)
 800207c:	00a4      	lsls	r4, r4, #2
 800207e:	591b      	ldr	r3, [r3, r4]
 8002080:	469f      	mov	pc, r3
 8002082:	465a      	mov	r2, fp
 8002084:	4302      	orrs	r2, r0
 8002086:	4691      	mov	r9, r2
 8002088:	d000      	beq.n	800208c <__aeabi_ddiv+0xa8>
 800208a:	e090      	b.n	80021ae <__aeabi_ddiv+0x1ca>
 800208c:	469a      	mov	sl, r3
 800208e:	2302      	movs	r3, #2
 8002090:	4690      	mov	r8, r2
 8002092:	2408      	movs	r4, #8
 8002094:	9303      	str	r3, [sp, #12]
 8002096:	e7cc      	b.n	8002032 <__aeabi_ddiv+0x4e>
 8002098:	46cb      	mov	fp, r9
 800209a:	4642      	mov	r2, r8
 800209c:	9d02      	ldr	r5, [sp, #8]
 800209e:	9903      	ldr	r1, [sp, #12]
 80020a0:	2902      	cmp	r1, #2
 80020a2:	d100      	bne.n	80020a6 <__aeabi_ddiv+0xc2>
 80020a4:	e1de      	b.n	8002464 <__aeabi_ddiv+0x480>
 80020a6:	2903      	cmp	r1, #3
 80020a8:	d100      	bne.n	80020ac <__aeabi_ddiv+0xc8>
 80020aa:	e08d      	b.n	80021c8 <__aeabi_ddiv+0x1e4>
 80020ac:	2901      	cmp	r1, #1
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0xce>
 80020b0:	e179      	b.n	80023a6 <__aeabi_ddiv+0x3c2>
 80020b2:	002e      	movs	r6, r5
 80020b4:	2200      	movs	r2, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	2400      	movs	r4, #0
 80020ba:	4690      	mov	r8, r2
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	4323      	orrs	r3, r4
 80020c0:	07f6      	lsls	r6, r6, #31
 80020c2:	4333      	orrs	r3, r6
 80020c4:	4640      	mov	r0, r8
 80020c6:	0019      	movs	r1, r3
 80020c8:	b007      	add	sp, #28
 80020ca:	bcf0      	pop	{r4, r5, r6, r7}
 80020cc:	46bb      	mov	fp, r7
 80020ce:	46b2      	mov	sl, r6
 80020d0:	46a9      	mov	r9, r5
 80020d2:	46a0      	mov	r8, r4
 80020d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d6:	2200      	movs	r2, #0
 80020d8:	2400      	movs	r4, #0
 80020da:	4690      	mov	r8, r2
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80020de:	e7ed      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80020e0:	465a      	mov	r2, fp
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	4b49      	ldr	r3, [pc, #292]	@ (800220c <__aeabi_ddiv+0x228>)
 80020e8:	469c      	mov	ip, r3
 80020ea:	44e2      	add	sl, ip
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d159      	bne.n	80021a4 <__aeabi_ddiv+0x1c0>
 80020f0:	2302      	movs	r3, #2
 80020f2:	431c      	orrs	r4, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	2102      	movs	r1, #2
 80020f8:	469b      	mov	fp, r3
 80020fa:	e7b8      	b.n	800206e <__aeabi_ddiv+0x8a>
 80020fc:	465a      	mov	r2, fp
 80020fe:	9b00      	ldr	r3, [sp, #0]
 8002100:	431a      	orrs	r2, r3
 8002102:	d049      	beq.n	8002198 <__aeabi_ddiv+0x1b4>
 8002104:	465b      	mov	r3, fp
 8002106:	2b00      	cmp	r3, #0
 8002108:	d100      	bne.n	800210c <__aeabi_ddiv+0x128>
 800210a:	e19c      	b.n	8002446 <__aeabi_ddiv+0x462>
 800210c:	4658      	mov	r0, fp
 800210e:	f7fe fa19 	bl	8000544 <__clzsi2>
 8002112:	0002      	movs	r2, r0
 8002114:	0003      	movs	r3, r0
 8002116:	3a0b      	subs	r2, #11
 8002118:	271d      	movs	r7, #29
 800211a:	9e00      	ldr	r6, [sp, #0]
 800211c:	1aba      	subs	r2, r7, r2
 800211e:	0019      	movs	r1, r3
 8002120:	4658      	mov	r0, fp
 8002122:	40d6      	lsrs	r6, r2
 8002124:	3908      	subs	r1, #8
 8002126:	4088      	lsls	r0, r1
 8002128:	0032      	movs	r2, r6
 800212a:	4302      	orrs	r2, r0
 800212c:	4693      	mov	fp, r2
 800212e:	9a00      	ldr	r2, [sp, #0]
 8002130:	408a      	lsls	r2, r1
 8002132:	4937      	ldr	r1, [pc, #220]	@ (8002210 <__aeabi_ddiv+0x22c>)
 8002134:	4453      	add	r3, sl
 8002136:	468a      	mov	sl, r1
 8002138:	2100      	movs	r1, #0
 800213a:	449a      	add	sl, r3
 800213c:	e797      	b.n	800206e <__aeabi_ddiv+0x8a>
 800213e:	465b      	mov	r3, fp
 8002140:	4303      	orrs	r3, r0
 8002142:	4699      	mov	r9, r3
 8002144:	d021      	beq.n	800218a <__aeabi_ddiv+0x1a6>
 8002146:	465b      	mov	r3, fp
 8002148:	2b00      	cmp	r3, #0
 800214a:	d100      	bne.n	800214e <__aeabi_ddiv+0x16a>
 800214c:	e169      	b.n	8002422 <__aeabi_ddiv+0x43e>
 800214e:	4658      	mov	r0, fp
 8002150:	f7fe f9f8 	bl	8000544 <__clzsi2>
 8002154:	230b      	movs	r3, #11
 8002156:	425b      	negs	r3, r3
 8002158:	469c      	mov	ip, r3
 800215a:	0002      	movs	r2, r0
 800215c:	4484      	add	ip, r0
 800215e:	4666      	mov	r6, ip
 8002160:	231d      	movs	r3, #29
 8002162:	1b9b      	subs	r3, r3, r6
 8002164:	0026      	movs	r6, r4
 8002166:	0011      	movs	r1, r2
 8002168:	4658      	mov	r0, fp
 800216a:	40de      	lsrs	r6, r3
 800216c:	3908      	subs	r1, #8
 800216e:	4088      	lsls	r0, r1
 8002170:	0033      	movs	r3, r6
 8002172:	4303      	orrs	r3, r0
 8002174:	4699      	mov	r9, r3
 8002176:	0023      	movs	r3, r4
 8002178:	408b      	lsls	r3, r1
 800217a:	4698      	mov	r8, r3
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <__aeabi_ddiv+0x230>)
 800217e:	2400      	movs	r4, #0
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	469a      	mov	sl, r3
 8002184:	2300      	movs	r3, #0
 8002186:	9303      	str	r3, [sp, #12]
 8002188:	e753      	b.n	8002032 <__aeabi_ddiv+0x4e>
 800218a:	2300      	movs	r3, #0
 800218c:	4698      	mov	r8, r3
 800218e:	469a      	mov	sl, r3
 8002190:	3301      	adds	r3, #1
 8002192:	2404      	movs	r4, #4
 8002194:	9303      	str	r3, [sp, #12]
 8002196:	e74c      	b.n	8002032 <__aeabi_ddiv+0x4e>
 8002198:	2301      	movs	r3, #1
 800219a:	431c      	orrs	r4, r3
 800219c:	2300      	movs	r3, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	469b      	mov	fp, r3
 80021a2:	e764      	b.n	800206e <__aeabi_ddiv+0x8a>
 80021a4:	2303      	movs	r3, #3
 80021a6:	0032      	movs	r2, r6
 80021a8:	2103      	movs	r1, #3
 80021aa:	431c      	orrs	r4, r3
 80021ac:	e75f      	b.n	800206e <__aeabi_ddiv+0x8a>
 80021ae:	469a      	mov	sl, r3
 80021b0:	2303      	movs	r3, #3
 80021b2:	46d9      	mov	r9, fp
 80021b4:	240c      	movs	r4, #12
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	e73b      	b.n	8002032 <__aeabi_ddiv+0x4e>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2480      	movs	r4, #128	@ 0x80
 80021be:	4698      	mov	r8, r3
 80021c0:	2600      	movs	r6, #0
 80021c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021c4:	0324      	lsls	r4, r4, #12
 80021c6:	e779      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021c8:	2480      	movs	r4, #128	@ 0x80
 80021ca:	465b      	mov	r3, fp
 80021cc:	0324      	lsls	r4, r4, #12
 80021ce:	431c      	orrs	r4, r3
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	002e      	movs	r6, r5
 80021d4:	4690      	mov	r8, r2
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021d8:	0b24      	lsrs	r4, r4, #12
 80021da:	e76f      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021dc:	2480      	movs	r4, #128	@ 0x80
 80021de:	464b      	mov	r3, r9
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	4223      	tst	r3, r4
 80021e4:	d002      	beq.n	80021ec <__aeabi_ddiv+0x208>
 80021e6:	465b      	mov	r3, fp
 80021e8:	4223      	tst	r3, r4
 80021ea:	d0f0      	beq.n	80021ce <__aeabi_ddiv+0x1ea>
 80021ec:	2480      	movs	r4, #128	@ 0x80
 80021ee:	464b      	mov	r3, r9
 80021f0:	0324      	lsls	r4, r4, #12
 80021f2:	431c      	orrs	r4, r3
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	9e02      	ldr	r6, [sp, #8]
 80021f8:	4b01      	ldr	r3, [pc, #4]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	e75e      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	fffffc01 	.word	0xfffffc01
 8002208:	0801cd78 	.word	0x0801cd78
 800220c:	fffff801 	.word	0xfffff801
 8002210:	000003f3 	.word	0x000003f3
 8002214:	fffffc0d 	.word	0xfffffc0d
 8002218:	45cb      	cmp	fp, r9
 800221a:	d200      	bcs.n	800221e <__aeabi_ddiv+0x23a>
 800221c:	e0f8      	b.n	8002410 <__aeabi_ddiv+0x42c>
 800221e:	d100      	bne.n	8002222 <__aeabi_ddiv+0x23e>
 8002220:	e0f3      	b.n	800240a <__aeabi_ddiv+0x426>
 8002222:	2301      	movs	r3, #1
 8002224:	425b      	negs	r3, r3
 8002226:	469c      	mov	ip, r3
 8002228:	4644      	mov	r4, r8
 800222a:	4648      	mov	r0, r9
 800222c:	2500      	movs	r5, #0
 800222e:	44e2      	add	sl, ip
 8002230:	465b      	mov	r3, fp
 8002232:	0e17      	lsrs	r7, r2, #24
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	431f      	orrs	r7, r3
 8002238:	0c19      	lsrs	r1, r3, #16
 800223a:	043b      	lsls	r3, r7, #16
 800223c:	0212      	lsls	r2, r2, #8
 800223e:	9700      	str	r7, [sp, #0]
 8002240:	0c1f      	lsrs	r7, r3, #16
 8002242:	4691      	mov	r9, r2
 8002244:	9102      	str	r1, [sp, #8]
 8002246:	9703      	str	r7, [sp, #12]
 8002248:	f7fe f814 	bl	8000274 <__aeabi_uidivmod>
 800224c:	0002      	movs	r2, r0
 800224e:	437a      	muls	r2, r7
 8002250:	040b      	lsls	r3, r1, #16
 8002252:	0c21      	lsrs	r1, r4, #16
 8002254:	4680      	mov	r8, r0
 8002256:	4319      	orrs	r1, r3
 8002258:	428a      	cmp	r2, r1
 800225a:	d909      	bls.n	8002270 <__aeabi_ddiv+0x28c>
 800225c:	9f00      	ldr	r7, [sp, #0]
 800225e:	2301      	movs	r3, #1
 8002260:	46bc      	mov	ip, r7
 8002262:	425b      	negs	r3, r3
 8002264:	4461      	add	r1, ip
 8002266:	469c      	mov	ip, r3
 8002268:	44e0      	add	r8, ip
 800226a:	428f      	cmp	r7, r1
 800226c:	d800      	bhi.n	8002270 <__aeabi_ddiv+0x28c>
 800226e:	e15c      	b.n	800252a <__aeabi_ddiv+0x546>
 8002270:	1a88      	subs	r0, r1, r2
 8002272:	9902      	ldr	r1, [sp, #8]
 8002274:	f7fd fffe 	bl	8000274 <__aeabi_uidivmod>
 8002278:	9a03      	ldr	r2, [sp, #12]
 800227a:	0424      	lsls	r4, r4, #16
 800227c:	4342      	muls	r2, r0
 800227e:	0409      	lsls	r1, r1, #16
 8002280:	0c24      	lsrs	r4, r4, #16
 8002282:	0003      	movs	r3, r0
 8002284:	430c      	orrs	r4, r1
 8002286:	42a2      	cmp	r2, r4
 8002288:	d906      	bls.n	8002298 <__aeabi_ddiv+0x2b4>
 800228a:	9900      	ldr	r1, [sp, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	468c      	mov	ip, r1
 8002290:	4464      	add	r4, ip
 8002292:	42a1      	cmp	r1, r4
 8002294:	d800      	bhi.n	8002298 <__aeabi_ddiv+0x2b4>
 8002296:	e142      	b.n	800251e <__aeabi_ddiv+0x53a>
 8002298:	1aa0      	subs	r0, r4, r2
 800229a:	4642      	mov	r2, r8
 800229c:	0412      	lsls	r2, r2, #16
 800229e:	431a      	orrs	r2, r3
 80022a0:	4693      	mov	fp, r2
 80022a2:	464b      	mov	r3, r9
 80022a4:	4659      	mov	r1, fp
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	001f      	movs	r7, r3
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	040b      	lsls	r3, r1, #16
 80022ae:	4649      	mov	r1, r9
 80022b0:	0409      	lsls	r1, r1, #16
 80022b2:	0c09      	lsrs	r1, r1, #16
 80022b4:	000c      	movs	r4, r1
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	435c      	muls	r4, r3
 80022ba:	0c12      	lsrs	r2, r2, #16
 80022bc:	437b      	muls	r3, r7
 80022be:	4688      	mov	r8, r1
 80022c0:	4351      	muls	r1, r2
 80022c2:	437a      	muls	r2, r7
 80022c4:	0c27      	lsrs	r7, r4, #16
 80022c6:	46bc      	mov	ip, r7
 80022c8:	185b      	adds	r3, r3, r1
 80022ca:	4463      	add	r3, ip
 80022cc:	4299      	cmp	r1, r3
 80022ce:	d903      	bls.n	80022d8 <__aeabi_ddiv+0x2f4>
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	468c      	mov	ip, r1
 80022d6:	4462      	add	r2, ip
 80022d8:	0c19      	lsrs	r1, r3, #16
 80022da:	0424      	lsls	r4, r4, #16
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	0c24      	lsrs	r4, r4, #16
 80022e0:	188a      	adds	r2, r1, r2
 80022e2:	191c      	adds	r4, r3, r4
 80022e4:	4290      	cmp	r0, r2
 80022e6:	d302      	bcc.n	80022ee <__aeabi_ddiv+0x30a>
 80022e8:	d116      	bne.n	8002318 <__aeabi_ddiv+0x334>
 80022ea:	42a5      	cmp	r5, r4
 80022ec:	d214      	bcs.n	8002318 <__aeabi_ddiv+0x334>
 80022ee:	465b      	mov	r3, fp
 80022f0:	9f00      	ldr	r7, [sp, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	444d      	add	r5, r9
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	454d      	cmp	r5, r9
 80022fa:	419b      	sbcs	r3, r3
 80022fc:	46bc      	mov	ip, r7
 80022fe:	425b      	negs	r3, r3
 8002300:	4463      	add	r3, ip
 8002302:	18c0      	adds	r0, r0, r3
 8002304:	4287      	cmp	r7, r0
 8002306:	d300      	bcc.n	800230a <__aeabi_ddiv+0x326>
 8002308:	e102      	b.n	8002510 <__aeabi_ddiv+0x52c>
 800230a:	4282      	cmp	r2, r0
 800230c:	d900      	bls.n	8002310 <__aeabi_ddiv+0x32c>
 800230e:	e129      	b.n	8002564 <__aeabi_ddiv+0x580>
 8002310:	d100      	bne.n	8002314 <__aeabi_ddiv+0x330>
 8002312:	e124      	b.n	800255e <__aeabi_ddiv+0x57a>
 8002314:	9b05      	ldr	r3, [sp, #20]
 8002316:	469b      	mov	fp, r3
 8002318:	1b2c      	subs	r4, r5, r4
 800231a:	42a5      	cmp	r5, r4
 800231c:	41ad      	sbcs	r5, r5
 800231e:	9b00      	ldr	r3, [sp, #0]
 8002320:	1a80      	subs	r0, r0, r2
 8002322:	426d      	negs	r5, r5
 8002324:	1b40      	subs	r0, r0, r5
 8002326:	4283      	cmp	r3, r0
 8002328:	d100      	bne.n	800232c <__aeabi_ddiv+0x348>
 800232a:	e10f      	b.n	800254c <__aeabi_ddiv+0x568>
 800232c:	9902      	ldr	r1, [sp, #8]
 800232e:	f7fd ffa1 	bl	8000274 <__aeabi_uidivmod>
 8002332:	9a03      	ldr	r2, [sp, #12]
 8002334:	040b      	lsls	r3, r1, #16
 8002336:	4342      	muls	r2, r0
 8002338:	0c21      	lsrs	r1, r4, #16
 800233a:	0005      	movs	r5, r0
 800233c:	4319      	orrs	r1, r3
 800233e:	428a      	cmp	r2, r1
 8002340:	d900      	bls.n	8002344 <__aeabi_ddiv+0x360>
 8002342:	e0cb      	b.n	80024dc <__aeabi_ddiv+0x4f8>
 8002344:	1a88      	subs	r0, r1, r2
 8002346:	9902      	ldr	r1, [sp, #8]
 8002348:	f7fd ff94 	bl	8000274 <__aeabi_uidivmod>
 800234c:	9a03      	ldr	r2, [sp, #12]
 800234e:	0424      	lsls	r4, r4, #16
 8002350:	4342      	muls	r2, r0
 8002352:	0409      	lsls	r1, r1, #16
 8002354:	0c24      	lsrs	r4, r4, #16
 8002356:	0003      	movs	r3, r0
 8002358:	430c      	orrs	r4, r1
 800235a:	42a2      	cmp	r2, r4
 800235c:	d900      	bls.n	8002360 <__aeabi_ddiv+0x37c>
 800235e:	e0ca      	b.n	80024f6 <__aeabi_ddiv+0x512>
 8002360:	4641      	mov	r1, r8
 8002362:	1aa4      	subs	r4, r4, r2
 8002364:	042a      	lsls	r2, r5, #16
 8002366:	431a      	orrs	r2, r3
 8002368:	9f04      	ldr	r7, [sp, #16]
 800236a:	0413      	lsls	r3, r2, #16
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	4359      	muls	r1, r3
 8002370:	4640      	mov	r0, r8
 8002372:	437b      	muls	r3, r7
 8002374:	469c      	mov	ip, r3
 8002376:	0c15      	lsrs	r5, r2, #16
 8002378:	4368      	muls	r0, r5
 800237a:	0c0b      	lsrs	r3, r1, #16
 800237c:	4484      	add	ip, r0
 800237e:	4463      	add	r3, ip
 8002380:	437d      	muls	r5, r7
 8002382:	4298      	cmp	r0, r3
 8002384:	d903      	bls.n	800238e <__aeabi_ddiv+0x3aa>
 8002386:	2080      	movs	r0, #128	@ 0x80
 8002388:	0240      	lsls	r0, r0, #9
 800238a:	4684      	mov	ip, r0
 800238c:	4465      	add	r5, ip
 800238e:	0c18      	lsrs	r0, r3, #16
 8002390:	0409      	lsls	r1, r1, #16
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c09      	lsrs	r1, r1, #16
 8002396:	1940      	adds	r0, r0, r5
 8002398:	185b      	adds	r3, r3, r1
 800239a:	4284      	cmp	r4, r0
 800239c:	d327      	bcc.n	80023ee <__aeabi_ddiv+0x40a>
 800239e:	d023      	beq.n	80023e8 <__aeabi_ddiv+0x404>
 80023a0:	2301      	movs	r3, #1
 80023a2:	0035      	movs	r5, r6
 80023a4:	431a      	orrs	r2, r3
 80023a6:	4b94      	ldr	r3, [pc, #592]	@ (80025f8 <__aeabi_ddiv+0x614>)
 80023a8:	4453      	add	r3, sl
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dd60      	ble.n	8002470 <__aeabi_ddiv+0x48c>
 80023ae:	0751      	lsls	r1, r2, #29
 80023b0:	d000      	beq.n	80023b4 <__aeabi_ddiv+0x3d0>
 80023b2:	e086      	b.n	80024c2 <__aeabi_ddiv+0x4de>
 80023b4:	002e      	movs	r6, r5
 80023b6:	08d1      	lsrs	r1, r2, #3
 80023b8:	465a      	mov	r2, fp
 80023ba:	01d2      	lsls	r2, r2, #7
 80023bc:	d506      	bpl.n	80023cc <__aeabi_ddiv+0x3e8>
 80023be:	465a      	mov	r2, fp
 80023c0:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <__aeabi_ddiv+0x618>)
 80023c2:	401a      	ands	r2, r3
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	4693      	mov	fp, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4453      	add	r3, sl
 80023cc:	4a8c      	ldr	r2, [pc, #560]	@ (8002600 <__aeabi_ddiv+0x61c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	dd00      	ble.n	80023d4 <__aeabi_ddiv+0x3f0>
 80023d2:	e680      	b.n	80020d6 <__aeabi_ddiv+0xf2>
 80023d4:	465a      	mov	r2, fp
 80023d6:	0752      	lsls	r2, r2, #29
 80023d8:	430a      	orrs	r2, r1
 80023da:	4690      	mov	r8, r2
 80023dc:	465a      	mov	r2, fp
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	0254      	lsls	r4, r2, #9
 80023e2:	0b24      	lsrs	r4, r4, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e669      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80023e8:	0035      	movs	r5, r6
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0db      	beq.n	80023a6 <__aeabi_ddiv+0x3c2>
 80023ee:	9d00      	ldr	r5, [sp, #0]
 80023f0:	1e51      	subs	r1, r2, #1
 80023f2:	46ac      	mov	ip, r5
 80023f4:	4464      	add	r4, ip
 80023f6:	42ac      	cmp	r4, r5
 80023f8:	d200      	bcs.n	80023fc <__aeabi_ddiv+0x418>
 80023fa:	e09e      	b.n	800253a <__aeabi_ddiv+0x556>
 80023fc:	4284      	cmp	r4, r0
 80023fe:	d200      	bcs.n	8002402 <__aeabi_ddiv+0x41e>
 8002400:	e0e1      	b.n	80025c6 <__aeabi_ddiv+0x5e2>
 8002402:	d100      	bne.n	8002406 <__aeabi_ddiv+0x422>
 8002404:	e0ee      	b.n	80025e4 <__aeabi_ddiv+0x600>
 8002406:	000a      	movs	r2, r1
 8002408:	e7ca      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 800240a:	4542      	cmp	r2, r8
 800240c:	d900      	bls.n	8002410 <__aeabi_ddiv+0x42c>
 800240e:	e708      	b.n	8002222 <__aeabi_ddiv+0x23e>
 8002410:	464b      	mov	r3, r9
 8002412:	07dc      	lsls	r4, r3, #31
 8002414:	0858      	lsrs	r0, r3, #1
 8002416:	4643      	mov	r3, r8
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	431c      	orrs	r4, r3
 800241c:	4643      	mov	r3, r8
 800241e:	07dd      	lsls	r5, r3, #31
 8002420:	e706      	b.n	8002230 <__aeabi_ddiv+0x24c>
 8002422:	f7fe f88f 	bl	8000544 <__clzsi2>
 8002426:	2315      	movs	r3, #21
 8002428:	469c      	mov	ip, r3
 800242a:	4484      	add	ip, r0
 800242c:	0002      	movs	r2, r0
 800242e:	4663      	mov	r3, ip
 8002430:	3220      	adds	r2, #32
 8002432:	2b1c      	cmp	r3, #28
 8002434:	dc00      	bgt.n	8002438 <__aeabi_ddiv+0x454>
 8002436:	e692      	b.n	800215e <__aeabi_ddiv+0x17a>
 8002438:	0023      	movs	r3, r4
 800243a:	3808      	subs	r0, #8
 800243c:	4083      	lsls	r3, r0
 800243e:	4699      	mov	r9, r3
 8002440:	2300      	movs	r3, #0
 8002442:	4698      	mov	r8, r3
 8002444:	e69a      	b.n	800217c <__aeabi_ddiv+0x198>
 8002446:	f7fe f87d 	bl	8000544 <__clzsi2>
 800244a:	0002      	movs	r2, r0
 800244c:	0003      	movs	r3, r0
 800244e:	3215      	adds	r2, #21
 8002450:	3320      	adds	r3, #32
 8002452:	2a1c      	cmp	r2, #28
 8002454:	dc00      	bgt.n	8002458 <__aeabi_ddiv+0x474>
 8002456:	e65f      	b.n	8002118 <__aeabi_ddiv+0x134>
 8002458:	9900      	ldr	r1, [sp, #0]
 800245a:	3808      	subs	r0, #8
 800245c:	4081      	lsls	r1, r0
 800245e:	2200      	movs	r2, #0
 8002460:	468b      	mov	fp, r1
 8002462:	e666      	b.n	8002132 <__aeabi_ddiv+0x14e>
 8002464:	2200      	movs	r2, #0
 8002466:	002e      	movs	r6, r5
 8002468:	2400      	movs	r4, #0
 800246a:	4690      	mov	r8, r2
 800246c:	4b65      	ldr	r3, [pc, #404]	@ (8002604 <__aeabi_ddiv+0x620>)
 800246e:	e625      	b.n	80020bc <__aeabi_ddiv+0xd8>
 8002470:	002e      	movs	r6, r5
 8002472:	2101      	movs	r1, #1
 8002474:	1ac9      	subs	r1, r1, r3
 8002476:	2938      	cmp	r1, #56	@ 0x38
 8002478:	dd00      	ble.n	800247c <__aeabi_ddiv+0x498>
 800247a:	e61b      	b.n	80020b4 <__aeabi_ddiv+0xd0>
 800247c:	291f      	cmp	r1, #31
 800247e:	dc7e      	bgt.n	800257e <__aeabi_ddiv+0x59a>
 8002480:	4861      	ldr	r0, [pc, #388]	@ (8002608 <__aeabi_ddiv+0x624>)
 8002482:	0014      	movs	r4, r2
 8002484:	4450      	add	r0, sl
 8002486:	465b      	mov	r3, fp
 8002488:	4082      	lsls	r2, r0
 800248a:	4083      	lsls	r3, r0
 800248c:	40cc      	lsrs	r4, r1
 800248e:	1e50      	subs	r0, r2, #1
 8002490:	4182      	sbcs	r2, r0
 8002492:	4323      	orrs	r3, r4
 8002494:	431a      	orrs	r2, r3
 8002496:	465b      	mov	r3, fp
 8002498:	40cb      	lsrs	r3, r1
 800249a:	0751      	lsls	r1, r2, #29
 800249c:	d009      	beq.n	80024b2 <__aeabi_ddiv+0x4ce>
 800249e:	210f      	movs	r1, #15
 80024a0:	4011      	ands	r1, r2
 80024a2:	2904      	cmp	r1, #4
 80024a4:	d005      	beq.n	80024b2 <__aeabi_ddiv+0x4ce>
 80024a6:	1d11      	adds	r1, r2, #4
 80024a8:	4291      	cmp	r1, r2
 80024aa:	4192      	sbcs	r2, r2
 80024ac:	4252      	negs	r2, r2
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	0219      	lsls	r1, r3, #8
 80024b4:	d400      	bmi.n	80024b8 <__aeabi_ddiv+0x4d4>
 80024b6:	e09b      	b.n	80025f0 <__aeabi_ddiv+0x60c>
 80024b8:	2200      	movs	r2, #0
 80024ba:	2301      	movs	r3, #1
 80024bc:	2400      	movs	r4, #0
 80024be:	4690      	mov	r8, r2
 80024c0:	e5fc      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80024c2:	210f      	movs	r1, #15
 80024c4:	4011      	ands	r1, r2
 80024c6:	2904      	cmp	r1, #4
 80024c8:	d100      	bne.n	80024cc <__aeabi_ddiv+0x4e8>
 80024ca:	e773      	b.n	80023b4 <__aeabi_ddiv+0x3d0>
 80024cc:	1d11      	adds	r1, r2, #4
 80024ce:	4291      	cmp	r1, r2
 80024d0:	4192      	sbcs	r2, r2
 80024d2:	4252      	negs	r2, r2
 80024d4:	002e      	movs	r6, r5
 80024d6:	08c9      	lsrs	r1, r1, #3
 80024d8:	4493      	add	fp, r2
 80024da:	e76d      	b.n	80023b8 <__aeabi_ddiv+0x3d4>
 80024dc:	9b00      	ldr	r3, [sp, #0]
 80024de:	3d01      	subs	r5, #1
 80024e0:	469c      	mov	ip, r3
 80024e2:	4461      	add	r1, ip
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d900      	bls.n	80024ea <__aeabi_ddiv+0x506>
 80024e8:	e72c      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024ea:	428a      	cmp	r2, r1
 80024ec:	d800      	bhi.n	80024f0 <__aeabi_ddiv+0x50c>
 80024ee:	e729      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024f0:	1e85      	subs	r5, r0, #2
 80024f2:	4461      	add	r1, ip
 80024f4:	e726      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024f6:	9900      	ldr	r1, [sp, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	468c      	mov	ip, r1
 80024fc:	4464      	add	r4, ip
 80024fe:	42a1      	cmp	r1, r4
 8002500:	d900      	bls.n	8002504 <__aeabi_ddiv+0x520>
 8002502:	e72d      	b.n	8002360 <__aeabi_ddiv+0x37c>
 8002504:	42a2      	cmp	r2, r4
 8002506:	d800      	bhi.n	800250a <__aeabi_ddiv+0x526>
 8002508:	e72a      	b.n	8002360 <__aeabi_ddiv+0x37c>
 800250a:	1e83      	subs	r3, r0, #2
 800250c:	4464      	add	r4, ip
 800250e:	e727      	b.n	8002360 <__aeabi_ddiv+0x37c>
 8002510:	4287      	cmp	r7, r0
 8002512:	d000      	beq.n	8002516 <__aeabi_ddiv+0x532>
 8002514:	e6fe      	b.n	8002314 <__aeabi_ddiv+0x330>
 8002516:	45a9      	cmp	r9, r5
 8002518:	d900      	bls.n	800251c <__aeabi_ddiv+0x538>
 800251a:	e6fb      	b.n	8002314 <__aeabi_ddiv+0x330>
 800251c:	e6f5      	b.n	800230a <__aeabi_ddiv+0x326>
 800251e:	42a2      	cmp	r2, r4
 8002520:	d800      	bhi.n	8002524 <__aeabi_ddiv+0x540>
 8002522:	e6b9      	b.n	8002298 <__aeabi_ddiv+0x2b4>
 8002524:	1e83      	subs	r3, r0, #2
 8002526:	4464      	add	r4, ip
 8002528:	e6b6      	b.n	8002298 <__aeabi_ddiv+0x2b4>
 800252a:	428a      	cmp	r2, r1
 800252c:	d800      	bhi.n	8002530 <__aeabi_ddiv+0x54c>
 800252e:	e69f      	b.n	8002270 <__aeabi_ddiv+0x28c>
 8002530:	46bc      	mov	ip, r7
 8002532:	1e83      	subs	r3, r0, #2
 8002534:	4698      	mov	r8, r3
 8002536:	4461      	add	r1, ip
 8002538:	e69a      	b.n	8002270 <__aeabi_ddiv+0x28c>
 800253a:	000a      	movs	r2, r1
 800253c:	4284      	cmp	r4, r0
 800253e:	d000      	beq.n	8002542 <__aeabi_ddiv+0x55e>
 8002540:	e72e      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 8002542:	454b      	cmp	r3, r9
 8002544:	d000      	beq.n	8002548 <__aeabi_ddiv+0x564>
 8002546:	e72b      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 8002548:	0035      	movs	r5, r6
 800254a:	e72c      	b.n	80023a6 <__aeabi_ddiv+0x3c2>
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <__aeabi_ddiv+0x614>)
 800254e:	4a2f      	ldr	r2, [pc, #188]	@ (800260c <__aeabi_ddiv+0x628>)
 8002550:	4453      	add	r3, sl
 8002552:	4592      	cmp	sl, r2
 8002554:	db43      	blt.n	80025de <__aeabi_ddiv+0x5fa>
 8002556:	2201      	movs	r2, #1
 8002558:	2100      	movs	r1, #0
 800255a:	4493      	add	fp, r2
 800255c:	e72c      	b.n	80023b8 <__aeabi_ddiv+0x3d4>
 800255e:	42ac      	cmp	r4, r5
 8002560:	d800      	bhi.n	8002564 <__aeabi_ddiv+0x580>
 8002562:	e6d7      	b.n	8002314 <__aeabi_ddiv+0x330>
 8002564:	2302      	movs	r3, #2
 8002566:	425b      	negs	r3, r3
 8002568:	469c      	mov	ip, r3
 800256a:	9900      	ldr	r1, [sp, #0]
 800256c:	444d      	add	r5, r9
 800256e:	454d      	cmp	r5, r9
 8002570:	419b      	sbcs	r3, r3
 8002572:	44e3      	add	fp, ip
 8002574:	468c      	mov	ip, r1
 8002576:	425b      	negs	r3, r3
 8002578:	4463      	add	r3, ip
 800257a:	18c0      	adds	r0, r0, r3
 800257c:	e6cc      	b.n	8002318 <__aeabi_ddiv+0x334>
 800257e:	201f      	movs	r0, #31
 8002580:	4240      	negs	r0, r0
 8002582:	1ac3      	subs	r3, r0, r3
 8002584:	4658      	mov	r0, fp
 8002586:	40d8      	lsrs	r0, r3
 8002588:	2920      	cmp	r1, #32
 800258a:	d004      	beq.n	8002596 <__aeabi_ddiv+0x5b2>
 800258c:	4659      	mov	r1, fp
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <__aeabi_ddiv+0x62c>)
 8002590:	4453      	add	r3, sl
 8002592:	4099      	lsls	r1, r3
 8002594:	430a      	orrs	r2, r1
 8002596:	1e53      	subs	r3, r2, #1
 8002598:	419a      	sbcs	r2, r3
 800259a:	2307      	movs	r3, #7
 800259c:	0019      	movs	r1, r3
 800259e:	4302      	orrs	r2, r0
 80025a0:	2400      	movs	r4, #0
 80025a2:	4011      	ands	r1, r2
 80025a4:	4213      	tst	r3, r2
 80025a6:	d009      	beq.n	80025bc <__aeabi_ddiv+0x5d8>
 80025a8:	3308      	adds	r3, #8
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d01d      	beq.n	80025ec <__aeabi_ddiv+0x608>
 80025b0:	1d13      	adds	r3, r2, #4
 80025b2:	4293      	cmp	r3, r2
 80025b4:	4189      	sbcs	r1, r1
 80025b6:	001a      	movs	r2, r3
 80025b8:	4249      	negs	r1, r1
 80025ba:	0749      	lsls	r1, r1, #29
 80025bc:	08d2      	lsrs	r2, r2, #3
 80025be:	430a      	orrs	r2, r1
 80025c0:	4690      	mov	r8, r2
 80025c2:	2300      	movs	r3, #0
 80025c4:	e57a      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80025c6:	4649      	mov	r1, r9
 80025c8:	9f00      	ldr	r7, [sp, #0]
 80025ca:	004d      	lsls	r5, r1, #1
 80025cc:	454d      	cmp	r5, r9
 80025ce:	4189      	sbcs	r1, r1
 80025d0:	46bc      	mov	ip, r7
 80025d2:	4249      	negs	r1, r1
 80025d4:	4461      	add	r1, ip
 80025d6:	46a9      	mov	r9, r5
 80025d8:	3a02      	subs	r2, #2
 80025da:	1864      	adds	r4, r4, r1
 80025dc:	e7ae      	b.n	800253c <__aeabi_ddiv+0x558>
 80025de:	2201      	movs	r2, #1
 80025e0:	4252      	negs	r2, r2
 80025e2:	e746      	b.n	8002472 <__aeabi_ddiv+0x48e>
 80025e4:	4599      	cmp	r9, r3
 80025e6:	d3ee      	bcc.n	80025c6 <__aeabi_ddiv+0x5e2>
 80025e8:	000a      	movs	r2, r1
 80025ea:	e7aa      	b.n	8002542 <__aeabi_ddiv+0x55e>
 80025ec:	2100      	movs	r1, #0
 80025ee:	e7e5      	b.n	80025bc <__aeabi_ddiv+0x5d8>
 80025f0:	0759      	lsls	r1, r3, #29
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	0b1c      	lsrs	r4, r3, #12
 80025f6:	e7e1      	b.n	80025bc <__aeabi_ddiv+0x5d8>
 80025f8:	000003ff 	.word	0x000003ff
 80025fc:	feffffff 	.word	0xfeffffff
 8002600:	000007fe 	.word	0x000007fe
 8002604:	000007ff 	.word	0x000007ff
 8002608:	0000041e 	.word	0x0000041e
 800260c:	fffffc02 	.word	0xfffffc02
 8002610:	0000043e 	.word	0x0000043e

08002614 <__eqdf2>:
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	4657      	mov	r7, sl
 8002618:	46de      	mov	lr, fp
 800261a:	464e      	mov	r6, r9
 800261c:	4645      	mov	r5, r8
 800261e:	b5e0      	push	{r5, r6, r7, lr}
 8002620:	000d      	movs	r5, r1
 8002622:	0004      	movs	r4, r0
 8002624:	0fe8      	lsrs	r0, r5, #31
 8002626:	4683      	mov	fp, r0
 8002628:	0309      	lsls	r1, r1, #12
 800262a:	0fd8      	lsrs	r0, r3, #31
 800262c:	0b09      	lsrs	r1, r1, #12
 800262e:	4682      	mov	sl, r0
 8002630:	4819      	ldr	r0, [pc, #100]	@ (8002698 <__eqdf2+0x84>)
 8002632:	468c      	mov	ip, r1
 8002634:	031f      	lsls	r7, r3, #12
 8002636:	0069      	lsls	r1, r5, #1
 8002638:	005e      	lsls	r6, r3, #1
 800263a:	0d49      	lsrs	r1, r1, #21
 800263c:	0b3f      	lsrs	r7, r7, #12
 800263e:	0d76      	lsrs	r6, r6, #21
 8002640:	4281      	cmp	r1, r0
 8002642:	d018      	beq.n	8002676 <__eqdf2+0x62>
 8002644:	4286      	cmp	r6, r0
 8002646:	d00f      	beq.n	8002668 <__eqdf2+0x54>
 8002648:	2001      	movs	r0, #1
 800264a:	42b1      	cmp	r1, r6
 800264c:	d10d      	bne.n	800266a <__eqdf2+0x56>
 800264e:	45bc      	cmp	ip, r7
 8002650:	d10b      	bne.n	800266a <__eqdf2+0x56>
 8002652:	4294      	cmp	r4, r2
 8002654:	d109      	bne.n	800266a <__eqdf2+0x56>
 8002656:	45d3      	cmp	fp, sl
 8002658:	d01c      	beq.n	8002694 <__eqdf2+0x80>
 800265a:	2900      	cmp	r1, #0
 800265c:	d105      	bne.n	800266a <__eqdf2+0x56>
 800265e:	4660      	mov	r0, ip
 8002660:	4320      	orrs	r0, r4
 8002662:	1e43      	subs	r3, r0, #1
 8002664:	4198      	sbcs	r0, r3
 8002666:	e000      	b.n	800266a <__eqdf2+0x56>
 8002668:	2001      	movs	r0, #1
 800266a:	bcf0      	pop	{r4, r5, r6, r7}
 800266c:	46bb      	mov	fp, r7
 800266e:	46b2      	mov	sl, r6
 8002670:	46a9      	mov	r9, r5
 8002672:	46a0      	mov	r8, r4
 8002674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002676:	2001      	movs	r0, #1
 8002678:	428e      	cmp	r6, r1
 800267a:	d1f6      	bne.n	800266a <__eqdf2+0x56>
 800267c:	4661      	mov	r1, ip
 800267e:	4339      	orrs	r1, r7
 8002680:	000f      	movs	r7, r1
 8002682:	4317      	orrs	r7, r2
 8002684:	4327      	orrs	r7, r4
 8002686:	d1f0      	bne.n	800266a <__eqdf2+0x56>
 8002688:	465b      	mov	r3, fp
 800268a:	4652      	mov	r2, sl
 800268c:	1a98      	subs	r0, r3, r2
 800268e:	1e43      	subs	r3, r0, #1
 8002690:	4198      	sbcs	r0, r3
 8002692:	e7ea      	b.n	800266a <__eqdf2+0x56>
 8002694:	2000      	movs	r0, #0
 8002696:	e7e8      	b.n	800266a <__eqdf2+0x56>
 8002698:	000007ff 	.word	0x000007ff

0800269c <__gedf2>:
 800269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269e:	4657      	mov	r7, sl
 80026a0:	464e      	mov	r6, r9
 80026a2:	4645      	mov	r5, r8
 80026a4:	46de      	mov	lr, fp
 80026a6:	b5e0      	push	{r5, r6, r7, lr}
 80026a8:	000d      	movs	r5, r1
 80026aa:	030e      	lsls	r6, r1, #12
 80026ac:	0049      	lsls	r1, r1, #1
 80026ae:	0d49      	lsrs	r1, r1, #21
 80026b0:	468a      	mov	sl, r1
 80026b2:	0fdf      	lsrs	r7, r3, #31
 80026b4:	0fe9      	lsrs	r1, r5, #31
 80026b6:	46bc      	mov	ip, r7
 80026b8:	b083      	sub	sp, #12
 80026ba:	4f2f      	ldr	r7, [pc, #188]	@ (8002778 <__gedf2+0xdc>)
 80026bc:	0004      	movs	r4, r0
 80026be:	4680      	mov	r8, r0
 80026c0:	9101      	str	r1, [sp, #4]
 80026c2:	0058      	lsls	r0, r3, #1
 80026c4:	0319      	lsls	r1, r3, #12
 80026c6:	4691      	mov	r9, r2
 80026c8:	0b36      	lsrs	r6, r6, #12
 80026ca:	0b09      	lsrs	r1, r1, #12
 80026cc:	0d40      	lsrs	r0, r0, #21
 80026ce:	45ba      	cmp	sl, r7
 80026d0:	d01d      	beq.n	800270e <__gedf2+0x72>
 80026d2:	42b8      	cmp	r0, r7
 80026d4:	d00d      	beq.n	80026f2 <__gedf2+0x56>
 80026d6:	4657      	mov	r7, sl
 80026d8:	2f00      	cmp	r7, #0
 80026da:	d12a      	bne.n	8002732 <__gedf2+0x96>
 80026dc:	4334      	orrs	r4, r6
 80026de:	2800      	cmp	r0, #0
 80026e0:	d124      	bne.n	800272c <__gedf2+0x90>
 80026e2:	430a      	orrs	r2, r1
 80026e4:	d036      	beq.n	8002754 <__gedf2+0xb8>
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d141      	bne.n	800276e <__gedf2+0xd2>
 80026ea:	4663      	mov	r3, ip
 80026ec:	0058      	lsls	r0, r3, #1
 80026ee:	3801      	subs	r0, #1
 80026f0:	e015      	b.n	800271e <__gedf2+0x82>
 80026f2:	4311      	orrs	r1, r2
 80026f4:	d138      	bne.n	8002768 <__gedf2+0xcc>
 80026f6:	4653      	mov	r3, sl
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <__gedf2+0x64>
 80026fc:	4326      	orrs	r6, r4
 80026fe:	d0f4      	beq.n	80026ea <__gedf2+0x4e>
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	4563      	cmp	r3, ip
 8002704:	d107      	bne.n	8002716 <__gedf2+0x7a>
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	0058      	lsls	r0, r3, #1
 800270a:	3801      	subs	r0, #1
 800270c:	e007      	b.n	800271e <__gedf2+0x82>
 800270e:	4326      	orrs	r6, r4
 8002710:	d12a      	bne.n	8002768 <__gedf2+0xcc>
 8002712:	4550      	cmp	r0, sl
 8002714:	d021      	beq.n	800275a <__gedf2+0xbe>
 8002716:	2001      	movs	r0, #1
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	425f      	negs	r7, r3
 800271c:	4338      	orrs	r0, r7
 800271e:	b003      	add	sp, #12
 8002720:	bcf0      	pop	{r4, r5, r6, r7}
 8002722:	46bb      	mov	fp, r7
 8002724:	46b2      	mov	sl, r6
 8002726:	46a9      	mov	r9, r5
 8002728:	46a0      	mov	r8, r4
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272c:	2c00      	cmp	r4, #0
 800272e:	d0dc      	beq.n	80026ea <__gedf2+0x4e>
 8002730:	e7e6      	b.n	8002700 <__gedf2+0x64>
 8002732:	2800      	cmp	r0, #0
 8002734:	d0ef      	beq.n	8002716 <__gedf2+0x7a>
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	4563      	cmp	r3, ip
 800273a:	d1ec      	bne.n	8002716 <__gedf2+0x7a>
 800273c:	4582      	cmp	sl, r0
 800273e:	dcea      	bgt.n	8002716 <__gedf2+0x7a>
 8002740:	dbe1      	blt.n	8002706 <__gedf2+0x6a>
 8002742:	428e      	cmp	r6, r1
 8002744:	d8e7      	bhi.n	8002716 <__gedf2+0x7a>
 8002746:	d1de      	bne.n	8002706 <__gedf2+0x6a>
 8002748:	45c8      	cmp	r8, r9
 800274a:	d8e4      	bhi.n	8002716 <__gedf2+0x7a>
 800274c:	2000      	movs	r0, #0
 800274e:	45c8      	cmp	r8, r9
 8002750:	d2e5      	bcs.n	800271e <__gedf2+0x82>
 8002752:	e7d8      	b.n	8002706 <__gedf2+0x6a>
 8002754:	2c00      	cmp	r4, #0
 8002756:	d0e2      	beq.n	800271e <__gedf2+0x82>
 8002758:	e7dd      	b.n	8002716 <__gedf2+0x7a>
 800275a:	4311      	orrs	r1, r2
 800275c:	d104      	bne.n	8002768 <__gedf2+0xcc>
 800275e:	9b01      	ldr	r3, [sp, #4]
 8002760:	4563      	cmp	r3, ip
 8002762:	d1d8      	bne.n	8002716 <__gedf2+0x7a>
 8002764:	2000      	movs	r0, #0
 8002766:	e7da      	b.n	800271e <__gedf2+0x82>
 8002768:	2002      	movs	r0, #2
 800276a:	4240      	negs	r0, r0
 800276c:	e7d7      	b.n	800271e <__gedf2+0x82>
 800276e:	9b01      	ldr	r3, [sp, #4]
 8002770:	4563      	cmp	r3, ip
 8002772:	d0e6      	beq.n	8002742 <__gedf2+0xa6>
 8002774:	e7cf      	b.n	8002716 <__gedf2+0x7a>
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	000007ff 	.word	0x000007ff

0800277c <__ledf2>:
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	4657      	mov	r7, sl
 8002780:	464e      	mov	r6, r9
 8002782:	4645      	mov	r5, r8
 8002784:	46de      	mov	lr, fp
 8002786:	b5e0      	push	{r5, r6, r7, lr}
 8002788:	000d      	movs	r5, r1
 800278a:	030e      	lsls	r6, r1, #12
 800278c:	0049      	lsls	r1, r1, #1
 800278e:	0d49      	lsrs	r1, r1, #21
 8002790:	468a      	mov	sl, r1
 8002792:	0fdf      	lsrs	r7, r3, #31
 8002794:	0fe9      	lsrs	r1, r5, #31
 8002796:	46bc      	mov	ip, r7
 8002798:	b083      	sub	sp, #12
 800279a:	4f2e      	ldr	r7, [pc, #184]	@ (8002854 <__ledf2+0xd8>)
 800279c:	0004      	movs	r4, r0
 800279e:	4680      	mov	r8, r0
 80027a0:	9101      	str	r1, [sp, #4]
 80027a2:	0058      	lsls	r0, r3, #1
 80027a4:	0319      	lsls	r1, r3, #12
 80027a6:	4691      	mov	r9, r2
 80027a8:	0b36      	lsrs	r6, r6, #12
 80027aa:	0b09      	lsrs	r1, r1, #12
 80027ac:	0d40      	lsrs	r0, r0, #21
 80027ae:	45ba      	cmp	sl, r7
 80027b0:	d01e      	beq.n	80027f0 <__ledf2+0x74>
 80027b2:	42b8      	cmp	r0, r7
 80027b4:	d00d      	beq.n	80027d2 <__ledf2+0x56>
 80027b6:	4657      	mov	r7, sl
 80027b8:	2f00      	cmp	r7, #0
 80027ba:	d127      	bne.n	800280c <__ledf2+0x90>
 80027bc:	4334      	orrs	r4, r6
 80027be:	2800      	cmp	r0, #0
 80027c0:	d133      	bne.n	800282a <__ledf2+0xae>
 80027c2:	430a      	orrs	r2, r1
 80027c4:	d034      	beq.n	8002830 <__ledf2+0xb4>
 80027c6:	2c00      	cmp	r4, #0
 80027c8:	d140      	bne.n	800284c <__ledf2+0xd0>
 80027ca:	4663      	mov	r3, ip
 80027cc:	0058      	lsls	r0, r3, #1
 80027ce:	3801      	subs	r0, #1
 80027d0:	e015      	b.n	80027fe <__ledf2+0x82>
 80027d2:	4311      	orrs	r1, r2
 80027d4:	d112      	bne.n	80027fc <__ledf2+0x80>
 80027d6:	4653      	mov	r3, sl
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <__ledf2+0x64>
 80027dc:	4326      	orrs	r6, r4
 80027de:	d0f4      	beq.n	80027ca <__ledf2+0x4e>
 80027e0:	9b01      	ldr	r3, [sp, #4]
 80027e2:	4563      	cmp	r3, ip
 80027e4:	d01d      	beq.n	8002822 <__ledf2+0xa6>
 80027e6:	2001      	movs	r0, #1
 80027e8:	9b01      	ldr	r3, [sp, #4]
 80027ea:	425f      	negs	r7, r3
 80027ec:	4338      	orrs	r0, r7
 80027ee:	e006      	b.n	80027fe <__ledf2+0x82>
 80027f0:	4326      	orrs	r6, r4
 80027f2:	d103      	bne.n	80027fc <__ledf2+0x80>
 80027f4:	4550      	cmp	r0, sl
 80027f6:	d1f6      	bne.n	80027e6 <__ledf2+0x6a>
 80027f8:	4311      	orrs	r1, r2
 80027fa:	d01c      	beq.n	8002836 <__ledf2+0xba>
 80027fc:	2002      	movs	r0, #2
 80027fe:	b003      	add	sp, #12
 8002800:	bcf0      	pop	{r4, r5, r6, r7}
 8002802:	46bb      	mov	fp, r7
 8002804:	46b2      	mov	sl, r6
 8002806:	46a9      	mov	r9, r5
 8002808:	46a0      	mov	r8, r4
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	2800      	cmp	r0, #0
 800280e:	d0ea      	beq.n	80027e6 <__ledf2+0x6a>
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	4563      	cmp	r3, ip
 8002814:	d1e7      	bne.n	80027e6 <__ledf2+0x6a>
 8002816:	4582      	cmp	sl, r0
 8002818:	dce5      	bgt.n	80027e6 <__ledf2+0x6a>
 800281a:	db02      	blt.n	8002822 <__ledf2+0xa6>
 800281c:	428e      	cmp	r6, r1
 800281e:	d8e2      	bhi.n	80027e6 <__ledf2+0x6a>
 8002820:	d00e      	beq.n	8002840 <__ledf2+0xc4>
 8002822:	9b01      	ldr	r3, [sp, #4]
 8002824:	0058      	lsls	r0, r3, #1
 8002826:	3801      	subs	r0, #1
 8002828:	e7e9      	b.n	80027fe <__ledf2+0x82>
 800282a:	2c00      	cmp	r4, #0
 800282c:	d0cd      	beq.n	80027ca <__ledf2+0x4e>
 800282e:	e7d7      	b.n	80027e0 <__ledf2+0x64>
 8002830:	2c00      	cmp	r4, #0
 8002832:	d0e4      	beq.n	80027fe <__ledf2+0x82>
 8002834:	e7d7      	b.n	80027e6 <__ledf2+0x6a>
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	2000      	movs	r0, #0
 800283a:	4563      	cmp	r3, ip
 800283c:	d0df      	beq.n	80027fe <__ledf2+0x82>
 800283e:	e7d2      	b.n	80027e6 <__ledf2+0x6a>
 8002840:	45c8      	cmp	r8, r9
 8002842:	d8d0      	bhi.n	80027e6 <__ledf2+0x6a>
 8002844:	2000      	movs	r0, #0
 8002846:	45c8      	cmp	r8, r9
 8002848:	d2d9      	bcs.n	80027fe <__ledf2+0x82>
 800284a:	e7ea      	b.n	8002822 <__ledf2+0xa6>
 800284c:	9b01      	ldr	r3, [sp, #4]
 800284e:	4563      	cmp	r3, ip
 8002850:	d0e4      	beq.n	800281c <__ledf2+0xa0>
 8002852:	e7c8      	b.n	80027e6 <__ledf2+0x6a>
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dmul>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	46de      	mov	lr, fp
 8002860:	4645      	mov	r5, r8
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	001f      	movs	r7, r3
 8002866:	030b      	lsls	r3, r1, #12
 8002868:	0b1b      	lsrs	r3, r3, #12
 800286a:	0016      	movs	r6, r2
 800286c:	469a      	mov	sl, r3
 800286e:	0fca      	lsrs	r2, r1, #31
 8002870:	004b      	lsls	r3, r1, #1
 8002872:	0004      	movs	r4, r0
 8002874:	4691      	mov	r9, r2
 8002876:	b085      	sub	sp, #20
 8002878:	0d5b      	lsrs	r3, r3, #21
 800287a:	d100      	bne.n	800287e <__aeabi_dmul+0x26>
 800287c:	e1cf      	b.n	8002c1e <__aeabi_dmul+0x3c6>
 800287e:	4acd      	ldr	r2, [pc, #820]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d055      	beq.n	8002930 <__aeabi_dmul+0xd8>
 8002884:	4651      	mov	r1, sl
 8002886:	0f42      	lsrs	r2, r0, #29
 8002888:	00c9      	lsls	r1, r1, #3
 800288a:	430a      	orrs	r2, r1
 800288c:	2180      	movs	r1, #128	@ 0x80
 800288e:	0409      	lsls	r1, r1, #16
 8002890:	4311      	orrs	r1, r2
 8002892:	00c2      	lsls	r2, r0, #3
 8002894:	4690      	mov	r8, r2
 8002896:	4ac8      	ldr	r2, [pc, #800]	@ (8002bb8 <__aeabi_dmul+0x360>)
 8002898:	468a      	mov	sl, r1
 800289a:	4693      	mov	fp, r2
 800289c:	449b      	add	fp, r3
 800289e:	2300      	movs	r3, #0
 80028a0:	2500      	movs	r5, #0
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	033c      	lsls	r4, r7, #12
 80028a6:	007b      	lsls	r3, r7, #1
 80028a8:	0ffa      	lsrs	r2, r7, #31
 80028aa:	9601      	str	r6, [sp, #4]
 80028ac:	0b24      	lsrs	r4, r4, #12
 80028ae:	0d5b      	lsrs	r3, r3, #21
 80028b0:	9200      	str	r2, [sp, #0]
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dmul+0x5e>
 80028b4:	e188      	b.n	8002bc8 <__aeabi_dmul+0x370>
 80028b6:	4abf      	ldr	r2, [pc, #764]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <__aeabi_dmul+0x66>
 80028bc:	e092      	b.n	80029e4 <__aeabi_dmul+0x18c>
 80028be:	4abe      	ldr	r2, [pc, #760]	@ (8002bb8 <__aeabi_dmul+0x360>)
 80028c0:	4694      	mov	ip, r2
 80028c2:	4463      	add	r3, ip
 80028c4:	449b      	add	fp, r3
 80028c6:	2d0a      	cmp	r5, #10
 80028c8:	dc42      	bgt.n	8002950 <__aeabi_dmul+0xf8>
 80028ca:	00e4      	lsls	r4, r4, #3
 80028cc:	0f73      	lsrs	r3, r6, #29
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2480      	movs	r4, #128	@ 0x80
 80028d2:	4649      	mov	r1, r9
 80028d4:	0424      	lsls	r4, r4, #16
 80028d6:	431c      	orrs	r4, r3
 80028d8:	00f3      	lsls	r3, r6, #3
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	9b00      	ldr	r3, [sp, #0]
 80028de:	2000      	movs	r0, #0
 80028e0:	4059      	eors	r1, r3
 80028e2:	b2cb      	uxtb	r3, r1
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	2d02      	cmp	r5, #2
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x94>
 80028ea:	e094      	b.n	8002a16 <__aeabi_dmul+0x1be>
 80028ec:	2301      	movs	r3, #1
 80028ee:	40ab      	lsls	r3, r5
 80028f0:	001d      	movs	r5, r3
 80028f2:	23a6      	movs	r3, #166	@ 0xa6
 80028f4:	002a      	movs	r2, r5
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	401a      	ands	r2, r3
 80028fa:	421d      	tst	r5, r3
 80028fc:	d000      	beq.n	8002900 <__aeabi_dmul+0xa8>
 80028fe:	e229      	b.n	8002d54 <__aeabi_dmul+0x4fc>
 8002900:	2390      	movs	r3, #144	@ 0x90
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	421d      	tst	r5, r3
 8002906:	d100      	bne.n	800290a <__aeabi_dmul+0xb2>
 8002908:	e24d      	b.n	8002da6 <__aeabi_dmul+0x54e>
 800290a:	2300      	movs	r3, #0
 800290c:	2480      	movs	r4, #128	@ 0x80
 800290e:	4699      	mov	r9, r3
 8002910:	0324      	lsls	r4, r4, #12
 8002912:	4ba8      	ldr	r3, [pc, #672]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 8002914:	0010      	movs	r0, r2
 8002916:	464a      	mov	r2, r9
 8002918:	051b      	lsls	r3, r3, #20
 800291a:	4323      	orrs	r3, r4
 800291c:	07d2      	lsls	r2, r2, #31
 800291e:	4313      	orrs	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	b005      	add	sp, #20
 8002924:	bcf0      	pop	{r4, r5, r6, r7}
 8002926:	46bb      	mov	fp, r7
 8002928:	46b2      	mov	sl, r6
 800292a:	46a9      	mov	r9, r5
 800292c:	46a0      	mov	r8, r4
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002930:	4652      	mov	r2, sl
 8002932:	4302      	orrs	r2, r0
 8002934:	4690      	mov	r8, r2
 8002936:	d000      	beq.n	800293a <__aeabi_dmul+0xe2>
 8002938:	e1ac      	b.n	8002c94 <__aeabi_dmul+0x43c>
 800293a:	469b      	mov	fp, r3
 800293c:	2302      	movs	r3, #2
 800293e:	4692      	mov	sl, r2
 8002940:	2508      	movs	r5, #8
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	e7ae      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002946:	9b00      	ldr	r3, [sp, #0]
 8002948:	46a2      	mov	sl, r4
 800294a:	4699      	mov	r9, r3
 800294c:	9b01      	ldr	r3, [sp, #4]
 800294e:	4698      	mov	r8, r3
 8002950:	9b02      	ldr	r3, [sp, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d100      	bne.n	8002958 <__aeabi_dmul+0x100>
 8002956:	e1ca      	b.n	8002cee <__aeabi_dmul+0x496>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d100      	bne.n	800295e <__aeabi_dmul+0x106>
 800295c:	e192      	b.n	8002c84 <__aeabi_dmul+0x42c>
 800295e:	2b01      	cmp	r3, #1
 8002960:	d110      	bne.n	8002984 <__aeabi_dmul+0x12c>
 8002962:	2300      	movs	r3, #0
 8002964:	2400      	movs	r4, #0
 8002966:	2200      	movs	r2, #0
 8002968:	e7d4      	b.n	8002914 <__aeabi_dmul+0xbc>
 800296a:	2201      	movs	r2, #1
 800296c:	087b      	lsrs	r3, r7, #1
 800296e:	403a      	ands	r2, r7
 8002970:	4313      	orrs	r3, r2
 8002972:	4652      	mov	r2, sl
 8002974:	07d2      	lsls	r2, r2, #31
 8002976:	4313      	orrs	r3, r2
 8002978:	4698      	mov	r8, r3
 800297a:	4653      	mov	r3, sl
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	469a      	mov	sl, r3
 8002980:	9b03      	ldr	r3, [sp, #12]
 8002982:	4699      	mov	r9, r3
 8002984:	465b      	mov	r3, fp
 8002986:	1c58      	adds	r0, r3, #1
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	445b      	add	r3, fp
 800298e:	2b00      	cmp	r3, #0
 8002990:	dc00      	bgt.n	8002994 <__aeabi_dmul+0x13c>
 8002992:	e1b1      	b.n	8002cf8 <__aeabi_dmul+0x4a0>
 8002994:	4642      	mov	r2, r8
 8002996:	0752      	lsls	r2, r2, #29
 8002998:	d00b      	beq.n	80029b2 <__aeabi_dmul+0x15a>
 800299a:	220f      	movs	r2, #15
 800299c:	4641      	mov	r1, r8
 800299e:	400a      	ands	r2, r1
 80029a0:	2a04      	cmp	r2, #4
 80029a2:	d006      	beq.n	80029b2 <__aeabi_dmul+0x15a>
 80029a4:	4642      	mov	r2, r8
 80029a6:	1d11      	adds	r1, r2, #4
 80029a8:	4541      	cmp	r1, r8
 80029aa:	4192      	sbcs	r2, r2
 80029ac:	4688      	mov	r8, r1
 80029ae:	4252      	negs	r2, r2
 80029b0:	4492      	add	sl, r2
 80029b2:	4652      	mov	r2, sl
 80029b4:	01d2      	lsls	r2, r2, #7
 80029b6:	d506      	bpl.n	80029c6 <__aeabi_dmul+0x16e>
 80029b8:	4652      	mov	r2, sl
 80029ba:	4b80      	ldr	r3, [pc, #512]	@ (8002bbc <__aeabi_dmul+0x364>)
 80029bc:	401a      	ands	r2, r3
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	4692      	mov	sl, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	18c3      	adds	r3, r0, r3
 80029c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <__aeabi_dmul+0x368>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	dd00      	ble.n	80029ce <__aeabi_dmul+0x176>
 80029cc:	e18f      	b.n	8002cee <__aeabi_dmul+0x496>
 80029ce:	4642      	mov	r2, r8
 80029d0:	08d1      	lsrs	r1, r2, #3
 80029d2:	4652      	mov	r2, sl
 80029d4:	0752      	lsls	r2, r2, #29
 80029d6:	430a      	orrs	r2, r1
 80029d8:	4651      	mov	r1, sl
 80029da:	055b      	lsls	r3, r3, #21
 80029dc:	024c      	lsls	r4, r1, #9
 80029de:	0b24      	lsrs	r4, r4, #12
 80029e0:	0d5b      	lsrs	r3, r3, #21
 80029e2:	e797      	b.n	8002914 <__aeabi_dmul+0xbc>
 80029e4:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 80029e6:	4326      	orrs	r6, r4
 80029e8:	469c      	mov	ip, r3
 80029ea:	44e3      	add	fp, ip
 80029ec:	2e00      	cmp	r6, #0
 80029ee:	d100      	bne.n	80029f2 <__aeabi_dmul+0x19a>
 80029f0:	e16f      	b.n	8002cd2 <__aeabi_dmul+0x47a>
 80029f2:	2303      	movs	r3, #3
 80029f4:	4649      	mov	r1, r9
 80029f6:	431d      	orrs	r5, r3
 80029f8:	9b00      	ldr	r3, [sp, #0]
 80029fa:	4059      	eors	r1, r3
 80029fc:	b2cb      	uxtb	r3, r1
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	2d0a      	cmp	r5, #10
 8002a02:	dd00      	ble.n	8002a06 <__aeabi_dmul+0x1ae>
 8002a04:	e133      	b.n	8002c6e <__aeabi_dmul+0x416>
 8002a06:	2301      	movs	r3, #1
 8002a08:	40ab      	lsls	r3, r5
 8002a0a:	001d      	movs	r5, r3
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	2288      	movs	r2, #136	@ 0x88
 8002a12:	422a      	tst	r2, r5
 8002a14:	d197      	bne.n	8002946 <__aeabi_dmul+0xee>
 8002a16:	4642      	mov	r2, r8
 8002a18:	4643      	mov	r3, r8
 8002a1a:	0412      	lsls	r2, r2, #16
 8002a1c:	0c12      	lsrs	r2, r2, #16
 8002a1e:	0016      	movs	r6, r2
 8002a20:	9801      	ldr	r0, [sp, #4]
 8002a22:	0c1d      	lsrs	r5, r3, #16
 8002a24:	0c03      	lsrs	r3, r0, #16
 8002a26:	0400      	lsls	r0, r0, #16
 8002a28:	0c00      	lsrs	r0, r0, #16
 8002a2a:	4346      	muls	r6, r0
 8002a2c:	46b4      	mov	ip, r6
 8002a2e:	001e      	movs	r6, r3
 8002a30:	436e      	muls	r6, r5
 8002a32:	9600      	str	r6, [sp, #0]
 8002a34:	0016      	movs	r6, r2
 8002a36:	0007      	movs	r7, r0
 8002a38:	435e      	muls	r6, r3
 8002a3a:	4661      	mov	r1, ip
 8002a3c:	46b0      	mov	r8, r6
 8002a3e:	436f      	muls	r7, r5
 8002a40:	0c0e      	lsrs	r6, r1, #16
 8002a42:	44b8      	add	r8, r7
 8002a44:	4446      	add	r6, r8
 8002a46:	42b7      	cmp	r7, r6
 8002a48:	d905      	bls.n	8002a56 <__aeabi_dmul+0x1fe>
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	0249      	lsls	r1, r1, #9
 8002a4e:	4688      	mov	r8, r1
 8002a50:	9f00      	ldr	r7, [sp, #0]
 8002a52:	4447      	add	r7, r8
 8002a54:	9700      	str	r7, [sp, #0]
 8002a56:	4661      	mov	r1, ip
 8002a58:	0409      	lsls	r1, r1, #16
 8002a5a:	0c09      	lsrs	r1, r1, #16
 8002a5c:	0c37      	lsrs	r7, r6, #16
 8002a5e:	0436      	lsls	r6, r6, #16
 8002a60:	468c      	mov	ip, r1
 8002a62:	0031      	movs	r1, r6
 8002a64:	4461      	add	r1, ip
 8002a66:	9101      	str	r1, [sp, #4]
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0c26      	lsrs	r6, r4, #16
 8002a6c:	0424      	lsls	r4, r4, #16
 8002a6e:	0c24      	lsrs	r4, r4, #16
 8002a70:	4361      	muls	r1, r4
 8002a72:	468c      	mov	ip, r1
 8002a74:	0021      	movs	r1, r4
 8002a76:	4369      	muls	r1, r5
 8002a78:	4689      	mov	r9, r1
 8002a7a:	4661      	mov	r1, ip
 8002a7c:	0c09      	lsrs	r1, r1, #16
 8002a7e:	4688      	mov	r8, r1
 8002a80:	4372      	muls	r2, r6
 8002a82:	444a      	add	r2, r9
 8002a84:	4442      	add	r2, r8
 8002a86:	4375      	muls	r5, r6
 8002a88:	4591      	cmp	r9, r2
 8002a8a:	d903      	bls.n	8002a94 <__aeabi_dmul+0x23c>
 8002a8c:	2180      	movs	r1, #128	@ 0x80
 8002a8e:	0249      	lsls	r1, r1, #9
 8002a90:	4688      	mov	r8, r1
 8002a92:	4445      	add	r5, r8
 8002a94:	0c11      	lsrs	r1, r2, #16
 8002a96:	4688      	mov	r8, r1
 8002a98:	4661      	mov	r1, ip
 8002a9a:	0409      	lsls	r1, r1, #16
 8002a9c:	0c09      	lsrs	r1, r1, #16
 8002a9e:	468c      	mov	ip, r1
 8002aa0:	0412      	lsls	r2, r2, #16
 8002aa2:	4462      	add	r2, ip
 8002aa4:	18b9      	adds	r1, r7, r2
 8002aa6:	9102      	str	r1, [sp, #8]
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	0c09      	lsrs	r1, r1, #16
 8002aac:	468c      	mov	ip, r1
 8002aae:	4651      	mov	r1, sl
 8002ab0:	040f      	lsls	r7, r1, #16
 8002ab2:	0c3f      	lsrs	r7, r7, #16
 8002ab4:	0039      	movs	r1, r7
 8002ab6:	4341      	muls	r1, r0
 8002ab8:	4445      	add	r5, r8
 8002aba:	4688      	mov	r8, r1
 8002abc:	4661      	mov	r1, ip
 8002abe:	4341      	muls	r1, r0
 8002ac0:	468a      	mov	sl, r1
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	4660      	mov	r0, ip
 8002ac6:	0c09      	lsrs	r1, r1, #16
 8002ac8:	4689      	mov	r9, r1
 8002aca:	4358      	muls	r0, r3
 8002acc:	437b      	muls	r3, r7
 8002ace:	4453      	add	r3, sl
 8002ad0:	444b      	add	r3, r9
 8002ad2:	459a      	cmp	sl, r3
 8002ad4:	d903      	bls.n	8002ade <__aeabi_dmul+0x286>
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	0249      	lsls	r1, r1, #9
 8002ada:	4689      	mov	r9, r1
 8002adc:	4448      	add	r0, r9
 8002ade:	0c19      	lsrs	r1, r3, #16
 8002ae0:	4689      	mov	r9, r1
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	0409      	lsls	r1, r1, #16
 8002ae6:	0c09      	lsrs	r1, r1, #16
 8002ae8:	4688      	mov	r8, r1
 8002aea:	0039      	movs	r1, r7
 8002aec:	4361      	muls	r1, r4
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	4443      	add	r3, r8
 8002af2:	4688      	mov	r8, r1
 8002af4:	4661      	mov	r1, ip
 8002af6:	434c      	muls	r4, r1
 8002af8:	4371      	muls	r1, r6
 8002afa:	468c      	mov	ip, r1
 8002afc:	4641      	mov	r1, r8
 8002afe:	4377      	muls	r7, r6
 8002b00:	0c0e      	lsrs	r6, r1, #16
 8002b02:	193f      	adds	r7, r7, r4
 8002b04:	19f6      	adds	r6, r6, r7
 8002b06:	4448      	add	r0, r9
 8002b08:	42b4      	cmp	r4, r6
 8002b0a:	d903      	bls.n	8002b14 <__aeabi_dmul+0x2bc>
 8002b0c:	2180      	movs	r1, #128	@ 0x80
 8002b0e:	0249      	lsls	r1, r1, #9
 8002b10:	4689      	mov	r9, r1
 8002b12:	44cc      	add	ip, r9
 8002b14:	9902      	ldr	r1, [sp, #8]
 8002b16:	9f00      	ldr	r7, [sp, #0]
 8002b18:	4689      	mov	r9, r1
 8002b1a:	0431      	lsls	r1, r6, #16
 8002b1c:	444f      	add	r7, r9
 8002b1e:	4689      	mov	r9, r1
 8002b20:	4641      	mov	r1, r8
 8002b22:	4297      	cmp	r7, r2
 8002b24:	4192      	sbcs	r2, r2
 8002b26:	040c      	lsls	r4, r1, #16
 8002b28:	0c24      	lsrs	r4, r4, #16
 8002b2a:	444c      	add	r4, r9
 8002b2c:	18ff      	adds	r7, r7, r3
 8002b2e:	4252      	negs	r2, r2
 8002b30:	1964      	adds	r4, r4, r5
 8002b32:	18a1      	adds	r1, r4, r2
 8002b34:	429f      	cmp	r7, r3
 8002b36:	419b      	sbcs	r3, r3
 8002b38:	4688      	mov	r8, r1
 8002b3a:	4682      	mov	sl, r0
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	4699      	mov	r9, r3
 8002b40:	4590      	cmp	r8, r2
 8002b42:	4192      	sbcs	r2, r2
 8002b44:	42ac      	cmp	r4, r5
 8002b46:	41a4      	sbcs	r4, r4
 8002b48:	44c2      	add	sl, r8
 8002b4a:	44d1      	add	r9, sl
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	4264      	negs	r4, r4
 8002b50:	4314      	orrs	r4, r2
 8002b52:	4599      	cmp	r9, r3
 8002b54:	419b      	sbcs	r3, r3
 8002b56:	4582      	cmp	sl, r0
 8002b58:	4192      	sbcs	r2, r2
 8002b5a:	425b      	negs	r3, r3
 8002b5c:	4252      	negs	r2, r2
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	464a      	mov	r2, r9
 8002b62:	0c36      	lsrs	r6, r6, #16
 8002b64:	19a4      	adds	r4, r4, r6
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	4463      	add	r3, ip
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	0dd2      	lsrs	r2, r2, #23
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	9901      	ldr	r1, [sp, #4]
 8002b72:	4692      	mov	sl, r2
 8002b74:	027a      	lsls	r2, r7, #9
 8002b76:	430a      	orrs	r2, r1
 8002b78:	1e50      	subs	r0, r2, #1
 8002b7a:	4182      	sbcs	r2, r0
 8002b7c:	0dff      	lsrs	r7, r7, #23
 8002b7e:	4317      	orrs	r7, r2
 8002b80:	464a      	mov	r2, r9
 8002b82:	0252      	lsls	r2, r2, #9
 8002b84:	4317      	orrs	r7, r2
 8002b86:	46b8      	mov	r8, r7
 8002b88:	01db      	lsls	r3, r3, #7
 8002b8a:	d500      	bpl.n	8002b8e <__aeabi_dmul+0x336>
 8002b8c:	e6ed      	b.n	800296a <__aeabi_dmul+0x112>
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <__aeabi_dmul+0x36c>)
 8002b90:	9a03      	ldr	r2, [sp, #12]
 8002b92:	445b      	add	r3, fp
 8002b94:	4691      	mov	r9, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	dc00      	bgt.n	8002b9c <__aeabi_dmul+0x344>
 8002b9a:	e0ac      	b.n	8002cf6 <__aeabi_dmul+0x49e>
 8002b9c:	003a      	movs	r2, r7
 8002b9e:	0752      	lsls	r2, r2, #29
 8002ba0:	d100      	bne.n	8002ba4 <__aeabi_dmul+0x34c>
 8002ba2:	e710      	b.n	80029c6 <__aeabi_dmul+0x16e>
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	4658      	mov	r0, fp
 8002ba8:	403a      	ands	r2, r7
 8002baa:	2a04      	cmp	r2, #4
 8002bac:	d000      	beq.n	8002bb0 <__aeabi_dmul+0x358>
 8002bae:	e6f9      	b.n	80029a4 <__aeabi_dmul+0x14c>
 8002bb0:	e709      	b.n	80029c6 <__aeabi_dmul+0x16e>
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	000007ff 	.word	0x000007ff
 8002bb8:	fffffc01 	.word	0xfffffc01
 8002bbc:	feffffff 	.word	0xfeffffff
 8002bc0:	000007fe 	.word	0x000007fe
 8002bc4:	000003ff 	.word	0x000003ff
 8002bc8:	0022      	movs	r2, r4
 8002bca:	4332      	orrs	r2, r6
 8002bcc:	d06f      	beq.n	8002cae <__aeabi_dmul+0x456>
 8002bce:	2c00      	cmp	r4, #0
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dmul+0x37c>
 8002bd2:	e0c2      	b.n	8002d5a <__aeabi_dmul+0x502>
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	f7fd fcb5 	bl	8000544 <__clzsi2>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	0003      	movs	r3, r0
 8002bde:	3a0b      	subs	r2, #11
 8002be0:	201d      	movs	r0, #29
 8002be2:	1a82      	subs	r2, r0, r2
 8002be4:	0030      	movs	r0, r6
 8002be6:	0019      	movs	r1, r3
 8002be8:	40d0      	lsrs	r0, r2
 8002bea:	3908      	subs	r1, #8
 8002bec:	408c      	lsls	r4, r1
 8002bee:	0002      	movs	r2, r0
 8002bf0:	4322      	orrs	r2, r4
 8002bf2:	0034      	movs	r4, r6
 8002bf4:	408c      	lsls	r4, r1
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	1acb      	subs	r3, r1, r3
 8002bfa:	4986      	ldr	r1, [pc, #536]	@ (8002e14 <__aeabi_dmul+0x5bc>)
 8002bfc:	468b      	mov	fp, r1
 8002bfe:	449b      	add	fp, r3
 8002c00:	2d0a      	cmp	r5, #10
 8002c02:	dd00      	ble.n	8002c06 <__aeabi_dmul+0x3ae>
 8002c04:	e6a4      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002c06:	4649      	mov	r1, r9
 8002c08:	9b00      	ldr	r3, [sp, #0]
 8002c0a:	9401      	str	r4, [sp, #4]
 8002c0c:	4059      	eors	r1, r3
 8002c0e:	b2cb      	uxtb	r3, r1
 8002c10:	0014      	movs	r4, r2
 8002c12:	2000      	movs	r0, #0
 8002c14:	9303      	str	r3, [sp, #12]
 8002c16:	2d02      	cmp	r5, #2
 8002c18:	dd00      	ble.n	8002c1c <__aeabi_dmul+0x3c4>
 8002c1a:	e667      	b.n	80028ec <__aeabi_dmul+0x94>
 8002c1c:	e6fb      	b.n	8002a16 <__aeabi_dmul+0x1be>
 8002c1e:	4653      	mov	r3, sl
 8002c20:	4303      	orrs	r3, r0
 8002c22:	4698      	mov	r8, r3
 8002c24:	d03c      	beq.n	8002ca0 <__aeabi_dmul+0x448>
 8002c26:	4653      	mov	r3, sl
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d100      	bne.n	8002c2e <__aeabi_dmul+0x3d6>
 8002c2c:	e0a3      	b.n	8002d76 <__aeabi_dmul+0x51e>
 8002c2e:	4650      	mov	r0, sl
 8002c30:	f7fd fc88 	bl	8000544 <__clzsi2>
 8002c34:	230b      	movs	r3, #11
 8002c36:	425b      	negs	r3, r3
 8002c38:	469c      	mov	ip, r3
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	4484      	add	ip, r0
 8002c3e:	0011      	movs	r1, r2
 8002c40:	4650      	mov	r0, sl
 8002c42:	3908      	subs	r1, #8
 8002c44:	4088      	lsls	r0, r1
 8002c46:	231d      	movs	r3, #29
 8002c48:	4680      	mov	r8, r0
 8002c4a:	4660      	mov	r0, ip
 8002c4c:	1a1b      	subs	r3, r3, r0
 8002c4e:	0020      	movs	r0, r4
 8002c50:	40d8      	lsrs	r0, r3
 8002c52:	0003      	movs	r3, r0
 8002c54:	4640      	mov	r0, r8
 8002c56:	4303      	orrs	r3, r0
 8002c58:	469a      	mov	sl, r3
 8002c5a:	0023      	movs	r3, r4
 8002c5c:	408b      	lsls	r3, r1
 8002c5e:	4698      	mov	r8, r3
 8002c60:	4b6c      	ldr	r3, [pc, #432]	@ (8002e14 <__aeabi_dmul+0x5bc>)
 8002c62:	2500      	movs	r5, #0
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	469b      	mov	fp, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	e61a      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002c6e:	2d0f      	cmp	r5, #15
 8002c70:	d000      	beq.n	8002c74 <__aeabi_dmul+0x41c>
 8002c72:	e0c9      	b.n	8002e08 <__aeabi_dmul+0x5b0>
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	4652      	mov	r2, sl
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	421a      	tst	r2, r3
 8002c7c:	d002      	beq.n	8002c84 <__aeabi_dmul+0x42c>
 8002c7e:	421c      	tst	r4, r3
 8002c80:	d100      	bne.n	8002c84 <__aeabi_dmul+0x42c>
 8002c82:	e092      	b.n	8002daa <__aeabi_dmul+0x552>
 8002c84:	2480      	movs	r4, #128	@ 0x80
 8002c86:	4653      	mov	r3, sl
 8002c88:	0324      	lsls	r4, r4, #12
 8002c8a:	431c      	orrs	r4, r3
 8002c8c:	0324      	lsls	r4, r4, #12
 8002c8e:	4642      	mov	r2, r8
 8002c90:	0b24      	lsrs	r4, r4, #12
 8002c92:	e63e      	b.n	8002912 <__aeabi_dmul+0xba>
 8002c94:	469b      	mov	fp, r3
 8002c96:	2303      	movs	r3, #3
 8002c98:	4680      	mov	r8, r0
 8002c9a:	250c      	movs	r5, #12
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	e601      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	469a      	mov	sl, r3
 8002ca4:	469b      	mov	fp, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	2504      	movs	r5, #4
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	e5fa      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430d      	orrs	r5, r1
 8002cb2:	2d0a      	cmp	r5, #10
 8002cb4:	dd00      	ble.n	8002cb8 <__aeabi_dmul+0x460>
 8002cb6:	e64b      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002cb8:	4649      	mov	r1, r9
 8002cba:	9800      	ldr	r0, [sp, #0]
 8002cbc:	4041      	eors	r1, r0
 8002cbe:	b2c9      	uxtb	r1, r1
 8002cc0:	9103      	str	r1, [sp, #12]
 8002cc2:	2d02      	cmp	r5, #2
 8002cc4:	dc00      	bgt.n	8002cc8 <__aeabi_dmul+0x470>
 8002cc6:	e096      	b.n	8002df6 <__aeabi_dmul+0x59e>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2400      	movs	r4, #0
 8002ccc:	2001      	movs	r0, #1
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	e60c      	b.n	80028ec <__aeabi_dmul+0x94>
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	9a00      	ldr	r2, [sp, #0]
 8002cd8:	432b      	orrs	r3, r5
 8002cda:	4051      	eors	r1, r2
 8002cdc:	b2ca      	uxtb	r2, r1
 8002cde:	9203      	str	r2, [sp, #12]
 8002ce0:	2b0a      	cmp	r3, #10
 8002ce2:	dd00      	ble.n	8002ce6 <__aeabi_dmul+0x48e>
 8002ce4:	e634      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	d157      	bne.n	8002d9a <__aeabi_dmul+0x542>
 8002cea:	9b03      	ldr	r3, [sp, #12]
 8002cec:	4699      	mov	r9, r3
 8002cee:	2400      	movs	r4, #0
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4b49      	ldr	r3, [pc, #292]	@ (8002e18 <__aeabi_dmul+0x5c0>)
 8002cf4:	e60e      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002cf6:	4658      	mov	r0, fp
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	1ac9      	subs	r1, r1, r3
 8002cfc:	2938      	cmp	r1, #56	@ 0x38
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x4aa>
 8002d00:	e62f      	b.n	8002962 <__aeabi_dmul+0x10a>
 8002d02:	291f      	cmp	r1, #31
 8002d04:	dd56      	ble.n	8002db4 <__aeabi_dmul+0x55c>
 8002d06:	221f      	movs	r2, #31
 8002d08:	4654      	mov	r4, sl
 8002d0a:	4252      	negs	r2, r2
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	40dc      	lsrs	r4, r3
 8002d10:	2920      	cmp	r1, #32
 8002d12:	d007      	beq.n	8002d24 <__aeabi_dmul+0x4cc>
 8002d14:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <__aeabi_dmul+0x5c4>)
 8002d16:	4642      	mov	r2, r8
 8002d18:	469c      	mov	ip, r3
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4460      	add	r0, ip
 8002d1e:	4083      	lsls	r3, r0
 8002d20:	431a      	orrs	r2, r3
 8002d22:	4690      	mov	r8, r2
 8002d24:	4642      	mov	r2, r8
 8002d26:	2107      	movs	r1, #7
 8002d28:	1e53      	subs	r3, r2, #1
 8002d2a:	419a      	sbcs	r2, r3
 8002d2c:	000b      	movs	r3, r1
 8002d2e:	4322      	orrs	r2, r4
 8002d30:	4013      	ands	r3, r2
 8002d32:	2400      	movs	r4, #0
 8002d34:	4211      	tst	r1, r2
 8002d36:	d009      	beq.n	8002d4c <__aeabi_dmul+0x4f4>
 8002d38:	230f      	movs	r3, #15
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d05d      	beq.n	8002dfc <__aeabi_dmul+0x5a4>
 8002d40:	1d11      	adds	r1, r2, #4
 8002d42:	4291      	cmp	r1, r2
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	000a      	movs	r2, r1
 8002d48:	425b      	negs	r3, r3
 8002d4a:	075b      	lsls	r3, r3, #29
 8002d4c:	08d2      	lsrs	r2, r2, #3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	e5df      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	4699      	mov	r9, r3
 8002d58:	e5fa      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002d5a:	9801      	ldr	r0, [sp, #4]
 8002d5c:	f7fd fbf2 	bl	8000544 <__clzsi2>
 8002d60:	0002      	movs	r2, r0
 8002d62:	0003      	movs	r3, r0
 8002d64:	3215      	adds	r2, #21
 8002d66:	3320      	adds	r3, #32
 8002d68:	2a1c      	cmp	r2, #28
 8002d6a:	dc00      	bgt.n	8002d6e <__aeabi_dmul+0x516>
 8002d6c:	e738      	b.n	8002be0 <__aeabi_dmul+0x388>
 8002d6e:	9a01      	ldr	r2, [sp, #4]
 8002d70:	3808      	subs	r0, #8
 8002d72:	4082      	lsls	r2, r0
 8002d74:	e73f      	b.n	8002bf6 <__aeabi_dmul+0x39e>
 8002d76:	f7fd fbe5 	bl	8000544 <__clzsi2>
 8002d7a:	2315      	movs	r3, #21
 8002d7c:	469c      	mov	ip, r3
 8002d7e:	4484      	add	ip, r0
 8002d80:	0002      	movs	r2, r0
 8002d82:	4663      	mov	r3, ip
 8002d84:	3220      	adds	r2, #32
 8002d86:	2b1c      	cmp	r3, #28
 8002d88:	dc00      	bgt.n	8002d8c <__aeabi_dmul+0x534>
 8002d8a:	e758      	b.n	8002c3e <__aeabi_dmul+0x3e6>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4698      	mov	r8, r3
 8002d90:	0023      	movs	r3, r4
 8002d92:	3808      	subs	r0, #8
 8002d94:	4083      	lsls	r3, r0
 8002d96:	469a      	mov	sl, r3
 8002d98:	e762      	b.n	8002c60 <__aeabi_dmul+0x408>
 8002d9a:	001d      	movs	r5, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2400      	movs	r4, #0
 8002da0:	2002      	movs	r0, #2
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	e5a2      	b.n	80028ec <__aeabi_dmul+0x94>
 8002da6:	9002      	str	r0, [sp, #8]
 8002da8:	e632      	b.n	8002a10 <__aeabi_dmul+0x1b8>
 8002daa:	431c      	orrs	r4, r3
 8002dac:	9b00      	ldr	r3, [sp, #0]
 8002dae:	9a01      	ldr	r2, [sp, #4]
 8002db0:	4699      	mov	r9, r3
 8002db2:	e5ae      	b.n	8002912 <__aeabi_dmul+0xba>
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <__aeabi_dmul+0x5c8>)
 8002db6:	4652      	mov	r2, sl
 8002db8:	18c3      	adds	r3, r0, r3
 8002dba:	4640      	mov	r0, r8
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	40c8      	lsrs	r0, r1
 8002dc0:	4302      	orrs	r2, r0
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	4098      	lsls	r0, r3
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	1e58      	subs	r0, r3, #1
 8002dca:	4183      	sbcs	r3, r0
 8002dcc:	4654      	mov	r4, sl
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	40cc      	lsrs	r4, r1
 8002dd2:	0753      	lsls	r3, r2, #29
 8002dd4:	d009      	beq.n	8002dea <__aeabi_dmul+0x592>
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d005      	beq.n	8002dea <__aeabi_dmul+0x592>
 8002dde:	1d13      	adds	r3, r2, #4
 8002de0:	4293      	cmp	r3, r2
 8002de2:	4192      	sbcs	r2, r2
 8002de4:	4252      	negs	r2, r2
 8002de6:	18a4      	adds	r4, r4, r2
 8002de8:	001a      	movs	r2, r3
 8002dea:	0223      	lsls	r3, r4, #8
 8002dec:	d508      	bpl.n	8002e00 <__aeabi_dmul+0x5a8>
 8002dee:	2301      	movs	r3, #1
 8002df0:	2400      	movs	r4, #0
 8002df2:	2200      	movs	r2, #0
 8002df4:	e58e      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002df6:	4689      	mov	r9, r1
 8002df8:	2400      	movs	r4, #0
 8002dfa:	e58b      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e7a5      	b.n	8002d4c <__aeabi_dmul+0x4f4>
 8002e00:	0763      	lsls	r3, r4, #29
 8002e02:	0264      	lsls	r4, r4, #9
 8002e04:	0b24      	lsrs	r4, r4, #12
 8002e06:	e7a1      	b.n	8002d4c <__aeabi_dmul+0x4f4>
 8002e08:	9b00      	ldr	r3, [sp, #0]
 8002e0a:	46a2      	mov	sl, r4
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	9b01      	ldr	r3, [sp, #4]
 8002e10:	4698      	mov	r8, r3
 8002e12:	e737      	b.n	8002c84 <__aeabi_dmul+0x42c>
 8002e14:	fffffc0d 	.word	0xfffffc0d
 8002e18:	000007ff 	.word	0x000007ff
 8002e1c:	0000043e 	.word	0x0000043e
 8002e20:	0000041e 	.word	0x0000041e

08002e24 <__aeabi_dsub>:
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	4657      	mov	r7, sl
 8002e28:	464e      	mov	r6, r9
 8002e2a:	4645      	mov	r5, r8
 8002e2c:	46de      	mov	lr, fp
 8002e2e:	b5e0      	push	{r5, r6, r7, lr}
 8002e30:	b083      	sub	sp, #12
 8002e32:	9000      	str	r0, [sp, #0]
 8002e34:	9101      	str	r1, [sp, #4]
 8002e36:	030c      	lsls	r4, r1, #12
 8002e38:	004d      	lsls	r5, r1, #1
 8002e3a:	0fce      	lsrs	r6, r1, #31
 8002e3c:	0a61      	lsrs	r1, r4, #9
 8002e3e:	9c00      	ldr	r4, [sp, #0]
 8002e40:	005f      	lsls	r7, r3, #1
 8002e42:	0f64      	lsrs	r4, r4, #29
 8002e44:	430c      	orrs	r4, r1
 8002e46:	9900      	ldr	r1, [sp, #0]
 8002e48:	9200      	str	r2, [sp, #0]
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	00c8      	lsls	r0, r1, #3
 8002e4e:	0319      	lsls	r1, r3, #12
 8002e50:	0d7b      	lsrs	r3, r7, #21
 8002e52:	4699      	mov	r9, r3
 8002e54:	9b01      	ldr	r3, [sp, #4]
 8002e56:	4fcc      	ldr	r7, [pc, #816]	@ (8003188 <__aeabi_dsub+0x364>)
 8002e58:	0fdb      	lsrs	r3, r3, #31
 8002e5a:	469c      	mov	ip, r3
 8002e5c:	0a4b      	lsrs	r3, r1, #9
 8002e5e:	9900      	ldr	r1, [sp, #0]
 8002e60:	4680      	mov	r8, r0
 8002e62:	0f49      	lsrs	r1, r1, #29
 8002e64:	4319      	orrs	r1, r3
 8002e66:	9b00      	ldr	r3, [sp, #0]
 8002e68:	468b      	mov	fp, r1
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	4692      	mov	sl, r2
 8002e6e:	0d6d      	lsrs	r5, r5, #21
 8002e70:	45b9      	cmp	r9, r7
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x52>
 8002e74:	e0bf      	b.n	8002ff6 <__aeabi_dsub+0x1d2>
 8002e76:	2301      	movs	r3, #1
 8002e78:	4661      	mov	r1, ip
 8002e7a:	4059      	eors	r1, r3
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	468c      	mov	ip, r1
 8002e80:	1aeb      	subs	r3, r5, r3
 8002e82:	428e      	cmp	r6, r1
 8002e84:	d075      	beq.n	8002f72 <__aeabi_dsub+0x14e>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dc00      	bgt.n	8002e8c <__aeabi_dsub+0x68>
 8002e8a:	e2a3      	b.n	80033d4 <__aeabi_dsub+0x5b0>
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	2900      	cmp	r1, #0
 8002e90:	d100      	bne.n	8002e94 <__aeabi_dsub+0x70>
 8002e92:	e0ce      	b.n	8003032 <__aeabi_dsub+0x20e>
 8002e94:	42bd      	cmp	r5, r7
 8002e96:	d100      	bne.n	8002e9a <__aeabi_dsub+0x76>
 8002e98:	e200      	b.n	800329c <__aeabi_dsub+0x478>
 8002e9a:	2701      	movs	r7, #1
 8002e9c:	2b38      	cmp	r3, #56	@ 0x38
 8002e9e:	dc19      	bgt.n	8002ed4 <__aeabi_dsub+0xb0>
 8002ea0:	2780      	movs	r7, #128	@ 0x80
 8002ea2:	4659      	mov	r1, fp
 8002ea4:	043f      	lsls	r7, r7, #16
 8002ea6:	4339      	orrs	r1, r7
 8002ea8:	468b      	mov	fp, r1
 8002eaa:	2b1f      	cmp	r3, #31
 8002eac:	dd00      	ble.n	8002eb0 <__aeabi_dsub+0x8c>
 8002eae:	e1fa      	b.n	80032a6 <__aeabi_dsub+0x482>
 8002eb0:	2720      	movs	r7, #32
 8002eb2:	1af9      	subs	r1, r7, r3
 8002eb4:	468c      	mov	ip, r1
 8002eb6:	4659      	mov	r1, fp
 8002eb8:	4667      	mov	r7, ip
 8002eba:	40b9      	lsls	r1, r7
 8002ebc:	000f      	movs	r7, r1
 8002ebe:	0011      	movs	r1, r2
 8002ec0:	40d9      	lsrs	r1, r3
 8002ec2:	430f      	orrs	r7, r1
 8002ec4:	4661      	mov	r1, ip
 8002ec6:	408a      	lsls	r2, r1
 8002ec8:	1e51      	subs	r1, r2, #1
 8002eca:	418a      	sbcs	r2, r1
 8002ecc:	4659      	mov	r1, fp
 8002ece:	40d9      	lsrs	r1, r3
 8002ed0:	4317      	orrs	r7, r2
 8002ed2:	1a64      	subs	r4, r4, r1
 8002ed4:	1bc7      	subs	r7, r0, r7
 8002ed6:	42b8      	cmp	r0, r7
 8002ed8:	4180      	sbcs	r0, r0
 8002eda:	4240      	negs	r0, r0
 8002edc:	1a24      	subs	r4, r4, r0
 8002ede:	0223      	lsls	r3, r4, #8
 8002ee0:	d400      	bmi.n	8002ee4 <__aeabi_dsub+0xc0>
 8002ee2:	e140      	b.n	8003166 <__aeabi_dsub+0x342>
 8002ee4:	0264      	lsls	r4, r4, #9
 8002ee6:	0a64      	lsrs	r4, r4, #9
 8002ee8:	2c00      	cmp	r4, #0
 8002eea:	d100      	bne.n	8002eee <__aeabi_dsub+0xca>
 8002eec:	e154      	b.n	8003198 <__aeabi_dsub+0x374>
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f7fd fb28 	bl	8000544 <__clzsi2>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	3b08      	subs	r3, #8
 8002ef8:	2120      	movs	r1, #32
 8002efa:	0038      	movs	r0, r7
 8002efc:	1aca      	subs	r2, r1, r3
 8002efe:	40d0      	lsrs	r0, r2
 8002f00:	409c      	lsls	r4, r3
 8002f02:	0002      	movs	r2, r0
 8002f04:	409f      	lsls	r7, r3
 8002f06:	4322      	orrs	r2, r4
 8002f08:	429d      	cmp	r5, r3
 8002f0a:	dd00      	ble.n	8002f0e <__aeabi_dsub+0xea>
 8002f0c:	e1a6      	b.n	800325c <__aeabi_dsub+0x438>
 8002f0e:	1b58      	subs	r0, r3, r5
 8002f10:	3001      	adds	r0, #1
 8002f12:	1a09      	subs	r1, r1, r0
 8002f14:	003c      	movs	r4, r7
 8002f16:	408f      	lsls	r7, r1
 8002f18:	40c4      	lsrs	r4, r0
 8002f1a:	1e7b      	subs	r3, r7, #1
 8002f1c:	419f      	sbcs	r7, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	408b      	lsls	r3, r1
 8002f22:	4327      	orrs	r7, r4
 8002f24:	431f      	orrs	r7, r3
 8002f26:	40c2      	lsrs	r2, r0
 8002f28:	003b      	movs	r3, r7
 8002f2a:	0014      	movs	r4, r2
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	d100      	bne.n	8002f34 <__aeabi_dsub+0x110>
 8002f32:	e1f7      	b.n	8003324 <__aeabi_dsub+0x500>
 8002f34:	077b      	lsls	r3, r7, #29
 8002f36:	d100      	bne.n	8002f3a <__aeabi_dsub+0x116>
 8002f38:	e377      	b.n	800362a <__aeabi_dsub+0x806>
 8002f3a:	230f      	movs	r3, #15
 8002f3c:	0038      	movs	r0, r7
 8002f3e:	403b      	ands	r3, r7
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d004      	beq.n	8002f4e <__aeabi_dsub+0x12a>
 8002f44:	1d38      	adds	r0, r7, #4
 8002f46:	42b8      	cmp	r0, r7
 8002f48:	41bf      	sbcs	r7, r7
 8002f4a:	427f      	negs	r7, r7
 8002f4c:	19e4      	adds	r4, r4, r7
 8002f4e:	0223      	lsls	r3, r4, #8
 8002f50:	d400      	bmi.n	8002f54 <__aeabi_dsub+0x130>
 8002f52:	e368      	b.n	8003626 <__aeabi_dsub+0x802>
 8002f54:	4b8c      	ldr	r3, [pc, #560]	@ (8003188 <__aeabi_dsub+0x364>)
 8002f56:	3501      	adds	r5, #1
 8002f58:	429d      	cmp	r5, r3
 8002f5a:	d100      	bne.n	8002f5e <__aeabi_dsub+0x13a>
 8002f5c:	e0f4      	b.n	8003148 <__aeabi_dsub+0x324>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800318c <__aeabi_dsub+0x368>)
 8002f60:	056d      	lsls	r5, r5, #21
 8002f62:	401c      	ands	r4, r3
 8002f64:	0d6d      	lsrs	r5, r5, #21
 8002f66:	0767      	lsls	r7, r4, #29
 8002f68:	08c0      	lsrs	r0, r0, #3
 8002f6a:	0264      	lsls	r4, r4, #9
 8002f6c:	4307      	orrs	r7, r0
 8002f6e:	0b24      	lsrs	r4, r4, #12
 8002f70:	e0ec      	b.n	800314c <__aeabi_dsub+0x328>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dc00      	bgt.n	8002f78 <__aeabi_dsub+0x154>
 8002f76:	e329      	b.n	80035cc <__aeabi_dsub+0x7a8>
 8002f78:	4649      	mov	r1, r9
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d000      	beq.n	8002f80 <__aeabi_dsub+0x15c>
 8002f7e:	e0d6      	b.n	800312e <__aeabi_dsub+0x30a>
 8002f80:	4659      	mov	r1, fp
 8002f82:	4311      	orrs	r1, r2
 8002f84:	d100      	bne.n	8002f88 <__aeabi_dsub+0x164>
 8002f86:	e12e      	b.n	80031e6 <__aeabi_dsub+0x3c2>
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x16c>
 8002f8e:	e1e6      	b.n	800335e <__aeabi_dsub+0x53a>
 8002f90:	42bb      	cmp	r3, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x172>
 8002f94:	e182      	b.n	800329c <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	000b      	movs	r3, r1
 8002f9a:	2938      	cmp	r1, #56	@ 0x38
 8002f9c:	dc14      	bgt.n	8002fc8 <__aeabi_dsub+0x1a4>
 8002f9e:	2b1f      	cmp	r3, #31
 8002fa0:	dd00      	ble.n	8002fa4 <__aeabi_dsub+0x180>
 8002fa2:	e23c      	b.n	800341e <__aeabi_dsub+0x5fa>
 8002fa4:	2720      	movs	r7, #32
 8002fa6:	1af9      	subs	r1, r7, r3
 8002fa8:	468c      	mov	ip, r1
 8002faa:	4659      	mov	r1, fp
 8002fac:	4667      	mov	r7, ip
 8002fae:	40b9      	lsls	r1, r7
 8002fb0:	000f      	movs	r7, r1
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	40d9      	lsrs	r1, r3
 8002fb6:	430f      	orrs	r7, r1
 8002fb8:	4661      	mov	r1, ip
 8002fba:	408a      	lsls	r2, r1
 8002fbc:	1e51      	subs	r1, r2, #1
 8002fbe:	418a      	sbcs	r2, r1
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	40d9      	lsrs	r1, r3
 8002fc4:	4317      	orrs	r7, r2
 8002fc6:	1864      	adds	r4, r4, r1
 8002fc8:	183f      	adds	r7, r7, r0
 8002fca:	4287      	cmp	r7, r0
 8002fcc:	4180      	sbcs	r0, r0
 8002fce:	4240      	negs	r0, r0
 8002fd0:	1824      	adds	r4, r4, r0
 8002fd2:	0223      	lsls	r3, r4, #8
 8002fd4:	d400      	bmi.n	8002fd8 <__aeabi_dsub+0x1b4>
 8002fd6:	e0c6      	b.n	8003166 <__aeabi_dsub+0x342>
 8002fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003188 <__aeabi_dsub+0x364>)
 8002fda:	3501      	adds	r5, #1
 8002fdc:	429d      	cmp	r5, r3
 8002fde:	d100      	bne.n	8002fe2 <__aeabi_dsub+0x1be>
 8002fe0:	e0b2      	b.n	8003148 <__aeabi_dsub+0x324>
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4b69      	ldr	r3, [pc, #420]	@ (800318c <__aeabi_dsub+0x368>)
 8002fe6:	087a      	lsrs	r2, r7, #1
 8002fe8:	401c      	ands	r4, r3
 8002fea:	4039      	ands	r1, r7
 8002fec:	430a      	orrs	r2, r1
 8002fee:	07e7      	lsls	r7, r4, #31
 8002ff0:	4317      	orrs	r7, r2
 8002ff2:	0864      	lsrs	r4, r4, #1
 8002ff4:	e79e      	b.n	8002f34 <__aeabi_dsub+0x110>
 8002ff6:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <__aeabi_dsub+0x36c>)
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	468a      	mov	sl, r1
 8002ffc:	18eb      	adds	r3, r5, r3
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d028      	beq.n	8003054 <__aeabi_dsub+0x230>
 8003002:	4566      	cmp	r6, ip
 8003004:	d02c      	beq.n	8003060 <__aeabi_dsub+0x23c>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d05b      	beq.n	80030c2 <__aeabi_dsub+0x29e>
 800300a:	2d00      	cmp	r5, #0
 800300c:	d100      	bne.n	8003010 <__aeabi_dsub+0x1ec>
 800300e:	e12c      	b.n	800326a <__aeabi_dsub+0x446>
 8003010:	465b      	mov	r3, fp
 8003012:	4666      	mov	r6, ip
 8003014:	075f      	lsls	r7, r3, #29
 8003016:	08d2      	lsrs	r2, r2, #3
 8003018:	4317      	orrs	r7, r2
 800301a:	08dd      	lsrs	r5, r3, #3
 800301c:	003b      	movs	r3, r7
 800301e:	432b      	orrs	r3, r5
 8003020:	d100      	bne.n	8003024 <__aeabi_dsub+0x200>
 8003022:	e0e2      	b.n	80031ea <__aeabi_dsub+0x3c6>
 8003024:	2480      	movs	r4, #128	@ 0x80
 8003026:	0324      	lsls	r4, r4, #12
 8003028:	432c      	orrs	r4, r5
 800302a:	0324      	lsls	r4, r4, #12
 800302c:	4d56      	ldr	r5, [pc, #344]	@ (8003188 <__aeabi_dsub+0x364>)
 800302e:	0b24      	lsrs	r4, r4, #12
 8003030:	e08c      	b.n	800314c <__aeabi_dsub+0x328>
 8003032:	4659      	mov	r1, fp
 8003034:	4311      	orrs	r1, r2
 8003036:	d100      	bne.n	800303a <__aeabi_dsub+0x216>
 8003038:	e0d5      	b.n	80031e6 <__aeabi_dsub+0x3c2>
 800303a:	1e59      	subs	r1, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d100      	bne.n	8003042 <__aeabi_dsub+0x21e>
 8003040:	e1b9      	b.n	80033b6 <__aeabi_dsub+0x592>
 8003042:	42bb      	cmp	r3, r7
 8003044:	d100      	bne.n	8003048 <__aeabi_dsub+0x224>
 8003046:	e1b1      	b.n	80033ac <__aeabi_dsub+0x588>
 8003048:	2701      	movs	r7, #1
 800304a:	000b      	movs	r3, r1
 800304c:	2938      	cmp	r1, #56	@ 0x38
 800304e:	dd00      	ble.n	8003052 <__aeabi_dsub+0x22e>
 8003050:	e740      	b.n	8002ed4 <__aeabi_dsub+0xb0>
 8003052:	e72a      	b.n	8002eaa <__aeabi_dsub+0x86>
 8003054:	4661      	mov	r1, ip
 8003056:	2701      	movs	r7, #1
 8003058:	4079      	eors	r1, r7
 800305a:	468c      	mov	ip, r1
 800305c:	4566      	cmp	r6, ip
 800305e:	d1d2      	bne.n	8003006 <__aeabi_dsub+0x1e2>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d100      	bne.n	8003066 <__aeabi_dsub+0x242>
 8003064:	e0c5      	b.n	80031f2 <__aeabi_dsub+0x3ce>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d000      	beq.n	800306c <__aeabi_dsub+0x248>
 800306a:	e155      	b.n	8003318 <__aeabi_dsub+0x4f4>
 800306c:	464b      	mov	r3, r9
 800306e:	0025      	movs	r5, r4
 8003070:	4305      	orrs	r5, r0
 8003072:	d100      	bne.n	8003076 <__aeabi_dsub+0x252>
 8003074:	e212      	b.n	800349c <__aeabi_dsub+0x678>
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	468c      	mov	ip, r1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d100      	bne.n	8003080 <__aeabi_dsub+0x25c>
 800307e:	e249      	b.n	8003514 <__aeabi_dsub+0x6f0>
 8003080:	4d41      	ldr	r5, [pc, #260]	@ (8003188 <__aeabi_dsub+0x364>)
 8003082:	42ab      	cmp	r3, r5
 8003084:	d100      	bne.n	8003088 <__aeabi_dsub+0x264>
 8003086:	e28f      	b.n	80035a8 <__aeabi_dsub+0x784>
 8003088:	2701      	movs	r7, #1
 800308a:	2938      	cmp	r1, #56	@ 0x38
 800308c:	dc11      	bgt.n	80030b2 <__aeabi_dsub+0x28e>
 800308e:	4663      	mov	r3, ip
 8003090:	2b1f      	cmp	r3, #31
 8003092:	dd00      	ble.n	8003096 <__aeabi_dsub+0x272>
 8003094:	e25b      	b.n	800354e <__aeabi_dsub+0x72a>
 8003096:	4661      	mov	r1, ip
 8003098:	2320      	movs	r3, #32
 800309a:	0027      	movs	r7, r4
 800309c:	1a5b      	subs	r3, r3, r1
 800309e:	0005      	movs	r5, r0
 80030a0:	4098      	lsls	r0, r3
 80030a2:	409f      	lsls	r7, r3
 80030a4:	40cd      	lsrs	r5, r1
 80030a6:	1e43      	subs	r3, r0, #1
 80030a8:	4198      	sbcs	r0, r3
 80030aa:	40cc      	lsrs	r4, r1
 80030ac:	432f      	orrs	r7, r5
 80030ae:	4307      	orrs	r7, r0
 80030b0:	44a3      	add	fp, r4
 80030b2:	18bf      	adds	r7, r7, r2
 80030b4:	4297      	cmp	r7, r2
 80030b6:	4192      	sbcs	r2, r2
 80030b8:	4252      	negs	r2, r2
 80030ba:	445a      	add	r2, fp
 80030bc:	0014      	movs	r4, r2
 80030be:	464d      	mov	r5, r9
 80030c0:	e787      	b.n	8002fd2 <__aeabi_dsub+0x1ae>
 80030c2:	4f34      	ldr	r7, [pc, #208]	@ (8003194 <__aeabi_dsub+0x370>)
 80030c4:	1c6b      	adds	r3, r5, #1
 80030c6:	423b      	tst	r3, r7
 80030c8:	d000      	beq.n	80030cc <__aeabi_dsub+0x2a8>
 80030ca:	e0b6      	b.n	800323a <__aeabi_dsub+0x416>
 80030cc:	4659      	mov	r1, fp
 80030ce:	0023      	movs	r3, r4
 80030d0:	4311      	orrs	r1, r2
 80030d2:	000f      	movs	r7, r1
 80030d4:	4303      	orrs	r3, r0
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	d000      	beq.n	80030dc <__aeabi_dsub+0x2b8>
 80030da:	e126      	b.n	800332a <__aeabi_dsub+0x506>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <__aeabi_dsub+0x2be>
 80030e0:	e1c0      	b.n	8003464 <__aeabi_dsub+0x640>
 80030e2:	2900      	cmp	r1, #0
 80030e4:	d100      	bne.n	80030e8 <__aeabi_dsub+0x2c4>
 80030e6:	e0a1      	b.n	800322c <__aeabi_dsub+0x408>
 80030e8:	1a83      	subs	r3, r0, r2
 80030ea:	4698      	mov	r8, r3
 80030ec:	465b      	mov	r3, fp
 80030ee:	4540      	cmp	r0, r8
 80030f0:	41ad      	sbcs	r5, r5
 80030f2:	1ae3      	subs	r3, r4, r3
 80030f4:	426d      	negs	r5, r5
 80030f6:	1b5b      	subs	r3, r3, r5
 80030f8:	2580      	movs	r5, #128	@ 0x80
 80030fa:	042d      	lsls	r5, r5, #16
 80030fc:	422b      	tst	r3, r5
 80030fe:	d100      	bne.n	8003102 <__aeabi_dsub+0x2de>
 8003100:	e14b      	b.n	800339a <__aeabi_dsub+0x576>
 8003102:	465b      	mov	r3, fp
 8003104:	1a10      	subs	r0, r2, r0
 8003106:	4282      	cmp	r2, r0
 8003108:	4192      	sbcs	r2, r2
 800310a:	1b1c      	subs	r4, r3, r4
 800310c:	0007      	movs	r7, r0
 800310e:	2601      	movs	r6, #1
 8003110:	4663      	mov	r3, ip
 8003112:	4252      	negs	r2, r2
 8003114:	1aa4      	subs	r4, r4, r2
 8003116:	4327      	orrs	r7, r4
 8003118:	401e      	ands	r6, r3
 800311a:	2f00      	cmp	r7, #0
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x2fc>
 800311e:	e142      	b.n	80033a6 <__aeabi_dsub+0x582>
 8003120:	422c      	tst	r4, r5
 8003122:	d100      	bne.n	8003126 <__aeabi_dsub+0x302>
 8003124:	e26d      	b.n	8003602 <__aeabi_dsub+0x7de>
 8003126:	4b19      	ldr	r3, [pc, #100]	@ (800318c <__aeabi_dsub+0x368>)
 8003128:	2501      	movs	r5, #1
 800312a:	401c      	ands	r4, r3
 800312c:	e71b      	b.n	8002f66 <__aeabi_dsub+0x142>
 800312e:	42bd      	cmp	r5, r7
 8003130:	d100      	bne.n	8003134 <__aeabi_dsub+0x310>
 8003132:	e13b      	b.n	80033ac <__aeabi_dsub+0x588>
 8003134:	2701      	movs	r7, #1
 8003136:	2b38      	cmp	r3, #56	@ 0x38
 8003138:	dd00      	ble.n	800313c <__aeabi_dsub+0x318>
 800313a:	e745      	b.n	8002fc8 <__aeabi_dsub+0x1a4>
 800313c:	2780      	movs	r7, #128	@ 0x80
 800313e:	4659      	mov	r1, fp
 8003140:	043f      	lsls	r7, r7, #16
 8003142:	4339      	orrs	r1, r7
 8003144:	468b      	mov	fp, r1
 8003146:	e72a      	b.n	8002f9e <__aeabi_dsub+0x17a>
 8003148:	2400      	movs	r4, #0
 800314a:	2700      	movs	r7, #0
 800314c:	052d      	lsls	r5, r5, #20
 800314e:	4325      	orrs	r5, r4
 8003150:	07f6      	lsls	r6, r6, #31
 8003152:	4335      	orrs	r5, r6
 8003154:	0038      	movs	r0, r7
 8003156:	0029      	movs	r1, r5
 8003158:	b003      	add	sp, #12
 800315a:	bcf0      	pop	{r4, r5, r6, r7}
 800315c:	46bb      	mov	fp, r7
 800315e:	46b2      	mov	sl, r6
 8003160:	46a9      	mov	r9, r5
 8003162:	46a0      	mov	r8, r4
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003166:	077b      	lsls	r3, r7, #29
 8003168:	d004      	beq.n	8003174 <__aeabi_dsub+0x350>
 800316a:	230f      	movs	r3, #15
 800316c:	403b      	ands	r3, r7
 800316e:	2b04      	cmp	r3, #4
 8003170:	d000      	beq.n	8003174 <__aeabi_dsub+0x350>
 8003172:	e6e7      	b.n	8002f44 <__aeabi_dsub+0x120>
 8003174:	002b      	movs	r3, r5
 8003176:	08f8      	lsrs	r0, r7, #3
 8003178:	4a03      	ldr	r2, [pc, #12]	@ (8003188 <__aeabi_dsub+0x364>)
 800317a:	0767      	lsls	r7, r4, #29
 800317c:	4307      	orrs	r7, r0
 800317e:	08e5      	lsrs	r5, r4, #3
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x362>
 8003184:	e74a      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003186:	e0a5      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003188:	000007ff 	.word	0x000007ff
 800318c:	ff7fffff 	.word	0xff7fffff
 8003190:	fffff801 	.word	0xfffff801
 8003194:	000007fe 	.word	0x000007fe
 8003198:	0038      	movs	r0, r7
 800319a:	f7fd f9d3 	bl	8000544 <__clzsi2>
 800319e:	0003      	movs	r3, r0
 80031a0:	3318      	adds	r3, #24
 80031a2:	2b1f      	cmp	r3, #31
 80031a4:	dc00      	bgt.n	80031a8 <__aeabi_dsub+0x384>
 80031a6:	e6a7      	b.n	8002ef8 <__aeabi_dsub+0xd4>
 80031a8:	003a      	movs	r2, r7
 80031aa:	3808      	subs	r0, #8
 80031ac:	4082      	lsls	r2, r0
 80031ae:	429d      	cmp	r5, r3
 80031b0:	dd00      	ble.n	80031b4 <__aeabi_dsub+0x390>
 80031b2:	e08a      	b.n	80032ca <__aeabi_dsub+0x4a6>
 80031b4:	1b5b      	subs	r3, r3, r5
 80031b6:	1c58      	adds	r0, r3, #1
 80031b8:	281f      	cmp	r0, #31
 80031ba:	dc00      	bgt.n	80031be <__aeabi_dsub+0x39a>
 80031bc:	e1d8      	b.n	8003570 <__aeabi_dsub+0x74c>
 80031be:	0017      	movs	r7, r2
 80031c0:	3b1f      	subs	r3, #31
 80031c2:	40df      	lsrs	r7, r3
 80031c4:	2820      	cmp	r0, #32
 80031c6:	d005      	beq.n	80031d4 <__aeabi_dsub+0x3b0>
 80031c8:	2340      	movs	r3, #64	@ 0x40
 80031ca:	1a1b      	subs	r3, r3, r0
 80031cc:	409a      	lsls	r2, r3
 80031ce:	1e53      	subs	r3, r2, #1
 80031d0:	419a      	sbcs	r2, r3
 80031d2:	4317      	orrs	r7, r2
 80031d4:	2500      	movs	r5, #0
 80031d6:	2f00      	cmp	r7, #0
 80031d8:	d100      	bne.n	80031dc <__aeabi_dsub+0x3b8>
 80031da:	e0e5      	b.n	80033a8 <__aeabi_dsub+0x584>
 80031dc:	077b      	lsls	r3, r7, #29
 80031de:	d000      	beq.n	80031e2 <__aeabi_dsub+0x3be>
 80031e0:	e6ab      	b.n	8002f3a <__aeabi_dsub+0x116>
 80031e2:	002c      	movs	r4, r5
 80031e4:	e7c6      	b.n	8003174 <__aeabi_dsub+0x350>
 80031e6:	08c0      	lsrs	r0, r0, #3
 80031e8:	e7c6      	b.n	8003178 <__aeabi_dsub+0x354>
 80031ea:	2700      	movs	r7, #0
 80031ec:	2400      	movs	r4, #0
 80031ee:	4dd1      	ldr	r5, [pc, #836]	@ (8003534 <__aeabi_dsub+0x710>)
 80031f0:	e7ac      	b.n	800314c <__aeabi_dsub+0x328>
 80031f2:	4fd1      	ldr	r7, [pc, #836]	@ (8003538 <__aeabi_dsub+0x714>)
 80031f4:	1c6b      	adds	r3, r5, #1
 80031f6:	423b      	tst	r3, r7
 80031f8:	d171      	bne.n	80032de <__aeabi_dsub+0x4ba>
 80031fa:	0023      	movs	r3, r4
 80031fc:	4303      	orrs	r3, r0
 80031fe:	2d00      	cmp	r5, #0
 8003200:	d000      	beq.n	8003204 <__aeabi_dsub+0x3e0>
 8003202:	e14e      	b.n	80034a2 <__aeabi_dsub+0x67e>
 8003204:	4657      	mov	r7, sl
 8003206:	2b00      	cmp	r3, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x3e8>
 800320a:	e1b5      	b.n	8003578 <__aeabi_dsub+0x754>
 800320c:	2f00      	cmp	r7, #0
 800320e:	d00d      	beq.n	800322c <__aeabi_dsub+0x408>
 8003210:	1883      	adds	r3, r0, r2
 8003212:	4283      	cmp	r3, r0
 8003214:	4180      	sbcs	r0, r0
 8003216:	445c      	add	r4, fp
 8003218:	4240      	negs	r0, r0
 800321a:	1824      	adds	r4, r4, r0
 800321c:	0222      	lsls	r2, r4, #8
 800321e:	d500      	bpl.n	8003222 <__aeabi_dsub+0x3fe>
 8003220:	e1c8      	b.n	80035b4 <__aeabi_dsub+0x790>
 8003222:	001f      	movs	r7, r3
 8003224:	4698      	mov	r8, r3
 8003226:	4327      	orrs	r7, r4
 8003228:	d100      	bne.n	800322c <__aeabi_dsub+0x408>
 800322a:	e0bc      	b.n	80033a6 <__aeabi_dsub+0x582>
 800322c:	4643      	mov	r3, r8
 800322e:	0767      	lsls	r7, r4, #29
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	431f      	orrs	r7, r3
 8003234:	08e5      	lsrs	r5, r4, #3
 8003236:	2300      	movs	r3, #0
 8003238:	e04c      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 800323a:	1a83      	subs	r3, r0, r2
 800323c:	4698      	mov	r8, r3
 800323e:	465b      	mov	r3, fp
 8003240:	4540      	cmp	r0, r8
 8003242:	41bf      	sbcs	r7, r7
 8003244:	1ae3      	subs	r3, r4, r3
 8003246:	427f      	negs	r7, r7
 8003248:	1bdb      	subs	r3, r3, r7
 800324a:	021f      	lsls	r7, r3, #8
 800324c:	d47c      	bmi.n	8003348 <__aeabi_dsub+0x524>
 800324e:	4647      	mov	r7, r8
 8003250:	431f      	orrs	r7, r3
 8003252:	d100      	bne.n	8003256 <__aeabi_dsub+0x432>
 8003254:	e0a6      	b.n	80033a4 <__aeabi_dsub+0x580>
 8003256:	001c      	movs	r4, r3
 8003258:	4647      	mov	r7, r8
 800325a:	e645      	b.n	8002ee8 <__aeabi_dsub+0xc4>
 800325c:	4cb7      	ldr	r4, [pc, #732]	@ (800353c <__aeabi_dsub+0x718>)
 800325e:	1aed      	subs	r5, r5, r3
 8003260:	4014      	ands	r4, r2
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d000      	beq.n	8003268 <__aeabi_dsub+0x444>
 8003266:	e780      	b.n	800316a <__aeabi_dsub+0x346>
 8003268:	e784      	b.n	8003174 <__aeabi_dsub+0x350>
 800326a:	464b      	mov	r3, r9
 800326c:	0025      	movs	r5, r4
 800326e:	4305      	orrs	r5, r0
 8003270:	d066      	beq.n	8003340 <__aeabi_dsub+0x51c>
 8003272:	1e5f      	subs	r7, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d100      	bne.n	800327a <__aeabi_dsub+0x456>
 8003278:	e0fc      	b.n	8003474 <__aeabi_dsub+0x650>
 800327a:	4dae      	ldr	r5, [pc, #696]	@ (8003534 <__aeabi_dsub+0x710>)
 800327c:	42ab      	cmp	r3, r5
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x45e>
 8003280:	e15e      	b.n	8003540 <__aeabi_dsub+0x71c>
 8003282:	4666      	mov	r6, ip
 8003284:	2f38      	cmp	r7, #56	@ 0x38
 8003286:	dc00      	bgt.n	800328a <__aeabi_dsub+0x466>
 8003288:	e0b4      	b.n	80033f4 <__aeabi_dsub+0x5d0>
 800328a:	2001      	movs	r0, #1
 800328c:	1a17      	subs	r7, r2, r0
 800328e:	42ba      	cmp	r2, r7
 8003290:	4192      	sbcs	r2, r2
 8003292:	465b      	mov	r3, fp
 8003294:	4252      	negs	r2, r2
 8003296:	464d      	mov	r5, r9
 8003298:	1a9c      	subs	r4, r3, r2
 800329a:	e620      	b.n	8002ede <__aeabi_dsub+0xba>
 800329c:	0767      	lsls	r7, r4, #29
 800329e:	08c0      	lsrs	r0, r0, #3
 80032a0:	4307      	orrs	r7, r0
 80032a2:	08e5      	lsrs	r5, r4, #3
 80032a4:	e6ba      	b.n	800301c <__aeabi_dsub+0x1f8>
 80032a6:	001f      	movs	r7, r3
 80032a8:	4659      	mov	r1, fp
 80032aa:	3f20      	subs	r7, #32
 80032ac:	40f9      	lsrs	r1, r7
 80032ae:	000f      	movs	r7, r1
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d005      	beq.n	80032c0 <__aeabi_dsub+0x49c>
 80032b4:	2140      	movs	r1, #64	@ 0x40
 80032b6:	1acb      	subs	r3, r1, r3
 80032b8:	4659      	mov	r1, fp
 80032ba:	4099      	lsls	r1, r3
 80032bc:	430a      	orrs	r2, r1
 80032be:	4692      	mov	sl, r2
 80032c0:	4653      	mov	r3, sl
 80032c2:	1e5a      	subs	r2, r3, #1
 80032c4:	4193      	sbcs	r3, r2
 80032c6:	431f      	orrs	r7, r3
 80032c8:	e604      	b.n	8002ed4 <__aeabi_dsub+0xb0>
 80032ca:	1aeb      	subs	r3, r5, r3
 80032cc:	4d9b      	ldr	r5, [pc, #620]	@ (800353c <__aeabi_dsub+0x718>)
 80032ce:	4015      	ands	r5, r2
 80032d0:	076f      	lsls	r7, r5, #29
 80032d2:	08ed      	lsrs	r5, r5, #3
 80032d4:	032c      	lsls	r4, r5, #12
 80032d6:	055d      	lsls	r5, r3, #21
 80032d8:	0b24      	lsrs	r4, r4, #12
 80032da:	0d6d      	lsrs	r5, r5, #21
 80032dc:	e736      	b.n	800314c <__aeabi_dsub+0x328>
 80032de:	4d95      	ldr	r5, [pc, #596]	@ (8003534 <__aeabi_dsub+0x710>)
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x4c2>
 80032e4:	e0d6      	b.n	8003494 <__aeabi_dsub+0x670>
 80032e6:	1882      	adds	r2, r0, r2
 80032e8:	0021      	movs	r1, r4
 80032ea:	4282      	cmp	r2, r0
 80032ec:	4180      	sbcs	r0, r0
 80032ee:	4459      	add	r1, fp
 80032f0:	4240      	negs	r0, r0
 80032f2:	1808      	adds	r0, r1, r0
 80032f4:	07c7      	lsls	r7, r0, #31
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	4317      	orrs	r7, r2
 80032fa:	0844      	lsrs	r4, r0, #1
 80032fc:	0752      	lsls	r2, r2, #29
 80032fe:	d400      	bmi.n	8003302 <__aeabi_dsub+0x4de>
 8003300:	e185      	b.n	800360e <__aeabi_dsub+0x7ea>
 8003302:	220f      	movs	r2, #15
 8003304:	001d      	movs	r5, r3
 8003306:	403a      	ands	r2, r7
 8003308:	2a04      	cmp	r2, #4
 800330a:	d000      	beq.n	800330e <__aeabi_dsub+0x4ea>
 800330c:	e61a      	b.n	8002f44 <__aeabi_dsub+0x120>
 800330e:	08ff      	lsrs	r7, r7, #3
 8003310:	0764      	lsls	r4, r4, #29
 8003312:	4327      	orrs	r7, r4
 8003314:	0905      	lsrs	r5, r0, #4
 8003316:	e7dd      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003318:	465b      	mov	r3, fp
 800331a:	08d2      	lsrs	r2, r2, #3
 800331c:	075f      	lsls	r7, r3, #29
 800331e:	4317      	orrs	r7, r2
 8003320:	08dd      	lsrs	r5, r3, #3
 8003322:	e67b      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003324:	2700      	movs	r7, #0
 8003326:	2400      	movs	r4, #0
 8003328:	e710      	b.n	800314c <__aeabi_dsub+0x328>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d000      	beq.n	8003330 <__aeabi_dsub+0x50c>
 800332e:	e0d6      	b.n	80034de <__aeabi_dsub+0x6ba>
 8003330:	2900      	cmp	r1, #0
 8003332:	d000      	beq.n	8003336 <__aeabi_dsub+0x512>
 8003334:	e12f      	b.n	8003596 <__aeabi_dsub+0x772>
 8003336:	2480      	movs	r4, #128	@ 0x80
 8003338:	2600      	movs	r6, #0
 800333a:	4d7e      	ldr	r5, [pc, #504]	@ (8003534 <__aeabi_dsub+0x710>)
 800333c:	0324      	lsls	r4, r4, #12
 800333e:	e705      	b.n	800314c <__aeabi_dsub+0x328>
 8003340:	4666      	mov	r6, ip
 8003342:	465c      	mov	r4, fp
 8003344:	08d0      	lsrs	r0, r2, #3
 8003346:	e717      	b.n	8003178 <__aeabi_dsub+0x354>
 8003348:	465b      	mov	r3, fp
 800334a:	1a17      	subs	r7, r2, r0
 800334c:	42ba      	cmp	r2, r7
 800334e:	4192      	sbcs	r2, r2
 8003350:	1b1c      	subs	r4, r3, r4
 8003352:	2601      	movs	r6, #1
 8003354:	4663      	mov	r3, ip
 8003356:	4252      	negs	r2, r2
 8003358:	1aa4      	subs	r4, r4, r2
 800335a:	401e      	ands	r6, r3
 800335c:	e5c4      	b.n	8002ee8 <__aeabi_dsub+0xc4>
 800335e:	1883      	adds	r3, r0, r2
 8003360:	4283      	cmp	r3, r0
 8003362:	4180      	sbcs	r0, r0
 8003364:	445c      	add	r4, fp
 8003366:	4240      	negs	r0, r0
 8003368:	1825      	adds	r5, r4, r0
 800336a:	022a      	lsls	r2, r5, #8
 800336c:	d400      	bmi.n	8003370 <__aeabi_dsub+0x54c>
 800336e:	e0da      	b.n	8003526 <__aeabi_dsub+0x702>
 8003370:	4a72      	ldr	r2, [pc, #456]	@ (800353c <__aeabi_dsub+0x718>)
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	4015      	ands	r5, r2
 8003376:	07ea      	lsls	r2, r5, #31
 8003378:	431a      	orrs	r2, r3
 800337a:	0869      	lsrs	r1, r5, #1
 800337c:	075b      	lsls	r3, r3, #29
 800337e:	d400      	bmi.n	8003382 <__aeabi_dsub+0x55e>
 8003380:	e14a      	b.n	8003618 <__aeabi_dsub+0x7f4>
 8003382:	230f      	movs	r3, #15
 8003384:	4013      	ands	r3, r2
 8003386:	2b04      	cmp	r3, #4
 8003388:	d100      	bne.n	800338c <__aeabi_dsub+0x568>
 800338a:	e0fc      	b.n	8003586 <__aeabi_dsub+0x762>
 800338c:	1d17      	adds	r7, r2, #4
 800338e:	4297      	cmp	r7, r2
 8003390:	41a4      	sbcs	r4, r4
 8003392:	4264      	negs	r4, r4
 8003394:	2502      	movs	r5, #2
 8003396:	1864      	adds	r4, r4, r1
 8003398:	e6ec      	b.n	8003174 <__aeabi_dsub+0x350>
 800339a:	4647      	mov	r7, r8
 800339c:	001c      	movs	r4, r3
 800339e:	431f      	orrs	r7, r3
 80033a0:	d000      	beq.n	80033a4 <__aeabi_dsub+0x580>
 80033a2:	e743      	b.n	800322c <__aeabi_dsub+0x408>
 80033a4:	2600      	movs	r6, #0
 80033a6:	2500      	movs	r5, #0
 80033a8:	2400      	movs	r4, #0
 80033aa:	e6cf      	b.n	800314c <__aeabi_dsub+0x328>
 80033ac:	08c0      	lsrs	r0, r0, #3
 80033ae:	0767      	lsls	r7, r4, #29
 80033b0:	4307      	orrs	r7, r0
 80033b2:	08e5      	lsrs	r5, r4, #3
 80033b4:	e632      	b.n	800301c <__aeabi_dsub+0x1f8>
 80033b6:	1a87      	subs	r7, r0, r2
 80033b8:	465b      	mov	r3, fp
 80033ba:	42b8      	cmp	r0, r7
 80033bc:	4180      	sbcs	r0, r0
 80033be:	1ae4      	subs	r4, r4, r3
 80033c0:	4240      	negs	r0, r0
 80033c2:	1a24      	subs	r4, r4, r0
 80033c4:	0223      	lsls	r3, r4, #8
 80033c6:	d428      	bmi.n	800341a <__aeabi_dsub+0x5f6>
 80033c8:	0763      	lsls	r3, r4, #29
 80033ca:	08ff      	lsrs	r7, r7, #3
 80033cc:	431f      	orrs	r7, r3
 80033ce:	08e5      	lsrs	r5, r4, #3
 80033d0:	2301      	movs	r3, #1
 80033d2:	e77f      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <__aeabi_dsub+0x5b6>
 80033d8:	e673      	b.n	80030c2 <__aeabi_dsub+0x29e>
 80033da:	464b      	mov	r3, r9
 80033dc:	1b5f      	subs	r7, r3, r5
 80033de:	003b      	movs	r3, r7
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	d100      	bne.n	80033e6 <__aeabi_dsub+0x5c2>
 80033e4:	e742      	b.n	800326c <__aeabi_dsub+0x448>
 80033e6:	2f38      	cmp	r7, #56	@ 0x38
 80033e8:	dd00      	ble.n	80033ec <__aeabi_dsub+0x5c8>
 80033ea:	e0ec      	b.n	80035c6 <__aeabi_dsub+0x7a2>
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	000e      	movs	r6, r1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431c      	orrs	r4, r3
 80033f4:	2f1f      	cmp	r7, #31
 80033f6:	dc25      	bgt.n	8003444 <__aeabi_dsub+0x620>
 80033f8:	2520      	movs	r5, #32
 80033fa:	0023      	movs	r3, r4
 80033fc:	1bed      	subs	r5, r5, r7
 80033fe:	0001      	movs	r1, r0
 8003400:	40a8      	lsls	r0, r5
 8003402:	40ab      	lsls	r3, r5
 8003404:	40f9      	lsrs	r1, r7
 8003406:	1e45      	subs	r5, r0, #1
 8003408:	41a8      	sbcs	r0, r5
 800340a:	430b      	orrs	r3, r1
 800340c:	40fc      	lsrs	r4, r7
 800340e:	4318      	orrs	r0, r3
 8003410:	465b      	mov	r3, fp
 8003412:	1b1b      	subs	r3, r3, r4
 8003414:	469b      	mov	fp, r3
 8003416:	e739      	b.n	800328c <__aeabi_dsub+0x468>
 8003418:	4666      	mov	r6, ip
 800341a:	2501      	movs	r5, #1
 800341c:	e562      	b.n	8002ee4 <__aeabi_dsub+0xc0>
 800341e:	001f      	movs	r7, r3
 8003420:	4659      	mov	r1, fp
 8003422:	3f20      	subs	r7, #32
 8003424:	40f9      	lsrs	r1, r7
 8003426:	468c      	mov	ip, r1
 8003428:	2b20      	cmp	r3, #32
 800342a:	d005      	beq.n	8003438 <__aeabi_dsub+0x614>
 800342c:	2740      	movs	r7, #64	@ 0x40
 800342e:	4659      	mov	r1, fp
 8003430:	1afb      	subs	r3, r7, r3
 8003432:	4099      	lsls	r1, r3
 8003434:	430a      	orrs	r2, r1
 8003436:	4692      	mov	sl, r2
 8003438:	4657      	mov	r7, sl
 800343a:	1e7b      	subs	r3, r7, #1
 800343c:	419f      	sbcs	r7, r3
 800343e:	4663      	mov	r3, ip
 8003440:	431f      	orrs	r7, r3
 8003442:	e5c1      	b.n	8002fc8 <__aeabi_dsub+0x1a4>
 8003444:	003b      	movs	r3, r7
 8003446:	0025      	movs	r5, r4
 8003448:	3b20      	subs	r3, #32
 800344a:	40dd      	lsrs	r5, r3
 800344c:	2f20      	cmp	r7, #32
 800344e:	d004      	beq.n	800345a <__aeabi_dsub+0x636>
 8003450:	2340      	movs	r3, #64	@ 0x40
 8003452:	1bdb      	subs	r3, r3, r7
 8003454:	409c      	lsls	r4, r3
 8003456:	4320      	orrs	r0, r4
 8003458:	4680      	mov	r8, r0
 800345a:	4640      	mov	r0, r8
 800345c:	1e43      	subs	r3, r0, #1
 800345e:	4198      	sbcs	r0, r3
 8003460:	4328      	orrs	r0, r5
 8003462:	e713      	b.n	800328c <__aeabi_dsub+0x468>
 8003464:	2900      	cmp	r1, #0
 8003466:	d09d      	beq.n	80033a4 <__aeabi_dsub+0x580>
 8003468:	2601      	movs	r6, #1
 800346a:	4663      	mov	r3, ip
 800346c:	465c      	mov	r4, fp
 800346e:	4690      	mov	r8, r2
 8003470:	401e      	ands	r6, r3
 8003472:	e6db      	b.n	800322c <__aeabi_dsub+0x408>
 8003474:	1a17      	subs	r7, r2, r0
 8003476:	465b      	mov	r3, fp
 8003478:	42ba      	cmp	r2, r7
 800347a:	4192      	sbcs	r2, r2
 800347c:	1b1c      	subs	r4, r3, r4
 800347e:	4252      	negs	r2, r2
 8003480:	1aa4      	subs	r4, r4, r2
 8003482:	0223      	lsls	r3, r4, #8
 8003484:	d4c8      	bmi.n	8003418 <__aeabi_dsub+0x5f4>
 8003486:	0763      	lsls	r3, r4, #29
 8003488:	08ff      	lsrs	r7, r7, #3
 800348a:	431f      	orrs	r7, r3
 800348c:	4666      	mov	r6, ip
 800348e:	2301      	movs	r3, #1
 8003490:	08e5      	lsrs	r5, r4, #3
 8003492:	e71f      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003494:	001d      	movs	r5, r3
 8003496:	2400      	movs	r4, #0
 8003498:	2700      	movs	r7, #0
 800349a:	e657      	b.n	800314c <__aeabi_dsub+0x328>
 800349c:	465c      	mov	r4, fp
 800349e:	08d0      	lsrs	r0, r2, #3
 80034a0:	e66a      	b.n	8003178 <__aeabi_dsub+0x354>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <__aeabi_dsub+0x684>
 80034a6:	e737      	b.n	8003318 <__aeabi_dsub+0x4f4>
 80034a8:	4653      	mov	r3, sl
 80034aa:	08c0      	lsrs	r0, r0, #3
 80034ac:	0767      	lsls	r7, r4, #29
 80034ae:	4307      	orrs	r7, r0
 80034b0:	08e5      	lsrs	r5, r4, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d100      	bne.n	80034b8 <__aeabi_dsub+0x694>
 80034b6:	e5b1      	b.n	800301c <__aeabi_dsub+0x1f8>
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	031b      	lsls	r3, r3, #12
 80034bc:	421d      	tst	r5, r3
 80034be:	d008      	beq.n	80034d2 <__aeabi_dsub+0x6ae>
 80034c0:	4659      	mov	r1, fp
 80034c2:	08c8      	lsrs	r0, r1, #3
 80034c4:	4218      	tst	r0, r3
 80034c6:	d104      	bne.n	80034d2 <__aeabi_dsub+0x6ae>
 80034c8:	08d2      	lsrs	r2, r2, #3
 80034ca:	0749      	lsls	r1, r1, #29
 80034cc:	430a      	orrs	r2, r1
 80034ce:	0017      	movs	r7, r2
 80034d0:	0005      	movs	r5, r0
 80034d2:	0f7b      	lsrs	r3, r7, #29
 80034d4:	00ff      	lsls	r7, r7, #3
 80034d6:	08ff      	lsrs	r7, r7, #3
 80034d8:	075b      	lsls	r3, r3, #29
 80034da:	431f      	orrs	r7, r3
 80034dc:	e59e      	b.n	800301c <__aeabi_dsub+0x1f8>
 80034de:	08c0      	lsrs	r0, r0, #3
 80034e0:	0763      	lsls	r3, r4, #29
 80034e2:	4318      	orrs	r0, r3
 80034e4:	08e5      	lsrs	r5, r4, #3
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d053      	beq.n	8003592 <__aeabi_dsub+0x76e>
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	031b      	lsls	r3, r3, #12
 80034ee:	421d      	tst	r5, r3
 80034f0:	d00a      	beq.n	8003508 <__aeabi_dsub+0x6e4>
 80034f2:	4659      	mov	r1, fp
 80034f4:	08cc      	lsrs	r4, r1, #3
 80034f6:	421c      	tst	r4, r3
 80034f8:	d106      	bne.n	8003508 <__aeabi_dsub+0x6e4>
 80034fa:	2601      	movs	r6, #1
 80034fc:	4663      	mov	r3, ip
 80034fe:	0025      	movs	r5, r4
 8003500:	08d0      	lsrs	r0, r2, #3
 8003502:	0749      	lsls	r1, r1, #29
 8003504:	4308      	orrs	r0, r1
 8003506:	401e      	ands	r6, r3
 8003508:	0f47      	lsrs	r7, r0, #29
 800350a:	00c0      	lsls	r0, r0, #3
 800350c:	08c0      	lsrs	r0, r0, #3
 800350e:	077f      	lsls	r7, r7, #29
 8003510:	4307      	orrs	r7, r0
 8003512:	e583      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003514:	1883      	adds	r3, r0, r2
 8003516:	4293      	cmp	r3, r2
 8003518:	4192      	sbcs	r2, r2
 800351a:	445c      	add	r4, fp
 800351c:	4252      	negs	r2, r2
 800351e:	18a5      	adds	r5, r4, r2
 8003520:	022a      	lsls	r2, r5, #8
 8003522:	d500      	bpl.n	8003526 <__aeabi_dsub+0x702>
 8003524:	e724      	b.n	8003370 <__aeabi_dsub+0x54c>
 8003526:	076f      	lsls	r7, r5, #29
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	431f      	orrs	r7, r3
 800352c:	08ed      	lsrs	r5, r5, #3
 800352e:	2301      	movs	r3, #1
 8003530:	e6d0      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	000007ff 	.word	0x000007ff
 8003538:	000007fe 	.word	0x000007fe
 800353c:	ff7fffff 	.word	0xff7fffff
 8003540:	465b      	mov	r3, fp
 8003542:	08d2      	lsrs	r2, r2, #3
 8003544:	075f      	lsls	r7, r3, #29
 8003546:	4666      	mov	r6, ip
 8003548:	4317      	orrs	r7, r2
 800354a:	08dd      	lsrs	r5, r3, #3
 800354c:	e566      	b.n	800301c <__aeabi_dsub+0x1f8>
 800354e:	0025      	movs	r5, r4
 8003550:	3b20      	subs	r3, #32
 8003552:	40dd      	lsrs	r5, r3
 8003554:	4663      	mov	r3, ip
 8003556:	2b20      	cmp	r3, #32
 8003558:	d005      	beq.n	8003566 <__aeabi_dsub+0x742>
 800355a:	2340      	movs	r3, #64	@ 0x40
 800355c:	4661      	mov	r1, ip
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	409c      	lsls	r4, r3
 8003562:	4320      	orrs	r0, r4
 8003564:	4680      	mov	r8, r0
 8003566:	4647      	mov	r7, r8
 8003568:	1e7b      	subs	r3, r7, #1
 800356a:	419f      	sbcs	r7, r3
 800356c:	432f      	orrs	r7, r5
 800356e:	e5a0      	b.n	80030b2 <__aeabi_dsub+0x28e>
 8003570:	2120      	movs	r1, #32
 8003572:	2700      	movs	r7, #0
 8003574:	1a09      	subs	r1, r1, r0
 8003576:	e4d2      	b.n	8002f1e <__aeabi_dsub+0xfa>
 8003578:	2f00      	cmp	r7, #0
 800357a:	d100      	bne.n	800357e <__aeabi_dsub+0x75a>
 800357c:	e713      	b.n	80033a6 <__aeabi_dsub+0x582>
 800357e:	465c      	mov	r4, fp
 8003580:	0017      	movs	r7, r2
 8003582:	2500      	movs	r5, #0
 8003584:	e5f6      	b.n	8003174 <__aeabi_dsub+0x350>
 8003586:	08d7      	lsrs	r7, r2, #3
 8003588:	0749      	lsls	r1, r1, #29
 800358a:	2302      	movs	r3, #2
 800358c:	430f      	orrs	r7, r1
 800358e:	092d      	lsrs	r5, r5, #4
 8003590:	e6a0      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003592:	0007      	movs	r7, r0
 8003594:	e542      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003596:	465b      	mov	r3, fp
 8003598:	2601      	movs	r6, #1
 800359a:	075f      	lsls	r7, r3, #29
 800359c:	08dd      	lsrs	r5, r3, #3
 800359e:	4663      	mov	r3, ip
 80035a0:	08d2      	lsrs	r2, r2, #3
 80035a2:	4317      	orrs	r7, r2
 80035a4:	401e      	ands	r6, r3
 80035a6:	e539      	b.n	800301c <__aeabi_dsub+0x1f8>
 80035a8:	465b      	mov	r3, fp
 80035aa:	08d2      	lsrs	r2, r2, #3
 80035ac:	075f      	lsls	r7, r3, #29
 80035ae:	4317      	orrs	r7, r2
 80035b0:	08dd      	lsrs	r5, r3, #3
 80035b2:	e533      	b.n	800301c <__aeabi_dsub+0x1f8>
 80035b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <__aeabi_dsub+0x80c>)
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	4022      	ands	r2, r4
 80035ba:	0757      	lsls	r7, r2, #29
 80035bc:	0252      	lsls	r2, r2, #9
 80035be:	2501      	movs	r5, #1
 80035c0:	431f      	orrs	r7, r3
 80035c2:	0b14      	lsrs	r4, r2, #12
 80035c4:	e5c2      	b.n	800314c <__aeabi_dsub+0x328>
 80035c6:	000e      	movs	r6, r1
 80035c8:	2001      	movs	r0, #1
 80035ca:	e65f      	b.n	800328c <__aeabi_dsub+0x468>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <__aeabi_dsub+0x7c8>
 80035d0:	464b      	mov	r3, r9
 80035d2:	1b5b      	subs	r3, r3, r5
 80035d4:	469c      	mov	ip, r3
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	d100      	bne.n	80035dc <__aeabi_dsub+0x7b8>
 80035da:	e548      	b.n	800306e <__aeabi_dsub+0x24a>
 80035dc:	2701      	movs	r7, #1
 80035de:	2b38      	cmp	r3, #56	@ 0x38
 80035e0:	dd00      	ble.n	80035e4 <__aeabi_dsub+0x7c0>
 80035e2:	e566      	b.n	80030b2 <__aeabi_dsub+0x28e>
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431c      	orrs	r4, r3
 80035ea:	e550      	b.n	800308e <__aeabi_dsub+0x26a>
 80035ec:	1c6b      	adds	r3, r5, #1
 80035ee:	4d11      	ldr	r5, [pc, #68]	@ (8003634 <__aeabi_dsub+0x810>)
 80035f0:	422b      	tst	r3, r5
 80035f2:	d000      	beq.n	80035f6 <__aeabi_dsub+0x7d2>
 80035f4:	e673      	b.n	80032de <__aeabi_dsub+0x4ba>
 80035f6:	4659      	mov	r1, fp
 80035f8:	0023      	movs	r3, r4
 80035fa:	4311      	orrs	r1, r2
 80035fc:	468a      	mov	sl, r1
 80035fe:	4303      	orrs	r3, r0
 8003600:	e600      	b.n	8003204 <__aeabi_dsub+0x3e0>
 8003602:	0767      	lsls	r7, r4, #29
 8003604:	08c0      	lsrs	r0, r0, #3
 8003606:	2300      	movs	r3, #0
 8003608:	4307      	orrs	r7, r0
 800360a:	08e5      	lsrs	r5, r4, #3
 800360c:	e662      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 800360e:	0764      	lsls	r4, r4, #29
 8003610:	08ff      	lsrs	r7, r7, #3
 8003612:	4327      	orrs	r7, r4
 8003614:	0905      	lsrs	r5, r0, #4
 8003616:	e65d      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003618:	08d2      	lsrs	r2, r2, #3
 800361a:	0749      	lsls	r1, r1, #29
 800361c:	4311      	orrs	r1, r2
 800361e:	000f      	movs	r7, r1
 8003620:	2302      	movs	r3, #2
 8003622:	092d      	lsrs	r5, r5, #4
 8003624:	e656      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003626:	0007      	movs	r7, r0
 8003628:	e5a4      	b.n	8003174 <__aeabi_dsub+0x350>
 800362a:	0038      	movs	r0, r7
 800362c:	e48f      	b.n	8002f4e <__aeabi_dsub+0x12a>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	ff7fffff 	.word	0xff7fffff
 8003634:	000007fe 	.word	0x000007fe

08003638 <__aeabi_dcmpun>:
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	46c6      	mov	lr, r8
 800363c:	031e      	lsls	r6, r3, #12
 800363e:	0b36      	lsrs	r6, r6, #12
 8003640:	46b0      	mov	r8, r6
 8003642:	4e0d      	ldr	r6, [pc, #52]	@ (8003678 <__aeabi_dcmpun+0x40>)
 8003644:	030c      	lsls	r4, r1, #12
 8003646:	004d      	lsls	r5, r1, #1
 8003648:	005f      	lsls	r7, r3, #1
 800364a:	b500      	push	{lr}
 800364c:	0b24      	lsrs	r4, r4, #12
 800364e:	0d6d      	lsrs	r5, r5, #21
 8003650:	0d7f      	lsrs	r7, r7, #21
 8003652:	42b5      	cmp	r5, r6
 8003654:	d00b      	beq.n	800366e <__aeabi_dcmpun+0x36>
 8003656:	4908      	ldr	r1, [pc, #32]	@ (8003678 <__aeabi_dcmpun+0x40>)
 8003658:	2000      	movs	r0, #0
 800365a:	428f      	cmp	r7, r1
 800365c:	d104      	bne.n	8003668 <__aeabi_dcmpun+0x30>
 800365e:	4646      	mov	r6, r8
 8003660:	4316      	orrs	r6, r2
 8003662:	0030      	movs	r0, r6
 8003664:	1e43      	subs	r3, r0, #1
 8003666:	4198      	sbcs	r0, r3
 8003668:	bc80      	pop	{r7}
 800366a:	46b8      	mov	r8, r7
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366e:	4304      	orrs	r4, r0
 8003670:	2001      	movs	r0, #1
 8003672:	2c00      	cmp	r4, #0
 8003674:	d1f8      	bne.n	8003668 <__aeabi_dcmpun+0x30>
 8003676:	e7ee      	b.n	8003656 <__aeabi_dcmpun+0x1e>
 8003678:	000007ff 	.word	0x000007ff

0800367c <__aeabi_d2iz>:
 800367c:	000b      	movs	r3, r1
 800367e:	0002      	movs	r2, r0
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4d16      	ldr	r5, [pc, #88]	@ (80036dc <__aeabi_d2iz+0x60>)
 8003684:	030c      	lsls	r4, r1, #12
 8003686:	b082      	sub	sp, #8
 8003688:	0049      	lsls	r1, r1, #1
 800368a:	2000      	movs	r0, #0
 800368c:	9200      	str	r2, [sp, #0]
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	0b24      	lsrs	r4, r4, #12
 8003692:	0d49      	lsrs	r1, r1, #21
 8003694:	0fde      	lsrs	r6, r3, #31
 8003696:	42a9      	cmp	r1, r5
 8003698:	dd04      	ble.n	80036a4 <__aeabi_d2iz+0x28>
 800369a:	4811      	ldr	r0, [pc, #68]	@ (80036e0 <__aeabi_d2iz+0x64>)
 800369c:	4281      	cmp	r1, r0
 800369e:	dd03      	ble.n	80036a8 <__aeabi_d2iz+0x2c>
 80036a0:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <__aeabi_d2iz+0x68>)
 80036a2:	18f0      	adds	r0, r6, r3
 80036a4:	b002      	add	sp, #8
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	2080      	movs	r0, #128	@ 0x80
 80036aa:	0340      	lsls	r0, r0, #13
 80036ac:	4320      	orrs	r0, r4
 80036ae:	4c0e      	ldr	r4, [pc, #56]	@ (80036e8 <__aeabi_d2iz+0x6c>)
 80036b0:	1a64      	subs	r4, r4, r1
 80036b2:	2c1f      	cmp	r4, #31
 80036b4:	dd08      	ble.n	80036c8 <__aeabi_d2iz+0x4c>
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <__aeabi_d2iz+0x70>)
 80036b8:	1a5b      	subs	r3, r3, r1
 80036ba:	40d8      	lsrs	r0, r3
 80036bc:	0003      	movs	r3, r0
 80036be:	4258      	negs	r0, r3
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	d1ef      	bne.n	80036a4 <__aeabi_d2iz+0x28>
 80036c4:	0018      	movs	r0, r3
 80036c6:	e7ed      	b.n	80036a4 <__aeabi_d2iz+0x28>
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <__aeabi_d2iz+0x74>)
 80036ca:	9a00      	ldr	r2, [sp, #0]
 80036cc:	469c      	mov	ip, r3
 80036ce:	0003      	movs	r3, r0
 80036d0:	4461      	add	r1, ip
 80036d2:	408b      	lsls	r3, r1
 80036d4:	40e2      	lsrs	r2, r4
 80036d6:	4313      	orrs	r3, r2
 80036d8:	e7f1      	b.n	80036be <__aeabi_d2iz+0x42>
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	000003fe 	.word	0x000003fe
 80036e0:	0000041d 	.word	0x0000041d
 80036e4:	7fffffff 	.word	0x7fffffff
 80036e8:	00000433 	.word	0x00000433
 80036ec:	00000413 	.word	0x00000413
 80036f0:	fffffbed 	.word	0xfffffbed

080036f4 <__aeabi_i2d>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d016      	beq.n	8003728 <__aeabi_i2d+0x34>
 80036fa:	17c3      	asrs	r3, r0, #31
 80036fc:	18c5      	adds	r5, r0, r3
 80036fe:	405d      	eors	r5, r3
 8003700:	0fc4      	lsrs	r4, r0, #31
 8003702:	0028      	movs	r0, r5
 8003704:	f7fc ff1e 	bl	8000544 <__clzsi2>
 8003708:	4b10      	ldr	r3, [pc, #64]	@ (800374c <__aeabi_i2d+0x58>)
 800370a:	1a1b      	subs	r3, r3, r0
 800370c:	055b      	lsls	r3, r3, #21
 800370e:	0d5b      	lsrs	r3, r3, #21
 8003710:	280a      	cmp	r0, #10
 8003712:	dc14      	bgt.n	800373e <__aeabi_i2d+0x4a>
 8003714:	0002      	movs	r2, r0
 8003716:	002e      	movs	r6, r5
 8003718:	3215      	adds	r2, #21
 800371a:	4096      	lsls	r6, r2
 800371c:	220b      	movs	r2, #11
 800371e:	1a12      	subs	r2, r2, r0
 8003720:	40d5      	lsrs	r5, r2
 8003722:	032d      	lsls	r5, r5, #12
 8003724:	0b2d      	lsrs	r5, r5, #12
 8003726:	e003      	b.n	8003730 <__aeabi_i2d+0x3c>
 8003728:	2400      	movs	r4, #0
 800372a:	2300      	movs	r3, #0
 800372c:	2500      	movs	r5, #0
 800372e:	2600      	movs	r6, #0
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	432b      	orrs	r3, r5
 8003734:	07e4      	lsls	r4, r4, #31
 8003736:	4323      	orrs	r3, r4
 8003738:	0030      	movs	r0, r6
 800373a:	0019      	movs	r1, r3
 800373c:	bd70      	pop	{r4, r5, r6, pc}
 800373e:	380b      	subs	r0, #11
 8003740:	4085      	lsls	r5, r0
 8003742:	032d      	lsls	r5, r5, #12
 8003744:	2600      	movs	r6, #0
 8003746:	0b2d      	lsrs	r5, r5, #12
 8003748:	e7f2      	b.n	8003730 <__aeabi_i2d+0x3c>
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	0000041e 	.word	0x0000041e

08003750 <__aeabi_ui2d>:
 8003750:	b510      	push	{r4, lr}
 8003752:	1e04      	subs	r4, r0, #0
 8003754:	d010      	beq.n	8003778 <__aeabi_ui2d+0x28>
 8003756:	f7fc fef5 	bl	8000544 <__clzsi2>
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <__aeabi_ui2d+0x44>)
 800375c:	1a1b      	subs	r3, r3, r0
 800375e:	055b      	lsls	r3, r3, #21
 8003760:	0d5b      	lsrs	r3, r3, #21
 8003762:	280a      	cmp	r0, #10
 8003764:	dc0f      	bgt.n	8003786 <__aeabi_ui2d+0x36>
 8003766:	220b      	movs	r2, #11
 8003768:	0021      	movs	r1, r4
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	40d1      	lsrs	r1, r2
 800376e:	3015      	adds	r0, #21
 8003770:	030a      	lsls	r2, r1, #12
 8003772:	4084      	lsls	r4, r0
 8003774:	0b12      	lsrs	r2, r2, #12
 8003776:	e001      	b.n	800377c <__aeabi_ui2d+0x2c>
 8003778:	2300      	movs	r3, #0
 800377a:	2200      	movs	r2, #0
 800377c:	051b      	lsls	r3, r3, #20
 800377e:	4313      	orrs	r3, r2
 8003780:	0020      	movs	r0, r4
 8003782:	0019      	movs	r1, r3
 8003784:	bd10      	pop	{r4, pc}
 8003786:	0022      	movs	r2, r4
 8003788:	380b      	subs	r0, #11
 800378a:	4082      	lsls	r2, r0
 800378c:	0312      	lsls	r2, r2, #12
 800378e:	2400      	movs	r4, #0
 8003790:	0b12      	lsrs	r2, r2, #12
 8003792:	e7f3      	b.n	800377c <__aeabi_ui2d+0x2c>
 8003794:	0000041e 	.word	0x0000041e

08003798 <__aeabi_f2d>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	0242      	lsls	r2, r0, #9
 800379c:	0043      	lsls	r3, r0, #1
 800379e:	0fc4      	lsrs	r4, r0, #31
 80037a0:	20fe      	movs	r0, #254	@ 0xfe
 80037a2:	0e1b      	lsrs	r3, r3, #24
 80037a4:	1c59      	adds	r1, r3, #1
 80037a6:	0a55      	lsrs	r5, r2, #9
 80037a8:	4208      	tst	r0, r1
 80037aa:	d00c      	beq.n	80037c6 <__aeabi_f2d+0x2e>
 80037ac:	21e0      	movs	r1, #224	@ 0xe0
 80037ae:	0089      	lsls	r1, r1, #2
 80037b0:	468c      	mov	ip, r1
 80037b2:	076d      	lsls	r5, r5, #29
 80037b4:	0b12      	lsrs	r2, r2, #12
 80037b6:	4463      	add	r3, ip
 80037b8:	051b      	lsls	r3, r3, #20
 80037ba:	4313      	orrs	r3, r2
 80037bc:	07e4      	lsls	r4, r4, #31
 80037be:	4323      	orrs	r3, r4
 80037c0:	0028      	movs	r0, r5
 80037c2:	0019      	movs	r1, r3
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <__aeabi_f2d+0x5c>
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	d01b      	beq.n	8003806 <__aeabi_f2d+0x6e>
 80037ce:	0028      	movs	r0, r5
 80037d0:	f7fc feb8 	bl	8000544 <__clzsi2>
 80037d4:	280a      	cmp	r0, #10
 80037d6:	dc1c      	bgt.n	8003812 <__aeabi_f2d+0x7a>
 80037d8:	230b      	movs	r3, #11
 80037da:	002a      	movs	r2, r5
 80037dc:	1a1b      	subs	r3, r3, r0
 80037de:	40da      	lsrs	r2, r3
 80037e0:	0003      	movs	r3, r0
 80037e2:	3315      	adds	r3, #21
 80037e4:	409d      	lsls	r5, r3
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <__aeabi_f2d+0x88>)
 80037e8:	0312      	lsls	r2, r2, #12
 80037ea:	1a1b      	subs	r3, r3, r0
 80037ec:	055b      	lsls	r3, r3, #21
 80037ee:	0b12      	lsrs	r2, r2, #12
 80037f0:	0d5b      	lsrs	r3, r3, #21
 80037f2:	e7e1      	b.n	80037b8 <__aeabi_f2d+0x20>
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	d009      	beq.n	800380c <__aeabi_f2d+0x74>
 80037f8:	0b13      	lsrs	r3, r2, #12
 80037fa:	2280      	movs	r2, #128	@ 0x80
 80037fc:	0312      	lsls	r2, r2, #12
 80037fe:	431a      	orrs	r2, r3
 8003800:	076d      	lsls	r5, r5, #29
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <__aeabi_f2d+0x8c>)
 8003804:	e7d8      	b.n	80037b8 <__aeabi_f2d+0x20>
 8003806:	2300      	movs	r3, #0
 8003808:	2200      	movs	r2, #0
 800380a:	e7d5      	b.n	80037b8 <__aeabi_f2d+0x20>
 800380c:	2200      	movs	r2, #0
 800380e:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <__aeabi_f2d+0x8c>)
 8003810:	e7d2      	b.n	80037b8 <__aeabi_f2d+0x20>
 8003812:	0003      	movs	r3, r0
 8003814:	002a      	movs	r2, r5
 8003816:	3b0b      	subs	r3, #11
 8003818:	409a      	lsls	r2, r3
 800381a:	2500      	movs	r5, #0
 800381c:	e7e3      	b.n	80037e6 <__aeabi_f2d+0x4e>
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	00000389 	.word	0x00000389
 8003824:	000007ff 	.word	0x000007ff

08003828 <__aeabi_d2f>:
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382a:	004b      	lsls	r3, r1, #1
 800382c:	030f      	lsls	r7, r1, #12
 800382e:	0d5b      	lsrs	r3, r3, #21
 8003830:	4c3a      	ldr	r4, [pc, #232]	@ (800391c <__aeabi_d2f+0xf4>)
 8003832:	0f45      	lsrs	r5, r0, #29
 8003834:	b083      	sub	sp, #12
 8003836:	0a7f      	lsrs	r7, r7, #9
 8003838:	1c5e      	adds	r6, r3, #1
 800383a:	432f      	orrs	r7, r5
 800383c:	9000      	str	r0, [sp, #0]
 800383e:	9101      	str	r1, [sp, #4]
 8003840:	0fca      	lsrs	r2, r1, #31
 8003842:	00c5      	lsls	r5, r0, #3
 8003844:	4226      	tst	r6, r4
 8003846:	d00b      	beq.n	8003860 <__aeabi_d2f+0x38>
 8003848:	4935      	ldr	r1, [pc, #212]	@ (8003920 <__aeabi_d2f+0xf8>)
 800384a:	185c      	adds	r4, r3, r1
 800384c:	2cfe      	cmp	r4, #254	@ 0xfe
 800384e:	dd13      	ble.n	8003878 <__aeabi_d2f+0x50>
 8003850:	20ff      	movs	r0, #255	@ 0xff
 8003852:	2300      	movs	r3, #0
 8003854:	05c0      	lsls	r0, r0, #23
 8003856:	4318      	orrs	r0, r3
 8003858:	07d2      	lsls	r2, r2, #31
 800385a:	4310      	orrs	r0, r2
 800385c:	b003      	add	sp, #12
 800385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003860:	433d      	orrs	r5, r7
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <__aeabi_d2f+0x42>
 8003866:	2000      	movs	r0, #0
 8003868:	e7f4      	b.n	8003854 <__aeabi_d2f+0x2c>
 800386a:	2d00      	cmp	r5, #0
 800386c:	d0f0      	beq.n	8003850 <__aeabi_d2f+0x28>
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	03db      	lsls	r3, r3, #15
 8003872:	20ff      	movs	r0, #255	@ 0xff
 8003874:	433b      	orrs	r3, r7
 8003876:	e7ed      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003878:	2c00      	cmp	r4, #0
 800387a:	dd0c      	ble.n	8003896 <__aeabi_d2f+0x6e>
 800387c:	9b00      	ldr	r3, [sp, #0]
 800387e:	00ff      	lsls	r7, r7, #3
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	4183      	sbcs	r3, r0
 8003886:	0f69      	lsrs	r1, r5, #29
 8003888:	433b      	orrs	r3, r7
 800388a:	430b      	orrs	r3, r1
 800388c:	0759      	lsls	r1, r3, #29
 800388e:	d127      	bne.n	80038e0 <__aeabi_d2f+0xb8>
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	b2e0      	uxtb	r0, r4
 8003894:	e7de      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003896:	0021      	movs	r1, r4
 8003898:	3117      	adds	r1, #23
 800389a:	db31      	blt.n	8003900 <__aeabi_d2f+0xd8>
 800389c:	2180      	movs	r1, #128	@ 0x80
 800389e:	201e      	movs	r0, #30
 80038a0:	0409      	lsls	r1, r1, #16
 80038a2:	4339      	orrs	r1, r7
 80038a4:	1b00      	subs	r0, r0, r4
 80038a6:	281f      	cmp	r0, #31
 80038a8:	dd2d      	ble.n	8003906 <__aeabi_d2f+0xde>
 80038aa:	2602      	movs	r6, #2
 80038ac:	4276      	negs	r6, r6
 80038ae:	1b34      	subs	r4, r6, r4
 80038b0:	000e      	movs	r6, r1
 80038b2:	40e6      	lsrs	r6, r4
 80038b4:	0034      	movs	r4, r6
 80038b6:	2820      	cmp	r0, #32
 80038b8:	d004      	beq.n	80038c4 <__aeabi_d2f+0x9c>
 80038ba:	481a      	ldr	r0, [pc, #104]	@ (8003924 <__aeabi_d2f+0xfc>)
 80038bc:	4684      	mov	ip, r0
 80038be:	4463      	add	r3, ip
 80038c0:	4099      	lsls	r1, r3
 80038c2:	430d      	orrs	r5, r1
 80038c4:	002b      	movs	r3, r5
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	418b      	sbcs	r3, r1
 80038ca:	4323      	orrs	r3, r4
 80038cc:	0759      	lsls	r1, r3, #29
 80038ce:	d003      	beq.n	80038d8 <__aeabi_d2f+0xb0>
 80038d0:	210f      	movs	r1, #15
 80038d2:	4019      	ands	r1, r3
 80038d4:	2904      	cmp	r1, #4
 80038d6:	d10b      	bne.n	80038f0 <__aeabi_d2f+0xc8>
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	2000      	movs	r0, #0
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	e7b9      	b.n	8003854 <__aeabi_d2f+0x2c>
 80038e0:	210f      	movs	r1, #15
 80038e2:	4019      	ands	r1, r3
 80038e4:	2904      	cmp	r1, #4
 80038e6:	d104      	bne.n	80038f2 <__aeabi_d2f+0xca>
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	0a5b      	lsrs	r3, r3, #9
 80038ec:	b2e0      	uxtb	r0, r4
 80038ee:	e7b1      	b.n	8003854 <__aeabi_d2f+0x2c>
 80038f0:	2400      	movs	r4, #0
 80038f2:	3304      	adds	r3, #4
 80038f4:	0159      	lsls	r1, r3, #5
 80038f6:	d5f7      	bpl.n	80038e8 <__aeabi_d2f+0xc0>
 80038f8:	3401      	adds	r4, #1
 80038fa:	2300      	movs	r3, #0
 80038fc:	b2e0      	uxtb	r0, r4
 80038fe:	e7a9      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003900:	2000      	movs	r0, #0
 8003902:	2300      	movs	r3, #0
 8003904:	e7a6      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003906:	4c08      	ldr	r4, [pc, #32]	@ (8003928 <__aeabi_d2f+0x100>)
 8003908:	191c      	adds	r4, r3, r4
 800390a:	002b      	movs	r3, r5
 800390c:	40a5      	lsls	r5, r4
 800390e:	40c3      	lsrs	r3, r0
 8003910:	40a1      	lsls	r1, r4
 8003912:	1e68      	subs	r0, r5, #1
 8003914:	4185      	sbcs	r5, r0
 8003916:	4329      	orrs	r1, r5
 8003918:	430b      	orrs	r3, r1
 800391a:	e7d7      	b.n	80038cc <__aeabi_d2f+0xa4>
 800391c:	000007fe 	.word	0x000007fe
 8003920:	fffffc80 	.word	0xfffffc80
 8003924:	fffffca2 	.word	0xfffffca2
 8003928:	fffffc82 	.word	0xfffffc82

0800392c <__clzdi2>:
 800392c:	b510      	push	{r4, lr}
 800392e:	2900      	cmp	r1, #0
 8003930:	d103      	bne.n	800393a <__clzdi2+0xe>
 8003932:	f7fc fe07 	bl	8000544 <__clzsi2>
 8003936:	3020      	adds	r0, #32
 8003938:	e002      	b.n	8003940 <__clzdi2+0x14>
 800393a:	0008      	movs	r0, r1
 800393c:	f7fc fe02 	bl	8000544 <__clzsi2>
 8003940:	bd10      	pop	{r4, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)

08003944 <LCD_Display_Dose_Number>:
    ones      = number % 10;
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
}

void LCD_Display_Dose_Number(uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b095      	sub	sp, #84	@ 0x54
 8003948:	9001      	str	r0, [sp, #4]
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	000f      	movs	r7, r1
	uint32_t Dose_data_tho[4] = {0};
 800394e:	2210      	movs	r2, #16
 8003950:	2100      	movs	r1, #0
 8003952:	a804      	add	r0, sp, #16
	uint32_t Dose_data_hun[4] = {0};
 8003954:	ac08      	add	r4, sp, #32
{
 8003956:	9303      	str	r3, [sp, #12]
	uint32_t Dose_data_ten[4] = {0};
 8003958:	ad0c      	add	r5, sp, #48	@ 0x30
	uint32_t Dose_data_tho[4] = {0};
 800395a:	f016 fefb 	bl	801a754 <memset>
	uint32_t Dose_data_hun[4] = {0};
 800395e:	2210      	movs	r2, #16
 8003960:	2100      	movs	r1, #0
 8003962:	0020      	movs	r0, r4
 8003964:	f016 fef6 	bl	801a754 <memset>
	uint32_t Dose_data_one[4] = {0};
 8003968:	ae10      	add	r6, sp, #64	@ 0x40
	uint32_t Dose_data_ten[4] = {0};
 800396a:	2210      	movs	r2, #16
 800396c:	2100      	movs	r1, #0
 800396e:	0028      	movs	r0, r5
 8003970:	f016 fef0 	bl	801a754 <memset>
	uint32_t Dose_data_one[4] = {0};
 8003974:	2210      	movs	r2, #16
 8003976:	2100      	movs	r1, #0
 8003978:	0030      	movs	r0, r6
 800397a:	f016 feeb 	bl	801a754 <memset>

    switch (thousands)
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	1e58      	subs	r0, r3, #1
 8003982:	2808      	cmp	r0, #8
 8003984:	d850      	bhi.n	8003a28 <LCD_Display_Dose_Number+0xe4>
 8003986:	f7fc fbd1 	bl	800012c <__gnu_thumb1_case_uqi>
 800398a:	1305      	.short	0x1305
 800398c:	3029261e 	.word	0x3029261e
 8003990:	413a      	.short	0x413a
 8003992:	48          	.byte	0x48
 8003993:	00          	.byte	0x00
        	Dose_data_tho[3] = 0x0000000;
            break;

        case 1:
        	Dose_data_tho[0] = 0x0000000;
        	Dose_data_tho[1] = 0x1000000;
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[3] = 0x1000000;
            break;

        case 4:
        	Dose_data_tho[0] = 0x0000000;
        	Dose_data_tho[1] = 0x3000000;
 8003998:	9305      	str	r3, [sp, #20]
            break;

        case 7:
        	Dose_data_tho[0] = 0x1000000;
        	Dose_data_tho[1] = 0x3000000;
        	Dose_data_tho[2] = 0x1000000;
 800399a:	9306      	str	r3, [sp, #24]
        	Dose_data_tho[1] = 0x3000000;
        	Dose_data_tho[2] = 0x3000000;
        	Dose_data_tho[3] = 0x1000000;
            break;
    }
    switch (hundreds)
 800399c:	2f09      	cmp	r7, #9
 800399e:	d85c      	bhi.n	8003a5a <LCD_Display_Dose_Number+0x116>
 80039a0:	0038      	movs	r0, r7
 80039a2:	f7fc fbc3 	bl	800012c <__gnu_thumb1_case_uqi>
 80039a6:	564e      	.short	0x564e
 80039a8:	7a777065 	.word	0x7a777065
 80039ac:	99928b81 	.word	0x99928b81
        	Dose_data_tho[0] = 0x1000000;
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	045b      	lsls	r3, r3, #17
 80039b4:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x1000000;
 80039b6:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x2000000;
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	049b      	lsls	r3, r3, #18
 80039bc:	9306      	str	r3, [sp, #24]
        	Dose_data_tho[3] = 0x3000000;
 80039be:	23c0      	movs	r3, #192	@ 0xc0
 80039c0:	049b      	lsls	r3, r3, #18
        	Dose_data_tho[3] = 0x3000000;
 80039c2:	9307      	str	r3, [sp, #28]
            break;
 80039c4:	e7ea      	b.n	800399c <LCD_Display_Dose_Number+0x58>
        	Dose_data_tho[0] = 0x1000000;
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	045b      	lsls	r3, r3, #17
 80039ca:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x1000000;
 80039cc:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x3000000;
 80039ce:	22c0      	movs	r2, #192	@ 0xc0
 80039d0:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[2] = 0x3000000;
 80039d2:	9206      	str	r2, [sp, #24]
        	Dose_data_tho[3] = 0x1000000;
 80039d4:	e7f5      	b.n	80039c2 <LCD_Display_Dose_Number+0x7e>
        	Dose_data_tho[1] = 0x3000000;
 80039d6:	23c0      	movs	r3, #192	@ 0xc0
 80039d8:	049b      	lsls	r3, r3, #18
 80039da:	e7dd      	b.n	8003998 <LCD_Display_Dose_Number+0x54>
        	Dose_data_tho[0] = 0x1000000;
 80039dc:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x2000000;
 80039de:	2280      	movs	r2, #128	@ 0x80
        	Dose_data_tho[0] = 0x1000000;
 80039e0:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x2000000;
 80039e2:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 80039e4:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x2000000;
 80039e6:	9205      	str	r2, [sp, #20]
 80039e8:	e7f1      	b.n	80039ce <LCD_Display_Dose_Number+0x8a>
        	Dose_data_tho[0] = 0x1000000;
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	045b      	lsls	r3, r3, #17
 80039ee:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x2000000;
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	049b      	lsls	r3, r3, #18
 80039f4:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x3000000;
 80039f6:	23c0      	movs	r3, #192	@ 0xc0
 80039f8:	049b      	lsls	r3, r3, #18
        	Dose_data_tho[2] = 0x3000000;
 80039fa:	9306      	str	r3, [sp, #24]
 80039fc:	e7e1      	b.n	80039c2 <LCD_Display_Dose_Number+0x7e>
        	Dose_data_tho[0] = 0x1000000;
 80039fe:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x3000000;
 8003a00:	22c0      	movs	r2, #192	@ 0xc0
        	Dose_data_tho[0] = 0x1000000;
 8003a02:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x3000000;
 8003a04:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 8003a06:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a08:	9205      	str	r2, [sp, #20]
 8003a0a:	e7c6      	b.n	800399a <LCD_Display_Dose_Number+0x56>
        	Dose_data_tho[0] = 0x1000000;
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	045b      	lsls	r3, r3, #17
 8003a10:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a12:	23c0      	movs	r3, #192	@ 0xc0
 8003a14:	049b      	lsls	r3, r3, #18
 8003a16:	9305      	str	r3, [sp, #20]
 8003a18:	e7ef      	b.n	80039fa <LCD_Display_Dose_Number+0xb6>
        	Dose_data_tho[0] = 0x1000000;
 8003a1a:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x3000000;
 8003a1c:	22c0      	movs	r2, #192	@ 0xc0
        	Dose_data_tho[0] = 0x1000000;
 8003a1e:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x3000000;
 8003a20:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 8003a22:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a24:	9205      	str	r2, [sp, #20]
 8003a26:	e7d4      	b.n	80039d2 <LCD_Display_Dose_Number+0x8e>
    switch (hundreds)
 8003a28:	2f09      	cmp	r7, #9
 8003a2a:	d816      	bhi.n	8003a5a <LCD_Display_Dose_Number+0x116>
 8003a2c:	0038      	movs	r0, r7
 8003a2e:	f7fc fb7d 	bl	800012c <__gnu_thumb1_case_uqi>
 8003a32:	1005      	.short	0x1005
 8003a34:	34312a1f 	.word	0x34312a1f
 8003a38:	534c453b 	.word	0x534c453b
    {
    	case 0:
    		if(thousands != 0)
 8003a3c:	9b01      	ldr	r3, [sp, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <LCD_Display_Dose_Number+0x116>
			{
    			Dose_data_hun[0] = 0x0004000;
 8003a42:	2280      	movs	r2, #128	@ 0x80
    			Dose_data_hun[1] = 0x000C000;
 8003a44:	23c0      	movs	r3, #192	@ 0xc0
    			Dose_data_hun[0] = 0x0004000;
 8003a46:	01d2      	lsls	r2, r2, #7
    			Dose_data_hun[1] = 0x000C000;
 8003a48:	021b      	lsls	r3, r3, #8
    			Dose_data_hun[0] = 0x0004000;
 8003a4a:	9208      	str	r2, [sp, #32]
    			Dose_data_hun[1] = 0x000C000;
 8003a4c:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Dose_data_hun[0] = 0x0004000;
			Dose_data_hun[1] = 0x000C000;
			Dose_data_hun[2] = 0x000C000;
 8003a4e:	60a2      	str	r2, [r4, #8]
 8003a50:	e017      	b.n	8003a82 <LCD_Display_Dose_Number+0x13e>
    		Dose_data_hun[1] = 0x0004000;
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003a56:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003a58:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x0004000;
			break;
    }
    switch (tens)
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d84e      	bhi.n	8003afe <LCD_Display_Dose_Number+0x1ba>
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7fc fb63 	bl	800012c <__gnu_thumb1_case_uqi>
 8003a66:	4840      	.short	0x4840
 8003a68:	6c696257 	.word	0x6c696257
 8003a6c:	8b847d73 	.word	0x8b847d73
			Dose_data_hun[0] = 0x0004000;
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	01db      	lsls	r3, r3, #7
 8003a74:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0004000;
 8003a76:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x0008000;
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x000C000;
 8003a7e:	23c0      	movs	r3, #192	@ 0xc0
 8003a80:	021b      	lsls	r3, r3, #8
			Dose_data_hun[3] = 0x0004000;
 8003a82:	60e3      	str	r3, [r4, #12]
			break;
 8003a84:	e7e9      	b.n	8003a5a <LCD_Display_Dose_Number+0x116>
			Dose_data_hun[0] = 0x0004000;
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	01db      	lsls	r3, r3, #7
 8003a8a:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0004000;
 8003a8c:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003a8e:	22c0      	movs	r2, #192	@ 0xc0
 8003a90:	0212      	lsls	r2, r2, #8
 8003a92:	e7dc      	b.n	8003a4e <LCD_Display_Dose_Number+0x10a>
			Dose_data_hun[1] = 0x000C000;
 8003a94:	23c0      	movs	r3, #192	@ 0xc0
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	e7dd      	b.n	8003a56 <LCD_Display_Dose_Number+0x112>
			Dose_data_hun[0] = 0x0004000;
 8003a9a:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x0008000;
 8003a9c:	2280      	movs	r2, #128	@ 0x80
			Dose_data_hun[0] = 0x0004000;
 8003a9e:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x0008000;
 8003aa0:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003aa2:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0008000;
 8003aa4:	6062      	str	r2, [r4, #4]
 8003aa6:	e7f2      	b.n	8003a8e <LCD_Display_Dose_Number+0x14a>
			Dose_data_hun[0] = 0x0004000;
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	01db      	lsls	r3, r3, #7
 8003aac:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0008000;
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003ab4:	23c0      	movs	r3, #192	@ 0xc0
 8003ab6:	021b      	lsls	r3, r3, #8
			Dose_data_hun[2] = 0x000C000;
 8003ab8:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x000C000;
 8003aba:	e7e2      	b.n	8003a82 <LCD_Display_Dose_Number+0x13e>
			Dose_data_hun[0] = 0x0004000;
 8003abc:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x000C000;
 8003abe:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_hun[0] = 0x0004000;
 8003ac0:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003ac2:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003ac4:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ac6:	6062      	str	r2, [r4, #4]
			Dose_data_hun[2] = 0x0004000;
 8003ac8:	e7c6      	b.n	8003a58 <LCD_Display_Dose_Number+0x114>
			Dose_data_hun[0] = 0x0004000;
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ad0:	23c0      	movs	r3, #192	@ 0xc0
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	e7ef      	b.n	8003ab8 <LCD_Display_Dose_Number+0x174>
			Dose_data_hun[0] = 0x0004000;
 8003ad8:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x000C000;
 8003ada:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_hun[0] = 0x0004000;
 8003adc:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003ade:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003ae0:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ae2:	6062      	str	r2, [r4, #4]
 8003ae4:	e7b3      	b.n	8003a4e <LCD_Display_Dose_Number+0x10a>
    {
    	case 0:
    		Dose_data_ten[0] = 0x0001000;
 8003ae6:	2280      	movs	r2, #128	@ 0x80
    		Dose_data_ten[1] = 0x0003000;
 8003ae8:	23c0      	movs	r3, #192	@ 0xc0
    		Dose_data_ten[0] = 0x0001000;
 8003aea:	0152      	lsls	r2, r2, #5
    		Dose_data_ten[1] = 0x0003000;
 8003aec:	019b      	lsls	r3, r3, #6
    		Dose_data_ten[0] = 0x0001000;
 8003aee:	920c      	str	r2, [sp, #48]	@ 0x30
    		Dose_data_ten[1] = 0x0003000;
 8003af0:	606b      	str	r3, [r5, #4]
			break;

		case 9:
			Dose_data_ten[0] = 0x0001000;
			Dose_data_ten[1] = 0x0003000;
			Dose_data_ten[2] = 0x0003000;
 8003af2:	60aa      	str	r2, [r5, #8]
 8003af4:	e017      	b.n	8003b26 <LCD_Display_Dose_Number+0x1e2>
    		Dose_data_ten[1] = 0x0001000;
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003afa:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0001000;
 8003afc:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0001000;
			break;
    }
    switch (ones)
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	2b09      	cmp	r3, #9
 8003b02:	d84b      	bhi.n	8003b9c <LCD_Display_Dose_Number+0x258>
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fc fb11 	bl	800012c <__gnu_thumb1_case_uqi>
 8003b0a:	4640      	.short	0x4640
 8003b0c:	68666159 	.word	0x68666159
 8003b10:	7f7a746d 	.word	0x7f7a746d
			Dose_data_ten[0] = 0x0001000;
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	015b      	lsls	r3, r3, #5
 8003b18:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0001000;
 8003b1a:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0002000;
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0003000;
 8003b22:	23c0      	movs	r3, #192	@ 0xc0
 8003b24:	019b      	lsls	r3, r3, #6
			Dose_data_ten[3] = 0x0001000;
 8003b26:	60eb      	str	r3, [r5, #12]
			break;
 8003b28:	e7e9      	b.n	8003afe <LCD_Display_Dose_Number+0x1ba>
			Dose_data_ten[0] = 0x0001000;
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	015b      	lsls	r3, r3, #5
 8003b2e:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0001000;
 8003b30:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0003000;
 8003b32:	22c0      	movs	r2, #192	@ 0xc0
 8003b34:	0192      	lsls	r2, r2, #6
 8003b36:	e7dc      	b.n	8003af2 <LCD_Display_Dose_Number+0x1ae>
			Dose_data_ten[1] = 0x0003000;
 8003b38:	23c0      	movs	r3, #192	@ 0xc0
 8003b3a:	019b      	lsls	r3, r3, #6
 8003b3c:	e7dd      	b.n	8003afa <LCD_Display_Dose_Number+0x1b6>
			Dose_data_ten[0] = 0x0001000;
 8003b3e:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0002000;
 8003b40:	2280      	movs	r2, #128	@ 0x80
			Dose_data_ten[0] = 0x0001000;
 8003b42:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0002000;
 8003b44:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b46:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0002000;
 8003b48:	606a      	str	r2, [r5, #4]
 8003b4a:	e7f2      	b.n	8003b32 <LCD_Display_Dose_Number+0x1ee>
			Dose_data_ten[0] = 0x0001000;
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0002000;
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0003000;
 8003b58:	23c0      	movs	r3, #192	@ 0xc0
 8003b5a:	019b      	lsls	r3, r3, #6
			Dose_data_ten[2] = 0x0003000;
 8003b5c:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0003000;
 8003b5e:	e7e2      	b.n	8003b26 <LCD_Display_Dose_Number+0x1e2>
			Dose_data_ten[0] = 0x0001000;
 8003b60:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0003000;
 8003b62:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_ten[0] = 0x0001000;
 8003b64:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003b66:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b68:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b6a:	606a      	str	r2, [r5, #4]
 8003b6c:	e7c6      	b.n	8003afc <LCD_Display_Dose_Number+0x1b8>
			Dose_data_ten[0] = 0x0001000;
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	015b      	lsls	r3, r3, #5
 8003b72:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b74:	23c0      	movs	r3, #192	@ 0xc0
 8003b76:	019b      	lsls	r3, r3, #6
 8003b78:	606b      	str	r3, [r5, #4]
 8003b7a:	e7ef      	b.n	8003b5c <LCD_Display_Dose_Number+0x218>
			Dose_data_ten[0] = 0x0001000;
 8003b7c:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0003000;
 8003b7e:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_ten[0] = 0x0001000;
 8003b80:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003b82:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b84:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b86:	606a      	str	r2, [r5, #4]
 8003b88:	e7b3      	b.n	8003af2 <LCD_Display_Dose_Number+0x1ae>
    {
    	case 0:
        	Dose_data_one[0] = 0x0000040;
 8003b8a:	2240      	movs	r2, #64	@ 0x40
        	Dose_data_one[1] = 0x0000060;
 8003b8c:	2360      	movs	r3, #96	@ 0x60
        	Dose_data_one[0] = 0x0000040;
 8003b8e:	9210      	str	r2, [sp, #64]	@ 0x40
        	Dose_data_one[1] = 0x0000060;
 8003b90:	6073      	str	r3, [r6, #4]
			break;

		case 9:
			Dose_data_one[0] = 0x0000040;
			Dose_data_one[1] = 0x0000060;
			Dose_data_one[2] = 0x0000060;
 8003b92:	60b2      	str	r2, [r6, #8]
 8003b94:	e018      	b.n	8003bc8 <LCD_Display_Dose_Number+0x284>
    		Dose_data_one[1] = 0x0000040;
 8003b96:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003b98:	9311      	str	r3, [sp, #68]	@ 0x44
			Dose_data_one[2] = 0x0000060;
 8003b9a:	9312      	str	r3, [sp, #72]	@ 0x48
{
 8003b9c:	2300      	movs	r3, #0
			Dose_data_one[3] = 0x0000040;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Dose_data_tho[i] | Dose_data_hun[i] | Dose_data_ten[i] | Dose_data_one[i];
 8003b9e:	aa04      	add	r2, sp, #16
 8003ba0:	58e1      	ldr	r1, [r4, r3]
 8003ba2:	58d2      	ldr	r2, [r2, r3]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	58e9      	ldr	r1, [r5, r3]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	58f1      	ldr	r1, [r6, r3]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003bb0:	50ca      	str	r2, [r1, r3]
    for(int i = 0; i<4; i++)
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d1f2      	bne.n	8003b9e <LCD_Display_Dose_Number+0x25a>
    }
}
 8003bb8:	b015      	add	sp, #84	@ 0x54
 8003bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Dose_data_one[0] = 0x0000040;
 8003bbc:	2340      	movs	r3, #64	@ 0x40
 8003bbe:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000040;
 8003bc0:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000020;
 8003bc2:	3b20      	subs	r3, #32
 8003bc4:	60b3      	str	r3, [r6, #8]
			Dose_data_one[3] = 0x0000060;
 8003bc6:	3340      	adds	r3, #64	@ 0x40
			Dose_data_one[3] = 0x0000040;
 8003bc8:	60f3      	str	r3, [r6, #12]
    for(int i = 0; i<4; i++)
 8003bca:	e7e7      	b.n	8003b9c <LCD_Display_Dose_Number+0x258>
			Dose_data_one[0] = 0x0000040;
 8003bcc:	2340      	movs	r3, #64	@ 0x40
 8003bce:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000040;
 8003bd0:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003bd2:	2260      	movs	r2, #96	@ 0x60
 8003bd4:	e7dd      	b.n	8003b92 <LCD_Display_Dose_Number+0x24e>
			Dose_data_one[1] = 0x0000060;
 8003bd6:	2360      	movs	r3, #96	@ 0x60
 8003bd8:	e7de      	b.n	8003b98 <LCD_Display_Dose_Number+0x254>
			Dose_data_one[0] = 0x0000040;
 8003bda:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003bdc:	2220      	movs	r2, #32
			Dose_data_one[0] = 0x0000040;
 8003bde:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003be0:	6072      	str	r2, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003be2:	e7f6      	b.n	8003bd2 <LCD_Display_Dose_Number+0x28e>
			Dose_data_one[0] = 0x0000040;
 8003be4:	2340      	movs	r3, #64	@ 0x40
 8003be6:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003be8:	3b20      	subs	r3, #32
 8003bea:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003bec:	3340      	adds	r3, #64	@ 0x40
			Dose_data_one[2] = 0x0000060;
 8003bee:	60b3      	str	r3, [r6, #8]
			Dose_data_one[3] = 0x0000060;
 8003bf0:	e7ea      	b.n	8003bc8 <LCD_Display_Dose_Number+0x284>
			Dose_data_one[0] = 0x0000040;
 8003bf2:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003bf4:	2260      	movs	r2, #96	@ 0x60
			Dose_data_one[0] = 0x0000040;
 8003bf6:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003bf8:	6072      	str	r2, [r6, #4]
			Dose_data_one[2] = 0x0000040;
 8003bfa:	60b3      	str	r3, [r6, #8]
    for(int i = 0; i<4; i++)
 8003bfc:	e7ce      	b.n	8003b9c <LCD_Display_Dose_Number+0x258>
			Dose_data_one[0] = 0x0000040;
 8003bfe:	2340      	movs	r3, #64	@ 0x40
 8003c00:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c02:	3320      	adds	r3, #32
 8003c04:	6073      	str	r3, [r6, #4]
 8003c06:	e7f2      	b.n	8003bee <LCD_Display_Dose_Number+0x2aa>
			Dose_data_one[0] = 0x0000040;
 8003c08:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c0a:	2260      	movs	r2, #96	@ 0x60
			Dose_data_one[0] = 0x0000040;
 8003c0c:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c0e:	6072      	str	r2, [r6, #4]
 8003c10:	e7bf      	b.n	8003b92 <LCD_Display_Dose_Number+0x24e>

08003c12 <LCD_DigitNumber_Dose_Calculate>:
{
 8003c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c14:	000f      	movs	r7, r1
    number %= 1000;
 8003c16:	21fa      	movs	r1, #250	@ 0xfa
{
 8003c18:	b085      	sub	sp, #20
    number %= 1000;
 8003c1a:	0089      	lsls	r1, r1, #2
{
 8003c1c:	0004      	movs	r4, r0
    number %= 1000;
 8003c1e:	f7fc fb29 	bl	8000274 <__aeabi_uidivmod>
 8003c22:	b28d      	uxth	r5, r1
    number %= 100;
 8003c24:	0028      	movs	r0, r5
 8003c26:	2164      	movs	r1, #100	@ 0x64
 8003c28:	f7fc fb24 	bl	8000274 <__aeabi_uidivmod>
 8003c2c:	b28e      	uxth	r6, r1
    ones      = number % 10;
 8003c2e:	0030      	movs	r0, r6
 8003c30:	210a      	movs	r1, #10
 8003c32:	f7fc fb1f 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 8003c36:	0030      	movs	r0, r6
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c38:	b2cb      	uxtb	r3, r1
    tens      = number / 10;
 8003c3a:	210a      	movs	r1, #10
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c3c:	9303      	str	r3, [sp, #12]
    tens      = number / 10;
 8003c3e:	f7fc fa93 	bl	8000168 <__udivsi3>
    hundreds  = number / 100;
 8003c42:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c44:	b2c6      	uxtb	r6, r0
    hundreds  = number / 100;
 8003c46:	0028      	movs	r0, r5
 8003c48:	f7fc fa8e 	bl	8000168 <__udivsi3>
    thousands = number / 1000;
 8003c4c:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c4e:	b2c5      	uxtb	r5, r0
    thousands = number / 1000;
 8003c50:	0089      	lsls	r1, r1, #2
 8003c52:	0020      	movs	r0, r4
 8003c54:	f7fc fa88 	bl	8000168 <__udivsi3>
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c58:	0032      	movs	r2, r6
 8003c5a:	0029      	movs	r1, r5
 8003c5c:	9b03      	ldr	r3, [sp, #12]
 8003c5e:	b2c0      	uxtb	r0, r0
 8003c60:	9700      	str	r7, [sp, #0]
 8003c62:	f7ff fe6f 	bl	8003944 <LCD_Display_Dose_Number>
}
 8003c66:	b005      	add	sp, #20
 8003c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c6c <LCD_Display_Dose>:
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	0015      	movs	r5, r2
 8003c70:	000c      	movs	r4, r1
    dose = dose / 10.0;
 8003c72:	f7ff fd6d 	bl	8003750 <__aeabi_ui2d>
 8003c76:	2200      	movs	r2, #0
 8003c78:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <LCD_Display_Dose+0xe4>)
 8003c7a:	f7fe f9b3 	bl	8001fe4 <__aeabi_ddiv>
 8003c7e:	f7fc fcb7 	bl	80005f0 <__aeabi_d2uiz>
    if (Packet_dose_unit == 0x00) // uSv/h, mSv/h unit
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	d13d      	bne.n	8003d02 <LCD_Display_Dose+0x96>
        if (dose > 9999)
 8003c86:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <LCD_Display_Dose+0xe8>)
 8003c88:	4298      	cmp	r0, r3
 8003c8a:	d912      	bls.n	8003cb2 <LCD_Display_Dose+0x46>
            float mSv_dose = dose / 10000.0f;
 8003c8c:	f7fd fd9e 	bl	80017cc <__aeabi_ui2f>
 8003c90:	4931      	ldr	r1, [pc, #196]	@ (8003d58 <LCD_Display_Dose+0xec>)
 8003c92:	f7fc ff89 	bl	8000ba8 <__aeabi_fdiv>
            dose_int = (int32_t)(mSv_dose * 10.0f);  // mSv * 10
 8003c96:	4931      	ldr	r1, [pc, #196]	@ (8003d5c <LCD_Display_Dose+0xf0>)
 8003c98:	f7fd f954 	bl	8000f44 <__aeabi_fmul>
 8003c9c:	f7fd fd26 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003ca0:	0021      	movs	r1, r4
 8003ca2:	b280      	uxth	r0, r0
 8003ca4:	f7ff ffb5 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[0] |= 0x0000008;  // mSv/h 표시
 8003ca8:	2308      	movs	r3, #8
 8003caa:	6822      	ldr	r2, [r4, #0]
            data[0] |= 0x0800000;  // mR/h 표시
 8003cac:	4313      	orrs	r3, r2
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	e008      	b.n	8003cc4 <LCD_Display_Dose+0x58>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	b280      	uxth	r0, r0
 8003cb6:	f7ff ffac 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[2] |= 0x0800000;  // uSv/h 표시
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	68a2      	ldr	r2, [r4, #8]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60a3      	str	r3, [r4, #8]
    data[3] = data[3] | 0x0800000;
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	68e2      	ldr	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cc8:	4d25      	ldr	r5, [pc, #148]	@ (8003d60 <LCD_Display_Dose+0xf4>)
    data[3] = data[3] | 0x0800000;
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cce:	0028      	movs	r0, r5
    data[3] = data[3] | 0x0800000;
 8003cd0:	60e3      	str	r3, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cd8:	f00b fe7c 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8003cdc:	0028      	movs	r0, r5
 8003cde:	6863      	ldr	r3, [r4, #4]
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4a20      	ldr	r2, [pc, #128]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003ce4:	f00b fe76 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8003ce8:	0028      	movs	r0, r5
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	2104      	movs	r1, #4
 8003cee:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cf0:	f00b fe70 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	2106      	movs	r1, #6
 8003cf8:	68e3      	ldr	r3, [r4, #12]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cfc:	f00b fe6a 	bl	800f9d4 <HAL_LCD_Write>
}
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
        float mR_dose = dose * 100.0f;
 8003d02:	f7fd fd63 	bl	80017cc <__aeabi_ui2f>
 8003d06:	4918      	ldr	r1, [pc, #96]	@ (8003d68 <LCD_Display_Dose+0xfc>)
 8003d08:	f7fd f91c 	bl	8000f44 <__aeabi_fmul>
        if (mR_dose > 99999.0f)
 8003d0c:	4917      	ldr	r1, [pc, #92]	@ (8003d6c <LCD_Display_Dose+0x100>)
        float mR_dose = dose * 100.0f;
 8003d0e:	1c05      	adds	r5, r0, #0
        if (mR_dose > 99999.0f)
 8003d10:	f7fc fc04 	bl	800051c <__aeabi_fcmpgt>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d00f      	beq.n	8003d38 <LCD_Display_Dose+0xcc>
            float R_dose = mR_dose / 10000.0f;
 8003d18:	490f      	ldr	r1, [pc, #60]	@ (8003d58 <LCD_Display_Dose+0xec>)
 8003d1a:	1c28      	adds	r0, r5, #0
 8003d1c:	f7fc ff44 	bl	8000ba8 <__aeabi_fdiv>
            dose_int = (int32_t)(R_dose);  // R * 10
 8003d20:	f7fd fce4 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003d24:	0021      	movs	r1, r4
 8003d26:	b280      	uxth	r0, r0
 8003d28:	f7ff ff73 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[1] |= 0x0800000;  // R/h 표시
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	6862      	ldr	r2, [r4, #4]
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	4313      	orrs	r3, r2
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	e7c5      	b.n	8003cc4 <LCD_Display_Dose+0x58>
            dose_int = (int32_t)(mR_dose);  // 반올림한 mR 값
 8003d38:	1c28      	adds	r0, r5, #0
 8003d3a:	f7fd fcd7 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003d3e:	0021      	movs	r1, r4
 8003d40:	b280      	uxth	r0, r0
 8003d42:	f7ff ff66 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[0] |= 0x0800000;  // mR/h 표시
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	e7ae      	b.n	8003cac <LCD_Display_Dose+0x40>
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	40240000 	.word	0x40240000
 8003d54:	0000270f 	.word	0x0000270f
 8003d58:	461c4000 	.word	0x461c4000
 8003d5c:	41200000 	.word	0x41200000
 8003d60:	20000a80 	.word	0x20000a80
 8003d64:	f7fffffe 	.word	0xf7fffffe
 8003d68:	42c80000 	.word	0x42c80000
 8003d6c:	47c34f80 	.word	0x47c34f80

08003d70 <LCD_Display_Temp_Number>:
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
	}
}

void LCD_Display_Temp_Number(uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d72:	b095      	sub	sp, #84	@ 0x54
 8003d74:	9001      	str	r0, [sp, #4]
 8003d76:	9202      	str	r2, [sp, #8]
 8003d78:	000f      	movs	r7, r1
	uint32_t Temp_data_tho[4] = {0};
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	a804      	add	r0, sp, #16
	uint32_t Temp_data_hun[4] = {0};
 8003d80:	ac08      	add	r4, sp, #32
{
 8003d82:	9303      	str	r3, [sp, #12]
	uint32_t Temp_data_ten[4] = {0};
 8003d84:	ad0c      	add	r5, sp, #48	@ 0x30
	uint32_t Temp_data_tho[4] = {0};
 8003d86:	f016 fce5 	bl	801a754 <memset>
	uint32_t Temp_data_hun[4] = {0};
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	0020      	movs	r0, r4
 8003d90:	f016 fce0 	bl	801a754 <memset>
	uint32_t Temp_data_one[4] = {0};
 8003d94:	ae10      	add	r6, sp, #64	@ 0x40
	uint32_t Temp_data_ten[4] = {0};
 8003d96:	2210      	movs	r2, #16
 8003d98:	2100      	movs	r1, #0
 8003d9a:	0028      	movs	r0, r5
 8003d9c:	f016 fcda 	bl	801a754 <memset>
	uint32_t Temp_data_one[4] = {0};
 8003da0:	2210      	movs	r2, #16
 8003da2:	2100      	movs	r1, #0
 8003da4:	0030      	movs	r0, r6
 8003da6:	f016 fcd5 	bl	801a754 <memset>

	switch (thousands)
 8003daa:	9b01      	ldr	r3, [sp, #4]
 8003dac:	1e58      	subs	r0, r3, #1
 8003dae:	2808      	cmp	r0, #8
 8003db0:	d84c      	bhi.n	8003e4c <LCD_Display_Temp_Number+0xdc>
 8003db2:	f7fc f9bb 	bl	800012c <__gnu_thumb1_case_uqi>
 8003db6:	1305      	.short	0x1305
 8003db8:	2e27251d 	.word	0x2e27251d
 8003dbc:	3e37      	.short	0x3e37
 8003dbe:	44          	.byte	0x44
 8003dbf:	00          	.byte	0x00
	    		Temp_data_tho[3] = 0x0000000;
	    		break;

	    	case 1:
	    		Temp_data_tho[0] = 0x0000000;
	    		Temp_data_tho[1] = 0x0000100;
 8003dc0:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[3] = 0x0000100;
				break;

			case 4:
				Temp_data_tho[0] = 0x0000000;
				Temp_data_tho[1] = 0x0000180;
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	9305      	str	r3, [sp, #20]
				break;

			case 7:
				Temp_data_tho[0] = 0x0000100;
				Temp_data_tho[1] = 0x0000180;
				Temp_data_tho[2] = 0x0000100;
 8003dc6:	9306      	str	r3, [sp, #24]
				Temp_data_tho[2] = 0x0000180;
				Temp_data_tho[3] = 0x0000100;
				break;
	    }

    switch (hundreds)
 8003dc8:	2f09      	cmp	r7, #9
 8003dca:	d857      	bhi.n	8003e7c <LCD_Display_Temp_Number+0x10c>
 8003dcc:	0038      	movs	r0, r7
 8003dce:	f7fc f9ad 	bl	800012c <__gnu_thumb1_case_uqi>
 8003dd2:	514a      	.short	0x514a
 8003dd4:	72706a60 	.word	0x72706a60
 8003dd8:	8e888279 	.word	0x8e888279
				Temp_data_tho[0] = 0x0000100;
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000100;
 8003de2:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000080;
 8003de4:	3b80      	subs	r3, #128	@ 0x80
 8003de6:	9306      	str	r3, [sp, #24]
				Temp_data_tho[3] = 0x0000180;
 8003de8:	3301      	adds	r3, #1
 8003dea:	33ff      	adds	r3, #255	@ 0xff
				Temp_data_tho[3] = 0x0000180;
 8003dec:	9307      	str	r3, [sp, #28]
				break;
 8003dee:	e7eb      	b.n	8003dc8 <LCD_Display_Temp_Number+0x58>
				Temp_data_tho[0] = 0x0000100;
 8003df0:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[2] = 0x0000180;
 8003df2:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000100;
 8003df8:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000180;
 8003dfa:	0052      	lsls	r2, r2, #1
				Temp_data_tho[2] = 0x0000180;
 8003dfc:	9206      	str	r2, [sp, #24]
				Temp_data_tho[3] = 0x0000100;
 8003dfe:	e7f5      	b.n	8003dec <LCD_Display_Temp_Number+0x7c>
				Temp_data_tho[1] = 0x0000180;
 8003e00:	23c0      	movs	r3, #192	@ 0xc0
 8003e02:	e7de      	b.n	8003dc2 <LCD_Display_Temp_Number+0x52>
				Temp_data_tho[0] = 0x0000100;
 8003e04:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000080;
 8003e06:	2280      	movs	r2, #128	@ 0x80
				Temp_data_tho[0] = 0x0000100;
 8003e08:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000080;
 8003e0a:	9205      	str	r2, [sp, #20]
				Temp_data_tho[0] = 0x0000100;
 8003e0c:	9304      	str	r3, [sp, #16]
				Temp_data_tho[2] = 0x0000180;
 8003e0e:	18d2      	adds	r2, r2, r3
 8003e10:	e7f4      	b.n	8003dfc <LCD_Display_Temp_Number+0x8c>
				Temp_data_tho[0] = 0x0000100;
 8003e12:	2380      	movs	r3, #128	@ 0x80
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000080;
 8003e18:	3b80      	subs	r3, #128	@ 0x80
 8003e1a:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000180;
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	33ff      	adds	r3, #255	@ 0xff
				Temp_data_tho[2] = 0x0000180;
 8003e20:	9306      	str	r3, [sp, #24]
 8003e22:	e7e3      	b.n	8003dec <LCD_Display_Temp_Number+0x7c>
				Temp_data_tho[0] = 0x0000100;
 8003e24:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000180;
 8003e26:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003e28:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000180;
 8003e2a:	0052      	lsls	r2, r2, #1
				Temp_data_tho[0] = 0x0000100;
 8003e2c:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e2e:	9205      	str	r2, [sp, #20]
 8003e30:	e7c9      	b.n	8003dc6 <LCD_Display_Temp_Number+0x56>
				Temp_data_tho[0] = 0x0000100;
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e38:	3380      	adds	r3, #128	@ 0x80
 8003e3a:	9305      	str	r3, [sp, #20]
 8003e3c:	e7f0      	b.n	8003e20 <LCD_Display_Temp_Number+0xb0>
				Temp_data_tho[0] = 0x0000100;
 8003e3e:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000180;
 8003e40:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003e42:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000180;
 8003e44:	0052      	lsls	r2, r2, #1
				Temp_data_tho[0] = 0x0000100;
 8003e46:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e48:	9205      	str	r2, [sp, #20]
 8003e4a:	e7d7      	b.n	8003dfc <LCD_Display_Temp_Number+0x8c>
    switch (hundreds)
 8003e4c:	2f09      	cmp	r7, #9
 8003e4e:	d815      	bhi.n	8003e7c <LCD_Display_Temp_Number+0x10c>
 8003e50:	0038      	movs	r0, r7
 8003e52:	f7fc f96b 	bl	800012c <__gnu_thumb1_case_uqi>
 8003e56:	0f05      	.short	0x0f05
 8003e58:	302e281e 	.word	0x302e281e
 8003e5c:	4c464037 	.word	0x4c464037
    {
    	case 0:
    		if(thousands == 0)
 8003e60:	9b01      	ldr	r3, [sp, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <LCD_Display_Temp_Number+0x10c>
    			Temp_data_hun[2] = 0x0000000;
    			Temp_data_hun[3] = 0x0000000;
    		}
    		else
    		{
    			Temp_data_hun[0] = 0x0200000;
 8003e66:	2280      	movs	r2, #128	@ 0x80
    			Temp_data_hun[1] = 0x0200200;
 8003e68:	4b6e      	ldr	r3, [pc, #440]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
    			Temp_data_hun[0] = 0x0200000;
 8003e6a:	0392      	lsls	r2, r2, #14
 8003e6c:	9208      	str	r2, [sp, #32]
    			Temp_data_hun[1] = 0x0200200;
 8003e6e:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Temp_data_hun[0] = 0x0200000;
			Temp_data_hun[1] = 0x0200200;
			Temp_data_hun[2] = 0x0200200;
 8003e70:	60a2      	str	r2, [r4, #8]
 8003e72:	e016      	b.n	8003ea2 <LCD_Display_Temp_Number+0x132>
    		Temp_data_hun[1] = 0x0200000;
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	039b      	lsls	r3, r3, #14
			Temp_data_hun[1] = 0x0200200;
 8003e78:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003e7a:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200000;
			break;
    }
    switch (tens)
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	2b09      	cmp	r3, #9
 8003e80:	d847      	bhi.n	8003f12 <LCD_Display_Temp_Number+0x1a2>
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fc f952 	bl	800012c <__gnu_thumb1_case_uqi>
 8003e88:	5b504139 	.word	0x5b504139
 8003e8c:	756b6462 	.word	0x756b6462
 8003e90:	837c      	.short	0x837c
			Temp_data_hun[0] = 0x0200000;
 8003e92:	2380      	movs	r3, #128	@ 0x80
 8003e94:	039b      	lsls	r3, r3, #14
 8003e96:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200000;
 8003e98:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0000200;
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200200;
 8003ea0:	4b60      	ldr	r3, [pc, #384]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[3] = 0x0200000;
 8003ea2:	60e3      	str	r3, [r4, #12]
			break;
 8003ea4:	e7ea      	b.n	8003e7c <LCD_Display_Temp_Number+0x10c>
			Temp_data_hun[0] = 0x0200000;
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	039b      	lsls	r3, r3, #14
 8003eaa:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200000;
 8003eac:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003eae:	4a5d      	ldr	r2, [pc, #372]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eb0:	e7de      	b.n	8003e70 <LCD_Display_Temp_Number+0x100>
			Temp_data_hun[1] = 0x0200200;
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eb4:	e7e0      	b.n	8003e78 <LCD_Display_Temp_Number+0x108>
			Temp_data_hun[0] = 0x0200000;
 8003eb6:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0000200;
 8003eb8:	2280      	movs	r2, #128	@ 0x80
			Temp_data_hun[0] = 0x0200000;
 8003eba:	039b      	lsls	r3, r3, #14
			Temp_data_hun[1] = 0x0000200;
 8003ebc:	0092      	lsls	r2, r2, #2
			Temp_data_hun[0] = 0x0200000;
 8003ebe:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0000200;
 8003ec0:	6062      	str	r2, [r4, #4]
 8003ec2:	e7f4      	b.n	8003eae <LCD_Display_Temp_Number+0x13e>
			Temp_data_hun[0] = 0x0200000;
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	039b      	lsls	r3, r3, #14
 8003ec8:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0000200;
 8003eca:	2380      	movs	r3, #128	@ 0x80
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003ed0:	4b54      	ldr	r3, [pc, #336]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[2] = 0x0200200;
 8003ed2:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200200;
 8003ed4:	e7e5      	b.n	8003ea2 <LCD_Display_Temp_Number+0x132>
			Temp_data_hun[0] = 0x0200000;
 8003ed6:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0200200;
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[0] = 0x0200000;
 8003eda:	039b      	lsls	r3, r3, #14
 8003edc:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ede:	6062      	str	r2, [r4, #4]
			Temp_data_hun[2] = 0x0200000;
 8003ee0:	e7cb      	b.n	8003e7a <LCD_Display_Temp_Number+0x10a>
			Temp_data_hun[0] = 0x0200000;
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	039b      	lsls	r3, r3, #14
 8003ee6:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eea:	6063      	str	r3, [r4, #4]
 8003eec:	e7f1      	b.n	8003ed2 <LCD_Display_Temp_Number+0x162>
			Temp_data_hun[0] = 0x0200000;
 8003eee:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0200200;
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[0] = 0x0200000;
 8003ef2:	039b      	lsls	r3, r3, #14
 8003ef4:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ef6:	6062      	str	r2, [r4, #4]
 8003ef8:	e7ba      	b.n	8003e70 <LCD_Display_Temp_Number+0x100>
    {
    	case 0:
        	Temp_data_ten[0] = 0x0080000;
 8003efa:	2280      	movs	r2, #128	@ 0x80
        	Temp_data_ten[1] = 0x0090000;
 8003efc:	2390      	movs	r3, #144	@ 0x90
        	Temp_data_ten[0] = 0x0080000;
 8003efe:	0312      	lsls	r2, r2, #12
        	Temp_data_ten[1] = 0x0090000;
 8003f00:	031b      	lsls	r3, r3, #12
        	Temp_data_ten[0] = 0x0080000;
 8003f02:	920c      	str	r2, [sp, #48]	@ 0x30
        	Temp_data_ten[1] = 0x0090000;
 8003f04:	606b      	str	r3, [r5, #4]
			break;

		case 9:
			Temp_data_ten[0] = 0x0080000;
			Temp_data_ten[1] = 0x0090000;
			Temp_data_ten[2] = 0x0090000;
 8003f06:	60aa      	str	r2, [r5, #8]
 8003f08:	e017      	b.n	8003f3a <LCD_Display_Temp_Number+0x1ca>
    		Temp_data_ten[1] = 0x0080000;
 8003f0a:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0080000;
 8003f10:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	d84a      	bhi.n	8003fae <LCD_Display_Temp_Number+0x23e>
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7fc f907 	bl	800012c <__gnu_thumb1_case_uqi>
 8003f1e:	453f      	.short	0x453f
 8003f20:	67656058 	.word	0x67656058
 8003f24:	7e79736c 	.word	0x7e79736c
			Temp_data_ten[0] = 0x0080000;
 8003f28:	2380      	movs	r3, #128	@ 0x80
 8003f2a:	031b      	lsls	r3, r3, #12
 8003f2c:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0080000;
 8003f2e:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0010000;
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	025b      	lsls	r3, r3, #9
 8003f34:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0090000;
 8003f36:	2390      	movs	r3, #144	@ 0x90
 8003f38:	031b      	lsls	r3, r3, #12
			Temp_data_ten[3] = 0x0080000;
 8003f3a:	60eb      	str	r3, [r5, #12]
			break;
 8003f3c:	e7e9      	b.n	8003f12 <LCD_Display_Temp_Number+0x1a2>
			Temp_data_ten[0] = 0x0080000;
 8003f3e:	2380      	movs	r3, #128	@ 0x80
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0080000;
 8003f44:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0090000;
 8003f46:	2290      	movs	r2, #144	@ 0x90
 8003f48:	0312      	lsls	r2, r2, #12
 8003f4a:	e7dc      	b.n	8003f06 <LCD_Display_Temp_Number+0x196>
			Temp_data_ten[1] = 0x0090000;
 8003f4c:	2390      	movs	r3, #144	@ 0x90
 8003f4e:	e7dd      	b.n	8003f0c <LCD_Display_Temp_Number+0x19c>
			Temp_data_ten[0] = 0x0080000;
 8003f50:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0010000;
 8003f52:	2280      	movs	r2, #128	@ 0x80
			Temp_data_ten[0] = 0x0080000;
 8003f54:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0010000;
 8003f56:	0252      	lsls	r2, r2, #9
			Temp_data_ten[0] = 0x0080000;
 8003f58:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0010000;
 8003f5a:	606a      	str	r2, [r5, #4]
 8003f5c:	e7f3      	b.n	8003f46 <LCD_Display_Temp_Number+0x1d6>
			Temp_data_ten[0] = 0x0080000;
 8003f5e:	2380      	movs	r3, #128	@ 0x80
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0010000;
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	025b      	lsls	r3, r3, #9
 8003f68:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0090000;
 8003f6a:	2390      	movs	r3, #144	@ 0x90
 8003f6c:	031b      	lsls	r3, r3, #12
			Temp_data_ten[2] = 0x0090000;
 8003f6e:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0090000;
 8003f70:	e7e3      	b.n	8003f3a <LCD_Display_Temp_Number+0x1ca>
			Temp_data_ten[0] = 0x0080000;
 8003f72:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f74:	2290      	movs	r2, #144	@ 0x90
			Temp_data_ten[0] = 0x0080000;
 8003f76:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0090000;
 8003f78:	0312      	lsls	r2, r2, #12
			Temp_data_ten[0] = 0x0080000;
 8003f7a:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f7c:	606a      	str	r2, [r5, #4]
 8003f7e:	e7c7      	b.n	8003f10 <LCD_Display_Temp_Number+0x1a0>
			Temp_data_ten[0] = 0x0080000;
 8003f80:	2380      	movs	r3, #128	@ 0x80
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f86:	2390      	movs	r3, #144	@ 0x90
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	606b      	str	r3, [r5, #4]
 8003f8c:	e7ef      	b.n	8003f6e <LCD_Display_Temp_Number+0x1fe>
			Temp_data_ten[0] = 0x0080000;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f90:	2290      	movs	r2, #144	@ 0x90
			Temp_data_ten[0] = 0x0080000;
 8003f92:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0090000;
 8003f94:	0312      	lsls	r2, r2, #12
			Temp_data_ten[0] = 0x0080000;
 8003f96:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f98:	606a      	str	r2, [r5, #4]
 8003f9a:	e7b4      	b.n	8003f06 <LCD_Display_Temp_Number+0x196>
    {
    	case 0:
        	Temp_data_one[0] = 0x0000002;
 8003f9c:	2202      	movs	r2, #2
        	Temp_data_one[1] = 0x0000003;
 8003f9e:	2303      	movs	r3, #3
        	Temp_data_one[0] = 0x0000002;
 8003fa0:	9210      	str	r2, [sp, #64]	@ 0x40
        	Temp_data_one[1] = 0x0000003;
 8003fa2:	6073      	str	r3, [r6, #4]
			break;

		case 9:
			Temp_data_one[0] = 0x0000002;
			Temp_data_one[1] = 0x0000003;
			Temp_data_one[2] = 0x0000003;
 8003fa4:	60b2      	str	r2, [r6, #8]
 8003fa6:	e018      	b.n	8003fda <LCD_Display_Temp_Number+0x26a>
    		Temp_data_one[1] = 0x0000002;
 8003fa8:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 8003faa:	9311      	str	r3, [sp, #68]	@ 0x44
			Temp_data_one[2] = 0x0000003;
 8003fac:	9312      	str	r3, [sp, #72]	@ 0x48
{
 8003fae:	2300      	movs	r3, #0
			Temp_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Temp_data_tho[i] | Temp_data_hun[i] | Temp_data_ten[i] | Temp_data_one[i];
 8003fb0:	aa04      	add	r2, sp, #16
 8003fb2:	58e1      	ldr	r1, [r4, r3]
 8003fb4:	58d2      	ldr	r2, [r2, r3]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	58e9      	ldr	r1, [r5, r3]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	58f1      	ldr	r1, [r6, r3]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003fc2:	50ca      	str	r2, [r1, r3]
    for(int i = 0; i<4; i++)
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d1f2      	bne.n	8003fb0 <LCD_Display_Temp_Number+0x240>
    }
}
 8003fca:	b015      	add	sp, #84	@ 0x54
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Temp_data_one[0] = 0x0000002;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000002;
 8003fd2:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000001;
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	60b3      	str	r3, [r6, #8]
			Temp_data_one[3] = 0x0000003;
 8003fd8:	3302      	adds	r3, #2
			Temp_data_one[3] = 0x0000002;
 8003fda:	60f3      	str	r3, [r6, #12]
    for(int i = 0; i<4; i++)
 8003fdc:	e7e7      	b.n	8003fae <LCD_Display_Temp_Number+0x23e>
			Temp_data_one[0] = 0x0000002;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000002;
 8003fe2:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	e7dd      	b.n	8003fa4 <LCD_Display_Temp_Number+0x234>
			Temp_data_one[1] = 0x0000003;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e7de      	b.n	8003faa <LCD_Display_Temp_Number+0x23a>
			Temp_data_one[0] = 0x0000002;
 8003fec:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000001;
 8003fee:	2201      	movs	r2, #1
			Temp_data_one[0] = 0x0000002;
 8003ff0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000001;
 8003ff2:	6072      	str	r2, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003ff4:	e7f6      	b.n	8003fe4 <LCD_Display_Temp_Number+0x274>
			Temp_data_one[0] = 0x0000002;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000001;
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003ffe:	3302      	adds	r3, #2
			Temp_data_one[2] = 0x0000003;
 8004000:	60b3      	str	r3, [r6, #8]
			Temp_data_one[3] = 0x0000003;
 8004002:	e7ea      	b.n	8003fda <LCD_Display_Temp_Number+0x26a>
			Temp_data_one[0] = 0x0000002;
 8004004:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 8004006:	2203      	movs	r2, #3
			Temp_data_one[0] = 0x0000002;
 8004008:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 800400a:	6072      	str	r2, [r6, #4]
			Temp_data_one[2] = 0x0000002;
 800400c:	60b3      	str	r3, [r6, #8]
    for(int i = 0; i<4; i++)
 800400e:	e7ce      	b.n	8003fae <LCD_Display_Temp_Number+0x23e>
			Temp_data_one[0] = 0x0000002;
 8004010:	2302      	movs	r3, #2
 8004012:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 8004014:	3301      	adds	r3, #1
 8004016:	6073      	str	r3, [r6, #4]
 8004018:	e7f2      	b.n	8004000 <LCD_Display_Temp_Number+0x290>
			Temp_data_one[0] = 0x0000002;
 800401a:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 800401c:	2203      	movs	r2, #3
			Temp_data_one[0] = 0x0000002;
 800401e:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 8004020:	6072      	str	r2, [r6, #4]
 8004022:	e7bf      	b.n	8003fa4 <LCD_Display_Temp_Number+0x234>
 8004024:	00200200 	.word	0x00200200

08004028 <LCD_DigitNumber_Temp_Calculate>:
{
 8004028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402a:	0004      	movs	r4, r0
 800402c:	000d      	movs	r5, r1
 800402e:	b087      	sub	sp, #28
	if(number < 0)
 8004030:	2800      	cmp	r0, #0
 8004032:	da34      	bge.n	800409e <LCD_DigitNumber_Temp_Calculate+0x76>
		A = -number;
 8004034:	4246      	negs	r6, r0
 8004036:	b236      	sxth	r6, r6
	A %= 1000;
 8004038:	21fa      	movs	r1, #250	@ 0xfa
 800403a:	0030      	movs	r0, r6
 800403c:	0089      	lsls	r1, r1, #2
 800403e:	f7fc fa03 	bl	8000448 <__aeabi_idivmod>
 8004042:	b20b      	sxth	r3, r1
    A %= 100;
 8004044:	0018      	movs	r0, r3
 8004046:	2164      	movs	r1, #100	@ 0x64
	A %= 1000;
 8004048:	9303      	str	r3, [sp, #12]
    A %= 100;
 800404a:	f7fc f9fd 	bl	8000448 <__aeabi_idivmod>
 800404e:	b20f      	sxth	r7, r1
    ones      = A % 10;
 8004050:	0038      	movs	r0, r7
 8004052:	210a      	movs	r1, #10
 8004054:	f7fc f9f8 	bl	8000448 <__aeabi_idivmod>
    tens      = A / 10;
 8004058:	0038      	movs	r0, r7
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800405a:	b2cb      	uxtb	r3, r1
    tens      = A / 10;
 800405c:	210a      	movs	r1, #10
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800405e:	9304      	str	r3, [sp, #16]
    tens      = A / 10;
 8004060:	f7fc f90c 	bl	800027c <__divsi3>
    hundreds  = A / 100;
 8004064:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 8004066:	b2c3      	uxtb	r3, r0
    hundreds  = A / 100;
 8004068:	9803      	ldr	r0, [sp, #12]
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800406a:	9305      	str	r3, [sp, #20]
    hundreds  = A / 100;
 800406c:	f7fc f906 	bl	800027c <__divsi3>
	thousands = A /1000;
 8004070:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 8004072:	b2c7      	uxtb	r7, r0
	thousands = A /1000;
 8004074:	0089      	lsls	r1, r1, #2
 8004076:	0030      	movs	r0, r6
 8004078:	f7fc f900 	bl	800027c <__divsi3>
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	0039      	movs	r1, r7
 8004080:	9a05      	ldr	r2, [sp, #20]
 8004082:	b2c0      	uxtb	r0, r0
 8004084:	9500      	str	r5, [sp, #0]
 8004086:	f7ff fe73 	bl	8003d70 <LCD_Display_Temp_Number>
	if(number < 0 && number > -100)
 800408a:	0023      	movs	r3, r4
 800408c:	3363      	adds	r3, #99	@ 0x63
 800408e:	d308      	bcc.n	80040a2 <LCD_DigitNumber_Temp_Calculate+0x7a>
		data[2] = data[2] | 0x0000200;  //-부호 on, 8번세그먼트에 표시
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	68aa      	ldr	r2, [r5, #8]
 8004094:	009b      	lsls	r3, r3, #2
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
 8004096:	4313      	orrs	r3, r2
 8004098:	60ab      	str	r3, [r5, #8]
}
 800409a:	b007      	add	sp, #28
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		A = number;
 800409e:	b206      	sxth	r6, r0
 80040a0:	e7ca      	b.n	8004038 <LCD_DigitNumber_Temp_Calculate+0x10>
	else if(number < -99 && number > -1000)
 80040a2:	22e1      	movs	r2, #225	@ 0xe1
 80040a4:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <LCD_DigitNumber_Temp_Calculate+0x9c>)
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	18e3      	adds	r3, r4, r3
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d202      	bcs.n	80040b4 <LCD_DigitNumber_Temp_Calculate+0x8c>
		data[2] = data[2] | 0x0000080;  //-부호 on, 7번세그먼트에 표시
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	68aa      	ldr	r2, [r5, #8]
 80040b2:	e7f0      	b.n	8004096 <LCD_DigitNumber_Temp_Calculate+0x6e>
	else if(number < -999 && number > -10000)
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <LCD_DigitNumber_Temp_Calculate+0xa0>)
 80040b6:	18e4      	adds	r4, r4, r3
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <LCD_DigitNumber_Temp_Calculate+0xa4>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d8ed      	bhi.n	800409a <LCD_DigitNumber_Temp_Calculate+0x72>
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
 80040be:	2304      	movs	r3, #4
 80040c0:	68aa      	ldr	r2, [r5, #8]
 80040c2:	e7e8      	b.n	8004096 <LCD_DigitNumber_Temp_Calculate+0x6e>
 80040c4:	000003e7 	.word	0x000003e7
 80040c8:	0000270f 	.word	0x0000270f
 80040cc:	00002327 	.word	0x00002327

080040d0 <LCD_Display_Temp>:
{
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 80040d4:	4e21      	ldr	r6, [pc, #132]	@ (800415c <LCD_Display_Temp+0x8c>)
{
 80040d6:	1c05      	adds	r5, r0, #0
	HAL_LCD_Clear(&hlcd);
 80040d8:	0030      	movs	r0, r6
{
 80040da:	0017      	movs	r7, r2
	HAL_LCD_Clear(&hlcd);
 80040dc:	f00b fcdb 	bl	800fa96 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 80040e0:	2204      	movs	r2, #4
 80040e2:	2100      	movs	r1, #0
 80040e4:	0020      	movs	r0, r4
 80040e6:	f016 fb35 	bl	801a754 <memset>
    if(Packet_temp_unit == 0x01) // F, C unit
 80040ea:	2f01      	cmp	r7, #1
 80040ec:	d10b      	bne.n	8004106 <LCD_Display_Temp+0x36>
    	Temp = (Temp * 9.0f / 5.0f) + 32.0f;
 80040ee:	491c      	ldr	r1, [pc, #112]	@ (8004160 <LCD_Display_Temp+0x90>)
 80040f0:	1c28      	adds	r0, r5, #0
 80040f2:	f7fc ff27 	bl	8000f44 <__aeabi_fmul>
 80040f6:	491b      	ldr	r1, [pc, #108]	@ (8004164 <LCD_Display_Temp+0x94>)
 80040f8:	f7fc fd56 	bl	8000ba8 <__aeabi_fdiv>
 80040fc:	2184      	movs	r1, #132	@ 0x84
 80040fe:	05c9      	lsls	r1, r1, #23
 8004100:	f7fc fb60 	bl	80007c4 <__aeabi_fadd>
 8004104:	1c05      	adds	r5, r0, #0
    temp_int = (int32_t)(Temp * 10.0f);
 8004106:	4918      	ldr	r1, [pc, #96]	@ (8004168 <LCD_Display_Temp+0x98>)
 8004108:	1c28      	adds	r0, r5, #0
 800410a:	f7fc ff1b 	bl	8000f44 <__aeabi_fmul>
 800410e:	f7fd faed 	bl	80016ec <__aeabi_f2iz>
    LCD_DigitNumber_Temp_Calculate(temp_int, data);
 8004112:	0021      	movs	r1, r4
 8004114:	f7ff ff88 	bl	8004028 <LCD_DigitNumber_Temp_Calculate>
        data[0] = data[0] | 0x0000004;   // F on
 8004118:	2304      	movs	r3, #4
 800411a:	6822      	ldr	r2, [r4, #0]
    if(Packet_temp_unit == 0x01)
 800411c:	2f01      	cmp	r7, #1
 800411e:	d001      	beq.n	8004124 <LCD_Display_Temp+0x54>
        data[0] = data[0] | 0x0000200;   // C on
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	431a      	orrs	r2, r3
    data[0] = data[0] | 0x0000001; // 소수점표시
 8004126:	2301      	movs	r3, #1
 8004128:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800412a:	0030      	movs	r0, r6
    data[0] = data[0] | 0x0000001; // 소수점표시
 800412c:	6023      	str	r3, [r4, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800412e:	2100      	movs	r1, #0
 8004130:	4a0e      	ldr	r2, [pc, #56]	@ (800416c <LCD_Display_Temp+0x9c>)
 8004132:	f00b fc4f 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004136:	0030      	movs	r0, r6
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	2102      	movs	r1, #2
 800413c:	4a0b      	ldr	r2, [pc, #44]	@ (800416c <LCD_Display_Temp+0x9c>)
 800413e:	f00b fc49 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004142:	0030      	movs	r0, r6
 8004144:	68a3      	ldr	r3, [r4, #8]
 8004146:	2104      	movs	r1, #4
 8004148:	4a08      	ldr	r2, [pc, #32]	@ (800416c <LCD_Display_Temp+0x9c>)
 800414a:	f00b fc43 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800414e:	0030      	movs	r0, r6
 8004150:	2106      	movs	r1, #6
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	4a05      	ldr	r2, [pc, #20]	@ (800416c <LCD_Display_Temp+0x9c>)
 8004156:	f00b fc3d 	bl	800f9d4 <HAL_LCD_Write>
}
 800415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415c:	20000a80 	.word	0x20000a80
 8004160:	41100000 	.word	0x41100000
 8004164:	40a00000 	.word	0x40a00000
 8004168:	41200000 	.word	0x41200000
 800416c:	f7fffffe 	.word	0xf7fffffe

08004170 <LCD_Display_Temp_MinMax>:
{
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 8004174:	4d22      	ldr	r5, [pc, #136]	@ (8004200 <LCD_Display_Temp_MinMax+0x90>)
{
 8004176:	1c07      	adds	r7, r0, #0
	HAL_LCD_Clear(&hlcd);
 8004178:	0028      	movs	r0, r5
{
 800417a:	0016      	movs	r6, r2
	HAL_LCD_Clear(&hlcd);
 800417c:	f00b fc8b 	bl	800fa96 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 8004180:	2100      	movs	r1, #0
 8004182:	2204      	movs	r2, #4
 8004184:	0020      	movs	r0, r4
 8004186:	f016 fae5 	bl	801a754 <memset>
    float temp_float = Temp / 10.0f;
 800418a:	491e      	ldr	r1, [pc, #120]	@ (8004204 <LCD_Display_Temp_MinMax+0x94>)
 800418c:	1c38      	adds	r0, r7, #0
 800418e:	f7fc fd0b 	bl	8000ba8 <__aeabi_fdiv>
    if(Packet_temp_unit == 0x01) // F, C unit
 8004192:	2e01      	cmp	r6, #1
 8004194:	d109      	bne.n	80041aa <LCD_Display_Temp_MinMax+0x3a>
    	temp_float = (temp_float * 9.0f / 5.0f) + 32.0f;
 8004196:	491c      	ldr	r1, [pc, #112]	@ (8004208 <LCD_Display_Temp_MinMax+0x98>)
 8004198:	f7fc fed4 	bl	8000f44 <__aeabi_fmul>
 800419c:	491b      	ldr	r1, [pc, #108]	@ (800420c <LCD_Display_Temp_MinMax+0x9c>)
 800419e:	f7fc fd03 	bl	8000ba8 <__aeabi_fdiv>
 80041a2:	2184      	movs	r1, #132	@ 0x84
 80041a4:	05c9      	lsls	r1, r1, #23
 80041a6:	f7fc fb0d 	bl	80007c4 <__aeabi_fadd>
    temp_int = (int32_t)(temp_float * 10.0f);
 80041aa:	4916      	ldr	r1, [pc, #88]	@ (8004204 <LCD_Display_Temp_MinMax+0x94>)
 80041ac:	f7fc feca 	bl	8000f44 <__aeabi_fmul>
 80041b0:	f7fd fa9c 	bl	80016ec <__aeabi_f2iz>
    LCD_DigitNumber_Temp_Calculate(temp_int, data);
 80041b4:	0021      	movs	r1, r4
 80041b6:	f7ff ff37 	bl	8004028 <LCD_DigitNumber_Temp_Calculate>
        data[0] = data[0] | 0x0000004;   // F on
 80041ba:	2304      	movs	r3, #4
 80041bc:	6822      	ldr	r2, [r4, #0]
    if(Packet_temp_unit == 0x01)
 80041be:	2e01      	cmp	r6, #1
 80041c0:	d001      	beq.n	80041c6 <LCD_Display_Temp_MinMax+0x56>
        data[0] = data[0] | 0x0000200;   // C on
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	431a      	orrs	r2, r3
    data[0] = data[0] | 0x0000001; // 소수점표시
 80041c8:	2301      	movs	r3, #1
 80041ca:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80041cc:	0028      	movs	r0, r5
    data[0] = data[0] | 0x0000001; // 소수점표시
 80041ce:	6023      	str	r3, [r4, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80041d0:	2100      	movs	r1, #0
 80041d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041d4:	f00b fbfe 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80041d8:	0028      	movs	r0, r5
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	2102      	movs	r1, #2
 80041de:	4a0c      	ldr	r2, [pc, #48]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041e0:	f00b fbf8 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80041e4:	0028      	movs	r0, r5
 80041e6:	68a3      	ldr	r3, [r4, #8]
 80041e8:	2104      	movs	r1, #4
 80041ea:	4a09      	ldr	r2, [pc, #36]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041ec:	f00b fbf2 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80041f0:	0028      	movs	r0, r5
 80041f2:	2106      	movs	r1, #6
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	4a06      	ldr	r2, [pc, #24]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041f8:	f00b fbec 	bl	800f9d4 <HAL_LCD_Write>
}
 80041fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	20000a80 	.word	0x20000a80
 8004204:	41200000 	.word	0x41200000
 8004208:	41100000 	.word	0x41100000
 800420c:	40a00000 	.word	0x40a00000
 8004210:	f7fffffe 	.word	0xf7fffffe

08004214 <LCD_Display_Year_Hour_Number>:
    ones      = number % 10;
    LCD_Display_Day_Sec_Number(tens, ones, data);
}

void LCD_Display_Year_Hour_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	0005      	movs	r5, r0
 800421a:	000f      	movs	r7, r1
 800421c:	0016      	movs	r6, r2
	uint32_t Year_Hour_data_ten[4] = {0};
 800421e:	2100      	movs	r1, #0
 8004220:	2210      	movs	r2, #16
 8004222:	4668      	mov	r0, sp
	uint32_t Year_Hour_data_one[4] = {0};
 8004224:	ac04      	add	r4, sp, #16
	uint32_t Year_Hour_data_ten[4] = {0};
 8004226:	f016 fa95 	bl	801a754 <memset>
	uint32_t Year_Hour_data_one[4] = {0};
 800422a:	2210      	movs	r2, #16
 800422c:	2100      	movs	r1, #0
 800422e:	0020      	movs	r0, r4
 8004230:	f016 fa90 	bl	801a754 <memset>

    switch (tens)
 8004234:	2d09      	cmp	r5, #9
 8004236:	d844      	bhi.n	80042c2 <LCD_Display_Year_Hour_Number+0xae>
 8004238:	0028      	movs	r0, r5
 800423a:	4d5e      	ldr	r5, [pc, #376]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 800423c:	f7fb ff76 	bl	800012c <__gnu_thumb1_case_uqi>
 8004240:	210a3305 	.word	0x210a3305
 8004244:	605b4b2f 	.word	0x605b4b2f
 8004248:	6e6a      	.short	0x6e6a
    {
    	case 0:
        	Year_Hour_data_ten[0] = 0x0000000;
        	Year_Hour_data_ten[1] = 0x0000008;
 800424a:	2308      	movs	r3, #8
 800424c:	9301      	str	r3, [sp, #4]

		case 8:
			Year_Hour_data_ten[0] = 0x0000000;
			Year_Hour_data_ten[1] = 0x0000008;
			Year_Hour_data_ten[2] = 0x0000008;
			Year_Hour_data_ten[3] = 0x0000008;
 800424e:	9303      	str	r3, [sp, #12]
		case 9:
			Year_Hour_data_ten[0] = 0x0000000;
			Year_Hour_data_ten[1] = 0x0000008;
			Year_Hour_data_ten[2] = 0x0000008;
			Year_Hour_data_ten[3] = 0x0000000;
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004250:	4d58      	ldr	r5, [pc, #352]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 8004252:	e018      	b.n	8004286 <LCD_Display_Year_Hour_Number+0x72>
			Year_Hour_data_ten[2] = 0x0000008;
 8004254:	2308      	movs	r3, #8
 8004256:	9302      	str	r3, [sp, #8]
			Year_Hour_data_ten[3] = 0x0000008;
 8004258:	9303      	str	r3, [sp, #12]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	4d55      	ldr	r5, [pc, #340]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 800425e:	015b      	lsls	r3, r3, #5
 8004260:	001a      	movs	r2, r3
 8004262:	2101      	movs	r1, #1
 8004264:	0028      	movs	r0, r5
 8004266:	f00b fbb5 	bl	800f9d4 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 800426a:	2380      	movs	r3, #128	@ 0x80
 800426c:	015b      	lsls	r3, r3, #5
 800426e:	001a      	movs	r2, r3
 8004270:	2103      	movs	r1, #3
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 8004272:	0028      	movs	r0, r5
 8004274:	f00b fbae 	bl	800f9d4 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	015b      	lsls	r3, r3, #5
 800427c:	001a      	movs	r2, r3
 800427e:	2107      	movs	r1, #7
 8004280:	e01c      	b.n	80042bc <LCD_Display_Year_Hour_Number+0xa8>
			Year_Hour_data_ten[2] = 0x0000008;
 8004282:	2308      	movs	r3, #8
 8004284:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	015b      	lsls	r3, r3, #5
 800428a:	001a      	movs	r2, r3
 800428c:	2101      	movs	r1, #1
 800428e:	0028      	movs	r0, r5
 8004290:	f00b fba0 	bl	800f9d4 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	015b      	lsls	r3, r3, #5
 8004298:	001a      	movs	r2, r3
 800429a:	2103      	movs	r1, #3
 800429c:	e023      	b.n	80042e6 <LCD_Display_Year_Hour_Number+0xd2>
			Year_Hour_data_ten[1] = 0x0000008;
 800429e:	2308      	movs	r3, #8
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042a0:	4d44      	ldr	r5, [pc, #272]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
			Year_Hour_data_ten[1] = 0x0000008;
 80042a2:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042a4:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042a6:	2380      	movs	r3, #128	@ 0x80
 80042a8:	015b      	lsls	r3, r3, #5
 80042aa:	001a      	movs	r2, r3
 80042ac:	2103      	movs	r1, #3
 80042ae:	0028      	movs	r0, r5
 80042b0:	f00b fb90 	bl	800f9d4 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	015b      	lsls	r3, r3, #5
 80042b8:	001a      	movs	r2, r3
 80042ba:	2105      	movs	r1, #5
        	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 80042bc:	0028      	movs	r0, r5
 80042be:	f00b fb89 	bl	800f9d4 <HAL_LCD_Write>
			break;
    }
    switch (ones)
 80042c2:	2f09      	cmp	r7, #9
 80042c4:	d839      	bhi.n	800433a <LCD_Display_Year_Hour_Number+0x126>
 80042c6:	0038      	movs	r0, r7
 80042c8:	f7fb ff30 	bl	800012c <__gnu_thumb1_case_uqi>
 80042cc:	4b42332c 	.word	0x4b42332c
 80042d0:	61595351 	.word	0x61595351
 80042d4:	6d67      	.short	0x6d67
			Year_Hour_data_ten[1] = 0x0000008;
 80042d6:	2308      	movs	r3, #8
 80042d8:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042da:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	015b      	lsls	r3, r3, #5
 80042e0:	001a      	movs	r2, r3
 80042e2:	2101      	movs	r1, #1
 80042e4:	4d33      	ldr	r5, [pc, #204]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042e6:	0028      	movs	r0, r5
 80042e8:	f00b fb74 	bl	800f9d4 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	001a      	movs	r2, r3
 80042f2:	2105      	movs	r1, #5
 80042f4:	e7bd      	b.n	8004272 <LCD_Display_Year_Hour_Number+0x5e>
			Year_Hour_data_ten[1] = 0x0000008;
 80042f6:	2308      	movs	r3, #8
 80042f8:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042fa:	9302      	str	r3, [sp, #8]
			Year_Hour_data_ten[3] = 0x0000008;
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	e7ed      	b.n	80042dc <LCD_Display_Year_Hour_Number+0xc8>
			Year_Hour_data_ten[1] = 0x0000008;
 8004300:	2308      	movs	r3, #8
 8004302:	9301      	str	r3, [sp, #4]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	001a      	movs	r2, r3
 800430a:	2101      	movs	r1, #1
 800430c:	0028      	movs	r0, r5
 800430e:	f00b fb61 	bl	800f9d4 <HAL_LCD_Write>
 8004312:	e7c8      	b.n	80042a6 <LCD_Display_Year_Hour_Number+0x92>
			Year_Hour_data_ten[1] = 0x0000008;
 8004314:	2308      	movs	r3, #8
 8004316:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 8004318:	9302      	str	r3, [sp, #8]
 800431a:	e798      	b.n	800424e <LCD_Display_Year_Hour_Number+0x3a>
			Year_Hour_data_ten[1] = 0x0000008;
 800431c:	2308      	movs	r3, #8
 800431e:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 8004320:	9302      	str	r3, [sp, #8]
 8004322:	e795      	b.n	8004250 <LCD_Display_Year_Hour_Number+0x3c>
    {
    	case 0:
        	Year_Hour_data_one[0] = 0x0020000;
 8004324:	2280      	movs	r2, #128	@ 0x80
        	Year_Hour_data_one[1] = 0x0020004;
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
        	Year_Hour_data_one[0] = 0x0020000;
 8004328:	0292      	lsls	r2, r2, #10
 800432a:	9204      	str	r2, [sp, #16]
        	Year_Hour_data_one[1] = 0x0020004;
 800432c:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Year_Hour_data_one[0] = 0x0020000;
			Year_Hour_data_one[1] = 0x0020004;
			Year_Hour_data_one[2] = 0x0020004;
 800432e:	60a2      	str	r2, [r4, #8]
 8004330:	e015      	b.n	800435e <LCD_Display_Year_Hour_Number+0x14a>
    		Year_Hour_data_one[1] = 0x0020000;
 8004332:	2380      	movs	r3, #128	@ 0x80
 8004334:	029b      	lsls	r3, r3, #10
			Year_Hour_data_one[1] = 0x0020004;
 8004336:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 8004338:	60a3      	str	r3, [r4, #8]
{
 800433a:	2300      	movs	r3, #0
			Year_Hour_data_one[3] = 0x0020000;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Year_Hour_data_ten[i] | Year_Hour_data_one[i];
 800433c:	466a      	mov	r2, sp
 800433e:	58e1      	ldr	r1, [r4, r3]
 8004340:	58d2      	ldr	r2, [r2, r3]
 8004342:	430a      	orrs	r2, r1
 8004344:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 8004346:	3304      	adds	r3, #4
 8004348:	2b10      	cmp	r3, #16
 800434a:	d1f7      	bne.n	800433c <LCD_Display_Year_Hour_Number+0x128>
    }
}
 800434c:	b009      	add	sp, #36	@ 0x24
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Year_Hour_data_one[0] = 0x0020000;
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	029b      	lsls	r3, r3, #10
 8004354:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020000;
 8004356:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0000004;
 8004358:	2304      	movs	r3, #4
 800435a:	60a3      	str	r3, [r4, #8]
			Year_Hour_data_one[3] = 0x0020004;
 800435c:	4b16      	ldr	r3, [pc, #88]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[3] = 0x0020000;
 800435e:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 8004360:	e7eb      	b.n	800433a <LCD_Display_Year_Hour_Number+0x126>
			Year_Hour_data_one[0] = 0x0020000;
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	029b      	lsls	r3, r3, #10
 8004366:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020000;
 8004368:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 800436c:	e7df      	b.n	800432e <LCD_Display_Year_Hour_Number+0x11a>
			Year_Hour_data_one[1] = 0x0020004;
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 8004370:	e7e1      	b.n	8004336 <LCD_Display_Year_Hour_Number+0x122>
			Year_Hour_data_one[0] = 0x0020000;
 8004372:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0000004;
 8004374:	2204      	movs	r2, #4
			Year_Hour_data_one[0] = 0x0020000;
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0000004;
 800437a:	6062      	str	r2, [r4, #4]
 800437c:	e7f5      	b.n	800436a <LCD_Display_Year_Hour_Number+0x156>
			Year_Hour_data_one[0] = 0x0020000;
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0000004;
 8004384:	2304      	movs	r3, #4
 8004386:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[2] = 0x0020004;
 800438a:	60a3      	str	r3, [r4, #8]
			Year_Hour_data_one[3] = 0x0020004;
 800438c:	e7e7      	b.n	800435e <LCD_Display_Year_Hour_Number+0x14a>
			Year_Hour_data_one[0] = 0x0020000;
 800438e:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0020004;
 8004390:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[0] = 0x0020000;
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 8004396:	6062      	str	r2, [r4, #4]
			Year_Hour_data_one[2] = 0x0020000;
 8004398:	e7ce      	b.n	8004338 <LCD_Display_Year_Hour_Number+0x124>
			Year_Hour_data_one[0] = 0x0020000;
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	e7f1      	b.n	800438a <LCD_Display_Year_Hour_Number+0x176>
			Year_Hour_data_one[0] = 0x0020000;
 80043a6:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0020004;
 80043a8:	4a03      	ldr	r2, [pc, #12]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[0] = 0x0020000;
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 80043ae:	6062      	str	r2, [r4, #4]
 80043b0:	e7bd      	b.n	800432e <LCD_Display_Year_Hour_Number+0x11a>
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	20000a80 	.word	0x20000a80
 80043b8:	00020004 	.word	0x00020004

080043bc <LCD_DigitNumber_Year_Hour_Calculate>:
{
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	000e      	movs	r6, r1
    ones      = number % 10;
 80043c0:	210a      	movs	r1, #10
{
 80043c2:	0004      	movs	r4, r0
    ones      = number % 10;
 80043c4:	f7fb ff56 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 80043c8:	0020      	movs	r0, r4
    LCD_Display_Year_Hour_Number(tens, ones, data);
 80043ca:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 80043cc:	210a      	movs	r1, #10
 80043ce:	f7fb fecb 	bl	8000168 <__udivsi3>
    LCD_Display_Year_Hour_Number(tens, ones, data);
 80043d2:	0032      	movs	r2, r6
 80043d4:	0029      	movs	r1, r5
 80043d6:	b2c0      	uxtb	r0, r0
 80043d8:	f7ff ff1c 	bl	8004214 <LCD_Display_Year_Hour_Number>
}
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080043e0 <LCD_Display_Month_Min_Number>:

void LCD_Display_Month_Min_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b089      	sub	sp, #36	@ 0x24
 80043e4:	0007      	movs	r7, r0
 80043e6:	000d      	movs	r5, r1
 80043e8:	0016      	movs	r6, r2
	uint32_t Month_Min_data_ten[4] = {0};
 80043ea:	2100      	movs	r1, #0
 80043ec:	2210      	movs	r2, #16
 80043ee:	4668      	mov	r0, sp
	uint32_t Month_Min_data_one[4] = {0};
 80043f0:	ac04      	add	r4, sp, #16
	uint32_t Month_Min_data_ten[4] = {0};
 80043f2:	f016 f9af 	bl	801a754 <memset>
	uint32_t Month_Min_data_one[4] = {0};
 80043f6:	2210      	movs	r2, #16
 80043f8:	2100      	movs	r1, #0
 80043fa:	0020      	movs	r0, r4
 80043fc:	f016 f9aa 	bl	801a754 <memset>

    switch (tens)
 8004400:	2f09      	cmp	r7, #9
 8004402:	d813      	bhi.n	800442c <LCD_Display_Month_Min_Number+0x4c>
 8004404:	0038      	movs	r0, r7
 8004406:	f7fb fe91 	bl	800012c <__gnu_thumb1_case_uqi>
 800440a:	0d05      	.short	0x0d05
 800440c:	2e2c251b 	.word	0x2e2c251b
 8004410:	4b453e35 	.word	0x4b453e35
    {
    	case 0:
        	Month_Min_data_ten[0] = 0x0000100;
 8004414:	2280      	movs	r2, #128	@ 0x80
        	Month_Min_data_ten[1] = 0x0000180;
 8004416:	23c0      	movs	r3, #192	@ 0xc0
        	Month_Min_data_ten[0] = 0x0000100;
 8004418:	0052      	lsls	r2, r2, #1
        	Month_Min_data_ten[1] = 0x0000180;
 800441a:	005b      	lsls	r3, r3, #1
        	Month_Min_data_ten[0] = 0x0000100;
 800441c:	9200      	str	r2, [sp, #0]
        	Month_Min_data_ten[1] = 0x0000180;
 800441e:	9301      	str	r3, [sp, #4]
			break;

		case 9:
			Month_Min_data_ten[0] = 0x0000100;
			Month_Min_data_ten[1] = 0x0000180;
			Month_Min_data_ten[2] = 0x0000180;
 8004420:	9202      	str	r2, [sp, #8]
 8004422:	e015      	b.n	8004450 <LCD_Display_Month_Min_Number+0x70>
    		Month_Min_data_ten[1] = 0x0000100;
 8004424:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000100;
 800442a:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000100;
			break;
    }
    switch (ones)
 800442c:	2d09      	cmp	r5, #9
 800442e:	d849      	bhi.n	80044c4 <LCD_Display_Month_Min_Number+0xe4>
 8004430:	0028      	movs	r0, r5
 8004432:	f7fb fe7b 	bl	800012c <__gnu_thumb1_case_uqi>
 8004436:	433c      	.short	0x433c
 8004438:	64625c52 	.word	0x64625c52
 800443c:	807a746b 	.word	0x807a746b
			Month_Min_data_ten[0] = 0x0000100;
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000100;
 8004446:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000080;
 8004448:	3b80      	subs	r3, #128	@ 0x80
 800444a:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000180;
 800444c:	3301      	adds	r3, #1
 800444e:	33ff      	adds	r3, #255	@ 0xff
			Month_Min_data_ten[3] = 0x0000100;
 8004450:	9303      	str	r3, [sp, #12]
			break;
 8004452:	e7eb      	b.n	800442c <LCD_Display_Month_Min_Number+0x4c>
			Month_Min_data_ten[0] = 0x0000100;
 8004454:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[2] = 0x0000180;
 8004456:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000100;
 800445c:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000180;
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	e7de      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
			Month_Min_data_ten[1] = 0x0000180;
 8004462:	23c0      	movs	r3, #192	@ 0xc0
 8004464:	e7df      	b.n	8004426 <LCD_Display_Month_Min_Number+0x46>
			Month_Min_data_ten[0] = 0x0000100;
 8004466:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000080;
 8004468:	2280      	movs	r2, #128	@ 0x80
			Month_Min_data_ten[0] = 0x0000100;
 800446a:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000080;
 800446c:	9201      	str	r2, [sp, #4]
			Month_Min_data_ten[0] = 0x0000100;
 800446e:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[2] = 0x0000180;
 8004470:	18d2      	adds	r2, r2, r3
 8004472:	e7d5      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
			Month_Min_data_ten[0] = 0x0000100;
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000080;
 800447a:	3b80      	subs	r3, #128	@ 0x80
 800447c:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000180;
 800447e:	3301      	adds	r3, #1
 8004480:	33ff      	adds	r3, #255	@ 0xff
			Month_Min_data_ten[2] = 0x0000180;
 8004482:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000180;
 8004484:	e7e4      	b.n	8004450 <LCD_Display_Month_Min_Number+0x70>
			Month_Min_data_ten[0] = 0x0000100;
 8004486:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 8004488:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 800448a:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000180;
 800448c:	0052      	lsls	r2, r2, #1
			Month_Min_data_ten[0] = 0x0000100;
 800448e:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 8004490:	9201      	str	r2, [sp, #4]
 8004492:	e7ca      	b.n	800442a <LCD_Display_Month_Min_Number+0x4a>
			Month_Min_data_ten[0] = 0x0000100;
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 800449a:	3380      	adds	r3, #128	@ 0x80
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	e7f0      	b.n	8004482 <LCD_Display_Month_Min_Number+0xa2>
			Month_Min_data_ten[0] = 0x0000100;
 80044a0:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 80044a2:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 80044a4:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000180;
 80044a6:	0052      	lsls	r2, r2, #1
			Month_Min_data_ten[0] = 0x0000100;
 80044a8:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 80044aa:	9201      	str	r2, [sp, #4]
 80044ac:	e7b8      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
    {
    	case 0:
        	Month_Min_data_one[0] = 0x0200000;
 80044ae:	2280      	movs	r2, #128	@ 0x80
        	Month_Min_data_one[1] = 0x0200200;
 80044b0:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
        	Month_Min_data_one[0] = 0x0200000;
 80044b2:	0392      	lsls	r2, r2, #14
 80044b4:	9204      	str	r2, [sp, #16]
        	Month_Min_data_one[1] = 0x0200200;
 80044b6:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Month_Min_data_one[0] = 0x0200000;
			Month_Min_data_one[1] = 0x0200200;
			Month_Min_data_one[2] = 0x0200200;
 80044b8:	60a2      	str	r2, [r4, #8]
 80044ba:	e016      	b.n	80044ea <LCD_Display_Month_Min_Number+0x10a>
    		Month_Min_data_one[1] = 0x0200000;
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	039b      	lsls	r3, r3, #14
			Month_Min_data_one[1] = 0x0200200;
 80044c0:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 80044c2:	60a3      	str	r3, [r4, #8]
{
 80044c4:	2300      	movs	r3, #0
			Month_Min_data_one[3] = 0x0200000;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Month_Min_data_ten[i] | Month_Min_data_one[i];
 80044c6:	466a      	mov	r2, sp
 80044c8:	58e1      	ldr	r1, [r4, r3]
 80044ca:	58d2      	ldr	r2, [r2, r3]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 80044d0:	3304      	adds	r3, #4
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d1f7      	bne.n	80044c6 <LCD_Display_Month_Min_Number+0xe6>
    }
}
 80044d6:	b009      	add	sp, #36	@ 0x24
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Month_Min_data_one[0] = 0x0200000;
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	039b      	lsls	r3, r3, #14
 80044de:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200000;
 80044e0:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0000200;
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	60a3      	str	r3, [r4, #8]
			Month_Min_data_one[3] = 0x0200200;
 80044e8:	4b16      	ldr	r3, [pc, #88]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[3] = 0x0200000;
 80044ea:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 80044ec:	e7ea      	b.n	80044c4 <LCD_Display_Month_Min_Number+0xe4>
			Month_Min_data_one[0] = 0x0200000;
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	039b      	lsls	r3, r3, #14
 80044f2:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200000;
 80044f4:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 80044f6:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 80044f8:	e7de      	b.n	80044b8 <LCD_Display_Month_Min_Number+0xd8>
			Month_Min_data_one[1] = 0x0200200;
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 80044fc:	e7e0      	b.n	80044c0 <LCD_Display_Month_Min_Number+0xe0>
			Month_Min_data_one[0] = 0x0200000;
 80044fe:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0000200;
 8004500:	2280      	movs	r2, #128	@ 0x80
			Month_Min_data_one[0] = 0x0200000;
 8004502:	039b      	lsls	r3, r3, #14
			Month_Min_data_one[1] = 0x0000200;
 8004504:	0092      	lsls	r2, r2, #2
			Month_Min_data_one[0] = 0x0200000;
 8004506:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0000200;
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	e7f4      	b.n	80044f6 <LCD_Display_Month_Min_Number+0x116>
			Month_Min_data_one[0] = 0x0200000;
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	039b      	lsls	r3, r3, #14
 8004510:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0000200;
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[2] = 0x0200200;
 800451a:	60a3      	str	r3, [r4, #8]
			Month_Min_data_one[3] = 0x0200200;
 800451c:	e7e5      	b.n	80044ea <LCD_Display_Month_Min_Number+0x10a>
			Month_Min_data_one[0] = 0x0200000;
 800451e:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0200200;
 8004520:	4a08      	ldr	r2, [pc, #32]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[0] = 0x0200000;
 8004522:	039b      	lsls	r3, r3, #14
 8004524:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 8004526:	6062      	str	r2, [r4, #4]
			Month_Min_data_one[2] = 0x0200000;
 8004528:	e7cb      	b.n	80044c2 <LCD_Display_Month_Min_Number+0xe2>
			Month_Min_data_one[0] = 0x0200000;
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	039b      	lsls	r3, r3, #14
 800452e:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 8004530:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	e7f1      	b.n	800451a <LCD_Display_Month_Min_Number+0x13a>
			Month_Min_data_one[0] = 0x0200000;
 8004536:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0200200;
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[0] = 0x0200000;
 800453a:	039b      	lsls	r3, r3, #14
 800453c:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 800453e:	6062      	str	r2, [r4, #4]
 8004540:	e7ba      	b.n	80044b8 <LCD_Display_Month_Min_Number+0xd8>
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	00200200 	.word	0x00200200

08004548 <LCD_DigitNumber_Month_Min_Calculate>:
{
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	000e      	movs	r6, r1
    ones      = number % 10;
 800454c:	210a      	movs	r1, #10
{
 800454e:	0004      	movs	r4, r0
    ones      = number % 10;
 8004550:	f7fb fe90 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 8004554:	0020      	movs	r0, r4
    LCD_Display_Month_Min_Number(tens, ones, data);
 8004556:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 8004558:	210a      	movs	r1, #10
 800455a:	f7fb fe05 	bl	8000168 <__udivsi3>
    LCD_Display_Month_Min_Number(tens, ones, data);
 800455e:	0032      	movs	r2, r6
 8004560:	0029      	movs	r1, r5
 8004562:	b2c0      	uxtb	r0, r0
 8004564:	f7ff ff3c 	bl	80043e0 <LCD_Display_Month_Min_Number>
}
 8004568:	bd70      	pop	{r4, r5, r6, pc}

0800456a <LCD_Display_Day_Sec_Number>:

void LCD_Display_Day_Sec_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 800456a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456c:	b089      	sub	sp, #36	@ 0x24
 800456e:	0007      	movs	r7, r0
 8004570:	000d      	movs	r5, r1
 8004572:	0016      	movs	r6, r2
	uint32_t Day_Sec_data_ten[4] = {0};
 8004574:	2100      	movs	r1, #0
 8004576:	2210      	movs	r2, #16
 8004578:	4668      	mov	r0, sp
	uint32_t Day_Sec_data_one[4] = {0};
 800457a:	ac04      	add	r4, sp, #16
	uint32_t Day_Sec_data_ten[4] = {0};
 800457c:	f016 f8ea 	bl	801a754 <memset>
	uint32_t Day_Sec_data_one[4] = {0};
 8004580:	2210      	movs	r2, #16
 8004582:	2100      	movs	r1, #0
 8004584:	0020      	movs	r0, r4
 8004586:	f016 f8e5 	bl	801a754 <memset>

    switch (tens)
 800458a:	2f09      	cmp	r7, #9
 800458c:	d813      	bhi.n	80045b6 <LCD_Display_Day_Sec_Number+0x4c>
 800458e:	0038      	movs	r0, r7
 8004590:	f7fb fdcc 	bl	800012c <__gnu_thumb1_case_uqi>
 8004594:	261b0d05 	.word	0x261b0d05
 8004598:	40362f2d 	.word	0x40362f2d
 800459c:	4e47      	.short	0x4e47
    {
    	case 0:
        	Day_Sec_data_ten[0] = 0x0080000;
 800459e:	2280      	movs	r2, #128	@ 0x80
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a0:	2390      	movs	r3, #144	@ 0x90
        	Day_Sec_data_ten[0] = 0x0080000;
 80045a2:	0312      	lsls	r2, r2, #12
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a4:	031b      	lsls	r3, r3, #12
        	Day_Sec_data_ten[0] = 0x0080000;
 80045a6:	9200      	str	r2, [sp, #0]
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a8:	9301      	str	r3, [sp, #4]
			break;

		case 9:
			Day_Sec_data_ten[0] = 0x0080000;
			Day_Sec_data_ten[1] = 0x0090000;
			Day_Sec_data_ten[2] = 0x0090000;
 80045aa:	9202      	str	r2, [sp, #8]
 80045ac:	e016      	b.n	80045dc <LCD_Display_Day_Sec_Number+0x72>
    		Day_Sec_data_ten[1] = 0x0080000;
 80045ae:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 80045b0:	031b      	lsls	r3, r3, #12
 80045b2:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0080000;
 80045b4:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 80045b6:	2d09      	cmp	r5, #9
 80045b8:	d84a      	bhi.n	8004650 <LCD_Display_Day_Sec_Number+0xe6>
 80045ba:	0028      	movs	r0, r5
 80045bc:	f7fb fdb6 	bl	800012c <__gnu_thumb1_case_uqi>
 80045c0:	5b53453f 	.word	0x5b53453f
 80045c4:	6e676260 	.word	0x6e676260
 80045c8:	7873      	.short	0x7873
			Day_Sec_data_ten[0] = 0x0080000;
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	031b      	lsls	r3, r3, #12
 80045ce:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0080000;
 80045d0:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0010000;
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0090000;
 80045d8:	2390      	movs	r3, #144	@ 0x90
 80045da:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[3] = 0x0080000;
 80045dc:	9303      	str	r3, [sp, #12]
			break;
 80045de:	e7ea      	b.n	80045b6 <LCD_Display_Day_Sec_Number+0x4c>
			Day_Sec_data_ten[0] = 0x0080000;
 80045e0:	2380      	movs	r3, #128	@ 0x80
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0080000;
 80045e6:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0090000;
 80045e8:	2290      	movs	r2, #144	@ 0x90
 80045ea:	0312      	lsls	r2, r2, #12
 80045ec:	e7dd      	b.n	80045aa <LCD_Display_Day_Sec_Number+0x40>
			Day_Sec_data_ten[1] = 0x0090000;
 80045ee:	2390      	movs	r3, #144	@ 0x90
 80045f0:	e7de      	b.n	80045b0 <LCD_Display_Day_Sec_Number+0x46>
			Day_Sec_data_ten[0] = 0x0080000;
 80045f2:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0010000;
 80045f4:	2280      	movs	r2, #128	@ 0x80
			Day_Sec_data_ten[0] = 0x0080000;
 80045f6:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0010000;
 80045f8:	0252      	lsls	r2, r2, #9
			Day_Sec_data_ten[0] = 0x0080000;
 80045fa:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0010000;
 80045fc:	9201      	str	r2, [sp, #4]
 80045fe:	e7f3      	b.n	80045e8 <LCD_Display_Day_Sec_Number+0x7e>
			Day_Sec_data_ten[0] = 0x0080000;
 8004600:	2380      	movs	r3, #128	@ 0x80
 8004602:	031b      	lsls	r3, r3, #12
 8004604:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0010000;
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	025b      	lsls	r3, r3, #9
 800460a:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0090000;
 800460c:	2390      	movs	r3, #144	@ 0x90
 800460e:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[2] = 0x0090000;
 8004610:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0090000;
 8004612:	e7e3      	b.n	80045dc <LCD_Display_Day_Sec_Number+0x72>
			Day_Sec_data_ten[0] = 0x0080000;
 8004614:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 8004616:	2290      	movs	r2, #144	@ 0x90
			Day_Sec_data_ten[0] = 0x0080000;
 8004618:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0090000;
 800461a:	0312      	lsls	r2, r2, #12
			Day_Sec_data_ten[0] = 0x0080000;
 800461c:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 800461e:	9201      	str	r2, [sp, #4]
 8004620:	e7c8      	b.n	80045b4 <LCD_Display_Day_Sec_Number+0x4a>
			Day_Sec_data_ten[0] = 0x0080000;
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 8004628:	2390      	movs	r3, #144	@ 0x90
 800462a:	031b      	lsls	r3, r3, #12
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	e7ef      	b.n	8004610 <LCD_Display_Day_Sec_Number+0xa6>
			Day_Sec_data_ten[0] = 0x0080000;
 8004630:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 8004632:	2290      	movs	r2, #144	@ 0x90
			Day_Sec_data_ten[0] = 0x0080000;
 8004634:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0090000;
 8004636:	0312      	lsls	r2, r2, #12
			Day_Sec_data_ten[0] = 0x0080000;
 8004638:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	e7b5      	b.n	80045aa <LCD_Display_Day_Sec_Number+0x40>
    {
    	case 0:
        	Day_Sec_data_one[0] = 0x0000002;
 800463e:	2202      	movs	r2, #2
        	Day_Sec_data_one[1] = 0x0000003;
 8004640:	2303      	movs	r3, #3
        	Day_Sec_data_one[0] = 0x0000002;
 8004642:	9204      	str	r2, [sp, #16]
        	Day_Sec_data_one[1] = 0x0000003;
 8004644:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Day_Sec_data_one[0] = 0x0000002;
			Day_Sec_data_one[1] = 0x0000003;
			Day_Sec_data_one[2] = 0x0000003;
 8004646:	60a2      	str	r2, [r4, #8]
 8004648:	e013      	b.n	8004672 <LCD_Display_Day_Sec_Number+0x108>
    		Day_Sec_data_one[1] = 0x0000002;
 800464a:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 800464c:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800464e:	60a3      	str	r3, [r4, #8]
{
 8004650:	2300      	movs	r3, #0
			Day_Sec_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Day_Sec_data_ten[i] | Day_Sec_data_one[i];
 8004652:	466a      	mov	r2, sp
 8004654:	58e1      	ldr	r1, [r4, r3]
 8004656:	58d2      	ldr	r2, [r2, r3]
 8004658:	430a      	orrs	r2, r1
 800465a:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 800465c:	3304      	adds	r3, #4
 800465e:	2b10      	cmp	r3, #16
 8004660:	d1f7      	bne.n	8004652 <LCD_Display_Day_Sec_Number+0xe8>
    }
}
 8004662:	b009      	add	sp, #36	@ 0x24
 8004664:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Day_Sec_data_one[0] = 0x0000002;
 8004666:	2302      	movs	r3, #2
 8004668:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000002;
 800466a:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000001;
 800466c:	3b01      	subs	r3, #1
 800466e:	60a3      	str	r3, [r4, #8]
			Day_Sec_data_one[3] = 0x0000003;
 8004670:	3302      	adds	r3, #2
			Day_Sec_data_one[3] = 0x0000002;
 8004672:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 8004674:	e7ec      	b.n	8004650 <LCD_Display_Day_Sec_Number+0xe6>
			Day_Sec_data_one[0] = 0x0000002;
 8004676:	2302      	movs	r3, #2
 8004678:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000002;
 800467a:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800467c:	2203      	movs	r2, #3
 800467e:	e7e2      	b.n	8004646 <LCD_Display_Day_Sec_Number+0xdc>
			Day_Sec_data_one[1] = 0x0000003;
 8004680:	2303      	movs	r3, #3
 8004682:	e7e3      	b.n	800464c <LCD_Display_Day_Sec_Number+0xe2>
			Day_Sec_data_one[0] = 0x0000002;
 8004684:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000001;
 8004686:	2201      	movs	r2, #1
			Day_Sec_data_one[0] = 0x0000002;
 8004688:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000001;
 800468a:	6062      	str	r2, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800468c:	e7f6      	b.n	800467c <LCD_Display_Day_Sec_Number+0x112>
			Day_Sec_data_one[0] = 0x0000002;
 800468e:	2302      	movs	r3, #2
 8004690:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000001;
 8004692:	3b01      	subs	r3, #1
 8004694:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 8004696:	3302      	adds	r3, #2
			Day_Sec_data_one[2] = 0x0000003;
 8004698:	60a3      	str	r3, [r4, #8]
			Day_Sec_data_one[3] = 0x0000003;
 800469a:	e7ea      	b.n	8004672 <LCD_Display_Day_Sec_Number+0x108>
			Day_Sec_data_one[0] = 0x0000002;
 800469c:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 800469e:	2203      	movs	r2, #3
			Day_Sec_data_one[0] = 0x0000002;
 80046a0:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046a2:	6062      	str	r2, [r4, #4]
			Day_Sec_data_one[2] = 0x0000002;
 80046a4:	e7d3      	b.n	800464e <LCD_Display_Day_Sec_Number+0xe4>
			Day_Sec_data_one[0] = 0x0000002;
 80046a6:	2302      	movs	r3, #2
 80046a8:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046aa:	3301      	adds	r3, #1
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	e7f3      	b.n	8004698 <LCD_Display_Day_Sec_Number+0x12e>
			Day_Sec_data_one[0] = 0x0000002;
 80046b0:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 80046b2:	2203      	movs	r2, #3
			Day_Sec_data_one[0] = 0x0000002;
 80046b4:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046b6:	6062      	str	r2, [r4, #4]
 80046b8:	e7c5      	b.n	8004646 <LCD_Display_Day_Sec_Number+0xdc>

080046ba <LCD_DigitNumber_Day_Sec_Calculate>:
{
 80046ba:	b570      	push	{r4, r5, r6, lr}
 80046bc:	000e      	movs	r6, r1
    ones      = number % 10;
 80046be:	210a      	movs	r1, #10
{
 80046c0:	0004      	movs	r4, r0
    ones      = number % 10;
 80046c2:	f7fb fdd7 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 80046c6:	0020      	movs	r0, r4
    LCD_Display_Day_Sec_Number(tens, ones, data);
 80046c8:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 80046ca:	210a      	movs	r1, #10
 80046cc:	f7fb fd4c 	bl	8000168 <__udivsi3>
    LCD_Display_Day_Sec_Number(tens, ones, data);
 80046d0:	0032      	movs	r2, r6
 80046d2:	0029      	movs	r1, r5
 80046d4:	b2c0      	uxtb	r0, r0
 80046d6:	f7ff ff48 	bl	800456a <LCD_Display_Day_Sec_Number>
}
 80046da:	bd70      	pop	{r4, r5, r6, pc}

080046dc <LCD_Display_date>:
{
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_LCD_Clear(&hlcd);
 80046de:	4e40      	ldr	r6, [pc, #256]	@ (80047e0 <LCD_Display_date+0x104>)
{
 80046e0:	b097      	sub	sp, #92	@ 0x5c
 80046e2:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 80046e4:	0030      	movs	r0, r6
 80046e6:	f00b f9d6 	bl	800fa96 <HAL_LCD_Clear>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80046ea:	4d3e      	ldr	r5, [pc, #248]	@ (80047e4 <LCD_Display_date+0x108>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	0028      	movs	r0, r5
 80046f0:	a911      	add	r1, sp, #68	@ 0x44
 80046f2:	f00d fd71 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80046f6:	0028      	movs	r0, r5
    uint8_t month = BCD2BIN(sDate.Month);
 80046f8:	250a      	movs	r5, #10
 80046fa:	270f      	movs	r7, #15
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80046fc:	2201      	movs	r2, #1
 80046fe:	a904      	add	r1, sp, #16
 8004700:	f00d fd9c 	bl	801223c <HAL_RTC_GetDate>
    uint8_t year  = BCD2BIN(sDate.Year);
 8004704:	ab04      	add	r3, sp, #16
 8004706:	78db      	ldrb	r3, [r3, #3]
	uint32_t data_year[4] = {0};
 8004708:	2100      	movs	r1, #0
    uint8_t year  = BCD2BIN(sDate.Year);
 800470a:	9301      	str	r3, [sp, #4]
    uint8_t month = BCD2BIN(sDate.Month);
 800470c:	ab04      	add	r3, sp, #16
 800470e:	785a      	ldrb	r2, [r3, #1]
	uint32_t data_year[4] = {0};
 8004710:	a805      	add	r0, sp, #20
    uint8_t month = BCD2BIN(sDate.Month);
 8004712:	0913      	lsrs	r3, r2, #4
 8004714:	436b      	muls	r3, r5
 8004716:	403a      	ands	r2, r7
 8004718:	189b      	adds	r3, r3, r2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	9302      	str	r3, [sp, #8]
    uint8_t day   = BCD2BIN(sDate.Date);
 800471e:	ab04      	add	r3, sp, #16
 8004720:	789a      	ldrb	r2, [r3, #2]
 8004722:	0913      	lsrs	r3, r2, #4
 8004724:	436b      	muls	r3, r5
 8004726:	403a      	ands	r2, r7
 8004728:	189b      	adds	r3, r3, r2
 800472a:	b2db      	uxtb	r3, r3
	uint32_t data_year[4] = {0};
 800472c:	2210      	movs	r2, #16
    uint8_t day   = BCD2BIN(sDate.Date);
 800472e:	9303      	str	r3, [sp, #12]
	uint32_t data_year[4] = {0};
 8004730:	f016 f810 	bl	801a754 <memset>
	uint32_t data_month[4] = {0};
 8004734:	2210      	movs	r2, #16
 8004736:	2100      	movs	r1, #0
 8004738:	a809      	add	r0, sp, #36	@ 0x24
 800473a:	f016 f80b 	bl	801a754 <memset>
	uint32_t data_day[4] = {0};
 800473e:	2210      	movs	r2, #16
 8004740:	2100      	movs	r1, #0
 8004742:	a80d      	add	r0, sp, #52	@ 0x34
 8004744:	f016 f806 	bl	801a754 <memset>
    uint8_t year  = BCD2BIN(sDate.Year);
 8004748:	9b01      	ldr	r3, [sp, #4]
 800474a:	9801      	ldr	r0, [sp, #4]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	435d      	muls	r5, r3
 8004750:	4038      	ands	r0, r7
 8004752:	1828      	adds	r0, r5, r0
	LCD_DigitNumber_Year_Hour_Calculate(year, data_year);
 8004754:	b2c0      	uxtb	r0, r0
 8004756:	a905      	add	r1, sp, #20
 8004758:	f7ff fe30 	bl	80043bc <LCD_DigitNumber_Year_Hour_Calculate>
	LCD_DigitNumber_Month_Min_Calculate(month, data_month);
 800475c:	9802      	ldr	r0, [sp, #8]
 800475e:	a909      	add	r1, sp, #36	@ 0x24
 8004760:	f7ff fef2 	bl	8004548 <LCD_DigitNumber_Month_Min_Calculate>
	LCD_DigitNumber_Day_Sec_Calculate(day, data_day);
 8004764:	9803      	ldr	r0, [sp, #12]
 8004766:	a90d      	add	r1, sp, #52	@ 0x34
 8004768:	f7ff ffa7 	bl	80046ba <LCD_DigitNumber_Day_Sec_Calculate>
 800476c:	2300      	movs	r3, #0
		data[i] = data_year[i] | data_month[i] | data_day[i];
 800476e:	2014      	movs	r0, #20
 8004770:	a904      	add	r1, sp, #16
 8004772:	1809      	adds	r1, r1, r0
 8004774:	aa05      	add	r2, sp, #20
 8004776:	58c9      	ldr	r1, [r1, r3]
 8004778:	58d2      	ldr	r2, [r2, r3]
 800477a:	3010      	adds	r0, #16
 800477c:	430a      	orrs	r2, r1
 800477e:	a904      	add	r1, sp, #16
 8004780:	1809      	adds	r1, r1, r0
 8004782:	58c9      	ldr	r1, [r1, r3]
 8004784:	430a      	orrs	r2, r1
 8004786:	50e2      	str	r2, [r4, r3]
	for(int i = 0; i<4; i++)
 8004788:	3304      	adds	r3, #4
 800478a:	2b10      	cmp	r3, #16
 800478c:	d1ef      	bne.n	800476e <LCD_Display_date+0x92>
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <LCD_Display_date+0x10c>)
	data[1] = data[1] | 0x100E020;
 8004792:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 8004794:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x100E020;
 8004796:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <LCD_Display_date+0x110>)
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 8004798:	6023      	str	r3, [r4, #0]
	data[1] = data[1] | 0x100E020;
 800479a:	430a      	orrs	r2, r1
 800479c:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300E020;
 800479e:	68a1      	ldr	r1, [r4, #8]
 80047a0:	4a13      	ldr	r2, [pc, #76]	@ (80047f0 <LCD_Display_date+0x114>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80047a2:	0030      	movs	r0, r6
	data[2] = data[2] | 0x300E020;
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x300B060;
 80047a8:	68e1      	ldr	r1, [r4, #12]
 80047aa:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <LCD_Display_date+0x118>)
 80047ac:	430a      	orrs	r2, r1
 80047ae:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80047b0:	2100      	movs	r1, #0
 80047b2:	4a11      	ldr	r2, [pc, #68]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047b4:	f00b f90e 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80047b8:	6863      	ldr	r3, [r4, #4]
 80047ba:	2102      	movs	r1, #2
 80047bc:	0030      	movs	r0, r6
 80047be:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047c0:	f00b f908 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	2104      	movs	r1, #4
 80047c8:	0030      	movs	r0, r6
 80047ca:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047cc:	f00b f902 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80047d0:	2106      	movs	r1, #6
 80047d2:	0030      	movs	r0, r6
 80047d4:	68e3      	ldr	r3, [r4, #12]
 80047d6:	4a08      	ldr	r2, [pc, #32]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047d8:	f00b f8fc 	bl	800f9d4 <HAL_LCD_Write>
}
 80047dc:	b017      	add	sp, #92	@ 0x5c
 80047de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e0:	20000a80 	.word	0x20000a80
 80047e4:	200009f8 	.word	0x200009f8
 80047e8:	000140c0 	.word	0x000140c0
 80047ec:	0100e020 	.word	0x0100e020
 80047f0:	0300e020 	.word	0x0300e020
 80047f4:	0300b060 	.word	0x0300b060
 80047f8:	f7fffffe 	.word	0xf7fffffe

080047fc <LCD_Display_Time>:
{
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_LCD_Clear(&hlcd);
 80047fe:	4e3f      	ldr	r6, [pc, #252]	@ (80048fc <LCD_Display_Time+0x100>)
{
 8004800:	b097      	sub	sp, #92	@ 0x5c
 8004802:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004804:	0030      	movs	r0, r6
 8004806:	f00b f946 	bl	800fa96 <HAL_LCD_Clear>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800480a:	4d3d      	ldr	r5, [pc, #244]	@ (8004900 <LCD_Display_Time+0x104>)
 800480c:	af11      	add	r7, sp, #68	@ 0x44
 800480e:	0039      	movs	r1, r7
 8004810:	2201      	movs	r2, #1
 8004812:	0028      	movs	r0, r5
 8004814:	f00d fce0 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8004818:	0028      	movs	r0, r5
    uint8_t minute = BCD2BIN(sTime.Minutes);
 800481a:	250a      	movs	r5, #10
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800481c:	2201      	movs	r2, #1
 800481e:	a904      	add	r1, sp, #16
 8004820:	f00d fd0c 	bl	801223c <HAL_RTC_GetDate>
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8004824:	210f      	movs	r1, #15
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8004826:	783b      	ldrb	r3, [r7, #0]
	uint32_t data_hour[4] = {0};
 8004828:	a805      	add	r0, sp, #20
    uint8_t hour   = BCD2BIN(sTime.Hours);
 800482a:	9301      	str	r3, [sp, #4]
    uint8_t minute = BCD2BIN(sTime.Minutes);
 800482c:	787a      	ldrb	r2, [r7, #1]
 800482e:	0913      	lsrs	r3, r2, #4
 8004830:	436b      	muls	r3, r5
 8004832:	400a      	ands	r2, r1
 8004834:	189b      	adds	r3, r3, r2
 8004836:	b2db      	uxtb	r3, r3
 8004838:	9302      	str	r3, [sp, #8]
    uint8_t second = BCD2BIN(sTime.Seconds);
 800483a:	78ba      	ldrb	r2, [r7, #2]
	uint32_t data_sec[4] = {0};
 800483c:	af0d      	add	r7, sp, #52	@ 0x34
    uint8_t second = BCD2BIN(sTime.Seconds);
 800483e:	0913      	lsrs	r3, r2, #4
 8004840:	436b      	muls	r3, r5
 8004842:	400a      	ands	r2, r1
 8004844:	189b      	adds	r3, r3, r2
 8004846:	b2db      	uxtb	r3, r3
	uint32_t data_hour[4] = {0};
 8004848:	2210      	movs	r2, #16
 800484a:	2100      	movs	r1, #0
    uint8_t second = BCD2BIN(sTime.Seconds);
 800484c:	9303      	str	r3, [sp, #12]
	uint32_t data_hour[4] = {0};
 800484e:	f015 ff81 	bl	801a754 <memset>
	uint32_t data_min[4] = {0};
 8004852:	2210      	movs	r2, #16
 8004854:	2100      	movs	r1, #0
 8004856:	a809      	add	r0, sp, #36	@ 0x24
 8004858:	f015 ff7c 	bl	801a754 <memset>
	uint32_t data_sec[4] = {0};
 800485c:	2210      	movs	r2, #16
 800485e:	2100      	movs	r1, #0
 8004860:	0038      	movs	r0, r7
 8004862:	f015 ff77 	bl	801a754 <memset>
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8004866:	210f      	movs	r1, #15
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	9801      	ldr	r0, [sp, #4]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	435d      	muls	r5, r3
 8004870:	4008      	ands	r0, r1
 8004872:	1828      	adds	r0, r5, r0
	LCD_DigitNumber_Year_Hour_Calculate(hour, data_hour);
 8004874:	b2c0      	uxtb	r0, r0
 8004876:	a905      	add	r1, sp, #20
 8004878:	f7ff fda0 	bl	80043bc <LCD_DigitNumber_Year_Hour_Calculate>
	LCD_DigitNumber_Month_Min_Calculate(minute, data_min);
 800487c:	9802      	ldr	r0, [sp, #8]
 800487e:	a909      	add	r1, sp, #36	@ 0x24
 8004880:	f7ff fe62 	bl	8004548 <LCD_DigitNumber_Month_Min_Calculate>
	LCD_DigitNumber_Day_Sec_Calculate(second, data_sec);
 8004884:	0039      	movs	r1, r7
 8004886:	9803      	ldr	r0, [sp, #12]
 8004888:	f7ff ff17 	bl	80046ba <LCD_DigitNumber_Day_Sec_Calculate>
 800488c:	2300      	movs	r3, #0
		data[i] = data_hour[i] | data_min[i] | data_sec[i];
 800488e:	2014      	movs	r0, #20
 8004890:	a904      	add	r1, sp, #16
 8004892:	aa05      	add	r2, sp, #20
 8004894:	1809      	adds	r1, r1, r0
 8004896:	58c9      	ldr	r1, [r1, r3]
 8004898:	58d2      	ldr	r2, [r2, r3]
 800489a:	430a      	orrs	r2, r1
 800489c:	58f9      	ldr	r1, [r7, r3]
 800489e:	430a      	orrs	r2, r1
 80048a0:	50e2      	str	r2, [r4, r3]
	for(int i = 0; i<4; i++)
 80048a2:	3304      	adds	r3, #4
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d1f2      	bne.n	800488e <LCD_Display_Time+0x92>
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <LCD_Display_Time+0x108>)
	data[1] = data[1] | 0x3000020;
 80048ac:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048ae:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x3000020;
 80048b0:	4a15      	ldr	r2, [pc, #84]	@ (8004908 <LCD_Display_Time+0x10c>)
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048b2:	6023      	str	r3, [r4, #0]
	data[1] = data[1] | 0x3000020;
 80048b4:	430a      	orrs	r2, r1
 80048b6:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300A060;
 80048b8:	68a1      	ldr	r1, [r4, #8]
 80048ba:	4a14      	ldr	r2, [pc, #80]	@ (800490c <LCD_Display_Time+0x110>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80048bc:	0030      	movs	r0, r6
	data[2] = data[2] | 0x300A060;
 80048be:	430a      	orrs	r2, r1
 80048c0:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x2000040;
 80048c2:	68e1      	ldr	r1, [r4, #12]
 80048c4:	4a12      	ldr	r2, [pc, #72]	@ (8004910 <LCD_Display_Time+0x114>)
 80048c6:	430a      	orrs	r2, r1
 80048c8:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80048ca:	2100      	movs	r1, #0
 80048cc:	4a11      	ldr	r2, [pc, #68]	@ (8004914 <LCD_Display_Time+0x118>)
 80048ce:	f00b f881 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	2102      	movs	r1, #2
 80048d6:	0030      	movs	r0, r6
 80048d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004914 <LCD_Display_Time+0x118>)
 80048da:	f00b f87b 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	2104      	movs	r1, #4
 80048e2:	0030      	movs	r0, r6
 80048e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004914 <LCD_Display_Time+0x118>)
 80048e6:	f00b f875 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80048ea:	2106      	movs	r1, #6
 80048ec:	0030      	movs	r0, r6
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <LCD_Display_Time+0x118>)
 80048f2:	f00b f86f 	bl	800f9d4 <HAL_LCD_Write>
}
 80048f6:	b017      	add	sp, #92	@ 0x5c
 80048f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	20000a80 	.word	0x20000a80
 8004900:	200009f8 	.word	0x200009f8
 8004904:	000100c0 	.word	0x000100c0
 8004908:	03000020 	.word	0x03000020
 800490c:	0300a060 	.word	0x0300a060
 8004910:	02000040 	.word	0x02000040
 8004914:	f7fffffe 	.word	0xf7fffffe

08004918 <LCD_Display_Battery>:
////////////////////////////////////////////배터리//////////////////////////////////////////
void LCD_Display_Battery(uint8_t battery_status, uint32_t *data)
{
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	000c      	movs	r4, r1
	if(battery_status == 0)
	{
		data[0] = data[0] | 0x0000800;
 800491c:	6809      	ldr	r1, [r1, #0]
 800491e:	2803      	cmp	r0, #3
 8004920:	d810      	bhi.n	8004944 <LCD_Display_Battery+0x2c>
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	68e2      	ldr	r2, [r4, #12]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	f7fb fc00 	bl	800012c <__gnu_thumb1_case_uqi>
 800492c:	2a260402 	.word	0x2a260402
 8004930:	4319      	orrs	r1, r3
 8004932:	6021      	str	r1, [r4, #0]
		//배터리 3칸 + 배터리박스 on
	}
	else if(battery_status == 1)
	{
		data[0] = data[0] | 0x0000000;
		data[1] = data[1] | 0x0000800;
 8004934:	6861      	ldr	r1, [r4, #4]
 8004936:	4319      	orrs	r1, r3
 8004938:	6061      	str	r1, [r4, #4]
		data[2] = data[2] | 0x0000800;
 800493a:	68a1      	ldr	r1, [r4, #8]
 800493c:	4319      	orrs	r1, r3
 800493e:	60a1      	str	r1, [r4, #8]
	else if(battery_status == 2)
	{
		data[0] = data[0] | 0x0000000;
		data[1] = data[1] | 0x0000800;
		data[2] = data[2] | 0x0000000;
		data[3] = data[3] | 0x0000800;
 8004940:	431a      	orrs	r2, r3
 8004942:	60e2      	str	r2, [r4, #12]
		data[1] = data[1] | 0x0000000;
		data[2] = data[2] | 0x0000000;
		data[3] = data[3] | 0x0000800;
		//배터리 0칸 + 배터리박스 on
	}
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004944:	4d10      	ldr	r5, [pc, #64]	@ (8004988 <LCD_Display_Battery+0x70>)
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	0028      	movs	r0, r5
 800494a:	2100      	movs	r1, #0
 800494c:	4a0f      	ldr	r2, [pc, #60]	@ (800498c <LCD_Display_Battery+0x74>)
 800494e:	f00b f841 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004952:	0028      	movs	r0, r5
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	2102      	movs	r1, #2
 8004958:	4a0c      	ldr	r2, [pc, #48]	@ (800498c <LCD_Display_Battery+0x74>)
 800495a:	f00b f83b 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 800495e:	0028      	movs	r0, r5
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	2104      	movs	r1, #4
 8004964:	4a09      	ldr	r2, [pc, #36]	@ (800498c <LCD_Display_Battery+0x74>)
 8004966:	f00b f835 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800496a:	0028      	movs	r0, r5
 800496c:	2106      	movs	r1, #6
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	4a06      	ldr	r2, [pc, #24]	@ (800498c <LCD_Display_Battery+0x74>)
 8004972:	f00b f82f 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004976:	bd70      	pop	{r4, r5, r6, pc}
		data[1] = data[1] | 0x0000800;
 8004978:	6861      	ldr	r1, [r4, #4]
 800497a:	4319      	orrs	r1, r3
 800497c:	6061      	str	r1, [r4, #4]
 800497e:	e7df      	b.n	8004940 <LCD_Display_Battery+0x28>
		data[3] = data[3] | 0x0000800;
 8004980:	4313      	orrs	r3, r2
 8004982:	60e3      	str	r3, [r4, #12]
 8004984:	e7de      	b.n	8004944 <LCD_Display_Battery+0x2c>
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	20000a80 	.word	0x20000a80
 800498c:	f7fffffe 	.word	0xf7fffffe

08004990 <LCD_Display_USB>:

////////////////////////////////////////////usb//////////////////////////////////////////
void LCD_Display_USB(uint32_t *data)
{
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004994:	4d17      	ldr	r5, [pc, #92]	@ (80049f4 <LCD_Display_USB+0x64>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0004000;
	data[1] = data[1] | 0x300A000;
	data[2] = data[2] | 0x100F000;
	data[3] = data[3] | 0x3007000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004996:	4e18      	ldr	r6, [pc, #96]	@ (80049f8 <LCD_Display_USB+0x68>)
	HAL_LCD_Clear(&hlcd);
 8004998:	0028      	movs	r0, r5
 800499a:	f00b f87c 	bl	800fa96 <HAL_LCD_Clear>
	data[0] = data[0] | 0x0004000;
 800499e:	2380      	movs	r3, #128	@ 0x80
	data[1] = data[1] | 0x300A000;
 80049a0:	6861      	ldr	r1, [r4, #4]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <LCD_Display_USB+0x6c>)
	data[0] = data[0] | 0x0004000;
 80049a4:	01db      	lsls	r3, r3, #7
	data[1] = data[1] | 0x300A000;
 80049a6:	430a      	orrs	r2, r1
 80049a8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x100F000;
 80049aa:	68a1      	ldr	r1, [r4, #8]
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <LCD_Display_USB+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80049ae:	0028      	movs	r0, r5
	data[2] = data[2] | 0x100F000;
 80049b0:	430a      	orrs	r2, r1
 80049b2:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x3007000;
 80049b4:	68e1      	ldr	r1, [r4, #12]
 80049b6:	4a13      	ldr	r2, [pc, #76]	@ (8004a04 <LCD_Display_USB+0x74>)
	data[0] = data[0] | 0x0004000;
 80049b8:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x3007000;
 80049ba:	430a      	orrs	r2, r1
 80049bc:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80049be:	2100      	movs	r1, #0
 80049c0:	0032      	movs	r2, r6
 80049c2:	f00b f807 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80049c6:	0032      	movs	r2, r6
 80049c8:	0028      	movs	r0, r5
 80049ca:	6863      	ldr	r3, [r4, #4]
 80049cc:	2102      	movs	r1, #2
 80049ce:	f00b f801 	bl	800f9d4 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80049d2:	0032      	movs	r2, r6
 80049d4:	0028      	movs	r0, r5
 80049d6:	68a3      	ldr	r3, [r4, #8]
 80049d8:	2104      	movs	r1, #4
 80049da:	f00a fffb 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80049de:	0032      	movs	r2, r6
 80049e0:	2106      	movs	r1, #6
 80049e2:	0028      	movs	r0, r5
 80049e4:	68e3      	ldr	r3, [r4, #12]
 80049e6:	f00a fff5 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest(& hlcd);
 80049ea:	0028      	movs	r0, r5
 80049ec:	f00b f82f 	bl	800fa4e <HAL_LCD_UpdateDisplayRequest>
	//Usb 글자 on
}
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	20000a80 	.word	0x20000a80
 80049f8:	f7fffffe 	.word	0xf7fffffe
 80049fc:	0300a000 	.word	0x0300a000
 8004a00:	0100f000 	.word	0x0100f000
 8004a04:	03007000 	.word	0x03007000

08004a08 <LCD_Display_USB_Load>:

void LCD_Display_USB_Load(uint32_t *data)
{
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004a0c:	4d1a      	ldr	r5, [pc, #104]	@ (8004a78 <LCD_Display_USB_Load+0x70>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0004100;
	data[1] = data[1] | 0x320A188;
	data[2] = data[2] | 0x122F384;
	data[3] = data[3] | 0x322728C;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a0e:	4e1b      	ldr	r6, [pc, #108]	@ (8004a7c <LCD_Display_USB_Load+0x74>)
	HAL_LCD_Clear(&hlcd);
 8004a10:	0028      	movs	r0, r5
 8004a12:	f00b f840 	bl	800fa96 <HAL_LCD_Clear>
	data[0] = data[0] | 0x0004100;
 8004a16:	2382      	movs	r3, #130	@ 0x82
	data[1] = data[1] | 0x320A188;
 8004a18:	6861      	ldr	r1, [r4, #4]
 8004a1a:	4a19      	ldr	r2, [pc, #100]	@ (8004a80 <LCD_Display_USB_Load+0x78>)
	data[0] = data[0] | 0x0004100;
 8004a1c:	01db      	lsls	r3, r3, #7
	data[1] = data[1] | 0x320A188;
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x122F384;
 8004a22:	68a1      	ldr	r1, [r4, #8]
 8004a24:	4a17      	ldr	r2, [pc, #92]	@ (8004a84 <LCD_Display_USB_Load+0x7c>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a26:	0028      	movs	r0, r5
	data[2] = data[2] | 0x122F384;
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x322728C;
 8004a2c:	68e1      	ldr	r1, [r4, #12]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <LCD_Display_USB_Load+0x80>)
	data[0] = data[0] | 0x0004100;
 8004a30:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x322728C;
 8004a32:	430a      	orrs	r2, r1
 8004a34:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a36:	2100      	movs	r1, #0
 8004a38:	0032      	movs	r2, r6
 8004a3a:	f00a ffcb 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004a3e:	0032      	movs	r2, r6
 8004a40:	0028      	movs	r0, r5
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	2102      	movs	r1, #2
 8004a46:	f00a ffc5 	bl	800f9d4 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004a4a:	0032      	movs	r2, r6
 8004a4c:	0028      	movs	r0, r5
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	2104      	movs	r1, #4
 8004a52:	f00a ffbf 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004a56:	0032      	movs	r2, r6
 8004a58:	0028      	movs	r0, r5
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	2106      	movs	r1, #6
 8004a5e:	f00a ffb9 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	0152      	lsls	r2, r2, #5
 8004a66:	0013      	movs	r3, r2
 8004a68:	2107      	movs	r1, #7
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	f00a ffb2 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest(& hlcd);
 8004a70:	0028      	movs	r0, r5
 8004a72:	f00a ffec 	bl	800fa4e <HAL_LCD_UpdateDisplayRequest>
	//Usb LoAd글자 on
}
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	20000a80 	.word	0x20000a80
 8004a7c:	f7fffffe 	.word	0xf7fffffe
 8004a80:	0320a188 	.word	0x0320a188
 8004a84:	0122f384 	.word	0x0122f384
 8004a88:	0322728c 	.word	0x0322728c

08004a8c <LCD_Display_Boot>:
////////////////////////////////////////////나머지 글자 및 알람//////////////////////////////////////////
void LCD_Display_Boot(uint32_t *data)
{
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
	memset(data, 0, sizeof(data));
 8004a90:	2704      	movs	r7, #4
	HAL_LCD_Clear(&hlcd);
 8004a92:	4d17      	ldr	r5, [pc, #92]	@ (8004af0 <LCD_Display_Boot+0x64>)
	data[1] = data[1] | 0x2000020;
	data[2] = data[2] | 0x300F020;
	data[3] = data[3] | 0x300F060;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a94:	4e17      	ldr	r6, [pc, #92]	@ (8004af4 <LCD_Display_Boot+0x68>)
	HAL_LCD_Clear(&hlcd);
 8004a96:	0028      	movs	r0, r5
 8004a98:	f00a fffd 	bl	800fa96 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 8004a9c:	003a      	movs	r2, r7
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	0020      	movs	r0, r4
 8004aa2:	f015 fe57 	bl	801a754 <memset>
	data[1] = data[1] | 0x2000020;
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <LCD_Display_Boot+0x6c>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004aaa:	0028      	movs	r0, r5
	data[1] = data[1] | 0x2000020;
 8004aac:	4313      	orrs	r3, r2
 8004aae:	6063      	str	r3, [r4, #4]
	data[2] = data[2] | 0x300F020;
 8004ab0:	68a2      	ldr	r2, [r4, #8]
 8004ab2:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <LCD_Display_Boot+0x70>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60a3      	str	r3, [r4, #8]
	data[3] = data[3] | 0x300F060;
 8004ab8:	68e2      	ldr	r2, [r4, #12]
 8004aba:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <LCD_Display_Boot+0x74>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60e3      	str	r3, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	0032      	movs	r2, r6
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	f00a ff85 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004aca:	0032      	movs	r2, r6
 8004acc:	0028      	movs	r0, r5
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	f00a ff7f 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004ad6:	0032      	movs	r2, r6
 8004ad8:	0039      	movs	r1, r7
 8004ada:	0028      	movs	r0, r5
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	f00a ff79 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004ae2:	0032      	movs	r2, r6
 8004ae4:	0028      	movs	r0, r5
 8004ae6:	2106      	movs	r1, #6
 8004ae8:	68e3      	ldr	r3, [r4, #12]
 8004aea:	f00a ff73 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//boot 글자 on
}
 8004aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af0:	20000a80 	.word	0x20000a80
 8004af4:	f7fffffe 	.word	0xf7fffffe
 8004af8:	02000020 	.word	0x02000020
 8004afc:	0300f020 	.word	0x0300f020
 8004b00:	0300f060 	.word	0x0300f060

08004b04 <Blank_Dose_Display>:

void Blank_Dose_Display(uint32_t *data)
{
 8004b04:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x200A020;
 8004b06:	6882      	ldr	r2, [r0, #8]
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <Blank_Dose_Display+0x18>)
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b0a:	2104      	movs	r1, #4
	data[2] = data[2] | 0x200A020;
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b10:	4a03      	ldr	r2, [pc, #12]	@ (8004b20 <Blank_Dose_Display+0x1c>)
 8004b12:	4804      	ldr	r0, [pc, #16]	@ (8004b24 <Blank_Dose_Display+0x20>)
 8004b14:	f00a ff5e 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//dose값 나오기전 '----' 표시
}
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	0200a020 	.word	0x0200a020
 8004b20:	f7fffffe 	.word	0xf7fffffe
 8004b24:	20000a80 	.word	0x20000a80

08004b28 <LCD_Display_StopMode>:
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//start 글자, REC 표시
}

void LCD_Display_StopMode(uint32_t *data)
{
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004b2c:	4d1f      	ldr	r5, [pc, #124]	@ (8004bac <LCD_Display_StopMode+0x84>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0200100;
	data[1] = data[1] | 0x020038C;
	data[2] = data[2] | 0x000031C;
	data[3] = data[3] | 0x0020384;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b2e:	4e20      	ldr	r6, [pc, #128]	@ (8004bb0 <LCD_Display_StopMode+0x88>)
	HAL_LCD_Clear(&hlcd);
 8004b30:	0028      	movs	r0, r5
 8004b32:	f00a ffb0 	bl	800fa96 <HAL_LCD_Clear>
	data[1] = data[1] | 0x020038C;
 8004b36:	6861      	ldr	r1, [r4, #4]
 8004b38:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb4 <LCD_Display_StopMode+0x8c>)
	data[0] = data[0] | 0x0200100;
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb8 <LCD_Display_StopMode+0x90>)
	data[1] = data[1] | 0x020038C;
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x000031C;
 8004b40:	22c7      	movs	r2, #199	@ 0xc7
 8004b42:	68a1      	ldr	r1, [r4, #8]
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	430a      	orrs	r2, r1
 8004b48:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x0020384;
 8004b4a:	68e1      	ldr	r1, [r4, #12]
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <LCD_Display_StopMode+0x94>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b4e:	0028      	movs	r0, r5
	data[3] = data[3] | 0x0020384;
 8004b50:	430a      	orrs	r2, r1
	data[0] = data[0] | 0x0200100;
 8004b52:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x0020384;
 8004b54:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b56:	2100      	movs	r1, #0
 8004b58:	0032      	movs	r2, r6
 8004b5a:	f00a ff3b 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004b5e:	0032      	movs	r2, r6
 8004b60:	0028      	movs	r0, r5
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	2102      	movs	r1, #2
 8004b66:	f00a ff35 	bl	800f9d4 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b6a:	0032      	movs	r2, r6
 8004b6c:	0028      	movs	r0, r5
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	2104      	movs	r1, #4
 8004b72:	f00a ff2f 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b76:	68e3      	ldr	r3, [r4, #12]
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b78:	2480      	movs	r4, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b7a:	0032      	movs	r2, r6
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b7c:	0164      	lsls	r4, r4, #5
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b7e:	0028      	movs	r0, r5
 8004b80:	2106      	movs	r1, #6
 8004b82:	f00a ff27 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b86:	0023      	movs	r3, r4
 8004b88:	0022      	movs	r2, r4
 8004b8a:	0028      	movs	r0, r5
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	f00a ff21 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 8004b92:	0023      	movs	r3, r4
 8004b94:	0022      	movs	r2, r4
 8004b96:	0028      	movs	r0, r5
 8004b98:	2105      	movs	r1, #5
 8004b9a:	f00a ff1b 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004b9e:	0028      	movs	r0, r5
 8004ba0:	0023      	movs	r3, r4
 8004ba2:	0022      	movs	r2, r4
 8004ba4:	2107      	movs	r1, #7
 8004ba6:	f00a ff15 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//stop 글자, stop 표시
}
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	20000a80 	.word	0x20000a80
 8004bb0:	f7fffffe 	.word	0xf7fffffe
 8004bb4:	0020038c 	.word	0x0020038c
 8004bb8:	00200100 	.word	0x00200100
 8004bbc:	00020384 	.word	0x00020384

08004bc0 <LCD_Display_PauseMode>:

void LCD_Display_PauseMode(uint32_t *data)
{
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004bc4:	4d1c      	ldr	r5, [pc, #112]	@ (8004c38 <LCD_Display_PauseMode+0x78>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x02A0000;
	data[1] = data[1] | 0x003038C;
	data[2] = data[2] | 0x023031C;
	data[3] = data[3] | 0x029018C;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bc6:	4e1d      	ldr	r6, [pc, #116]	@ (8004c3c <LCD_Display_PauseMode+0x7c>)
	HAL_LCD_Clear(&hlcd);
 8004bc8:	0028      	movs	r0, r5
 8004bca:	f00a ff64 	bl	800fa96 <HAL_LCD_Clear>
	data[0] = data[0] | 0x02A0000;
 8004bce:	23a8      	movs	r3, #168	@ 0xa8
	data[1] = data[1] | 0x003038C;
 8004bd0:	6861      	ldr	r1, [r4, #4]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <LCD_Display_PauseMode+0x80>)
	data[0] = data[0] | 0x02A0000;
 8004bd4:	039b      	lsls	r3, r3, #14
	data[1] = data[1] | 0x003038C;
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x023031C;
 8004bda:	68a1      	ldr	r1, [r4, #8]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <LCD_Display_PauseMode+0x84>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bde:	0028      	movs	r0, r5
	data[2] = data[2] | 0x023031C;
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x029018C;
 8004be4:	68e1      	ldr	r1, [r4, #12]
 8004be6:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <LCD_Display_PauseMode+0x88>)
	data[0] = data[0] | 0x02A0000;
 8004be8:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x029018C;
 8004bea:	430a      	orrs	r2, r1
 8004bec:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	0032      	movs	r2, r6
 8004bf2:	f00a feef 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004bf6:	0032      	movs	r2, r6
 8004bf8:	0028      	movs	r0, r5
 8004bfa:	6863      	ldr	r3, [r4, #4]
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	f00a fee9 	bl	800f9d4 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c02:	0032      	movs	r2, r6
 8004c04:	0028      	movs	r0, r5
 8004c06:	68a3      	ldr	r3, [r4, #8]
 8004c08:	2104      	movs	r1, #4
 8004c0a:	f00a fee3 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c0e:	68e3      	ldr	r3, [r4, #12]
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c10:	2480      	movs	r4, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c12:	0032      	movs	r2, r6
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c14:	0164      	lsls	r4, r4, #5
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c16:	0028      	movs	r0, r5
 8004c18:	2106      	movs	r1, #6
 8004c1a:	f00a fedb 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c1e:	0023      	movs	r3, r4
 8004c20:	0022      	movs	r2, r4
 8004c22:	0028      	movs	r0, r5
 8004c24:	2101      	movs	r1, #1
 8004c26:	f00a fed5 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 8004c2a:	0028      	movs	r0, r5
 8004c2c:	0023      	movs	r3, r4
 8004c2e:	0022      	movs	r2, r4
 8004c30:	2103      	movs	r1, #3
 8004c32:	f00a fecf 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//pause 글자, stop 표시
}
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	20000a80 	.word	0x20000a80
 8004c3c:	f7fffffe 	.word	0xf7fffffe
 8004c40:	0003038c 	.word	0x0003038c
 8004c44:	0023031c 	.word	0x0023031c
 8004c48:	0029018c 	.word	0x0029018c

08004c4c <Small_Stop_Display>:
}


void Small_Stop_Display(uint32_t *data)
{
	data[2] = data[2] | 0x0000010; //Stop on
 8004c4c:	2310      	movs	r3, #16
{
 8004c4e:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x0000010; //Stop on
 8004c50:	6882      	ldr	r2, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c52:	2104      	movs	r1, #4
	data[2] = data[2] | 0x0000010; //Stop on
 8004c54:	4313      	orrs	r3, r2
 8004c56:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c58:	4a02      	ldr	r2, [pc, #8]	@ (8004c64 <Small_Stop_Display+0x18>)
 8004c5a:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <Small_Stop_Display+0x1c>)
 8004c5c:	f00a feba 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);

}
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	f7fffffe 	.word	0xf7fffffe
 8004c68:	20000a80 	.word	0x20000a80

08004c6c <Small_Start_Display>:

void Small_Start_Display(uint32_t *data)
{
	data[3] = data[3] | 0x0000010; //Rec on
 8004c6c:	2310      	movs	r3, #16
{
 8004c6e:	b510      	push	{r4, lr}
	data[3] = data[3] | 0x0000010; //Rec on
 8004c70:	68c2      	ldr	r2, [r0, #12]
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c72:	2106      	movs	r1, #6
	data[3] = data[3] | 0x0000010; //Rec on
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60c3      	str	r3, [r0, #12]
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c78:	4a02      	ldr	r2, [pc, #8]	@ (8004c84 <Small_Start_Display+0x18>)
 8004c7a:	4803      	ldr	r0, [pc, #12]	@ (8004c88 <Small_Start_Display+0x1c>)
 8004c7c:	f00a feaa 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	f7fffffe 	.word	0xf7fffffe
 8004c88:	20000a80 	.word	0x20000a80

08004c8c <Mark_Display>:
{
	data[3] = data[3] | 0x4000000; //Delay on
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
void Mark_Display(uint32_t *data){
 8004c8c:	b510      	push	{r4, lr}
	if(device_config.mark == 1) {
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <Mark_Display+0x20>)
 8004c90:	7d1b      	ldrb	r3, [r3, #20]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d109      	bne.n	8004caa <Mark_Display+0x1e>
	data[0] = data[0] | 0x4000000;//Mark
 8004c96:	2380      	movs	r3, #128	@ 0x80
 8004c98:	6802      	ldr	r2, [r0, #0]
 8004c9a:	04db      	lsls	r3, r3, #19
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4803      	ldr	r0, [pc, #12]	@ (8004cb0 <Mark_Display+0x24>)
 8004ca4:	4a03      	ldr	r2, [pc, #12]	@ (8004cb4 <Mark_Display+0x28>)
 8004ca6:	f00a fe95 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	}
}
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	20000b50 	.word	0x20000b50
 8004cb0:	20000a80 	.word	0x20000a80
 8004cb4:	f7fffffe 	.word	0xf7fffffe

08004cb8 <Max_Display>:
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}

void Max_Display(uint32_t *data){
	data[0] = data[0] | 0x2000000; //MAX
 8004cb8:	2380      	movs	r3, #128	@ 0x80
void Max_Display(uint32_t *data){
 8004cba:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x2000000; //MAX
 8004cbc:	6802      	ldr	r2, [r0, #0]
 8004cbe:	049b      	lsls	r3, r3, #18
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4802      	ldr	r0, [pc, #8]	@ (8004cd0 <Max_Display+0x18>)
 8004cc8:	4a02      	ldr	r2, [pc, #8]	@ (8004cd4 <Max_Display+0x1c>)
 8004cca:	f00a fe83 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	20000a80 	.word	0x20000a80
 8004cd4:	f7fffffe 	.word	0xf7fffffe

08004cd8 <Min_Display>:

void Min_Display(uint32_t *data){
	data[0] = data[0] | 0x0000020; //MIN
 8004cd8:	2320      	movs	r3, #32
void Min_Display(uint32_t *data){
 8004cda:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x0000020; //MIN
 8004cdc:	6802      	ldr	r2, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004cde:	2100      	movs	r1, #0
	data[0] = data[0] | 0x0000020; //MIN
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ce4:	4a02      	ldr	r2, [pc, #8]	@ (8004cf0 <Min_Display+0x18>)
 8004ce6:	4803      	ldr	r0, [pc, #12]	@ (8004cf4 <Min_Display+0x1c>)
 8004ce8:	f00a fe74 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	f7fffffe 	.word	0xf7fffffe
 8004cf4:	20000a80 	.word	0x20000a80

08004cf8 <LCD_Clear_Display>:
void LCD_Clear(void)
{
	HAL_LCD_Clear(&hlcd);
}
void LCD_Clear_Display(uint32_t *data)
{
 8004cf8:	b570      	push	{r4, r5, r6, lr}
	HAL_LCD_Clear(&hlcd);
 8004cfa:	4d13      	ldr	r5, [pc, #76]	@ (8004d48 <LCD_Clear_Display+0x50>)
{
 8004cfc:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004cfe:	0028      	movs	r0, r5
 8004d00:	f00a fec9 	bl	800fa96 <HAL_LCD_Clear>
	data[0] = 0x0000000;
 8004d04:	2100      	movs	r1, #0
	data[1] = 0x0000000;
	data[2] = 0x0000000;
	data[3] = 0x0000000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004d06:	4e11      	ldr	r6, [pc, #68]	@ (8004d4c <LCD_Clear_Display+0x54>)
 8004d08:	000b      	movs	r3, r1
 8004d0a:	0032      	movs	r2, r6
 8004d0c:	0028      	movs	r0, r5
	data[0] = 0x0000000;
 8004d0e:	6021      	str	r1, [r4, #0]
	data[1] = 0x0000000;
 8004d10:	6061      	str	r1, [r4, #4]
	data[2] = 0x0000000;
 8004d12:	60a1      	str	r1, [r4, #8]
	data[3] = 0x0000000;
 8004d14:	60e1      	str	r1, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004d16:	f00a fe5d 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004d1a:	0032      	movs	r2, r6
 8004d1c:	0028      	movs	r0, r5
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	2102      	movs	r1, #2
 8004d22:	f00a fe57 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004d26:	0032      	movs	r2, r6
 8004d28:	0028      	movs	r0, r5
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	f00a fe51 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004d32:	0032      	movs	r2, r6
 8004d34:	2106      	movs	r1, #6
 8004d36:	0028      	movs	r0, r5
 8004d38:	68e3      	ldr	r3, [r4, #12]
 8004d3a:	f00a fe4b 	bl	800f9d4 <HAL_LCD_Write>

	HAL_LCD_UpdateDisplayRequest(& hlcd);
 8004d3e:	0028      	movs	r0, r5
 8004d40:	f00a fe85 	bl	800fa4e <HAL_LCD_UpdateDisplayRequest>
}
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	20000a80 	.word	0x20000a80
 8004d4c:	f7fffffe 	.word	0xf7fffffe

08004d50 <LCD_Display_LP_Number>:
    ones      = number % 10;
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
}

void LCD_Display_LP_Number(uint8_t ten_thousands, uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	0006      	movs	r6, r0
 8004d54:	b097      	sub	sp, #92	@ 0x5c
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	ab1c      	add	r3, sp, #112	@ 0x70
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	000c      	movs	r4, r1
 8004d5e:	0017      	movs	r7, r2
	uint32_t LP_data_tentho[4] = {0};
 8004d60:	2100      	movs	r1, #0
 8004d62:	2210      	movs	r2, #16
 8004d64:	a802      	add	r0, sp, #8
	uint32_t LP_data_tho[4] = {0};
 8004d66:	ad06      	add	r5, sp, #24
{
 8004d68:	9301      	str	r3, [sp, #4]
	uint32_t LP_data_tentho[4] = {0};
 8004d6a:	f015 fcf3 	bl	801a754 <memset>
	uint32_t LP_data_tho[4] = {0};
 8004d6e:	2210      	movs	r2, #16
 8004d70:	2100      	movs	r1, #0
 8004d72:	0028      	movs	r0, r5
 8004d74:	f015 fcee 	bl	801a754 <memset>
	uint32_t LP_data_hun[4] = {0};
 8004d78:	2210      	movs	r2, #16
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	a80a      	add	r0, sp, #40	@ 0x28
 8004d7e:	f015 fce9 	bl	801a754 <memset>
	uint32_t LP_data_ten[4] = {0};
 8004d82:	2210      	movs	r2, #16
 8004d84:	2100      	movs	r1, #0
 8004d86:	a80e      	add	r0, sp, #56	@ 0x38
 8004d88:	f015 fce4 	bl	801a754 <memset>
	uint32_t LP_data_one[4] = {0};
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	2100      	movs	r1, #0
 8004d90:	a812      	add	r0, sp, #72	@ 0x48
 8004d92:	f015 fcdf 	bl	801a754 <memset>

	switch (ten_thousands)
 8004d96:	1e70      	subs	r0, r6, #1
 8004d98:	2808      	cmp	r0, #8
 8004d9a:	d846      	bhi.n	8004e2a <LCD_Display_LP_Number+0xda>
 8004d9c:	f7fb f9c6 	bl	800012c <__gnu_thumb1_case_uqi>
 8004da0:	231c1305 	.word	0x231c1305
 8004da4:	39332b25 	.word	0x39332b25
 8004da8:	3f          	.byte	0x3f
 8004da9:	00          	.byte	0x00
		    		LP_data_tentho[3] = 0x0000000;
		    		break;

		    	case 1:
		    		LP_data_tentho[0] = 0x0000000;
		    		LP_data_tentho[1] = 0x0020000;
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	029b      	lsls	r3, r3, #10
					LP_data_tentho[3] = 0x0020000;
					break;

				case 4:
					LP_data_tentho[0] = 0x0000000;
					LP_data_tentho[1] = 0x0020004;
 8004dae:	9303      	str	r3, [sp, #12]
					break;

				case 7:
					LP_data_tentho[0] = 0x0020000;
					LP_data_tentho[1] = 0x0020004;
					LP_data_tentho[2] = 0x0020000;
 8004db0:	9304      	str	r3, [sp, #16]
					LP_data_tentho[3] = 0x0020000;
					break;
		    }


	switch (thousands)
 8004db2:	2c09      	cmp	r4, #9
 8004db4:	d849      	bhi.n	8004e4a <LCD_Display_LP_Number+0xfa>
 8004db6:	0020      	movs	r0, r4
 8004db8:	f7fb f9b8 	bl	800012c <__gnu_thumb1_case_uqi>
 8004dbc:	5b514343 	.word	0x5b514343
 8004dc0:	766d6664 	.word	0x766d6664
 8004dc4:	837d      	.short	0x837d
					LP_data_tentho[0] = 0x0020000;
 8004dc6:	2380      	movs	r3, #128	@ 0x80
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020000;
 8004dcc:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0000004;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	9304      	str	r3, [sp, #16]
					LP_data_tentho[3] = 0x0020004;
 8004dd2:	4bb5      	ldr	r3, [pc, #724]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[3] = 0x0020004;
 8004dd4:	9305      	str	r3, [sp, #20]
					break;
 8004dd6:	e7ec      	b.n	8004db2 <LCD_Display_LP_Number+0x62>
					LP_data_tentho[0] = 0x0020000;
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020000;
 8004dde:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0020004;
 8004de0:	4ab1      	ldr	r2, [pc, #708]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[2] = 0x0020004;
 8004de2:	9204      	str	r2, [sp, #16]
					LP_data_tentho[3] = 0x0020000;
 8004de4:	e7f6      	b.n	8004dd4 <LCD_Display_LP_Number+0x84>
					LP_data_tentho[1] = 0x0020004;
 8004de6:	4bb0      	ldr	r3, [pc, #704]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
 8004de8:	e7e1      	b.n	8004dae <LCD_Display_LP_Number+0x5e>
					LP_data_tentho[0] = 0x0020000;
 8004dea:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0000004;
 8004dec:	2204      	movs	r2, #4
					LP_data_tentho[0] = 0x0020000;
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0000004;
 8004df2:	9203      	str	r2, [sp, #12]
 8004df4:	e7f4      	b.n	8004de0 <LCD_Display_LP_Number+0x90>
					LP_data_tentho[0] = 0x0020000;
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0000004;
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0020004;
 8004e00:	4ba9      	ldr	r3, [pc, #676]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[2] = 0x0020004;
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	e7e6      	b.n	8004dd4 <LCD_Display_LP_Number+0x84>
					LP_data_tentho[0] = 0x0020000;
 8004e06:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0020004;
 8004e08:	4aa7      	ldr	r2, [pc, #668]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[0] = 0x0020000;
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e0e:	9203      	str	r2, [sp, #12]
 8004e10:	e7ce      	b.n	8004db0 <LCD_Display_LP_Number+0x60>
					LP_data_tentho[0] = 0x0020000;
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e18:	4ba3      	ldr	r3, [pc, #652]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	e7f1      	b.n	8004e02 <LCD_Display_LP_Number+0xb2>
					LP_data_tentho[0] = 0x0020000;
 8004e1e:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0020004;
 8004e20:	4aa1      	ldr	r2, [pc, #644]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[0] = 0x0020000;
 8004e22:	029b      	lsls	r3, r3, #10
 8004e24:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	e7db      	b.n	8004de2 <LCD_Display_LP_Number+0x92>
	switch (thousands)
 8004e2a:	2c09      	cmp	r4, #9
 8004e2c:	d80d      	bhi.n	8004e4a <LCD_Display_LP_Number+0xfa>
 8004e2e:	0020      	movs	r0, r4
 8004e30:	f7fb f97c 	bl	800012c <__gnu_thumb1_case_uqi>
 8004e34:	1f150705 	.word	0x1f150705
 8004e38:	3a312a28 	.word	0x3a312a28
 8004e3c:	4741      	.short	0x4741
	    {
			case 0:
				if(ten_thousands == 0)
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d003      	beq.n	8004e4a <LCD_Display_LP_Number+0xfa>
					LP_data_tho[2] = 0x0000100;
					LP_data_tho[3] = 0x0000180;
				}
	    	case 1:
	    		LP_data_tho[0] = 0x0000000;
	    		LP_data_tho[1] = 0x0000100;
 8004e42:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[3] = 0x0000100;
				break;

			case 4:
				LP_data_tho[0] = 0x0000000;
				LP_data_tho[1] = 0x0000180;
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	9307      	str	r3, [sp, #28]
				LP_data_tho[2] = 0x0000180;
 8004e48:	9308      	str	r3, [sp, #32]
				LP_data_tho[2] = 0x0000180;
				LP_data_tho[3] = 0x0000100;
				break;
	    }

    switch (hundreds)
 8004e4a:	2f09      	cmp	r7, #9
 8004e4c:	d84e      	bhi.n	8004eec <LCD_Display_LP_Number+0x19c>
 8004e4e:	0038      	movs	r0, r7
 8004e50:	f7fb f96c 	bl	800012c <__gnu_thumb1_case_uqi>
 8004e54:	6258483e 	.word	0x6258483e
 8004e58:	7a716a68 	.word	0x7a716a68
 8004e5c:	8680      	.short	0x8680
				LP_data_tho[0] = 0x0000100;
 8004e5e:	2380      	movs	r3, #128	@ 0x80
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000100;
 8004e64:	606b      	str	r3, [r5, #4]
				LP_data_tho[2] = 0x0000080;
 8004e66:	3b80      	subs	r3, #128	@ 0x80
 8004e68:	60ab      	str	r3, [r5, #8]
				LP_data_tho[3] = 0x0000180;
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	33ff      	adds	r3, #255	@ 0xff
				LP_data_tho[3] = 0x0000180;
 8004e6e:	60eb      	str	r3, [r5, #12]
				break;
 8004e70:	e7eb      	b.n	8004e4a <LCD_Display_LP_Number+0xfa>
				LP_data_tho[0] = 0x0000100;
 8004e72:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[2] = 0x0000180;
 8004e74:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000100;
 8004e7a:	9307      	str	r3, [sp, #28]
				LP_data_tho[2] = 0x0000180;
 8004e7c:	0052      	lsls	r2, r2, #1
				LP_data_tho[2] = 0x0000180;
 8004e7e:	9208      	str	r2, [sp, #32]
				LP_data_tho[3] = 0x0000100;
 8004e80:	9309      	str	r3, [sp, #36]	@ 0x24
				break;
 8004e82:	e7e2      	b.n	8004e4a <LCD_Display_LP_Number+0xfa>
				LP_data_tho[1] = 0x0000180;
 8004e84:	23c0      	movs	r3, #192	@ 0xc0
 8004e86:	e7dd      	b.n	8004e44 <LCD_Display_LP_Number+0xf4>
				LP_data_tho[0] = 0x0000100;
 8004e88:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000080;
 8004e8a:	2280      	movs	r2, #128	@ 0x80
				LP_data_tho[0] = 0x0000100;
 8004e8c:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000080;
 8004e8e:	9207      	str	r2, [sp, #28]
				LP_data_tho[0] = 0x0000100;
 8004e90:	9306      	str	r3, [sp, #24]
				LP_data_tho[2] = 0x0000180;
 8004e92:	18d2      	adds	r2, r2, r3
 8004e94:	e7f3      	b.n	8004e7e <LCD_Display_LP_Number+0x12e>
				LP_data_tho[0] = 0x0000100;
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000080;
 8004e9c:	3b80      	subs	r3, #128	@ 0x80
 8004e9e:	606b      	str	r3, [r5, #4]
				LP_data_tho[2] = 0x0000180;
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	33ff      	adds	r3, #255	@ 0xff
				LP_data_tho[2] = 0x0000180;
 8004ea4:	60ab      	str	r3, [r5, #8]
 8004ea6:	e7e2      	b.n	8004e6e <LCD_Display_LP_Number+0x11e>
				LP_data_tho[0] = 0x0000100;
 8004ea8:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000180;
 8004eaa:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004eac:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000180;
 8004eae:	0052      	lsls	r2, r2, #1
				LP_data_tho[0] = 0x0000100;
 8004eb0:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004eb2:	9207      	str	r2, [sp, #28]
				LP_data_tho[2] = 0x0000100;
 8004eb4:	e7c8      	b.n	8004e48 <LCD_Display_LP_Number+0xf8>
				LP_data_tho[0] = 0x0000100;
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004ebc:	3380      	adds	r3, #128	@ 0x80
 8004ebe:	606b      	str	r3, [r5, #4]
 8004ec0:	e7f0      	b.n	8004ea4 <LCD_Display_LP_Number+0x154>
				LP_data_tho[0] = 0x0000100;
 8004ec2:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000180;
 8004ec4:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004ec6:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000180;
 8004ec8:	0052      	lsls	r2, r2, #1
				LP_data_tho[0] = 0x0000100;
 8004eca:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004ecc:	9207      	str	r2, [sp, #28]
 8004ece:	e7d6      	b.n	8004e7e <LCD_Display_LP_Number+0x12e>
    {
    	case 0:
    		if(ten_thousands == 0 && thousands == 0)
 8004ed0:	0033      	movs	r3, r6
 8004ed2:	4323      	orrs	r3, r4
 8004ed4:	d00a      	beq.n	8004eec <LCD_Display_LP_Number+0x19c>
    			LP_data_hun[2] = 0x0000000;
    			LP_data_hun[3] = 0x0000000;
    		}
    		else
    		{
    			LP_data_hun[0] = 0x0200000;
 8004ed6:	2280      	movs	r2, #128	@ 0x80
    			LP_data_hun[1] = 0x0200200;
 8004ed8:	4b74      	ldr	r3, [pc, #464]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
    			LP_data_hun[0] = 0x0200000;
 8004eda:	0392      	lsls	r2, r2, #14
 8004edc:	920a      	str	r2, [sp, #40]	@ 0x28
    			LP_data_hun[1] = 0x0200200;
 8004ede:	930b      	str	r3, [sp, #44]	@ 0x2c
			break;

		case 9:
			LP_data_hun[0] = 0x0200000;
			LP_data_hun[1] = 0x0200200;
			LP_data_hun[2] = 0x0200200;
 8004ee0:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ee2:	e017      	b.n	8004f14 <LCD_Display_LP_Number+0x1c4>
    		LP_data_hun[1] = 0x0200000;
 8004ee4:	2380      	movs	r3, #128	@ 0x80
 8004ee6:	039b      	lsls	r3, r3, #14
			LP_data_hun[1] = 0x0200200;
 8004ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004eea:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200000;
			break;
    }
    switch (tens)
 8004eec:	9b00      	ldr	r3, [sp, #0]
 8004eee:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d84a      	bhi.n	8004f8a <LCD_Display_LP_Number+0x23a>
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7fb f919 	bl	800012c <__gnu_thumb1_case_uqi>
 8004efa:	4439      	.short	0x4439
 8004efc:	68665f54 	.word	0x68665f54
 8004f00:	8780796f 	.word	0x8780796f
			LP_data_hun[0] = 0x0200000;
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	039b      	lsls	r3, r3, #14
 8004f08:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200000;
 8004f0a:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0000200;
 8004f0c:	2380      	movs	r3, #128	@ 0x80
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200200;
 8004f12:	4b66      	ldr	r3, [pc, #408]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[3] = 0x0200000;
 8004f14:	930d      	str	r3, [sp, #52]	@ 0x34
			break;
 8004f16:	e7e9      	b.n	8004eec <LCD_Display_LP_Number+0x19c>
			LP_data_hun[0] = 0x0200000;
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	039b      	lsls	r3, r3, #14
 8004f1c:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200000;
 8004f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004f20:	4a62      	ldr	r2, [pc, #392]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f22:	e7dd      	b.n	8004ee0 <LCD_Display_LP_Number+0x190>
			LP_data_hun[1] = 0x0200200;
 8004f24:	4b61      	ldr	r3, [pc, #388]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f26:	e7df      	b.n	8004ee8 <LCD_Display_LP_Number+0x198>
			LP_data_hun[0] = 0x0200000;
 8004f28:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0000200;
 8004f2a:	2280      	movs	r2, #128	@ 0x80
			LP_data_hun[0] = 0x0200000;
 8004f2c:	039b      	lsls	r3, r3, #14
			LP_data_hun[1] = 0x0000200;
 8004f2e:	0092      	lsls	r2, r2, #2
			LP_data_hun[0] = 0x0200000;
 8004f30:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0000200;
 8004f32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f34:	e7f4      	b.n	8004f20 <LCD_Display_LP_Number+0x1d0>
			LP_data_hun[0] = 0x0200000;
 8004f36:	2380      	movs	r3, #128	@ 0x80
 8004f38:	039b      	lsls	r3, r3, #14
 8004f3a:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0000200;
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004f42:	4b5a      	ldr	r3, [pc, #360]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[2] = 0x0200200;
 8004f44:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200200;
 8004f46:	e7e5      	b.n	8004f14 <LCD_Display_LP_Number+0x1c4>
			LP_data_hun[0] = 0x0200000;
 8004f48:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0200200;
 8004f4a:	4a58      	ldr	r2, [pc, #352]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[0] = 0x0200000;
 8004f4c:	039b      	lsls	r3, r3, #14
 8004f4e:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f50:	920b      	str	r2, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200000;
 8004f52:	e7ca      	b.n	8004eea <LCD_Display_LP_Number+0x19a>
			LP_data_hun[0] = 0x0200000;
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	039b      	lsls	r3, r3, #14
 8004f58:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f5a:	4b54      	ldr	r3, [pc, #336]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5e:	e7f1      	b.n	8004f44 <LCD_Display_LP_Number+0x1f4>
			LP_data_hun[0] = 0x0200000;
 8004f60:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0200200;
 8004f62:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[0] = 0x0200000;
 8004f64:	039b      	lsls	r3, r3, #14
 8004f66:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f68:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f6a:	e7b9      	b.n	8004ee0 <LCD_Display_LP_Number+0x190>
    {
    	case 0:
    		if(ten_thousands == 0 && thousands == 0 && hundreds == 0)
 8004f6c:	433c      	orrs	r4, r7
 8004f6e:	4334      	orrs	r4, r6
 8004f70:	d00b      	beq.n	8004f8a <LCD_Display_LP_Number+0x23a>
    			LP_data_ten[3] = 0x0000000;
    			break;
    		}
    		else
    		{
    			LP_data_ten[0] = 0x0080000;
 8004f72:	2180      	movs	r1, #128	@ 0x80
    			LP_data_ten[1] = 0x0090000;
 8004f74:	2390      	movs	r3, #144	@ 0x90
    			LP_data_ten[0] = 0x0080000;
 8004f76:	0309      	lsls	r1, r1, #12
    			LP_data_ten[1] = 0x0090000;
 8004f78:	031b      	lsls	r3, r3, #12
    			LP_data_ten[0] = 0x0080000;
 8004f7a:	910e      	str	r1, [sp, #56]	@ 0x38
    			LP_data_ten[1] = 0x0090000;
 8004f7c:	6053      	str	r3, [r2, #4]
			break;

		case 9:
			LP_data_ten[0] = 0x0080000;
			LP_data_ten[1] = 0x0090000;
			LP_data_ten[2] = 0x0090000;
 8004f7e:	6091      	str	r1, [r2, #8]
 8004f80:	e018      	b.n	8004fb4 <LCD_Display_LP_Number+0x264>
    		LP_data_ten[1] = 0x0080000;
 8004f82:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0080000;
 8004f88:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 8004f8a:	9901      	ldr	r1, [sp, #4]
 8004f8c:	ab12      	add	r3, sp, #72	@ 0x48
 8004f8e:	2909      	cmp	r1, #9
 8004f90:	d84a      	bhi.n	8005028 <LCD_Display_LP_Number+0x2d8>
 8004f92:	0008      	movs	r0, r1
 8004f94:	f7fb f8ca 	bl	800012c <__gnu_thumb1_case_uqi>
 8004f98:	655d453f 	.word	0x655d453f
 8004f9c:	78716c6a 	.word	0x78716c6a
 8004fa0:	827d      	.short	0x827d
			LP_data_ten[0] = 0x0080000;
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0080000;
 8004fa8:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0010000;
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	025b      	lsls	r3, r3, #9
 8004fae:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0090000;
 8004fb0:	2390      	movs	r3, #144	@ 0x90
 8004fb2:	031b      	lsls	r3, r3, #12
			LP_data_ten[3] = 0x0080000;
 8004fb4:	60d3      	str	r3, [r2, #12]
			break;
 8004fb6:	e7e8      	b.n	8004f8a <LCD_Display_LP_Number+0x23a>
			LP_data_ten[0] = 0x0080000;
 8004fb8:	2380      	movs	r3, #128	@ 0x80
 8004fba:	031b      	lsls	r3, r3, #12
 8004fbc:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0080000;
 8004fbe:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0090000;
 8004fc0:	2190      	movs	r1, #144	@ 0x90
 8004fc2:	0309      	lsls	r1, r1, #12
 8004fc4:	e7db      	b.n	8004f7e <LCD_Display_LP_Number+0x22e>
			LP_data_ten[1] = 0x0090000;
 8004fc6:	2390      	movs	r3, #144	@ 0x90
 8004fc8:	e7dc      	b.n	8004f84 <LCD_Display_LP_Number+0x234>
			LP_data_ten[0] = 0x0080000;
 8004fca:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0010000;
 8004fcc:	2180      	movs	r1, #128	@ 0x80
			LP_data_ten[0] = 0x0080000;
 8004fce:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0010000;
 8004fd0:	0249      	lsls	r1, r1, #9
			LP_data_ten[0] = 0x0080000;
 8004fd2:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0010000;
 8004fd4:	6051      	str	r1, [r2, #4]
 8004fd6:	e7f3      	b.n	8004fc0 <LCD_Display_LP_Number+0x270>
			LP_data_ten[0] = 0x0080000;
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	031b      	lsls	r3, r3, #12
 8004fdc:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0010000;
 8004fde:	2380      	movs	r3, #128	@ 0x80
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0090000;
 8004fe4:	2390      	movs	r3, #144	@ 0x90
 8004fe6:	031b      	lsls	r3, r3, #12
			LP_data_ten[2] = 0x0090000;
 8004fe8:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0090000;
 8004fea:	e7e3      	b.n	8004fb4 <LCD_Display_LP_Number+0x264>
			LP_data_ten[0] = 0x0080000;
 8004fec:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 8004fee:	2190      	movs	r1, #144	@ 0x90
			LP_data_ten[0] = 0x0080000;
 8004ff0:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0090000;
 8004ff2:	0309      	lsls	r1, r1, #12
			LP_data_ten[0] = 0x0080000;
 8004ff4:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8004ff6:	6051      	str	r1, [r2, #4]
 8004ff8:	e7c6      	b.n	8004f88 <LCD_Display_LP_Number+0x238>
			LP_data_ten[0] = 0x0080000;
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	031b      	lsls	r3, r3, #12
 8004ffe:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8005000:	2390      	movs	r3, #144	@ 0x90
 8005002:	031b      	lsls	r3, r3, #12
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	e7ef      	b.n	8004fe8 <LCD_Display_LP_Number+0x298>
			LP_data_ten[0] = 0x0080000;
 8005008:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 800500a:	2190      	movs	r1, #144	@ 0x90
			LP_data_ten[0] = 0x0080000;
 800500c:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0090000;
 800500e:	0309      	lsls	r1, r1, #12
			LP_data_ten[0] = 0x0080000;
 8005010:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8005012:	6051      	str	r1, [r2, #4]
 8005014:	e7b3      	b.n	8004f7e <LCD_Display_LP_Number+0x22e>
    {
    	case 0:
        	LP_data_one[0] = 0x0000002;
 8005016:	2002      	movs	r0, #2
        	LP_data_one[1] = 0x0000003;
 8005018:	2103      	movs	r1, #3
        	LP_data_one[0] = 0x0000002;
 800501a:	9012      	str	r0, [sp, #72]	@ 0x48
        	LP_data_one[1] = 0x0000003;
 800501c:	6059      	str	r1, [r3, #4]
			break;

		case 9:
			LP_data_one[0] = 0x0000002;
			LP_data_one[1] = 0x0000003;
			LP_data_one[2] = 0x0000003;
 800501e:	6098      	str	r0, [r3, #8]
 8005020:	e01d      	b.n	800505e <LCD_Display_LP_Number+0x30e>
    		LP_data_one[1] = 0x0000002;
 8005022:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 8005024:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005026:	6099      	str	r1, [r3, #8]
{
 8005028:	2100      	movs	r1, #0
			LP_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = LP_data_tentho[i] | LP_data_tho[i] | LP_data_hun[i] | LP_data_ten[i] | LP_data_one[i];
 800502a:	2620      	movs	r6, #32
 800502c:	a802      	add	r0, sp, #8
 800502e:	586c      	ldr	r4, [r5, r1]
 8005030:	5840      	ldr	r0, [r0, r1]
 8005032:	4320      	orrs	r0, r4
 8005034:	ac02      	add	r4, sp, #8
 8005036:	19a4      	adds	r4, r4, r6
 8005038:	5864      	ldr	r4, [r4, r1]
 800503a:	4320      	orrs	r0, r4
 800503c:	5854      	ldr	r4, [r2, r1]
 800503e:	4320      	orrs	r0, r4
 8005040:	585c      	ldr	r4, [r3, r1]
 8005042:	4320      	orrs	r0, r4
 8005044:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8005046:	5060      	str	r0, [r4, r1]
    for(int i = 0; i<4; i++)
 8005048:	3104      	adds	r1, #4
 800504a:	2910      	cmp	r1, #16
 800504c:	d1ed      	bne.n	800502a <LCD_Display_LP_Number+0x2da>
    }
}
 800504e:	b017      	add	sp, #92	@ 0x5c
 8005050:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LP_data_one[0] = 0x0000002;
 8005052:	2102      	movs	r1, #2
 8005054:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000002;
 8005056:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000001;
 8005058:	3901      	subs	r1, #1
 800505a:	6099      	str	r1, [r3, #8]
			LP_data_one[3] = 0x0000003;
 800505c:	3102      	adds	r1, #2
			LP_data_one[3] = 0x0000002;
 800505e:	60d9      	str	r1, [r3, #12]
    for(int i = 0; i<4; i++)
 8005060:	e7e2      	b.n	8005028 <LCD_Display_LP_Number+0x2d8>
			LP_data_one[0] = 0x0000002;
 8005062:	2102      	movs	r1, #2
 8005064:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000002;
 8005066:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005068:	2003      	movs	r0, #3
 800506a:	e7d8      	b.n	800501e <LCD_Display_LP_Number+0x2ce>
			LP_data_one[1] = 0x0000003;
 800506c:	2103      	movs	r1, #3
 800506e:	e7d9      	b.n	8005024 <LCD_Display_LP_Number+0x2d4>
			LP_data_one[0] = 0x0000002;
 8005070:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000001;
 8005072:	2001      	movs	r0, #1
			LP_data_one[0] = 0x0000002;
 8005074:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000001;
 8005076:	6058      	str	r0, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005078:	e7f6      	b.n	8005068 <LCD_Display_LP_Number+0x318>
			LP_data_one[0] = 0x0000002;
 800507a:	2102      	movs	r1, #2
 800507c:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000001;
 800507e:	3901      	subs	r1, #1
 8005080:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005082:	3102      	adds	r1, #2
			LP_data_one[2] = 0x0000003;
 8005084:	6099      	str	r1, [r3, #8]
			LP_data_one[3] = 0x0000003;
 8005086:	e7ea      	b.n	800505e <LCD_Display_LP_Number+0x30e>
			LP_data_one[0] = 0x0000002;
 8005088:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 800508a:	2003      	movs	r0, #3
			LP_data_one[0] = 0x0000002;
 800508c:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 800508e:	6058      	str	r0, [r3, #4]
			LP_data_one[2] = 0x0000002;
 8005090:	e7c9      	b.n	8005026 <LCD_Display_LP_Number+0x2d6>
			LP_data_one[0] = 0x0000002;
 8005092:	2102      	movs	r1, #2
 8005094:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 8005096:	3101      	adds	r1, #1
 8005098:	6059      	str	r1, [r3, #4]
 800509a:	e7f3      	b.n	8005084 <LCD_Display_LP_Number+0x334>
			LP_data_one[0] = 0x0000002;
 800509c:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 800509e:	2003      	movs	r0, #3
			LP_data_one[0] = 0x0000002;
 80050a0:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 80050a2:	6058      	str	r0, [r3, #4]
 80050a4:	e7bb      	b.n	800501e <LCD_Display_LP_Number+0x2ce>
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	00020004 	.word	0x00020004
 80050ac:	00200200 	.word	0x00200200

080050b0 <LCD_DigitNumber_LP_Calculate>:
{
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b085      	sub	sp, #20
 80050b4:	9102      	str	r1, [sp, #8]
	number %= 10000;
 80050b6:	491b      	ldr	r1, [pc, #108]	@ (8005124 <LCD_DigitNumber_LP_Calculate+0x74>)
{
 80050b8:	0005      	movs	r5, r0
	number %= 10000;
 80050ba:	f7fb f8db 	bl	8000274 <__aeabi_uidivmod>
 80050be:	b28e      	uxth	r6, r1
    number %= 1000;
 80050c0:	21fa      	movs	r1, #250	@ 0xfa
 80050c2:	0030      	movs	r0, r6
 80050c4:	0089      	lsls	r1, r1, #2
 80050c6:	f7fb f8d5 	bl	8000274 <__aeabi_uidivmod>
 80050ca:	b28f      	uxth	r7, r1
    number %= 100;
 80050cc:	0038      	movs	r0, r7
 80050ce:	2164      	movs	r1, #100	@ 0x64
 80050d0:	f7fb f8d0 	bl	8000274 <__aeabi_uidivmod>
 80050d4:	b28c      	uxth	r4, r1
    tens      = number / 10;
 80050d6:	0020      	movs	r0, r4
 80050d8:	210a      	movs	r1, #10
 80050da:	f7fb f845 	bl	8000168 <__udivsi3>
    hundreds  = number / 100;
 80050de:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050e0:	b2c3      	uxtb	r3, r0
    hundreds  = number / 100;
 80050e2:	0038      	movs	r0, r7
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050e4:	9303      	str	r3, [sp, #12]
    hundreds  = number / 100;
 80050e6:	f7fb f83f 	bl	8000168 <__udivsi3>
    thousands = number / 1000;
 80050ea:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050ec:	b2c7      	uxtb	r7, r0
    thousands = number / 1000;
 80050ee:	0089      	lsls	r1, r1, #2
 80050f0:	0030      	movs	r0, r6
 80050f2:	f7fb f839 	bl	8000168 <__udivsi3>
	ten_thousands = number / 10000;
 80050f6:	490b      	ldr	r1, [pc, #44]	@ (8005124 <LCD_DigitNumber_LP_Calculate+0x74>)
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050f8:	b2c6      	uxtb	r6, r0
	ten_thousands = number / 10000;
 80050fa:	0028      	movs	r0, r5
 80050fc:	f7fb f834 	bl	8000168 <__udivsi3>
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 8005100:	9b02      	ldr	r3, [sp, #8]
 8005102:	b2c5      	uxtb	r5, r0
    ones      = number % 10;
 8005104:	210a      	movs	r1, #10
 8005106:	0020      	movs	r0, r4
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 8005108:	9301      	str	r3, [sp, #4]
    ones      = number % 10;
 800510a:	f7fb f8b3 	bl	8000274 <__aeabi_uidivmod>
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 800510e:	b2c9      	uxtb	r1, r1
 8005110:	9100      	str	r1, [sp, #0]
 8005112:	003a      	movs	r2, r7
 8005114:	0031      	movs	r1, r6
 8005116:	0028      	movs	r0, r5
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	f7ff fe19 	bl	8004d50 <LCD_Display_LP_Number>
}
 800511e:	b005      	add	sp, #20
 8005120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	00002710 	.word	0x00002710

08005128 <LCD_Display_LP>:
{
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	0007      	movs	r7, r0
 800512c:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 800512e:	4d16      	ldr	r5, [pc, #88]	@ (8005188 <LCD_Display_LP+0x60>)
{
 8005130:	0016      	movs	r6, r2
	HAL_LCD_Clear(&hlcd);
 8005132:	0028      	movs	r0, r5
 8005134:	f00a fcaf 	bl	800fa96 <HAL_LCD_Clear>
	LCD_DigitNumber_LP_Calculate(index, data);
 8005138:	0021      	movs	r1, r4
 800513a:	b2b8      	uxth	r0, r7
 800513c:	f7ff ffb8 	bl	80050b0 <LCD_DigitNumber_LP_Calculate>
	if (Packet_dose_unit)
 8005140:	2310      	movs	r3, #16
 8005142:	2e00      	cmp	r6, #0
 8005144:	d01b      	beq.n	800517e <LCD_Display_LP+0x56>
	data[1] = data[1] | 0x0000010; //L-R on
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	4313      	orrs	r3, r2
 800514a:	6063      	str	r3, [r4, #4]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800514c:	0028      	movs	r0, r5
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	2100      	movs	r1, #0
 8005152:	4a0e      	ldr	r2, [pc, #56]	@ (800518c <LCD_Display_LP+0x64>)
 8005154:	f00a fc3e 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005158:	0028      	movs	r0, r5
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	2102      	movs	r1, #2
 800515e:	4a0b      	ldr	r2, [pc, #44]	@ (800518c <LCD_Display_LP+0x64>)
 8005160:	f00a fc38 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005164:	0028      	movs	r0, r5
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	2104      	movs	r1, #4
 800516a:	4a08      	ldr	r2, [pc, #32]	@ (800518c <LCD_Display_LP+0x64>)
 800516c:	f00a fc32 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8005170:	0028      	movs	r0, r5
 8005172:	2106      	movs	r1, #6
 8005174:	68e3      	ldr	r3, [r4, #12]
 8005176:	4a05      	ldr	r2, [pc, #20]	@ (800518c <LCD_Display_LP+0x64>)
 8005178:	f00a fc2c 	bl	800f9d4 <HAL_LCD_Write>
}
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	data[0] = data[0] | 0x0000010; //L-T on
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	e7e2      	b.n	800514c <LCD_Display_LP+0x24>
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	20000a80 	.word	0x20000a80
 800518c:	f7fffffe 	.word	0xf7fffffe

08005190 <LCD_DigitNumber_InTime_Calculate>:
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
void LCD_DigitNumber_InTime_Calculate(uint16_t number, uint32_t *data)
{
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b08f      	sub	sp, #60	@ 0x3c
 8005194:	0004      	movs	r4, r0
	uint8_t s1= 0;
	uint8_t s0= 0;
	uint8_t hours = 0;
	uint8_t minutes = 0;
	uint8_t seconds = 0;
	uint32_t data_hour[4] = {0};
 8005196:	2210      	movs	r2, #16
{
 8005198:	9100      	str	r1, [sp, #0]
	uint32_t data_min[4] = {0};
 800519a:	af06      	add	r7, sp, #24
	uint32_t data_hour[4] = {0};
 800519c:	2100      	movs	r1, #0
 800519e:	a802      	add	r0, sp, #8
 80051a0:	f015 fad8 	bl	801a754 <memset>
	uint32_t data_min[4] = {0};
 80051a4:	2210      	movs	r2, #16
 80051a6:	2100      	movs	r1, #0
 80051a8:	0038      	movs	r0, r7
 80051aa:	f015 fad3 	bl	801a754 <memset>
	uint32_t data_sec[4] = {0};
 80051ae:	2210      	movs	r2, #16
 80051b0:	2100      	movs	r1, #0
 80051b2:	a80a      	add	r0, sp, #40	@ 0x28
 80051b4:	f015 face 	bl	801a754 <memset>

    hours   = number / 3600;
 80051b8:	21e1      	movs	r1, #225	@ 0xe1
 80051ba:	0020      	movs	r0, r4
 80051bc:	0109      	lsls	r1, r1, #4
 80051be:	f7fa ffd3 	bl	8000168 <__udivsi3>
    number %= 3600;
 80051c2:	21e1      	movs	r1, #225	@ 0xe1
    hours   = number / 3600;
 80051c4:	b2c6      	uxtb	r6, r0
    number %= 3600;
 80051c6:	0109      	lsls	r1, r1, #4
 80051c8:	0020      	movs	r0, r4
 80051ca:	f7fb f853 	bl	8000274 <__aeabi_uidivmod>
 80051ce:	b28c      	uxth	r4, r1
    minutes = number / 60;
 80051d0:	0020      	movs	r0, r4
 80051d2:	213c      	movs	r1, #60	@ 0x3c
 80051d4:	f7fa ffc8 	bl	8000168 <__udivsi3>
    seconds = number % 60;
 80051d8:	213c      	movs	r1, #60	@ 0x3c
    minutes = number / 60;
 80051da:	b2c5      	uxtb	r5, r0
    seconds = number % 60;
 80051dc:	0020      	movs	r0, r4
 80051de:	f7fb f849 	bl	8000274 <__aeabi_uidivmod>

    h1 = hours / 10;
    h0 = hours % 10;
 80051e2:	0030      	movs	r0, r6
    seconds = number % 60;
 80051e4:	b2cc      	uxtb	r4, r1
    h0 = hours % 10;
 80051e6:	210a      	movs	r1, #10
 80051e8:	f7fb f844 	bl	8000274 <__aeabi_uidivmod>
    h1 = hours / 10;
 80051ec:	0030      	movs	r0, r6
    m1 = minutes / 10;
    m0 = minutes % 10;
    s1 = seconds / 10;
    s0 = seconds % 10;

    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051ee:	b2cb      	uxtb	r3, r1
    h1 = hours / 10;
 80051f0:	210a      	movs	r1, #10
    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051f2:	9301      	str	r3, [sp, #4]
    h1 = hours / 10;
 80051f4:	f7fa ffb8 	bl	8000168 <__udivsi3>
    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051f8:	aa02      	add	r2, sp, #8
 80051fa:	9901      	ldr	r1, [sp, #4]
 80051fc:	b2c0      	uxtb	r0, r0
 80051fe:	f7ff f809 	bl	8004214 <LCD_Display_Year_Hour_Number>
    m0 = minutes % 10;
 8005202:	0028      	movs	r0, r5
 8005204:	210a      	movs	r1, #10
 8005206:	f7fb f835 	bl	8000274 <__aeabi_uidivmod>
    m1 = minutes / 10;
 800520a:	0028      	movs	r0, r5
    LCD_Display_Month_Min_Number(m1, m0, data_min);
 800520c:	b2ce      	uxtb	r6, r1
    m1 = minutes / 10;
 800520e:	210a      	movs	r1, #10
 8005210:	f7fa ffaa 	bl	8000168 <__udivsi3>
    LCD_Display_Month_Min_Number(m1, m0, data_min);
 8005214:	003a      	movs	r2, r7
 8005216:	0031      	movs	r1, r6
 8005218:	b2c0      	uxtb	r0, r0
 800521a:	f7ff f8e1 	bl	80043e0 <LCD_Display_Month_Min_Number>
    s0 = seconds % 10;
 800521e:	210a      	movs	r1, #10
 8005220:	0020      	movs	r0, r4
 8005222:	f7fb f827 	bl	8000274 <__aeabi_uidivmod>
    s1 = seconds / 10;
 8005226:	0020      	movs	r0, r4
    LCD_Display_Day_Sec_Number(s1, s0, data_sec);
 8005228:	b2cd      	uxtb	r5, r1
    s1 = seconds / 10;
 800522a:	210a      	movs	r1, #10
 800522c:	f7fa ff9c 	bl	8000168 <__udivsi3>
    LCD_Display_Day_Sec_Number(s1, s0, data_sec);
 8005230:	0029      	movs	r1, r5
 8005232:	b2c0      	uxtb	r0, r0
 8005234:	aa0a      	add	r2, sp, #40	@ 0x28
 8005236:	f7ff f998 	bl	800456a <LCD_Display_Day_Sec_Number>
 800523a:	2300      	movs	r3, #0
    for(int i=0; i<4; i++)
    {
    	data[i] = data_hour[i] | data_min[i] | data_sec[i];
 800523c:	2020      	movs	r0, #32
 800523e:	aa02      	add	r2, sp, #8
 8005240:	58f9      	ldr	r1, [r7, r3]
 8005242:	58d2      	ldr	r2, [r2, r3]
 8005244:	430a      	orrs	r2, r1
 8005246:	a902      	add	r1, sp, #8
 8005248:	1809      	adds	r1, r1, r0
 800524a:	58c9      	ldr	r1, [r1, r3]
 800524c:	430a      	orrs	r2, r1
 800524e:	9900      	ldr	r1, [sp, #0]
 8005250:	50ca      	str	r2, [r1, r3]
    for(int i=0; i<4; i++)
 8005252:	3304      	adds	r3, #4
 8005254:	2b10      	cmp	r3, #16
 8005256:	d1f1      	bne.n	800523c <LCD_DigitNumber_InTime_Calculate+0xac>
    }
}
 8005258:	b00f      	add	sp, #60	@ 0x3c
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800525c <LCD_Display_DelayMode>:
{
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	000c      	movs	r4, r1
	memset(data, 0, sizeof(data));
 8005260:	2704      	movs	r7, #4
{
 8005262:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 8005264:	4d18      	ldr	r5, [pc, #96]	@ (80052c8 <LCD_Display_DelayMode+0x6c>)
 8005266:	0028      	movs	r0, r5
 8005268:	f00a fc15 	bl	800fa96 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 800526c:	003a      	movs	r2, r7
 800526e:	2100      	movs	r1, #0
 8005270:	0020      	movs	r0, r4
 8005272:	f015 fa6f 	bl	801a754 <memset>
	HAL_LCD_Clear(&hlcd);
 8005276:	0028      	movs	r0, r5
 8005278:	f00a fc0d 	bl	800fa96 <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 800527c:	0021      	movs	r1, r4
 800527e:	b2b0      	uxth	r0, r6
 8005280:	f7ff ff86 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <LCD_Display_DelayMode+0x70>)
	data[3] = data[3] | 0x4000000;
 8005288:	68e1      	ldr	r1, [r4, #12]
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 800528a:	4313      	orrs	r3, r2
	data[3] = data[3] | 0x4000000;
 800528c:	2280      	movs	r2, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800528e:	4e10      	ldr	r6, [pc, #64]	@ (80052d0 <LCD_Display_DelayMode+0x74>)
	data[3] = data[3] | 0x4000000;
 8005290:	04d2      	lsls	r2, r2, #19
 8005292:	430a      	orrs	r2, r1
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005294:	0028      	movs	r0, r5
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 8005296:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x4000000;
 8005298:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800529a:	2100      	movs	r1, #0
 800529c:	0032      	movs	r2, r6
 800529e:	f00a fb99 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80052a2:	0032      	movs	r2, r6
 80052a4:	0028      	movs	r0, r5
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	2102      	movs	r1, #2
 80052aa:	f00a fb93 	bl	800f9d4 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80052ae:	0032      	movs	r2, r6
 80052b0:	0039      	movs	r1, r7
 80052b2:	0028      	movs	r0, r5
 80052b4:	68a3      	ldr	r3, [r4, #8]
 80052b6:	f00a fb8d 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80052ba:	0032      	movs	r2, r6
 80052bc:	0028      	movs	r0, r5
 80052be:	2106      	movs	r1, #6
 80052c0:	68e3      	ldr	r3, [r4, #12]
 80052c2:	f00a fb87 	bl	800f9d4 <HAL_LCD_Write>
}
 80052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c8:	20000a80 	.word	0x20000a80
 80052cc:	00010080 	.word	0x00010080
 80052d0:	f7fffffe 	.word	0xf7fffffe

080052d4 <LCD_Display_InTime_LT>:
{
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	000c      	movs	r4, r1
 80052d8:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 80052da:	4d18      	ldr	r5, [pc, #96]	@ (800533c <LCD_Display_InTime_LT+0x68>)
 80052dc:	0028      	movs	r0, r5
 80052de:	f00a fbda 	bl	800fa96 <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 80052e2:	0021      	movs	r1, r4
 80052e4:	b2b0      	uxth	r0, r6
 80052e6:	f7ff ff53 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <LCD_Display_InTime_LT+0x6c>)
	data[1] = data[1] | 0x200B000;
 80052ee:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 80052f0:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x200B000;
 80052f2:	4a14      	ldr	r2, [pc, #80]	@ (8005344 <LCD_Display_InTime_LT+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80052f4:	4e14      	ldr	r6, [pc, #80]	@ (8005348 <LCD_Display_InTime_LT+0x74>)
	data[1] = data[1] | 0x200B000;
 80052f6:	430a      	orrs	r2, r1
 80052f8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300B020;
 80052fa:	68a1      	ldr	r1, [r4, #8]
 80052fc:	4a13      	ldr	r2, [pc, #76]	@ (800534c <LCD_Display_InTime_LT+0x78>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80052fe:	0028      	movs	r0, r5
	data[2] = data[2] | 0x300B020;
 8005300:	430a      	orrs	r2, r1
 8005302:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x100E030;
 8005304:	68e1      	ldr	r1, [r4, #12]
 8005306:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <LCD_Display_InTime_LT+0x7c>)
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 8005308:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x100E030;
 800530a:	430a      	orrs	r2, r1
 800530c:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800530e:	2100      	movs	r1, #0
 8005310:	0032      	movs	r2, r6
 8005312:	f00a fb5f 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005316:	0032      	movs	r2, r6
 8005318:	0028      	movs	r0, r5
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	2102      	movs	r1, #2
 800531e:	f00a fb59 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005322:	0032      	movs	r2, r6
 8005324:	0028      	movs	r0, r5
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	2104      	movs	r1, #4
 800532a:	f00a fb53 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800532e:	0032      	movs	r2, r6
 8005330:	0028      	movs	r0, r5
 8005332:	2106      	movs	r1, #6
 8005334:	68e3      	ldr	r3, [r4, #12]
 8005336:	f00a fb4d 	bl	800f9d4 <HAL_LCD_Write>
}
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	20000a80 	.word	0x20000a80
 8005340:	01011090 	.word	0x01011090
 8005344:	0200b000 	.word	0x0200b000
 8005348:	f7fffffe 	.word	0xf7fffffe
 800534c:	0300b020 	.word	0x0300b020
 8005350:	0100e030 	.word	0x0100e030

08005354 <LCD_Display_InTime_LR>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	000c      	movs	r4, r1
 8005358:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 800535a:	4d18      	ldr	r5, [pc, #96]	@ (80053bc <LCD_Display_InTime_LR+0x68>)
 800535c:	0028      	movs	r0, r5
 800535e:	f00a fb9a 	bl	800fa96 <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 8005362:	0021      	movs	r1, r4
 8005364:	b2b0      	uxth	r0, r6
 8005366:	f7ff ff13 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <LCD_Display_InTime_LR+0x6c>)
	data[1] = data[1] | 0x200B010;
 800536e:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 8005370:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x200B010;
 8005372:	4a14      	ldr	r2, [pc, #80]	@ (80053c4 <LCD_Display_InTime_LR+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005374:	4e14      	ldr	r6, [pc, #80]	@ (80053c8 <LCD_Display_InTime_LR+0x74>)
	data[1] = data[1] | 0x200B010;
 8005376:	430a      	orrs	r2, r1
 8005378:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300B020;
 800537a:	68a1      	ldr	r1, [r4, #8]
 800537c:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <LCD_Display_InTime_LR+0x78>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800537e:	0028      	movs	r0, r5
	data[2] = data[2] | 0x300B020;
 8005380:	430a      	orrs	r2, r1
 8005382:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x100E030;
 8005384:	68e1      	ldr	r1, [r4, #12]
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <LCD_Display_InTime_LR+0x7c>)
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 8005388:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x100E030;
 800538a:	430a      	orrs	r2, r1
 800538c:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800538e:	2100      	movs	r1, #0
 8005390:	0032      	movs	r2, r6
 8005392:	f00a fb1f 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005396:	0032      	movs	r2, r6
 8005398:	0028      	movs	r0, r5
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	2102      	movs	r1, #2
 800539e:	f00a fb19 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80053a2:	0032      	movs	r2, r6
 80053a4:	0028      	movs	r0, r5
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	2104      	movs	r1, #4
 80053aa:	f00a fb13 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80053ae:	0032      	movs	r2, r6
 80053b0:	0028      	movs	r0, r5
 80053b2:	2106      	movs	r1, #6
 80053b4:	68e3      	ldr	r3, [r4, #12]
 80053b6:	f00a fb0d 	bl	800f9d4 <HAL_LCD_Write>
}
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	20000a80 	.word	0x20000a80
 80053c0:	01011080 	.word	0x01011080
 80053c4:	0200b010 	.word	0x0200b010
 80053c8:	f7fffffe 	.word	0xf7fffffe
 80053cc:	0300b020 	.word	0x0300b020
 80053d0:	0100e030 	.word	0x0100e030

080053d4 <LCD_Display_EndMode>:

void LCD_Display_EndMode(uint32_t *data)
{
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 80053d8:	4d15      	ldr	r5, [pc, #84]	@ (8005430 <LCD_Display_EndMode+0x5c>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x1000000; // 'End' 표시
	data[1] = data[1] | 0x2001000;
	data[2] = data[2] | 0x200F000;
	data[3] = data[3] | 0x300B000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80053da:	4e16      	ldr	r6, [pc, #88]	@ (8005434 <LCD_Display_EndMode+0x60>)
	HAL_LCD_Clear(&hlcd);
 80053dc:	0028      	movs	r0, r5
 80053de:	f00a fb5a 	bl	800fa96 <HAL_LCD_Clear>
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053e2:	2380      	movs	r3, #128	@ 0x80
	data[1] = data[1] | 0x2001000;
 80053e4:	6861      	ldr	r1, [r4, #4]
 80053e6:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <LCD_Display_EndMode+0x64>)
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053e8:	045b      	lsls	r3, r3, #17
	data[1] = data[1] | 0x2001000;
 80053ea:	430a      	orrs	r2, r1
 80053ec:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x200F000;
 80053ee:	68a1      	ldr	r1, [r4, #8]
 80053f0:	4a12      	ldr	r2, [pc, #72]	@ (800543c <LCD_Display_EndMode+0x68>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80053f2:	0028      	movs	r0, r5
	data[2] = data[2] | 0x200F000;
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x300B000;
 80053f8:	68e1      	ldr	r1, [r4, #12]
 80053fa:	4a11      	ldr	r2, [pc, #68]	@ (8005440 <LCD_Display_EndMode+0x6c>)
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053fc:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x300B000;
 80053fe:	430a      	orrs	r2, r1
 8005400:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005402:	2100      	movs	r1, #0
 8005404:	0032      	movs	r2, r6
 8005406:	f00a fae5 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 800540a:	0032      	movs	r2, r6
 800540c:	0028      	movs	r0, r5
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	2102      	movs	r1, #2
 8005412:	f00a fadf 	bl	800f9d4 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005416:	0032      	movs	r2, r6
 8005418:	0028      	movs	r0, r5
 800541a:	68a3      	ldr	r3, [r4, #8]
 800541c:	2104      	movs	r1, #4
 800541e:	f00a fad9 	bl	800f9d4 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8005422:	0032      	movs	r2, r6
 8005424:	0028      	movs	r0, r5
 8005426:	2106      	movs	r1, #6
 8005428:	68e3      	ldr	r3, [r4, #12]
 800542a:	f00a fad3 	bl	800f9d4 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//stop 글자, stop 표시
}
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	20000a80 	.word	0x20000a80
 8005434:	f7fffffe 	.word	0xf7fffffe
 8005438:	02001000 	.word	0x02001000
 800543c:	0200f000 	.word	0x0200f000
 8005440:	0300b000 	.word	0x0300b000

08005444 <LCD_Alarm_RH1_Display>:
void LCD_Alarm_RH1_Display(uint32_t *data){
	data[3] = data[3] | 0x8000000; // 'RH1' 표시
 8005444:	2380      	movs	r3, #128	@ 0x80
void LCD_Alarm_RH1_Display(uint32_t *data){
 8005446:	b510      	push	{r4, lr}
	data[3] = data[3] | 0x8000000; // 'RH1' 표시
 8005448:	68c2      	ldr	r2, [r0, #12]
 800544a:	051b      	lsls	r3, r3, #20
 800544c:	4313      	orrs	r3, r2
 800544e:	60c3      	str	r3, [r0, #12]
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8005450:	2106      	movs	r1, #6
 8005452:	4802      	ldr	r0, [pc, #8]	@ (800545c <LCD_Alarm_RH1_Display+0x18>)
 8005454:	4a02      	ldr	r2, [pc, #8]	@ (8005460 <LCD_Alarm_RH1_Display+0x1c>)
 8005456:	f00a fabd 	bl	800f9d4 <HAL_LCD_Write>
}
 800545a:	bd10      	pop	{r4, pc}
 800545c:	20000a80 	.word	0x20000a80
 8005460:	f7fffffe 	.word	0xf7fffffe

08005464 <LCD_Alarm_RH2_Display>:

void LCD_Alarm_RH2_Display(uint32_t *data){
	data[2] = data[2] | 0x8000000; // 'RH2' 표시
 8005464:	2380      	movs	r3, #128	@ 0x80
void LCD_Alarm_RH2_Display(uint32_t *data){
 8005466:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x8000000; // 'RH2' 표시
 8005468:	6882      	ldr	r2, [r0, #8]
 800546a:	051b      	lsls	r3, r3, #20
 800546c:	4313      	orrs	r3, r2
 800546e:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005470:	2104      	movs	r1, #4
 8005472:	4802      	ldr	r0, [pc, #8]	@ (800547c <LCD_Alarm_RH2_Display+0x18>)
 8005474:	4a02      	ldr	r2, [pc, #8]	@ (8005480 <LCD_Alarm_RH2_Display+0x1c>)
 8005476:	f00a faad 	bl	800f9d4 <HAL_LCD_Write>
}
 800547a:	bd10      	pop	{r4, pc}
 800547c:	20000a80 	.word	0x20000a80
 8005480:	f7fffffe 	.word	0xf7fffffe

08005484 <LCD_Alarm_TH1_Display>:

void LCD_Alarm_TH1_Display(uint32_t *data){
	data[1] = data[1] | 0x8000000; // 'TH1' 표시
 8005484:	2380      	movs	r3, #128	@ 0x80
void LCD_Alarm_TH1_Display(uint32_t *data){
 8005486:	b510      	push	{r4, lr}
	data[1] = data[1] | 0x8000000; // 'TH1' 표시
 8005488:	6842      	ldr	r2, [r0, #4]
 800548a:	051b      	lsls	r3, r3, #20
 800548c:	4313      	orrs	r3, r2
 800548e:	6043      	str	r3, [r0, #4]
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005490:	2102      	movs	r1, #2
 8005492:	4802      	ldr	r0, [pc, #8]	@ (800549c <LCD_Alarm_TH1_Display+0x18>)
 8005494:	4a02      	ldr	r2, [pc, #8]	@ (80054a0 <LCD_Alarm_TH1_Display+0x1c>)
 8005496:	f00a fa9d 	bl	800f9d4 <HAL_LCD_Write>
}
 800549a:	bd10      	pop	{r4, pc}
 800549c:	20000a80 	.word	0x20000a80
 80054a0:	f7fffffe 	.word	0xf7fffffe

080054a4 <LCD_Alarm_TH2_Display>:

void LCD_Alarm_TH2_Display(uint32_t *data){
	data[0] = data[0] | 0x8000000;// 'TH2' 표시
 80054a4:	2380      	movs	r3, #128	@ 0x80
void LCD_Alarm_TH2_Display(uint32_t *data){
 80054a6:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x8000000;// 'TH2' 표시
 80054a8:	6802      	ldr	r2, [r0, #0]
 80054aa:	051b      	lsls	r3, r3, #20
 80054ac:	4313      	orrs	r3, r2
 80054ae:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80054b0:	2100      	movs	r1, #0
 80054b2:	4802      	ldr	r0, [pc, #8]	@ (80054bc <LCD_Alarm_TH2_Display+0x18>)
 80054b4:	4a02      	ldr	r2, [pc, #8]	@ (80054c0 <LCD_Alarm_TH2_Display+0x1c>)
 80054b6:	f00a fa8d 	bl	800f9d4 <HAL_LCD_Write>
}
 80054ba:	bd10      	pop	{r4, pc}
 80054bc:	20000a80 	.word	0x20000a80
 80054c0:	f7fffffe 	.word	0xf7fffffe

080054c4 <LCD_Alarm_TL1_Display>:

void LCD_Alarm_TL1_Display(uint32_t *data){
	data[0] = data[0] | 0x0008000;// 'TL1' 표시
 80054c4:	2380      	movs	r3, #128	@ 0x80
void LCD_Alarm_TL1_Display(uint32_t *data){
 80054c6:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x0008000;// 'TL1' 표시
 80054c8:	6802      	ldr	r2, [r0, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	4313      	orrs	r3, r2
 80054ce:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80054d0:	2100      	movs	r1, #0
 80054d2:	4802      	ldr	r0, [pc, #8]	@ (80054dc <LCD_Alarm_TL1_Display+0x18>)
 80054d4:	4a02      	ldr	r2, [pc, #8]	@ (80054e0 <LCD_Alarm_TL1_Display+0x1c>)
 80054d6:	f00a fa7d 	bl	800f9d4 <HAL_LCD_Write>
}
 80054da:	bd10      	pop	{r4, pc}
 80054dc:	20000a80 	.word	0x20000a80
 80054e0:	f7fffffe 	.word	0xf7fffffe

080054e4 <LCD_Alarm_TL2_Display>:

void LCD_Alarm_TL2_Display(uint32_t *data){
	data[0] = data[0] | 0x0002000;// 'TL2' 표시
 80054e4:	2380      	movs	r3, #128	@ 0x80
void LCD_Alarm_TL2_Display(uint32_t *data){
 80054e6:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x0002000;// 'TL2' 표시
 80054e8:	6802      	ldr	r2, [r0, #0]
 80054ea:	019b      	lsls	r3, r3, #6
 80054ec:	4313      	orrs	r3, r2
 80054ee:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80054f0:	2100      	movs	r1, #0
 80054f2:	4802      	ldr	r0, [pc, #8]	@ (80054fc <LCD_Alarm_TL2_Display+0x18>)
 80054f4:	4a02      	ldr	r2, [pc, #8]	@ (8005500 <LCD_Alarm_TL2_Display+0x1c>)
 80054f6:	f00a fa6d 	bl	800f9d4 <HAL_LCD_Write>
}
 80054fa:	bd10      	pop	{r4, pc}
 80054fc:	20000a80 	.word	0x20000a80
 8005500:	f7fffffe 	.word	0xf7fffffe

08005504 <LCD_Display_Ring_R>:

void LCD_Display_Ring_R(uint32_t *data){
	data[2] = data[2] | 0x4000000;// 'Ring R' 표시
 8005504:	2380      	movs	r3, #128	@ 0x80
void LCD_Display_Ring_R(uint32_t *data){
 8005506:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x4000000;// 'Ring R' 표시
 8005508:	6882      	ldr	r2, [r0, #8]
 800550a:	04db      	lsls	r3, r3, #19
 800550c:	4313      	orrs	r3, r2
 800550e:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005510:	2104      	movs	r1, #4
 8005512:	4802      	ldr	r0, [pc, #8]	@ (800551c <LCD_Display_Ring_R+0x18>)
 8005514:	4a02      	ldr	r2, [pc, #8]	@ (8005520 <LCD_Display_Ring_R+0x1c>)
 8005516:	f00a fa5d 	bl	800f9d4 <HAL_LCD_Write>
}
 800551a:	bd10      	pop	{r4, pc}
 800551c:	20000a80 	.word	0x20000a80
 8005520:	f7fffffe 	.word	0xf7fffffe

08005524 <LCD_Display_Ring_T>:

void LCD_Display_Ring_T(uint32_t *data){
	data[1] = data[1] | 0x4000000;// 'Ring T' 표시
 8005524:	2380      	movs	r3, #128	@ 0x80
void LCD_Display_Ring_T(uint32_t *data){
 8005526:	b510      	push	{r4, lr}
	data[1] = data[1] | 0x4000000;// 'Ring T' 표시
 8005528:	6842      	ldr	r2, [r0, #4]
 800552a:	04db      	lsls	r3, r3, #19
 800552c:	4313      	orrs	r3, r2
 800552e:	6043      	str	r3, [r0, #4]
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005530:	2102      	movs	r1, #2
 8005532:	4802      	ldr	r0, [pc, #8]	@ (800553c <LCD_Display_Ring_T+0x18>)
 8005534:	4a02      	ldr	r2, [pc, #8]	@ (8005540 <LCD_Display_Ring_T+0x1c>)
 8005536:	f00a fa4d 	bl	800f9d4 <HAL_LCD_Write>
}
 800553a:	bd10      	pop	{r4, pc}
 800553c:	20000a80 	.word	0x20000a80
 8005540:	f7fffffe 	.word	0xf7fffffe

08005544 <LCD_Display_Alarm>:
	AlarmState TEMP_ALARM = (GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1) == ALARM_ON) ||
	               	  	  	(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2) == ALARM_ON) ||
							(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1) == ALARM_ON) ||
							(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2) == ALARM_ON);

	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1) == ALARM_ON)
 8005544:	22c0      	movs	r2, #192	@ 0xc0
void LCD_Display_Alarm(uint32_t *data){
 8005546:	b570      	push	{r4, r5, r6, lr}
	AlarmState RAD_ALARM  = (GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1) == ALARM_ON) ||
 8005548:	4d24      	ldr	r5, [pc, #144]	@ (80055dc <LCD_Display_Alarm+0x98>)
	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1) == ALARM_ON)
 800554a:	0092      	lsls	r2, r2, #2
 800554c:	69ab      	ldr	r3, [r5, #24]
void LCD_Display_Alarm(uint32_t *data){
 800554e:	0004      	movs	r4, r0
	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1) == ALARM_ON)
 8005550:	4013      	ands	r3, r2
 8005552:	2280      	movs	r2, #128	@ 0x80
 8005554:	0052      	lsls	r2, r2, #1
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <LCD_Display_Alarm+0x1a>
	{
		LCD_Alarm_RH1_Display(data);
 800555a:	f7ff ff73 	bl	8005444 <LCD_Alarm_RH1_Display>
	}
	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2) == ALARM_ON)
 800555e:	22c0      	movs	r2, #192	@ 0xc0
 8005560:	69ab      	ldr	r3, [r5, #24]
 8005562:	0112      	lsls	r2, r2, #4
 8005564:	4013      	ands	r3, r2
 8005566:	2280      	movs	r2, #128	@ 0x80
 8005568:	00d2      	lsls	r2, r2, #3
 800556a:	4293      	cmp	r3, r2
 800556c:	d102      	bne.n	8005574 <LCD_Display_Alarm+0x30>
	{
		LCD_Alarm_RH2_Display(data);
 800556e:	0020      	movs	r0, r4
 8005570:	f7ff ff78 	bl	8005464 <LCD_Alarm_RH2_Display>
	}
	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1) == ALARM_ON)
 8005574:	22c0      	movs	r2, #192	@ 0xc0
 8005576:	69ab      	ldr	r3, [r5, #24]
 8005578:	0192      	lsls	r2, r2, #6
 800557a:	4013      	ands	r3, r2
 800557c:	2280      	movs	r2, #128	@ 0x80
 800557e:	0152      	lsls	r2, r2, #5
 8005580:	4293      	cmp	r3, r2
 8005582:	d102      	bne.n	800558a <LCD_Display_Alarm+0x46>
	{
		LCD_Alarm_TH1_Display(data);
 8005584:	0020      	movs	r0, r4
 8005586:	f7ff ff7d 	bl	8005484 <LCD_Alarm_TH1_Display>
	}
	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2) == ALARM_ON)
 800558a:	22c0      	movs	r2, #192	@ 0xc0
 800558c:	69ab      	ldr	r3, [r5, #24]
 800558e:	0212      	lsls	r2, r2, #8
 8005590:	4013      	ands	r3, r2
 8005592:	2280      	movs	r2, #128	@ 0x80
 8005594:	01d2      	lsls	r2, r2, #7
 8005596:	4293      	cmp	r3, r2
 8005598:	d102      	bne.n	80055a0 <LCD_Display_Alarm+0x5c>
	{
		LCD_Alarm_TH2_Display(data);
 800559a:	0020      	movs	r0, r4
 800559c:	f7ff ff82 	bl	80054a4 <LCD_Alarm_TH2_Display>
	}
	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1) == ALARM_ON)
 80055a0:	22c0      	movs	r2, #192	@ 0xc0
 80055a2:	69ab      	ldr	r3, [r5, #24]
 80055a4:	0292      	lsls	r2, r2, #10
 80055a6:	4013      	ands	r3, r2
 80055a8:	2280      	movs	r2, #128	@ 0x80
 80055aa:	0252      	lsls	r2, r2, #9
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d102      	bne.n	80055b6 <LCD_Display_Alarm+0x72>
	{
		LCD_Alarm_TL1_Display(data);
 80055b0:	0020      	movs	r0, r4
 80055b2:	f7ff ff87 	bl	80054c4 <LCD_Alarm_TL1_Display>
	}
	if(GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2) == ALARM_ON)
 80055b6:	22c0      	movs	r2, #192	@ 0xc0
 80055b8:	69ab      	ldr	r3, [r5, #24]
 80055ba:	0312      	lsls	r2, r2, #12
 80055bc:	4013      	ands	r3, r2
 80055be:	2280      	movs	r2, #128	@ 0x80
 80055c0:	02d2      	lsls	r2, r2, #11
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d102      	bne.n	80055cc <LCD_Display_Alarm+0x88>
	{
		LCD_Alarm_TL2_Display(data);
 80055c6:	0020      	movs	r0, r4
 80055c8:	f7ff ff8c 	bl	80054e4 <LCD_Alarm_TL2_Display>
	}

	if(RAD_ALARM != ALARM_DISABLE)
	{
		LCD_Display_Ring_R(data);
 80055cc:	0020      	movs	r0, r4
 80055ce:	f7ff ff99 	bl	8005504 <LCD_Display_Ring_R>
	}
	if(TEMP_ALARM != ALARM_DISABLE)
	{
		LCD_Display_Ring_T(data);
 80055d2:	0020      	movs	r0, r4
 80055d4:	f7ff ffa6 	bl	8005524 <LCD_Display_Ring_T>
	}
}
 80055d8:	bd70      	pop	{r4, r5, r6, pc}
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	20000b50 	.word	0x20000b50

080055e0 <now_epoch_from_rtc>:
volatile bool RTC_During_Wakeup = 0;
uint32_t start_remaining;
UINT cur_record_num = 0;

static uint32_t now_epoch_from_rtc(void)
{
 80055e0:	b570      	push	{r4, r5, r6, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80055e2:	4e0d      	ldr	r6, [pc, #52]	@ (8005618 <now_epoch_from_rtc+0x38>)
{
 80055e4:	b088      	sub	sp, #32
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80055e6:	ac03      	add	r4, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80055e8:	ad02      	add	r5, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80055ea:	0021      	movs	r1, r4
 80055ec:	2200      	movs	r2, #0
 80055ee:	0030      	movs	r0, r6
 80055f0:	f00c fdf2 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80055f4:	0029      	movs	r1, r5
 80055f6:	2200      	movs	r2, #0
 80055f8:	0030      	movs	r0, r6
 80055fa:	f00c fe1f 	bl	801223c <HAL_RTC_GetDate>
    return ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 80055fe:	78aa      	ldrb	r2, [r5, #2]
 8005600:	7869      	ldrb	r1, [r5, #1]
 8005602:	78e8      	ldrb	r0, [r5, #3]
 8005604:	78a5      	ldrb	r5, [r4, #2]
 8005606:	7823      	ldrb	r3, [r4, #0]
 8005608:	9501      	str	r5, [sp, #4]
 800560a:	7864      	ldrb	r4, [r4, #1]
 800560c:	9400      	str	r4, [sp, #0]
 800560e:	f004 fa4d 	bl	8009aac <ymd_to_epoch>
}
 8005612:	b008      	add	sp, #32
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	200009f8 	.word	0x200009f8

0800561c <days_in_month>:

    // --- PWR Wakeup Flag (모든 소스 공통) ---
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
}
static bool is_leap(uint16_t y2000){ uint16_t y=2000+y2000; return ((y%4==0)&& (y%100!=0)) || (y%400==0); }
static uint8_t days_in_month(uint8_t m, uint8_t y2000){
 800561c:	b510      	push	{r4, lr}
    static const uint8_t dim[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 800561e:	2802      	cmp	r0, #2
 8005620:	d116      	bne.n	8005650 <days_in_month+0x34>
static bool is_leap(uint16_t y2000){ uint16_t y=2000+y2000; return ((y%4==0)&& (y%100!=0)) || (y%400==0); }
 8005622:	23fa      	movs	r3, #250	@ 0xfa
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	18cc      	adds	r4, r1, r3
 8005628:	0789      	lsls	r1, r1, #30
 800562a:	d107      	bne.n	800563c <days_in_month+0x20>
 800562c:	2164      	movs	r1, #100	@ 0x64
 800562e:	0020      	movs	r0, r4
 8005630:	f7fa fe20 	bl	8000274 <__aeabi_uidivmod>
 8005634:	b289      	uxth	r1, r1
 8005636:	2001      	movs	r0, #1
 8005638:	2900      	cmp	r1, #0
 800563a:	d107      	bne.n	800564c <days_in_month+0x30>
 800563c:	21c8      	movs	r1, #200	@ 0xc8
 800563e:	0020      	movs	r0, r4
 8005640:	0049      	lsls	r1, r1, #1
 8005642:	f7fa fe17 	bl	8000274 <__aeabi_uidivmod>
 8005646:	b288      	uxth	r0, r1
 8005648:	4243      	negs	r3, r0
 800564a:	4158      	adcs	r0, r3
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 800564c:	301c      	adds	r0, #28
}
 800564e:	bd10      	pop	{r4, pc}
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 8005650:	4b01      	ldr	r3, [pc, #4]	@ (8005658 <days_in_month+0x3c>)
 8005652:	5cc0      	ldrb	r0, [r0, r3]
 8005654:	e7fb      	b.n	800564e <days_in_month+0x32>
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	0802062d 	.word	0x0802062d

0800565c <read_temperature_steinhart_low>:
{
 800565c:	b570      	push	{r4, r5, r6, lr}
    r_ntc = RPULLUP_low *((float)adc_value/(4095 - (float)adc_value));
 800565e:	f7fc f8b5 	bl	80017cc <__aeabi_ui2f>
 8005662:	1c04      	adds	r4, r0, #0
 8005664:	1c01      	adds	r1, r0, #0
 8005666:	4815      	ldr	r0, [pc, #84]	@ (80056bc <read_temperature_steinhart_low+0x60>)
 8005668:	f7fb fdc6 	bl	80011f8 <__aeabi_fsub>
 800566c:	1c01      	adds	r1, r0, #0
 800566e:	1c20      	adds	r0, r4, #0
 8005670:	f7fb fa9a 	bl	8000ba8 <__aeabi_fdiv>
 8005674:	4912      	ldr	r1, [pc, #72]	@ (80056c0 <read_temperature_steinhart_low+0x64>)
 8005676:	f7fb fc65 	bl	8000f44 <__aeabi_fmul>
    ln_r = logf(r_ntc);
 800567a:	f017 f985 	bl	801c988 <logf>
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 800567e:	4911      	ldr	r1, [pc, #68]	@ (80056c4 <read_temperature_steinhart_low+0x68>)
    ln_r = logf(r_ntc);
 8005680:	1c04      	adds	r4, r0, #0
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 8005682:	f7fb fc5f 	bl	8000f44 <__aeabi_fmul>
 8005686:	1c21      	adds	r1, r4, #0
 8005688:	f7fb fc5c 	bl	8000f44 <__aeabi_fmul>
 800568c:	1c21      	adds	r1, r4, #0
 800568e:	f7fb fc59 	bl	8000f44 <__aeabi_fmul>
 8005692:	490d      	ldr	r1, [pc, #52]	@ (80056c8 <read_temperature_steinhart_low+0x6c>)
 8005694:	1c05      	adds	r5, r0, #0
 8005696:	1c20      	adds	r0, r4, #0
 8005698:	f7fb fc54 	bl	8000f44 <__aeabi_fmul>
 800569c:	490b      	ldr	r1, [pc, #44]	@ (80056cc <read_temperature_steinhart_low+0x70>)
 800569e:	f7fb f891 	bl	80007c4 <__aeabi_fadd>
 80056a2:	1c01      	adds	r1, r0, #0
 80056a4:	1c28      	adds	r0, r5, #0
 80056a6:	f7fb f88d 	bl	80007c4 <__aeabi_fadd>
 80056aa:	1c01      	adds	r1, r0, #0
    T_K = 1.0f / inv_T;
 80056ac:	20fe      	movs	r0, #254	@ 0xfe
 80056ae:	0580      	lsls	r0, r0, #22
 80056b0:	f7fb fa7a 	bl	8000ba8 <__aeabi_fdiv>
    T_C = T_K - 273.15f;
 80056b4:	4906      	ldr	r1, [pc, #24]	@ (80056d0 <read_temperature_steinhart_low+0x74>)
 80056b6:	f7fb fd9f 	bl	80011f8 <__aeabi_fsub>
}
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	457ff000 	.word	0x457ff000
 80056c0:	49dbba00 	.word	0x49dbba00
 80056c4:	33ba65a6 	.word	0x33ba65a6
 80056c8:	3975c4dc 	.word	0x3975c4dc
 80056cc:	3a93c6dc 	.word	0x3a93c6dc
 80056d0:	43889333 	.word	0x43889333

080056d4 <read_temperature_steinhart_middle>:
{
 80056d4:	b570      	push	{r4, r5, r6, lr}
    r_ntc = RPULLUP_middle *((float)adc_value/(4095 - (float)adc_value));
 80056d6:	f7fc f879 	bl	80017cc <__aeabi_ui2f>
 80056da:	1c04      	adds	r4, r0, #0
 80056dc:	1c01      	adds	r1, r0, #0
 80056de:	4815      	ldr	r0, [pc, #84]	@ (8005734 <read_temperature_steinhart_middle+0x60>)
 80056e0:	f7fb fd8a 	bl	80011f8 <__aeabi_fsub>
 80056e4:	1c01      	adds	r1, r0, #0
 80056e6:	1c20      	adds	r0, r4, #0
 80056e8:	f7fb fa5e 	bl	8000ba8 <__aeabi_fdiv>
 80056ec:	4912      	ldr	r1, [pc, #72]	@ (8005738 <read_temperature_steinhart_middle+0x64>)
 80056ee:	f7fb fc29 	bl	8000f44 <__aeabi_fmul>
    ln_r = logf(r_ntc);
 80056f2:	f017 f949 	bl	801c988 <logf>
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 80056f6:	4911      	ldr	r1, [pc, #68]	@ (800573c <read_temperature_steinhart_middle+0x68>)
    ln_r = logf(r_ntc);
 80056f8:	1c04      	adds	r4, r0, #0
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 80056fa:	f7fb fc23 	bl	8000f44 <__aeabi_fmul>
 80056fe:	1c21      	adds	r1, r4, #0
 8005700:	f7fb fc20 	bl	8000f44 <__aeabi_fmul>
 8005704:	1c21      	adds	r1, r4, #0
 8005706:	f7fb fc1d 	bl	8000f44 <__aeabi_fmul>
 800570a:	490d      	ldr	r1, [pc, #52]	@ (8005740 <read_temperature_steinhart_middle+0x6c>)
 800570c:	1c05      	adds	r5, r0, #0
 800570e:	1c20      	adds	r0, r4, #0
 8005710:	f7fb fc18 	bl	8000f44 <__aeabi_fmul>
 8005714:	490b      	ldr	r1, [pc, #44]	@ (8005744 <read_temperature_steinhart_middle+0x70>)
 8005716:	f7fb f855 	bl	80007c4 <__aeabi_fadd>
 800571a:	1c01      	adds	r1, r0, #0
 800571c:	1c28      	adds	r0, r5, #0
 800571e:	f7fb f851 	bl	80007c4 <__aeabi_fadd>
 8005722:	1c01      	adds	r1, r0, #0
    T_K = 1.0f / inv_T;
 8005724:	20fe      	movs	r0, #254	@ 0xfe
 8005726:	0580      	lsls	r0, r0, #22
 8005728:	f7fb fa3e 	bl	8000ba8 <__aeabi_fdiv>
    T_C = T_K - 273.15f;
 800572c:	4906      	ldr	r1, [pc, #24]	@ (8005748 <read_temperature_steinhart_middle+0x74>)
 800572e:	f7fb fd63 	bl	80011f8 <__aeabi_fsub>
}
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	457ff000 	.word	0x457ff000
 8005738:	484d1400 	.word	0x484d1400
 800573c:	33a8d38a 	.word	0x33a8d38a
 8005740:	39590111 	.word	0x39590111
 8005744:	3a5f3a52 	.word	0x3a5f3a52
 8005748:	43889333 	.word	0x43889333

0800574c <compare_temperature>:
{
 800574c:	b570      	push	{r4, r5, r6, lr}
    if (use_sensor1)
 800574e:	4e0c      	ldr	r6, [pc, #48]	@ (8005780 <compare_temperature+0x34>)
{
 8005750:	1c04      	adds	r4, r0, #0
    if (use_sensor1)
 8005752:	7833      	ldrb	r3, [r6, #0]
{
 8005754:	1c0d      	adds	r5, r1, #0
    if (use_sensor1)
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <compare_temperature+0x22>
        if (Temp_Low <= -61.0f)
 800575a:	490a      	ldr	r1, [pc, #40]	@ (8005784 <compare_temperature+0x38>)
 800575c:	1c28      	adds	r0, r5, #0
 800575e:	f7fa fed3 	bl	8000508 <__aeabi_fcmple>
 8005762:	2800      	cmp	r0, #0
 8005764:	d00a      	beq.n	800577c <compare_temperature+0x30>
            use_sensor1 = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	7033      	strb	r3, [r6, #0]
    return (use_sensor1 ? Temp_Middle : Temp_Low);
 800576a:	1c2c      	adds	r4, r5, #0
 800576c:	e006      	b.n	800577c <compare_temperature+0x30>
        if (Temp_Middle >= -59.0f)
 800576e:	4906      	ldr	r1, [pc, #24]	@ (8005788 <compare_temperature+0x3c>)
 8005770:	f7fa fede 	bl	8000530 <__aeabi_fcmpge>
 8005774:	2800      	cmp	r0, #0
 8005776:	d0f8      	beq.n	800576a <compare_temperature+0x1e>
            use_sensor1 = 1;
 8005778:	2301      	movs	r3, #1
 800577a:	7033      	strb	r3, [r6, #0]
}
 800577c:	1c20      	adds	r0, r4, #0
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	20000008 	.word	0x20000008
 8005784:	c2740000 	.word	0xc2740000
 8005788:	c26c0000 	.word	0xc26c0000

0800578c <Read_Temp>:
	temperature1_avg = 0;
 800578c:	2300      	movs	r3, #0
void Read_Temp(){
 800578e:	b5f0      	push	{r4, r5, r6, r7, lr}
	temperature2_avg = 0;
 8005790:	270a      	movs	r7, #10
	temperature1_avg = 0;
 8005792:	4e2f      	ldr	r6, [pc, #188]	@ (8005850 <Read_Temp+0xc4>)
	temperature2_avg = 0;
 8005794:	4d2f      	ldr	r5, [pc, #188]	@ (8005854 <Read_Temp+0xc8>)
void Read_Temp(){
 8005796:	b085      	sub	sp, #20
	temperature1_avg = 0;
 8005798:	6033      	str	r3, [r6, #0]
	temperature2_avg = 0;
 800579a:	602b      	str	r3, [r5, #0]
		  	 		    sConfig.Channel = ADC_CHANNEL_0;
 800579c:	2301      	movs	r3, #1
 800579e:	9301      	str	r3, [sp, #4]
		  	 		    sConfig.Rank = ADC_REGULAR_RANK_1;
 80057a0:	2300      	movs	r3, #0
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80057a2:	4c2d      	ldr	r4, [pc, #180]	@ (8005858 <Read_Temp+0xcc>)
 80057a4:	a901      	add	r1, sp, #4
 80057a6:	0020      	movs	r0, r4
		  	 		    sConfig.Rank = ADC_REGULAR_RANK_1;
 80057a8:	9302      	str	r3, [sp, #8]
		  	 		    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80057aa:	9303      	str	r3, [sp, #12]
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80057ac:	f009 f8b0 	bl	800e910 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 80057b0:	0020      	movs	r0, r4
 80057b2:	f009 fa1d 	bl	800ebf0 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80057b6:	2101      	movs	r1, #1
 80057b8:	0020      	movs	r0, r4
 80057ba:	4249      	negs	r1, r1
 80057bc:	f008 ff70 	bl	800e6a0 <HAL_ADC_PollForConversion>
		  	 		    adc_value1 = HAL_ADC_GetValue(&hadc1);
 80057c0:	0020      	movs	r0, r4
 80057c2:	f008 ffd1 	bl	800e768 <HAL_ADC_GetValue>
 80057c6:	4b25      	ldr	r3, [pc, #148]	@ (800585c <Read_Temp+0xd0>)
	 for(int i=0; i < 10; i++)
 80057c8:	3f01      	subs	r7, #1
		  	 		    adc_value1 = HAL_ADC_GetValue(&hadc1);
 80057ca:	8018      	strh	r0, [r3, #0]
		  	 		    temperature1 = read_temperature_steinhart_middle(adc_value1);
 80057cc:	b280      	uxth	r0, r0
 80057ce:	f7ff ff81 	bl	80056d4 <read_temperature_steinhart_middle>
 80057d2:	4b23      	ldr	r3, [pc, #140]	@ (8005860 <Read_Temp+0xd4>)
 80057d4:	1c01      	adds	r1, r0, #0
 80057d6:	6018      	str	r0, [r3, #0]
		  	 		    temperature1_avg = temperature1_avg + temperature1;
 80057d8:	6830      	ldr	r0, [r6, #0]
 80057da:	f7fa fff3 	bl	80007c4 <__aeabi_fadd>
 80057de:	6030      	str	r0, [r6, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 80057e0:	0020      	movs	r0, r4
 80057e2:	f009 fac5 	bl	800ed70 <HAL_ADC_Stop>
		  	 		    sConfig.Channel = ADC_CHANNEL_2;
 80057e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005864 <Read_Temp+0xd8>)
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80057e8:	a901      	add	r1, sp, #4
 80057ea:	0020      	movs	r0, r4
		  	 		    sConfig.Channel = ADC_CHANNEL_2;
 80057ec:	9301      	str	r3, [sp, #4]
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80057ee:	f009 f88f 	bl	800e910 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 80057f2:	0020      	movs	r0, r4
 80057f4:	f009 f9fc 	bl	800ebf0 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80057f8:	2101      	movs	r1, #1
 80057fa:	0020      	movs	r0, r4
 80057fc:	4249      	negs	r1, r1
 80057fe:	f008 ff4f 	bl	800e6a0 <HAL_ADC_PollForConversion>
		  	 		    adc_value2 = HAL_ADC_GetValue(&hadc1);
 8005802:	0020      	movs	r0, r4
 8005804:	f008 ffb0 	bl	800e768 <HAL_ADC_GetValue>
 8005808:	4b17      	ldr	r3, [pc, #92]	@ (8005868 <Read_Temp+0xdc>)
 800580a:	8018      	strh	r0, [r3, #0]
		  	 		    temperature2 = read_temperature_steinhart_low(adc_value2);
 800580c:	b280      	uxth	r0, r0
 800580e:	f7ff ff25 	bl	800565c <read_temperature_steinhart_low>
 8005812:	4b16      	ldr	r3, [pc, #88]	@ (800586c <Read_Temp+0xe0>)
 8005814:	1c01      	adds	r1, r0, #0
 8005816:	6018      	str	r0, [r3, #0]
		  	 		    temperature2_avg = temperature2_avg + temperature2;
 8005818:	6828      	ldr	r0, [r5, #0]
 800581a:	f7fa ffd3 	bl	80007c4 <__aeabi_fadd>
 800581e:	6028      	str	r0, [r5, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 8005820:	0020      	movs	r0, r4
 8005822:	f009 faa5 	bl	800ed70 <HAL_ADC_Stop>
	 for(int i=0; i < 10; i++)
 8005826:	2f00      	cmp	r7, #0
 8005828:	d1b8      	bne.n	800579c <Read_Temp+0x10>
		  	 		    temperature1_avg = temperature1_avg / 10;
 800582a:	6830      	ldr	r0, [r6, #0]
 800582c:	4910      	ldr	r1, [pc, #64]	@ (8005870 <Read_Temp+0xe4>)
 800582e:	f7fb f9bb 	bl	8000ba8 <__aeabi_fdiv>
		  	 		    temperature2_avg = temperature2_avg / 10;
 8005832:	490f      	ldr	r1, [pc, #60]	@ (8005870 <Read_Temp+0xe4>)
		  	 		    temperature1_avg = temperature1_avg / 10;
 8005834:	1c04      	adds	r4, r0, #0
 8005836:	6030      	str	r0, [r6, #0]
		  	 		    temperature2_avg = temperature2_avg / 10;
 8005838:	6828      	ldr	r0, [r5, #0]
 800583a:	f7fb f9b5 	bl	8000ba8 <__aeabi_fdiv>
 800583e:	1c01      	adds	r1, r0, #0
 8005840:	6028      	str	r0, [r5, #0]
		  	 		    Display_temperature  = compare_temperature(temperature1_avg, temperature2_avg);
 8005842:	1c20      	adds	r0, r4, #0
 8005844:	f7ff ff82 	bl	800574c <compare_temperature>
 8005848:	4b0a      	ldr	r3, [pc, #40]	@ (8005874 <Read_Temp+0xe8>)
 800584a:	6018      	str	r0, [r3, #0]
}
 800584c:	b005      	add	sp, #20
 800584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005850:	2000054c 	.word	0x2000054c
 8005854:	20000548 	.word	0x20000548
 8005858:	20000aec 	.word	0x20000aec
 800585c:	2000055a 	.word	0x2000055a
 8005860:	20000554 	.word	0x20000554
 8005864:	08000004 	.word	0x08000004
 8005868:	20000558 	.word	0x20000558
 800586c:	20000550 	.word	0x20000550
 8005870:	41200000 	.word	0x41200000
 8005874:	20000544 	.word	0x20000544

08005878 <RTC_Disable_All_Wakeup>:
{
 8005878:	b570      	push	{r4, r5, r6, lr}
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);          // WUT 카운터 끄기
 800587a:	4c0e      	ldr	r4, [pc, #56]	@ (80058b4 <RTC_Disable_All_Wakeup+0x3c>)
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 800587c:	4d0e      	ldr	r5, [pc, #56]	@ (80058b8 <RTC_Disable_All_Wakeup+0x40>)
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);          // WUT 카운터 끄기
 800587e:	0020      	movs	r0, r4
 8005880:	f00c fd00 	bl	8012284 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT();         // EXTI line 20 IT 비활성
 8005884:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <RTC_Disable_All_Wakeup+0x44>)
 8005886:	490e      	ldr	r1, [pc, #56]	@ (80058c0 <RTC_Disable_All_Wakeup+0x48>)
 8005888:	1d18      	adds	r0, r3, #4
 800588a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 800588c:	3308      	adds	r3, #8
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT();         // EXTI line 20 IT 비활성
 800588e:	400a      	ands	r2, r1
 8005890:	67c2      	str	r2, [r0, #124]	@ 0x7c
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 8005892:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 8005894:	0020      	movs	r0, r4
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 8005896:	400a      	ands	r2, r1
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 8005898:	2180      	movs	r1, #128	@ 0x80
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 800589a:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <RTC_Disable_All_Wakeup+0x4c>)
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 800589e:	0049      	lsls	r1, r1, #1
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 80058a0:	65eb      	str	r3, [r5, #92]	@ 0x5c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 80058a2:	f00c f9f9 	bl	8011c98 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF); // ALRAF 플래그 클리어
 80058a6:	2301      	movs	r3, #1
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80058a8:	225f      	movs	r2, #95	@ 0x5f
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF); // ALRAF 플래그 클리어
 80058aa:	65eb      	str	r3, [r5, #92]	@ 0x5c
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80058ac:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <RTC_Disable_All_Wakeup+0x50>)
 80058ae:	619a      	str	r2, [r3, #24]
}
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	200009f8 	.word	0x200009f8
 80058b8:	40002800 	.word	0x40002800
 80058bc:	40021800 	.word	0x40021800
 80058c0:	efffffff 	.word	0xefffffff
 80058c4:	00000202 	.word	0x00000202
 80058c8:	40007000 	.word	0x40007000

080058cc <RTC_SetAlarmA_SecondsFromNow>:

void RTC_SetAlarmA_SecondsFromNow(uint32_t after_sec)     // 지울예정
{
 80058cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);

    uint8_t Y=d.Year, M=d.Month, D=d.Date;
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 80058ce:	24e1      	movs	r4, #225	@ 0xe1
{
 80058d0:	b097      	sub	sp, #92	@ 0x5c
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80058d2:	4b38      	ldr	r3, [pc, #224]	@ (80059b4 <RTC_SetAlarmA_SecondsFromNow+0xe8>)
 80058d4:	ad05      	add	r5, sp, #20
 80058d6:	0029      	movs	r1, r5
 80058d8:	2200      	movs	r2, #0
{
 80058da:	9003      	str	r0, [sp, #12]
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80058dc:	0018      	movs	r0, r3
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	f00c fc7a 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80058e4:	2200      	movs	r2, #0
 80058e6:	9801      	ldr	r0, [sp, #4]
 80058e8:	a904      	add	r1, sp, #16
 80058ea:	f00c fca7 	bl	801223c <HAL_RTC_GetDate>
    uint8_t Y=d.Year, M=d.Month, D=d.Date;
 80058ee:	ab04      	add	r3, sp, #16
 80058f0:	78db      	ldrb	r3, [r3, #3]
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 80058f2:	0124      	lsls	r4, r4, #4
    uint8_t Y=d.Year, M=d.Month, D=d.Date;
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	ab04      	add	r3, sp, #16
 80058f8:	785f      	ldrb	r7, [r3, #1]
 80058fa:	789e      	ldrb	r6, [r3, #2]
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 80058fc:	782b      	ldrb	r3, [r5, #0]
 80058fe:	786a      	ldrb	r2, [r5, #1]
 8005900:	435c      	muls	r4, r3
    uint32_t tgt = now + after_sec;
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	18e4      	adds	r4, r4, r3
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 8005906:	78ab      	ldrb	r3, [r5, #2]
    // 날짜 보정
    while (tgt >= 86400u) {
        tgt -= 86400u;
        // ++D, 월말/윤년 처리
//        extern uint8_t days_in_month(uint8_t m, uint16_t y2000);
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 8005908:	2501      	movs	r5, #1
    uint32_t tgt = now + after_sec;
 800590a:	18e4      	adds	r4, r4, r3
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 800590c:	233c      	movs	r3, #60	@ 0x3c
 800590e:	4353      	muls	r3, r2
    uint32_t tgt = now + after_sec;
 8005910:	18e4      	adds	r4, r4, r3
    while (tgt >= 86400u) {
 8005912:	4b29      	ldr	r3, [pc, #164]	@ (80059b8 <RTC_SetAlarmA_SecondsFromNow+0xec>)
 8005914:	429c      	cmp	r4, r3
 8005916:	d833      	bhi.n	8005980 <RTC_SetAlarmA_SecondsFromNow+0xb4>
    }

    // 기존 알람 정리
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8005918:	2780      	movs	r7, #128	@ 0x80
 800591a:	007f      	lsls	r7, r7, #1
 800591c:	0039      	movs	r1, r7
 800591e:	9801      	ldr	r0, [sp, #4]
 8005920:	f00c f9ba 	bl	8011c98 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8005924:	2201      	movs	r2, #1

    RTC_AlarmTypeDef a = {0};
 8005926:	201b      	movs	r0, #27
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8005928:	4b24      	ldr	r3, [pc, #144]	@ (80059bc <RTC_SetAlarmA_SecondsFromNow+0xf0>)
    RTC_AlarmTypeDef a = {0};
 800592a:	2100      	movs	r1, #0
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800592c:	65da      	str	r2, [r3, #92]	@ 0x5c
    RTC_AlarmTypeDef a = {0};
 800592e:	ab04      	add	r3, sp, #16
 8005930:	3228      	adds	r2, #40	@ 0x28
 8005932:	18c0      	adds	r0, r0, r3
 8005934:	f014 ff0e 	bl	801a754 <memset>
    a.AlarmTime.Hours   = tgt/3600u;
 8005938:	21e1      	movs	r1, #225	@ 0xe1
 800593a:	0020      	movs	r0, r4
 800593c:	0109      	lsls	r1, r1, #4
 800593e:	f7fa fc13 	bl	8000168 <__udivsi3>
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 8005942:	21e1      	movs	r1, #225	@ 0xe1
    RTC_AlarmTypeDef a = {0};
 8005944:	ad0a      	add	r5, sp, #40	@ 0x28
    a.AlarmTime.Hours   = tgt/3600u;
 8005946:	7028      	strb	r0, [r5, #0]
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 8005948:	0109      	lsls	r1, r1, #4
 800594a:	0020      	movs	r0, r4
 800594c:	f7fa fc92 	bl	8000274 <__aeabi_uidivmod>
 8005950:	0008      	movs	r0, r1
 8005952:	213c      	movs	r1, #60	@ 0x3c
 8005954:	f7fa fc08 	bl	8000168 <__udivsi3>
    a.AlarmTime.Seconds = tgt%60u;
 8005958:	213c      	movs	r1, #60	@ 0x3c
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 800595a:	7068      	strb	r0, [r5, #1]
    a.AlarmTime.Seconds = tgt%60u;
 800595c:	0020      	movs	r0, r4
 800595e:	f7fa fc89 	bl	8000274 <__aeabi_uidivmod>
    a.AlarmMask         = RTC_ALARMMASK_NONE;              // 날짜/시/분/초 모두 비교
    a.AlarmSubSecondMask= RTC_ALARMSUBSECONDMASK_ALL;
    a.Alarm             = RTC_ALARM_A;
    a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;  // 날짜 비교
    a.AlarmDateWeekDay  = D;
 8005962:	231d      	movs	r3, #29
 8005964:	aa04      	add	r2, sp, #16
 8005966:	189b      	adds	r3, r3, r2
    a.AlarmTime.Seconds = tgt%60u;
 8005968:	70a9      	strb	r1, [r5, #2]

    if (HAL_RTC_SetAlarm_IT(&hrtc, &a, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 800596a:	2200      	movs	r2, #0
 800596c:	0029      	movs	r1, r5
 800596e:	9801      	ldr	r0, [sp, #4]
    a.Alarm             = RTC_ALARM_A;
 8005970:	9715      	str	r7, [sp, #84]	@ 0x54
    a.AlarmDateWeekDay  = D;
 8005972:	77de      	strb	r6, [r3, #31]
    if (HAL_RTC_SetAlarm_IT(&hrtc, &a, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8005974:	f00c fb72 	bl	801205c <HAL_RTC_SetAlarm_IT>
 8005978:	2800      	cmp	r0, #0
 800597a:	d019      	beq.n	80059b0 <RTC_SetAlarmA_SecondsFromNow+0xe4>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800597c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800597e:	e7fe      	b.n	800597e <RTC_SetAlarmA_SecondsFromNow+0xb2>
        tgt -= 86400u;
 8005980:	4b0f      	ldr	r3, [pc, #60]	@ (80059c0 <RTC_SetAlarmA_SecondsFromNow+0xf4>)
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 8005982:	3601      	adds	r6, #1
 8005984:	0038      	movs	r0, r7
 8005986:	9902      	ldr	r1, [sp, #8]
 8005988:	b2f6      	uxtb	r6, r6
        tgt -= 86400u;
 800598a:	18e4      	adds	r4, r4, r3
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 800598c:	f7ff fe46 	bl	800561c <days_in_month>
 8005990:	42b0      	cmp	r0, r6
 8005992:	d2be      	bcs.n	8005912 <RTC_SetAlarmA_SecondsFromNow+0x46>
 8005994:	3701      	adds	r7, #1
 8005996:	b2ff      	uxtb	r7, r7
 8005998:	002e      	movs	r6, r5
 800599a:	2f0d      	cmp	r7, #13
 800599c:	d1b9      	bne.n	8005912 <RTC_SetAlarmA_SecondsFromNow+0x46>
 800599e:	9802      	ldr	r0, [sp, #8]
 80059a0:	2164      	movs	r1, #100	@ 0x64
 80059a2:	3001      	adds	r0, #1
 80059a4:	f7fa fd50 	bl	8000448 <__aeabi_idivmod>
 80059a8:	b2cb      	uxtb	r3, r1
 80059aa:	002f      	movs	r7, r5
 80059ac:	9302      	str	r3, [sp, #8]
 80059ae:	e7b0      	b.n	8005912 <RTC_SetAlarmA_SecondsFromNow+0x46>
}
 80059b0:	b017      	add	sp, #92	@ 0x5c
 80059b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b4:	200009f8 	.word	0x200009f8
 80059b8:	0001517f 	.word	0x0001517f
 80059bc:	40002800 	.word	0x40002800
 80059c0:	fffeae80 	.word	0xfffeae80

080059c4 <Set_StartTargetTime_FromReservation>:
{
 80059c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_epoch = current_settings.start_reservation_time; // 예약 타깃(epoch)
 80059c6:	4d2e      	ldr	r5, [pc, #184]	@ (8005a80 <Set_StartTargetTime_FromReservation+0xbc>)
 80059c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a84 <Set_StartTargetTime_FromReservation+0xc0>)
 80059ca:	002a      	movs	r2, r5
 80059cc:	32a6      	adds	r2, #166	@ 0xa6
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	0212      	lsls	r2, r2, #8
 80059d4:	431a      	orrs	r2, r3
 80059d6:	002b      	movs	r3, r5
 80059d8:	33a7      	adds	r3, #167	@ 0xa7
 80059da:	781b      	ldrb	r3, [r3, #0]
{
 80059dc:	b08b      	sub	sp, #44	@ 0x2c
    uint32_t target_epoch = current_settings.start_reservation_time; // 예약 타깃(epoch)
 80059de:	041b      	lsls	r3, r3, #16
 80059e0:	4313      	orrs	r3, r2
 80059e2:	002a      	movs	r2, r5
 80059e4:	32a8      	adds	r2, #168	@ 0xa8
 80059e6:	7814      	ldrb	r4, [r2, #0]
 80059e8:	0624      	lsls	r4, r4, #24
 80059ea:	431c      	orrs	r4, r3
    if (target_epoch == 0u) {
 80059ec:	d104      	bne.n	80059f8 <Set_StartTargetTime_FromReservation+0x34>
        printf("[Reserve] start_reservation_time=0 → skip.\r\n");
 80059ee:	4826      	ldr	r0, [pc, #152]	@ (8005a88 <Set_StartTargetTime_FromReservation+0xc4>)
 80059f0:	f014 fd54 	bl	801a49c <puts>
}
 80059f4:	b00b      	add	sp, #44	@ 0x2c
 80059f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80059f8:	4b24      	ldr	r3, [pc, #144]	@ (8005a8c <Set_StartTargetTime_FromReservation+0xc8>)
 80059fa:	ae05      	add	r6, sp, #20
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80059fc:	af04      	add	r7, sp, #16
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80059fe:	0031      	movs	r1, r6
 8005a00:	0018      	movs	r0, r3
 8005a02:	2200      	movs	r2, #0
 8005a04:	9303      	str	r3, [sp, #12]
 8005a06:	f00c fbe7 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005a0a:	0039      	movs	r1, r7
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	9803      	ldr	r0, [sp, #12]
 8005a10:	f00c fc14 	bl	801223c <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005a14:	78ba      	ldrb	r2, [r7, #2]
 8005a16:	7879      	ldrb	r1, [r7, #1]
 8005a18:	78f8      	ldrb	r0, [r7, #3]
 8005a1a:	78b7      	ldrb	r7, [r6, #2]
 8005a1c:	7833      	ldrb	r3, [r6, #0]
 8005a1e:	9701      	str	r7, [sp, #4]
 8005a20:	7876      	ldrb	r6, [r6, #1]
 8005a22:	9600      	str	r6, [sp, #0]
 8005a24:	f004 f842 	bl	8009aac <ymd_to_epoch>
 8005a28:	0006      	movs	r6, r0
    if (target_epoch <= now_epoch) {
 8005a2a:	4284      	cmp	r4, r0
 8005a2c:	d805      	bhi.n	8005a3a <Set_StartTargetTime_FromReservation+0x76>
        printf("[Reserve] target(%lu) <= now(%lu) → start immediately.\r\n",
 8005a2e:	0032      	movs	r2, r6
 8005a30:	0021      	movs	r1, r4
 8005a32:	4817      	ldr	r0, [pc, #92]	@ (8005a90 <Set_StartTargetTime_FromReservation+0xcc>)
 8005a34:	f014 fcc2 	bl	801a3bc <iprintf>
        return;
 8005a38:	e7dc      	b.n	80059f4 <Set_StartTargetTime_FromReservation+0x30>
    if (remaining > ALARMA_MAX_CHUNK_SEC) {
 8005a3a:	4b16      	ldr	r3, [pc, #88]	@ (8005a94 <Set_StartTargetTime_FromReservation+0xd0>)
    uint32_t remaining = target_epoch - now_epoch;
 8005a3c:	1a27      	subs	r7, r4, r0
        chunk = ALARMA_MAX_CHUNK_SEC;
 8005a3e:	9303      	str	r3, [sp, #12]
    if (remaining > ALARMA_MAX_CHUNK_SEC) {
 8005a40:	429f      	cmp	r7, r3
 8005a42:	d805      	bhi.n	8005a50 <Set_StartTargetTime_FromReservation+0x8c>
        chunk = (remaining > 5u) ? (remaining - 5u) : 1u; // 최소 1초 보정
 8005a44:	003b      	movs	r3, r7
 8005a46:	2f06      	cmp	r7, #6
 8005a48:	d200      	bcs.n	8005a4c <Set_StartTargetTime_FromReservation+0x88>
 8005a4a:	2306      	movs	r3, #6
 8005a4c:	3b05      	subs	r3, #5
 8005a4e:	9303      	str	r3, [sp, #12]
    current_settings.start_target_seconds = target_epoch;   // 타깃은 ‘절대초’로 일원화
 8005a50:	35a1      	adds	r5, #161	@ 0xa1
 8005a52:	0a23      	lsrs	r3, r4, #8
 8005a54:	706b      	strb	r3, [r5, #1]
 8005a56:	0c23      	lsrs	r3, r4, #16
 8005a58:	70ab      	strb	r3, [r5, #2]
 8005a5a:	0e23      	lsrs	r3, r4, #24
 8005a5c:	70eb      	strb	r3, [r5, #3]
 8005a5e:	702c      	strb	r4, [r5, #0]
    Save_CurrentSettings();
 8005a60:	f004 f8dc 	bl	8009c1c <Save_CurrentSettings>
    RTC_Disable_All_Wakeup();
 8005a64:	f7ff ff08 	bl	8005878 <RTC_Disable_All_Wakeup>
    RTC_SetAlarmA_SecondsFromNow(chunk);
 8005a68:	9803      	ldr	r0, [sp, #12]
 8005a6a:	f7ff ff2f 	bl	80058cc <RTC_SetAlarmA_SecondsFromNow>
    printf("[Reserve] target=%lu, now=%lu, remain=%lu → chunk=%lu sec (AlarmA)\r\n",
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	0032      	movs	r2, r6
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	0021      	movs	r1, r4
 8005a76:	003b      	movs	r3, r7
 8005a78:	4807      	ldr	r0, [pc, #28]	@ (8005a98 <Set_StartTargetTime_FromReservation+0xd4>)
 8005a7a:	f014 fc9f 	bl	801a3bc <iprintf>
 8005a7e:	e7b9      	b.n	80059f4 <Set_StartTargetTime_FromReservation+0x30>
 8005a80:	20002bac 	.word	0x20002bac
 8005a84:	20002c51 	.word	0x20002c51
 8005a88:	0801cdb8 	.word	0x0801cdb8
 8005a8c:	200009f8 	.word	0x200009f8
 8005a90:	0801cde6 	.word	0x0801cde6
 8005a94:	0028de80 	.word	0x0028de80
 8005a98:	0801ce21 	.word	0x0801ce21

08005a9c <Maybe_Rearm_Reservation_OnWake>:
    uint32_t target_epoch = current_settings.start_reservation_time;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b0c <Maybe_Rearm_Reservation_OnWake+0x70>)
{
 8005a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_epoch = current_settings.start_reservation_time;
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b10 <Maybe_Rearm_Reservation_OnWake+0x74>)
 8005aa4:	31a6      	adds	r1, #166	@ 0xa6
 8005aa6:	7809      	ldrb	r1, [r1, #0]
 8005aa8:	7812      	ldrb	r2, [r2, #0]
 8005aaa:	0209      	lsls	r1, r1, #8
 8005aac:	4311      	orrs	r1, r2
 8005aae:	001a      	movs	r2, r3
 8005ab0:	32a7      	adds	r2, #167	@ 0xa7
 8005ab2:	7812      	ldrb	r2, [r2, #0]
 8005ab4:	33a8      	adds	r3, #168	@ 0xa8
 8005ab6:	781c      	ldrb	r4, [r3, #0]
 8005ab8:	0412      	lsls	r2, r2, #16
 8005aba:	430a      	orrs	r2, r1
 8005abc:	0624      	lsls	r4, r4, #24
{
 8005abe:	b089      	sub	sp, #36	@ 0x24
    uint32_t target_epoch = current_settings.start_reservation_time;
 8005ac0:	4314      	orrs	r4, r2
    if (target_epoch == 0u) return;
 8005ac2:	d01b      	beq.n	8005afc <Maybe_Rearm_Reservation_OnWake+0x60>
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005ac4:	4f13      	ldr	r7, [pc, #76]	@ (8005b14 <Maybe_Rearm_Reservation_OnWake+0x78>)
 8005ac6:	ad03      	add	r5, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005ac8:	ae02      	add	r6, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005aca:	0029      	movs	r1, r5
 8005acc:	2200      	movs	r2, #0
 8005ace:	0038      	movs	r0, r7
 8005ad0:	f00c fb82 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005ad4:	0031      	movs	r1, r6
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	0038      	movs	r0, r7
 8005ada:	f00c fbaf 	bl	801223c <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005ade:	7871      	ldrb	r1, [r6, #1]
 8005ae0:	78b2      	ldrb	r2, [r6, #2]
 8005ae2:	78f0      	ldrb	r0, [r6, #3]
 8005ae4:	78ae      	ldrb	r6, [r5, #2]
 8005ae6:	782b      	ldrb	r3, [r5, #0]
 8005ae8:	9601      	str	r6, [sp, #4]
 8005aea:	786d      	ldrb	r5, [r5, #1]
 8005aec:	9500      	str	r5, [sp, #0]
 8005aee:	f003 ffdd 	bl	8009aac <ymd_to_epoch>
 8005af2:	0001      	movs	r1, r0
    if (now_epoch < target_epoch) {
 8005af4:	4284      	cmp	r4, r0
 8005af6:	d903      	bls.n	8005b00 <Maybe_Rearm_Reservation_OnWake+0x64>
        Set_StartTargetTime_FromReservation();
 8005af8:	f7ff ff64 	bl	80059c4 <Set_StartTargetTime_FromReservation>
}
 8005afc:	b009      	add	sp, #36	@ 0x24
 8005afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("[Reserve] reached: now=%lu >= target=%lu\r\n",
 8005b00:	0022      	movs	r2, r4
 8005b02:	4805      	ldr	r0, [pc, #20]	@ (8005b18 <Maybe_Rearm_Reservation_OnWake+0x7c>)
 8005b04:	f014 fc5a 	bl	801a3bc <iprintf>
 8005b08:	e7f8      	b.n	8005afc <Maybe_Rearm_Reservation_OnWake+0x60>
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	20002bac 	.word	0x20002bac
 8005b10:	20002c51 	.word	0x20002c51
 8005b14:	200009f8 	.word	0x200009f8
 8005b18:	0801ce68 	.word	0x0801ce68

08005b1c <Set_EndTarget_FromNow_Days>:
{
 8005b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1e:	0004      	movs	r4, r0
 8005b20:	b08b      	sub	sp, #44	@ 0x2c
    if (days == 0) {
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d10b      	bne.n	8005b3e <Set_EndTarget_FromNow_Days+0x22>
        current_settings.end_target_seconds = 0;
 8005b26:	4b39      	ldr	r3, [pc, #228]	@ (8005c0c <Set_EndTarget_FromNow_Days+0xf0>)
 8005b28:	7018      	strb	r0, [r3, #0]
 8005b2a:	7058      	strb	r0, [r3, #1]
 8005b2c:	7098      	strb	r0, [r3, #2]
 8005b2e:	70d8      	strb	r0, [r3, #3]
        Save_CurrentSettings();
 8005b30:	f004 f874 	bl	8009c1c <Save_CurrentSettings>
        printf("[EndTarget] cleared (days=0)\r\n");
 8005b34:	4836      	ldr	r0, [pc, #216]	@ (8005c10 <Set_EndTarget_FromNow_Days+0xf4>)
 8005b36:	f014 fcb1 	bl	801a49c <puts>
}
 8005b3a:	b00b      	add	sp, #44	@ 0x2c
 8005b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t now = now_epoch_from_rtc();      // 현재 epoch (초)
 8005b3e:	f7ff fd4f 	bl	80055e0 <now_epoch_from_rtc>
    epoch_to_ymdhms(now, &y, &m, &d, &hh, &mm, &ss);
 8005b42:	271d      	movs	r7, #29
    uint32_t add = (uint32_t)days * 86400u;   // 일 → 초
 8005b44:	4b33      	ldr	r3, [pc, #204]	@ (8005c14 <Set_EndTarget_FromNow_Days+0xf8>)
    uint32_t now = now_epoch_from_rtc();      // 현재 epoch (초)
 8005b46:	0006      	movs	r6, r0
    uint32_t add = (uint32_t)days * 86400u;   // 일 → 초
 8005b48:	4363      	muls	r3, r4
    uint32_t target = now + add;
 8005b4a:	18c5      	adds	r5, r0, r3
    uint32_t add = (uint32_t)days * 86400u;   // 일 → 초
 8005b4c:	9307      	str	r3, [sp, #28]
    current_settings.end_target_seconds = target;
 8005b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c0c <Set_EndTarget_FromNow_Days+0xf0>)
 8005b50:	0a2a      	lsrs	r2, r5, #8
 8005b52:	705a      	strb	r2, [r3, #1]
 8005b54:	0c2a      	lsrs	r2, r5, #16
 8005b56:	709a      	strb	r2, [r3, #2]
 8005b58:	0e2a      	lsrs	r2, r5, #24
 8005b5a:	701d      	strb	r5, [r3, #0]
 8005b5c:	70da      	strb	r2, [r3, #3]
    Save_CurrentSettings();
 8005b5e:	f004 f85d 	bl	8009c1c <Save_CurrentSettings>
    epoch_to_ymdhms(now, &y, &m, &d, &hh, &mm, &ss);
 8005b62:	ab02      	add	r3, sp, #8
 8005b64:	18ff      	adds	r7, r7, r3
 8005b66:	ab09      	add	r3, sp, #36	@ 0x24
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	231b      	movs	r3, #27
 8005b6c:	aa02      	add	r2, sp, #8
 8005b6e:	189b      	adds	r3, r3, r2
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	231a      	movs	r3, #26
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	2219      	movs	r2, #25
 8005b78:	a902      	add	r1, sp, #8
 8005b7a:	1852      	adds	r2, r2, r1
 8005b7c:	211e      	movs	r1, #30
 8005b7e:	a802      	add	r0, sp, #8
 8005b80:	1809      	adds	r1, r1, r0
 8005b82:	9702      	str	r7, [sp, #8]
 8005b84:	0030      	movs	r0, r6
 8005b86:	f003 ffc9 	bl	8009b1c <epoch_to_ymdhms>
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005b8a:	20fa      	movs	r0, #250	@ 0xfa
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005b8c:	ab02      	add	r3, sp, #8
 8005b8e:	aa02      	add	r2, sp, #8
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005b90:	a902      	add	r1, sp, #8
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005b92:	7e9b      	ldrb	r3, [r3, #26]
 8005b94:	7e52      	ldrb	r2, [r2, #25]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005b96:	8bc9      	ldrh	r1, [r1, #30]
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005b98:	9603      	str	r6, [sp, #12]
 8005b9a:	783e      	ldrb	r6, [r7, #0]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005b9c:	00c0      	lsls	r0, r0, #3
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005b9e:	9602      	str	r6, [sp, #8]
 8005ba0:	ae02      	add	r6, sp, #8
 8005ba2:	7f36      	ldrb	r6, [r6, #28]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005ba4:	1809      	adds	r1, r1, r0
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005ba6:	9601      	str	r6, [sp, #4]
 8005ba8:	ae02      	add	r6, sp, #8
 8005baa:	7ef6      	ldrb	r6, [r6, #27]
 8005bac:	481a      	ldr	r0, [pc, #104]	@ (8005c18 <Set_EndTarget_FromNow_Days+0xfc>)
 8005bae:	9600      	str	r6, [sp, #0]
 8005bb0:	f014 fc04 	bl	801a3bc <iprintf>
    epoch_to_ymdhms(target, &y, &m, &d, &hh, &mm, &ss);
 8005bb4:	ab09      	add	r3, sp, #36	@ 0x24
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	231b      	movs	r3, #27
 8005bba:	aa02      	add	r2, sp, #8
 8005bbc:	189b      	adds	r3, r3, r2
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	231a      	movs	r3, #26
 8005bc2:	189b      	adds	r3, r3, r2
 8005bc4:	2219      	movs	r2, #25
 8005bc6:	a902      	add	r1, sp, #8
 8005bc8:	1852      	adds	r2, r2, r1
 8005bca:	211e      	movs	r1, #30
 8005bcc:	a802      	add	r0, sp, #8
 8005bce:	1809      	adds	r1, r1, r0
 8005bd0:	9702      	str	r7, [sp, #8]
 8005bd2:	0028      	movs	r0, r5
 8005bd4:	f003 ffa2 	bl	8009b1c <epoch_to_ymdhms>
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005bd8:	20fa      	movs	r0, #250	@ 0xfa
 8005bda:	ab02      	add	r3, sp, #8
 8005bdc:	8bdb      	ldrh	r3, [r3, #30]
    printf("[EndTarget] +%lu s (%u days) -> target=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005bde:	9505      	str	r5, [sp, #20]
 8005be0:	783a      	ldrb	r2, [r7, #0]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005be2:	00c0      	lsls	r0, r0, #3
    printf("[EndTarget] +%lu s (%u days) -> target=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005be4:	9204      	str	r2, [sp, #16]
 8005be6:	aa02      	add	r2, sp, #8
 8005be8:	7f12      	ldrb	r2, [r2, #28]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005bea:	181b      	adds	r3, r3, r0
    printf("[EndTarget] +%lu s (%u days) -> target=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005bec:	9203      	str	r2, [sp, #12]
 8005bee:	aa02      	add	r2, sp, #8
 8005bf0:	7ed2      	ldrb	r2, [r2, #27]
 8005bf2:	9907      	ldr	r1, [sp, #28]
 8005bf4:	9202      	str	r2, [sp, #8]
 8005bf6:	aa02      	add	r2, sp, #8
 8005bf8:	7e92      	ldrb	r2, [r2, #26]
 8005bfa:	4808      	ldr	r0, [pc, #32]	@ (8005c1c <Set_EndTarget_FromNow_Days+0x100>)
 8005bfc:	9201      	str	r2, [sp, #4]
 8005bfe:	aa02      	add	r2, sp, #8
 8005c00:	7e52      	ldrb	r2, [r2, #25]
 8005c02:	9200      	str	r2, [sp, #0]
 8005c04:	0022      	movs	r2, r4
 8005c06:	f014 fbd9 	bl	801a3bc <iprintf>
 8005c0a:	e796      	b.n	8005b3a <Set_EndTarget_FromNow_Days+0x1e>
 8005c0c:	20002c57 	.word	0x20002c57
 8005c10:	0801ce93 	.word	0x0801ce93
 8005c14:	00015180 	.word	0x00015180
 8005c18:	0801ceb1 	.word	0x0801ceb1
 8005c1c:	0801ceed 	.word	0x0801ceed

08005c20 <Save_Power_Function>:
{
 8005c20:	b530      	push	{r4, r5, lr}
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005c22:	2501      	movs	r5, #1
{
 8005c24:	b087      	sub	sp, #28
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005c26:	4c1a      	ldr	r4, [pc, #104]	@ (8005c90 <Save_Power_Function+0x70>)
	HAL_PWREx_EnableUltraLowPowerMode();       // ULP 모드 활성화
 8005c28:	f00b f8fe 	bl	8010e28 <HAL_PWREx_EnableUltraLowPowerMode>
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005c2c:	4819      	ldr	r0, [pc, #100]	@ (8005c94 <Save_Power_Function+0x74>)
 8005c2e:	f009 f849 	bl	800ecc4 <HAL_ADC_DeInit>
 8005c32:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005c34:	4a18      	ldr	r2, [pc, #96]	@ (8005c98 <Save_Power_Function+0x78>)
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005c36:	4819      	ldr	r0, [pc, #100]	@ (8005c9c <Save_Power_Function+0x7c>)
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005c38:	4013      	ands	r3, r2
 8005c3a:	6623      	str	r3, [r4, #96]	@ 0x60
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005c3c:	f009 fa6e 	bl	800f11c <HAL_COMP_DeInit>
 8005c40:	6e23      	ldr	r3, [r4, #96]	@ 0x60
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8005c42:	4817      	ldr	r0, [pc, #92]	@ (8005ca0 <Save_Power_Function+0x80>)
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005c44:	43ab      	bics	r3, r5
 8005c46:	6623      	str	r3, [r4, #96]	@ 0x60
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8005c48:	f009 feb2 	bl	800f9b0 <HAL_LCD_DeInit>
 8005c4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <Save_Power_Function+0x84>)
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8005c50:	4815      	ldr	r0, [pc, #84]	@ (8005ca8 <Save_Power_Function+0x88>)
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8005c52:	4013      	ands	r3, r2
 8005c54:	65a3      	str	r3, [r4, #88]	@ 0x58
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8005c56:	f00d fabd 	bl	80131d4 <HAL_UART_DeInit>
 8005c5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c5c:	4a13      	ldr	r2, [pc, #76]	@ (8005cac <Save_Power_Function+0x8c>)
	GPIO_InitTypeDef g = {0};
 8005c5e:	2100      	movs	r1, #0
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8005c60:	4013      	ands	r3, r2
 8005c62:	65a3      	str	r3, [r4, #88]	@ 0x58
	GPIO_InitTypeDef g = {0};
 8005c64:	220c      	movs	r2, #12
 8005c66:	a803      	add	r0, sp, #12
 8005c68:	f014 fd74 	bl	801a754 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005c6c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
	HAL_GPIO_Init(GPIOA, &g);
 8005c6e:	20a0      	movs	r0, #160	@ 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005c70:	432b      	orrs	r3, r5
 8005c72:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8005c74:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
	HAL_GPIO_Init(GPIOA, &g);
 8005c76:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005c78:	402b      	ands	r3, r5
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	9b00      	ldr	r3, [sp, #0]
	g.Pin   = GPIO_PIN_ALL & ~GPIO_PIN_0;  // PA0 제외
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb0 <Save_Power_Function+0x90>)
	HAL_GPIO_Init(GPIOA, &g);
 8005c80:	05c0      	lsls	r0, r0, #23
	g.Pin   = GPIO_PIN_ALL & ~GPIO_PIN_0;  // PA0 제외
 8005c82:	9301      	str	r3, [sp, #4]
	g.Mode  = GPIO_MODE_ANALOG;
 8005c84:	2303      	movs	r3, #3
 8005c86:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &g);
 8005c88:	f009 fd32 	bl	800f6f0 <HAL_GPIO_Init>
}
 8005c8c:	b007      	add	sp, #28
 8005c8e:	bd30      	pop	{r4, r5, pc}
 8005c90:	40021000 	.word	0x40021000
 8005c94:	20000aec 	.word	0x20000aec
 8005c98:	ffefffff 	.word	0xffefffff
 8005c9c:	20000abc 	.word	0x20000abc
 8005ca0:	20000a80 	.word	0x20000a80
 8005ca4:	fffffdff 	.word	0xfffffdff
 8005ca8:	20000840 	.word	0x20000840
 8005cac:	fffbffff 	.word	0xfffbffff
 8005cb0:	0000fffe 	.word	0x0000fffe

08005cb4 <Start_Delay_Timer>:
{
 8005cb4:	b510      	push	{r4, lr}
	LCD_Clear_Display(LCD_data);
 8005cb6:	4804      	ldr	r0, [pc, #16]	@ (8005cc8 <Start_Delay_Timer+0x14>)
 8005cb8:	f7ff f81e 	bl	8004cf8 <LCD_Clear_Display>
	RTC_Disable_All_Wakeup();
 8005cbc:	f7ff fddc 	bl	8005878 <RTC_Disable_All_Wakeup>
	Set_StartTargetTime_FromRTC();
 8005cc0:	f004 f914 	bl	8009eec <Set_StartTargetTime_FromRTC>
}
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	20000514 	.word	0x20000514

08005ccc <Get_in_Shutdown>:
void Get_in_Shutdown(){
 8005ccc:	b510      	push	{r4, lr}
	printf("Getting on to sleep(Button)\r\n");
 8005cce:	480a      	ldr	r0, [pc, #40]	@ (8005cf8 <Get_in_Shutdown+0x2c>)
 8005cd0:	f014 fbe4 	bl	801a49c <puts>
	Save_Power_Function();
 8005cd4:	f7ff ffa4 	bl	8005c20 <Save_Power_Function>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8005cd8:	2081      	movs	r0, #129	@ 0x81
 8005cda:	f00b f835 	bl	8010d48 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH); // PC13 핀 High 레벨에서 깨우기
 8005cde:	2002      	movs	r0, #2
 8005ce0:	f00b f832 	bl	8010d48 <HAL_PWR_EnableWakeUpPin>
    HAL_SuspendTick(); // SysTick 멈춤
 8005ce4:	f008 fbb8 	bl	800e458 <HAL_SuspendTick>
    HAL_PWR_EnterSHUTDOWNMode();
 8005ce8:	f00b f83c 	bl	8010d64 <HAL_PWR_EnterSHUTDOWNMode>
  HAL_ResumeTick();
 8005cec:	f008 fbbc 	bl	800e468 <HAL_ResumeTick>
    printf("Wake Up!\r\n");
 8005cf0:	4802      	ldr	r0, [pc, #8]	@ (8005cfc <Get_in_Shutdown+0x30>)
 8005cf2:	f014 fbd3 	bl	801a49c <puts>
}
 8005cf6:	bd10      	pop	{r4, pc}
 8005cf8:	0801cf40 	.word	0x0801cf40
 8005cfc:	0801cf5d 	.word	0x0801cf5d

08005d00 <Set_RTC_TimeOnly>:
{
 8005d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d02:	b08b      	sub	sp, #44	@ 0x2c
 8005d04:	001d      	movs	r5, r3
 8005d06:	ab10      	add	r3, sp, #64	@ 0x40
 8005d08:	781f      	ldrb	r7, [r3, #0]
 8005d0a:	ab11      	add	r3, sp, #68	@ 0x44
 8005d0c:	781e      	ldrb	r6, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8005d0e:	ab04      	add	r3, sp, #16
{
 8005d10:	9001      	str	r0, [sp, #4]
 8005d12:	9102      	str	r1, [sp, #8]
 8005d14:	9203      	str	r2, [sp, #12]
    RTC_TimeTypeDef sTime = {0};
 8005d16:	2100      	movs	r1, #0
 8005d18:	2211      	movs	r2, #17
 8005d1a:	1dd8      	adds	r0, r3, #7
 8005d1c:	f014 fd1a 	bl	801a754 <memset>
    sDate.Year = yy;
 8005d20:	9a01      	ldr	r2, [sp, #4]
 8005d22:	ab04      	add	r3, sp, #16
 8005d24:	70da      	strb	r2, [r3, #3]
    sDate.Month = mm;
 8005d26:	9a02      	ldr	r2, [sp, #8]
    RTC_TimeTypeDef sTime = {0};
 8005d28:	ac05      	add	r4, sp, #20
    sDate.Month = mm;
 8005d2a:	705a      	strb	r2, [r3, #1]
    sDate.Date = dd;
 8005d2c:	9a03      	ldr	r2, [sp, #12]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005d2e:	0021      	movs	r1, r4
    sDate.Date = dd;
 8005d30:	709a      	strb	r2, [r3, #2]
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005d32:	2301      	movs	r3, #1
 8005d34:	aa04      	add	r2, sp, #16
 8005d36:	7013      	strb	r3, [r2, #0]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005d38:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <Set_RTC_TimeOnly+0x58>)
    sTime.Hours = hh;
 8005d3a:	7025      	strb	r5, [r4, #0]
    sTime.Minutes = mi;
 8005d3c:	7067      	strb	r7, [r4, #1]
    sTime.Seconds = ss;
 8005d3e:	70a6      	strb	r6, [r4, #2]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005d40:	001c      	movs	r4, r3
 8005d42:	0018      	movs	r0, r3
 8005d44:	2200      	movs	r2, #0
 8005d46:	f00c f88d 	bl	8011e64 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	0020      	movs	r0, r4
 8005d4e:	a904      	add	r1, sp, #16
 8005d50:	f00c f916 	bl	8011f80 <HAL_RTC_SetDate>
}
 8005d54:	b00b      	add	sp, #44	@ 0x2c
 8005d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d58:	200009f8 	.word	0x200009f8

08005d5c <PrintCurrentRTC>:
{
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005d5e:	4e20      	ldr	r6, [pc, #128]	@ (8005de0 <PrintCurrentRTC+0x84>)
{
 8005d60:	b08d      	sub	sp, #52	@ 0x34
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005d62:	ad07      	add	r5, sp, #28
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8005d64:	ac06      	add	r4, sp, #24
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005d66:	0029      	movs	r1, r5
 8005d68:	2201      	movs	r2, #1
 8005d6a:	0030      	movs	r0, r6
 8005d6c:	f00c fa34 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8005d70:	0021      	movs	r1, r4
 8005d72:	2201      	movs	r2, #1
 8005d74:	0030      	movs	r0, r6
 8005d76:	f00c fa61 	bl	801223c <HAL_RTC_GetDate>
    uint8_t day   = BCD2BIN(sDate.Date);
 8005d7a:	200a      	movs	r0, #10
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8005d7c:	786f      	ldrb	r7, [r5, #1]
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005d7e:	78ab      	ldrb	r3, [r5, #2]
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8005d80:	782e      	ldrb	r6, [r5, #0]
    uint8_t day   = BCD2BIN(sDate.Date);
 8005d82:	250f      	movs	r5, #15
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005d84:	469c      	mov	ip, r3
    uint8_t year  = BCD2BIN(sDate.Year);
 8005d86:	78e1      	ldrb	r1, [r4, #3]
    uint8_t month = BCD2BIN(sDate.Month);
 8005d88:	7862      	ldrb	r2, [r4, #1]
    uint8_t day   = BCD2BIN(sDate.Date);
 8005d8a:	78a4      	ldrb	r4, [r4, #2]
 8005d8c:	0923      	lsrs	r3, r4, #4
 8005d8e:	4343      	muls	r3, r0
 8005d90:	402c      	ands	r4, r5
 8005d92:	191b      	adds	r3, r3, r4
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	9305      	str	r3, [sp, #20]
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005d98:	4663      	mov	r3, ip
    uint8_t month = BCD2BIN(sDate.Month);
 8005d9a:	0914      	lsrs	r4, r2, #4
 8005d9c:	4344      	muls	r4, r0
 8005d9e:	402a      	ands	r2, r5
 8005da0:	18a2      	adds	r2, r4, r2
    uint8_t year  = BCD2BIN(sDate.Year);
 8005da2:	090c      	lsrs	r4, r1, #4
 8005da4:	4344      	muls	r4, r0
 8005da6:	4029      	ands	r1, r5
 8005da8:	1861      	adds	r1, r4, r1
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005daa:	091c      	lsrs	r4, r3, #4
 8005dac:	402b      	ands	r3, r5
 8005dae:	469c      	mov	ip, r3
 8005db0:	4344      	muls	r4, r0
 8005db2:	4464      	add	r4, ip
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005db4:	b2e4      	uxtb	r4, r4
 8005db6:	9402      	str	r4, [sp, #8]
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8005db8:	093c      	lsrs	r4, r7, #4
 8005dba:	4344      	muls	r4, r0
 8005dbc:	402f      	ands	r7, r5
 8005dbe:	19e7      	adds	r7, r4, r7
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8005dc0:	0934      	lsrs	r4, r6, #4
 8005dc2:	4360      	muls	r0, r4
 8005dc4:	402e      	ands	r6, r5
 8005dc6:	1980      	adds	r0, r0, r6
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005dc8:	b2ff      	uxtb	r7, r7
 8005dca:	b2c0      	uxtb	r0, r0
 8005dcc:	9000      	str	r0, [sp, #0]
 8005dce:	9b05      	ldr	r3, [sp, #20]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	b2c9      	uxtb	r1, r1
 8005dd4:	9701      	str	r7, [sp, #4]
 8005dd6:	4803      	ldr	r0, [pc, #12]	@ (8005de4 <PrintCurrentRTC+0x88>)
 8005dd8:	f014 faf0 	bl	801a3bc <iprintf>
}
 8005ddc:	b00d      	add	sp, #52	@ 0x34
 8005dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005de0:	200009f8 	.word	0x200009f8
 8005de4:	0801cf67 	.word	0x0801cf67

08005de8 <Check_And_Save_When_Target_Reached>:
{
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_raw = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005dea:	4f2b      	ldr	r7, [pc, #172]	@ (8005e98 <Check_And_Save_When_Target_Reached+0xb0>)
 8005dec:	2107      	movs	r1, #7
{
 8005dee:	b089      	sub	sp, #36	@ 0x24
    uint32_t target_raw = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005df0:	0038      	movs	r0, r7
 8005df2:	f00c fab7 	bl	8012364 <HAL_RTCEx_BKUPRead>
 8005df6:	0005      	movs	r5, r0
    printf("[Check] BKP_WAKEUP_TIME(raw)=%lu (0x%08lX)\r\n",
 8005df8:	4828      	ldr	r0, [pc, #160]	@ (8005e9c <Check_And_Save_When_Target_Reached+0xb4>)
 8005dfa:	002a      	movs	r2, r5
 8005dfc:	0029      	movs	r1, r5
 8005dfe:	f014 fadd 	bl	801a3bc <iprintf>
    if (target_raw == 0xFFFFFFFFu) {
 8005e02:	1c6b      	adds	r3, r5, #1
 8005e04:	d10f      	bne.n	8005e26 <Check_And_Save_When_Target_Reached+0x3e>
        bool reached_init = (Tick_Save >= (Measure_Rad_Time - 1));
 8005e06:	2408      	movs	r4, #8
 8005e08:	4b25      	ldr	r3, [pc, #148]	@ (8005ea0 <Check_And_Save_When_Target_Reached+0xb8>)
        printf("[Check] BKP=0xFFFFFFFF → init mode, Tick_Save=%lu → %s\r\n",
 8005e0a:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <Check_And_Save_When_Target_Reached+0xbc>)
        bool reached_init = (Tick_Save >= (Measure_Rad_Time - 1));
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	428c      	cmp	r4, r1
 8005e10:	41a4      	sbcs	r4, r4
 8005e12:	4264      	negs	r4, r4
        printf("[Check] BKP=0xFFFFFFFF → init mode, Tick_Save=%lu → %s\r\n",
 8005e14:	2908      	cmp	r1, #8
 8005e16:	d900      	bls.n	8005e1a <Check_And_Save_When_Target_Reached+0x32>
 8005e18:	4a23      	ldr	r2, [pc, #140]	@ (8005ea8 <Check_And_Save_When_Target_Reached+0xc0>)
 8005e1a:	4824      	ldr	r0, [pc, #144]	@ (8005eac <Check_And_Save_When_Target_Reached+0xc4>)
 8005e1c:	f014 face 	bl	801a3bc <iprintf>
}
 8005e20:	0020      	movs	r0, r4
 8005e22:	b009      	add	sp, #36	@ 0x24
 8005e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005e26:	ae03      	add	r6, sp, #12
 8005e28:	0031      	movs	r1, r6
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	0038      	movs	r0, r7
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005e2e:	ac02      	add	r4, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005e30:	f00c f9d2 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005e34:	2200      	movs	r2, #0
 8005e36:	0038      	movs	r0, r7
 8005e38:	0021      	movs	r1, r4
 8005e3a:	f00c f9ff 	bl	801223c <HAL_RTC_GetDate>
    if (target_raw >= 1000000u) {
 8005e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb0 <Check_And_Save_When_Target_Reached+0xc8>)
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005e40:	7833      	ldrb	r3, [r6, #0]
                       (uint32_t)t.Minutes * 60u +
 8005e42:	7877      	ldrb	r7, [r6, #1]
                       (uint32_t)t.Seconds;
 8005e44:	78b6      	ldrb	r6, [r6, #2]
    if (target_raw >= 1000000u) {
 8005e46:	4295      	cmp	r5, r2
 8005e48:	d914      	bls.n	8005e74 <Check_And_Save_When_Target_Reached+0x8c>
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005e4a:	7861      	ldrb	r1, [r4, #1]
 8005e4c:	78a2      	ldrb	r2, [r4, #2]
 8005e4e:	78e0      	ldrb	r0, [r4, #3]
 8005e50:	9601      	str	r6, [sp, #4]
 8005e52:	9700      	str	r7, [sp, #0]
 8005e54:	f003 fe2a 	bl	8009aac <ymd_to_epoch>
        reached = (now_epoch >= target_raw);
 8005e58:	2400      	movs	r4, #0
 8005e5a:	42a8      	cmp	r0, r5
 8005e5c:	4164      	adcs	r4, r4
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005e5e:	0001      	movs	r1, r0
        printf("[Check][epoch] now=%lu, target=%lu → %s\r\n",
 8005e60:	4b10      	ldr	r3, [pc, #64]	@ (8005ea4 <Check_And_Save_When_Target_Reached+0xbc>)
        reached = (now_epoch >= target_raw);
 8005e62:	b2e4      	uxtb	r4, r4
        printf("[Check][epoch] now=%lu, target=%lu → %s\r\n",
 8005e64:	4285      	cmp	r5, r0
 8005e66:	d800      	bhi.n	8005e6a <Check_And_Save_When_Target_Reached+0x82>
 8005e68:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <Check_And_Save_When_Target_Reached+0xc0>)
 8005e6a:	4812      	ldr	r0, [pc, #72]	@ (8005eb4 <Check_And_Save_When_Target_Reached+0xcc>)
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005e6c:	002a      	movs	r2, r5
 8005e6e:	f014 faa5 	bl	801a3bc <iprintf>
 8005e72:	e7d5      	b.n	8005e20 <Check_And_Save_When_Target_Reached+0x38>
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005e74:	21e1      	movs	r1, #225	@ 0xe1
 8005e76:	0109      	lsls	r1, r1, #4
 8005e78:	4359      	muls	r1, r3
                       (uint32_t)t.Minutes * 60u +
 8005e7a:	233c      	movs	r3, #60	@ 0x3c
        reached = (now_sod >= target_raw);
 8005e7c:	2400      	movs	r4, #0
                       (uint32_t)t.Minutes * 60u +
 8005e7e:	437b      	muls	r3, r7
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005e80:	18c9      	adds	r1, r1, r3
 8005e82:	1989      	adds	r1, r1, r6
        reached = (now_sod >= target_raw);
 8005e84:	42a9      	cmp	r1, r5
 8005e86:	4164      	adcs	r4, r4
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005e88:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <Check_And_Save_When_Target_Reached+0xbc>)
        reached = (now_sod >= target_raw);
 8005e8a:	b2e4      	uxtb	r4, r4
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005e8c:	428d      	cmp	r5, r1
 8005e8e:	d800      	bhi.n	8005e92 <Check_And_Save_When_Target_Reached+0xaa>
 8005e90:	4b05      	ldr	r3, [pc, #20]	@ (8005ea8 <Check_And_Save_When_Target_Reached+0xc0>)
 8005e92:	4809      	ldr	r0, [pc, #36]	@ (8005eb8 <Check_And_Save_When_Target_Reached+0xd0>)
 8005e94:	e7ea      	b.n	8005e6c <Check_And_Save_When_Target_Reached+0x84>
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	200009f8 	.word	0x200009f8
 8005e9c:	0801cf9e 	.word	0x0801cf9e
 8005ea0:	20000540 	.word	0x20000540
 8005ea4:	0801cf96 	.word	0x0801cf96
 8005ea8:	0801cf8e 	.word	0x0801cf8e
 8005eac:	0801cfcb 	.word	0x0801cfcb
 8005eb0:	000f423f 	.word	0x000f423f
 8005eb4:	0801d008 	.word	0x0801d008
 8005eb8:	0801d034 	.word	0x0801d034

08005ebc <Count_Filter_Kalman>:
{
 8005ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    count_log = comp1_count;
 8005ebe:	4b42      	ldr	r3, [pc, #264]	@ (8005fc8 <Count_Filter_Kalman+0x10c>)
{
 8005ec0:	b08b      	sub	sp, #44	@ 0x2c
    count_log = comp1_count;
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4b41      	ldr	r3, [pc, #260]	@ (8005fcc <Count_Filter_Kalman+0x110>)
 8005ec6:	6018      	str	r0, [r3, #0]
    double measurement = (double)count_log;
 8005ec8:	f7fd fc42 	bl	8003750 <__aeabi_ui2d>
 8005ecc:	000f      	movs	r7, r1
    if (!kalmanInit) {
 8005ece:	4940      	ldr	r1, [pc, #256]	@ (8005fd0 <Count_Filter_Kalman+0x114>)
    double measurement = (double)count_log;
 8005ed0:	0006      	movs	r6, r0
    if (!kalmanInit) {
 8005ed2:	780b      	ldrb	r3, [r1, #0]
 8005ed4:	4c3f      	ldr	r4, [pc, #252]	@ (8005fd4 <Count_Filter_Kalman+0x118>)
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d113      	bne.n	8005f02 <Count_Filter_Kalman+0x46>
        P = 1.0;
 8005eda:	2200      	movs	r2, #0
        kalmanInit = true;
 8005edc:	2001      	movs	r0, #1
        x_est = measurement;
 8005ede:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd8 <Count_Filter_Kalman+0x11c>)
        kalmanInit = true;
 8005ee0:	7008      	strb	r0, [r1, #0]
        x_est = measurement;
 8005ee2:	601e      	str	r6, [r3, #0]
 8005ee4:	605f      	str	r7, [r3, #4]
        P = 1.0;
 8005ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8005fdc <Count_Filter_Kalman+0x120>)
        printf("[INIT] Raw=%.0f x_est(Raw)=%.6f P=%.6f\r\n",
 8005ee8:	483d      	ldr	r0, [pc, #244]	@ (8005fe0 <Count_Filter_Kalman+0x124>)
        P = 1.0;
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	6063      	str	r3, [r4, #4]
        printf("[INIT] Raw=%.0f x_est(Raw)=%.6f P=%.6f\r\n",
 8005eee:	9202      	str	r2, [sp, #8]
 8005ef0:	9303      	str	r3, [sp, #12]
 8005ef2:	9600      	str	r6, [sp, #0]
 8005ef4:	9701      	str	r7, [sp, #4]
    printf("Raw=%.0f x_est(Raw)=%.6f Dose=%.4f\r\n",
 8005ef6:	0032      	movs	r2, r6
 8005ef8:	003b      	movs	r3, r7
 8005efa:	f014 fa5f 	bl	801a3bc <iprintf>
}
 8005efe:	b00b      	add	sp, #44	@ 0x2c
 8005f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    double P_pred = P + Q;
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	6861      	ldr	r1, [r4, #4]
 8005f06:	4a37      	ldr	r2, [pc, #220]	@ (8005fe4 <Count_Filter_Kalman+0x128>)
 8005f08:	4b37      	ldr	r3, [pc, #220]	@ (8005fe8 <Count_Filter_Kalman+0x12c>)
 8005f0a:	f7fb fca5 	bl	8001858 <__aeabi_dadd>
    double K = P_pred / (P_pred + R);
 8005f0e:	4a37      	ldr	r2, [pc, #220]	@ (8005fec <Count_Filter_Kalman+0x130>)
 8005f10:	4b37      	ldr	r3, [pc, #220]	@ (8005ff0 <Count_Filter_Kalman+0x134>)
    double P_pred = P + Q;
 8005f12:	9006      	str	r0, [sp, #24]
 8005f14:	9107      	str	r1, [sp, #28]
    double K = P_pred / (P_pred + R);
 8005f16:	f7fb fc9f 	bl	8001858 <__aeabi_dadd>
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	000b      	movs	r3, r1
 8005f1e:	9806      	ldr	r0, [sp, #24]
 8005f20:	9907      	ldr	r1, [sp, #28]
 8005f22:	f7fc f85f 	bl	8001fe4 <__aeabi_ddiv>
    double delta = measurement - x_est;
 8005f26:	4d2c      	ldr	r5, [pc, #176]	@ (8005fd8 <Count_Filter_Kalman+0x11c>)
    double K = P_pred / (P_pred + R);
 8005f28:	9008      	str	r0, [sp, #32]
 8005f2a:	9109      	str	r1, [sp, #36]	@ 0x24
    double delta = measurement - x_est;
 8005f2c:	682a      	ldr	r2, [r5, #0]
 8005f2e:	686b      	ldr	r3, [r5, #4]
 8005f30:	0030      	movs	r0, r6
 8005f32:	0039      	movs	r1, r7
 8005f34:	9204      	str	r2, [sp, #16]
 8005f36:	9305      	str	r3, [sp, #20]
 8005f38:	f7fc ff74 	bl	8002e24 <__aeabi_dsub>
    x_est = x_est + K * delta;
 8005f3c:	9a08      	ldr	r2, [sp, #32]
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	f7fc fc8a 	bl	8002858 <__aeabi_dmul>
 8005f44:	9a04      	ldr	r2, [sp, #16]
 8005f46:	9b05      	ldr	r3, [sp, #20]
 8005f48:	f7fb fc86 	bl	8001858 <__aeabi_dadd>
 8005f4c:	0002      	movs	r2, r0
 8005f4e:	000b      	movs	r3, r1
 8005f50:	9004      	str	r0, [sp, #16]
 8005f52:	9105      	str	r1, [sp, #20]
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	606b      	str	r3, [r5, #4]
    P = (1.0 - K) * P_pred;
 8005f58:	9a08      	ldr	r2, [sp, #32]
 8005f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	491f      	ldr	r1, [pc, #124]	@ (8005fdc <Count_Filter_Kalman+0x120>)
 8005f60:	f7fc ff60 	bl	8002e24 <__aeabi_dsub>
 8005f64:	9a06      	ldr	r2, [sp, #24]
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	f7fc fc76 	bl	8002858 <__aeabi_dmul>
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005f6c:	4a21      	ldr	r2, [pc, #132]	@ (8005ff4 <Count_Filter_Kalman+0x138>)
    P = (1.0 - K) * P_pred;
 8005f6e:	6020      	str	r0, [r4, #0]
 8005f70:	6061      	str	r1, [r4, #4]
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005f72:	9804      	ldr	r0, [sp, #16]
 8005f74:	9905      	ldr	r1, [sp, #20]
 8005f76:	4b20      	ldr	r3, [pc, #128]	@ (8005ff8 <Count_Filter_Kalman+0x13c>)
 8005f78:	f7fc fc6e 	bl	8002858 <__aeabi_dmul>
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ffc <Count_Filter_Kalman+0x140>)
 8005f7e:	4b20      	ldr	r3, [pc, #128]	@ (8006000 <Count_Filter_Kalman+0x144>)
 8005f80:	f7fc ff50 	bl	8002e24 <__aeabi_dsub>
    if (Cal_dose < 0) Cal_dose = 0;
 8005f84:	2200      	movs	r2, #0
 8005f86:	2300      	movs	r3, #0
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005f88:	0004      	movs	r4, r0
 8005f8a:	000d      	movs	r5, r1
    if (Cal_dose < 0) Cal_dose = 0;
 8005f8c:	f7fa fa78 	bl	8000480 <__aeabi_dcmplt>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d001      	beq.n	8005f98 <Count_Filter_Kalman+0xdc>
 8005f94:	2400      	movs	r4, #0
 8005f96:	2500      	movs	r5, #0
    dose_log = (uint32_t)(Cal_dose * 100.0 + 0.5);
 8005f98:	4b1a      	ldr	r3, [pc, #104]	@ (8006004 <Count_Filter_Kalman+0x148>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	0020      	movs	r0, r4
 8005f9e:	9306      	str	r3, [sp, #24]
 8005fa0:	0029      	movs	r1, r5
 8005fa2:	4b19      	ldr	r3, [pc, #100]	@ (8006008 <Count_Filter_Kalman+0x14c>)
 8005fa4:	f7fc fc58 	bl	8002858 <__aeabi_dmul>
 8005fa8:	4b18      	ldr	r3, [pc, #96]	@ (800600c <Count_Filter_Kalman+0x150>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	f7fb fc54 	bl	8001858 <__aeabi_dadd>
 8005fb0:	f7fa fb1e 	bl	80005f0 <__aeabi_d2uiz>
 8005fb4:	9b06      	ldr	r3, [sp, #24]
 8005fb6:	6018      	str	r0, [r3, #0]
    printf("Raw=%.0f x_est(Raw)=%.6f Dose=%.4f\r\n",
 8005fb8:	9402      	str	r4, [sp, #8]
 8005fba:	9503      	str	r5, [sp, #12]
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	9c05      	ldr	r4, [sp, #20]
 8005fc0:	4813      	ldr	r0, [pc, #76]	@ (8006010 <Count_Filter_Kalman+0x154>)
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	9401      	str	r4, [sp, #4]
 8005fc6:	e796      	b.n	8005ef6 <Count_Filter_Kalman+0x3a>
 8005fc8:	20000560 	.word	0x20000560
 8005fcc:	2000055c 	.word	0x2000055c
 8005fd0:	200004f0 	.word	0x200004f0
 8005fd4:	20000000 	.word	0x20000000
 8005fd8:	200004e8 	.word	0x200004e8
 8005fdc:	3ff00000 	.word	0x3ff00000
 8005fe0:	0801d065 	.word	0x0801d065
 8005fe4:	47ae147b 	.word	0x47ae147b
 8005fe8:	3f747ae1 	.word	0x3f747ae1
 8005fec:	3d70a3d7 	.word	0x3d70a3d7
 8005ff0:	3fefd70a 	.word	0x3fefd70a
 8005ff4:	78d4fdf4 	.word	0x78d4fdf4
 8005ff8:	4046b6e9 	.word	0x4046b6e9
 8005ffc:	8adab9f5 	.word	0x8adab9f5
 8006000:	401365fd 	.word	0x401365fd
 8006004:	20000530 	.word	0x20000530
 8006008:	40590000 	.word	0x40590000
 800600c:	3fe00000 	.word	0x3fe00000
 8006010:	0801d08e 	.word	0x0801d08e

08006014 <Backup_GetMode>:
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8006014:	2101      	movs	r1, #1
{
 8006016:	b510      	push	{r4, lr}
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8006018:	4818      	ldr	r0, [pc, #96]	@ (800607c <Backup_GetMode+0x68>)
 800601a:	f00c f9a3 	bl	8012364 <HAL_RTCEx_BKUPRead>
    if (mode_raw > MODE_End) {
 800601e:	b283      	uxth	r3, r0
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8006020:	0002      	movs	r2, r0
    if (mode_raw > MODE_End) {
 8006022:	2b07      	cmp	r3, #7
 8006024:	d824      	bhi.n	8006070 <Backup_GetMode+0x5c>
        mode = (SystemMode)mode_raw;
 8006026:	b2c4      	uxtb	r4, r0
    switch (mode) {
 8006028:	1e60      	subs	r0, r4, #1
 800602a:	2806      	cmp	r0, #6
 800602c:	d81d      	bhi.n	800606a <Backup_GetMode+0x56>
 800602e:	f7fa f87d 	bl	800012c <__gnu_thumb1_case_uqi>
 8006032:	2204      	.short	0x2204
 8006034:	16131007 	.word	0x16131007
 8006038:	19          	.byte	0x19
 8006039:	00          	.byte	0x00
 800603a:	2300      	movs	r3, #0
        default:                mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 800603c:	4910      	ldr	r1, [pc, #64]	@ (8006080 <Backup_GetMode+0x6c>)
 800603e:	e001      	b.n	8006044 <Backup_GetMode+0x30>
        case MODE_Start:        mode_str = "MODE_Start";        Meas_Mode = 2; break;
 8006040:	2302      	movs	r3, #2
 8006042:	4910      	ldr	r1, [pc, #64]	@ (8006084 <Backup_GetMode+0x70>)
        case MODE_Boot:         mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 8006044:	4810      	ldr	r0, [pc, #64]	@ (8006088 <Backup_GetMode+0x74>)
 8006046:	7003      	strb	r3, [r0, #0]
    printf("Current Mode: %s (raw=0x%08lX)\r\n", mode_str, val);
 8006048:	4810      	ldr	r0, [pc, #64]	@ (800608c <Backup_GetMode+0x78>)
 800604a:	f014 f9b7 	bl	801a3bc <iprintf>
}
 800604e:	0020      	movs	r0, r4
 8006050:	bd10      	pop	{r4, pc}
        case MODE_Pause:        mode_str = "MODE_Pause";        Meas_Mode = 3; break;
 8006052:	2303      	movs	r3, #3
 8006054:	490e      	ldr	r1, [pc, #56]	@ (8006090 <Backup_GetMode+0x7c>)
 8006056:	e7f5      	b.n	8006044 <Backup_GetMode+0x30>
        case MODE_Start_Button: mode_str = "MODE_Start_Button"; Meas_Mode = 4; break;
 8006058:	2304      	movs	r3, #4
 800605a:	490e      	ldr	r1, [pc, #56]	@ (8006094 <Backup_GetMode+0x80>)
 800605c:	e7f2      	b.n	8006044 <Backup_GetMode+0x30>
        case Mode_Start_Delay:  mode_str = "Mode_Start_Delay" ; Meas_Mode = 5; break;
 800605e:	2305      	movs	r3, #5
 8006060:	490d      	ldr	r1, [pc, #52]	@ (8006098 <Backup_GetMode+0x84>)
 8006062:	e7ef      	b.n	8006044 <Backup_GetMode+0x30>
        case MODE_End:          mode_str = "MODE_End";          Meas_Mode = 6; break;
 8006064:	2306      	movs	r3, #6
 8006066:	490d      	ldr	r1, [pc, #52]	@ (800609c <Backup_GetMode+0x88>)
 8006068:	e7ec      	b.n	8006044 <Backup_GetMode+0x30>
        default:                mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 800606a:	2300      	movs	r3, #0
 800606c:	001c      	movs	r4, r3
 800606e:	e7e5      	b.n	800603c <Backup_GetMode+0x28>
 8006070:	2300      	movs	r3, #0
 8006072:	2401      	movs	r4, #1
 8006074:	e7e2      	b.n	800603c <Backup_GetMode+0x28>
    switch (mode) {
 8006076:	2301      	movs	r3, #1
 8006078:	4909      	ldr	r1, [pc, #36]	@ (80060a0 <Backup_GetMode+0x8c>)
 800607a:	e7e3      	b.n	8006044 <Backup_GetMode+0x30>
 800607c:	200009f8 	.word	0x200009f8
 8006080:	0801d0b3 	.word	0x0801d0b3
 8006084:	0801d0c7 	.word	0x0801d0c7
 8006088:	20000535 	.word	0x20000535
 800608c:	0801d109 	.word	0x0801d109
 8006090:	0801d0d2 	.word	0x0801d0d2
 8006094:	0801d0dd 	.word	0x0801d0dd
 8006098:	0801d0ef 	.word	0x0801d0ef
 800609c:	0801d100 	.word	0x0801d100
 80060a0:	0801d0bd 	.word	0x0801d0bd

080060a4 <Backup_SetMode>:
{
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();
 80060a8:	f00a fdfa 	bl	8010ca0 <HAL_PWR_EnableBkUpAccess>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 80060ac:	4d06      	ldr	r5, [pc, #24]	@ (80060c8 <Backup_SetMode+0x24>)
 80060ae:	2101      	movs	r1, #1
 80060b0:	0028      	movs	r0, r5
 80060b2:	f00c f957 	bl	8012364 <HAL_RTCEx_BKUPRead>
    val = (val & 0xFFFF0000) | (mode & 0xFFFF);
 80060b6:	0c02      	lsrs	r2, r0, #16
 80060b8:	0412      	lsls	r2, r2, #16
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 80060ba:	0028      	movs	r0, r5
 80060bc:	2101      	movs	r1, #1
    val = (val & 0xFFFF0000) | (mode & 0xFFFF);
 80060be:	4322      	orrs	r2, r4
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 80060c0:	f00c f948 	bl	8012354 <HAL_RTCEx_BKUPWrite>
}
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	46c0      	nop			@ (mov r8, r8)
 80060c8:	200009f8 	.word	0x200009f8

080060cc <Clear_WakeupTime_Backup>:
{
 80060cc:	b510      	push	{r4, lr}
    HAL_PWR_EnableBkUpAccess();
 80060ce:	f00a fde7 	bl	8010ca0 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, 0xFFFFFFFF);
 80060d2:	2201      	movs	r2, #1
 80060d4:	4c07      	ldr	r4, [pc, #28]	@ (80060f4 <Clear_WakeupTime_Backup+0x28>)
 80060d6:	4252      	negs	r2, r2
 80060d8:	0020      	movs	r0, r4
 80060da:	2107      	movs	r1, #7
 80060dc:	f00c f93a 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 80060e0:	2107      	movs	r1, #7
 80060e2:	0020      	movs	r0, r4
 80060e4:	f00c f93e 	bl	8012364 <HAL_RTCEx_BKUPRead>
    printf("[Clear] BKP_WAKEUP_TIME Write: 0xFFFFFFFF, ReadBack = 0x%08lX\n", check);
 80060e8:	4b03      	ldr	r3, [pc, #12]	@ (80060f8 <Clear_WakeupTime_Backup+0x2c>)
    uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 80060ea:	0001      	movs	r1, r0
    printf("[Clear] BKP_WAKEUP_TIME Write: 0xFFFFFFFF, ReadBack = 0x%08lX\n", check);
 80060ec:	0018      	movs	r0, r3
 80060ee:	f014 f965 	bl	801a3bc <iprintf>
}
 80060f2:	bd10      	pop	{r4, pc}
 80060f4:	200009f8 	.word	0x200009f8
 80060f8:	0801d12a 	.word	0x0801d12a

080060fc <Switch_Backup_reg>:
{
 80060fc:	b510      	push	{r4, lr}
 80060fe:	0004      	movs	r4, r0
    SystemMode prev_mode = Backup_GetMode();
 8006100:	f7ff ff88 	bl	8006014 <Backup_GetMode>
    if (prev_mode != new_mode) {
 8006104:	42a0      	cmp	r0, r4
 8006106:	d004      	beq.n	8006112 <Switch_Backup_reg+0x16>
        Backup_SetMode(new_mode);
 8006108:	0020      	movs	r0, r4
 800610a:	f7ff ffcb 	bl	80060a4 <Backup_SetMode>
        Backup_GetMode();
 800610e:	f7ff ff81 	bl	8006014 <Backup_GetMode>
    SystemMode cur_mode = Backup_GetMode(); // 이때 Meas_Mode도 자동 세팅됨
 8006112:	f7ff ff7f 	bl	8006014 <Backup_GetMode>
    switch (cur_mode) {
 8006116:	3802      	subs	r0, #2
 8006118:	2300      	movs	r3, #0
 800611a:	2805      	cmp	r0, #5
 800611c:	d805      	bhi.n	800612a <Switch_Backup_reg+0x2e>
 800611e:	f7fa f805 	bl	800012c <__gnu_thumb1_case_uqi>
 8006122:	0307      	.short	0x0307
 8006124:	2518110b 	.word	0x2518110b
 8006128:	2302      	movs	r3, #2
        case MODE_Boot:   Meas_Mode = 0; break;
 800612a:	4a12      	ldr	r2, [pc, #72]	@ (8006174 <Switch_Backup_reg+0x78>)
 800612c:	7013      	strb	r3, [r2, #0]
}
 800612e:	bd10      	pop	{r4, pc}
        	RTC_Disable_All_Wakeup();
 8006130:	f7ff fba2 	bl	8005878 <RTC_Disable_All_Wakeup>
        	break;
 8006134:	2301      	movs	r3, #1
 8006136:	e7f8      	b.n	800612a <Switch_Backup_reg+0x2e>
        	Clear_WakeupTime_Backup();
 8006138:	f7ff ffc8 	bl	80060cc <Clear_WakeupTime_Backup>
        	RTC_Disable_All_Wakeup();
 800613c:	f7ff fb9c 	bl	8005878 <RTC_Disable_All_Wakeup>
        	break;
 8006140:	2303      	movs	r3, #3
 8006142:	e7f2      	b.n	800612a <Switch_Backup_reg+0x2e>
        case MODE_Start_Button: Tick_Save = Interval_LCD_Count+2;  Meas_Mode = 4; break;
 8006144:	4b0c      	ldr	r3, [pc, #48]	@ (8006178 <Switch_Backup_reg+0x7c>)
 8006146:	4a0d      	ldr	r2, [pc, #52]	@ (800617c <Switch_Backup_reg+0x80>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3302      	adds	r3, #2
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	2304      	movs	r3, #4
 8006150:	e7eb      	b.n	800612a <Switch_Backup_reg+0x2e>
        	RTC_Disable_All_Wakeup();
 8006152:	f7ff fb91 	bl	8005878 <RTC_Disable_All_Wakeup>
        	if(current_settings.start_mode == 0x04){
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <Switch_Backup_reg+0x84>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d103      	bne.n	8006166 <Switch_Backup_reg+0x6a>
        		Set_StartTargetTime_FromReservation();
 800615e:	f7ff fc31 	bl	80059c4 <Set_StartTargetTime_FromReservation>
        	break;
 8006162:	2305      	movs	r3, #5
 8006164:	e7e1      	b.n	800612a <Switch_Backup_reg+0x2e>
        	Start_Delay_Timer();}
 8006166:	f7ff fda5 	bl	8005cb4 <Start_Delay_Timer>
 800616a:	e7fa      	b.n	8006162 <Switch_Backup_reg+0x66>
        	RTC_Disable_All_Wakeup(); Meas_Mode = 6; break;
 800616c:	f7ff fb84 	bl	8005878 <RTC_Disable_All_Wakeup>
 8006170:	2306      	movs	r3, #6
 8006172:	e7da      	b.n	800612a <Switch_Backup_reg+0x2e>
 8006174:	20000535 	.word	0x20000535
 8006178:	2000053c 	.word	0x2000053c
 800617c:	20000540 	.word	0x20000540
 8006180:	20002c0f 	.word	0x20002c0f

08006184 <Get_in_Shutdown_Timer>:
{
 8006184:	b510      	push	{r4, lr}
    Switch_Backup_reg(MODE_Start_Button);
 8006186:	2005      	movs	r0, #5
 8006188:	f7ff ffb8 	bl	80060fc <Switch_Backup_reg>
    LCD_Clear_Display(LCD_data);
 800618c:	4824      	ldr	r0, [pc, #144]	@ (8006220 <Get_in_Shutdown_Timer+0x9c>)
 800618e:	f7fe fdb3 	bl	8004cf8 <LCD_Clear_Display>
    printf("Getting on to sleep(Timer)\r\n");
 8006192:	4824      	ldr	r0, [pc, #144]	@ (8006224 <Get_in_Shutdown_Timer+0xa0>)
 8006194:	f014 f982 	bl	801a49c <puts>
    if (rad_interval_count == 0) {
 8006198:	4b23      	ldr	r3, [pc, #140]	@ (8006228 <Get_in_Shutdown_Timer+0xa4>)
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	4b23      	ldr	r3, [pc, #140]	@ (800622c <Get_in_Shutdown_Timer+0xa8>)
 800619e:	2a00      	cmp	r2, #0
 80061a0:	d129      	bne.n	80061f6 <Get_in_Shutdown_Timer+0x72>
        sleep_time = current_settings.temp_interval - 14;
 80061a2:	0019      	movs	r1, r3
 80061a4:	001a      	movs	r2, r3
 80061a6:	3176      	adds	r1, #118	@ 0x76
 80061a8:	7809      	ldrb	r1, [r1, #0]
 80061aa:	3275      	adds	r2, #117	@ 0x75
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	0209      	lsls	r1, r1, #8
 80061b0:	4311      	orrs	r1, r2
 80061b2:	001a      	movs	r2, r3
 80061b4:	3277      	adds	r2, #119	@ 0x77
 80061b6:	7812      	ldrb	r2, [r2, #0]
 80061b8:	3378      	adds	r3, #120	@ 0x78
 80061ba:	781c      	ldrb	r4, [r3, #0]
 80061bc:	0412      	lsls	r2, r2, #16
 80061be:	430a      	orrs	r2, r1
 80061c0:	0624      	lsls	r4, r4, #24
 80061c2:	4314      	orrs	r4, r2
        printf("다음번엔 Rad 측정, Sleep Time = %lu sec\r\n", sleep_time);
 80061c4:	481a      	ldr	r0, [pc, #104]	@ (8006230 <Get_in_Shutdown_Timer+0xac>)
        sleep_time = current_settings.temp_interval - 14;
 80061c6:	3c0e      	subs	r4, #14
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 80061c8:	0021      	movs	r1, r4
 80061ca:	f014 f8f7 	bl	801a3bc <iprintf>
    RTC_Disable_All_Wakeup();
 80061ce:	f7ff fb53 	bl	8005878 <RTC_Disable_All_Wakeup>
    Save_Power_Function();
 80061d2:	f7ff fd25 	bl	8005c20 <Save_Power_Function>
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 80061d6:	2081      	movs	r0, #129	@ 0x81
 80061d8:	f00a fdb6 	bl	8010d48 <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH);
 80061dc:	2002      	movs	r0, #2
 80061de:	f00a fdb3 	bl	8010d48 <HAL_PWR_EnableWakeUpPin>
    RTC_SetAlarmA_SecondsFromNow(sleep_time);
 80061e2:	0020      	movs	r0, r4
 80061e4:	f7ff fb72 	bl	80058cc <RTC_SetAlarmA_SecondsFromNow>
    HAL_SuspendTick();
 80061e8:	f008 f936 	bl	800e458 <HAL_SuspendTick>
    HAL_PWR_EnterSHUTDOWNMode();
 80061ec:	f00a fdba 	bl	8010d64 <HAL_PWR_EnterSHUTDOWNMode>
    HAL_ResumeTick();
 80061f0:	f008 f93a 	bl	800e468 <HAL_ResumeTick>
}
 80061f4:	bd10      	pop	{r4, pc}
        sleep_time = current_settings.temp_interval - 5;
 80061f6:	0019      	movs	r1, r3
 80061f8:	001a      	movs	r2, r3
 80061fa:	3176      	adds	r1, #118	@ 0x76
 80061fc:	7809      	ldrb	r1, [r1, #0]
 80061fe:	3275      	adds	r2, #117	@ 0x75
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	0209      	lsls	r1, r1, #8
 8006204:	4311      	orrs	r1, r2
 8006206:	001a      	movs	r2, r3
 8006208:	3277      	adds	r2, #119	@ 0x77
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	3378      	adds	r3, #120	@ 0x78
 800620e:	781c      	ldrb	r4, [r3, #0]
 8006210:	0412      	lsls	r2, r2, #16
 8006212:	430a      	orrs	r2, r1
 8006214:	0624      	lsls	r4, r4, #24
 8006216:	4314      	orrs	r4, r2
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8006218:	4806      	ldr	r0, [pc, #24]	@ (8006234 <Get_in_Shutdown_Timer+0xb0>)
        sleep_time = current_settings.temp_interval - 5;
 800621a:	3c05      	subs	r4, #5
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 800621c:	e7d4      	b.n	80061c8 <Get_in_Shutdown_Timer+0x44>
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	20000514 	.word	0x20000514
 8006224:	0801d169 	.word	0x0801d169
 8006228:	200004fd 	.word	0x200004fd
 800622c:	20002bac 	.word	0x20002bac
 8006230:	0801d185 	.word	0x0801d185
 8006234:	0801d1b5 	.word	0x0801d1b5

08006238 <Start_Wake_Timer>:
void Start_Wake_Timer(){
 8006238:	b510      	push	{r4, lr}
	Switch_Backup_reg(MODE_Start_Button);
 800623a:	2005      	movs	r0, #5
 800623c:	f7ff ff5e 	bl	80060fc <Switch_Backup_reg>
	LCD_Clear_Display(LCD_data);
 8006240:	481b      	ldr	r0, [pc, #108]	@ (80062b0 <Start_Wake_Timer+0x78>)
 8006242:	f7fe fd59 	bl	8004cf8 <LCD_Clear_Display>
	RTC_Disable_All_Wakeup();
 8006246:	f7ff fb17 	bl	8005878 <RTC_Disable_All_Wakeup>
	    if (rad_interval_count == 0) {
 800624a:	4b1a      	ldr	r3, [pc, #104]	@ (80062b4 <Start_Wake_Timer+0x7c>)
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <Start_Wake_Timer+0x80>)
 8006250:	2a00      	cmp	r2, #0
 8006252:	d119      	bne.n	8006288 <Start_Wake_Timer+0x50>
	        sleep_time = current_settings.temp_interval - 14;
 8006254:	0019      	movs	r1, r3
 8006256:	001a      	movs	r2, r3
 8006258:	3176      	adds	r1, #118	@ 0x76
 800625a:	7809      	ldrb	r1, [r1, #0]
 800625c:	3275      	adds	r2, #117	@ 0x75
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	0209      	lsls	r1, r1, #8
 8006262:	4311      	orrs	r1, r2
 8006264:	001a      	movs	r2, r3
 8006266:	3277      	adds	r2, #119	@ 0x77
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	3378      	adds	r3, #120	@ 0x78
 800626c:	781c      	ldrb	r4, [r3, #0]
 800626e:	0412      	lsls	r2, r2, #16
 8006270:	430a      	orrs	r2, r1
 8006272:	0624      	lsls	r4, r4, #24
 8006274:	4314      	orrs	r4, r2
	        printf("다음번엔 Rad 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8006276:	4811      	ldr	r0, [pc, #68]	@ (80062bc <Start_Wake_Timer+0x84>)
	        sleep_time = current_settings.temp_interval - 14;
 8006278:	3c0e      	subs	r4, #14
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 800627a:	0021      	movs	r1, r4
 800627c:	f014 f89e 	bl	801a3bc <iprintf>
	    RTC_SetAlarmA_SecondsFromNow(sleep_time);
 8006280:	0020      	movs	r0, r4
 8006282:	f7ff fb23 	bl	80058cc <RTC_SetAlarmA_SecondsFromNow>
}
 8006286:	bd10      	pop	{r4, pc}
	        sleep_time = current_settings.temp_interval - 5;
 8006288:	0019      	movs	r1, r3
 800628a:	001a      	movs	r2, r3
 800628c:	3176      	adds	r1, #118	@ 0x76
 800628e:	7809      	ldrb	r1, [r1, #0]
 8006290:	3275      	adds	r2, #117	@ 0x75
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	0209      	lsls	r1, r1, #8
 8006296:	4311      	orrs	r1, r2
 8006298:	001a      	movs	r2, r3
 800629a:	3277      	adds	r2, #119	@ 0x77
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	3378      	adds	r3, #120	@ 0x78
 80062a0:	781c      	ldrb	r4, [r3, #0]
 80062a2:	0412      	lsls	r2, r2, #16
 80062a4:	430a      	orrs	r2, r1
 80062a6:	0624      	lsls	r4, r4, #24
 80062a8:	4314      	orrs	r4, r2
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 80062aa:	4805      	ldr	r0, [pc, #20]	@ (80062c0 <Start_Wake_Timer+0x88>)
	        sleep_time = current_settings.temp_interval - 5;
 80062ac:	3c05      	subs	r4, #5
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 80062ae:	e7e4      	b.n	800627a <Start_Wake_Timer+0x42>
 80062b0:	20000514 	.word	0x20000514
 80062b4:	200004fd 	.word	0x200004fd
 80062b8:	20002bac 	.word	0x20002bac
 80062bc:	0801d185 	.word	0x0801d185
 80062c0:	0801d1b5 	.word	0x0801d1b5

080062c4 <Save_IndexNum_To_Backup>:
void Save_IndexNum_To_Backup(uint16_t idx) {
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();
 80062c8:	f00a fcea 	bl	8010ca0 <HAL_PWR_EnableBkUpAccess>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 80062cc:	4d06      	ldr	r5, [pc, #24]	@ (80062e8 <Save_IndexNum_To_Backup+0x24>)
 80062ce:	2101      	movs	r1, #1
 80062d0:	0028      	movs	r0, r5
 80062d2:	f00c f847 	bl	8012364 <HAL_RTCEx_BKUPRead>
    val = (val & 0x0000FFFF) | (((uint32_t)idx) << 16);
 80062d6:	0422      	lsls	r2, r4, #16
 80062d8:	b280      	uxth	r0, r0
 80062da:	4302      	orrs	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 80062dc:	2101      	movs	r1, #1
 80062de:	0028      	movs	r0, r5
 80062e0:	f00c f838 	bl	8012354 <HAL_RTCEx_BKUPWrite>
}
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	200009f8 	.word	0x200009f8

080062ec <Save_Dose_To_Backup>:
{
 80062ec:	b510      	push	{r4, lr}
 80062ee:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX, cfg->dose_max);
 80062f0:	6862      	ldr	r2, [r4, #4]
 80062f2:	2100      	movs	r1, #0
 80062f4:	4804      	ldr	r0, [pc, #16]	@ (8006308 <Save_Dose_To_Backup+0x1c>)
 80062f6:	f00c f82d 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Dose Max=%u (Raw: 0x%08lX)\n", cfg->dose_max, (unsigned long)cfg->dose_max);
 80062fa:	6861      	ldr	r1, [r4, #4]
 80062fc:	4803      	ldr	r0, [pc, #12]	@ (800630c <Save_Dose_To_Backup+0x20>)
 80062fe:	000a      	movs	r2, r1
 8006300:	f014 f85c 	bl	801a3bc <iprintf>
}
 8006304:	bd10      	pop	{r4, pc}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	200009f8 	.word	0x200009f8
 800630c:	0801d1e6 	.word	0x0801d1e6

08006310 <Save_Temp_To_Backup>:
{
 8006310:	b510      	push	{r4, lr}
 8006312:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_TEMP_MIN_MAX, pack);
 8006314:	6822      	ldr	r2, [r4, #0]
 8006316:	2102      	movs	r1, #2
 8006318:	4805      	ldr	r0, [pc, #20]	@ (8006330 <Save_Temp_To_Backup+0x20>)
 800631a:	f00c f81b 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Temp Max=%d, Min=%d\n", cfg->temp_max, cfg->temp_min);
 800631e:	2302      	movs	r3, #2
 8006320:	5ee2      	ldrsh	r2, [r4, r3]
 8006322:	2300      	movs	r3, #0
 8006324:	5ee1      	ldrsh	r1, [r4, r3]
 8006326:	4803      	ldr	r0, [pc, #12]	@ (8006334 <Save_Temp_To_Backup+0x24>)
 8006328:	f014 f848 	bl	801a3bc <iprintf>
}
 800632c:	bd10      	pop	{r4, pc}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	200009f8 	.word	0x200009f8
 8006334:	0801d210 	.word	0x0801d210

08006338 <Save_Backup_Index>:
void Save_Backup_Index(void) {
 8006338:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t reg3 = ((uint32_t)idx_temp << 16) | (idx_rad & 0xFFFF);
 800633a:	4e10      	ldr	r6, [pc, #64]	@ (800637c <Save_Backup_Index+0x44>)
 800633c:	4d10      	ldr	r5, [pc, #64]	@ (8006380 <Save_Backup_Index+0x48>)
 800633e:	8833      	ldrh	r3, [r6, #0]
 8006340:	882a      	ldrh	r2, [r5, #0]
 8006342:	041b      	lsls	r3, r3, #16
void Save_Backup_Index(void) {
 8006344:	b085      	sub	sp, #20
    uint32_t reg4 = (uint32_t)rad_interval_count;
 8006346:	4f0f      	ldr	r7, [pc, #60]	@ (8006384 <Save_Backup_Index+0x4c>)
    uint32_t reg3 = ((uint32_t)idx_temp << 16) | (idx_rad & 0xFFFF);
 8006348:	4313      	orrs	r3, r2
 800634a:	9302      	str	r3, [sp, #8]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 800634c:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <Save_Backup_Index+0x50>)
    uint32_t reg4 = (uint32_t)rad_interval_count;
 800634e:	783c      	ldrb	r4, [r7, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 8006350:	0018      	movs	r0, r3
 8006352:	9a02      	ldr	r2, [sp, #8]
 8006354:	2103      	movs	r1, #3
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	f00b fffc 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG, reg4);
 800635c:	0022      	movs	r2, r4
 800635e:	9803      	ldr	r0, [sp, #12]
 8006360:	2104      	movs	r1, #4
 8006362:	f00b fff7 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved Backup Index: idx_rad=%u, idx_temp=%u, rad_interval_count=%u "
 8006366:	783b      	ldrb	r3, [r7, #0]
 8006368:	8832      	ldrh	r2, [r6, #0]
 800636a:	8829      	ldrh	r1, [r5, #0]
 800636c:	9401      	str	r4, [sp, #4]
 800636e:	9c02      	ldr	r4, [sp, #8]
 8006370:	4806      	ldr	r0, [pc, #24]	@ (800638c <Save_Backup_Index+0x54>)
 8006372:	9400      	str	r4, [sp, #0]
 8006374:	f014 f822 	bl	801a3bc <iprintf>
}
 8006378:	b005      	add	sp, #20
 800637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637c:	200004fe 	.word	0x200004fe
 8006380:	20000500 	.word	0x20000500
 8006384:	200004fd 	.word	0x200004fd
 8006388:	200009f8 	.word	0x200009f8
 800638c:	0801d233 	.word	0x0801d233

08006390 <Clear_Backup_Index>:
void Clear_Backup_Index(void) {
 8006390:	b570      	push	{r4, r5, r6, lr}
    idx_rad = 0;
 8006392:	2400      	movs	r4, #0
 8006394:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <Clear_Backup_Index+0x34>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 8006396:	4d0c      	ldr	r5, [pc, #48]	@ (80063c8 <Clear_Backup_Index+0x38>)
    idx_rad = 0;
 8006398:	801c      	strh	r4, [r3, #0]
    idx_temp = 0;
 800639a:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <Clear_Backup_Index+0x3c>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 800639c:	0028      	movs	r0, r5
    idx_temp = 0;
 800639e:	801c      	strh	r4, [r3, #0]
    rad_interval_count = 0;
 80063a0:	4b0b      	ldr	r3, [pc, #44]	@ (80063d0 <Clear_Backup_Index+0x40>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80063a2:	0022      	movs	r2, r4
 80063a4:	2103      	movs	r1, #3
    rad_interval_count = 0;
 80063a6:	701c      	strb	r4, [r3, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80063a8:	f00b ffd4 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG, reg4);
 80063ac:	0028      	movs	r0, r5
 80063ae:	0022      	movs	r2, r4
 80063b0:	2104      	movs	r1, #4
 80063b2:	f00b ffcf 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    printf("[Clear] Backup Index Cleared: idx_rad=0, idx_temp=0, rad_interval_count=0 "
 80063b6:	0022      	movs	r2, r4
 80063b8:	0021      	movs	r1, r4
 80063ba:	4806      	ldr	r0, [pc, #24]	@ (80063d4 <Clear_Backup_Index+0x44>)
 80063bc:	f013 fffe 	bl	801a3bc <iprintf>
}
 80063c0:	bd70      	pop	{r4, r5, r6, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	20000500 	.word	0x20000500
 80063c8:	200009f8 	.word	0x200009f8
 80063cc:	200004fe 	.word	0x200004fe
 80063d0:	200004fd 	.word	0x200004fd
 80063d4:	0801d2a2 	.word	0x0801d2a2

080063d8 <Save_MarkAndAlarmState_To_Backup>:
{
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	0004      	movs	r4, r0
                 | ((uint32_t)(cfg->alarm_state) << 8);     // 8~19 (6*2bit)
 80063dc:	6985      	ldr	r5, [r0, #24]
    uint32_t val = ((uint32_t)(cfg->mark) & 0xFF)           // 0~7
 80063de:	7d03      	ldrb	r3, [r0, #20]
                 | ((uint32_t)(cfg->alarm_state) << 8);     // 8~19 (6*2bit)
 80063e0:	022d      	lsls	r5, r5, #8
    uint32_t val = ((uint32_t)(cfg->mark) & 0xFF)           // 0~7
 80063e2:	431d      	orrs	r5, r3
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK, val);
 80063e4:	002a      	movs	r2, r5
 80063e6:	2106      	movs	r1, #6
 80063e8:	4804      	ldr	r0, [pc, #16]	@ (80063fc <Save_MarkAndAlarmState_To_Backup+0x24>)
 80063ea:	f00b ffb3 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved Mark=0x%02X, AlarmState=0x%04X (Packed=0x%08lX)\r\n",
 80063ee:	002b      	movs	r3, r5
 80063f0:	7d21      	ldrb	r1, [r4, #20]
 80063f2:	69a2      	ldr	r2, [r4, #24]
 80063f4:	4802      	ldr	r0, [pc, #8]	@ (8006400 <Save_MarkAndAlarmState_To_Backup+0x28>)
 80063f6:	f013 ffe1 	bl	801a3bc <iprintf>
}
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	200009f8 	.word	0x200009f8
 8006400:	0801d310 	.word	0x0801d310

08006404 <Save_IntervalInfo_To_Backup>:
{
 8006404:	b510      	push	{r4, lr}
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_INTERVAL_INFO, info_pack);
 8006406:	4b03      	ldr	r3, [pc, #12]	@ (8006414 <Save_IntervalInfo_To_Backup+0x10>)
 8006408:	69c2      	ldr	r2, [r0, #28]
 800640a:	2108      	movs	r1, #8
 800640c:	0018      	movs	r0, r3
 800640e:	f00b ffa1 	bl	8012354 <HAL_RTCEx_BKUPWrite>
}
 8006412:	bd10      	pop	{r4, pc}
 8006414:	200009f8 	.word	0x200009f8

08006418 <Save_Mark_To_Backup>:
{
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800641a:	4f0b      	ldr	r7, [pc, #44]	@ (8006448 <Save_Mark_To_Backup+0x30>)
{
 800641c:	0004      	movs	r4, r0
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800641e:	0038      	movs	r0, r7
 8006420:	2106      	movs	r1, #6
 8006422:	f00b ff9f 	bl	8012364 <HAL_RTCEx_BKUPRead>
    uint32_t alarm_bits = (prev_val & 0xFFFFFF00);  // 상위 alarm_state 보존
 8006426:	23ff      	movs	r3, #255	@ 0xff
 8006428:	0006      	movs	r6, r0
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800642a:	0005      	movs	r5, r0
    uint32_t alarm_bits = (prev_val & 0xFFFFFF00);  // 상위 alarm_state 보존
 800642c:	439e      	bics	r6, r3
    uint32_t new_val = (mark & 0xFF) | alarm_bits;
 800642e:	4326      	orrs	r6, r4
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK, new_val);
 8006430:	0032      	movs	r2, r6
 8006432:	0038      	movs	r0, r7
 8006434:	2106      	movs	r1, #6
 8006436:	f00b ff8d 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved ONLY Mark=0x%02X (Prev=0x%08lX → New=0x%08lX)\r\n",
 800643a:	0033      	movs	r3, r6
 800643c:	002a      	movs	r2, r5
 800643e:	0021      	movs	r1, r4
 8006440:	4802      	ldr	r0, [pc, #8]	@ (800644c <Save_Mark_To_Backup+0x34>)
 8006442:	f013 ffbb 	bl	801a3bc <iprintf>
}
 8006446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006448:	200009f8 	.word	0x200009f8
 800644c:	0801d350 	.word	0x0801d350

08006450 <Save_WakeupTime_To_Backup>:
{
 8006450:	b570      	push	{r4, r5, r6, lr}
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, target_sec);
 8006452:	4d0b      	ldr	r5, [pc, #44]	@ (8006480 <Save_WakeupTime_To_Backup+0x30>)
{
 8006454:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, target_sec);
 8006456:	0002      	movs	r2, r0
 8006458:	2107      	movs	r1, #7
 800645a:	0028      	movs	r0, r5
 800645c:	f00b ff7a 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    uint32_t verify = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8006460:	2107      	movs	r1, #7
 8006462:	0028      	movs	r0, r5
 8006464:	f00b ff7e 	bl	8012364 <HAL_RTCEx_BKUPRead>
 8006468:	0005      	movs	r5, r0
    printf("[Backup] Save Wakeup Target Time = %lu (Raw: 0x%08lX)\n", target_sec, target_sec);
 800646a:	0022      	movs	r2, r4
 800646c:	0021      	movs	r1, r4
 800646e:	4805      	ldr	r0, [pc, #20]	@ (8006484 <Save_WakeupTime_To_Backup+0x34>)
 8006470:	f013 ffa4 	bl	801a3bc <iprintf>
    printf("[Verify] ReadBack Value = %lu (Raw: 0x%08lX)\n", verify, verify);
 8006474:	002a      	movs	r2, r5
 8006476:	0029      	movs	r1, r5
 8006478:	4803      	ldr	r0, [pc, #12]	@ (8006488 <Save_WakeupTime_To_Backup+0x38>)
 800647a:	f013 ff9f 	bl	801a3bc <iprintf>
}
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	200009f8 	.word	0x200009f8
 8006484:	0801d390 	.word	0x0801d390
 8006488:	0801d3c7 	.word	0x0801d3c7

0800648c <Save_Pre_RAD_Value_To_Backup>:
{
 800648c:	b510      	push	{r4, lr}
 800648e:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();   // BKUP 영역 쓰기 권한 허용
 8006490:	f00a fc06 	bl	8010ca0 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE, value);
 8006494:	0022      	movs	r2, r4
 8006496:	2105      	movs	r1, #5
 8006498:	4804      	ldr	r0, [pc, #16]	@ (80064ac <Save_Pre_RAD_Value_To_Backup+0x20>)
 800649a:	f00b ff5b 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Pre_RAD_Value = %lu (Raw: 0x%08lX)\r\n", value, value);
 800649e:	0022      	movs	r2, r4
 80064a0:	0021      	movs	r1, r4
 80064a2:	4803      	ldr	r0, [pc, #12]	@ (80064b0 <Save_Pre_RAD_Value_To_Backup+0x24>)
 80064a4:	f013 ff8a 	bl	801a3bc <iprintf>
}
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	200009f8 	.word	0x200009f8
 80064b0:	0801d3f5 	.word	0x0801d3f5

080064b4 <Save_All_Config_To_BackupRegister>:
{
 80064b4:	b510      	push	{r4, lr}
 80064b6:	0004      	movs	r4, r0
    Save_Temp_To_Backup(cfg);
 80064b8:	f7ff ff2a 	bl	8006310 <Save_Temp_To_Backup>
    Save_Dose_To_Backup(cfg);
 80064bc:	0020      	movs	r0, r4
 80064be:	f7ff ff15 	bl	80062ec <Save_Dose_To_Backup>
    Save_MarkAndAlarmState_To_Backup(cfg);
 80064c2:	0020      	movs	r0, r4
 80064c4:	f7ff ff88 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
    Save_IntervalInfo_To_Backup(cfg);
 80064c8:	0020      	movs	r0, r4
 80064ca:	f7ff ff9b 	bl	8006404 <Save_IntervalInfo_To_Backup>
}
 80064ce:	bd10      	pop	{r4, pc}

080064d0 <Load_IndexNum_From_Backup>:
{
 80064d0:	b510      	push	{r4, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 80064d2:	2101      	movs	r1, #1
 80064d4:	4802      	ldr	r0, [pc, #8]	@ (80064e0 <Load_IndexNum_From_Backup+0x10>)
 80064d6:	f00b ff45 	bl	8012364 <HAL_RTCEx_BKUPRead>
    return idx;
 80064da:	0c00      	lsrs	r0, r0, #16
}
 80064dc:	bd10      	pop	{r4, pc}
 80064de:	46c0      	nop			@ (mov r8, r8)
 80064e0:	200009f8 	.word	0x200009f8

080064e4 <Load_Temp_From_Backup>:
{
 80064e4:	b510      	push	{r4, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_TEMP_MIN_MAX);
 80064e6:	2102      	movs	r1, #2
{
 80064e8:	0004      	movs	r4, r0
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_TEMP_MIN_MAX);
 80064ea:	4805      	ldr	r0, [pc, #20]	@ (8006500 <Load_Temp_From_Backup+0x1c>)
 80064ec:	f00b ff3a 	bl	8012364 <HAL_RTCEx_BKUPRead>
    cfg->temp_max = (int16_t)(val & 0xFFFF);           // 하위 16비트
 80064f0:	6020      	str	r0, [r4, #0]
    printf("[Backup] Load Temp Max=%d, Min=%d\n", cfg->temp_max, cfg->temp_min);
 80064f2:	1402      	asrs	r2, r0, #16
 80064f4:	b201      	sxth	r1, r0
 80064f6:	4803      	ldr	r0, [pc, #12]	@ (8006504 <Load_Temp_From_Backup+0x20>)
 80064f8:	f013 ff60 	bl	801a3bc <iprintf>
}
 80064fc:	bd10      	pop	{r4, pc}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	200009f8 	.word	0x200009f8
 8006504:	0801d428 	.word	0x0801d428

08006508 <Load_Dose_From_Backup>:
{
 8006508:	b510      	push	{r4, lr}
    cfg->dose_max = HAL_RTCEx_BKUPRead(&hrtc, BKP_DOSE_MAX);
 800650a:	2100      	movs	r1, #0
{
 800650c:	0004      	movs	r4, r0
    cfg->dose_max = HAL_RTCEx_BKUPRead(&hrtc, BKP_DOSE_MAX);
 800650e:	4805      	ldr	r0, [pc, #20]	@ (8006524 <Load_Dose_From_Backup+0x1c>)
 8006510:	f00b ff28 	bl	8012364 <HAL_RTCEx_BKUPRead>
 8006514:	0001      	movs	r1, r0
 8006516:	6060      	str	r0, [r4, #4]
    printf("[Backup] Load Dose Max=%u (Raw: 0x%08lX)\n", cfg->dose_max, (unsigned long)cfg->dose_max);
 8006518:	000a      	movs	r2, r1
 800651a:	4803      	ldr	r0, [pc, #12]	@ (8006528 <Load_Dose_From_Backup+0x20>)
 800651c:	f013 ff4e 	bl	801a3bc <iprintf>
}
 8006520:	bd10      	pop	{r4, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	200009f8 	.word	0x200009f8
 8006528:	0801d44b 	.word	0x0801d44b

0800652c <Load_Backup_Index>:
void Load_Backup_Index(void) {
 800652c:	b570      	push	{r4, r5, r6, lr}
    uint32_t reg3 = HAL_RTCEx_BKUPRead(&hrtc, BKP_IDX_REG);
 800652e:	4d29      	ldr	r5, [pc, #164]	@ (80065d4 <Load_Backup_Index+0xa8>)
 8006530:	2103      	movs	r1, #3
 8006532:	0028      	movs	r0, r5
 8006534:	f00b ff16 	bl	8012364 <HAL_RTCEx_BKUPRead>
 8006538:	0004      	movs	r4, r0
    uint32_t reg4 = HAL_RTCEx_BKUPRead(&hrtc, BKP_COUNT_REG);
 800653a:	2104      	movs	r1, #4
 800653c:	0028      	movs	r0, r5
 800653e:	f00b ff11 	bl	8012364 <HAL_RTCEx_BKUPRead>
    idx_rad = (uint16_t)(reg3 & 0xFFFF);
 8006542:	4b25      	ldr	r3, [pc, #148]	@ (80065d8 <Load_Backup_Index+0xac>)
    rad_interval_count = (uint8_t)(reg4 & 0xFF);
 8006544:	4d25      	ldr	r5, [pc, #148]	@ (80065dc <Load_Backup_Index+0xb0>)
    idx_rad = (uint16_t)(reg3 & 0xFFFF);
 8006546:	801c      	strh	r4, [r3, #0]
    idx_temp = (uint16_t)((reg3 >> 16) & 0xFFFF);
 8006548:	4b25      	ldr	r3, [pc, #148]	@ (80065e0 <Load_Backup_Index+0xb4>)
 800654a:	0c22      	lsrs	r2, r4, #16
 800654c:	801a      	strh	r2, [r3, #0]
    printf("[DEBUG] Load Backup: idx_rad=%u, idx_temp=%u, rad_interval_count=%u\r\n",
 800654e:	b2a1      	uxth	r1, r4
 8006550:	b2c3      	uxtb	r3, r0
    rad_interval_count = (uint8_t)(reg4 & 0xFF);
 8006552:	7028      	strb	r0, [r5, #0]
    printf("[DEBUG] Load Backup: idx_rad=%u, idx_temp=%u, rad_interval_count=%u\r\n",
 8006554:	4823      	ldr	r0, [pc, #140]	@ (80065e4 <Load_Backup_Index+0xb8>)
 8006556:	f013 ff31 	bl	801a3bc <iprintf>
    rad_ratio = current_settings.rad_interval / current_settings.temp_interval;
 800655a:	4b23      	ldr	r3, [pc, #140]	@ (80065e8 <Load_Backup_Index+0xbc>)
 800655c:	4a23      	ldr	r2, [pc, #140]	@ (80065ec <Load_Backup_Index+0xc0>)
 800655e:	0019      	movs	r1, r3
 8006560:	3172      	adds	r1, #114	@ 0x72
 8006562:	7809      	ldrb	r1, [r1, #0]
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	0209      	lsls	r1, r1, #8
 8006568:	4311      	orrs	r1, r2
 800656a:	001a      	movs	r2, r3
 800656c:	3273      	adds	r2, #115	@ 0x73
 800656e:	7812      	ldrb	r2, [r2, #0]
 8006570:	4c1f      	ldr	r4, [pc, #124]	@ (80065f0 <Load_Backup_Index+0xc4>)
 8006572:	0412      	lsls	r2, r2, #16
 8006574:	430a      	orrs	r2, r1
 8006576:	0019      	movs	r1, r3
 8006578:	3174      	adds	r1, #116	@ 0x74
 800657a:	7808      	ldrb	r0, [r1, #0]
 800657c:	0019      	movs	r1, r3
 800657e:	0600      	lsls	r0, r0, #24
 8006580:	4310      	orrs	r0, r2
 8006582:	001a      	movs	r2, r3
 8006584:	3176      	adds	r1, #118	@ 0x76
 8006586:	7809      	ldrb	r1, [r1, #0]
 8006588:	3275      	adds	r2, #117	@ 0x75
 800658a:	7812      	ldrb	r2, [r2, #0]
 800658c:	0209      	lsls	r1, r1, #8
 800658e:	4311      	orrs	r1, r2
 8006590:	001a      	movs	r2, r3
 8006592:	3277      	adds	r2, #119	@ 0x77
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	3378      	adds	r3, #120	@ 0x78
 8006598:	0412      	lsls	r2, r2, #16
 800659a:	430a      	orrs	r2, r1
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	0609      	lsls	r1, r1, #24
 80065a0:	4311      	orrs	r1, r2
 80065a2:	f7f9 fde1 	bl	8000168 <__udivsi3>
 80065a6:	2201      	movs	r2, #1
 80065a8:	b281      	uxth	r1, r0
 80065aa:	1c13      	adds	r3, r2, #0
 80065ac:	428a      	cmp	r2, r1
 80065ae:	d200      	bcs.n	80065b2 <Load_Backup_Index+0x86>
 80065b0:	1c03      	adds	r3, r0, #0
    if (rad_interval_count == 0) {
 80065b2:	7829      	ldrb	r1, [r5, #0]
    rad_ratio = current_settings.rad_interval / current_settings.temp_interval;
 80065b4:	8023      	strh	r3, [r4, #0]
    if (rad_interval_count == 0) {
 80065b6:	4b0f      	ldr	r3, [pc, #60]	@ (80065f4 <Load_Backup_Index+0xc8>)
 80065b8:	2900      	cmp	r1, #0
 80065ba:	d105      	bne.n	80065c8 <Load_Backup_Index+0x9c>
        measure_Rad_flag = 1;                   // 이번 Interval에서 Rad 측정
 80065bc:	2201      	movs	r2, #1
        printf("[DEBUG] Rad + Temp Measurement scheduled\r\n");
 80065be:	480e      	ldr	r0, [pc, #56]	@ (80065f8 <Load_Backup_Index+0xcc>)
        measure_Rad_flag = 1;                   // 이번 Interval에서 Rad 측정
 80065c0:	701a      	strb	r2, [r3, #0]
        printf("[DEBUG] Rad + Temp Measurement scheduled\r\n");
 80065c2:	f013 ff6b 	bl	801a49c <puts>
}
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
        measure_Rad_flag = 0;                   // Rad 측정 없음
 80065c8:	2200      	movs	r2, #0
        printf("[DEBUG] Temp Only (rad_count=%u)\r\n", rad_interval_count);
 80065ca:	480c      	ldr	r0, [pc, #48]	@ (80065fc <Load_Backup_Index+0xd0>)
        measure_Rad_flag = 0;                   // Rad 측정 없음
 80065cc:	701a      	strb	r2, [r3, #0]
        printf("[DEBUG] Temp Only (rad_count=%u)\r\n", rad_interval_count);
 80065ce:	f013 fef5 	bl	801a3bc <iprintf>
}
 80065d2:	e7f8      	b.n	80065c6 <Load_Backup_Index+0x9a>
 80065d4:	200009f8 	.word	0x200009f8
 80065d8:	20000500 	.word	0x20000500
 80065dc:	200004fd 	.word	0x200004fd
 80065e0:	200004fe 	.word	0x200004fe
 80065e4:	0801d475 	.word	0x0801d475
 80065e8:	20002bac 	.word	0x20002bac
 80065ec:	20002c1d 	.word	0x20002c1d
 80065f0:	2000000a 	.word	0x2000000a
 80065f4:	20000502 	.word	0x20000502
 80065f8:	0801d4bb 	.word	0x0801d4bb
 80065fc:	0801d4e5 	.word	0x0801d4e5

08006600 <Load_MarkAndAlarmState_From_Backup>:
{
 8006600:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 8006602:	2106      	movs	r1, #6
{
 8006604:	0004      	movs	r4, r0
 8006606:	b089      	sub	sp, #36	@ 0x24
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 8006608:	4834      	ldr	r0, [pc, #208]	@ (80066dc <Load_MarkAndAlarmState_From_Backup+0xdc>)
 800660a:	f00b feab 	bl	8012364 <HAL_RTCEx_BKUPRead>
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800660e:	b2c3      	uxtb	r3, r0
 8006610:	9307      	str	r3, [sp, #28]
 8006612:	23c0      	movs	r3, #192	@ 0xc0
    cfg->alarm_state = (uint32_t)(val >> 8);  // 16비트 전부 사용
 8006614:	0a01      	lsrs	r1, r0, #8
    cfg->mark = (uint8_t)(val & 0xFF);
 8006616:	7520      	strb	r0, [r4, #20]
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006618:	2080      	movs	r0, #128	@ 0x80
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4a30      	ldr	r2, [pc, #192]	@ (80066e0 <Load_MarkAndAlarmState_From_Backup+0xe0>)
    cfg->alarm_state = (uint32_t)(val >> 8);  // 16비트 전부 사용
 800661e:	61a1      	str	r1, [r4, #24]
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006620:	400b      	ands	r3, r1
 8006622:	0080      	lsls	r0, r0, #2
 8006624:	4283      	cmp	r3, r0
 8006626:	d005      	beq.n	8006634 <Load_MarkAndAlarmState_From_Backup+0x34>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_RH1) == ALARM_ON      ? "ON"  : "OFF",
 8006628:	3801      	subs	r0, #1
 800662a:	38ff      	subs	r0, #255	@ 0xff
 800662c:	4a2d      	ldr	r2, [pc, #180]	@ (80066e4 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 800662e:	4283      	cmp	r3, r0
 8006630:	d100      	bne.n	8006634 <Load_MarkAndAlarmState_From_Backup+0x34>
 8006632:	4a2d      	ldr	r2, [pc, #180]	@ (80066e8 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 8006634:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006636:	2480      	movs	r4, #128	@ 0x80
 8006638:	0100      	lsls	r0, r0, #4
 800663a:	4b29      	ldr	r3, [pc, #164]	@ (80066e0 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 800663c:	4008      	ands	r0, r1
 800663e:	0124      	lsls	r4, r4, #4
 8006640:	42a0      	cmp	r0, r4
 8006642:	d005      	beq.n	8006650 <Load_MarkAndAlarmState_From_Backup+0x50>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_RH2) == ALARM_ON      ? "ON"  : "OFF",
 8006644:	2480      	movs	r4, #128	@ 0x80
 8006646:	4b27      	ldr	r3, [pc, #156]	@ (80066e4 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 8006648:	00e4      	lsls	r4, r4, #3
 800664a:	42a0      	cmp	r0, r4
 800664c:	d100      	bne.n	8006650 <Load_MarkAndAlarmState_From_Backup+0x50>
 800664e:	4b26      	ldr	r3, [pc, #152]	@ (80066e8 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 8006650:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006652:	2580      	movs	r5, #128	@ 0x80
 8006654:	0180      	lsls	r0, r0, #6
 8006656:	4c22      	ldr	r4, [pc, #136]	@ (80066e0 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 8006658:	4008      	ands	r0, r1
 800665a:	01ad      	lsls	r5, r5, #6
 800665c:	42a8      	cmp	r0, r5
 800665e:	d005      	beq.n	800666c <Load_MarkAndAlarmState_From_Backup+0x6c>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TH1) == ALARM_ON      ? "ON"  : "OFF",
 8006660:	2580      	movs	r5, #128	@ 0x80
 8006662:	4c20      	ldr	r4, [pc, #128]	@ (80066e4 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 8006664:	016d      	lsls	r5, r5, #5
 8006666:	42a8      	cmp	r0, r5
 8006668:	d100      	bne.n	800666c <Load_MarkAndAlarmState_From_Backup+0x6c>
 800666a:	4c1f      	ldr	r4, [pc, #124]	@ (80066e8 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 800666c:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800666e:	2680      	movs	r6, #128	@ 0x80
 8006670:	0200      	lsls	r0, r0, #8
 8006672:	4d1b      	ldr	r5, [pc, #108]	@ (80066e0 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 8006674:	4008      	ands	r0, r1
 8006676:	0236      	lsls	r6, r6, #8
 8006678:	42b0      	cmp	r0, r6
 800667a:	d005      	beq.n	8006688 <Load_MarkAndAlarmState_From_Backup+0x88>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TH2) == ALARM_ON      ? "ON"  : "OFF",
 800667c:	2680      	movs	r6, #128	@ 0x80
 800667e:	4d19      	ldr	r5, [pc, #100]	@ (80066e4 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 8006680:	01f6      	lsls	r6, r6, #7
 8006682:	42b0      	cmp	r0, r6
 8006684:	d100      	bne.n	8006688 <Load_MarkAndAlarmState_From_Backup+0x88>
 8006686:	4d18      	ldr	r5, [pc, #96]	@ (80066e8 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 8006688:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800668a:	2780      	movs	r7, #128	@ 0x80
 800668c:	0280      	lsls	r0, r0, #10
 800668e:	4e14      	ldr	r6, [pc, #80]	@ (80066e0 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 8006690:	4008      	ands	r0, r1
 8006692:	02bf      	lsls	r7, r7, #10
 8006694:	42b8      	cmp	r0, r7
 8006696:	d005      	beq.n	80066a4 <Load_MarkAndAlarmState_From_Backup+0xa4>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TL1) == ALARM_ON      ? "ON"  : "OFF",
 8006698:	2780      	movs	r7, #128	@ 0x80
 800669a:	4e12      	ldr	r6, [pc, #72]	@ (80066e4 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 800669c:	027f      	lsls	r7, r7, #9
 800669e:	42b8      	cmp	r0, r7
 80066a0:	d100      	bne.n	80066a4 <Load_MarkAndAlarmState_From_Backup+0xa4>
 80066a2:	4e11      	ldr	r6, [pc, #68]	@ (80066e8 <Load_MarkAndAlarmState_From_Backup+0xe8>)
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 80066a4:	2780      	movs	r7, #128	@ 0x80
 80066a6:	20c0      	movs	r0, #192	@ 0xc0
 80066a8:	033f      	lsls	r7, r7, #12
 80066aa:	46bc      	mov	ip, r7
 80066ac:	0300      	lsls	r0, r0, #12
 80066ae:	4f0c      	ldr	r7, [pc, #48]	@ (80066e0 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 80066b0:	4008      	ands	r0, r1
 80066b2:	4560      	cmp	r0, ip
 80066b4:	d006      	beq.n	80066c4 <Load_MarkAndAlarmState_From_Backup+0xc4>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TL2) == ALARM_ON      ? "ON"  : "OFF",
 80066b6:	2780      	movs	r7, #128	@ 0x80
 80066b8:	02ff      	lsls	r7, r7, #11
 80066ba:	46bc      	mov	ip, r7
 80066bc:	4f09      	ldr	r7, [pc, #36]	@ (80066e4 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 80066be:	4560      	cmp	r0, ip
 80066c0:	d100      	bne.n	80066c4 <Load_MarkAndAlarmState_From_Backup+0xc4>
 80066c2:	4f09      	ldr	r7, [pc, #36]	@ (80066e8 <Load_MarkAndAlarmState_From_Backup+0xe8>)
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 80066c4:	9104      	str	r1, [sp, #16]
 80066c6:	9703      	str	r7, [sp, #12]
 80066c8:	9907      	ldr	r1, [sp, #28]
 80066ca:	9602      	str	r6, [sp, #8]
 80066cc:	9501      	str	r5, [sp, #4]
 80066ce:	9400      	str	r4, [sp, #0]
 80066d0:	4806      	ldr	r0, [pc, #24]	@ (80066ec <Load_MarkAndAlarmState_From_Backup+0xec>)
 80066d2:	f013 fe73 	bl	801a3bc <iprintf>
}
 80066d6:	b009      	add	sp, #36	@ 0x24
 80066d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066da:	46c0      	nop			@ (mov r8, r8)
 80066dc:	200009f8 	.word	0x200009f8
 80066e0:	0801d50c 	.word	0x0801d50c
 80066e4:	0801d508 	.word	0x0801d508
 80066e8:	0801d510 	.word	0x0801d510
 80066ec:	0801d513 	.word	0x0801d513

080066f0 <Load_IntervalInfo_From_Backup>:
{
 80066f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f2:	0004      	movs	r4, r0
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_INTERVAL_INFO);
 80066f4:	2108      	movs	r1, #8
 80066f6:	480f      	ldr	r0, [pc, #60]	@ (8006734 <Load_IntervalInfo_From_Backup+0x44>)
 80066f8:	f00b fe34 	bl	8012364 <HAL_RTCEx_BKUPRead>
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 80066fc:	490e      	ldr	r1, [pc, #56]	@ (8006738 <Load_IntervalInfo_From_Backup+0x48>)
    cfg->interval_time = (uint16_t)(val & 0xFFFF);
 80066fe:	61e0      	str	r0, [r4, #28]
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 8006700:	4c0e      	ldr	r4, [pc, #56]	@ (800673c <Load_IntervalInfo_From_Backup+0x4c>)
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_INTERVAL_INFO);
 8006702:	0005      	movs	r5, r0
    cfg->display_dose = (uint8_t)((val >> 24) & 0xFF);
 8006704:	0e03      	lsrs	r3, r0, #24
    cfg->display_temp = (uint8_t)((val >> 16) & 0xFF);
 8006706:	0c02      	lsrs	r2, r0, #16
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 8006708:	7808      	ldrb	r0, [r1, #0]
 800670a:	0021      	movs	r1, r4
 800670c:	3176      	adds	r1, #118	@ 0x76
 800670e:	7809      	ldrb	r1, [r1, #0]
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	0209      	lsls	r1, r1, #8
 8006714:	4301      	orrs	r1, r0
 8006716:	0020      	movs	r0, r4
 8006718:	3077      	adds	r0, #119	@ 0x77
 800671a:	7800      	ldrb	r0, [r0, #0]
 800671c:	3478      	adds	r4, #120	@ 0x78
 800671e:	0400      	lsls	r0, r0, #16
 8006720:	4308      	orrs	r0, r1
 8006722:	7821      	ldrb	r1, [r4, #0]
 8006724:	9500      	str	r5, [sp, #0]
 8006726:	0609      	lsls	r1, r1, #24
 8006728:	4301      	orrs	r1, r0
 800672a:	4805      	ldr	r0, [pc, #20]	@ (8006740 <Load_IntervalInfo_From_Backup+0x50>)
 800672c:	f013 fe46 	bl	801a3bc <iprintf>
}
 8006730:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	200009f8 	.word	0x200009f8
 8006738:	20002c21 	.word	0x20002c21
 800673c:	20002bac 	.word	0x20002bac
 8006740:	0801d563 	.word	0x0801d563

08006744 <Load_Pre_RAD_Value_From_Backup>:
{
 8006744:	b510      	push	{r4, lr}
    uint32_t value = HAL_RTCEx_BKUPRead(&hrtc, BKP_PRE_RAD_VALUE);
 8006746:	2105      	movs	r1, #5
 8006748:	4805      	ldr	r0, [pc, #20]	@ (8006760 <Load_Pre_RAD_Value_From_Backup+0x1c>)
 800674a:	f00b fe0b 	bl	8012364 <HAL_RTCEx_BKUPRead>
 800674e:	0004      	movs	r4, r0
    printf("[Backup] Load Pre_RAD_Value = %lu (Raw: 0x%08lX)\r\n", value, value);
 8006750:	4804      	ldr	r0, [pc, #16]	@ (8006764 <Load_Pre_RAD_Value_From_Backup+0x20>)
 8006752:	0022      	movs	r2, r4
 8006754:	0021      	movs	r1, r4
 8006756:	f013 fe31 	bl	801a3bc <iprintf>
}
 800675a:	0020      	movs	r0, r4
 800675c:	bd10      	pop	{r4, pc}
 800675e:	46c0      	nop			@ (mov r8, r8)
 8006760:	200009f8 	.word	0x200009f8
 8006764:	0801d5b8 	.word	0x0801d5b8

08006768 <Load_All_Config_From_BackupRegister>:
{
 8006768:	b510      	push	{r4, lr}
 800676a:	0004      	movs	r4, r0
    Load_Temp_From_Backup(cfg);
 800676c:	f7ff feba 	bl	80064e4 <Load_Temp_From_Backup>
    Load_Dose_From_Backup(cfg);
 8006770:	0020      	movs	r0, r4
 8006772:	f7ff fec9 	bl	8006508 <Load_Dose_From_Backup>
    Load_Backup_Index();
 8006776:	f7ff fed9 	bl	800652c <Load_Backup_Index>
    Load_MarkAndAlarmState_From_Backup(cfg);
 800677a:	0020      	movs	r0, r4
 800677c:	f7ff ff40 	bl	8006600 <Load_MarkAndAlarmState_From_Backup>
    Load_IntervalInfo_From_Backup(cfg);
 8006780:	0020      	movs	r0, r4
 8006782:	f7ff ffb5 	bl	80066f0 <Load_IntervalInfo_From_Backup>
    Index_num = Load_IndexNum_From_Backup();
 8006786:	f7ff fea3 	bl	80064d0 <Load_IndexNum_From_Backup>
 800678a:	4b01      	ldr	r3, [pc, #4]	@ (8006790 <Load_All_Config_From_BackupRegister+0x28>)
 800678c:	8018      	strh	r0, [r3, #0]
}
 800678e:	bd10      	pop	{r4, pc}
 8006790:	2000004c 	.word	0x2000004c

08006794 <Update_TempDose_MinMax>:
{
 8006794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006796:	000e      	movs	r6, r1
    int16_t new_temp = (int16_t)(temp_avg * 10);
 8006798:	492f      	ldr	r1, [pc, #188]	@ (8006858 <Update_TempDose_MinMax+0xc4>)
{
 800679a:	0014      	movs	r4, r2
 800679c:	9001      	str	r0, [sp, #4]
    int16_t new_temp = (int16_t)(temp_avg * 10);
 800679e:	f7fa fbd1 	bl	8000f44 <__aeabi_fmul>
 80067a2:	f7fa ffa3 	bl	80016ec <__aeabi_f2iz>
    printf("[Backup][Prev] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 80067a6:	2302      	movs	r3, #2
 80067a8:	5ee2      	ldrsh	r2, [r4, r3]
 80067aa:	2300      	movs	r3, #0
 80067ac:	5ee1      	ldrsh	r1, [r4, r3]
    int16_t new_temp = (int16_t)(temp_avg * 10);
 80067ae:	b205      	sxth	r5, r0
    printf("[Backup][Prev] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	482a      	ldr	r0, [pc, #168]	@ (800685c <Update_TempDose_MinMax+0xc8>)
 80067b4:	f013 fe02 	bl	801a3bc <iprintf>
    printf("[Backup][New Input] Temp:%d Dose:%u\n", new_temp, new_dose);
 80067b8:	0029      	movs	r1, r5
 80067ba:	0032      	movs	r2, r6
 80067bc:	4828      	ldr	r0, [pc, #160]	@ (8006860 <Update_TempDose_MinMax+0xcc>)
 80067be:	f013 fdfd 	bl	801a3bc <iprintf>
    if (cfg->temp_max == INT16_MIN || cfg->temp_min == INT16_MAX || cfg->dose_max == 0xFFFFFFFF) {
 80067c2:	2300      	movs	r3, #0
 80067c4:	5ee1      	ldrsh	r1, [r4, r3]
 80067c6:	4b27      	ldr	r3, [pc, #156]	@ (8006864 <Update_TempDose_MinMax+0xd0>)
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d007      	beq.n	80067dc <Update_TempDose_MinMax+0x48>
 80067cc:	4b26      	ldr	r3, [pc, #152]	@ (8006868 <Update_TempDose_MinMax+0xd4>)
 80067ce:	2002      	movs	r0, #2
 80067d0:	5e22      	ldrsh	r2, [r4, r0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d002      	beq.n	80067dc <Update_TempDose_MinMax+0x48>
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	3301      	adds	r3, #1
 80067da:	d103      	bne.n	80067e4 <Update_TempDose_MinMax+0x50>
        cfg->temp_max = new_temp;
 80067dc:	8025      	strh	r5, [r4, #0]
        cfg->temp_min = new_temp;
 80067de:	8065      	strh	r5, [r4, #2]
            cfg->dose_max = new_dose;
 80067e0:	6066      	str	r6, [r4, #4]
    if (update) {
 80067e2:	e017      	b.n	8006814 <Update_TempDose_MinMax+0x80>
    bool update = false;
 80067e4:	2700      	movs	r7, #0
        if (new_temp >= cfg->temp_max) {
 80067e6:	42a9      	cmp	r1, r5
 80067e8:	dc05      	bgt.n	80067f6 <Update_TempDose_MinMax+0x62>
            printf("  [Update] temp_max: %d -> %d\n", cfg->temp_max, new_temp);
 80067ea:	002a      	movs	r2, r5
 80067ec:	481f      	ldr	r0, [pc, #124]	@ (800686c <Update_TempDose_MinMax+0xd8>)
 80067ee:	f013 fde5 	bl	801a3bc <iprintf>
            update = true;
 80067f2:	3701      	adds	r7, #1
            cfg->temp_max = new_temp;
 80067f4:	8025      	strh	r5, [r4, #0]
        if (new_temp < cfg->temp_min) {
 80067f6:	2302      	movs	r3, #2
 80067f8:	5ee1      	ldrsh	r1, [r4, r3]
 80067fa:	42a9      	cmp	r1, r5
 80067fc:	dd19      	ble.n	8006832 <Update_TempDose_MinMax+0x9e>
            printf("  [Update] temp_min: %d -> %d\n", cfg->temp_min, new_temp);
 80067fe:	002a      	movs	r2, r5
 8006800:	481b      	ldr	r0, [pc, #108]	@ (8006870 <Update_TempDose_MinMax+0xdc>)
 8006802:	f013 fddb 	bl	801a3bc <iprintf>
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 8006806:	491b      	ldr	r1, [pc, #108]	@ (8006874 <Update_TempDose_MinMax+0xe0>)
 8006808:	9801      	ldr	r0, [sp, #4]
            cfg->temp_min = new_temp;
 800680a:	8065      	strh	r5, [r4, #2]
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 800680c:	f7f9 fe7c 	bl	8000508 <__aeabi_fcmple>
 8006810:	2800      	cmp	r0, #0
 8006812:	d117      	bne.n	8006844 <Update_TempDose_MinMax+0xb0>
        Save_Temp_To_Backup(cfg);
 8006814:	0020      	movs	r0, r4
 8006816:	f7ff fd7b 	bl	8006310 <Save_Temp_To_Backup>
        Save_Dose_To_Backup(cfg);
 800681a:	0020      	movs	r0, r4
 800681c:	f7ff fd66 	bl	80062ec <Save_Dose_To_Backup>
        printf("[Backup][Updated] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 8006820:	2302      	movs	r3, #2
 8006822:	5ee2      	ldrsh	r2, [r4, r3]
 8006824:	2300      	movs	r3, #0
 8006826:	5ee1      	ldrsh	r1, [r4, r3]
 8006828:	4813      	ldr	r0, [pc, #76]	@ (8006878 <Update_TempDose_MinMax+0xe4>)
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	f013 fdc6 	bl	801a3bc <iprintf>
}
 8006830:	e007      	b.n	8006842 <Update_TempDose_MinMax+0xae>
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 8006832:	4910      	ldr	r1, [pc, #64]	@ (8006874 <Update_TempDose_MinMax+0xe0>)
 8006834:	9801      	ldr	r0, [sp, #4]
 8006836:	f7f9 fe67 	bl	8000508 <__aeabi_fcmple>
 800683a:	2800      	cmp	r0, #0
 800683c:	d103      	bne.n	8006846 <Update_TempDose_MinMax+0xb2>
    if (update) {
 800683e:	2f00      	cmp	r7, #0
 8006840:	d1e8      	bne.n	8006814 <Update_TempDose_MinMax+0x80>
}
 8006842:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            update = true;
 8006844:	2701      	movs	r7, #1
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 8006846:	6861      	ldr	r1, [r4, #4]
 8006848:	42b1      	cmp	r1, r6
 800684a:	d2f8      	bcs.n	800683e <Update_TempDose_MinMax+0xaa>
            printf("  [Update] dose_max: %u -> %u\n", cfg->dose_max, new_dose);
 800684c:	0032      	movs	r2, r6
 800684e:	480b      	ldr	r0, [pc, #44]	@ (800687c <Update_TempDose_MinMax+0xe8>)
 8006850:	f013 fdb4 	bl	801a3bc <iprintf>
 8006854:	e7c4      	b.n	80067e0 <Update_TempDose_MinMax+0x4c>
 8006856:	46c0      	nop			@ (mov r8, r8)
 8006858:	41200000 	.word	0x41200000
 800685c:	0801d5eb 	.word	0x0801d5eb
 8006860:	0801d613 	.word	0x0801d613
 8006864:	ffff8000 	.word	0xffff8000
 8006868:	00007fff 	.word	0x00007fff
 800686c:	0801d638 	.word	0x0801d638
 8006870:	0801d657 	.word	0x0801d657
 8006874:	42480000 	.word	0x42480000
 8006878:	0801d695 	.word	0x0801d695
 800687c:	0801d676 	.word	0x0801d676

08006880 <Set_Wakeup_After_Delay>:
{
 8006880:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 8006882:	240a      	movs	r4, #10
 8006884:	230f      	movs	r3, #15
{
 8006886:	0005      	movs	r5, r0
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 8006888:	78d0      	ldrb	r0, [r2, #3]
{
 800688a:	b08b      	sub	sp, #44	@ 0x2c
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 800688c:	0906      	lsrs	r6, r0, #4
 800688e:	4366      	muls	r6, r4
 8006890:	4018      	ands	r0, r3
 8006892:	1980      	adds	r0, r0, r6
 8006894:	9006      	str	r0, [sp, #24]
    uint8_t  mon   = (uint8_t) BCD2BIN(sDate_bcd->Month);
 8006896:	7856      	ldrb	r6, [r2, #1]
 8006898:	0930      	lsrs	r0, r6, #4
 800689a:	4360      	muls	r0, r4
 800689c:	401e      	ands	r6, r3
 800689e:	1980      	adds	r0, r0, r6
 80068a0:	b2c0      	uxtb	r0, r0
 80068a2:	9007      	str	r0, [sp, #28]
    uint8_t  day   = (uint8_t) BCD2BIN(sDate_bcd->Date);
 80068a4:	7890      	ldrb	r0, [r2, #2]
 80068a6:	0902      	lsrs	r2, r0, #4
 80068a8:	4362      	muls	r2, r4
 80068aa:	4018      	ands	r0, r3
 80068ac:	1812      	adds	r2, r2, r0
    uint8_t  hh    = (uint8_t) BCD2BIN(sTime_bcd->Hours);
 80068ae:	7808      	ldrb	r0, [r1, #0]
    uint8_t  day   = (uint8_t) BCD2BIN(sDate_bcd->Date);
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	9208      	str	r2, [sp, #32]
    uint8_t  hh    = (uint8_t) BCD2BIN(sTime_bcd->Hours);
 80068b4:	0902      	lsrs	r2, r0, #4
 80068b6:	4362      	muls	r2, r4
 80068b8:	4018      	ands	r0, r3
 80068ba:	1812      	adds	r2, r2, r0
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	9209      	str	r2, [sp, #36]	@ 0x24
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 80068c0:	784a      	ldrb	r2, [r1, #1]
    uint32_t now_epoch = ymd_to_epoch(y2000, mon, day, hh, mm, ss);
 80068c2:	9806      	ldr	r0, [sp, #24]
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 80068c4:	0916      	lsrs	r6, r2, #4
 80068c6:	4366      	muls	r6, r4
 80068c8:	401a      	ands	r2, r3
 80068ca:	18b6      	adds	r6, r6, r2
    uint8_t  ss    = (uint8_t) BCD2BIN(sTime_bcd->Seconds);
 80068cc:	788a      	ldrb	r2, [r1, #2]
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 80068ce:	b2f6      	uxtb	r6, r6
    uint8_t  ss    = (uint8_t) BCD2BIN(sTime_bcd->Seconds);
 80068d0:	0911      	lsrs	r1, r2, #4
 80068d2:	434c      	muls	r4, r1
 80068d4:	401a      	ands	r2, r3
 80068d6:	18a4      	adds	r4, r4, r2
 80068d8:	b2e4      	uxtb	r4, r4
    uint32_t now_epoch = ymd_to_epoch(y2000, mon, day, hh, mm, ss);
 80068da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068dc:	9a08      	ldr	r2, [sp, #32]
 80068de:	9907      	ldr	r1, [sp, #28]
 80068e0:	9401      	str	r4, [sp, #4]
 80068e2:	9600      	str	r6, [sp, #0]
 80068e4:	f003 f8e2 	bl	8009aac <ymd_to_epoch>
    if (delay_sec > max_delay) delay_sec = max_delay;
 80068e8:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <Set_Wakeup_After_Delay+0xb0>)
 80068ea:	429d      	cmp	r5, r3
 80068ec:	d91b      	bls.n	8006926 <Set_Wakeup_After_Delay+0xa6>
 80068ee:	001d      	movs	r5, r3
    uint32_t target_epoch = now_epoch + delay_sec;
 80068f0:	182f      	adds	r7, r5, r0
    Save_WakeupTime_To_Backup(target_epoch);
 80068f2:	0038      	movs	r0, r7
 80068f4:	f7ff fdac 	bl	8006450 <Save_WakeupTime_To_Backup>
    RTC_Disable_All_Wakeup();
 80068f8:	f7fe ffbe 	bl	8005878 <RTC_Disable_All_Wakeup>
    RTC_SetAlarmA_SecondsFromNow(delay_sec);
 80068fc:	0028      	movs	r0, r5
 80068fe:	f7fe ffe5 	bl	80058cc <RTC_SetAlarmA_SecondsFromNow>
    printf("[Delay] now=%04u-%02u-%02u %02u:%02u:%02u, after=%lu s → target(epoch)=%lu\r\n",
 8006902:	23fa      	movs	r3, #250	@ 0xfa
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	469c      	mov	ip, r3
 8006908:	9906      	ldr	r1, [sp, #24]
 800690a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690c:	9a07      	ldr	r2, [sp, #28]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4461      	add	r1, ip
 8006912:	9b08      	ldr	r3, [sp, #32]
 8006914:	9704      	str	r7, [sp, #16]
 8006916:	9503      	str	r5, [sp, #12]
 8006918:	9402      	str	r4, [sp, #8]
 800691a:	9601      	str	r6, [sp, #4]
 800691c:	4805      	ldr	r0, [pc, #20]	@ (8006934 <Set_Wakeup_After_Delay+0xb4>)
 800691e:	f013 fd4d 	bl	801a3bc <iprintf>
}
 8006922:	b00b      	add	sp, #44	@ 0x2c
 8006924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006926:	2d00      	cmp	r5, #0
 8006928:	d1e2      	bne.n	80068f0 <Set_Wakeup_After_Delay+0x70>
 800692a:	3501      	adds	r5, #1
 800692c:	e7e0      	b.n	80068f0 <Set_Wakeup_After_Delay+0x70>
 800692e:	46c0      	nop			@ (mov r8, r8)
 8006930:	0028de80 	.word	0x0028de80
 8006934:	0801d6c0 	.word	0x0801d6c0

08006938 <Write_buffer>:
void Write_buffer(void){
 8006938:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800693a:	4c4f      	ldr	r4, [pc, #316]	@ (8006a78 <Write_buffer+0x140>)
void Write_buffer(void){
 800693c:	b08f      	sub	sp, #60	@ 0x3c
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800693e:	2201      	movs	r2, #1
 8006940:	0020      	movs	r0, r4
 8006942:	a903      	add	r1, sp, #12
 8006944:	f00b fc48 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8006948:	2201      	movs	r2, #1
 800694a:	0020      	movs	r0, r4
 800694c:	a902      	add	r1, sp, #8
 800694e:	f00b fc75 	bl	801223c <HAL_RTC_GetDate>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK); // Mark 값 넣기
 8006952:	2106      	movs	r1, #6
 8006954:	0020      	movs	r0, r4
 8006956:	f00b fd05 	bl	8012364 <HAL_RTCEx_BKUPRead>
    device_config.mark = (uint8_t)(val & 0xFF);
 800695a:	4b48      	ldr	r3, [pc, #288]	@ (8006a7c <Write_buffer+0x144>)
    if (Display_temperature > 50.0f) {
 800695c:	4948      	ldr	r1, [pc, #288]	@ (8006a80 <Write_buffer+0x148>)
    device_config.mark = (uint8_t)(val & 0xFF);
 800695e:	7518      	strb	r0, [r3, #20]
    uint8_t rad_mark = measure_Rad_flag;
 8006960:	4b48      	ldr	r3, [pc, #288]	@ (8006a84 <Write_buffer+0x14c>)
 8006962:	781d      	ldrb	r5, [r3, #0]
    if (Display_temperature > 50.0f) {
 8006964:	4b48      	ldr	r3, [pc, #288]	@ (8006a88 <Write_buffer+0x150>)
    uint8_t rad_mark = measure_Rad_flag;
 8006966:	b2ed      	uxtb	r5, r5
    if (Display_temperature > 50.0f) {
 8006968:	681e      	ldr	r6, [r3, #0]
 800696a:	1c30      	adds	r0, r6, #0
 800696c:	f7f9 fdd6 	bl	800051c <__aeabi_fcmpgt>
 8006970:	4c46      	ldr	r4, [pc, #280]	@ (8006a8c <Write_buffer+0x154>)
 8006972:	2800      	cmp	r0, #0
 8006974:	d100      	bne.n	8006978 <Write_buffer+0x40>
 8006976:	e078      	b.n	8006a6a <Write_buffer+0x132>
        printf("[RadMark] 온도 %.2f℃ > 50 → rad_measure_mark = 0 (무효 처리)\r\n", Display_temperature);
 8006978:	1c30      	adds	r0, r6, #0
 800697a:	f7fc ff0d 	bl	8003798 <__aeabi_f2d>
 800697e:	0002      	movs	r2, r0
 8006980:	000b      	movs	r3, r1
 8006982:	4843      	ldr	r0, [pc, #268]	@ (8006a90 <Write_buffer+0x158>)
 8006984:	f013 fd1a 	bl	801a3bc <iprintf>
    	dose_log = Load_Pre_RAD_Value_From_Backup();
 8006988:	f7ff fedc 	bl	8006744 <Load_Pre_RAD_Value_From_Backup>
 800698c:	2500      	movs	r5, #0
 800698e:	6020      	str	r0, [r4, #0]
    log_entry_t entry = {
 8006990:	4f40      	ldr	r7, [pc, #256]	@ (8006a94 <Write_buffer+0x15c>)
 8006992:	ac08      	add	r4, sp, #32
 8006994:	883b      	ldrh	r3, [r7, #0]
        .year              = BCD2BIN(sDate.Year),
 8006996:	220f      	movs	r2, #15
    log_entry_t entry = {
 8006998:	8023      	strh	r3, [r4, #0]
        .year              = BCD2BIN(sDate.Year),
 800699a:	ab02      	add	r3, sp, #8
 800699c:	78d8      	ldrb	r0, [r3, #3]
 800699e:	230a      	movs	r3, #10
 80069a0:	0901      	lsrs	r1, r0, #4
 80069a2:	4359      	muls	r1, r3
 80069a4:	4010      	ands	r0, r2
 80069a6:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80069a8:	70a1      	strb	r1, [r4, #2]
        .month             = BCD2BIN(sDate.Month),
 80069aa:	a902      	add	r1, sp, #8
 80069ac:	7848      	ldrb	r0, [r1, #1]
        .hour              = BCD2BIN(sTime.Hours),
 80069ae:	ae03      	add	r6, sp, #12
        .month             = BCD2BIN(sDate.Month),
 80069b0:	0901      	lsrs	r1, r0, #4
 80069b2:	4359      	muls	r1, r3
 80069b4:	4010      	ands	r0, r2
 80069b6:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80069b8:	70e1      	strb	r1, [r4, #3]
        .day               = BCD2BIN(sDate.Date),
 80069ba:	a902      	add	r1, sp, #8
 80069bc:	7888      	ldrb	r0, [r1, #2]
 80069be:	0901      	lsrs	r1, r0, #4
 80069c0:	4359      	muls	r1, r3
 80069c2:	4010      	ands	r0, r2
 80069c4:	1809      	adds	r1, r1, r0
        .hour              = BCD2BIN(sTime.Hours),
 80069c6:	7830      	ldrb	r0, [r6, #0]
    log_entry_t entry = {
 80069c8:	7121      	strb	r1, [r4, #4]
        .hour              = BCD2BIN(sTime.Hours),
 80069ca:	0901      	lsrs	r1, r0, #4
 80069cc:	4359      	muls	r1, r3
 80069ce:	4010      	ands	r0, r2
 80069d0:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80069d2:	7161      	strb	r1, [r4, #5]
        .minute            = BCD2BIN(sTime.Minutes),
 80069d4:	7870      	ldrb	r0, [r6, #1]
 80069d6:	0901      	lsrs	r1, r0, #4
 80069d8:	4359      	muls	r1, r3
 80069da:	4010      	ands	r0, r2
 80069dc:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80069de:	71a1      	strb	r1, [r4, #6]
        .second            = BCD2BIN(sTime.Seconds),
 80069e0:	78b1      	ldrb	r1, [r6, #2]
 80069e2:	0908      	lsrs	r0, r1, #4
 80069e4:	4343      	muls	r3, r0
 80069e6:	4011      	ands	r1, r2
 80069e8:	185b      	adds	r3, r3, r1
    log_entry_t entry = {
 80069ea:	71e3      	strb	r3, [r4, #7]
 80069ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006a98 <Write_buffer+0x160>)
        .temperature       = Display_temperature * 10,   // 예: 39.5℃ → 395
 80069ee:	492b      	ldr	r1, [pc, #172]	@ (8006a9c <Write_buffer+0x164>)
    log_entry_t entry = {
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	8123      	strh	r3, [r4, #8]
        .temperature       = Display_temperature * 10,   // 예: 39.5℃ → 395
 80069f4:	4b24      	ldr	r3, [pc, #144]	@ (8006a88 <Write_buffer+0x150>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f7fa faa4 	bl	8000f44 <__aeabi_fmul>
    log_entry_t entry = {
 80069fc:	f7fa fe76 	bl	80016ec <__aeabi_f2iz>
 8006a00:	4b22      	ldr	r3, [pc, #136]	@ (8006a8c <Write_buffer+0x154>)
 8006a02:	8160      	strh	r0, [r4, #10]
 8006a04:	681b      	ldr	r3, [r3, #0]
    meas_data_log_write_entry(&entry);
 8006a06:	0020      	movs	r0, r4
    log_entry_t entry = {
 8006a08:	930b      	str	r3, [sp, #44]	@ 0x2c
        .mark              = device_config.mark,
 8006a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a7c <Write_buffer+0x144>)
 8006a0c:	9301      	str	r3, [sp, #4]
    log_entry_t entry = {
 8006a0e:	7d1b      	ldrb	r3, [r3, #20]
 8006a10:	7465      	strb	r5, [r4, #17]
 8006a12:	2500      	movs	r5, #0
 8006a14:	7423      	strb	r3, [r4, #16]
 8006a16:	4b22      	ldr	r3, [pc, #136]	@ (8006aa0 <Write_buffer+0x168>)
 8006a18:	8265      	strh	r5, [r4, #18]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	7523      	strb	r3, [r4, #20]
    meas_data_log_write_entry(&entry);
 8006a1e:	f001 ff5f 	bl	80088e0 <meas_data_log_write_entry>
    meas_data_log_read_last();
 8006a22:	f001 ff87 	bl	8008934 <meas_data_log_read_last>
    Set_Wakeup_After_Delay(current_settings.temp_interval, &sTime, &sDate);
 8006a26:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa4 <Write_buffer+0x16c>)
 8006a28:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa8 <Write_buffer+0x170>)
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	3176      	adds	r1, #118	@ 0x76
 8006a2e:	7809      	ldrb	r1, [r1, #0]
 8006a30:	7812      	ldrb	r2, [r2, #0]
 8006a32:	0209      	lsls	r1, r1, #8
 8006a34:	4311      	orrs	r1, r2
 8006a36:	001a      	movs	r2, r3
 8006a38:	3277      	adds	r2, #119	@ 0x77
 8006a3a:	3378      	adds	r3, #120	@ 0x78
 8006a3c:	7812      	ldrb	r2, [r2, #0]
 8006a3e:	7818      	ldrb	r0, [r3, #0]
 8006a40:	0412      	lsls	r2, r2, #16
 8006a42:	430a      	orrs	r2, r1
 8006a44:	0600      	lsls	r0, r0, #24
 8006a46:	0031      	movs	r1, r6
 8006a48:	4310      	orrs	r0, r2
 8006a4a:	aa02      	add	r2, sp, #8
 8006a4c:	f7ff ff18 	bl	8006880 <Set_Wakeup_After_Delay>
    Index_num++;
 8006a50:	8838      	ldrh	r0, [r7, #0]
 8006a52:	3001      	adds	r0, #1
 8006a54:	b280      	uxth	r0, r0
 8006a56:	8038      	strh	r0, [r7, #0]
    Save_IndexNum_To_Backup(Index_num);
 8006a58:	f7ff fc34 	bl	80062c4 <Save_IndexNum_To_Backup>
    cfg->mark = mark_value;
 8006a5c:	9b01      	ldr	r3, [sp, #4]
    Save_Mark_To_Backup(cfg->mark);
 8006a5e:	0028      	movs	r0, r5
    cfg->mark = mark_value;
 8006a60:	751d      	strb	r5, [r3, #20]
    Save_Mark_To_Backup(cfg->mark);
 8006a62:	f7ff fcd9 	bl	8006418 <Save_Mark_To_Backup>
}
 8006a66:	b00f      	add	sp, #60	@ 0x3c
 8006a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!rad_mark){
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	d100      	bne.n	8006a70 <Write_buffer+0x138>
 8006a6e:	e78b      	b.n	8006988 <Write_buffer+0x50>
    	Save_Pre_RAD_Value_To_Backup(dose_log);
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	f7ff fd0b 	bl	800648c <Save_Pre_RAD_Value_To_Backup>
 8006a76:	e78b      	b.n	8006990 <Write_buffer+0x58>
 8006a78:	200009f8 	.word	0x200009f8
 8006a7c:	20000b50 	.word	0x20000b50
 8006a80:	42480000 	.word	0x42480000
 8006a84:	20000502 	.word	0x20000502
 8006a88:	20000544 	.word	0x20000544
 8006a8c:	20000530 	.word	0x20000530
 8006a90:	0801d70f 	.word	0x0801d70f
 8006a94:	2000004c 	.word	0x2000004c
 8006a98:	2000055c 	.word	0x2000055c
 8006a9c:	41200000 	.word	0x41200000
 8006aa0:	0801f5e0 	.word	0x0801f5e0
 8006aa4:	20002bac 	.word	0x20002bac
 8006aa8:	20002c21 	.word	0x20002c21

08006aac <Reset_All_Backup_Registers>:
{
 8006aac:	b570      	push	{r4, r5, r6, lr}
    HAL_PWR_EnableBkUpAccess();
 8006aae:	f00a f8f7 	bl	8010ca0 <HAL_PWR_EnableBkUpAccess>
    Set_ModeStatus(mode_internal_backup_stop);
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f003 fa9a 	bl	8009fec <Set_ModeStatus>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX,        0x00000000);
 8006ab8:	2200      	movs	r2, #0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME,     0xFFFFFFFF);
 8006aba:	2501      	movs	r5, #1
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX,        0x00000000);
 8006abc:	4c39      	ldr	r4, [pc, #228]	@ (8006ba4 <Reset_All_Backup_Registers+0xf8>)
 8006abe:	0011      	movs	r1, r2
 8006ac0:	0020      	movs	r0, r4
 8006ac2:	f00b fc47 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG,        0x00000000);
 8006ac6:	0020      	movs	r0, r4
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2101      	movs	r1, #1
 8006acc:	f00b fc42 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_TEMP_MIN_MAX,    0x00000000);
 8006ad0:	0020      	movs	r0, r4
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	f00b fc3d 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG,         0x00000000);
 8006ada:	0020      	movs	r0, r4
 8006adc:	2200      	movs	r2, #0
 8006ade:	2103      	movs	r1, #3
 8006ae0:	f00b fc38 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG,       0x00000000);
 8006ae4:	0020      	movs	r0, r4
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2104      	movs	r1, #4
 8006aea:	f00b fc33 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME,     0xFFFFFFFF);
 8006aee:	426d      	negs	r5, r5
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK,            0x00000000);
 8006af0:	0020      	movs	r0, r4
 8006af2:	2200      	movs	r2, #0
 8006af4:	2106      	movs	r1, #6
 8006af6:	f00b fc2d 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME,     0xFFFFFFFF);
 8006afa:	002a      	movs	r2, r5
 8006afc:	0020      	movs	r0, r4
 8006afe:	2107      	movs	r1, #7
 8006b00:	f00b fc28 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_INTERVAL_INFO,   0x00000000);
 8006b04:	0020      	movs	r0, r4
 8006b06:	2200      	movs	r2, #0
 8006b08:	2108      	movs	r1, #8
 8006b0a:	f00b fc23 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE,   0x00000000);
 8006b0e:	0020      	movs	r0, r4
    device_config.mark = 0;
 8006b10:	2400      	movs	r4, #0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE,   0x00000000);
 8006b12:	2105      	movs	r1, #5
 8006b14:	2200      	movs	r2, #0
 8006b16:	f00b fc1d 	bl	8012354 <HAL_RTCEx_BKUPWrite>
    device_config.temp_max = INT16_MIN;
 8006b1a:	4823      	ldr	r0, [pc, #140]	@ (8006ba8 <Reset_All_Backup_Registers+0xfc>)
 8006b1c:	4b23      	ldr	r3, [pc, #140]	@ (8006bac <Reset_All_Backup_Registers+0x100>)
    device_config.dose_max = 0xFFFFFFFF;
 8006b1e:	6045      	str	r5, [r0, #4]
    device_config.temp_max = INT16_MIN;
 8006b20:	6003      	str	r3, [r0, #0]
    device_config.mark = 0;
 8006b22:	7504      	strb	r4, [r0, #20]
    device_config.alarm_state = 0;
 8006b24:	6184      	str	r4, [r0, #24]
    Save_All_Config_To_BackupRegister(&device_config);
 8006b26:	f7ff fcc5 	bl	80064b4 <Save_All_Config_To_BackupRegister>
    Switch_Backup_reg(MODE_Boot);
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	f7ff fae6 	bl	80060fc <Switch_Backup_reg>
    idx_rad = 0;
 8006b30:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb0 <Reset_All_Backup_Registers+0x104>)
    current_settings.start_mode = 0x00;
 8006b32:	4a20      	ldr	r2, [pc, #128]	@ (8006bb4 <Reset_All_Backup_Registers+0x108>)
    idx_rad = 0;
 8006b34:	801c      	strh	r4, [r3, #0]
    idx_temp = 0;
 8006b36:	4b20      	ldr	r3, [pc, #128]	@ (8006bb8 <Reset_All_Backup_Registers+0x10c>)
    current_settings.start_mode = 0x00;
 8006b38:	7014      	strb	r4, [r2, #0]
    idx_temp = 0;
 8006b3a:	801c      	strh	r4, [r3, #0]
    current_settings.start_mode = 0x00;
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bbc <Reset_All_Backup_Registers+0x110>)
    current_settings.start_time_info = 0x00;
 8006b3e:	001a      	movs	r2, r3
 8006b40:	326c      	adds	r2, #108	@ 0x6c
 8006b42:	7014      	strb	r4, [r2, #0]
 8006b44:	001a      	movs	r2, r3
 8006b46:	326d      	adds	r2, #109	@ 0x6d
 8006b48:	7014      	strb	r4, [r2, #0]
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	326e      	adds	r2, #110	@ 0x6e
 8006b4e:	7014      	strb	r4, [r2, #0]
 8006b50:	001a      	movs	r2, r3
 8006b52:	326f      	adds	r2, #111	@ 0x6f
 8006b54:	7014      	strb	r4, [r2, #0]
    current_settings.start_target_seconds = 0x00;  // start_delay 적용된 RTC 기준 초 시각
 8006b56:	001a      	movs	r2, r3
 8006b58:	32a1      	adds	r2, #161	@ 0xa1
 8006b5a:	7014      	strb	r4, [r2, #0]
 8006b5c:	7054      	strb	r4, [r2, #1]
 8006b5e:	7094      	strb	r4, [r2, #2]
 8006b60:	70d4      	strb	r4, [r2, #3]
    current_settings.start_reservation_time= 0x00;
 8006b62:	001a      	movs	r2, r3
 8006b64:	32a5      	adds	r2, #165	@ 0xa5
 8006b66:	7014      	strb	r4, [r2, #0]
 8006b68:	7054      	strb	r4, [r2, #1]
 8006b6a:	7094      	strb	r4, [r2, #2]
 8006b6c:	70d4      	strb	r4, [r2, #3]
    current_settings.interval_duration_day= 0x00;
 8006b6e:	001a      	movs	r2, r3
 8006b70:	32a9      	adds	r2, #169	@ 0xa9
 8006b72:	7014      	strb	r4, [r2, #0]
 8006b74:	7054      	strb	r4, [r2, #1]
    current_settings.end_target_seconds= 0x00;
 8006b76:	001a      	movs	r2, r3
 8006b78:	32ab      	adds	r2, #171	@ 0xab
 8006b7a:	7014      	strb	r4, [r2, #0]
 8006b7c:	7054      	strb	r4, [r2, #1]
 8006b7e:	7094      	strb	r4, [r2, #2]
 8006b80:	70d4      	strb	r4, [r2, #3]
    current_settings.start_time_info_for_alarm = 0x00;
 8006b82:	001a      	movs	r2, r3
 8006b84:	3268      	adds	r2, #104	@ 0x68
 8006b86:	7014      	strb	r4, [r2, #0]
 8006b88:	001a      	movs	r2, r3
 8006b8a:	3269      	adds	r2, #105	@ 0x69
 8006b8c:	7014      	strb	r4, [r2, #0]
 8006b8e:	001a      	movs	r2, r3
 8006b90:	336b      	adds	r3, #107	@ 0x6b
 8006b92:	326a      	adds	r2, #106	@ 0x6a
 8006b94:	7014      	strb	r4, [r2, #0]
 8006b96:	701c      	strb	r4, [r3, #0]
    Save_CurrentSettings();
 8006b98:	f003 f840 	bl	8009c1c <Save_CurrentSettings>
    printf("[RTC] All Backup Registers RESET (0x00000000)\r\n");
 8006b9c:	4808      	ldr	r0, [pc, #32]	@ (8006bc0 <Reset_All_Backup_Registers+0x114>)
 8006b9e:	f013 fc7d 	bl	801a49c <puts>
}
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	200009f8 	.word	0x200009f8
 8006ba8:	20000b50 	.word	0x20000b50
 8006bac:	7fff8000 	.word	0x7fff8000
 8006bb0:	20000500 	.word	0x20000500
 8006bb4:	20002c0f 	.word	0x20002c0f
 8006bb8:	200004fe 	.word	0x200004fe
 8006bbc:	20002bac 	.word	0x20002bac
 8006bc0:	0801d758 	.word	0x0801d758

08006bc4 <Press_Action>:
void Press_Action(void){
 8006bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(button_flag){
 8006bc6:	4d93      	ldr	r5, [pc, #588]	@ (8006e14 <Press_Action+0x250>)
 8006bc8:	782b      	ldrb	r3, [r5, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d022      	beq.n	8006c14 <Press_Action+0x50>
        if (button_press_count == 2) {
 8006bce:	4e92      	ldr	r6, [pc, #584]	@ (8006e18 <Press_Action+0x254>)
 8006bd0:	4a92      	ldr	r2, [pc, #584]	@ (8006e1c <Press_Action+0x258>)
 8006bd2:	7833      	ldrb	r3, [r6, #0]
 8006bd4:	4c92      	ldr	r4, [pc, #584]	@ (8006e20 <Press_Action+0x25c>)
 8006bd6:	b2df      	uxtb	r7, r3
 8006bd8:	9200      	str	r2, [sp, #0]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d124      	bne.n	8006c28 <Press_Action+0x64>
            printf("Double Click!\r\n");
 8006bde:	4891      	ldr	r0, [pc, #580]	@ (8006e24 <Press_Action+0x260>)
 8006be0:	f013 fc5c 	bl	801a49c <puts>
        	if (Meas_Mode == 2 || Meas_Mode == 4 || Meas_Mode == 3){
 8006be4:	9b00      	ldr	r3, [sp, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	1e9a      	subs	r2, r3, #2
 8006bea:	2a02      	cmp	r2, #2
 8006bec:	d809      	bhi.n	8006c02 <Press_Action+0x3e>
    cfg->mark = mark_value;
 8006bee:	2001      	movs	r0, #1
 8006bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8006e28 <Press_Action+0x264>)
 8006bf2:	7518      	strb	r0, [r3, #20]
    Save_Mark_To_Backup(cfg->mark);
 8006bf4:	f7ff fc10 	bl	8006418 <Save_Mark_To_Backup>
	  	    if (Meas_Mode != 2){
 8006bf8:	9b00      	ldr	r3, [sp, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d102      	bne.n	8006c06 <Press_Action+0x42>
 8006c00:	e004      	b.n	8006c0c <Press_Action+0x48>
        	else if(Meas_Mode == 5){
 8006c02:	2b05      	cmp	r3, #5
 8006c04:	d007      	beq.n	8006c16 <Press_Action+0x52>
	  		Tick_Save = 0;}
 8006c06:	2200      	movs	r2, #0
 8006c08:	4b88      	ldr	r3, [pc, #544]	@ (8006e2c <Press_Action+0x268>)
 8006c0a:	601a      	str	r2, [r3, #0]
	  	    button_press_count = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	7033      	strb	r3, [r6, #0]
            SW_count = 0; // 원래처럼 리셋, 빼도 됨
 8006c10:	7023      	strb	r3, [r4, #0]
            button_flag = false;
 8006c12:	702b      	strb	r3, [r5, #0]
}
 8006c14:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        		 Switch_Backup_reg(MODE_Stop);
 8006c16:	0038      	movs	r0, r7
 8006c18:	f7ff fa70 	bl	80060fc <Switch_Backup_reg>
        		 Tick_Save = 0;
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4b83      	ldr	r3, [pc, #524]	@ (8006e2c <Press_Action+0x268>)
 8006c20:	601a      	str	r2, [r3, #0]
        		 First_Measure = 0;
 8006c22:	4b83      	ldr	r3, [pc, #524]	@ (8006e30 <Press_Action+0x26c>)
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e7e7      	b.n	8006bf8 <Press_Action+0x34>
        bool button_flag_det = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8006c28:	20a0      	movs	r0, #160	@ 0xa0
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	05c0      	lsls	r0, r0, #23
 8006c2e:	f008 fe9d 	bl	800f96c <HAL_GPIO_ReadPin>
 8006c32:	4f80      	ldr	r7, [pc, #512]	@ (8006e34 <Press_Action+0x270>)
 8006c34:	1e06      	subs	r6, r0, #0
 	  	 if(!button_flag_det)
 8006c36:	d000      	beq.n	8006c3a <Press_Action+0x76>
 8006c38:	e0c9      	b.n	8006dce <Press_Action+0x20a>
 	  	    SW_count++;
 8006c3a:	7821      	ldrb	r1, [r4, #0]
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 8006c3c:	783a      	ldrb	r2, [r7, #0]
 	  	    SW_count++;
 8006c3e:	3101      	adds	r1, #1
 8006c40:	b2c9      	uxtb	r1, r1
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 8006c42:	487d      	ldr	r0, [pc, #500]	@ (8006e38 <Press_Action+0x274>)
 	  	    SW_count++;
 8006c44:	7021      	strb	r1, [r4, #0]
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 8006c46:	f013 fbb9 	bl	801a3bc <iprintf>
 	  	 		if (SW_count>=2){
 8006c4a:	7823      	ldrb	r3, [r4, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d90f      	bls.n	8006c70 <Press_Action+0xac>
 	  	 		printf("Mode Change\r\n");
 8006c50:	487a      	ldr	r0, [pc, #488]	@ (8006e3c <Press_Action+0x278>)
 8006c52:	f013 fc23 	bl	801a49c <puts>
 	  	 			if(Meas_Mode == 0){ // Boot
 8006c56:	9b00      	ldr	r3, [sp, #0]
 8006c58:	7818      	ldrb	r0, [r3, #0]
 8006c5a:	2805      	cmp	r0, #5
 8006c5c:	d808      	bhi.n	8006c70 <Press_Action+0xac>
 8006c5e:	4f73      	ldr	r7, [pc, #460]	@ (8006e2c <Press_Action+0x268>)
 8006c60:	f7f9 fa64 	bl	800012c <__gnu_thumb1_case_uqi>
 8006c64:	93832003 	.word	0x93832003
 8006c68:	a283      	.short	0xa283
 	  	 			 SW_count = 0;
 8006c6a:	7026      	strb	r6, [r4, #0]
 	  	 			 button_flag = false;
 8006c6c:	702e      	strb	r6, [r5, #0]
 	  	 			Tick_Save = 0;
 8006c6e:	603e      	str	r6, [r7, #0]
 	  	 	 if (SW_count>9){
 8006c70:	7823      	ldrb	r3, [r4, #0]
 8006c72:	2b09      	cmp	r3, #9
 8006c74:	d90b      	bls.n	8006c8e <Press_Action+0xca>
 	  	 		if(Meas_Mode == 6) // End Mode
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d107      	bne.n	8006c8e <Press_Action+0xca>
 	  	 		RTC_Disable_All_Wakeup();
 8006c7e:	f7fe fdfb 	bl	8005878 <RTC_Disable_All_Wakeup>
 	  	 		 Reset_All_Backup_Registers();
 8006c82:	f7ff ff13 	bl	8006aac <Reset_All_Backup_Registers>
 	  	 		 First_Measure = 0;
 8006c86:	2200      	movs	r2, #0
 8006c88:	4b69      	ldr	r3, [pc, #420]	@ (8006e30 <Press_Action+0x26c>)
 	  	 		SW_count = 0;
 8006c8a:	7022      	strb	r2, [r4, #0]
 	  	 		 First_Measure = 0;
 8006c8c:	701a      	strb	r2, [r3, #0]
	  	    if (Meas_Mode != 2){
 8006c8e:	9b00      	ldr	r3, [sp, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d002      	beq.n	8006c9c <Press_Action+0xd8>
	  		Tick_Save = 0;}
 8006c96:	2200      	movs	r2, #0
 8006c98:	4b64      	ldr	r3, [pc, #400]	@ (8006e2c <Press_Action+0x268>)
 8006c9a:	601a      	str	r2, [r3, #0]
        last_button_tick = 0;
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4b68      	ldr	r3, [pc, #416]	@ (8006e40 <Press_Action+0x27c>)
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	e7b7      	b.n	8006c14 <Press_Action+0x50>
 	  	 		      if(current_settings.start_mode == 0x00){
 8006ca4:	4a67      	ldr	r2, [pc, #412]	@ (8006e44 <Press_Action+0x280>)
 8006ca6:	4b68      	ldr	r3, [pc, #416]	@ (8006e48 <Press_Action+0x284>)
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	9201      	str	r2, [sp, #4]
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	d119      	bne.n	8006ce4 <Press_Action+0x120>
 	  	 				if (current_settings.start_delay > 0){
 8006cb0:	0019      	movs	r1, r3
 8006cb2:	001a      	movs	r2, r3
 8006cb4:	3165      	adds	r1, #101	@ 0x65
 8006cb6:	7809      	ldrb	r1, [r1, #0]
 8006cb8:	3264      	adds	r2, #100	@ 0x64
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	0209      	lsls	r1, r1, #8
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	3266      	adds	r2, #102	@ 0x66
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	3367      	adds	r3, #103	@ 0x67
 8006cc8:	781e      	ldrb	r6, [r3, #0]
 8006cca:	0412      	lsls	r2, r2, #16
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	0636      	lsls	r6, r6, #24
 8006cd0:	4316      	orrs	r6, r2
 8006cd2:	d03b      	beq.n	8006d4c <Press_Action+0x188>
 	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8006cd4:	2006      	movs	r0, #6
 8006cd6:	f7ff fa11 	bl	80060fc <Switch_Backup_reg>
	   	  	 		     SW_count = 0;
 8006cda:	9b01      	ldr	r3, [sp, #4]
 		   	  	 		     SW_count = 0;
 8006cdc:	7023      	strb	r3, [r4, #0]
 		   	  	 			 button_flag = false;
 8006cde:	702b      	strb	r3, [r5, #0]
 		   	  	 		     Tick_Save = 0;
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	e011      	b.n	8006d08 <Press_Action+0x144>
 	  	 			  else if(current_settings.start_mode == 0x01){
 8006ce4:	9a01      	ldr	r2, [sp, #4]
 8006ce6:	2a01      	cmp	r2, #1
 8006ce8:	d119      	bne.n	8006d1e <Press_Action+0x15a>
 	  	 				 AlarmDelay_InitStart_Flash();
 8006cea:	f003 f8a7 	bl	8009e3c <AlarmDelay_InitStart_Flash>
  	   	  	 			 Switch_Backup_reg(MODE_Start);
 8006cee:	2003      	movs	r0, #3
 8006cf0:	f7ff fa04 	bl	80060fc <Switch_Backup_reg>
  	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006cf4:	f7ff fbec 	bl	80064d0 <Load_IndexNum_From_Backup>
 8006cf8:	4b54      	ldr	r3, [pc, #336]	@ (8006e4c <Press_Action+0x288>)
  	   	  	 	         Interval_LCD_Count = 0;
 8006cfa:	4a55      	ldr	r2, [pc, #340]	@ (8006e50 <Press_Action+0x28c>)
  	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006cfc:	8018      	strh	r0, [r3, #0]
  	   	  	 		     SW_count = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	7023      	strb	r3, [r4, #0]
  	   	  	 			 button_flag = false;
 8006d02:	702b      	strb	r3, [r5, #0]
  	   	  	 	     	 Tick_Save = 0;
 8006d04:	603b      	str	r3, [r7, #0]
  	   	  	 	         Interval_LCD_Count = 0;
 8006d06:	6013      	str	r3, [r2, #0]
                    Set_ModeStatus(mode_internal_backup_start);
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f003 f96f 	bl	8009fec <Set_ModeStatus>
 	  	 			Clear_WakeupTime_Backup();
 8006d0e:	f7ff f9dd 	bl	80060cc <Clear_WakeupTime_Backup>
 	  	 		    Clear_Backup_Index();
 8006d12:	f7ff fb3d 	bl	8006390 <Clear_Backup_Index>
 	  	 			First_Measure = 0;
 8006d16:	2200      	movs	r2, #0
 8006d18:	4b45      	ldr	r3, [pc, #276]	@ (8006e30 <Press_Action+0x26c>)
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e7a8      	b.n	8006c70 <Press_Action+0xac>
 	 	  	 				if (current_settings.start_delay > 0){
 8006d1e:	0019      	movs	r1, r3
 8006d20:	001a      	movs	r2, r3
 8006d22:	3165      	adds	r1, #101	@ 0x65
 8006d24:	7809      	ldrb	r1, [r1, #0]
 8006d26:	3264      	adds	r2, #100	@ 0x64
 8006d28:	7812      	ldrb	r2, [r2, #0]
 8006d2a:	0209      	lsls	r1, r1, #8
 8006d2c:	4311      	orrs	r1, r2
 8006d2e:	001a      	movs	r2, r3
 8006d30:	3266      	adds	r2, #102	@ 0x66
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	3367      	adds	r3, #103	@ 0x67
 8006d36:	781e      	ldrb	r6, [r3, #0]
 8006d38:	0412      	lsls	r2, r2, #16
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	0636      	lsls	r6, r6, #24
 8006d3e:	4316      	orrs	r6, r2
 8006d40:	d004      	beq.n	8006d4c <Press_Action+0x188>
 	 	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8006d42:	2006      	movs	r0, #6
 8006d44:	f7ff f9da 	bl	80060fc <Switch_Backup_reg>
 		   	  	 		     SW_count = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e7c7      	b.n	8006cdc <Press_Action+0x118>
 	 	  	 				 AlarmDelay_InitStart_Flash();
 8006d4c:	f003 f876 	bl	8009e3c <AlarmDelay_InitStart_Flash>
 	 	   	  	 			 Switch_Backup_reg(MODE_Start);
 8006d50:	2003      	movs	r0, #3
 8006d52:	f7ff f9d3 	bl	80060fc <Switch_Backup_reg>
 	 	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006d56:	f7ff fbbb 	bl	80064d0 <Load_IndexNum_From_Backup>
 8006d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8006e4c <Press_Action+0x288>)
 	 	   	  	 		     SW_count = 0;
 8006d5c:	7026      	strb	r6, [r4, #0]
 	 	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006d5e:	8018      	strh	r0, [r3, #0]
 	 	   	  	 	         Interval_LCD_Count = 0;
 8006d60:	4b3b      	ldr	r3, [pc, #236]	@ (8006e50 <Press_Action+0x28c>)
 	 	   	  	 			 button_flag = false;
 8006d62:	702e      	strb	r6, [r5, #0]
 	 	   	  	 	     	 Tick_Save = 0;
 8006d64:	603e      	str	r6, [r7, #0]
 	 	   	  	 	         Interval_LCD_Count = 0;
 8006d66:	601e      	str	r6, [r3, #0]
 8006d68:	e7ce      	b.n	8006d08 <Press_Action+0x144>
 	  	 		     Switch_Backup_reg(MODE_Pause);
 8006d6a:	2004      	movs	r0, #4
 8006d6c:	f7ff f9c6 	bl	80060fc <Switch_Backup_reg>
 	  	 		     button_flag = false;
 8006d70:	702e      	strb	r6, [r5, #0]
 	  	 		    RTC_Disable_All_Wakeup();
 8006d72:	f7fe fd81 	bl	8005878 <RTC_Disable_All_Wakeup>
                    Set_ModeStatus(mode_internal_backup_pause);
 8006d76:	2002      	movs	r0, #2
 8006d78:	f003 f938 	bl	8009fec <Set_ModeStatus>
                    Clear_WakeupTime_Backup();
 8006d7c:	f7ff f9a6 	bl	80060cc <Clear_WakeupTime_Backup>
 	  	 		    First_Measure = 0;
 8006d80:	4b2b      	ldr	r3, [pc, #172]	@ (8006e30 <Press_Action+0x26c>)
 	  	 		     SW_count = 0;
 8006d82:	7026      	strb	r6, [r4, #0]
 	  	 		    Tick_Save = 0;
 8006d84:	603e      	str	r6, [r7, #0]
 	  	 		    First_Measure = 0;
 8006d86:	701e      	strb	r6, [r3, #0]
 8006d88:	e772      	b.n	8006c70 <Press_Action+0xac>
 	  	 			RTC_Disable_All_Wakeup();
 8006d8a:	f7fe fd75 	bl	8005878 <RTC_Disable_All_Wakeup>
 	  	 		    Switch_Backup_reg(MODE_End);
 8006d8e:	2007      	movs	r0, #7
 8006d90:	f7ff f9b4 	bl	80060fc <Switch_Backup_reg>
                    Set_ModeStatus(mode_internal_backup_end);
 8006d94:	2003      	movs	r0, #3
 8006d96:	f003 f929 	bl	8009fec <Set_ModeStatus>
 	  	 		    Tick_Save = 0;
 8006d9a:	2300      	movs	r3, #0
 	  	 	        First_Measure = 0;
 8006d9c:	4a24      	ldr	r2, [pc, #144]	@ (8006e30 <Press_Action+0x26c>)
 	  	 		    Tick_Save = 0;
 8006d9e:	603b      	str	r3, [r7, #0]
 	  	 		    SW_count = 0;
 8006da0:	7023      	strb	r3, [r4, #0]
 	  	 	     	button_flag = false;
 8006da2:	702b      	strb	r3, [r5, #0]
 	  	 	        First_Measure = 0;
 8006da4:	7013      	strb	r3, [r2, #0]
 8006da6:	e763      	b.n	8006c70 <Press_Action+0xac>
 	  	 		    AlarmDelay_InitStart_Flash();
 8006da8:	f003 f848 	bl	8009e3c <AlarmDelay_InitStart_Flash>
 	  	 		    Switch_Backup_reg(MODE_Start);
 8006dac:	2003      	movs	r0, #3
 8006dae:	f7ff f9a5 	bl	80060fc <Switch_Backup_reg>
 	 	  	 		Index_num = Load_IndexNum_From_Backup();
 8006db2:	f7ff fb8d 	bl	80064d0 <Load_IndexNum_From_Backup>
 	 	  	 	    Interval_LCD_Count = 1;
 8006db6:	2201      	movs	r2, #1
 	 	  	 		Index_num = Load_IndexNum_From_Backup();
 8006db8:	4b24      	ldr	r3, [pc, #144]	@ (8006e4c <Press_Action+0x288>)
 8006dba:	8018      	strh	r0, [r3, #0]
 	 	  	 	    Interval_LCD_Count = 1;
 8006dbc:	4b24      	ldr	r3, [pc, #144]	@ (8006e50 <Press_Action+0x28c>)
 8006dbe:	601a      	str	r2, [r3, #0]
 	 	  	 		SW_count = 0;
 8006dc0:	2300      	movs	r3, #0
 	 	  	 		First_Measure = 0;
 8006dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e30 <Press_Action+0x26c>)
 	 	  	 		SW_count = 0;
 8006dc4:	7023      	strb	r3, [r4, #0]
 	 	  	 		button_flag = false;
 8006dc6:	702b      	strb	r3, [r5, #0]
 	 	  	 		First_Measure = 0;
 8006dc8:	7013      	strb	r3, [r2, #0]
 	 	  	 		Tick_Save = 0;
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	e750      	b.n	8006c70 <Press_Action+0xac>
        	LCD_mode++;
 8006dce:	783b      	ldrb	r3, [r7, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	703b      	strb	r3, [r7, #0]
	  	      if(Meas_Mode == 3){
 8006dd4:	9b00      	ldr	r3, [sp, #0]
 8006dd6:	7818      	ldrb	r0, [r3, #0]
 8006dd8:	2803      	cmp	r0, #3
 8006dda:	d104      	bne.n	8006de6 <Press_Action+0x222>
	  	 	  	 Switch_Backup_reg(MODE_Start);
 8006ddc:	f7ff f98e 	bl	80060fc <Switch_Backup_reg>
	  	 	     First_Measure = 0;
 8006de0:	2200      	movs	r2, #0
 8006de2:	4b13      	ldr	r3, [pc, #76]	@ (8006e30 <Press_Action+0x26c>)
 8006de4:	701a      	strb	r2, [r3, #0]
	  	 	if(Meas_Mode == 1 && First_Measure<=1){
 8006de6:	9b00      	ldr	r3, [sp, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d107      	bne.n	8006dfe <Press_Action+0x23a>
 8006dee:	2100      	movs	r1, #0
 8006df0:	4a0f      	ldr	r2, [pc, #60]	@ (8006e30 <Press_Action+0x26c>)
 8006df2:	5651      	ldrsb	r1, [r2, r1]
 8006df4:	2901      	cmp	r1, #1
 8006df6:	dc02      	bgt.n	8006dfe <Press_Action+0x23a>
	  	 		First_Measure = 2;
 8006df8:	2102      	movs	r1, #2
	  	 		LCD_mode = 1;
 8006dfa:	703b      	strb	r3, [r7, #0]
	  	 		First_Measure = 2;
 8006dfc:	7011      	strb	r1, [r2, #0]
            button_flag = false;
 8006dfe:	2300      	movs	r3, #0
            Interval_LCD_Count = 1;
 8006e00:	2201      	movs	r2, #1
            button_flag = false;
 8006e02:	702b      	strb	r3, [r5, #0]
            SW_count = 0;
 8006e04:	7023      	strb	r3, [r4, #0]
            Interval_LCD_Count = 1;
 8006e06:	4b12      	ldr	r3, [pc, #72]	@ (8006e50 <Press_Action+0x28c>)
            printf("Button unpressed \r\n");
 8006e08:	4812      	ldr	r0, [pc, #72]	@ (8006e54 <Press_Action+0x290>)
            Interval_LCD_Count = 1;
 8006e0a:	601a      	str	r2, [r3, #0]
            printf("Button unpressed \r\n");
 8006e0c:	f013 fb46 	bl	801a49c <puts>
 8006e10:	e73d      	b.n	8006c8e <Press_Action+0xca>
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	20000538 	.word	0x20000538
 8006e18:	20000524 	.word	0x20000524
 8006e1c:	20000535 	.word	0x20000535
 8006e20:	20000537 	.word	0x20000537
 8006e24:	0801d787 	.word	0x0801d787
 8006e28:	20000b50 	.word	0x20000b50
 8006e2c:	20000540 	.word	0x20000540
 8006e30:	20000534 	.word	0x20000534
 8006e34:	20000503 	.word	0x20000503
 8006e38:	0801d796 	.word	0x0801d796
 8006e3c:	0801d7b5 	.word	0x0801d7b5
 8006e40:	20000528 	.word	0x20000528
 8006e44:	20002c0f 	.word	0x20002c0f
 8006e48:	20002bac 	.word	0x20002bac
 8006e4c:	2000004c 	.word	0x2000004c
 8006e50:	2000053c 	.word	0x2000053c
 8006e54:	0801d7c2 	.word	0x0801d7c2

08006e58 <Short_Measure>:
void Short_Measure(void){
 8006e58:	b510      	push	{r4, lr}
	Count_Filter_Kalman();
 8006e5a:	f7ff f82f 	bl	8005ebc <Count_Filter_Kalman>
	Read_Temp();
 8006e5e:	f7fe fc95 	bl	800578c <Read_Temp>
	if (Tick_Save>7){
 8006e62:	4c09      	ldr	r4, [pc, #36]	@ (8006e88 <Short_Measure+0x30>)
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	2b07      	cmp	r3, #7
 8006e68:	d903      	bls.n	8006e72 <Short_Measure+0x1a>
	  Get_in_Shutdown();
 8006e6a:	f7fe ff2f 	bl	8005ccc <Get_in_Shutdown>
	  Tick_Save = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6023      	str	r3, [r4, #0]
	printf("Tick_Save : %lu\r\n", Tick_Save);
 8006e72:	6821      	ldr	r1, [r4, #0]
 8006e74:	4805      	ldr	r0, [pc, #20]	@ (8006e8c <Short_Measure+0x34>)
 8006e76:	f013 faa1 	bl	801a3bc <iprintf>
     comp1_count = 0;
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4b04      	ldr	r3, [pc, #16]	@ (8006e90 <Short_Measure+0x38>)
 8006e7e:	601a      	str	r2, [r3, #0]
	 Tick_Save++;
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	6023      	str	r3, [r4, #0]
}
 8006e86:	bd10      	pop	{r4, pc}
 8006e88:	20000540 	.word	0x20000540
 8006e8c:	0801d7d5 	.word	0x0801d7d5
 8006e90:	20000560 	.word	0x20000560

08006e94 <Non_Measure>:
void Non_Measure(void){
 8006e94:	b510      	push	{r4, lr}
	if (Tick_Save>7){
 8006e96:	4c09      	ldr	r4, [pc, #36]	@ (8006ebc <Non_Measure+0x28>)
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	2b07      	cmp	r3, #7
 8006e9c:	d903      	bls.n	8006ea6 <Non_Measure+0x12>
	  Get_in_Shutdown();
 8006e9e:	f7fe ff15 	bl	8005ccc <Get_in_Shutdown>
	  Tick_Save = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6023      	str	r3, [r4, #0]
	printf("Tick_Save : %lu\r\n", Tick_Save);
 8006ea6:	6821      	ldr	r1, [r4, #0]
 8006ea8:	4805      	ldr	r0, [pc, #20]	@ (8006ec0 <Non_Measure+0x2c>)
 8006eaa:	f013 fa87 	bl	801a3bc <iprintf>
     comp1_count = 0;
 8006eae:	2200      	movs	r2, #0
 8006eb0:	4b04      	ldr	r3, [pc, #16]	@ (8006ec4 <Non_Measure+0x30>)
 8006eb2:	601a      	str	r2, [r3, #0]
	 Tick_Save++;
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	6023      	str	r3, [r4, #0]
}
 8006eba:	bd10      	pop	{r4, pc}
 8006ebc:	20000540 	.word	0x20000540
 8006ec0:	0801d7d5 	.word	0x0801d7d5
 8006ec4:	20000560 	.word	0x20000560

08006ec8 <Check_And_Run_Alarms>:
{
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006eca:	4cde      	ldr	r4, [pc, #888]	@ (8007244 <Check_And_Run_Alarms+0x37c>)
 8006ecc:	4bde      	ldr	r3, [pc, #888]	@ (8007248 <Check_And_Run_Alarms+0x380>)
 8006ece:	0022      	movs	r2, r4
 8006ed0:	3269      	adds	r2, #105	@ 0x69
 8006ed2:	7812      	ldrb	r2, [r2, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	0212      	lsls	r2, r2, #8
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	0023      	movs	r3, r4
 8006edc:	336a      	adds	r3, #106	@ 0x6a
 8006ede:	781b      	ldrb	r3, [r3, #0]
{
 8006ee0:	b093      	sub	sp, #76	@ 0x4c
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	0022      	movs	r2, r4
 8006ee8:	326b      	adds	r2, #107	@ 0x6b
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	0612      	lsls	r2, r2, #24
 8006eee:	431a      	orrs	r2, r3
    if (start_epoch == 0xFFFFFFFFu) {
 8006ef0:	0013      	movs	r3, r2
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006ef2:	9205      	str	r2, [sp, #20]
    if (start_epoch == 0xFFFFFFFFu) {
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	d100      	bne.n	8006efa <Check_And_Run_Alarms+0x32>
 8006ef8:	e1f7      	b.n	80072ea <Check_And_Run_Alarms+0x422>
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8006efa:	4fd4      	ldr	r7, [pc, #848]	@ (800724c <Check_And_Run_Alarms+0x384>)
 8006efc:	ad0d      	add	r5, sp, #52	@ 0x34
        HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8006efe:	ae0c      	add	r6, sp, #48	@ 0x30
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8006f00:	0029      	movs	r1, r5
 8006f02:	2200      	movs	r2, #0
 8006f04:	0038      	movs	r0, r7
 8006f06:	f00b f967 	bl	80121d8 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8006f0a:	0031      	movs	r1, r6
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	0038      	movs	r0, r7
 8006f10:	f00b f994 	bl	801223c <HAL_RTC_GetDate>
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8006f14:	78b2      	ldrb	r2, [r6, #2]
 8006f16:	7871      	ldrb	r1, [r6, #1]
 8006f18:	78f0      	ldrb	r0, [r6, #3]
 8006f1a:	78ae      	ldrb	r6, [r5, #2]
 8006f1c:	782b      	ldrb	r3, [r5, #0]
 8006f1e:	9601      	str	r6, [sp, #4]
 8006f20:	786d      	ldrb	r5, [r5, #1]
 8006f22:	9500      	str	r5, [sp, #0]
 8006f24:	f002 fdc2 	bl	8009aac <ymd_to_epoch>
        uint32_t elapsed = (now_epoch >= start_epoch) ? (now_epoch - start_epoch) : 0u;
 8006f28:	9b05      	ldr	r3, [sp, #20]
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	4283      	cmp	r3, r0
 8006f2e:	d800      	bhi.n	8006f32 <Check_And_Run_Alarms+0x6a>
 8006f30:	1ac5      	subs	r5, r0, r3
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006f32:	0023      	movs	r3, r4
 8006f34:	337a      	adds	r3, #122	@ 0x7a
 8006f36:	781a      	ldrb	r2, [r3, #0]
 8006f38:	0023      	movs	r3, r4
 8006f3a:	337b      	adds	r3, #123	@ 0x7b
 8006f3c:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006f3e:	0021      	movs	r1, r4
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	4313      	orrs	r3, r2
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006f44:	0022      	movs	r2, r4
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006f46:	469c      	mov	ip, r3
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006f48:	0023      	movs	r3, r4
 8006f4a:	327d      	adds	r2, #125	@ 0x7d
 8006f4c:	7812      	ldrb	r2, [r2, #0]
 8006f4e:	337c      	adds	r3, #124	@ 0x7c
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	0212      	lsls	r2, r2, #8
 8006f54:	431a      	orrs	r2, r3
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006f56:	0023      	movs	r3, r4
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006f58:	920b      	str	r2, [sp, #44]	@ 0x2c
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006f5a:	317f      	adds	r1, #127	@ 0x7f
 8006f5c:	780f      	ldrb	r7, [r1, #0]
 8006f5e:	337e      	adds	r3, #126	@ 0x7e
 8006f60:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006f62:	0021      	movs	r1, r4
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006f64:	023f      	lsls	r7, r7, #8
 8006f66:	431f      	orrs	r7, r3
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006f68:	0023      	movs	r3, r4
 8006f6a:	3181      	adds	r1, #129	@ 0x81
 8006f6c:	780e      	ldrb	r6, [r1, #0]
 8006f6e:	3380      	adds	r3, #128	@ 0x80
 8006f70:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_tl1 = current_settings.alarm_delay_tl1;
 8006f72:	0021      	movs	r1, r4
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006f74:	0236      	lsls	r6, r6, #8
 8006f76:	431e      	orrs	r6, r3
        uint16_t d_tl1 = current_settings.alarm_delay_tl1;
 8006f78:	0023      	movs	r3, r4
 8006f7a:	3183      	adds	r1, #131	@ 0x83
 8006f7c:	7808      	ldrb	r0, [r1, #0]
 8006f7e:	3382      	adds	r3, #130	@ 0x82
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	0200      	lsls	r0, r0, #8
 8006f84:	4318      	orrs	r0, r3
        uint16_t d_tl2 = current_settings.alarm_delay_tl2;
 8006f86:	0023      	movs	r3, r4
 8006f88:	3485      	adds	r4, #133	@ 0x85
 8006f8a:	7821      	ldrb	r1, [r4, #0]
 8006f8c:	3384      	adds	r3, #132	@ 0x84
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	0209      	lsls	r1, r1, #8
 8006f92:	4319      	orrs	r1, r3
        gate_rh1 = (elapsed >= d_rh1);
 8006f94:	2300      	movs	r3, #0
 8006f96:	4662      	mov	r2, ip
 8006f98:	001c      	movs	r4, r3
 8006f9a:	4295      	cmp	r5, r2
 8006f9c:	415c      	adcs	r4, r3
 8006f9e:	b2e2      	uxtb	r2, r4
        gate_rh2 = (elapsed >= d_rh2);
 8006fa0:	001c      	movs	r4, r3
        gate_rh1 = (elapsed >= d_rh1);
 8006fa2:	9205      	str	r2, [sp, #20]
        gate_rh2 = (elapsed >= d_rh2);
 8006fa4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006fa6:	4295      	cmp	r5, r2
 8006fa8:	415c      	adcs	r4, r3
 8006faa:	b2e2      	uxtb	r2, r4
        gate_th1 = (elapsed >= d_th1);
 8006fac:	001c      	movs	r4, r3
 8006fae:	42bd      	cmp	r5, r7
 8006fb0:	415c      	adcs	r4, r3
        gate_rh2 = (elapsed >= d_rh2);
 8006fb2:	9206      	str	r2, [sp, #24]
        gate_th1 = (elapsed >= d_th1);
 8006fb4:	b2e2      	uxtb	r2, r4
        gate_th2 = (elapsed >= d_th2);
 8006fb6:	001c      	movs	r4, r3
 8006fb8:	42b5      	cmp	r5, r6
 8006fba:	415c      	adcs	r4, r3
        gate_th1 = (elapsed >= d_th1);
 8006fbc:	9207      	str	r2, [sp, #28]
        gate_th2 = (elapsed >= d_th2);
 8006fbe:	b2e2      	uxtb	r2, r4
        gate_tl1 = (elapsed >= d_tl1);
 8006fc0:	001c      	movs	r4, r3
 8006fc2:	4285      	cmp	r5, r0
 8006fc4:	415c      	adcs	r4, r3
        gate_tl2 = (elapsed >= d_tl2);
 8006fc6:	428d      	cmp	r5, r1
 8006fc8:	415b      	adcs	r3, r3
        gate_th2 = (elapsed >= d_th2);
 8006fca:	9208      	str	r2, [sp, #32]
        gate_tl1 = (elapsed >= d_tl1);
 8006fcc:	b2e2      	uxtb	r2, r4
 8006fce:	9209      	str	r2, [sp, #36]	@ 0x24
        if (d_rh2 > dmax) dmax = d_rh2;
 8006fd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        gate_tl2 = (elapsed >= d_tl2);
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	930a      	str	r3, [sp, #40]	@ 0x28
        if (d_rh2 > dmax) dmax = d_rh2;
 8006fd6:	4663      	mov	r3, ip
 8006fd8:	4594      	cmp	ip, r2
 8006fda:	d201      	bcs.n	8006fe0 <Check_And_Run_Alarms+0x118>
 8006fdc:	466b      	mov	r3, sp
 8006fde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
        if (d_th1 > dmax) dmax = d_th1;
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	42ba      	cmp	r2, r7
 8006fe4:	d200      	bcs.n	8006fe8 <Check_And_Run_Alarms+0x120>
 8006fe6:	1c3b      	adds	r3, r7, #0
        if (d_th2 > dmax) dmax = d_th2;
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	42b2      	cmp	r2, r6
 8006fec:	d200      	bcs.n	8006ff0 <Check_And_Run_Alarms+0x128>
 8006fee:	1c33      	adds	r3, r6, #0
        if (d_tl1 > dmax) dmax = d_tl1;
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	4282      	cmp	r2, r0
 8006ff4:	d200      	bcs.n	8006ff8 <Check_And_Run_Alarms+0x130>
 8006ff6:	1c03      	adds	r3, r0, #0
        if (d_tl2 > dmax) dmax = d_tl2;
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	428a      	cmp	r2, r1
 8006ffc:	d200      	bcs.n	8007000 <Check_And_Run_Alarms+0x138>
 8006ffe:	1c0b      	adds	r3, r1, #0
 8007000:	b29c      	uxth	r4, r3
        if (elapsed >= dmax) {
 8007002:	42ac      	cmp	r4, r5
 8007004:	d900      	bls.n	8007008 <Check_And_Run_Alarms+0x140>
 8007006:	e160      	b.n	80072ca <Check_And_Run_Alarms+0x402>
            current_settings.start_time_info_for_alarm = 0xFFFFFFFFu;
 8007008:	2201      	movs	r2, #1
 800700a:	4b8e      	ldr	r3, [pc, #568]	@ (8007244 <Check_And_Run_Alarms+0x37c>)
 800700c:	498e      	ldr	r1, [pc, #568]	@ (8007248 <Check_And_Run_Alarms+0x380>)
 800700e:	4252      	negs	r2, r2
 8007010:	700a      	strb	r2, [r1, #0]
 8007012:	0019      	movs	r1, r3
 8007014:	3169      	adds	r1, #105	@ 0x69
 8007016:	700a      	strb	r2, [r1, #0]
 8007018:	0019      	movs	r1, r3
 800701a:	336b      	adds	r3, #107	@ 0x6b
 800701c:	316a      	adds	r1, #106	@ 0x6a
 800701e:	700a      	strb	r2, [r1, #0]
 8007020:	701a      	strb	r2, [r3, #0]
            Save_CurrentSettings(); // 1회 저장
 8007022:	f002 fdfb 	bl	8009c1c <Save_CurrentSettings>
            printf("[AlarmDelay] epoch gate done: elapsed=%lu >= %u, sentinel set.\r\n",
 8007026:	0022      	movs	r2, r4
 8007028:	0029      	movs	r1, r5
 800702a:	4889      	ldr	r0, [pc, #548]	@ (8007250 <Check_And_Run_Alarms+0x388>)
 800702c:	f013 f9c6 	bl	801a3bc <iprintf>
            delay_done_skip = true;
 8007030:	2401      	movs	r4, #1
    int16_t  temp_x10 = (int16_t)(Display_temperature * 10.0f);
 8007032:	4b88      	ldr	r3, [pc, #544]	@ (8007254 <Check_And_Run_Alarms+0x38c>)
 8007034:	4988      	ldr	r1, [pc, #544]	@ (8007258 <Check_And_Run_Alarms+0x390>)
 8007036:	681e      	ldr	r6, [r3, #0]
 8007038:	1c30      	adds	r0, r6, #0
 800703a:	f7f9 ff83 	bl	8000f44 <__aeabi_fmul>
 800703e:	f7fa fb55 	bl	80016ec <__aeabi_f2iz>
    uint16_t dose_now = dose_log;
 8007042:	4b86      	ldr	r3, [pc, #536]	@ (800725c <Check_And_Run_Alarms+0x394>)
    int16_t  temp_x10 = (int16_t)(Display_temperature * 10.0f);
 8007044:	b205      	sxth	r5, r0
    printf("[Alarm Debug] temp_avg=%.2f (x10=%d), dose=%u\r\n",
 8007046:	681f      	ldr	r7, [r3, #0]
 8007048:	1c30      	adds	r0, r6, #0
 800704a:	b2bb      	uxth	r3, r7
 800704c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800704e:	f7fc fba3 	bl	8003798 <__aeabi_f2d>
 8007052:	000b      	movs	r3, r1
 8007054:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007056:	0002      	movs	r2, r0
 8007058:	9101      	str	r1, [sp, #4]
 800705a:	4881      	ldr	r0, [pc, #516]	@ (8007260 <Check_And_Run_Alarms+0x398>)
 800705c:	9500      	str	r5, [sp, #0]
 800705e:	f013 f9ad 	bl	801a3bc <iprintf>
    if (delay_done_skip || gate_rh1) {
 8007062:	9b05      	ldr	r3, [sp, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d102      	bne.n	800706e <Check_And_Run_Alarms+0x1a6>
 8007068:	2c00      	cmp	r4, #0
 800706a:	d100      	bne.n	800706e <Check_And_Run_Alarms+0x1a6>
 800706c:	e14f      	b.n	800730e <Check_And_Run_Alarms+0x446>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1);
 800706e:	487d      	ldr	r0, [pc, #500]	@ (8007264 <Check_And_Run_Alarms+0x39c>)
 8007070:	6982      	ldr	r2, [r0, #24]
 8007072:	0591      	lsls	r1, r2, #22
 8007074:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8007076:	2902      	cmp	r1, #2
 8007078:	d023      	beq.n	80070c2 <Check_And_Run_Alarms+0x1fa>
            if (dose_now >= current_settings.alarm_rh1) {
 800707a:	4e7b      	ldr	r6, [pc, #492]	@ (8007268 <Check_And_Run_Alarms+0x3a0>)
 800707c:	4b71      	ldr	r3, [pc, #452]	@ (8007244 <Check_And_Run_Alarms+0x37c>)
 800707e:	7836      	ldrb	r6, [r6, #0]
 8007080:	46b4      	mov	ip, r6
 8007082:	001e      	movs	r6, r3
 8007084:	4667      	mov	r7, ip
 8007086:	3692      	adds	r6, #146	@ 0x92
 8007088:	7836      	ldrb	r6, [r6, #0]
 800708a:	0236      	lsls	r6, r6, #8
 800708c:	4337      	orrs	r7, r6
 800708e:	001e      	movs	r6, r3
 8007090:	3693      	adds	r6, #147	@ 0x93
 8007092:	7836      	ldrb	r6, [r6, #0]
 8007094:	3394      	adds	r3, #148	@ 0x94
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	0436      	lsls	r6, r6, #16
 800709a:	061b      	lsls	r3, r3, #24
 800709c:	433e      	orrs	r6, r7
 800709e:	431e      	orrs	r6, r3
 80070a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070a2:	429e      	cmp	r6, r3
 80070a4:	d900      	bls.n	80070a8 <Check_And_Run_Alarms+0x1e0>
 80070a6:	e128      	b.n	80072fa <Check_And_Run_Alarms+0x432>
                if (st != ALARM_ON) {
 80070a8:	2901      	cmp	r1, #1
 80070aa:	d00a      	beq.n	80070c2 <Check_And_Run_Alarms+0x1fa>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, ALARM_ON);
 80070ac:	4b6f      	ldr	r3, [pc, #444]	@ (800726c <Check_And_Run_Alarms+0x3a4>)
 80070ae:	401a      	ands	r2, r3
 80070b0:	2380      	movs	r3, #128	@ 0x80
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4313      	orrs	r3, r2
 80070b6:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 80070b8:	f7ff f98e 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High1 -> ON\r\n");
 80070bc:	486c      	ldr	r0, [pc, #432]	@ (8007270 <Check_And_Run_Alarms+0x3a8>)
        printf("[AlarmDelay] RH1 waiting...\r\n");
 80070be:	f013 f9ed 	bl	801a49c <puts>
    if (delay_done_skip || gate_rh2) {
 80070c2:	9b06      	ldr	r3, [sp, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <Check_And_Run_Alarms+0x206>
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d100      	bne.n	80070ce <Check_And_Run_Alarms+0x206>
 80070cc:	e12b      	b.n	8007326 <Check_And_Run_Alarms+0x45e>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2);
 80070ce:	4865      	ldr	r0, [pc, #404]	@ (8007264 <Check_And_Run_Alarms+0x39c>)
 80070d0:	6982      	ldr	r2, [r0, #24]
 80070d2:	0511      	lsls	r1, r2, #20
 80070d4:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 80070d6:	2902      	cmp	r1, #2
 80070d8:	d023      	beq.n	8007122 <Check_And_Run_Alarms+0x25a>
            if (dose_now >= current_settings.alarm_rh2) {
 80070da:	4e66      	ldr	r6, [pc, #408]	@ (8007274 <Check_And_Run_Alarms+0x3ac>)
 80070dc:	4b59      	ldr	r3, [pc, #356]	@ (8007244 <Check_And_Run_Alarms+0x37c>)
 80070de:	7836      	ldrb	r6, [r6, #0]
 80070e0:	46b4      	mov	ip, r6
 80070e2:	001e      	movs	r6, r3
 80070e4:	4667      	mov	r7, ip
 80070e6:	369a      	adds	r6, #154	@ 0x9a
 80070e8:	7836      	ldrb	r6, [r6, #0]
 80070ea:	0236      	lsls	r6, r6, #8
 80070ec:	4337      	orrs	r7, r6
 80070ee:	001e      	movs	r6, r3
 80070f0:	369b      	adds	r6, #155	@ 0x9b
 80070f2:	7836      	ldrb	r6, [r6, #0]
 80070f4:	339c      	adds	r3, #156	@ 0x9c
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	0436      	lsls	r6, r6, #16
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	433e      	orrs	r6, r7
 80070fe:	431e      	orrs	r6, r3
 8007100:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007102:	429e      	cmp	r6, r3
 8007104:	d900      	bls.n	8007108 <Check_And_Run_Alarms+0x240>
 8007106:	e104      	b.n	8007312 <Check_And_Run_Alarms+0x44a>
                if (st != ALARM_ON) {
 8007108:	2901      	cmp	r1, #1
 800710a:	d00a      	beq.n	8007122 <Check_And_Run_Alarms+0x25a>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, ALARM_ON);
 800710c:	4b5a      	ldr	r3, [pc, #360]	@ (8007278 <Check_And_Run_Alarms+0x3b0>)
 800710e:	401a      	ands	r2, r3
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4313      	orrs	r3, r2
 8007116:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007118:	f7ff f95e 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High2 -> ON\r\n");
 800711c:	4857      	ldr	r0, [pc, #348]	@ (800727c <Check_And_Run_Alarms+0x3b4>)
        printf("[AlarmDelay] RH2 waiting...\r\n");
 800711e:	f013 f9bd 	bl	801a49c <puts>
    if (delay_done_skip || gate_th1) {
 8007122:	9b07      	ldr	r3, [sp, #28]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <Check_And_Run_Alarms+0x266>
 8007128:	2c00      	cmp	r4, #0
 800712a:	d100      	bne.n	800712e <Check_And_Run_Alarms+0x266>
 800712c:	e107      	b.n	800733e <Check_And_Run_Alarms+0x476>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1);
 800712e:	484d      	ldr	r0, [pc, #308]	@ (8007264 <Check_And_Run_Alarms+0x39c>)
 8007130:	6982      	ldr	r2, [r0, #24]
 8007132:	0491      	lsls	r1, r2, #18
 8007134:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8007136:	2902      	cmp	r1, #2
 8007138:	d017      	beq.n	800716a <Check_And_Run_Alarms+0x2a2>
            if (temp_x10 >= current_settings.alarm_th1) {
 800713a:	4b51      	ldr	r3, [pc, #324]	@ (8007280 <Check_And_Run_Alarms+0x3b8>)
 800713c:	781e      	ldrb	r6, [r3, #0]
 800713e:	4b51      	ldr	r3, [pc, #324]	@ (8007284 <Check_And_Run_Alarms+0x3bc>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	4333      	orrs	r3, r6
 8007146:	041b      	lsls	r3, r3, #16
 8007148:	141b      	asrs	r3, r3, #16
 800714a:	42ab      	cmp	r3, r5
 800714c:	dd00      	ble.n	8007150 <Check_And_Run_Alarms+0x288>
 800714e:	e0ec      	b.n	800732a <Check_And_Run_Alarms+0x462>
                if (st != ALARM_ON) {
 8007150:	2901      	cmp	r1, #1
 8007152:	d00a      	beq.n	800716a <Check_And_Run_Alarms+0x2a2>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, ALARM_ON);
 8007154:	4b4c      	ldr	r3, [pc, #304]	@ (8007288 <Check_And_Run_Alarms+0x3c0>)
 8007156:	401a      	ands	r2, r3
 8007158:	2380      	movs	r3, #128	@ 0x80
 800715a:	015b      	lsls	r3, r3, #5
 800715c:	4313      	orrs	r3, r2
 800715e:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007160:	f7ff f93a 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High1 -> ON\r\n");
 8007164:	4849      	ldr	r0, [pc, #292]	@ (800728c <Check_And_Run_Alarms+0x3c4>)
        printf("[AlarmDelay] TH1 waiting...\r\n");
 8007166:	f013 f999 	bl	801a49c <puts>
    if (delay_done_skip || gate_th2) {
 800716a:	9b08      	ldr	r3, [sp, #32]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <Check_And_Run_Alarms+0x2ae>
 8007170:	2c00      	cmp	r4, #0
 8007172:	d100      	bne.n	8007176 <Check_And_Run_Alarms+0x2ae>
 8007174:	e0ef      	b.n	8007356 <Check_And_Run_Alarms+0x48e>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2);
 8007176:	483b      	ldr	r0, [pc, #236]	@ (8007264 <Check_And_Run_Alarms+0x39c>)
 8007178:	6982      	ldr	r2, [r0, #24]
 800717a:	0411      	lsls	r1, r2, #16
 800717c:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 800717e:	2902      	cmp	r1, #2
 8007180:	d017      	beq.n	80071b2 <Check_And_Run_Alarms+0x2ea>
            if (temp_x10 >= current_settings.alarm_th2) {
 8007182:	4b43      	ldr	r3, [pc, #268]	@ (8007290 <Check_And_Run_Alarms+0x3c8>)
 8007184:	781e      	ldrb	r6, [r3, #0]
 8007186:	4b43      	ldr	r3, [pc, #268]	@ (8007294 <Check_And_Run_Alarms+0x3cc>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	4333      	orrs	r3, r6
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	141b      	asrs	r3, r3, #16
 8007192:	42ab      	cmp	r3, r5
 8007194:	dd00      	ble.n	8007198 <Check_And_Run_Alarms+0x2d0>
 8007196:	e0d4      	b.n	8007342 <Check_And_Run_Alarms+0x47a>
                if (st != ALARM_ON) {
 8007198:	2901      	cmp	r1, #1
 800719a:	d00a      	beq.n	80071b2 <Check_And_Run_Alarms+0x2ea>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, ALARM_ON);
 800719c:	4b3e      	ldr	r3, [pc, #248]	@ (8007298 <Check_And_Run_Alarms+0x3d0>)
 800719e:	401a      	ands	r2, r3
 80071a0:	2380      	movs	r3, #128	@ 0x80
 80071a2:	01db      	lsls	r3, r3, #7
 80071a4:	4313      	orrs	r3, r2
 80071a6:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 80071a8:	f7ff f916 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High2 -> ON\r\n");
 80071ac:	483b      	ldr	r0, [pc, #236]	@ (800729c <Check_And_Run_Alarms+0x3d4>)
        printf("[AlarmDelay] TH2 waiting...\r\n");
 80071ae:	f013 f975 	bl	801a49c <puts>
    if (delay_done_skip || gate_tl1) {
 80071b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <Check_And_Run_Alarms+0x2f6>
 80071b8:	2c00      	cmp	r4, #0
 80071ba:	d100      	bne.n	80071be <Check_And_Run_Alarms+0x2f6>
 80071bc:	e0d7      	b.n	800736e <Check_And_Run_Alarms+0x4a6>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1);
 80071be:	4829      	ldr	r0, [pc, #164]	@ (8007264 <Check_And_Run_Alarms+0x39c>)
 80071c0:	6982      	ldr	r2, [r0, #24]
 80071c2:	0391      	lsls	r1, r2, #14
 80071c4:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 80071c6:	2902      	cmp	r1, #2
 80071c8:	d017      	beq.n	80071fa <Check_And_Run_Alarms+0x332>
            if (temp_x10 <= current_settings.alarm_tl1) {
 80071ca:	4b35      	ldr	r3, [pc, #212]	@ (80072a0 <Check_And_Run_Alarms+0x3d8>)
 80071cc:	781e      	ldrb	r6, [r3, #0]
 80071ce:	4b35      	ldr	r3, [pc, #212]	@ (80072a4 <Check_And_Run_Alarms+0x3dc>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	4333      	orrs	r3, r6
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	141b      	asrs	r3, r3, #16
 80071da:	42ab      	cmp	r3, r5
 80071dc:	da00      	bge.n	80071e0 <Check_And_Run_Alarms+0x318>
 80071de:	e0bc      	b.n	800735a <Check_And_Run_Alarms+0x492>
                if (st != ALARM_ON) {
 80071e0:	2901      	cmp	r1, #1
 80071e2:	d00a      	beq.n	80071fa <Check_And_Run_Alarms+0x332>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_ON);
 80071e4:	4b30      	ldr	r3, [pc, #192]	@ (80072a8 <Check_And_Run_Alarms+0x3e0>)
 80071e6:	401a      	ands	r2, r3
 80071e8:	2380      	movs	r3, #128	@ 0x80
 80071ea:	025b      	lsls	r3, r3, #9
 80071ec:	4313      	orrs	r3, r2
 80071ee:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 80071f0:	f7ff f8f2 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low1 -> ON\r\n");
 80071f4:	482d      	ldr	r0, [pc, #180]	@ (80072ac <Check_And_Run_Alarms+0x3e4>)
        printf("[AlarmDelay] TL1 waiting...\r\n");
 80071f6:	f013 f951 	bl	801a49c <puts>
    if (delay_done_skip || gate_tl2) {
 80071fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <Check_And_Run_Alarms+0x33e>
 8007200:	2c00      	cmp	r4, #0
 8007202:	d100      	bne.n	8007206 <Check_And_Run_Alarms+0x33e>
 8007204:	e0be      	b.n	8007384 <Check_And_Run_Alarms+0x4bc>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2);
 8007206:	4817      	ldr	r0, [pc, #92]	@ (8007264 <Check_And_Run_Alarms+0x39c>)
 8007208:	6982      	ldr	r2, [r0, #24]
 800720a:	0311      	lsls	r1, r2, #12
 800720c:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 800720e:	2902      	cmp	r1, #2
 8007210:	d056      	beq.n	80072c0 <Check_And_Run_Alarms+0x3f8>
            if (temp_x10 <= current_settings.alarm_tl2) {
 8007212:	4b27      	ldr	r3, [pc, #156]	@ (80072b0 <Check_And_Run_Alarms+0x3e8>)
 8007214:	781c      	ldrb	r4, [r3, #0]
 8007216:	4b27      	ldr	r3, [pc, #156]	@ (80072b4 <Check_And_Run_Alarms+0x3ec>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	4323      	orrs	r3, r4
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	141b      	asrs	r3, r3, #16
 8007222:	42ab      	cmp	r3, r5
 8007224:	da00      	bge.n	8007228 <Check_And_Run_Alarms+0x360>
 8007226:	e0a4      	b.n	8007372 <Check_And_Run_Alarms+0x4aa>
                if (st != ALARM_ON) {
 8007228:	2901      	cmp	r1, #1
 800722a:	d049      	beq.n	80072c0 <Check_And_Run_Alarms+0x3f8>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, ALARM_ON);
 800722c:	4b22      	ldr	r3, [pc, #136]	@ (80072b8 <Check_And_Run_Alarms+0x3f0>)
 800722e:	401a      	ands	r2, r3
 8007230:	2380      	movs	r3, #128	@ 0x80
 8007232:	02db      	lsls	r3, r3, #11
 8007234:	4313      	orrs	r3, r2
 8007236:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007238:	f7ff f8ce 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low2 -> ON\r\n");
 800723c:	481f      	ldr	r0, [pc, #124]	@ (80072bc <Check_And_Run_Alarms+0x3f4>)
        printf("[AlarmDelay] TL2 waiting...\r\n");
 800723e:	f013 f92d 	bl	801a49c <puts>
 8007242:	e03d      	b.n	80072c0 <Check_And_Run_Alarms+0x3f8>
 8007244:	20002bac 	.word	0x20002bac
 8007248:	20002c14 	.word	0x20002c14
 800724c:	200009f8 	.word	0x200009f8
 8007250:	0801d7e7 	.word	0x0801d7e7
 8007254:	20000544 	.word	0x20000544
 8007258:	41200000 	.word	0x41200000
 800725c:	20000530 	.word	0x20000530
 8007260:	0801d871 	.word	0x0801d871
 8007264:	20000b50 	.word	0x20000b50
 8007268:	20002c3d 	.word	0x20002c3d
 800726c:	fffffcff 	.word	0xfffffcff
 8007270:	0801d8a1 	.word	0x0801d8a1
 8007274:	20002c45 	.word	0x20002c45
 8007278:	fffff3ff 	.word	0xfffff3ff
 800727c:	0801d8fd 	.word	0x0801d8fd
 8007280:	20002c41 	.word	0x20002c41
 8007284:	20002c42 	.word	0x20002c42
 8007288:	ffffcfff 	.word	0xffffcfff
 800728c:	0801d959 	.word	0x0801d959
 8007290:	20002c49 	.word	0x20002c49
 8007294:	20002c4a 	.word	0x20002c4a
 8007298:	ffff3fff 	.word	0xffff3fff
 800729c:	0801d9ab 	.word	0x0801d9ab
 80072a0:	20002c43 	.word	0x20002c43
 80072a4:	20002c44 	.word	0x20002c44
 80072a8:	fffcffff 	.word	0xfffcffff
 80072ac:	0801d9fd 	.word	0x0801d9fd
 80072b0:	20002c4b 	.word	0x20002c4b
 80072b4:	20002c4c 	.word	0x20002c4c
 80072b8:	fff3ffff 	.word	0xfff3ffff
 80072bc:	0801da4d 	.word	0x0801da4d
    printf("[Debug] Check_And_Run_Alarms: End\r\n");
 80072c0:	4831      	ldr	r0, [pc, #196]	@ (8007388 <Check_And_Run_Alarms+0x4c0>)
 80072c2:	f013 f8eb 	bl	801a49c <puts>
}
 80072c6:	b013      	add	sp, #76	@ 0x4c
 80072c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("[AlarmDelay] elapsed=%lu(s)  RH1:%u RH2:%u TH1:%u TH2:%u TL1:%u TL2:%u\r\n",
 80072ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072cc:	0029      	movs	r1, r5
 80072ce:	9303      	str	r3, [sp, #12]
 80072d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d2:	482e      	ldr	r0, [pc, #184]	@ (800738c <Check_And_Run_Alarms+0x4c4>)
 80072d4:	9302      	str	r3, [sp, #8]
 80072d6:	9b08      	ldr	r3, [sp, #32]
 80072d8:	9a05      	ldr	r2, [sp, #20]
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	9b07      	ldr	r3, [sp, #28]
    bool delay_done_skip = false;
 80072de:	2400      	movs	r4, #0
            printf("[AlarmDelay] elapsed=%lu(s)  RH1:%u RH2:%u TH1:%u TH2:%u TL1:%u TL2:%u\r\n",
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	9b06      	ldr	r3, [sp, #24]
 80072e4:	f013 f86a 	bl	801a3bc <iprintf>
 80072e8:	e6a3      	b.n	8007032 <Check_And_Run_Alarms+0x16a>
        delay_done_skip = true;
 80072ea:	2401      	movs	r4, #1
    bool gate_rh1 = true, gate_rh2 = true, gate_th1 = true, gate_th2 = true, gate_tl1 = true, gate_tl2 = true;
 80072ec:	940a      	str	r4, [sp, #40]	@ 0x28
 80072ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80072f0:	9408      	str	r4, [sp, #32]
 80072f2:	9407      	str	r4, [sp, #28]
 80072f4:	9406      	str	r4, [sp, #24]
 80072f6:	9405      	str	r4, [sp, #20]
 80072f8:	e69b      	b.n	8007032 <Check_And_Run_Alarms+0x16a>
                if (st != ALARM_OFF) {
 80072fa:	2900      	cmp	r1, #0
 80072fc:	d100      	bne.n	8007300 <Check_And_Run_Alarms+0x438>
 80072fe:	e6e0      	b.n	80070c2 <Check_And_Run_Alarms+0x1fa>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, ALARM_OFF);
 8007300:	4b23      	ldr	r3, [pc, #140]	@ (8007390 <Check_And_Run_Alarms+0x4c8>)
 8007302:	401a      	ands	r2, r3
 8007304:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007306:	f7ff f867 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High1 -> OFF\r\n");
 800730a:	4822      	ldr	r0, [pc, #136]	@ (8007394 <Check_And_Run_Alarms+0x4cc>)
 800730c:	e6d7      	b.n	80070be <Check_And_Run_Alarms+0x1f6>
        printf("[AlarmDelay] RH1 waiting...\r\n");
 800730e:	4822      	ldr	r0, [pc, #136]	@ (8007398 <Check_And_Run_Alarms+0x4d0>)
 8007310:	e6d5      	b.n	80070be <Check_And_Run_Alarms+0x1f6>
                if (st != ALARM_OFF) {
 8007312:	2900      	cmp	r1, #0
 8007314:	d100      	bne.n	8007318 <Check_And_Run_Alarms+0x450>
 8007316:	e704      	b.n	8007122 <Check_And_Run_Alarms+0x25a>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, ALARM_OFF);
 8007318:	4b20      	ldr	r3, [pc, #128]	@ (800739c <Check_And_Run_Alarms+0x4d4>)
 800731a:	401a      	ands	r2, r3
 800731c:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 800731e:	f7ff f85b 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High2 -> OFF\r\n");
 8007322:	481f      	ldr	r0, [pc, #124]	@ (80073a0 <Check_And_Run_Alarms+0x4d8>)
 8007324:	e6fb      	b.n	800711e <Check_And_Run_Alarms+0x256>
        printf("[AlarmDelay] RH2 waiting...\r\n");
 8007326:	481f      	ldr	r0, [pc, #124]	@ (80073a4 <Check_And_Run_Alarms+0x4dc>)
 8007328:	e6f9      	b.n	800711e <Check_And_Run_Alarms+0x256>
                if (st != ALARM_OFF) {
 800732a:	2900      	cmp	r1, #0
 800732c:	d100      	bne.n	8007330 <Check_And_Run_Alarms+0x468>
 800732e:	e71c      	b.n	800716a <Check_And_Run_Alarms+0x2a2>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, ALARM_OFF);
 8007330:	4b1d      	ldr	r3, [pc, #116]	@ (80073a8 <Check_And_Run_Alarms+0x4e0>)
 8007332:	401a      	ands	r2, r3
 8007334:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007336:	f7ff f84f 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High1 -> OFF\r\n");
 800733a:	481c      	ldr	r0, [pc, #112]	@ (80073ac <Check_And_Run_Alarms+0x4e4>)
 800733c:	e713      	b.n	8007166 <Check_And_Run_Alarms+0x29e>
        printf("[AlarmDelay] TH1 waiting...\r\n");
 800733e:	481c      	ldr	r0, [pc, #112]	@ (80073b0 <Check_And_Run_Alarms+0x4e8>)
 8007340:	e711      	b.n	8007166 <Check_And_Run_Alarms+0x29e>
                if (st != ALARM_OFF) {
 8007342:	2900      	cmp	r1, #0
 8007344:	d100      	bne.n	8007348 <Check_And_Run_Alarms+0x480>
 8007346:	e734      	b.n	80071b2 <Check_And_Run_Alarms+0x2ea>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, ALARM_OFF);
 8007348:	4b1a      	ldr	r3, [pc, #104]	@ (80073b4 <Check_And_Run_Alarms+0x4ec>)
 800734a:	401a      	ands	r2, r3
 800734c:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 800734e:	f7ff f843 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High2 -> OFF\r\n");
 8007352:	4819      	ldr	r0, [pc, #100]	@ (80073b8 <Check_And_Run_Alarms+0x4f0>)
 8007354:	e72b      	b.n	80071ae <Check_And_Run_Alarms+0x2e6>
        printf("[AlarmDelay] TH2 waiting...\r\n");
 8007356:	4819      	ldr	r0, [pc, #100]	@ (80073bc <Check_And_Run_Alarms+0x4f4>)
 8007358:	e729      	b.n	80071ae <Check_And_Run_Alarms+0x2e6>
                if (st != ALARM_OFF) {
 800735a:	2900      	cmp	r1, #0
 800735c:	d100      	bne.n	8007360 <Check_And_Run_Alarms+0x498>
 800735e:	e74c      	b.n	80071fa <Check_And_Run_Alarms+0x332>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_OFF);
 8007360:	4b17      	ldr	r3, [pc, #92]	@ (80073c0 <Check_And_Run_Alarms+0x4f8>)
 8007362:	401a      	ands	r2, r3
 8007364:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007366:	f7ff f837 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low1 -> OFF\r\n");
 800736a:	4816      	ldr	r0, [pc, #88]	@ (80073c4 <Check_And_Run_Alarms+0x4fc>)
 800736c:	e743      	b.n	80071f6 <Check_And_Run_Alarms+0x32e>
        printf("[AlarmDelay] TL1 waiting...\r\n");
 800736e:	4816      	ldr	r0, [pc, #88]	@ (80073c8 <Check_And_Run_Alarms+0x500>)
 8007370:	e741      	b.n	80071f6 <Check_And_Run_Alarms+0x32e>
                if (st != ALARM_OFF) {
 8007372:	2900      	cmp	r1, #0
 8007374:	d0a4      	beq.n	80072c0 <Check_And_Run_Alarms+0x3f8>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, ALARM_OFF);
 8007376:	4b15      	ldr	r3, [pc, #84]	@ (80073cc <Check_And_Run_Alarms+0x504>)
 8007378:	401a      	ands	r2, r3
 800737a:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 800737c:	f7ff f82c 	bl	80063d8 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low2 -> OFF\r\n");
 8007380:	4813      	ldr	r0, [pc, #76]	@ (80073d0 <Check_And_Run_Alarms+0x508>)
 8007382:	e75c      	b.n	800723e <Check_And_Run_Alarms+0x376>
        printf("[AlarmDelay] TL2 waiting...\r\n");
 8007384:	4813      	ldr	r0, [pc, #76]	@ (80073d4 <Check_And_Run_Alarms+0x50c>)
 8007386:	e75a      	b.n	800723e <Check_And_Run_Alarms+0x376>
 8007388:	0801da9d 	.word	0x0801da9d
 800738c:	0801d828 	.word	0x0801d828
 8007390:	fffffcff 	.word	0xfffffcff
 8007394:	0801d8c0 	.word	0x0801d8c0
 8007398:	0801d8e0 	.word	0x0801d8e0
 800739c:	fffff3ff 	.word	0xfffff3ff
 80073a0:	0801d91c 	.word	0x0801d91c
 80073a4:	0801d93c 	.word	0x0801d93c
 80073a8:	ffffcfff 	.word	0xffffcfff
 80073ac:	0801d973 	.word	0x0801d973
 80073b0:	0801d98e 	.word	0x0801d98e
 80073b4:	ffff3fff 	.word	0xffff3fff
 80073b8:	0801d9c5 	.word	0x0801d9c5
 80073bc:	0801d9e0 	.word	0x0801d9e0
 80073c0:	fffcffff 	.word	0xfffcffff
 80073c4:	0801da16 	.word	0x0801da16
 80073c8:	0801da30 	.word	0x0801da30
 80073cc:	fff3ffff 	.word	0xfff3ffff
 80073d0:	0801da66 	.word	0x0801da66
 80073d4:	0801da80 	.word	0x0801da80

080073d8 <Interval_Measure>:
void Interval_Measure(void){
 80073d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 if (measure_Rad_flag) {
 80073da:	4b60      	ldr	r3, [pc, #384]	@ (800755c <Interval_Measure+0x184>)
void Interval_Measure(void){
 80073dc:	b085      	sub	sp, #20
	 if (measure_Rad_flag) {
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	4c5f      	ldr	r4, [pc, #380]	@ (8007560 <Interval_Measure+0x188>)
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	9201      	str	r2, [sp, #4]
 80073e6:	4a5f      	ldr	r2, [pc, #380]	@ (8007564 <Interval_Measure+0x18c>)
 80073e8:	9202      	str	r2, [sp, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d100      	bne.n	80073f0 <Interval_Measure+0x18>
 80073ee:	e068      	b.n	80074c2 <Interval_Measure+0xea>
	Count_Filter_Kalman();
 80073f0:	f7fe fd64 	bl	8005ebc <Count_Filter_Kalman>
	printf("Tick_Save : %lu, Interval_LCD_Count : %lu\r\n", Tick_Save, Interval_LCD_Count);
 80073f4:	4d5c      	ldr	r5, [pc, #368]	@ (8007568 <Interval_Measure+0x190>)
 80073f6:	6821      	ldr	r1, [r4, #0]
 80073f8:	682a      	ldr	r2, [r5, #0]
 80073fa:	485c      	ldr	r0, [pc, #368]	@ (800756c <Interval_Measure+0x194>)
 80073fc:	f012 ffde 	bl	801a3bc <iprintf>
	if (Check_And_Save_When_Target_Reached() && Interval_LCD_Count == 0){
 8007400:	f7fe fcf2 	bl	8005de8 <Check_And_Save_When_Target_Reached>
 8007404:	2800      	cmp	r0, #0
 8007406:	d02e      	beq.n	8007466 <Interval_Measure+0x8e>
 8007408:	682f      	ldr	r7, [r5, #0]
 800740a:	2f00      	cmp	r7, #0
 800740c:	d12b      	bne.n	8007466 <Interval_Measure+0x8e>
		printf("Get in Timer Shut Down\r\n");
 800740e:	4858      	ldr	r0, [pc, #352]	@ (8007570 <Interval_Measure+0x198>)
 8007410:	f013 f844 	bl	801a49c <puts>
		Read_Temp();
 8007414:	f7fe f9ba 	bl	800578c <Read_Temp>
		Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 8007418:	4e56      	ldr	r6, [pc, #344]	@ (8007574 <Interval_Measure+0x19c>)
 800741a:	4d57      	ldr	r5, [pc, #348]	@ (8007578 <Interval_Measure+0x1a0>)
 800741c:	4a57      	ldr	r2, [pc, #348]	@ (800757c <Interval_Measure+0x1a4>)
 800741e:	6831      	ldr	r1, [r6, #0]
 8007420:	6828      	ldr	r0, [r5, #0]
 8007422:	f7ff f9b7 	bl	8006794 <Update_TempDose_MinMax>
		Check_And_Run_Alarms(Display_temperature, dose_log);
 8007426:	6831      	ldr	r1, [r6, #0]
 8007428:	6828      	ldr	r0, [r5, #0]
 800742a:	f7ff fd4d 	bl	8006ec8 <Check_And_Run_Alarms>
	    Write_buffer();
 800742e:	f7ff fa83 	bl	8006938 <Write_buffer>
	    rad_interval_count = rad_ratio - 1;     // 카운터 리셋
 8007432:	4a53      	ldr	r2, [pc, #332]	@ (8007580 <Interval_Measure+0x1a8>)
 8007434:	4b53      	ldr	r3, [pc, #332]	@ (8007584 <Interval_Measure+0x1ac>)
 8007436:	8812      	ldrh	r2, [r2, #0]
 8007438:	3a01      	subs	r2, #1
 800743a:	701a      	strb	r2, [r3, #0]
	    idx_temp++;
 800743c:	4a52      	ldr	r2, [pc, #328]	@ (8007588 <Interval_Measure+0x1b0>)
 800743e:	8813      	ldrh	r3, [r2, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	8013      	strh	r3, [r2, #0]
	    idx_rad++;
 8007444:	4a51      	ldr	r2, [pc, #324]	@ (800758c <Interval_Measure+0x1b4>)
 8007446:	8813      	ldrh	r3, [r2, #0]
 8007448:	3301      	adds	r3, #1
 800744a:	8013      	strh	r3, [r2, #0]
	    Save_Backup_Index();
 800744c:	f7fe ff74 	bl	8006338 <Save_Backup_Index>
	    Get_in_Shutdown_Timer();
 8007450:	f7fe fe98 	bl	8006184 <Get_in_Shutdown_Timer>
	    Tick_Save = 0;
 8007454:	6027      	str	r7, [r4, #0]
			 comp1_count = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	9a02      	ldr	r2, [sp, #8]
 800745a:	6013      	str	r3, [r2, #0]
			 Tick_Save++;
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	3301      	adds	r3, #1
	 Tick_Save++;
 8007460:	6023      	str	r3, [r4, #0]
}
 8007462:	b005      	add	sp, #20
 8007464:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Check_And_Save_When_Target_Reached() && Interval_LCD_Count>0) {
 8007466:	f7fe fcbf 	bl	8005de8 <Check_And_Save_When_Target_Reached>
 800746a:	2800      	cmp	r0, #0
 800746c:	d0f3      	beq.n	8007456 <Interval_Measure+0x7e>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <Interval_Measure+0x7e>
		printf("Start Timer & No shutdown\r\n");
 8007474:	4846      	ldr	r0, [pc, #280]	@ (8007590 <Interval_Measure+0x1b8>)
 8007476:	f013 f811 	bl	801a49c <puts>
		Read_Temp();
 800747a:	f7fe f987 	bl	800578c <Read_Temp>
		Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 800747e:	4e3d      	ldr	r6, [pc, #244]	@ (8007574 <Interval_Measure+0x19c>)
 8007480:	4d3d      	ldr	r5, [pc, #244]	@ (8007578 <Interval_Measure+0x1a0>)
 8007482:	4a3e      	ldr	r2, [pc, #248]	@ (800757c <Interval_Measure+0x1a4>)
 8007484:	6831      	ldr	r1, [r6, #0]
 8007486:	6828      	ldr	r0, [r5, #0]
 8007488:	f7ff f984 	bl	8006794 <Update_TempDose_MinMax>
		Check_And_Run_Alarms(Display_temperature, dose_log);
 800748c:	6831      	ldr	r1, [r6, #0]
 800748e:	6828      	ldr	r0, [r5, #0]
 8007490:	f7ff fd1a 	bl	8006ec8 <Check_And_Run_Alarms>
	    Write_buffer();
 8007494:	f7ff fa50 	bl	8006938 <Write_buffer>
	    rad_interval_count = rad_ratio - 1;     // 카운터 리셋
 8007498:	4a39      	ldr	r2, [pc, #228]	@ (8007580 <Interval_Measure+0x1a8>)
 800749a:	4b3a      	ldr	r3, [pc, #232]	@ (8007584 <Interval_Measure+0x1ac>)
 800749c:	8812      	ldrh	r2, [r2, #0]
 800749e:	3a01      	subs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
	    idx_temp++;
 80074a2:	4a39      	ldr	r2, [pc, #228]	@ (8007588 <Interval_Measure+0x1b0>)
 80074a4:	8813      	ldrh	r3, [r2, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	8013      	strh	r3, [r2, #0]
	    idx_rad++;
 80074aa:	4a38      	ldr	r2, [pc, #224]	@ (800758c <Interval_Measure+0x1b4>)
			    idx_temp++;
 80074ac:	8813      	ldrh	r3, [r2, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	8013      	strh	r3, [r2, #0]
			    Save_Backup_Index();
 80074b2:	f7fe ff41 	bl	8006338 <Save_Backup_Index>
				Switch_Backup_reg(MODE_Start_Button);
 80074b6:	2005      	movs	r0, #5
 80074b8:	f7fe fe20 	bl	80060fc <Switch_Backup_reg>
				Start_Wake_Timer();
 80074bc:	f7fe febc 	bl	8006238 <Start_Wake_Timer>
 80074c0:	e7c9      	b.n	8007456 <Interval_Measure+0x7e>
		 if(Check_And_Save_When_Target_Reached()){
 80074c2:	f7fe fc91 	bl	8005de8 <Check_And_Save_When_Target_Reached>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d0c5      	beq.n	8007456 <Interval_Measure+0x7e>
		 Read_Temp();
 80074ca:	f7fe f95f 	bl	800578c <Read_Temp>
		 PrintCurrentRTC();
 80074ce:	f7fe fc45 	bl	8005d5c <PrintCurrentRTC>
		 dose_log = 0x0000;
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	4d27      	ldr	r5, [pc, #156]	@ (8007574 <Interval_Measure+0x19c>)
		 printf("[Debug] Display_temperature = %.2f°C\n", Display_temperature);
 80074d6:	4f28      	ldr	r7, [pc, #160]	@ (8007578 <Interval_Measure+0x1a0>)
		 dose_log = 0x0000;
 80074d8:	602b      	str	r3, [r5, #0]
		 printf("[Debug] Display_temperature = %.2f°C\n", Display_temperature);
 80074da:	6838      	ldr	r0, [r7, #0]
 80074dc:	f7fc f95c 	bl	8003798 <__aeabi_f2d>
 80074e0:	000b      	movs	r3, r1
 80074e2:	0002      	movs	r2, r0
 80074e4:	482b      	ldr	r0, [pc, #172]	@ (8007594 <Interval_Measure+0x1bc>)
 80074e6:	f012 ff69 	bl	801a3bc <iprintf>
		 Check_And_Run_Alarms(Display_temperature, dose_log);
 80074ea:	6829      	ldr	r1, [r5, #0]
 80074ec:	6838      	ldr	r0, [r7, #0]
 80074ee:	f7ff fceb 	bl	8006ec8 <Check_And_Run_Alarms>
			if (Interval_LCD_Count == 0){
 80074f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007568 <Interval_Measure+0x190>)
 80074f4:	4e23      	ldr	r6, [pc, #140]	@ (8007584 <Interval_Measure+0x1ac>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	4b20      	ldr	r3, [pc, #128]	@ (800757c <Interval_Measure+0x1a4>)
 80074fc:	9303      	str	r3, [sp, #12]
 80074fe:	9b00      	ldr	r3, [sp, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d119      	bne.n	8007538 <Interval_Measure+0x160>
				printf("Get in Timer Shut Down\r\n");
 8007504:	481a      	ldr	r0, [pc, #104]	@ (8007570 <Interval_Measure+0x198>)
 8007506:	f012 ffc9 	bl	801a49c <puts>
				Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 800750a:	6829      	ldr	r1, [r5, #0]
 800750c:	6838      	ldr	r0, [r7, #0]
 800750e:	9a03      	ldr	r2, [sp, #12]
 8007510:	f7ff f940 	bl	8006794 <Update_TempDose_MinMax>
				dose_log = 0x0000;
 8007514:	9b00      	ldr	r3, [sp, #0]
 8007516:	602b      	str	r3, [r5, #0]
			    Write_buffer();
 8007518:	f7ff fa0e 	bl	8006938 <Write_buffer>
			    rad_interval_count--;
 800751c:	7833      	ldrb	r3, [r6, #0]
			    idx_temp++;
 800751e:	4a1a      	ldr	r2, [pc, #104]	@ (8007588 <Interval_Measure+0x1b0>)
			    rad_interval_count--;
 8007520:	3b01      	subs	r3, #1
 8007522:	7033      	strb	r3, [r6, #0]
			    idx_temp++;
 8007524:	8813      	ldrh	r3, [r2, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	8013      	strh	r3, [r2, #0]
			    Save_Backup_Index();
 800752a:	f7fe ff05 	bl	8006338 <Save_Backup_Index>
			    Get_in_Shutdown_Timer();
 800752e:	f7fe fe29 	bl	8006184 <Get_in_Shutdown_Timer>
			    Tick_Save = 0;
 8007532:	9b00      	ldr	r3, [sp, #0]
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	e78e      	b.n	8007456 <Interval_Measure+0x7e>
				printf("Start Timer & No shutdown\r\n");
 8007538:	4815      	ldr	r0, [pc, #84]	@ (8007590 <Interval_Measure+0x1b8>)
 800753a:	f012 ffaf 	bl	801a49c <puts>
				Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 800753e:	9a03      	ldr	r2, [sp, #12]
 8007540:	6829      	ldr	r1, [r5, #0]
 8007542:	6838      	ldr	r0, [r7, #0]
 8007544:	f7ff f926 	bl	8006794 <Update_TempDose_MinMax>
				dose_log = 0x0000;
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	602b      	str	r3, [r5, #0]
				rad_interval_count--;
 800754c:	7833      	ldrb	r3, [r6, #0]
 800754e:	3b01      	subs	r3, #1
 8007550:	7033      	strb	r3, [r6, #0]
			    Write_buffer();
 8007552:	f7ff f9f1 	bl	8006938 <Write_buffer>
			    idx_temp++;
 8007556:	4a0c      	ldr	r2, [pc, #48]	@ (8007588 <Interval_Measure+0x1b0>)
 8007558:	e7a8      	b.n	80074ac <Interval_Measure+0xd4>
 800755a:	46c0      	nop			@ (mov r8, r8)
 800755c:	20000502 	.word	0x20000502
 8007560:	20000540 	.word	0x20000540
 8007564:	20000560 	.word	0x20000560
 8007568:	2000053c 	.word	0x2000053c
 800756c:	0801dac0 	.word	0x0801dac0
 8007570:	0801daec 	.word	0x0801daec
 8007574:	20000530 	.word	0x20000530
 8007578:	20000544 	.word	0x20000544
 800757c:	20000b50 	.word	0x20000b50
 8007580:	2000000a 	.word	0x2000000a
 8007584:	200004fd 	.word	0x200004fd
 8007588:	200004fe 	.word	0x200004fe
 800758c:	20000500 	.word	0x20000500
 8007590:	0801db04 	.word	0x0801db04
 8007594:	0801db1f 	.word	0x0801db1f

08007598 <__io_putchar>:
{
 8007598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800759a:	4c0b      	ldr	r4, [pc, #44]	@ (80075c8 <__io_putchar+0x30>)
 800759c:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 800759e:	280a      	cmp	r0, #10
 80075a0:	d108      	bne.n	80075b4 <__io_putchar+0x1c>
    uint8_t ret = '\r';
 80075a2:	210f      	movs	r1, #15
 80075a4:	230d      	movs	r3, #13
 80075a6:	4469      	add	r1, sp
 80075a8:	700b      	strb	r3, [r1, #0]
    HAL_UART_Transmit(&huart3, &ret, 1, 0xFFFF);
 80075aa:	2201      	movs	r2, #1
 80075ac:	0020      	movs	r0, r4
 80075ae:	4b07      	ldr	r3, [pc, #28]	@ (80075cc <__io_putchar+0x34>)
 80075b0:	f00b ffc1 	bl	8013536 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80075b4:	2201      	movs	r2, #1
 80075b6:	0020      	movs	r0, r4
 80075b8:	4b04      	ldr	r3, [pc, #16]	@ (80075cc <__io_putchar+0x34>)
 80075ba:	a901      	add	r1, sp, #4
 80075bc:	f00b ffbb 	bl	8013536 <HAL_UART_Transmit>
  return ch;
 80075c0:	9801      	ldr	r0, [sp, #4]
}
 80075c2:	b004      	add	sp, #16
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	46c0      	nop			@ (mov r8, r8)
 80075c8:	20000840 	.word	0x20000840
 80075cc:	0000ffff 	.word	0x0000ffff

080075d0 <SystemClock_Config>:
{
 80075d0:	b570      	push	{r4, r5, r6, lr}
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80075d2:	2518      	movs	r5, #24
{
 80075d4:	b0b0      	sub	sp, #192	@ 0xc0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075d6:	224c      	movs	r2, #76	@ 0x4c
 80075d8:	2100      	movs	r1, #0
 80075da:	a81d      	add	r0, sp, #116	@ 0x74
 80075dc:	f013 f8ba 	bl	801a754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075e0:	2210      	movs	r2, #16
 80075e2:	2100      	movs	r1, #0
 80075e4:	a802      	add	r0, sp, #8
 80075e6:	f013 f8b5 	bl	801a754 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80075ea:	002a      	movs	r2, r5
 80075ec:	2100      	movs	r1, #0
 80075ee:	a806      	add	r0, sp, #24
 80075f0:	f013 f8b0 	bl	801a754 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80075f4:	2080      	movs	r0, #128	@ 0x80
 80075f6:	0080      	lsls	r0, r0, #2
 80075f8:	f009 fbc6 	bl	8010d88 <HAL_PWREx_ControlVoltageScaling>
  HAL_PWR_EnableBkUpAccess();
 80075fc:	f009 fb50 	bl	8010ca0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007600:	4a26      	ldr	r2, [pc, #152]	@ (800769c <SystemClock_Config+0xcc>)
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007602:	2640      	movs	r6, #64	@ 0x40
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007604:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007606:	a81d      	add	r0, sp, #116	@ 0x74
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007608:	43ab      	bics	r3, r5
 800760a:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI48;
 800760c:	2326      	movs	r3, #38	@ 0x26
 800760e:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007610:	335b      	adds	r3, #91	@ 0x5b
 8007612:	931f      	str	r3, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007614:	337f      	adds	r3, #127	@ 0x7f
 8007616:	9320      	str	r3, [sp, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // PLL OFF
 8007618:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800761a:	3d17      	subs	r5, #23
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800761c:	9621      	str	r6, [sp, #132]	@ 0x84
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800761e:	9527      	str	r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // PLL OFF
 8007620:	9328      	str	r3, [sp, #160]	@ 0xa0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007622:	f009 fca9 	bl	8010f78 <HAL_RCC_OscConfig>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007626:	4c1e      	ldr	r4, [pc, #120]	@ (80076a0 <SystemClock_Config+0xd0>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007628:	1e01      	subs	r1, r0, #0
 800762a:	d001      	beq.n	8007630 <SystemClock_Config+0x60>
 800762c:	b672      	cpsid	i
  while (1)
 800762e:	e7fe      	b.n	800762e <SystemClock_Config+0x5e>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007630:	0032      	movs	r2, r6
 8007632:	a80d      	add	r0, sp, #52	@ 0x34
 8007634:	f013 f88e 	bl	801a754 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007638:	2380      	movs	r3, #128	@ 0x80
 800763a:	015b      	lsls	r3, r3, #5
 800763c:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800763e:	23c0      	movs	r3, #192	@ 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007640:	a80c      	add	r0, sp, #48	@ 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007642:	051b      	lsls	r3, r3, #20
 8007644:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007646:	f009 ffd5 	bl	80115f4 <HAL_RCCEx_PeriphCLKConfig>
 800764a:	1e01      	subs	r1, r0, #0
 800764c:	d001      	beq.n	8007652 <SystemClock_Config+0x82>
 800764e:	b672      	cpsid	i
  while (1)
 8007650:	e7fe      	b.n	8007650 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8007652:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007654:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007656:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007658:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800765a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;  // PLL이 아닌 HSI 직접 사용
 800765c:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800765e:	f009 ff23 	bl	80114a8 <HAL_RCC_ClockConfig>
 8007662:	2800      	cmp	r0, #0
 8007664:	d001      	beq.n	800766a <SystemClock_Config+0x9a>
 8007666:	b672      	cpsid	i
  while (1)
 8007668:	e7fe      	b.n	8007668 <SystemClock_Config+0x98>
  __HAL_RCC_CRS_CLK_ENABLE();
 800766a:	2280      	movs	r2, #128	@ 0x80
 800766c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800766e:	0252      	lsls	r2, r2, #9
 8007670:	4313      	orrs	r3, r2
 8007672:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007674:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8007676:	9006      	str	r0, [sp, #24]
  __HAL_RCC_CRS_CLK_ENABLE();
 8007678:	4013      	ands	r3, r2
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	9b01      	ldr	r3, [sp, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800767e:	2380      	movs	r3, #128	@ 0x80
 8007680:	055b      	lsls	r3, r3, #21
 8007682:	9307      	str	r3, [sp, #28]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768); // 48MHz 기준
 8007684:	4b07      	ldr	r3, [pc, #28]	@ (80076a4 <SystemClock_Config+0xd4>)
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8007686:	9008      	str	r0, [sp, #32]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768); // 48MHz 기준
 8007688:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800768a:	2322      	movs	r3, #34	@ 0x22
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800768c:	a806      	add	r0, sp, #24
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800768e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8007690:	3b02      	subs	r3, #2
 8007692:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8007694:	f00a fad6 	bl	8011c44 <HAL_RCCEx_CRSConfig>
}
 8007698:	b030      	add	sp, #192	@ 0xc0
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	40021090 	.word	0x40021090
 80076a0:	40021000 	.word	0x40021000
 80076a4:	000005b7 	.word	0x000005b7

080076a8 <main>:
{
 80076a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076aa:	b0c9      	sub	sp, #292	@ 0x124
   SystemClock_Config();
 80076ac:	f7ff ff90 	bl	80075d0 <SystemClock_Config>
  HAL_Init();
 80076b0:	f006 feb4 	bl	800e41c <HAL_Init>
  HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80076b4:	2200      	movs	r2, #0
 80076b6:	2002      	movs	r0, #2
 80076b8:	0011      	movs	r1, r2
 80076ba:	f007 fd9b 	bl	800f1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80076be:	2002      	movs	r0, #2
 80076c0:	f007 fdc2 	bl	800f248 <HAL_NVIC_EnableIRQ>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076c4:	2214      	movs	r2, #20
 80076c6:	2100      	movs	r1, #0
 80076c8:	a81c      	add	r0, sp, #112	@ 0x70
 80076ca:	f013 f843 	bl	801a754 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076ce:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076d0:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076d2:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076d4:	4cd9      	ldr	r4, [pc, #868]	@ (8007a3c <main+0x394>)
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 80076d6:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 80076da:	2110      	movs	r1, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076dc:	4313      	orrs	r3, r2
 80076de:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80076e0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 80076e2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076e4:	4013      	ands	r3, r2
 80076e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ea:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80076ec:	1892      	adds	r2, r2, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ee:	432b      	orrs	r3, r5
 80076f0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80076f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076f4:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076f6:	402b      	ands	r3, r5
 80076f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80076fe:	4333      	orrs	r3, r6
 8007700:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8007702:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007704:	4033      	ands	r3, r6
 8007706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800770a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800770c:	4313      	orrs	r3, r2
 800770e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8007710:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007712:	4013      	ands	r3, r2
 8007714:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8007716:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 800771a:	f008 f92d 	bl	800f978 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Regulator_En_Pin|Middle_Temp_GND_Pin, GPIO_PIN_RESET);
 800771e:	2188      	movs	r1, #136	@ 0x88
 8007720:	2200      	movs	r2, #0
 8007722:	48c7      	ldr	r0, [pc, #796]	@ (8007a40 <main+0x398>)
 8007724:	00c9      	lsls	r1, r1, #3
 8007726:	f008 f927 	bl	800f978 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, GPIO_PIN_RESET);
 800772a:	2200      	movs	r2, #0
 800772c:	2104      	movs	r1, #4
 800772e:	48c5      	ldr	r0, [pc, #788]	@ (8007a44 <main+0x39c>)
 8007730:	f008 f922 	bl	800f978 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007734:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007736:	48c4      	ldr	r0, [pc, #784]	@ (8007a48 <main+0x3a0>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007738:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800773a:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800773c:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800773e:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007740:	961e      	str	r6, [sp, #120]	@ 0x78
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007742:	f007 ffd5 	bl	800f6f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007746:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007748:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800774a:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800774c:	a91c      	add	r1, sp, #112	@ 0x70
 800774e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007750:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007752:	951c      	str	r5, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007754:	951e      	str	r5, [sp, #120]	@ 0x78
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007756:	f007 ffcb 	bl	800f6f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 800775a:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 800775c:	2310      	movs	r3, #16
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 800775e:	a91c      	add	r1, sp, #112	@ 0x70
 8007760:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8007762:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007764:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007766:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007768:	961e      	str	r6, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 800776a:	f007 ffc1 	bl	800f6f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 800776e:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 8007770:	48b3      	ldr	r0, [pc, #716]	@ (8007a40 <main+0x398>)
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 8007772:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 8007774:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 8007776:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007778:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800777a:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800777c:	961e      	str	r6, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 800777e:	f007 ffb7 	bl	800f6f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 8007782:	2204      	movs	r2, #4
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8007784:	48af      	ldr	r0, [pc, #700]	@ (8007a44 <main+0x39c>)
 8007786:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 8007788:	921c      	str	r2, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800778a:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800778c:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800778e:	951e      	str	r5, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8007790:	f007 ffae 	bl	800f6f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 8007794:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8007796:	a91c      	add	r1, sp, #112	@ 0x70
 8007798:	48a9      	ldr	r0, [pc, #676]	@ (8007a40 <main+0x398>)
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 800779a:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800779c:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800779e:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077a0:	951e      	str	r5, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 80077a2:	f007 ffa5 	bl	800f6f0 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80077a6:	2005      	movs	r0, #5
 80077a8:	f007 fd4e 	bl	800f248 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80077ac:	2007      	movs	r0, #7
 80077ae:	f007 fd4b 	bl	800f248 <HAL_NVIC_EnableIRQ>
    Backup_GetMode();
 80077b2:	f7fe fc2f 	bl	8006014 <Backup_GetMode>
    if (Meas_Mode == 4 && HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 80077b6:	4fa5      	ldr	r7, [pc, #660]	@ (8007a4c <main+0x3a4>)
 80077b8:	783b      	ldrb	r3, [r7, #0]
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d107      	bne.n	80077ce <main+0x126>
 80077be:	20a0      	movs	r0, #160	@ 0xa0
 80077c0:	0029      	movs	r1, r5
 80077c2:	05c0      	lsls	r0, r0, #23
 80077c4:	f008 f8d2 	bl	800f96c <HAL_GPIO_ReadPin>
 80077c8:	42a8      	cmp	r0, r5
 80077ca:	d100      	bne.n	80077ce <main+0x126>
    	Meas_Mode = 2;
 80077cc:	703e      	strb	r6, [r7, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80077ce:	2701      	movs	r7, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80077d0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80077d2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80077d4:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80077d6:	433b      	orrs	r3, r7
 80077d8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80077da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80077dc:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80077de:	403b      	ands	r3, r7
 80077e0:	9308      	str	r3, [sp, #32]
 80077e2:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80077e4:	f007 fd06 	bl	800f1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80077e8:	2009      	movs	r0, #9
 80077ea:	f007 fd2d 	bl	800f248 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80077ee:	2200      	movs	r2, #0
 80077f0:	200a      	movs	r0, #10
 80077f2:	0011      	movs	r1, r2
 80077f4:	f007 fcfe 	bl	800f1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80077f8:	200a      	movs	r0, #10
 80077fa:	f007 fd25 	bl	800f248 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80077fe:	220c      	movs	r2, #12
 8007800:	2100      	movs	r1, #0
 8007802:	a81c      	add	r0, sp, #112	@ 0x70
 8007804:	f012 ffa6 	bl	801a754 <memset>
  hadc1.Instance = ADC1;
 8007808:	4e91      	ldr	r6, [pc, #580]	@ (8007a50 <main+0x3a8>)
 800780a:	4b92      	ldr	r3, [pc, #584]	@ (8007a54 <main+0x3ac>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800780c:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 800780e:	6033      	str	r3, [r6, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007810:	23c0      	movs	r3, #192	@ 0xc0
 8007812:	061b      	lsls	r3, r3, #24
 8007814:	6073      	str	r3, [r6, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007816:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007818:	6172      	str	r2, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800781a:	19f2      	adds	r2, r6, r7
 800781c:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800781e:	0032      	movs	r2, r6
 8007820:	322c      	adds	r2, #44	@ 0x2c
 8007822:	7013      	strb	r3, [r2, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8007824:	2207      	movs	r2, #7
 8007826:	6372      	str	r2, [r6, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8007828:	63b2      	str	r2, [r6, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800782a:	0032      	movs	r2, r6
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800782c:	0030      	movs	r0, r6
  hadc1.Init.OversamplingMode = DISABLE;
 800782e:	323c      	adds	r2, #60	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007830:	60b3      	str	r3, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007832:	60f3      	str	r3, [r6, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007834:	6133      	str	r3, [r6, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007836:	8333      	strh	r3, [r6, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007838:	76b3      	strb	r3, [r6, #26]
  hadc1.Init.NbrOfConversion = 1;
 800783a:	61f7      	str	r7, [r6, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800783c:	6273      	str	r3, [r6, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800783e:	62b3      	str	r3, [r6, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007840:	6333      	str	r3, [r6, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8007842:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8007844:	64f3      	str	r3, [r6, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007846:	f006 fe1b 	bl	800e480 <HAL_ADC_Init>
 800784a:	2800      	cmp	r0, #0
 800784c:	d001      	beq.n	8007852 <main+0x1aa>
 800784e:	b672      	cpsid	i
  while (1)
 8007850:	e7fe      	b.n	8007850 <main+0x1a8>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007852:	901d      	str	r0, [sp, #116]	@ 0x74
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8007854:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007856:	a91c      	add	r1, sp, #112	@ 0x70
 8007858:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 800785a:	971c      	str	r7, [sp, #112]	@ 0x70
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800785c:	f007 f858 	bl	800e910 <HAL_ADC_ConfigChannel>
 8007860:	2800      	cmp	r0, #0
 8007862:	d001      	beq.n	8007868 <main+0x1c0>
 8007864:	b672      	cpsid	i
  while (1)
 8007866:	e7fe      	b.n	8007866 <main+0x1be>
  hlcd.Instance = LCD;
 8007868:	4c7b      	ldr	r4, [pc, #492]	@ (8007a58 <main+0x3b0>)
 800786a:	4b7c      	ldr	r3, [pc, #496]	@ (8007a5c <main+0x3b4>)
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800786c:	6060      	str	r0, [r4, #4]
  hlcd.Instance = LCD;
 800786e:	6023      	str	r3, [r4, #0]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8007870:	230c      	movs	r3, #12
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8007872:	60a0      	str	r0, [r4, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8007874:	60e3      	str	r3, [r4, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8007876:	6120      	str	r0, [r4, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8007878:	6160      	str	r0, [r4, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800787a:	61a0      	str	r0, [r4, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800787c:	61e0      	str	r0, [r4, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 800787e:	3304      	adds	r3, #4
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8007880:	62a0      	str	r0, [r4, #40]	@ 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8007882:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8007884:	6320      	str	r0, [r4, #48]	@ 0x30
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8007886:	0020      	movs	r0, r4
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 8007888:	6223      	str	r3, [r4, #32]
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800788a:	f008 f953 	bl	800fb34 <HAL_LCD_Init>
 800788e:	1e05      	subs	r5, r0, #0
 8007890:	d001      	beq.n	8007896 <main+0x1ee>
 8007892:	b672      	cpsid	i
  while (1)
 8007894:	e7fe      	b.n	8007894 <main+0x1ec>
  __HAL_LCD_HIGHDRIVER_ENABLE(&hlcd);
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	0020      	movs	r0, r4
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	433a      	orrs	r2, r7
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	f008 f930 	bl	800fb04 <LCD_WaitForSynchro>
  hspi3.Instance = SPI3;
 80078a4:	486e      	ldr	r0, [pc, #440]	@ (8007a60 <main+0x3b8>)
 80078a6:	4b6f      	ldr	r3, [pc, #444]	@ (8007a64 <main+0x3bc>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80078a8:	6085      	str	r5, [r0, #8]
  hspi3.Instance = SPI3;
 80078aa:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80078ac:	2382      	movs	r3, #130	@ 0x82
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	6043      	str	r3, [r0, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80078b2:	23e0      	movs	r3, #224	@ 0xe0
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80078b8:	2380      	movs	r3, #128	@ 0x80
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	6183      	str	r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 80078be:	3bfa      	subs	r3, #250	@ 0xfa
 80078c0:	3bff      	subs	r3, #255	@ 0xff
 80078c2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078c4:	3301      	adds	r3, #1
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80078c6:	6105      	str	r5, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80078c8:	6145      	str	r5, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078ca:	61c5      	str	r5, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078cc:	6205      	str	r5, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80078ce:	6245      	str	r5, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078d0:	6285      	str	r5, [r0, #40]	@ 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80078d2:	6305      	str	r5, [r0, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078d4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80078d6:	f00a fe75 	bl	80125c4 <HAL_SPI_Init>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d001      	beq.n	80078e2 <main+0x23a>
 80078de:	b672      	cpsid	i
  while (1)
 80078e0:	e7fe      	b.n	80078e0 <main+0x238>
  huart3.Instance = USART3;
 80078e2:	4c61      	ldr	r4, [pc, #388]	@ (8007a68 <main+0x3c0>)
 80078e4:	4b61      	ldr	r3, [pc, #388]	@ (8007a6c <main+0x3c4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80078e6:	60a0      	str	r0, [r4, #8]
  huart3.Instance = USART3;
 80078e8:	6023      	str	r3, [r4, #0]
  huart3.Init.BaudRate = 115200;
 80078ea:	23e1      	movs	r3, #225	@ 0xe1
 80078ec:	025b      	lsls	r3, r3, #9
 80078ee:	6063      	str	r3, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80078f0:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80078f2:	60e0      	str	r0, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80078f4:	6120      	str	r0, [r4, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078f6:	61a0      	str	r0, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80078f8:	61e0      	str	r0, [r4, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078fa:	6220      	str	r0, [r4, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80078fc:	6260      	str	r0, [r4, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078fe:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8007900:	0020      	movs	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007902:	6163      	str	r3, [r4, #20]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8007904:	f00b fee6 	bl	80136d4 <HAL_HalfDuplex_Init>
 8007908:	1e01      	subs	r1, r0, #0
 800790a:	d001      	beq.n	8007910 <main+0x268>
 800790c:	b672      	cpsid	i
  while (1)
 800790e:	e7fe      	b.n	800790e <main+0x266>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007910:	0020      	movs	r0, r4
 8007912:	f00b ff5d 	bl	80137d0 <HAL_UARTEx_SetTxFifoThreshold>
 8007916:	1e01      	subs	r1, r0, #0
 8007918:	d001      	beq.n	800791e <main+0x276>
 800791a:	b672      	cpsid	i
  while (1)
 800791c:	e7fe      	b.n	800791c <main+0x274>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800791e:	0020      	movs	r0, r4
 8007920:	f00b ff76 	bl	8013810 <HAL_UARTEx_SetRxFifoThreshold>
 8007924:	2800      	cmp	r0, #0
 8007926:	d001      	beq.n	800792c <main+0x284>
 8007928:	b672      	cpsid	i
  while (1)
 800792a:	e7fe      	b.n	800792a <main+0x282>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800792c:	0020      	movs	r0, r4
 800792e:	f00b ff31 	bl	8013794 <HAL_UARTEx_DisableFifoMode>
 8007932:	2800      	cmp	r0, #0
 8007934:	d001      	beq.n	800793a <main+0x292>
 8007936:	b672      	cpsid	i
  while (1)
 8007938:	e7fe      	b.n	8007938 <main+0x290>
  hcomp1.Instance = COMP1;
 800793a:	4d4d      	ldr	r5, [pc, #308]	@ (8007a70 <main+0x3c8>)
 800793c:	4b4d      	ldr	r3, [pc, #308]	@ (8007a74 <main+0x3cc>)
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800793e:	61e8      	str	r0, [r5, #28]
  hcomp1.Instance = COMP1;
 8007940:	602b      	str	r3, [r5, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8007942:	2380      	movs	r3, #128	@ 0x80
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	612b      	str	r3, [r5, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO1;
 8007948:	3bb0      	subs	r3, #176	@ 0xb0
 800794a:	616b      	str	r3, [r5, #20]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800794c:	23c0      	movs	r3, #192	@ 0xc0
 800794e:	029b      	lsls	r3, r3, #10
 8007950:	61ab      	str	r3, [r5, #24]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 8007952:	23c0      	movs	r3, #192	@ 0xc0
 8007954:	031b      	lsls	r3, r3, #12
 8007956:	60eb      	str	r3, [r5, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8007958:	2321      	movs	r3, #33	@ 0x21
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800795a:	60a8      	str	r0, [r5, #8]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800795c:	6228      	str	r0, [r5, #32]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800795e:	6068      	str	r0, [r5, #4]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007960:	0028      	movs	r0, r5
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8007962:	626b      	str	r3, [r5, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007964:	f007 fb06 	bl	800ef74 <HAL_COMP_Init>
 8007968:	1e03      	subs	r3, r0, #0
 800796a:	d001      	beq.n	8007970 <main+0x2c8>
 800796c:	b672      	cpsid	i
  while (1)
 800796e:	e7fe      	b.n	800796e <main+0x2c6>
  hlptim1.Instance = LPTIM1;
 8007970:	4841      	ldr	r0, [pc, #260]	@ (8007a78 <main+0x3d0>)
 8007972:	4a42      	ldr	r2, [pc, #264]	@ (8007a7c <main+0x3d4>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8007974:	6043      	str	r3, [r0, #4]
  hlptim1.Instance = LPTIM1;
 8007976:	6002      	str	r2, [r0, #0]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8007978:	4a41      	ldr	r2, [pc, #260]	@ (8007a80 <main+0x3d8>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800797a:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800797c:	6142      	str	r2, [r0, #20]
  hlptim1.Init.Period = 32767;
 800797e:	4a41      	ldr	r2, [pc, #260]	@ (8007a84 <main+0x3dc>)
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8007980:	6243      	str	r3, [r0, #36]	@ 0x24
  hlptim1.Init.Period = 32767;
 8007982:	6202      	str	r2, [r0, #32]
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8007984:	6283      	str	r3, [r0, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8007986:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8007988:	6303      	str	r3, [r0, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 800798a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800798c:	f008 f966 	bl	800fc5c <HAL_LPTIM_Init>
 8007990:	2800      	cmp	r0, #0
 8007992:	d001      	beq.n	8007998 <main+0x2f0>
 8007994:	b672      	cpsid	i
  while (1)
 8007996:	e7fe      	b.n	8007996 <main+0x2ee>
  LCD_Clear_Display(LCD_data);
 8007998:	483b      	ldr	r0, [pc, #236]	@ (8007a88 <main+0x3e0>)
 800799a:	f7fd f9ad 	bl	8004cf8 <LCD_Clear_Display>
  HAL_PWR_EnableBkUpAccess();
 800799e:	f009 f97f 	bl	8010ca0 <HAL_PWR_EnableBkUpAccess>
  sConfigPVD.PVDLevel = level;
 80079a2:	2300      	movs	r3, #0
 80079a4:	931c      	str	r3, [sp, #112]	@ 0x70
  sConfigPVD.Mode = PWR_PVD_MODE_IT_FALLING;
 80079a6:	4b39      	ldr	r3, [pc, #228]	@ (8007a8c <main+0x3e4>)
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80079a8:	a81c      	add	r0, sp, #112	@ 0x70
  sConfigPVD.Mode = PWR_PVD_MODE_IT_FALLING;
 80079aa:	931d      	str	r3, [sp, #116]	@ 0x74
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80079ac:	f009 f982 	bl	8010cb4 <HAL_PWR_ConfigPVD>
  HAL_PWR_EnablePVD();
 80079b0:	f009 f9c2 	bl	8010d38 <HAL_PWR_EnablePVD>
  if ( HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG) == 0x0000)
 80079b4:	4c36      	ldr	r4, [pc, #216]	@ (8007a90 <main+0x3e8>)
 80079b6:	2101      	movs	r1, #1
 80079b8:	0020      	movs	r0, r4
 80079ba:	f00a fcd3 	bl	8012364 <HAL_RTCEx_BKUPRead>
 80079be:	1e07      	subs	r7, r0, #0
 80079c0:	d000      	beq.n	80079c4 <main+0x31c>
 80079c2:	e0a1      	b.n	8007b08 <main+0x460>
  RTC_TimeTypeDef sTime = {0};
 80079c4:	0001      	movs	r1, r0
 80079c6:	2214      	movs	r2, #20
 80079c8:	a81c      	add	r0, sp, #112	@ 0x70
 80079ca:	f012 fec3 	bl	801a754 <memset>
  hrtc.Instance = RTC;
 80079ce:	4b31      	ldr	r3, [pc, #196]	@ (8007a94 <main+0x3ec>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80079d0:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 80079d2:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 80079d4:	237f      	movs	r3, #127	@ 0x7f
 80079d6:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 80079d8:	3380      	adds	r3, #128	@ 0x80
 80079da:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80079dc:	2380      	movs	r3, #128	@ 0x80
 80079de:	05db      	lsls	r3, r3, #23
  RTC_DateTypeDef sDate = {0};
 80079e0:	970d      	str	r7, [sp, #52]	@ 0x34
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80079e2:	6067      	str	r7, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80079e4:	6127      	str	r7, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80079e6:	6167      	str	r7, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80079e8:	61a7      	str	r7, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80079ea:	61e3      	str	r3, [r4, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80079ec:	6227      	str	r7, [r4, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80079ee:	6267      	str	r7, [r4, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80079f0:	f00a f9d0 	bl	8011d94 <HAL_RTC_Init>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d001      	beq.n	80079fc <main+0x354>
 80079f8:	b672      	cpsid	i
  while (1)
 80079fa:	e7fe      	b.n	80079fa <main+0x352>
  sTime.Hours = 0x0;
 80079fc:	2260      	movs	r2, #96	@ 0x60
 80079fe:	ab04      	add	r3, sp, #16
 8007a00:	189b      	adds	r3, r3, r2
 8007a02:	8018      	strh	r0, [r3, #0]
  sTime.Seconds = 0x0;
 8007a04:	3202      	adds	r2, #2
 8007a06:	ab04      	add	r3, sp, #16
 8007a08:	189b      	adds	r3, r3, r2
 8007a0a:	7018      	strb	r0, [r3, #0]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007a0c:	3a61      	subs	r2, #97	@ 0x61
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007a0e:	901f      	str	r0, [sp, #124]	@ 0x7c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007a10:	9020      	str	r0, [sp, #128]	@ 0x80
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007a12:	a91c      	add	r1, sp, #112	@ 0x70
 8007a14:	0020      	movs	r0, r4
 8007a16:	f00a fa25 	bl	8011e64 <HAL_RTC_SetTime>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d001      	beq.n	8007a22 <main+0x37a>
 8007a1e:	b672      	cpsid	i
  while (1)
 8007a20:	e7fe      	b.n	8007a20 <main+0x378>
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8007a22:	4b1d      	ldr	r3, [pc, #116]	@ (8007a98 <main+0x3f0>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007a24:	2201      	movs	r2, #1
 8007a26:	0020      	movs	r0, r4
 8007a28:	a90d      	add	r1, sp, #52	@ 0x34
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8007a2a:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007a2c:	f00a faa8 	bl	8011f80 <HAL_RTC_SetDate>
 8007a30:	9005      	str	r0, [sp, #20]
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d032      	beq.n	8007a9c <main+0x3f4>
 8007a36:	b672      	cpsid	i
  while (1)
 8007a38:	e7fe      	b.n	8007a38 <main+0x390>
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	50000400 	.word	0x50000400
 8007a44:	50000c00 	.word	0x50000c00
 8007a48:	50000800 	.word	0x50000800
 8007a4c:	20000535 	.word	0x20000535
 8007a50:	20000aec 	.word	0x20000aec
 8007a54:	40012400 	.word	0x40012400
 8007a58:	20000a80 	.word	0x20000a80
 8007a5c:	40002400 	.word	0x40002400
 8007a60:	20000994 	.word	0x20000994
 8007a64:	40003c00 	.word	0x40003c00
 8007a68:	20000840 	.word	0x20000840
 8007a6c:	40004800 	.word	0x40004800
 8007a70:	20000abc 	.word	0x20000abc
 8007a74:	40010200 	.word	0x40010200
 8007a78:	20000a28 	.word	0x20000a28
 8007a7c:	40007c00 	.word	0x40007c00
 8007a80:	0000ffff 	.word	0x0000ffff
 8007a84:	00007fff 	.word	0x00007fff
 8007a88:	20000514 	.word	0x20000514
 8007a8c:	00010002 	.word	0x00010002
 8007a90:	200009f8 	.word	0x200009f8
 8007a94:	40002800 	.word	0x40002800
 8007a98:	25270502 	.word	0x25270502
      device_config.temp_max = INT16_MIN;
 8007a9c:	4ad1      	ldr	r2, [pc, #836]	@ (8007de4 <main+0x73c>)
 8007a9e:	4bd2      	ldr	r3, [pc, #840]	@ (8007de8 <main+0x740>)
 8007aa0:	0017      	movs	r7, r2
 8007aa2:	6013      	str	r3, [r2, #0]
      device_config.dose_max = 0xFFFFFFFF;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	425b      	negs	r3, r3
      SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_DISABLE);
 8007aa8:	49d0      	ldr	r1, [pc, #832]	@ (8007dec <main+0x744>)
      device_config.dose_max = 0xFFFFFFFF;
 8007aaa:	6053      	str	r3, [r2, #4]
      device_config.mark = 0;
 8007aac:	9b05      	ldr	r3, [sp, #20]
      printf("[Debug][Set] alarm_state Raw: 0x%08lX\n", device_config.alarm_state);
 8007aae:	48d0      	ldr	r0, [pc, #832]	@ (8007df0 <main+0x748>)
      device_config.mark = 0;
 8007ab0:	7513      	strb	r3, [r2, #20]
      SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_DISABLE);
 8007ab2:	6191      	str	r1, [r2, #24]
      printf("[Debug][Set] alarm_state Raw: 0x%08lX\n", device_config.alarm_state);
 8007ab4:	f012 fc82 	bl	801a3bc <iprintf>
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007ab8:	2003      	movs	r0, #3
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8007aba:	69ba      	ldr	r2, [r7, #24]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8007abc:	0b13      	lsrs	r3, r2, #12
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007abe:	4003      	ands	r3, r0
 8007ac0:	9306      	str	r3, [sp, #24]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8007ac2:	0a91      	lsrs	r1, r2, #10
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2));
 8007ac4:	0c93      	lsrs	r3, r2, #18
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007ac6:	4001      	ands	r1, r0
 8007ac8:	4003      	ands	r3, r0
 8007aca:	9107      	str	r1, [sp, #28]
 8007acc:	9302      	str	r3, [sp, #8]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8007ace:	0a11      	lsrs	r1, r2, #8
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 8007ad0:	0c13      	lsrs	r3, r2, #16
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8007ad2:	0b92      	lsrs	r2, r2, #14
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007ad4:	4003      	ands	r3, r0
 8007ad6:	4002      	ands	r2, r0
 8007ad8:	4001      	ands	r1, r0
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	9200      	str	r2, [sp, #0]
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	9a07      	ldr	r2, [sp, #28]
 8007ae2:	48c4      	ldr	r0, [pc, #784]	@ (8007df4 <main+0x74c>)
 8007ae4:	f012 fc6a 	bl	801a3bc <iprintf>
      Save_All_Config_To_BackupRegister(&device_config);
 8007ae8:	0038      	movs	r0, r7
 8007aea:	f7fe fce3 	bl	80064b4 <Save_All_Config_To_BackupRegister>
      HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, MODE_Boot);
 8007aee:	2201      	movs	r2, #1
 8007af0:	0020      	movs	r0, r4
 8007af2:	0011      	movs	r1, r2
 8007af4:	f00a fc2e 	bl	8012354 <HAL_RTCEx_BKUPWrite>
      idx_rad = 0;
 8007af8:	4bbf      	ldr	r3, [pc, #764]	@ (8007df8 <main+0x750>)
 8007afa:	9a05      	ldr	r2, [sp, #20]
      printf("First Boot\r\n");
 8007afc:	48bf      	ldr	r0, [pc, #764]	@ (8007dfc <main+0x754>)
      idx_rad = 0;
 8007afe:	801a      	strh	r2, [r3, #0]
      printf("First Boot\r\n");
 8007b00:	f012 fccc 	bl	801a49c <puts>
      Load_DefaultSettings();
 8007b04:	f002 f896 	bl	8009c34 <Load_DefaultSettings>
  uint32_t pwrmode_bits = (COMP1->CSR & (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0));
 8007b08:	22c0      	movs	r2, #192	@ 0xc0
 8007b0a:	4bbd      	ldr	r3, [pc, #756]	@ (8007e00 <main+0x758>)
 8007b0c:	0312      	lsls	r2, r2, #12
 8007b0e:	681b      	ldr	r3, [r3, #0]
	  printf("Low Power OK\r\n");
 8007b10:	48bc      	ldr	r0, [pc, #752]	@ (8007e04 <main+0x75c>)
  uint32_t pwrmode_bits = (COMP1->CSR & (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0));
 8007b12:	4013      	ands	r3, r2
  if (pwrmode_bits == (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0)) {
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d000      	beq.n	8007b1a <main+0x472>
	  printf( "Low Power non\r\n");
 8007b18:	48bb      	ldr	r0, [pc, #748]	@ (8007e08 <main+0x760>)
 8007b1a:	f012 fcbf 	bl	801a49c <puts>
  SPI_FLASH_Init();
 8007b1e:	f002 fb37 	bl	800a190 <SPI_FLASH_Init>
  current_settings = cfg;
 8007b22:	4fba      	ldr	r7, [pc, #744]	@ (8007e0c <main+0x764>)
 8007b24:	22af      	movs	r2, #175	@ 0xaf
 8007b26:	a91c      	add	r1, sp, #112	@ 0x70
 8007b28:	0038      	movs	r0, r7
 8007b2a:	f012 fedd 	bl	801a8e8 <memcpy>
  Init_DeviceSettings();
 8007b2e:	f002 f96b 	bl	8009e08 <Init_DeviceSettings>
  printf( "Regulatior On!\r\n");
 8007b32:	48b7      	ldr	r0, [pc, #732]	@ (8007e10 <main+0x768>)
 8007b34:	f012 fcb2 	bl	801a49c <puts>
  HAL_GPIO_WritePin(Regulator_En_GPIO_Port, Regulator_En_Pin, GPIO_PIN_SET); // 핀 High 상태로 출력
 8007b38:	2180      	movs	r1, #128	@ 0x80
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	00c9      	lsls	r1, r1, #3
 8007b3e:	48b5      	ldr	r0, [pc, #724]	@ (8007e14 <main+0x76c>)
 8007b40:	f007 ff1a 	bl	800f978 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8007b44:	0030      	movs	r0, r6
 8007b46:	f007 f931 	bl	800edac <HAL_ADCEx_Calibration_Start>
  uint32_t cal_factor = HAL_ADCEx_Calibration_GetValue(&hadc1);
 8007b4a:	0030      	movs	r0, r6
 8007b4c:	f007 f9de 	bl	800ef0c <HAL_ADCEx_Calibration_GetValue>
 8007b50:	0001      	movs	r1, r0
  HAL_ADCEx_Calibration_SetValue(&hadc1, cal_factor);
 8007b52:	0030      	movs	r0, r6
 8007b54:	f007 f9e0 	bl	800ef18 <HAL_ADCEx_Calibration_SetValue>
  HAL_COMP_Start(&hcomp1);
 8007b58:	0028      	movs	r0, r5
 8007b5a:	f007 faf5 	bl	800f148 <HAL_COMP_Start>
  uint32_t prevTick = HAL_GetTick();
 8007b5e:	f006 fc75 	bl	800e44c <HAL_GetTick>
  Load_All_Config_From_BackupRegister(&device_config);
 8007b62:	4ba0      	ldr	r3, [pc, #640]	@ (8007de4 <main+0x73c>)
  uint32_t prevTick = HAL_GetTick();
 8007b64:	9007      	str	r0, [sp, #28]
  Load_All_Config_From_BackupRegister(&device_config);
 8007b66:	0018      	movs	r0, r3
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	f7fe fdfd 	bl	8006768 <Load_All_Config_From_BackupRegister>
  meas_data_log_fast_init(Index_num);
 8007b6e:	4baa      	ldr	r3, [pc, #680]	@ (8007e18 <main+0x770>)
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007b70:	4caa      	ldr	r4, [pc, #680]	@ (8007e1c <main+0x774>)
  meas_data_log_fast_init(Index_num);
 8007b72:	8818      	ldrh	r0, [r3, #0]
 8007b74:	f000 fe40 	bl	80087f8 <meas_data_log_fast_init>
  printf("[DEBUG] rad_interval=%u, temp_interval=%u, rad_ratio=%u\r\n",
 8007b78:	003a      	movs	r2, r7
 8007b7a:	3275      	adds	r2, #117	@ 0x75
 8007b7c:	7811      	ldrb	r1, [r2, #0]
 8007b7e:	003a      	movs	r2, r7
 8007b80:	3276      	adds	r2, #118	@ 0x76
 8007b82:	7812      	ldrb	r2, [r2, #0]
 8007b84:	4ba6      	ldr	r3, [pc, #664]	@ (8007e20 <main+0x778>)
 8007b86:	0212      	lsls	r2, r2, #8
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	0039      	movs	r1, r7
 8007b8c:	3177      	adds	r1, #119	@ 0x77
 8007b8e:	7809      	ldrb	r1, [r1, #0]
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	0409      	lsls	r1, r1, #16
 8007b94:	4311      	orrs	r1, r2
 8007b96:	003a      	movs	r2, r7
 8007b98:	3278      	adds	r2, #120	@ 0x78
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	0612      	lsls	r2, r2, #24
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	0039      	movs	r1, r7
 8007ba2:	3171      	adds	r1, #113	@ 0x71
 8007ba4:	7808      	ldrb	r0, [r1, #0]
 8007ba6:	0039      	movs	r1, r7
 8007ba8:	3172      	adds	r1, #114	@ 0x72
 8007baa:	7809      	ldrb	r1, [r1, #0]
 8007bac:	0209      	lsls	r1, r1, #8
 8007bae:	4301      	orrs	r1, r0
 8007bb0:	0038      	movs	r0, r7
 8007bb2:	3073      	adds	r0, #115	@ 0x73
 8007bb4:	7800      	ldrb	r0, [r0, #0]
 8007bb6:	0400      	lsls	r0, r0, #16
 8007bb8:	4308      	orrs	r0, r1
 8007bba:	0039      	movs	r1, r7
 8007bbc:	3174      	adds	r1, #116	@ 0x74
 8007bbe:	7809      	ldrb	r1, [r1, #0]
 8007bc0:	0609      	lsls	r1, r1, #24
 8007bc2:	4301      	orrs	r1, r0
 8007bc4:	4897      	ldr	r0, [pc, #604]	@ (8007e24 <main+0x77c>)
 8007bc6:	f012 fbf9 	bl	801a3bc <iprintf>
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007bca:	2180      	movs	r1, #128	@ 0x80
 8007bcc:	0020      	movs	r0, r4
 8007bce:	0189      	lsls	r1, r1, #6
 8007bd0:	f007 fecc 	bl	800f96c <HAL_GPIO_ReadPin>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	4198      	sbcs	r0, r3
  printf("VBUS HAL_GPIO_ReadPin: %d\r\n", HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin));
 8007bd8:	2180      	movs	r1, #128	@ 0x80
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007bda:	4d93      	ldr	r5, [pc, #588]	@ (8007e28 <main+0x780>)
 8007bdc:	b2c0      	uxtb	r0, r0
 8007bde:	7028      	strb	r0, [r5, #0]
  printf("VBUS HAL_GPIO_ReadPin: %d\r\n", HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin));
 8007be0:	0189      	lsls	r1, r1, #6
 8007be2:	0020      	movs	r0, r4
 8007be4:	f007 fec2 	bl	800f96c <HAL_GPIO_ReadPin>
 8007be8:	4b90      	ldr	r3, [pc, #576]	@ (8007e2c <main+0x784>)
 8007bea:	0001      	movs	r1, r0
 8007bec:	0018      	movs	r0, r3
 8007bee:	f012 fbe5 	bl	801a3bc <iprintf>
  printf("VBUS IDR: %d\r\n", (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) ? 1 : 0);
 8007bf2:	6921      	ldr	r1, [r4, #16]
 8007bf4:	488e      	ldr	r0, [pc, #568]	@ (8007e30 <main+0x788>)
 8007bf6:	0489      	lsls	r1, r1, #18
 8007bf8:	0fc9      	lsrs	r1, r1, #31
 8007bfa:	f012 fbdf 	bl	801a3bc <iprintf>
  if (USB_State){ // 전력 상관 없을시 수정
 8007bfe:	782b      	ldrb	r3, [r5, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d02d      	beq.n	8007c60 <main+0x5b8>
	  RTC_Disable_All_Wakeup();
 8007c04:	f7fd fe38 	bl	8005878 <RTC_Disable_All_Wakeup>
		  LCD_Clear_Display(LCD_data);
 8007c08:	4c8a      	ldr	r4, [pc, #552]	@ (8007e34 <main+0x78c>)
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	f7fd f874 	bl	8004cf8 <LCD_Clear_Display>
		  LCD_Display_USB_Load(LCD_data);// Loading USB화면 // Loading USB화면
 8007c10:	0020      	movs	r0, r4
 8007c12:	f7fc fef9 	bl	8004a08 <LCD_Display_USB_Load>
		if(current_settings.mode_status == 0x03){ // Stop : 0x00  Start : 0x01  pause : 0x02  Over : 0x03
 8007c16:	003b      	movs	r3, r7
 8007c18:	338c      	adds	r3, #140	@ 0x8c
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d11a      	bne.n	8007c56 <main+0x5ae>
		RAD_Fatfs_MountOnly();
 8007c20:	f001 fef6 	bl	8009a10 <RAD_Fatfs_MountOnly>
      tmp.mean_kinetic_temp = 0.0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	9312      	str	r3, [sp, #72]	@ 0x48
      tmp.start_time = start_time;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c2c:	9314      	str	r3, [sp, #80]	@ 0x50
      tmp.stop_time = stop_time;
 8007c2e:	9315      	str	r3, [sp, #84]	@ 0x54
      tmp.data_points_temp_count = idx_temp;
 8007c30:	4b81      	ldr	r3, [pc, #516]	@ (8007e38 <main+0x790>)
	 csv_gen_template_file(&current_settings);
 8007c32:	0038      	movs	r0, r7
      tmp.data_points_temp_count = idx_temp;
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	9317      	str	r3, [sp, #92]	@ 0x5c
	 csv_gen_template_file(&current_settings);
 8007c38:	f003 fe88 	bl	800b94c <csv_gen_template_file>
     if(current_settings.report_format != 0x00){
 8007c3c:	003b      	movs	r3, r7
 8007c3e:	3379      	adds	r3, #121	@ 0x79
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <main+0x5ae>
    pdf_gen_template_file();
 8007c46:	f004 fb89 	bl	800c35c <pdf_gen_template_file>
    pdf_append_all_flash_log_entries();
 8007c4a:	f004 fbef 	bl	800c42c <pdf_append_all_flash_log_entries>
    pdf_gen_completed_report(&tmp,&current_settings);
 8007c4e:	0039      	movs	r1, r7
 8007c50:	a80d      	add	r0, sp, #52	@ 0x34
 8007c52:	f004 fc79 	bl	800c548 <pdf_gen_completed_report>
    RAD_USBX_Device_Init();
 8007c56:	f000 fef7 	bl	8008a48 <RAD_USBX_Device_Init>
    usb_inited = 1;
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4b77      	ldr	r3, [pc, #476]	@ (8007e3c <main+0x794>)
 8007c5e:	701a      	strb	r2, [r3, #0]
	  if (USB_State){
 8007c60:	4d71      	ldr	r5, [pc, #452]	@ (8007e28 <main+0x780>)
 8007c62:	782b      	ldrb	r3, [r5, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d056      	beq.n	8007d16 <main+0x66e>
		  if (!usb_inited){
 8007c68:	4b74      	ldr	r3, [pc, #464]	@ (8007e3c <main+0x794>)
 8007c6a:	4e72      	ldr	r6, [pc, #456]	@ (8007e34 <main+0x78c>)
 8007c6c:	781c      	ldrb	r4, [r3, #0]
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	d12d      	bne.n	8007cce <main+0x626>
			      RTC_Disable_All_Wakeup();
 8007c72:	f7fd fe01 	bl	8005878 <RTC_Disable_All_Wakeup>
				  LCD_Clear_Display(LCD_data);
 8007c76:	0030      	movs	r0, r6
 8007c78:	f7fd f83e 	bl	8004cf8 <LCD_Clear_Display>
				  LCD_Display_USB_Load(LCD_data);// Loading USB화면// Loading USB화면
 8007c7c:	0030      	movs	r0, r6
 8007c7e:	f7fc fec3 	bl	8004a08 <LCD_Display_USB_Load>
			if(current_settings.mode_status == 0x03){ // Stop : 0x00  Start : 0x01  pause : 0x02  Over : 0x03
 8007c82:	4b62      	ldr	r3, [pc, #392]	@ (8007e0c <main+0x764>)
 8007c84:	9306      	str	r3, [sp, #24]
 8007c86:	4b6e      	ldr	r3, [pc, #440]	@ (8007e40 <main+0x798>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d11a      	bne.n	8007cc4 <main+0x61c>
			RAD_Fatfs_MountOnly();
 8007c8e:	f001 febf 	bl	8009a10 <RAD_Fatfs_MountOnly>
	        tmp.mean_kinetic_temp = 0.0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	9312      	str	r3, [sp, #72]	@ 0x48
	        tmp.data_points_temp_count  = idx_temp;
 8007c96:	4b68      	ldr	r3, [pc, #416]	@ (8007e38 <main+0x790>)
		 csv_gen_template_file(&current_settings);
 8007c98:	9806      	ldr	r0, [sp, #24]
	        tmp.data_points_temp_count  = idx_temp;
 8007c9a:	881b      	ldrh	r3, [r3, #0]
	        tmp.start_time = start_time;
 8007c9c:	9413      	str	r4, [sp, #76]	@ 0x4c
	        tmp.data_points_temp_count  = idx_temp;
 8007c9e:	9317      	str	r3, [sp, #92]	@ 0x5c
	        tmp.start_time = start_time;
 8007ca0:	9414      	str	r4, [sp, #80]	@ 0x50
	        tmp.stop_time = stop_time;
 8007ca2:	9415      	str	r4, [sp, #84]	@ 0x54
	        tmp.data_points_radiation_count = 0;
 8007ca4:	9418      	str	r4, [sp, #96]	@ 0x60
		 csv_gen_template_file(&current_settings);
 8007ca6:	f003 fe51 	bl	800b94c <csv_gen_template_file>
	     if(current_settings.report_format != 0x00){
 8007caa:	9b06      	ldr	r3, [sp, #24]
 8007cac:	3379      	adds	r3, #121	@ 0x79
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <main+0x61c>
	    pdf_gen_template_file();
 8007cb4:	f004 fb52 	bl	800c35c <pdf_gen_template_file>
	    pdf_append_all_flash_log_entries();
 8007cb8:	f004 fbb8 	bl	800c42c <pdf_append_all_flash_log_entries>
	    pdf_gen_completed_report(&tmp,&current_settings);
 8007cbc:	9906      	ldr	r1, [sp, #24]
 8007cbe:	a80d      	add	r0, sp, #52	@ 0x34
 8007cc0:	f004 fc42 	bl	800c548 <pdf_gen_completed_report>
		  RAD_USBX_Device_Init();
 8007cc4:	f000 fec0 	bl	8008a48 <RAD_USBX_Device_Init>
		  usb_inited = 1;
 8007cc8:	2201      	movs	r2, #1
 8007cca:	4b5c      	ldr	r3, [pc, #368]	@ (8007e3c <main+0x794>)
 8007ccc:	701a      	strb	r2, [r3, #0]
		  RAD_USBX_Device_Process();
 8007cce:	f000 fefd 	bl	8008acc <RAD_USBX_Device_Process>
		  LCD_Clear_Display(LCD_data);
 8007cd2:	0030      	movs	r0, r6
 8007cd4:	f7fd f810 	bl	8004cf8 <LCD_Clear_Display>
		  LCD_Display_USB(LCD_data);
 8007cd8:	0030      	movs	r0, r6
 8007cda:	f7fc fe59 	bl	8004990 <LCD_Display_USB>
		  USB_HID_Receive(USB_rev_buff, &len);
 8007cde:	4959      	ldr	r1, [pc, #356]	@ (8007e44 <main+0x79c>)
 8007ce0:	4859      	ldr	r0, [pc, #356]	@ (8007e48 <main+0x7a0>)
 8007ce2:	f000 fff3 	bl	8008ccc <USB_HID_Receive>
		  if (usbx_host_req_records == 1) {
 8007ce6:	4b59      	ldr	r3, [pc, #356]	@ (8007e4c <main+0x7a4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d113      	bne.n	8007d16 <main+0x66e>
		      if ((HAL_GetTick() - usb_send_record_prevTick) >= USB_HID_SEND_RECORDS_SPEED_MS) {
 8007cee:	f006 fbad 	bl	800e44c <HAL_GetTick>
 8007cf2:	4e57      	ldr	r6, [pc, #348]	@ (8007e50 <main+0x7a8>)
 8007cf4:	6833      	ldr	r3, [r6, #0]
 8007cf6:	1ac0      	subs	r0, r0, r3
 8007cf8:	2802      	cmp	r0, #2
 8007cfa:	d90c      	bls.n	8007d16 <main+0x66e>
		          if (USB_HID_Send_Record(cur_record_num) != 0) {
 8007cfc:	4c55      	ldr	r4, [pc, #340]	@ (8007e54 <main+0x7ac>)
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	b280      	uxth	r0, r0
 8007d02:	f000 ff0d 	bl	8008b20 <USB_HID_Send_Record>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d102      	bne.n	8007d10 <main+0x668>
		              cur_record_num++;
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	6023      	str	r3, [r4, #0]
		          usb_send_record_prevTick = HAL_GetTick();
 8007d10:	f006 fb9c 	bl	800e44c <HAL_GetTick>
 8007d14:	6030      	str	r0, [r6, #0]
	  if (HAL_GetTick() - prevTick >= 1000)
 8007d16:	f006 fb99 	bl	800e44c <HAL_GetTick>
 8007d1a:	9b07      	ldr	r3, [sp, #28]
 8007d1c:	1ac0      	subs	r0, r0, r3
 8007d1e:	23fa      	movs	r3, #250	@ 0xfa
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4298      	cmp	r0, r3
 8007d24:	d39c      	bcc.n	8007c60 <main+0x5b8>
		  Press_Action();
 8007d26:	f7fe ff4d 	bl	8006bc4 <Press_Action>
		  Read_Temp();
 8007d2a:	f7fd fd2f 	bl	800578c <Read_Temp>
		  if (USB_State){
 8007d2e:	782b      	ldrb	r3, [r5, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d100      	bne.n	8007d36 <main+0x68e>
 8007d34:	e0f7      	b.n	8007f26 <main+0x87e>
			  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007d36:	2180      	movs	r1, #128	@ 0x80
 8007d38:	4838      	ldr	r0, [pc, #224]	@ (8007e1c <main+0x774>)
 8007d3a:	0189      	lsls	r1, r1, #6
 8007d3c:	f007 fe16 	bl	800f96c <HAL_GPIO_ReadPin>
 8007d40:	1e43      	subs	r3, r0, #1
 8007d42:	4198      	sbcs	r0, r3
 8007d44:	b2c0      	uxtb	r0, r0
 8007d46:	7028      	strb	r0, [r5, #0]
			  if (!USB_State) {
 8007d48:	782b      	ldrb	r3, [r5, #0]
 8007d4a:	b2dc      	uxtb	r4, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d11d      	bne.n	8007d8c <main+0x6e4>
			     printf("USB non State!\r\n");
 8007d50:	4841      	ldr	r0, [pc, #260]	@ (8007e58 <main+0x7b0>)
 8007d52:	f012 fba3 	bl	801a49c <puts>
			     Save_CurrentSettings();
 8007d56:	f001 ff61 	bl	8009c1c <Save_CurrentSettings>
			     LCD_Clear_Display(LCD_data);
 8007d5a:	4836      	ldr	r0, [pc, #216]	@ (8007e34 <main+0x78c>)
 8007d5c:	f7fc ffcc 	bl	8004cf8 <LCD_Clear_Display>
			  if(current_settings.start_mode == 0x00 || current_settings.start_mode == 0x01){
 8007d60:	4d2a      	ldr	r5, [pc, #168]	@ (8007e0c <main+0x764>)
 8007d62:	4e3e      	ldr	r6, [pc, #248]	@ (8007e5c <main+0x7b4>)
 8007d64:	002b      	movs	r3, r5
 8007d66:	7832      	ldrb	r2, [r6, #0]
 8007d68:	338c      	adds	r3, #140	@ 0x8c
 8007d6a:	2a01      	cmp	r2, #1
 8007d6c:	d900      	bls.n	8007d70 <main+0x6c8>
 8007d6e:	e07f      	b.n	8007e70 <main+0x7c8>
			     if(current_settings.mode_status == 0x00){
 8007d70:	781d      	ldrb	r5, [r3, #0]
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	d11c      	bne.n	8007db0 <main+0x708>
			    	 Set_ModeStatus(mode_internal_backup_stop);
 8007d76:	0028      	movs	r0, r5
 8007d78:	f002 f938 	bl	8009fec <Set_ModeStatus>
			    	 printf("Button Start_Stop\r\n");
 8007d7c:	4838      	ldr	r0, [pc, #224]	@ (8007e60 <main+0x7b8>)
 8007d7e:	f012 fb8d 	bl	801a49c <puts>
 	  	 		     Switch_Backup_reg(MODE_Stop);
 8007d82:	2002      	movs	r0, #2
 8007d84:	f7fe f9ba 	bl	80060fc <Switch_Backup_reg>
 	  	 		    First_Measure = 0;
 8007d88:	4b36      	ldr	r3, [pc, #216]	@ (8007e64 <main+0x7bc>)
	   	  	 			 button_flag = false;
 8007d8a:	701d      	strb	r5, [r3, #0]
		  if (!usb_inited)
 8007d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8007e3c <main+0x794>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <main+0x700>
		  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007d94:	2180      	movs	r1, #128	@ 0x80
 8007d96:	4821      	ldr	r0, [pc, #132]	@ (8007e1c <main+0x774>)
 8007d98:	0189      	lsls	r1, r1, #6
 8007d9a:	f007 fde7 	bl	800f96c <HAL_GPIO_ReadPin>
 8007d9e:	1e43      	subs	r3, r0, #1
 8007da0:	4198      	sbcs	r0, r3
 8007da2:	4b21      	ldr	r3, [pc, #132]	@ (8007e28 <main+0x780>)
 8007da4:	b2c0      	uxtb	r0, r0
 8007da6:	7018      	strb	r0, [r3, #0]
	  	  prevTick = HAL_GetTick();
 8007da8:	f006 fb50 	bl	800e44c <HAL_GetTick>
 8007dac:	9007      	str	r0, [sp, #28]
 8007dae:	e757      	b.n	8007c60 <main+0x5b8>
			     else if (current_settings.mode_status == 0x01 || current_settings.mode_status == 0x02){
 8007db0:	1e6b      	subs	r3, r5, #1
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d80b      	bhi.n	8007dce <main+0x726>
			    	 printf("Return to Pause Mode\r\n");
 8007db6:	482c      	ldr	r0, [pc, #176]	@ (8007e68 <main+0x7c0>)
 8007db8:	f012 fb70 	bl	801a49c <puts>
			       Set_ModeStatus(mode_internal_backup_pause);
 8007dbc:	2002      	movs	r0, #2
 8007dbe:	f002 f915 	bl	8009fec <Set_ModeStatus>
	  	 		    Switch_Backup_reg(MODE_Pause);
 8007dc2:	2004      	movs	r0, #4
		  	 		    Switch_Backup_reg(MODE_End);
 8007dc4:	f7fe f99a 	bl	80060fc <Switch_Backup_reg>
		  	 		    First_Measure = 0;
 8007dc8:	4b26      	ldr	r3, [pc, #152]	@ (8007e64 <main+0x7bc>)
	   	  	 			 button_flag = false;
 8007dca:	701c      	strb	r4, [r3, #0]
	   	  	 	     	 Tick_Save = 0;
 8007dcc:	e7de      	b.n	8007d8c <main+0x6e4>
			     else if (current_settings.mode_status == 0x03){
 8007dce:	2d03      	cmp	r5, #3
 8007dd0:	d1dc      	bne.n	8007d8c <main+0x6e4>
			    	 printf("Return to End Mode\r\n");
 8007dd2:	4826      	ldr	r0, [pc, #152]	@ (8007e6c <main+0x7c4>)
 8007dd4:	f012 fb62 	bl	801a49c <puts>
			    	 Set_ModeStatus(mode_internal_backup_end);
 8007dd8:	0028      	movs	r0, r5
 8007dda:	f002 f907 	bl	8009fec <Set_ModeStatus>
		  	 		    Switch_Backup_reg(MODE_End);
 8007dde:	2007      	movs	r0, #7
 8007de0:	e7f0      	b.n	8007dc4 <main+0x71c>
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	20000b50 	.word	0x20000b50
 8007de8:	7fff8000 	.word	0x7fff8000
 8007dec:	00022200 	.word	0x00022200
 8007df0:	0801db46 	.word	0x0801db46
 8007df4:	0801db6d 	.word	0x0801db6d
 8007df8:	20000500 	.word	0x20000500
 8007dfc:	0801dbaa 	.word	0x0801dbaa
 8007e00:	40010200 	.word	0x40010200
 8007e04:	0801dbb6 	.word	0x0801dbb6
 8007e08:	0801dbc4 	.word	0x0801dbc4
 8007e0c:	20002bac 	.word	0x20002bac
 8007e10:	0801dbd3 	.word	0x0801dbd3
 8007e14:	50000400 	.word	0x50000400
 8007e18:	2000004c 	.word	0x2000004c
 8007e1c:	50000800 	.word	0x50000800
 8007e20:	2000000a 	.word	0x2000000a
 8007e24:	0801dbe3 	.word	0x0801dbe3
 8007e28:	20000536 	.word	0x20000536
 8007e2c:	0801dc1d 	.word	0x0801dc1d
 8007e30:	0801dc39 	.word	0x0801dc39
 8007e34:	20000514 	.word	0x20000514
 8007e38:	200004fe 	.word	0x200004fe
 8007e3c:	200004e0 	.word	0x200004e0
 8007e40:	20002c38 	.word	0x20002c38
 8007e44:	2000052c 	.word	0x2000052c
 8007e48:	2000000c 	.word	0x2000000c
 8007e4c:	20000b74 	.word	0x20000b74
 8007e50:	200004dc 	.word	0x200004dc
 8007e54:	200004f4 	.word	0x200004f4
 8007e58:	0801dc48 	.word	0x0801dc48
 8007e5c:	20002c0f 	.word	0x20002c0f
 8007e60:	0801dc58 	.word	0x0801dc58
 8007e64:	20000534 	.word	0x20000534
 8007e68:	0801dc6b 	.word	0x0801dc6b
 8007e6c:	0801dc81 	.word	0x0801dc81
				  if(current_settings.mode_status == 0x00){ // SW Start
 8007e70:	781c      	ldrb	r4, [r3, #0]
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	d18a      	bne.n	8007d8c <main+0x6e4>
					  printf("SW Start !!!!\r\n");
 8007e76:	48d5      	ldr	r0, [pc, #852]	@ (80081cc <main+0xb24>)
 8007e78:	f012 fb10 	bl	801a49c <puts>
	  	 		      if(current_settings.start_mode == 0x03){
 8007e7c:	7836      	ldrb	r6, [r6, #0]
 8007e7e:	2e03      	cmp	r6, #3
 8007e80:	d133      	bne.n	8007eea <main+0x842>
	  	 		    	printf("SW Delay Mode\r\n");// SW Delay Start 전체
 8007e82:	48d3      	ldr	r0, [pc, #844]	@ (80081d0 <main+0xb28>)
 8007e84:	f012 fb0a 	bl	801a49c <puts>
	  	 				if (current_settings.start_delay > 0){// SW Start Delay
 8007e88:	002a      	movs	r2, r5
 8007e8a:	002b      	movs	r3, r5
 8007e8c:	3265      	adds	r2, #101	@ 0x65
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	3364      	adds	r3, #100	@ 0x64
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	0212      	lsls	r2, r2, #8
 8007e96:	431a      	orrs	r2, r3
 8007e98:	002b      	movs	r3, r5
 8007e9a:	3366      	adds	r3, #102	@ 0x66
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	3567      	adds	r5, #103	@ 0x67
 8007ea0:	782d      	ldrb	r5, [r5, #0]
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	062d      	lsls	r5, r5, #24
 8007ea8:	431d      	orrs	r5, r3
 8007eaa:	4bca      	ldr	r3, [pc, #808]	@ (80081d4 <main+0xb2c>)
 8007eac:	9306      	str	r3, [sp, #24]
 8007eae:	4bca      	ldr	r3, [pc, #808]	@ (80081d8 <main+0xb30>)
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	d006      	beq.n	8007ec2 <main+0x81a>
	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8007eb4:	2006      	movs	r0, #6
 8007eb6:	f7fe f921 	bl	80060fc <Switch_Backup_reg>
   	  	 		        SW_count = 0;
 8007eba:	9b06      	ldr	r3, [sp, #24]
 8007ebc:	701c      	strb	r4, [r3, #0]
   	  	 			    button_flag = false;
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	e783      	b.n	8007dca <main+0x722>
	  	 					printf("SW Delay Mode : Delay is 0\r\n");// SW Delay Start 전체
 8007ec2:	48c6      	ldr	r0, [pc, #792]	@ (80081dc <main+0xb34>)
 8007ec4:	f012 faea 	bl	801a49c <puts>
	  	 			     Set_ModeStatus(mode_internal_backup_start);
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f002 f88f 	bl	8009fec <Set_ModeStatus>
	   	  	 			 Switch_Backup_reg(MODE_Start);
 8007ece:	0030      	movs	r0, r6
 8007ed0:	f7fe f914 	bl	80060fc <Switch_Backup_reg>
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007ed4:	f7fe fafc 	bl	80064d0 <Load_IndexNum_From_Backup>
	   	  	 			 Interval_LCD_Count = 1;
 8007ed8:	2201      	movs	r2, #1
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007eda:	4bc1      	ldr	r3, [pc, #772]	@ (80081e0 <main+0xb38>)
 8007edc:	8018      	strh	r0, [r3, #0]
	   	  	 			 Interval_LCD_Count = 1;
 8007ede:	4bc1      	ldr	r3, [pc, #772]	@ (80081e4 <main+0xb3c>)
 8007ee0:	601a      	str	r2, [r3, #0]
	   	  	 		     SW_count = 0;
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	701d      	strb	r5, [r3, #0]
	   	  	 			 button_flag = false;
 8007ee6:	9b07      	ldr	r3, [sp, #28]
 8007ee8:	e74f      	b.n	8007d8a <main+0x6e2>
	  	 			  else if(current_settings.start_mode == 0x02){
 8007eea:	2e02      	cmp	r6, #2
 8007eec:	d113      	bne.n	8007f16 <main+0x86e>
	  	 				printf("SW Start Mode, Direct start\r\n");// SW Delay Start 전체
 8007eee:	48be      	ldr	r0, [pc, #760]	@ (80081e8 <main+0xb40>)
 8007ef0:	f012 fad4 	bl	801a49c <puts>
	  	 				Set_ModeStatus(mode_internal_backup_start);
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	f002 f879 	bl	8009fec <Set_ModeStatus>
	   	  	 			 Switch_Backup_reg(MODE_Start);
 8007efa:	2003      	movs	r0, #3
	   	  	 			 Switch_Backup_reg(Mode_Start_Delay);
 8007efc:	f7fe f8fe 	bl	80060fc <Switch_Backup_reg>
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007f00:	f7fe fae6 	bl	80064d0 <Load_IndexNum_From_Backup>
	   	  	 			 Interval_LCD_Count = 1;
 8007f04:	2201      	movs	r2, #1
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007f06:	4bb6      	ldr	r3, [pc, #728]	@ (80081e0 <main+0xb38>)
 8007f08:	8018      	strh	r0, [r3, #0]
	   	  	 			 Interval_LCD_Count = 1;
 8007f0a:	4bb6      	ldr	r3, [pc, #728]	@ (80081e4 <main+0xb3c>)
 8007f0c:	601a      	str	r2, [r3, #0]
	   	  	 		     SW_count = 0;
 8007f0e:	4bb1      	ldr	r3, [pc, #708]	@ (80081d4 <main+0xb2c>)
 8007f10:	701c      	strb	r4, [r3, #0]
	   	  	 			 button_flag = false;
 8007f12:	4bb1      	ldr	r3, [pc, #708]	@ (80081d8 <main+0xb30>)
 8007f14:	e759      	b.n	8007dca <main+0x722>
	  	 			  else if(current_settings.start_mode == 0x04){ // Target time start mode
 8007f16:	2e04      	cmp	r6, #4
 8007f18:	d000      	beq.n	8007f1c <main+0x874>
 8007f1a:	e737      	b.n	8007d8c <main+0x6e4>
	  	 				printf("Target time start\r\n");// SW Delay Start 전체
 8007f1c:	48b3      	ldr	r0, [pc, #716]	@ (80081ec <main+0xb44>)
 8007f1e:	f012 fabd 	bl	801a49c <puts>
	   	  	 			 Switch_Backup_reg(Mode_Start_Delay);
 8007f22:	2006      	movs	r0, #6
 8007f24:	e7ea      	b.n	8007efc <main+0x854>
			  if (First_Measure>1){
 8007f26:	2200      	movs	r2, #0
 8007f28:	4bb1      	ldr	r3, [pc, #708]	@ (80081f0 <main+0xb48>)
 8007f2a:	9306      	str	r3, [sp, #24]
 8007f2c:	569a      	ldrsb	r2, [r3, r2]
 8007f2e:	4bb1      	ldr	r3, [pc, #708]	@ (80081f4 <main+0xb4c>)
 8007f30:	2a01      	cmp	r2, #1
 8007f32:	dc00      	bgt.n	8007f36 <main+0x88e>
 8007f34:	e23b      	b.n	80083ae <main+0xd06>
			  if (Meas_Mode == 0){ // ////////////////////////////////////////Boot
 8007f36:	7818      	ldrb	r0, [r3, #0]
 8007f38:	2806      	cmp	r0, #6
 8007f3a:	d819      	bhi.n	8007f70 <main+0x8c8>
 8007f3c:	f7f8 f90a 	bl	8000154 <__gnu_thumb1_case_uhi>
 8007f40:	001c0007 	.word	0x001c0007
 8007f44:	00fe0064 	.word	0x00fe0064
 8007f48:	01c50105 	.word	0x01c50105
 8007f4c:	01cf      	.short	0x01cf
				  printf("Boot\r\n");
 8007f4e:	48aa      	ldr	r0, [pc, #680]	@ (80081f8 <main+0xb50>)
 8007f50:	f012 faa4 	bl	801a49c <puts>
				  RTC_Disable_All_Wakeup();
 8007f54:	f7fd fc90 	bl	8005878 <RTC_Disable_All_Wakeup>
				  meas_data_log_erase();  // USB Boot
 8007f58:	f000 fc8e 	bl	8008878 <meas_data_log_erase>
				  RAD_USBX_Clean_Vol();
 8007f5c:	f000 fea8 	bl	8008cb0 <RAD_USBX_Clean_Vol>
				  RAD_USBX_Fatfs_format_disk();
 8007f60:	f000 fe42 	bl	8008be8 <RAD_USBX_Fatfs_format_disk>
				  Set_ModeStatus(mode_internal_backup_stop);
 8007f64:	2000      	movs	r0, #0
 8007f66:	f002 f841 	bl	8009fec <Set_ModeStatus>
				  Switch_Backup_reg(MODE_Stop);
 8007f6a:	2002      	movs	r0, #2
 8007f6c:	f7fe f8c6 	bl	80060fc <Switch_Backup_reg>
			  HAL_LCD_UpdateDisplayRequest(& hlcd);
 8007f70:	48a2      	ldr	r0, [pc, #648]	@ (80081fc <main+0xb54>)
 8007f72:	f007 fd6c 	bl	800fa4e <HAL_LCD_UpdateDisplayRequest>
 8007f76:	e709      	b.n	8007d8c <main+0x6e4>
				  Short_Measure();
 8007f78:	f7fe ff6e 	bl	8006e58 <Short_Measure>
				  switch (LCD_mode) {
 8007f7c:	4da0      	ldr	r5, [pc, #640]	@ (8008200 <main+0xb58>)
 8007f7e:	4ca1      	ldr	r4, [pc, #644]	@ (8008204 <main+0xb5c>)
 8007f80:	782b      	ldrb	r3, [r5, #0]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d01e      	beq.n	8007fc4 <main+0x91c>
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d020      	beq.n	8007fcc <main+0x924>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d122      	bne.n	8007fd4 <main+0x92c>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007f8e:	003b      	movs	r3, r7
 8007f90:	338a      	adds	r3, #138	@ 0x8a
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	4b9c      	ldr	r3, [pc, #624]	@ (8008208 <main+0xb60>)
 8007f96:	0021      	movs	r1, r4
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	f7fc f899 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007f9e:	003b      	movs	r3, r7
 8007fa0:	338b      	adds	r3, #139	@ 0x8b
 8007fa2:	781a      	ldrb	r2, [r3, #0]
 8007fa4:	4b99      	ldr	r3, [pc, #612]	@ (800820c <main+0xb64>)
 8007fa6:	499a      	ldr	r1, [pc, #616]	@ (8008210 <main+0xb68>)
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f7fb fe5f 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007fae:	2000      	movs	r0, #0
 8007fb0:	0021      	movs	r1, r4
 8007fb2:	f7fc fcb1 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Stop_Display(LCD_data);
 8007fb6:	0020      	movs	r0, r4
 8007fb8:	f7fc fe48 	bl	8004c4c <Small_Stop_Display>
				  printf("Stop\r\n");
 8007fbc:	4895      	ldr	r0, [pc, #596]	@ (8008214 <main+0xb6c>)
				  printf("Start(Button)\r\n");
 8007fbe:	f012 fa6d 	bl	801a49c <puts>
 8007fc2:	e7d5      	b.n	8007f70 <main+0x8c8>
				        	 LCD_Display_date(LCD_data);
 8007fc4:	0020      	movs	r0, r4
 8007fc6:	f7fc fb89 	bl	80046dc <LCD_Display_date>
 8007fca:	e7f0      	b.n	8007fae <main+0x906>
				        	 LCD_Display_Time(LCD_data);
 8007fcc:	0020      	movs	r0, r4
 8007fce:	f7fc fc15 	bl	80047fc <LCD_Display_Time>
				        	 LCD_Display_Battery(0, LCD_data);
 8007fd2:	e7ec      	b.n	8007fae <main+0x906>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007fd4:	003b      	movs	r3, r7
 8007fd6:	338a      	adds	r3, #138	@ 0x8a
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	4b8b      	ldr	r3, [pc, #556]	@ (8008208 <main+0xb60>)
 8007fdc:	0021      	movs	r1, r4
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	f7fc f876 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007fe4:	003b      	movs	r3, r7
 8007fe6:	338b      	adds	r3, #139	@ 0x8b
 8007fe8:	781a      	ldrb	r2, [r3, #0]
 8007fea:	4b88      	ldr	r3, [pc, #544]	@ (800820c <main+0xb64>)
 8007fec:	4988      	ldr	r1, [pc, #544]	@ (8008210 <main+0xb68>)
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	f7fb fe3c 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007ff4:	0021      	movs	r1, r4
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f7fc fc8e 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Stop_Display(LCD_data);
 8007ffc:	0020      	movs	r0, r4
 8007ffe:	f7fc fe25 	bl	8004c4c <Small_Stop_Display>
				        	 LCD_mode = 1;
 8008002:	2301      	movs	r3, #1
 8008004:	702b      	strb	r3, [r5, #0]
				        	 break;
 8008006:	e7d9      	b.n	8007fbc <main+0x914>
				  Interval_Measure();
 8008008:	f7ff f9e6 	bl	80073d8 <Interval_Measure>
				  if (Interval_LCD_Count>0){
 800800c:	4d75      	ldr	r5, [pc, #468]	@ (80081e4 <main+0xb3c>)
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d03c      	beq.n	800808e <main+0x9e6>
					  if(Interval_LCD_Count<=7 ){
 8008014:	2b07      	cmp	r3, #7
 8008016:	d900      	bls.n	800801a <main+0x972>
 8008018:	e08e      	b.n	8008138 <main+0xa90>
				  switch (LCD_mode) {
 800801a:	4e79      	ldr	r6, [pc, #484]	@ (8008200 <main+0xb58>)
 800801c:	4c79      	ldr	r4, [pc, #484]	@ (8008204 <main+0xb5c>)
 800801e:	7830      	ldrb	r0, [r6, #0]
 8008020:	3801      	subs	r0, #1
 8008022:	2806      	cmp	r0, #6
 8008024:	d868      	bhi.n	80080f8 <main+0xa50>
 8008026:	f7f8 f881 	bl	800012c <__gnu_thumb1_case_uqi>
 800802a:	1c04      	.short	0x1c04
 800802c:	5f4f3834 	.word	0x5f4f3834
 8008030:	63          	.byte	0x63
 8008031:	00          	.byte	0x00
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8008032:	003b      	movs	r3, r7
 8008034:	338a      	adds	r3, #138	@ 0x8a
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	4b73      	ldr	r3, [pc, #460]	@ (8008208 <main+0xb60>)
 800803a:	0021      	movs	r1, r4
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	f7fc f847 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8008042:	003b      	movs	r3, r7
 8008044:	338b      	adds	r3, #139	@ 0x8b
 8008046:	781a      	ldrb	r2, [r3, #0]
 8008048:	4b70      	ldr	r3, [pc, #448]	@ (800820c <main+0xb64>)
 800804a:	4971      	ldr	r1, [pc, #452]	@ (8008210 <main+0xb68>)
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7fb fe0d 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8008052:	0021      	movs	r1, r4
 8008054:	2000      	movs	r0, #0
 8008056:	f7fc fc5f 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Start_Display(LCD_data);
 800805a:	0020      	movs	r0, r4
 800805c:	f7fc fe06 	bl	8004c6c <Small_Start_Display>
				        	 LCD_Display_Alarm(LCD_data);
 8008060:	e00c      	b.n	800807c <main+0x9d4>
				        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 8008062:	2200      	movs	r2, #0
 8008064:	4b6c      	ldr	r3, [pc, #432]	@ (8008218 <main+0xb70>)
 8008066:	8818      	ldrh	r0, [r3, #0]
 8008068:	0021      	movs	r1, r4
 800806a:	f7fd f85d 	bl	8005128 <LCD_Display_LP>
				        	 Small_Start_Display(LCD_data);
 800806e:	0020      	movs	r0, r4
 8008070:	f7fc fdfc 	bl	8004c6c <Small_Start_Display>
				        	 LCD_Display_Battery(0, LCD_data);
 8008074:	0021      	movs	r1, r4
 8008076:	2000      	movs	r0, #0
 8008078:	f7fc fc4e 	bl	8004918 <LCD_Display_Battery>
				        	 LCD_Display_Alarm(LCD_data);
 800807c:	0020      	movs	r0, r4
 800807e:	f7fd fa61 	bl	8005544 <LCD_Display_Alarm>
				        	 Mark_Display(LCD_data);
 8008082:	0020      	movs	r0, r4
 8008084:	f7fc fe02 	bl	8004c8c <Mark_Display>
				  Interval_LCD_Count++;
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	3301      	adds	r3, #1
						  Interval_LCD_Count = 0;
 800808c:	602b      	str	r3, [r5, #0]
				  printf("Start (Interval)\r\n");
 800808e:	4863      	ldr	r0, [pc, #396]	@ (800821c <main+0xb74>)
 8008090:	e795      	b.n	8007fbe <main+0x916>
				        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8008092:	4b63      	ldr	r3, [pc, #396]	@ (8008220 <main+0xb78>)
 8008094:	2201      	movs	r2, #1
 8008096:	8818      	ldrh	r0, [r3, #0]
 8008098:	e7e6      	b.n	8008068 <main+0x9c0>
				        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	2000      	movs	r0, #0
 800809e:	5e18      	ldrsh	r0, [r3, r0]
 80080a0:	f7f9 fb44 	bl	800172c <__aeabi_i2f>
 80080a4:	2200      	movs	r2, #0
 80080a6:	0021      	movs	r1, r4
 80080a8:	f7fc f862 	bl	8004170 <LCD_Display_Temp_MinMax>
				        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 80080ac:	9b05      	ldr	r3, [sp, #20]
 80080ae:	4e58      	ldr	r6, [pc, #352]	@ (8008210 <main+0xb68>)
 80080b0:	6858      	ldr	r0, [r3, #4]
 80080b2:	210a      	movs	r1, #10
 80080b4:	f7f8 f858 	bl	8000168 <__udivsi3>
 80080b8:	2200      	movs	r2, #0
 80080ba:	0031      	movs	r1, r6
 80080bc:	f7fb fdd6 	bl	8003c6c <LCD_Display_Dose>
				        	 Max_Display(LCD_data);
 80080c0:	0020      	movs	r0, r4
 80080c2:	f7fc fdf9 	bl	8004cb8 <Max_Display>
				        	 Small_Start_Display(LCD_data);
 80080c6:	e7d2      	b.n	800806e <main+0x9c6>
				        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 80080c8:	9b05      	ldr	r3, [sp, #20]
 80080ca:	2002      	movs	r0, #2
 80080cc:	5e18      	ldrsh	r0, [r3, r0]
 80080ce:	f7f9 fb2d 	bl	800172c <__aeabi_i2f>
 80080d2:	2200      	movs	r2, #0
 80080d4:	0021      	movs	r1, r4
 80080d6:	f7fc f84b 	bl	8004170 <LCD_Display_Temp_MinMax>
				        	 Blank_Dose_Display(LCD_data);
 80080da:	0020      	movs	r0, r4
 80080dc:	f7fc fd12 	bl	8004b04 <Blank_Dose_Display>
				        	 Min_Display(LCD_data);
 80080e0:	0020      	movs	r0, r4
 80080e2:	f7fc fdf9 	bl	8004cd8 <Min_Display>
				        	 Small_Start_Display(LCD_data);
 80080e6:	e7c2      	b.n	800806e <main+0x9c6>
				        	 LCD_Display_date(LCD_data);
 80080e8:	0020      	movs	r0, r4
 80080ea:	f7fc faf7 	bl	80046dc <LCD_Display_date>
				        	 LCD_Display_Battery(0, LCD_data);
 80080ee:	e7b0      	b.n	8008052 <main+0x9aa>
				        	 LCD_Display_Time(LCD_data);
 80080f0:	0020      	movs	r0, r4
 80080f2:	f7fc fb83 	bl	80047fc <LCD_Display_Time>
 80080f6:	e7ac      	b.n	8008052 <main+0x9aa>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 80080f8:	003b      	movs	r3, r7
 80080fa:	338a      	adds	r3, #138	@ 0x8a
 80080fc:	781a      	ldrb	r2, [r3, #0]
 80080fe:	4b42      	ldr	r3, [pc, #264]	@ (8008208 <main+0xb60>)
 8008100:	0021      	movs	r1, r4
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	f7fb ffe4 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8008108:	003b      	movs	r3, r7
 800810a:	338b      	adds	r3, #139	@ 0x8b
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	4b3f      	ldr	r3, [pc, #252]	@ (800820c <main+0xb64>)
 8008110:	493f      	ldr	r1, [pc, #252]	@ (8008210 <main+0xb68>)
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	f7fb fdaa 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8008118:	0021      	movs	r1, r4
 800811a:	2000      	movs	r0, #0
 800811c:	f7fc fbfc 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Start_Display(LCD_data);
 8008120:	0020      	movs	r0, r4
 8008122:	f7fc fda3 	bl	8004c6c <Small_Start_Display>
				        	 LCD_Display_Alarm(LCD_data);
 8008126:	0020      	movs	r0, r4
 8008128:	f7fd fa0c 	bl	8005544 <LCD_Display_Alarm>
				        	 Mark_Display(LCD_data);
 800812c:	0020      	movs	r0, r4
 800812e:	f7fc fdad 	bl	8004c8c <Mark_Display>
				        	 LCD_mode = 1;
 8008132:	2301      	movs	r3, #1
 8008134:	7033      	strb	r3, [r6, #0]
				        	 break;
 8008136:	e7a7      	b.n	8008088 <main+0x9e0>
						  Interval_LCD_Count = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	e7a7      	b.n	800808c <main+0x9e4>
				   Short_Measure();
 800813c:	f7fe fe8c 	bl	8006e58 <Short_Measure>
				   LCD_Display_PauseMode(LCD_data);
 8008140:	4830      	ldr	r0, [pc, #192]	@ (8008204 <main+0xb5c>)
 8008142:	f7fc fd3d 	bl	8004bc0 <LCD_Display_PauseMode>
				  printf("Pause\r\n");
 8008146:	4837      	ldr	r0, [pc, #220]	@ (8008224 <main+0xb7c>)
 8008148:	e739      	b.n	8007fbe <main+0x916>
				  Short_Measure();
 800814a:	f7fe fe85 	bl	8006e58 <Short_Measure>
				  switch (LCD_mode) {
 800814e:	4d2c      	ldr	r5, [pc, #176]	@ (8008200 <main+0xb58>)
 8008150:	4c2c      	ldr	r4, [pc, #176]	@ (8008204 <main+0xb5c>)
 8008152:	7828      	ldrb	r0, [r5, #0]
 8008154:	3801      	subs	r0, #1
 8008156:	2806      	cmp	r0, #6
 8008158:	d900      	bls.n	800815c <main+0xab4>
 800815a:	e096      	b.n	800828a <main+0xbe2>
 800815c:	f7f7 ffe6 	bl	800012c <__gnu_thumb1_case_uqi>
 8008160:	66311c04 	.word	0x66311c04
 8008164:	8d7d      	.short	0x8d7d
 8008166:	91          	.byte	0x91
 8008167:	00          	.byte	0x00
			        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8008168:	003b      	movs	r3, r7
 800816a:	338a      	adds	r3, #138	@ 0x8a
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	4b26      	ldr	r3, [pc, #152]	@ (8008208 <main+0xb60>)
 8008170:	0021      	movs	r1, r4
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	f7fb ffac 	bl	80040d0 <LCD_Display_Temp>
			        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8008178:	003b      	movs	r3, r7
 800817a:	338b      	adds	r3, #139	@ 0x8b
 800817c:	781a      	ldrb	r2, [r3, #0]
 800817e:	4b23      	ldr	r3, [pc, #140]	@ (800820c <main+0xb64>)
 8008180:	4923      	ldr	r1, [pc, #140]	@ (8008210 <main+0xb68>)
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	f7fb fd72 	bl	8003c6c <LCD_Display_Dose>
			        	 LCD_Display_Battery(0, LCD_data);
 8008188:	0021      	movs	r1, r4
 800818a:	2000      	movs	r0, #0
 800818c:	f7fc fbc4 	bl	8004918 <LCD_Display_Battery>
			        	 Small_Start_Display(LCD_data);
 8008190:	0020      	movs	r0, r4
 8008192:	f7fc fd6b 	bl	8004c6c <Small_Start_Display>
			        	 LCD_Display_Alarm(LCD_data);
 8008196:	e00c      	b.n	80081b2 <main+0xb0a>
			        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 8008198:	2200      	movs	r2, #0
 800819a:	4b1f      	ldr	r3, [pc, #124]	@ (8008218 <main+0xb70>)
 800819c:	8818      	ldrh	r0, [r3, #0]
 800819e:	0021      	movs	r1, r4
 80081a0:	f7fc ffc2 	bl	8005128 <LCD_Display_LP>
			        	 Small_Start_Display(LCD_data);
 80081a4:	0020      	movs	r0, r4
 80081a6:	f7fc fd61 	bl	8004c6c <Small_Start_Display>
			        	 LCD_Display_Battery(0, LCD_data);
 80081aa:	0021      	movs	r1, r4
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7fc fbb3 	bl	8004918 <LCD_Display_Battery>
			        	 LCD_Display_Alarm(LCD_data);
 80081b2:	0020      	movs	r0, r4
 80081b4:	f7fd f9c6 	bl	8005544 <LCD_Display_Alarm>
			        	 Mark_Display(LCD_data);
 80081b8:	0020      	movs	r0, r4
 80081ba:	f7fc fd67 	bl	8004c8c <Mark_Display>
				  printf("Start(Button)\r\n");
 80081be:	481a      	ldr	r0, [pc, #104]	@ (8008228 <main+0xb80>)
 80081c0:	e6fd      	b.n	8007fbe <main+0x916>
			        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 80081c2:	4b17      	ldr	r3, [pc, #92]	@ (8008220 <main+0xb78>)
 80081c4:	2201      	movs	r2, #1
 80081c6:	8818      	ldrh	r0, [r3, #0]
 80081c8:	e7e9      	b.n	800819e <main+0xaf6>
 80081ca:	46c0      	nop			@ (mov r8, r8)
 80081cc:	0801dc95 	.word	0x0801dc95
 80081d0:	0801dca4 	.word	0x0801dca4
 80081d4:	20000537 	.word	0x20000537
 80081d8:	20000538 	.word	0x20000538
 80081dc:	0801dcb3 	.word	0x0801dcb3
 80081e0:	2000004c 	.word	0x2000004c
 80081e4:	2000053c 	.word	0x2000053c
 80081e8:	0801dccf 	.word	0x0801dccf
 80081ec:	0801dcec 	.word	0x0801dcec
 80081f0:	20000534 	.word	0x20000534
 80081f4:	20000535 	.word	0x20000535
 80081f8:	0801dbb0 	.word	0x0801dbb0
 80081fc:	20000a80 	.word	0x20000a80
 8008200:	20000503 	.word	0x20000503
 8008204:	20000514 	.word	0x20000514
 8008208:	20000544 	.word	0x20000544
 800820c:	20000530 	.word	0x20000530
 8008210:	20000504 	.word	0x20000504
 8008214:	0801dc65 	.word	0x0801dc65
 8008218:	200004fe 	.word	0x200004fe
 800821c:	0801dcff 	.word	0x0801dcff
 8008220:	20000500 	.word	0x20000500
 8008224:	0801dd11 	.word	0x0801dd11
 8008228:	0801dd18 	.word	0x0801dd18
			        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	2000      	movs	r0, #0
 8008230:	5e18      	ldrsh	r0, [r3, r0]
 8008232:	f7f9 fa7b 	bl	800172c <__aeabi_i2f>
 8008236:	2200      	movs	r2, #0
 8008238:	0021      	movs	r1, r4
 800823a:	f7fb ff99 	bl	8004170 <LCD_Display_Temp_MinMax>
			        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 800823e:	9b05      	ldr	r3, [sp, #20]
 8008240:	4dd5      	ldr	r5, [pc, #852]	@ (8008598 <main+0xef0>)
 8008242:	6858      	ldr	r0, [r3, #4]
 8008244:	210a      	movs	r1, #10
 8008246:	f7f7 ff8f 	bl	8000168 <__udivsi3>
 800824a:	2200      	movs	r2, #0
 800824c:	0029      	movs	r1, r5
 800824e:	f7fb fd0d 	bl	8003c6c <LCD_Display_Dose>
			        	 Max_Display(LCD_data);
 8008252:	0020      	movs	r0, r4
 8008254:	f7fc fd30 	bl	8004cb8 <Max_Display>
			        	 Small_Start_Display(LCD_data);
 8008258:	e7a4      	b.n	80081a4 <main+0xafc>
			        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	2002      	movs	r0, #2
 800825e:	5e18      	ldrsh	r0, [r3, r0]
 8008260:	f7f9 fa64 	bl	800172c <__aeabi_i2f>
 8008264:	2200      	movs	r2, #0
 8008266:	0021      	movs	r1, r4
 8008268:	f7fb ff82 	bl	8004170 <LCD_Display_Temp_MinMax>
			        	 Blank_Dose_Display(LCD_data);
 800826c:	0020      	movs	r0, r4
 800826e:	f7fc fc49 	bl	8004b04 <Blank_Dose_Display>
			        	 Min_Display(LCD_data);
 8008272:	0020      	movs	r0, r4
 8008274:	f7fc fd30 	bl	8004cd8 <Min_Display>
			        	 Small_Start_Display(LCD_data);
 8008278:	e794      	b.n	80081a4 <main+0xafc>
			        	 LCD_Display_date(LCD_data);
 800827a:	0020      	movs	r0, r4
 800827c:	f7fc fa2e 	bl	80046dc <LCD_Display_date>
			        	 LCD_Display_Battery(0, LCD_data);
 8008280:	e782      	b.n	8008188 <main+0xae0>
			        	 LCD_Display_Time(LCD_data);
 8008282:	0020      	movs	r0, r4
 8008284:	f7fc faba 	bl	80047fc <LCD_Display_Time>
 8008288:	e77e      	b.n	8008188 <main+0xae0>
			        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 800828a:	003b      	movs	r3, r7
 800828c:	338a      	adds	r3, #138	@ 0x8a
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	4bc2      	ldr	r3, [pc, #776]	@ (800859c <main+0xef4>)
 8008292:	0021      	movs	r1, r4
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	f7fb ff1b 	bl	80040d0 <LCD_Display_Temp>
			        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 800829a:	003b      	movs	r3, r7
 800829c:	338b      	adds	r3, #139	@ 0x8b
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	4bbf      	ldr	r3, [pc, #764]	@ (80085a0 <main+0xef8>)
 80082a2:	49bd      	ldr	r1, [pc, #756]	@ (8008598 <main+0xef0>)
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f7fb fce1 	bl	8003c6c <LCD_Display_Dose>
			        	 LCD_Display_Battery(0, LCD_data);
 80082aa:	0021      	movs	r1, r4
 80082ac:	2000      	movs	r0, #0
 80082ae:	f7fc fb33 	bl	8004918 <LCD_Display_Battery>
			        	 Small_Start_Display(LCD_data);
 80082b2:	0020      	movs	r0, r4
 80082b4:	f7fc fcda 	bl	8004c6c <Small_Start_Display>
			        	 LCD_Display_Alarm(LCD_data);
 80082b8:	0020      	movs	r0, r4
 80082ba:	f7fd f943 	bl	8005544 <LCD_Display_Alarm>
			        	 Mark_Display(LCD_data);
 80082be:	0020      	movs	r0, r4
 80082c0:	f7fc fce4 	bl	8004c8c <Mark_Display>
			        	 LCD_mode = 1;
 80082c4:	2301      	movs	r3, #1
 80082c6:	702b      	strb	r3, [r5, #0]
			        	 break;
 80082c8:	e779      	b.n	80081be <main+0xb16>
				    Non_Measure();
 80082ca:	f7fe fde3 	bl	8006e94 <Non_Measure>
			  		Get_And_Print_Seconds_Left_ToStart();
 80082ce:	f001 fe9b 	bl	800a008 <Get_And_Print_Seconds_Left_ToStart>
			  		LCD_Display_DelayMode(start_remaining, LCD_data);
 80082d2:	4bb4      	ldr	r3, [pc, #720]	@ (80085a4 <main+0xefc>)
 80082d4:	49b4      	ldr	r1, [pc, #720]	@ (80085a8 <main+0xf00>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	f7fc ffc0 	bl	800525c <LCD_Display_DelayMode>
 80082dc:	e648      	b.n	8007f70 <main+0x8c8>
				  Non_Measure();
 80082de:	f7fe fdd9 	bl	8006e94 <Non_Measure>
  				  switch (LCD_mode) {
 80082e2:	4db2      	ldr	r5, [pc, #712]	@ (80085ac <main+0xf04>)
 80082e4:	4cb0      	ldr	r4, [pc, #704]	@ (80085a8 <main+0xf00>)
 80082e6:	7828      	ldrb	r0, [r5, #0]
 80082e8:	3801      	subs	r0, #1
 80082ea:	2805      	cmp	r0, #5
 80082ec:	d84c      	bhi.n	8008388 <main+0xce0>
 80082ee:	f7f7 ff1d 	bl	800012c <__gnu_thumb1_case_uqi>
 80082f2:	1503      	.short	0x1503
 80082f4:	473c2c19 	.word	0x473c2c19
			        	     LCD_Display_LP(idx_temp, LCD_data, 0);
 80082f8:	2200      	movs	r2, #0
 80082fa:	4bad      	ldr	r3, [pc, #692]	@ (80085b0 <main+0xf08>)
 80082fc:	8818      	ldrh	r0, [r3, #0]
			        	     LCD_Display_LP(idx_rad, LCD_data, 1);
 80082fe:	0021      	movs	r1, r4
 8008300:	f7fc ff12 	bl	8005128 <LCD_Display_LP>
			        	     Small_Stop_Display(LCD_data);
 8008304:	0020      	movs	r0, r4
 8008306:	f7fc fca1 	bl	8004c4c <Small_Stop_Display>
			        	     LCD_Display_Battery(0, LCD_data);
 800830a:	0021      	movs	r1, r4
 800830c:	2000      	movs	r0, #0
 800830e:	f7fc fb03 	bl	8004918 <LCD_Display_Battery>
			        	     Mark_Display(LCD_data);
 8008312:	0020      	movs	r0, r4
 8008314:	f7fc fcba 	bl	8004c8c <Mark_Display>
				  printf("End\r\n");
 8008318:	48a6      	ldr	r0, [pc, #664]	@ (80085b4 <main+0xf0c>)
 800831a:	e650      	b.n	8007fbe <main+0x916>
			        	     LCD_Display_LP(idx_rad, LCD_data, 1);
 800831c:	4ba6      	ldr	r3, [pc, #664]	@ (80085b8 <main+0xf10>)
 800831e:	2201      	movs	r2, #1
 8008320:	8818      	ldrh	r0, [r3, #0]
 8008322:	e7ec      	b.n	80082fe <main+0xc56>
  				        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	2000      	movs	r0, #0
 8008328:	5e18      	ldrsh	r0, [r3, r0]
 800832a:	f7f9 f9ff 	bl	800172c <__aeabi_i2f>
 800832e:	0021      	movs	r1, r4
 8008330:	2200      	movs	r2, #0
 8008332:	f7fb ff1d 	bl	8004170 <LCD_Display_Temp_MinMax>
  				        	 LCD_Display_Dose(device_config.dose_max, LCD_data_dose, 0x00);
 8008336:	9b05      	ldr	r3, [sp, #20]
 8008338:	2200      	movs	r2, #0
 800833a:	6858      	ldr	r0, [r3, #4]
 800833c:	4996      	ldr	r1, [pc, #600]	@ (8008598 <main+0xef0>)
 800833e:	f7fb fc95 	bl	8003c6c <LCD_Display_Dose>
  				        	 Max_Display(LCD_data);
 8008342:	0020      	movs	r0, r4
 8008344:	f7fc fcb8 	bl	8004cb8 <Max_Display>
  				        	 Small_Stop_Display(LCD_data);
 8008348:	e7dc      	b.n	8008304 <main+0xc5c>
  				        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 800834a:	9b05      	ldr	r3, [sp, #20]
 800834c:	2002      	movs	r0, #2
 800834e:	5e18      	ldrsh	r0, [r3, r0]
 8008350:	f7f9 f9ec 	bl	800172c <__aeabi_i2f>
 8008354:	2200      	movs	r2, #0
 8008356:	0021      	movs	r1, r4
 8008358:	f7fb ff0a 	bl	8004170 <LCD_Display_Temp_MinMax>
  				        	 Blank_Dose_Display(LCD_data);
 800835c:	0020      	movs	r0, r4
 800835e:	f7fc fbd1 	bl	8004b04 <Blank_Dose_Display>
  				        	 Min_Display(LCD_data);
 8008362:	0020      	movs	r0, r4
 8008364:	f7fc fcb8 	bl	8004cd8 <Min_Display>
  				        	 Small_Stop_Display(LCD_data);
 8008368:	e7cc      	b.n	8008304 <main+0xc5c>
  				        	 LCD_Display_date(LCD_data);
 800836a:	0020      	movs	r0, r4
 800836c:	f7fc f9b6 	bl	80046dc <LCD_Display_date>
  				        	 LCD_Display_Battery(0, LCD_data);
 8008370:	0021      	movs	r1, r4
 8008372:	2000      	movs	r0, #0
 8008374:	f7fc fad0 	bl	8004918 <LCD_Display_Battery>
  				        	 Small_Stop_Display(LCD_data);
 8008378:	0020      	movs	r0, r4
 800837a:	f7fc fc67 	bl	8004c4c <Small_Stop_Display>
  				        	 Mark_Display(LCD_data);
 800837e:	e7c8      	b.n	8008312 <main+0xc6a>
  				        	 LCD_Display_Time(LCD_data);
 8008380:	0020      	movs	r0, r4
 8008382:	f7fc fa3b 	bl	80047fc <LCD_Display_Time>
 8008386:	e7f3      	b.n	8008370 <main+0xcc8>
			        	     LCD_Display_LP(idx_temp, LCD_data, 0);
 8008388:	4b89      	ldr	r3, [pc, #548]	@ (80085b0 <main+0xf08>)
 800838a:	2200      	movs	r2, #0
 800838c:	8818      	ldrh	r0, [r3, #0]
 800838e:	0021      	movs	r1, r4
 8008390:	f7fc feca 	bl	8005128 <LCD_Display_LP>
			        	     Small_Stop_Display(LCD_data);
 8008394:	0020      	movs	r0, r4
 8008396:	f7fc fc59 	bl	8004c4c <Small_Stop_Display>
			        	     LCD_Display_Battery(0, LCD_data);
 800839a:	0021      	movs	r1, r4
 800839c:	2000      	movs	r0, #0
 800839e:	f7fc fabb 	bl	8004918 <LCD_Display_Battery>
			           	     Mark_Display(LCD_data);
 80083a2:	0020      	movs	r0, r4
 80083a4:	f7fc fc72 	bl	8004c8c <Mark_Display>
  				        	 LCD_mode = 1;
 80083a8:	2301      	movs	r3, #1
 80083aa:	702b      	strb	r3, [r5, #0]
  				        	 break;
 80083ac:	e7b4      	b.n	8008318 <main+0xc70>
				  if (First_Measure == 0){
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	d137      	bne.n	8008422 <main+0xd7a>
					  if(Meas_Mode == 2 || Meas_Mode == 4){
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	32fd      	adds	r2, #253	@ 0xfd
 80083b6:	3b02      	subs	r3, #2
 80083b8:	001d      	movs	r5, r3
 80083ba:	4015      	ands	r5, r2
 80083bc:	4213      	tst	r3, r2
 80083be:	d12d      	bne.n	800841c <main+0xd74>
    if (current_settings.end_target_seconds == 0) return false;   // 미사용
 80083c0:	4b7e      	ldr	r3, [pc, #504]	@ (80085bc <main+0xf14>)
 80083c2:	4e7f      	ldr	r6, [pc, #508]	@ (80085c0 <main+0xf18>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	7832      	ldrb	r2, [r6, #0]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	4313      	orrs	r3, r2
 80083cc:	4a7d      	ldr	r2, [pc, #500]	@ (80085c4 <main+0xf1c>)
 80083ce:	4c7e      	ldr	r4, [pc, #504]	@ (80085c8 <main+0xf20>)
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	34ae      	adds	r4, #174	@ 0xae
 80083d4:	0412      	lsls	r2, r2, #16
 80083d6:	431a      	orrs	r2, r3
 80083d8:	7823      	ldrb	r3, [r4, #0]
 80083da:	061b      	lsls	r3, r3, #24
 80083dc:	4313      	orrs	r3, r2
 80083de:	d01d      	beq.n	800841c <main+0xd74>
    uint32_t now = now_epoch_from_rtc();
 80083e0:	f7fd f8fe 	bl	80055e0 <now_epoch_from_rtc>
    return now >= current_settings.end_target_seconds;
 80083e4:	4b75      	ldr	r3, [pc, #468]	@ (80085bc <main+0xf14>)
 80083e6:	7832      	ldrb	r2, [r6, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	4313      	orrs	r3, r2
 80083ee:	4a75      	ldr	r2, [pc, #468]	@ (80085c4 <main+0xf1c>)
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	0412      	lsls	r2, r2, #16
 80083f4:	431a      	orrs	r2, r3
 80083f6:	7823      	ldrb	r3, [r4, #0]
 80083f8:	061b      	lsls	r3, r3, #24
 80083fa:	4313      	orrs	r3, r2
						  if (Has_Logging_Duration_Ended()) {
 80083fc:	4298      	cmp	r0, r3
 80083fe:	d30d      	bcc.n	800841c <main+0xd74>
			 	  	 			RTC_Disable_All_Wakeup();
 8008400:	f7fd fa3a 	bl	8005878 <RTC_Disable_All_Wakeup>
			 	  	 		    Switch_Backup_reg(MODE_End);
 8008404:	2007      	movs	r0, #7
 8008406:	f7fd fe79 	bl	80060fc <Switch_Backup_reg>
			                    Set_ModeStatus(mode_internal_backup_end);
 800840a:	2003      	movs	r0, #3
 800840c:	f001 fdee 	bl	8009fec <Set_ModeStatus>
			 	  	 		    SW_count = 0;
 8008410:	4b6e      	ldr	r3, [pc, #440]	@ (80085cc <main+0xf24>)
 8008412:	701d      	strb	r5, [r3, #0]
			 	  	 	     	button_flag = false;
 8008414:	4b6e      	ldr	r3, [pc, #440]	@ (80085d0 <main+0xf28>)
 8008416:	701d      	strb	r5, [r3, #0]
			 	  	 	        First_Measure = 0;
 8008418:	9b06      	ldr	r3, [sp, #24]
 800841a:	701d      	strb	r5, [r3, #0]
					  LCD_Clear_Display(LCD_data);
 800841c:	4862      	ldr	r0, [pc, #392]	@ (80085a8 <main+0xf00>)
 800841e:	f7fc fc6b 	bl	8004cf8 <LCD_Clear_Display>
			  	  First_Measure++;
 8008422:	4c6c      	ldr	r4, [pc, #432]	@ (80085d4 <main+0xf2c>)
			  	  printf("First Count : '%u'\r\n", First_Measure);
 8008424:	486c      	ldr	r0, [pc, #432]	@ (80085d8 <main+0xf30>)
			  	  First_Measure++;
 8008426:	7821      	ldrb	r1, [r4, #0]
 8008428:	3101      	adds	r1, #1
 800842a:	b249      	sxtb	r1, r1
 800842c:	7021      	strb	r1, [r4, #0]
			  	  printf("First Count : '%u'\r\n", First_Measure);
 800842e:	f011 ffc5 	bl	801a3bc <iprintf>
			  if (Meas_Mode == 0){ // Boot
 8008432:	4b6a      	ldr	r3, [pc, #424]	@ (80085dc <main+0xf34>)
 8008434:	7818      	ldrb	r0, [r3, #0]
 8008436:	2806      	cmp	r0, #6
 8008438:	d80e      	bhi.n	8008458 <main+0xdb0>
 800843a:	f7f7 fe8b 	bl	8000154 <__gnu_thumb1_case_uhi>
 800843e:	0007      	.short	0x0007
 8008440:	001d0011 	.word	0x001d0011
 8008444:	00250113 	.word	0x00250113
 8008448:	012b011d 	.word	0x012b011d
				  printf("Boot\r\n");
 800844c:	4864      	ldr	r0, [pc, #400]	@ (80085e0 <main+0xf38>)
 800844e:	f012 f825 	bl	801a49c <puts>
				  LCD_Display_Boot(LCD_data);
 8008452:	4855      	ldr	r0, [pc, #340]	@ (80085a8 <main+0xf00>)
 8008454:	f7fc fb1a 	bl	8004a8c <LCD_Display_Boot>
			  comp1_count = 0;
 8008458:	2200      	movs	r2, #0
 800845a:	4b62      	ldr	r3, [pc, #392]	@ (80085e4 <main+0xf3c>)
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e587      	b.n	8007f70 <main+0x8c8>
				  printf("Stop\r\n");
 8008460:	4861      	ldr	r0, [pc, #388]	@ (80085e8 <main+0xf40>)
 8008462:	f012 f81b 	bl	801a49c <puts>
				  LCD_mode = 1;
 8008466:	2201      	movs	r2, #1
 8008468:	4b50      	ldr	r3, [pc, #320]	@ (80085ac <main+0xf04>)
				  LCD_Display_StopMode(LCD_data);
 800846a:	484f      	ldr	r0, [pc, #316]	@ (80085a8 <main+0xf00>)
				  LCD_mode = 1;
 800846c:	701a      	strb	r2, [r3, #0]
				  LCD_Display_StopMode(LCD_data);
 800846e:	f7fc fb5b 	bl	8004b28 <LCD_Display_StopMode>
				  RTC_Disable_All_Wakeup();
 8008472:	f7fd fa01 	bl	8005878 <RTC_Disable_All_Wakeup>
 8008476:	e7ef      	b.n	8008458 <main+0xdb0>
				  if(!RTC_During_Wakeup)
 8008478:	4b5c      	ldr	r3, [pc, #368]	@ (80085ec <main+0xf44>)
 800847a:	781a      	ldrb	r2, [r3, #0]
					  if(Interval_LCD_Count >=1){
 800847c:	4b5c      	ldr	r3, [pc, #368]	@ (80085f0 <main+0xf48>)
 800847e:	681b      	ldr	r3, [r3, #0]
				  if(!RTC_During_Wakeup)
 8008480:	2a00      	cmp	r2, #0
 8008482:	d133      	bne.n	80084ec <main+0xe44>
					  if(Interval_LCD_Count >=1){
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0e7      	beq.n	8008458 <main+0xdb0>
				      if (First_Measure==1){
 8008488:	2300      	movs	r3, #0
 800848a:	56e3      	ldrsb	r3, [r4, r3]
				      LCD_Display_InTime_LT(current_settings.temp_interval, LCD_data);
 800848c:	4946      	ldr	r1, [pc, #280]	@ (80085a8 <main+0xf00>)
				      if (First_Measure==1){
 800848e:	2b01      	cmp	r3, #1
 8008490:	d114      	bne.n	80084bc <main+0xe14>
				      LCD_Display_InTime_LT(current_settings.temp_interval, LCD_data);
 8008492:	003a      	movs	r2, r7
 8008494:	003b      	movs	r3, r7
 8008496:	3276      	adds	r2, #118	@ 0x76
 8008498:	7812      	ldrb	r2, [r2, #0]
 800849a:	3375      	adds	r3, #117	@ 0x75
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	0212      	lsls	r2, r2, #8
 80084a0:	431a      	orrs	r2, r3
 80084a2:	003b      	movs	r3, r7
 80084a4:	3377      	adds	r3, #119	@ 0x77
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	4313      	orrs	r3, r2
 80084ac:	003a      	movs	r2, r7
 80084ae:	3278      	adds	r2, #120	@ 0x78
 80084b0:	7810      	ldrb	r0, [r2, #0]
 80084b2:	0600      	lsls	r0, r0, #24
 80084b4:	4318      	orrs	r0, r3
 80084b6:	f7fc ff0d 	bl	80052d4 <LCD_Display_InTime_LT>
 80084ba:	e7cd      	b.n	8008458 <main+0xdb0>
				      LCD_Display_InTime_LR(current_settings.rad_interval, LCD_data);
 80084bc:	003a      	movs	r2, r7
 80084be:	003b      	movs	r3, r7
 80084c0:	3272      	adds	r2, #114	@ 0x72
 80084c2:	7812      	ldrb	r2, [r2, #0]
 80084c4:	3371      	adds	r3, #113	@ 0x71
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	0212      	lsls	r2, r2, #8
 80084ca:	431a      	orrs	r2, r3
 80084cc:	003b      	movs	r3, r7
 80084ce:	3373      	adds	r3, #115	@ 0x73
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	4313      	orrs	r3, r2
 80084d6:	003a      	movs	r2, r7
 80084d8:	3274      	adds	r2, #116	@ 0x74
 80084da:	7810      	ldrb	r0, [r2, #0]
 80084dc:	0600      	lsls	r0, r0, #24
 80084de:	4318      	orrs	r0, r3
 80084e0:	f7fc ff38 	bl	8005354 <LCD_Display_InTime_LR>
				      LCD_mode = 1;
 80084e4:	2201      	movs	r2, #1
 80084e6:	4b31      	ldr	r3, [pc, #196]	@ (80085ac <main+0xf04>)
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	e7b5      	b.n	8008458 <main+0xdb0>
					  if (Interval_LCD_Count>0){
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0b3      	beq.n	8008458 <main+0xdb0>
					  switch (LCD_mode) {
 80084f0:	4d2e      	ldr	r5, [pc, #184]	@ (80085ac <main+0xf04>)
 80084f2:	4c2d      	ldr	r4, [pc, #180]	@ (80085a8 <main+0xf00>)
 80084f4:	7828      	ldrb	r0, [r5, #0]
 80084f6:	3801      	subs	r0, #1
 80084f8:	2806      	cmp	r0, #6
 80084fa:	d900      	bls.n	80084fe <main+0xe56>
 80084fc:	e095      	b.n	800862a <main+0xf82>
 80084fe:	f7f7 fe15 	bl	800012c <__gnu_thumb1_case_uqi>
 8008502:	1c04      	.short	0x1c04
 8008504:	8c79312d 	.word	0x8c79312d
 8008508:	90          	.byte	0x90
 8008509:	00          	.byte	0x00
					        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 800850a:	003b      	movs	r3, r7
 800850c:	338a      	adds	r3, #138	@ 0x8a
 800850e:	781a      	ldrb	r2, [r3, #0]
 8008510:	4b22      	ldr	r3, [pc, #136]	@ (800859c <main+0xef4>)
 8008512:	0021      	movs	r1, r4
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f7fb fddb 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 800851a:	003b      	movs	r3, r7
 800851c:	338b      	adds	r3, #139	@ 0x8b
 800851e:	781a      	ldrb	r2, [r3, #0]
 8008520:	4b1f      	ldr	r3, [pc, #124]	@ (80085a0 <main+0xef8>)
 8008522:	491d      	ldr	r1, [pc, #116]	@ (8008598 <main+0xef0>)
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f7fb fba1 	bl	8003c6c <LCD_Display_Dose>
					        	 LCD_Display_Battery(0, LCD_data);
 800852a:	0021      	movs	r1, r4
 800852c:	2000      	movs	r0, #0
 800852e:	f7fc f9f3 	bl	8004918 <LCD_Display_Battery>
					        	 Small_Start_Display(LCD_data);
 8008532:	0020      	movs	r0, r4
 8008534:	f7fc fb9a 	bl	8004c6c <Small_Start_Display>
 8008538:	e00c      	b.n	8008554 <main+0xeac>
					        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 800853a:	2200      	movs	r2, #0
 800853c:	4b1c      	ldr	r3, [pc, #112]	@ (80085b0 <main+0xf08>)
 800853e:	8818      	ldrh	r0, [r3, #0]
					        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8008540:	0021      	movs	r1, r4
 8008542:	f7fc fdf1 	bl	8005128 <LCD_Display_LP>
					        	 Small_Start_Display(LCD_data);
 8008546:	0020      	movs	r0, r4
 8008548:	f7fc fb90 	bl	8004c6c <Small_Start_Display>
					        	 LCD_Display_Battery(0, LCD_data);
 800854c:	0021      	movs	r1, r4
 800854e:	2000      	movs	r0, #0
 8008550:	f7fc f9e2 	bl	8004918 <LCD_Display_Battery>
					        	 Mark_Display(LCD_data);
 8008554:	0020      	movs	r0, r4
 8008556:	f7fc fb99 	bl	8004c8c <Mark_Display>
					        	 break;
 800855a:	e77d      	b.n	8008458 <main+0xdb0>
					        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 800855c:	4b16      	ldr	r3, [pc, #88]	@ (80085b8 <main+0xf10>)
 800855e:	2201      	movs	r2, #1
 8008560:	8818      	ldrh	r0, [r3, #0]
 8008562:	e7ed      	b.n	8008540 <main+0xe98>
					        	 LCD_Display_Temp((float)device_config.temp_max , LCD_data, current_settings.display_temp_unit);
 8008564:	003b      	movs	r3, r7
 8008566:	338a      	adds	r3, #138	@ 0x8a
 8008568:	781d      	ldrb	r5, [r3, #0]
 800856a:	9b05      	ldr	r3, [sp, #20]
 800856c:	2000      	movs	r0, #0
 800856e:	5e18      	ldrsh	r0, [r3, r0]
 8008570:	f7f9 f8dc 	bl	800172c <__aeabi_i2f>
 8008574:	002a      	movs	r2, r5
 8008576:	0021      	movs	r1, r4
 8008578:	f7fb fdaa 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 800857c:	9b05      	ldr	r3, [sp, #20]
 800857e:	4d06      	ldr	r5, [pc, #24]	@ (8008598 <main+0xef0>)
 8008580:	6858      	ldr	r0, [r3, #4]
 8008582:	210a      	movs	r1, #10
 8008584:	f7f7 fdf0 	bl	8000168 <__udivsi3>
 8008588:	2200      	movs	r2, #0
 800858a:	0029      	movs	r1, r5
 800858c:	f7fb fb6e 	bl	8003c6c <LCD_Display_Dose>
					        	 Max_Display(LCD_data);
 8008590:	0020      	movs	r0, r4
 8008592:	f7fc fb91 	bl	8004cb8 <Max_Display>
					        	 Small_Start_Display(LCD_data);
 8008596:	e7d6      	b.n	8008546 <main+0xe9e>
 8008598:	20000504 	.word	0x20000504
 800859c:	20000544 	.word	0x20000544
 80085a0:	20000530 	.word	0x20000530
 80085a4:	200004f8 	.word	0x200004f8
 80085a8:	20000514 	.word	0x20000514
 80085ac:	20000503 	.word	0x20000503
 80085b0:	200004fe 	.word	0x200004fe
 80085b4:	0801dabb 	.word	0x0801dabb
 80085b8:	20000500 	.word	0x20000500
 80085bc:	20002c58 	.word	0x20002c58
 80085c0:	20002c57 	.word	0x20002c57
 80085c4:	20002c59 	.word	0x20002c59
 80085c8:	20002bac 	.word	0x20002bac
 80085cc:	20000537 	.word	0x20000537
 80085d0:	20000538 	.word	0x20000538
 80085d4:	20000534 	.word	0x20000534
 80085d8:	0801dd27 	.word	0x0801dd27
 80085dc:	20000535 	.word	0x20000535
 80085e0:	0801dbb0 	.word	0x0801dbb0
 80085e4:	20000560 	.word	0x20000560
 80085e8:	0801dc65 	.word	0x0801dc65
 80085ec:	200004fc 	.word	0x200004fc
 80085f0:	2000053c 	.word	0x2000053c
					        	 LCD_Display_Temp((float)device_config.temp_min , LCD_data, current_settings.display_temp_unit);
 80085f4:	003b      	movs	r3, r7
 80085f6:	338a      	adds	r3, #138	@ 0x8a
 80085f8:	781d      	ldrb	r5, [r3, #0]
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	2002      	movs	r0, #2
 80085fe:	5e18      	ldrsh	r0, [r3, r0]
 8008600:	f7f9 f894 	bl	800172c <__aeabi_i2f>
 8008604:	002a      	movs	r2, r5
 8008606:	0021      	movs	r1, r4
 8008608:	f7fb fd62 	bl	80040d0 <LCD_Display_Temp>
					        	 Blank_Dose_Display(LCD_data);
 800860c:	0020      	movs	r0, r4
 800860e:	f7fc fa79 	bl	8004b04 <Blank_Dose_Display>
					        	 Min_Display(LCD_data);
 8008612:	0020      	movs	r0, r4
 8008614:	f7fc fb60 	bl	8004cd8 <Min_Display>
					        	 Small_Start_Display(LCD_data);
 8008618:	e795      	b.n	8008546 <main+0xe9e>
					        	 LCD_Display_date(LCD_data);
 800861a:	0020      	movs	r0, r4
 800861c:	f7fc f85e 	bl	80046dc <LCD_Display_date>
					        	 LCD_Display_Battery(0, LCD_data);
 8008620:	e783      	b.n	800852a <main+0xe82>
					        	 LCD_Display_Time(LCD_data);
 8008622:	0020      	movs	r0, r4
 8008624:	f7fc f8ea 	bl	80047fc <LCD_Display_Time>
 8008628:	e77f      	b.n	800852a <main+0xe82>
					        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 800862a:	003b      	movs	r3, r7
 800862c:	338a      	adds	r3, #138	@ 0x8a
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	4b1a      	ldr	r3, [pc, #104]	@ (800869c <main+0xff4>)
 8008632:	0021      	movs	r1, r4
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f7fb fd4b 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 800863a:	003b      	movs	r3, r7
 800863c:	338b      	adds	r3, #139	@ 0x8b
 800863e:	781a      	ldrb	r2, [r3, #0]
 8008640:	4b17      	ldr	r3, [pc, #92]	@ (80086a0 <main+0xff8>)
 8008642:	4918      	ldr	r1, [pc, #96]	@ (80086a4 <main+0xffc>)
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f7fb fb11 	bl	8003c6c <LCD_Display_Dose>
					        	 LCD_Display_Battery(0, LCD_data);
 800864a:	0021      	movs	r1, r4
 800864c:	2000      	movs	r0, #0
 800864e:	f7fc f963 	bl	8004918 <LCD_Display_Battery>
					        	 Small_Start_Display(LCD_data);
 8008652:	0020      	movs	r0, r4
 8008654:	f7fc fb0a 	bl	8004c6c <Small_Start_Display>
					        	 Mark_Display(LCD_data);
 8008658:	0020      	movs	r0, r4
 800865a:	f7fc fb17 	bl	8004c8c <Mark_Display>
					        	 LCD_mode = 1;
 800865e:	2301      	movs	r3, #1
 8008660:	702b      	strb	r3, [r5, #0]
					        	 break;
 8008662:	e6f9      	b.n	8008458 <main+0xdb0>
				  printf("Pause\r\n");
 8008664:	4810      	ldr	r0, [pc, #64]	@ (80086a8 <main+0x1000>)
 8008666:	f011 ff19 	bl	801a49c <puts>
				  LCD_mode = 1;
 800866a:	2201      	movs	r2, #1
 800866c:	4b0f      	ldr	r3, [pc, #60]	@ (80086ac <main+0x1004>)
				  LCD_Display_PauseMode(LCD_data);
 800866e:	4810      	ldr	r0, [pc, #64]	@ (80086b0 <main+0x1008>)
				  LCD_mode = 1;
 8008670:	701a      	strb	r2, [r3, #0]
				  LCD_Display_PauseMode(LCD_data);
 8008672:	f7fc faa5 	bl	8004bc0 <LCD_Display_PauseMode>
 8008676:	e6ef      	b.n	8008458 <main+0xdb0>
				  if (First_Measure==1){
 8008678:	2300      	movs	r3, #0
 800867a:	56e3      	ldrsb	r3, [r4, r3]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <main+0xfdc>
					  Maybe_Rearm_Reservation_OnWake();
 8008680:	f7fd fa0c 	bl	8005a9c <Maybe_Rearm_Reservation_OnWake>
			  	  Get_And_Print_Seconds_Left_ToStart();
 8008684:	f001 fcc0 	bl	800a008 <Get_And_Print_Seconds_Left_ToStart>
			  	  LCD_Display_DelayMode(start_remaining, LCD_data);  // Delay Display 로 교체
 8008688:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <main+0x100c>)
 800868a:	4909      	ldr	r1, [pc, #36]	@ (80086b0 <main+0x1008>)
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	f7fc fde5 	bl	800525c <LCD_Display_DelayMode>
 8008692:	e6e1      	b.n	8008458 <main+0xdb0>
				  LCD_Display_EndMode(LCD_data);
 8008694:	4806      	ldr	r0, [pc, #24]	@ (80086b0 <main+0x1008>)
 8008696:	f7fc fe9d 	bl	80053d4 <LCD_Display_EndMode>
 800869a:	e6ea      	b.n	8008472 <main+0xdca>
 800869c:	20000544 	.word	0x20000544
 80086a0:	20000530 	.word	0x20000530
 80086a4:	20000504 	.word	0x20000504
 80086a8:	0801dd11 	.word	0x0801dd11
 80086ac:	20000503 	.word	0x20000503
 80086b0:	20000514 	.word	0x20000514
 80086b4:	200004f8 	.word	0x200004f8

080086b8 <MX_USB_PCD_Init>:
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80086b8:	4808      	ldr	r0, [pc, #32]	@ (80086dc <MX_USB_PCD_Init+0x24>)
 80086ba:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <MX_USB_PCD_Init+0x28>)
{
 80086bc:	b510      	push	{r4, lr}
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80086be:	6003      	str	r3, [r0, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80086c0:	2382      	movs	r3, #130	@ 0x82
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	8083      	strh	r3, [r0, #4]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086c6:	2302      	movs	r3, #2
 80086c8:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80086ca:	2300      	movs	r3, #0
 80086cc:	6083      	str	r3, [r0, #8]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80086ce:	f007 fcd3 	bl	8010078 <HAL_PCD_Init>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d001      	beq.n	80086da <MX_USB_PCD_Init+0x22>
 80086d6:	b672      	cpsid	i
  while (1)
 80086d8:	e7fe      	b.n	80086d8 <MX_USB_PCD_Init+0x20>
}
 80086da:	bd10      	pop	{r4, pc}
 80086dc:	20000564 	.word	0x20000564
 80086e0:	40005c00 	.word	0x40005c00

080086e4 <HAL_COMP_TriggerCallback>:
      if (hcomp->Instance == COMP1)
 80086e4:	4b04      	ldr	r3, [pc, #16]	@ (80086f8 <HAL_COMP_TriggerCallback+0x14>)
 80086e6:	6802      	ldr	r2, [r0, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d103      	bne.n	80086f4 <HAL_COMP_TriggerCallback+0x10>
          comp1_count++;
 80086ec:	4a03      	ldr	r2, [pc, #12]	@ (80086fc <HAL_COMP_TriggerCallback+0x18>)
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	6013      	str	r3, [r2, #0]
  }
 80086f4:	4770      	bx	lr
 80086f6:	46c0      	nop			@ (mov r8, r8)
 80086f8:	40010200 	.word	0x40010200
 80086fc:	20000560 	.word	0x20000560

08008700 <EXTI0_1_IRQHandler>:
{
 8008700:	b510      	push	{r4, lr}
    HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8008702:	2001      	movs	r0, #1
 8008704:	f007 f940 	bl	800f988 <HAL_GPIO_EXTI_IRQHandler>
}
 8008708:	bd10      	pop	{r4, pc}
	...

0800870c <HAL_GPIO_EXTI_Falling_Callback>:
{
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	0004      	movs	r4, r0
    if(GPIO_Pin == GPIO_PIN_0)
 8008710:	2801      	cmp	r0, #1
 8008712:	d11e      	bne.n	8008752 <HAL_GPIO_EXTI_Falling_Callback+0x46>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) // 0=눌림
 8008714:	0001      	movs	r1, r0
 8008716:	20a0      	movs	r0, #160	@ 0xa0
 8008718:	05c0      	lsls	r0, r0, #23
 800871a:	f007 f927 	bl	800f96c <HAL_GPIO_ReadPin>
 800871e:	2800      	cmp	r0, #0
 8008720:	d117      	bne.n	8008752 <HAL_GPIO_EXTI_Falling_Callback+0x46>
            uint32_t now = HAL_GetTick();
 8008722:	f005 fe93 	bl	800e44c <HAL_GetTick>
            if (now - last_button_tick < DOUBLE_CLICK_MS) {
 8008726:	2596      	movs	r5, #150	@ 0x96
 8008728:	490b      	ldr	r1, [pc, #44]	@ (8008758 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800872a:	4a0c      	ldr	r2, [pc, #48]	@ (800875c <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800872c:	680b      	ldr	r3, [r1, #0]
 800872e:	006d      	lsls	r5, r5, #1
 8008730:	1ac3      	subs	r3, r0, r3
 8008732:	42ab      	cmp	r3, r5
 8008734:	d20e      	bcs.n	8008754 <HAL_GPIO_EXTI_Falling_Callback+0x48>
                button_press_count++;
 8008736:	7813      	ldrb	r3, [r2, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	b2db      	uxtb	r3, r3
 800873c:	7013      	strb	r3, [r2, #0]
            button_flag = true;
 800873e:	2201      	movs	r2, #1
 8008740:	4b07      	ldr	r3, [pc, #28]	@ (8008760 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
            last_button_tick = now;
 8008742:	6008      	str	r0, [r1, #0]
            button_flag = true;
 8008744:	701a      	strb	r2, [r3, #0]
            if(Meas_Mode == 2){
 8008746:	4b07      	ldr	r3, [pc, #28]	@ (8008764 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d101      	bne.n	8008752 <HAL_GPIO_EXTI_Falling_Callback+0x46>
                Interval_LCD_Count = 1;
 800874e:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8008750:	601a      	str	r2, [r3, #0]
}
 8008752:	bd70      	pop	{r4, r5, r6, pc}
                button_press_count = 1;
 8008754:	7014      	strb	r4, [r2, #0]
 8008756:	e7f2      	b.n	800873e <HAL_GPIO_EXTI_Falling_Callback+0x32>
 8008758:	20000528 	.word	0x20000528
 800875c:	20000524 	.word	0x20000524
 8008760:	20000538 	.word	0x20000538
 8008764:	20000535 	.word	0x20000535
 8008768:	2000053c 	.word	0x2000053c

0800876c <HAL_RTCEx_WakeUpTimerEventCallback>:
{
 800876c:	b510      	push	{r4, lr}
	printf("Wake Up by RTC Timer!\r\n");
 800876e:	480b      	ldr	r0, [pc, #44]	@ (800879c <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 8008770:	f011 fe94 	bl	801a49c <puts>
	    if(Meas_Mode != 5){
 8008774:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	2a05      	cmp	r2, #5
 800877a:	d00c      	beq.n	8008796 <HAL_RTCEx_WakeUpTimerEventCallback+0x2a>
	        Meas_Mode = 2;
 800877c:	2202      	movs	r2, #2
 800877e:	701a      	strb	r2, [r3, #0]
	        Tick_Save = 0;
 8008780:	2200      	movs	r2, #0
 8008782:	4b08      	ldr	r3, [pc, #32]	@ (80087a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
 8008784:	601a      	str	r2, [r3, #0]
	        First_Measure = -1;
 8008786:	4b08      	ldr	r3, [pc, #32]	@ (80087a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
 8008788:	32ff      	adds	r2, #255	@ 0xff
 800878a:	701a      	strb	r2, [r3, #0]
	        RTC_During_Wakeup = 1;
 800878c:	4b07      	ldr	r3, [pc, #28]	@ (80087ac <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 800878e:	3afe      	subs	r2, #254	@ 0xfe
 8008790:	701a      	strb	r2, [r3, #0]
	    Load_Backup_Index();}
 8008792:	f7fd fecb 	bl	800652c <Load_Backup_Index>
	    RTC_Disable_All_Wakeup();
 8008796:	f7fd f86f 	bl	8005878 <RTC_Disable_All_Wakeup>
}
 800879a:	bd10      	pop	{r4, pc}
 800879c:	0801dd3c 	.word	0x0801dd3c
 80087a0:	20000535 	.word	0x20000535
 80087a4:	20000540 	.word	0x20000540
 80087a8:	20000534 	.word	0x20000534
 80087ac:	200004fc 	.word	0x200004fc

080087b0 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80087b0:	b510      	push	{r4, lr}
	printf("Wake Up by RTC Alarm!\r\n");
 80087b2:	480b      	ldr	r0, [pc, #44]	@ (80087e0 <HAL_RTC_AlarmAEventCallback+0x30>)
 80087b4:	f011 fe72 	bl	801a49c <puts>
	    if(Meas_Mode != 5){
 80087b8:	4b0a      	ldr	r3, [pc, #40]	@ (80087e4 <HAL_RTC_AlarmAEventCallback+0x34>)
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	2a05      	cmp	r2, #5
 80087be:	d00c      	beq.n	80087da <HAL_RTC_AlarmAEventCallback+0x2a>
	        Meas_Mode = 2;
 80087c0:	2202      	movs	r2, #2
 80087c2:	701a      	strb	r2, [r3, #0]
	        Tick_Save = 0;
 80087c4:	2200      	movs	r2, #0
 80087c6:	4b08      	ldr	r3, [pc, #32]	@ (80087e8 <HAL_RTC_AlarmAEventCallback+0x38>)
 80087c8:	601a      	str	r2, [r3, #0]
	        First_Measure = -1;
 80087ca:	4b08      	ldr	r3, [pc, #32]	@ (80087ec <HAL_RTC_AlarmAEventCallback+0x3c>)
 80087cc:	32ff      	adds	r2, #255	@ 0xff
 80087ce:	701a      	strb	r2, [r3, #0]
	        RTC_During_Wakeup = 1;
 80087d0:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <HAL_RTC_AlarmAEventCallback+0x40>)
 80087d2:	3afe      	subs	r2, #254	@ 0xfe
 80087d4:	701a      	strb	r2, [r3, #0]
	    Load_Backup_Index();}
 80087d6:	f7fd fea9 	bl	800652c <Load_Backup_Index>
	    RTC_Disable_All_Wakeup();
 80087da:	f7fd f84d 	bl	8005878 <RTC_Disable_All_Wakeup>
}
 80087de:	bd10      	pop	{r4, pc}
 80087e0:	0801dd53 	.word	0x0801dd53
 80087e4:	20000535 	.word	0x20000535
 80087e8:	20000540 	.word	0x20000540
 80087ec:	20000534 	.word	0x20000534
 80087f0:	200004fc 	.word	0x200004fc

080087f4 <Error_Handler>:
 80087f4:	b672      	cpsid	i
  while (1)
 80087f6:	e7fe      	b.n	80087f6 <Error_Handler+0x2>

080087f8 <meas_data_log_fast_init>:
//            log_write_offset = offset;
//}

void meas_data_log_fast_init(uint16_t index_num)
{
    log_write_offset = index_num * ENTRY_SIZE;
 80087f8:	2315      	movs	r3, #21
 80087fa:	4358      	muls	r0, r3
    if (log_write_offset > LOG_MAX_SIZE)  // 오버런 방지
 80087fc:	2380      	movs	r3, #128	@ 0x80
    log_write_offset = index_num * ENTRY_SIZE;
 80087fe:	4a03      	ldr	r2, [pc, #12]	@ (800880c <meas_data_log_fast_init+0x14>)
    if (log_write_offset > LOG_MAX_SIZE)  // 오버런 방지
 8008800:	035b      	lsls	r3, r3, #13
 8008802:	4298      	cmp	r0, r3
 8008804:	d900      	bls.n	8008808 <meas_data_log_fast_init+0x10>
 8008806:	0018      	movs	r0, r3
    log_write_offset = index_num * ENTRY_SIZE;
 8008808:	6010      	str	r0, [r2, #0]
        log_write_offset = LOG_MAX_SIZE;
}
 800880a:	4770      	bx	lr
 800880c:	20000b70 	.word	0x20000b70

08008810 <meas_data_log_write>:

void meas_data_log_write(const uint8_t *data, size_t len)
{


    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 8008810:	2380      	movs	r3, #128	@ 0x80
{
 8008812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008814:	000d      	movs	r5, r1
    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 8008816:	4f12      	ldr	r7, [pc, #72]	@ (8008860 <meas_data_log_write+0x50>)
 8008818:	035b      	lsls	r3, r3, #13
 800881a:	683e      	ldr	r6, [r7, #0]
{
 800881c:	9001      	str	r0, [sp, #4]
    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 800881e:	18f6      	adds	r6, r6, r3
    size_t remaining = len;
    const uint8_t *p = data;

    while (remaining) {
 8008820:	2d00      	cmp	r5, #0
 8008822:	d106      	bne.n	8008832 <meas_data_log_write+0x22>
        log_write_offset += chunk;

//        printf("[DEBUG] Chunk written: chunk=%lu, next_offset=%lu\r\n", (unsigned long)chunk, (unsigned long)log_write_offset);
    }

    if (log_write_offset >= LOG_MAX_SIZE) {
 8008824:	2380      	movs	r3, #128	@ 0x80
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	035b      	lsls	r3, r3, #13
 800882a:	429a      	cmp	r2, r3
 800882c:	d300      	bcc.n	8008830 <meas_data_log_write+0x20>
//        printf("[WARN] log_write_offset overflow! Reset to 0\r\n");
        log_write_offset = 0;
 800882e:	603d      	str	r5, [r7, #0]
    }
}
 8008830:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        uint32_t off = addr % LOG_PAGE_SIZE;
 8008832:	24ff      	movs	r4, #255	@ 0xff
        uint32_t chunk = LOG_PAGE_SIZE - off;
 8008834:	2380      	movs	r3, #128	@ 0x80
        uint32_t off = addr % LOG_PAGE_SIZE;
 8008836:	4034      	ands	r4, r6
        uint32_t chunk = LOG_PAGE_SIZE - off;
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	1b1c      	subs	r4, r3, r4
        if (chunk > remaining) chunk = remaining;
 800883c:	42ac      	cmp	r4, r5
 800883e:	d900      	bls.n	8008842 <meas_data_log_write+0x32>
 8008840:	002c      	movs	r4, r5
        SPI_FLASH_PageProgram(addr, (uint8_t*)p, chunk);
 8008842:	0030      	movs	r0, r6
 8008844:	0022      	movs	r2, r4
 8008846:	9901      	ldr	r1, [sp, #4]
 8008848:	f001 fd0a 	bl	800a260 <SPI_FLASH_PageProgram>
        p += chunk;
 800884c:	9b01      	ldr	r3, [sp, #4]
        addr += chunk;
 800884e:	1936      	adds	r6, r6, r4
        p += chunk;
 8008850:	191b      	adds	r3, r3, r4
 8008852:	9301      	str	r3, [sp, #4]
        log_write_offset += chunk;
 8008854:	683b      	ldr	r3, [r7, #0]
        remaining -= chunk;
 8008856:	1b2d      	subs	r5, r5, r4
        log_write_offset += chunk;
 8008858:	191b      	adds	r3, r3, r4
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	e7e0      	b.n	8008820 <meas_data_log_write+0x10>
 800885e:	46c0      	nop			@ (mov r8, r8)
 8008860:	20000b70 	.word	0x20000b70

08008864 <meas_data_log_read>:


void meas_data_log_read(uint32_t offset, uint8_t *buf, size_t len)
{
    if (offset + len > LOG_MAX_SIZE) return;
 8008864:	2380      	movs	r3, #128	@ 0x80
{
 8008866:	b510      	push	{r4, lr}
    if (offset + len > LOG_MAX_SIZE) return;
 8008868:	1884      	adds	r4, r0, r2
 800886a:	035b      	lsls	r3, r3, #13
 800886c:	429c      	cmp	r4, r3
 800886e:	d802      	bhi.n	8008876 <meas_data_log_read+0x12>
    SPI_FLASH_ReadData(LOG_BASE_ADDR + offset, buf, len);
 8008870:	18c0      	adds	r0, r0, r3
 8008872:	f001 fd3b 	bl	800a2ec <SPI_FLASH_ReadData>
}
 8008876:	bd10      	pop	{r4, pc}

08008878 <meas_data_log_erase>:
//
//    log_write_offset = 0;
//    printf("[ERASE] All sectors processed. log_write_offset reset.\r\n");
//}
void meas_data_log_erase(void) // 3번 Check
{
 8008878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887a:	4c16      	ldr	r4, [pc, #88]	@ (80088d4 <meas_data_log_erase+0x5c>)
        bool erased_ok = false;

        for (int attempt = 0; attempt < 3 && !erased_ok; attempt++)  // 최대 3회 시도
        {
            SPI_FLASH_EraseSector(addr);
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 800887c:	2680      	movs	r6, #128	@ 0x80
{
 800887e:	44a5      	add	sp, r4
 8008880:	2480      	movs	r4, #128	@ 0x80

            erased_ok = true;
 8008882:	2701      	movs	r7, #1
{
 8008884:	0364      	lsls	r4, r4, #13
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 8008886:	0176      	lsls	r6, r6, #5
{
 8008888:	2503      	movs	r5, #3
            SPI_FLASH_EraseSector(addr);
 800888a:	0020      	movs	r0, r4
 800888c:	f001 fca4 	bl	800a1d8 <SPI_FLASH_EraseSector>
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 8008890:	0032      	movs	r2, r6
 8008892:	4669      	mov	r1, sp
 8008894:	0020      	movs	r0, r4
 8008896:	f001 fd29 	bl	800a2ec <SPI_FLASH_ReadData>
            for (uint32_t i = 0; i < LOG_SECTOR_SIZE; i++) {
 800889a:	2300      	movs	r3, #0
                if (buf[i] != 0xFF) {
 800889c:	466a      	mov	r2, sp
 800889e:	5cd2      	ldrb	r2, [r2, r3]
 80088a0:	2aff      	cmp	r2, #255	@ 0xff
 80088a2:	d115      	bne.n	80088d0 <meas_data_log_erase+0x58>
            for (uint32_t i = 0; i < LOG_SECTOR_SIZE; i++) {
 80088a4:	3301      	adds	r3, #1
 80088a6:	42b3      	cmp	r3, r6
 80088a8:	d1f8      	bne.n	800889c <meas_data_log_erase+0x24>
            erased_ok = true;
 80088aa:	003b      	movs	r3, r7
        for (int attempt = 0; attempt < 3 && !erased_ok; attempt++)  // 최대 3회 시도
 80088ac:	3d01      	subs	r5, #1
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	d001      	beq.n	80088b6 <meas_data_log_erase+0x3e>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0e9      	beq.n	800888a <meas_data_log_erase+0x12>
    for (uint32_t s = 0; s < sectors; s++)
 80088b6:	2380      	movs	r3, #128	@ 0x80
 80088b8:	015b      	lsls	r3, r3, #5
 80088ba:	18e4      	adds	r4, r4, r3
 80088bc:	2380      	movs	r3, #128	@ 0x80
 80088be:	039b      	lsls	r3, r3, #14
 80088c0:	429c      	cmp	r4, r3
 80088c2:	d1e1      	bne.n	8008888 <meas_data_log_erase+0x10>
            }
        }
        // 출력 부분 제거됨 (OK/FAIL 로그 없음)
    }

    log_write_offset = 0;
 80088c4:	2200      	movs	r2, #0
 80088c6:	4b04      	ldr	r3, [pc, #16]	@ (80088d8 <meas_data_log_erase+0x60>)
 80088c8:	601a      	str	r2, [r3, #0]
}
 80088ca:	4b04      	ldr	r3, [pc, #16]	@ (80088dc <meas_data_log_erase+0x64>)
 80088cc:	449d      	add	sp, r3
 80088ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    erased_ok = false;
 80088d0:	2300      	movs	r3, #0
 80088d2:	e7eb      	b.n	80088ac <meas_data_log_erase+0x34>
 80088d4:	ffffeffc 	.word	0xffffeffc
 80088d8:	20000b70 	.word	0x20000b70
 80088dc:	00001004 	.word	0x00001004

080088e0 <meas_data_log_write_entry>:

/**
 * @brief  log_entry_t 하나를 플래시에 이어쓰기
 */
void meas_data_log_write_entry(const log_entry_t *e)
{
 80088e0:	b510      	push	{r4, lr}
    // 체크섬 계산 예시 (간단 sum)
    uint16_t sum = 0;
 80088e2:	2400      	movs	r4, #0
{
 80088e4:	0001      	movs	r1, r0
 80088e6:	0003      	movs	r3, r0
 80088e8:	b086      	sub	sp, #24
 80088ea:	3013      	adds	r0, #19
    const uint8_t *p = (const uint8_t*)e;
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
        sum += p[i];
 80088ec:	781a      	ldrb	r2, [r3, #0]
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 80088ee:	3301      	adds	r3, #1
        sum += p[i];
 80088f0:	18a4      	adds	r4, r4, r2
 80088f2:	b2a4      	uxth	r4, r4
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 80088f4:	4283      	cmp	r3, r0
 80088f6:	d1f9      	bne.n	80088ec <meas_data_log_write_entry+0xc>
    }
    // 구조체 복사 후 checksum 필드에 기록
    log_entry_t tmp = *e;
 80088f8:	2215      	movs	r2, #21
 80088fa:	4668      	mov	r0, sp
 80088fc:	f011 fff4 	bl	801a8e8 <memcpy>
    tmp.checksum    = sum;
 8008900:	466b      	mov	r3, sp

    // ENTRY_SIZE 바이트를 그대로 append
    meas_data_log_write((uint8_t*)&tmp, ENTRY_SIZE);
 8008902:	2115      	movs	r1, #21
 8008904:	4668      	mov	r0, sp
    tmp.checksum    = sum;
 8008906:	825c      	strh	r4, [r3, #18]
    meas_data_log_write((uint8_t*)&tmp, ENTRY_SIZE);
 8008908:	f7ff ff82 	bl	8008810 <meas_data_log_write>
}
 800890c:	b006      	add	sp, #24
 800890e:	bd10      	pop	{r4, pc}

08008910 <meas_data_log_read_entry>:
/**
 * @brief  플래시에 기록된 n번째 엔트리를 읽어옴
 */
void meas_data_log_read_entry(uint32_t index, log_entry_t *e)
{
    uint32_t offset = index * ENTRY_SIZE;
 8008910:	2215      	movs	r2, #21
{
 8008912:	000b      	movs	r3, r1
    if (offset + ENTRY_SIZE > LOG_MAX_SIZE) {
 8008914:	2180      	movs	r1, #128	@ 0x80
    uint32_t offset = index * ENTRY_SIZE;
 8008916:	4350      	muls	r0, r2
{
 8008918:	b510      	push	{r4, lr}
    if (offset + ENTRY_SIZE > LOG_MAX_SIZE) {
 800891a:	1884      	adds	r4, r0, r2
 800891c:	0349      	lsls	r1, r1, #13
 800891e:	428c      	cmp	r4, r1
 8008920:	d904      	bls.n	800892c <meas_data_log_read_entry+0x1c>
        // 범위 벗어나면 초기화
        memset(e, 0xFF, ENTRY_SIZE);
 8008922:	21ff      	movs	r1, #255	@ 0xff
 8008924:	0018      	movs	r0, r3
 8008926:	f011 ff15 	bl	801a754 <memset>
        return;
    }
    meas_data_log_read(offset, (uint8_t*)e, ENTRY_SIZE);
}
 800892a:	bd10      	pop	{r4, pc}
    meas_data_log_read(offset, (uint8_t*)e, ENTRY_SIZE);
 800892c:	0019      	movs	r1, r3
 800892e:	f7ff ff99 	bl	8008864 <meas_data_log_read>
 8008932:	e7fa      	b.n	800892a <meas_data_log_read_entry+0x1a>

08008934 <meas_data_log_read_last>:


void meas_data_log_read_last(void)
{
 8008934:	b570      	push	{r4, r5, r6, lr}
    if (log_write_offset < ENTRY_SIZE) return;
 8008936:	4b23      	ldr	r3, [pc, #140]	@ (80089c4 <meas_data_log_read_last+0x90>)
{
 8008938:	b0b4      	sub	sp, #208	@ 0xd0
    if (log_write_offset < ENTRY_SIZE) return;
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	2814      	cmp	r0, #20
 800893e:	d93e      	bls.n	80089be <meas_data_log_read_last+0x8a>
    uint32_t read_ofs = log_write_offset - ENTRY_SIZE;
    log_entry_t e;
    meas_data_log_read(read_ofs, (uint8_t*)&e, ENTRY_SIZE);
 8008940:	ac0e      	add	r4, sp, #56	@ 0x38
 8008942:	2215      	movs	r2, #21
 8008944:	0021      	movs	r1, r4
    uint32_t read_ofs = log_write_offset - ENTRY_SIZE;
 8008946:	3815      	subs	r0, #21
    meas_data_log_read(read_ofs, (uint8_t*)&e, ENTRY_SIZE);
 8008948:	f7ff ff8c 	bl	8008864 <meas_data_log_read>

    // UART 출력 (print_log_entry와 동일)
    char txt[128];
    int year = 2000 + e.year;
    float temp_c = e.temperature / 10.0f;
    int len = snprintf(txt, sizeof(txt),
 800894c:	7c63      	ldrb	r3, [r4, #17]
 800894e:	8826      	ldrh	r6, [r4, #0]
 8008950:	930d      	str	r3, [sp, #52]	@ 0x34
 8008952:	7c23      	ldrb	r3, [r4, #16]
        "Idx:%3u Date:%04d-%02u-%02u %02u:%02u:%02u "
        "Cnt:%3u T:%.1fCC Dose:%.2fmSv/h Mark:0x%02X RadFlag:%d\r\n",
        e.index, year, e.month, e.day, e.hour, e.minute, e.second,
        e.count, temp_c, e.dose/100.0f, e.mark, e.rad_measure_mark
 8008954:	9811      	ldr	r0, [sp, #68]	@ 0x44
    int len = snprintf(txt, sizeof(txt),
 8008956:	930c      	str	r3, [sp, #48]	@ 0x30
        e.count, temp_c, e.dose/100.0f, e.mark, e.rad_measure_mark
 8008958:	f7f8 ff38 	bl	80017cc <__aeabi_ui2f>
 800895c:	491a      	ldr	r1, [pc, #104]	@ (80089c8 <meas_data_log_read_last+0x94>)
 800895e:	f7f8 f923 	bl	8000ba8 <__aeabi_fdiv>
    int len = snprintf(txt, sizeof(txt),
 8008962:	f7fa ff19 	bl	8003798 <__aeabi_f2d>
 8008966:	900a      	str	r0, [sp, #40]	@ 0x28
 8008968:	910b      	str	r1, [sp, #44]	@ 0x2c
    float temp_c = e.temperature / 10.0f;
 800896a:	230a      	movs	r3, #10
 800896c:	5ee0      	ldrsh	r0, [r4, r3]
 800896e:	f7f8 fedd 	bl	800172c <__aeabi_i2f>
 8008972:	4916      	ldr	r1, [pc, #88]	@ (80089cc <meas_data_log_read_last+0x98>)
 8008974:	f7f8 f918 	bl	8000ba8 <__aeabi_fdiv>
    int len = snprintf(txt, sizeof(txt),
 8008978:	f7fa ff0e 	bl	8003798 <__aeabi_f2d>
    int year = 2000 + e.year;
 800897c:	22fa      	movs	r2, #250	@ 0xfa
    int len = snprintf(txt, sizeof(txt),
 800897e:	9008      	str	r0, [sp, #32]
 8008980:	9109      	str	r1, [sp, #36]	@ 0x24
 8008982:	8923      	ldrh	r3, [r4, #8]
 8008984:	4d12      	ldr	r5, [pc, #72]	@ (80089d0 <meas_data_log_read_last+0x9c>)
 8008986:	9306      	str	r3, [sp, #24]
 8008988:	79e3      	ldrb	r3, [r4, #7]
    int year = 2000 + e.year;
 800898a:	00d2      	lsls	r2, r2, #3
    int len = snprintf(txt, sizeof(txt),
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	79a3      	ldrb	r3, [r4, #6]
 8008990:	2180      	movs	r1, #128	@ 0x80
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	7963      	ldrb	r3, [r4, #5]
 8008996:	a814      	add	r0, sp, #80	@ 0x50
 8008998:	9303      	str	r3, [sp, #12]
 800899a:	7923      	ldrb	r3, [r4, #4]
 800899c:	9302      	str	r3, [sp, #8]
 800899e:	78e3      	ldrb	r3, [r4, #3]
 80089a0:	9301      	str	r3, [sp, #4]
    int year = 2000 + e.year;
 80089a2:	78a3      	ldrb	r3, [r4, #2]
 80089a4:	189b      	adds	r3, r3, r2
    int len = snprintf(txt, sizeof(txt),
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	002a      	movs	r2, r5
 80089aa:	0033      	movs	r3, r6
 80089ac:	f011 fd80 	bl	801a4b0 <sniprintf>
    );
    HAL_UART_Transmit(&huart3, (uint8_t*)txt, len, HAL_MAX_DELAY);
 80089b0:	2301      	movs	r3, #1
 80089b2:	b282      	uxth	r2, r0
 80089b4:	425b      	negs	r3, r3
 80089b6:	4807      	ldr	r0, [pc, #28]	@ (80089d4 <meas_data_log_read_last+0xa0>)
 80089b8:	a914      	add	r1, sp, #80	@ 0x50
 80089ba:	f00a fdbc 	bl	8013536 <HAL_UART_Transmit>
}
 80089be:	b034      	add	sp, #208	@ 0xd0
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	46c0      	nop			@ (mov r8, r8)
 80089c4:	20000b70 	.word	0x20000b70
 80089c8:	42c80000 	.word	0x42c80000
 80089cc:	41200000 	.word	0x41200000
 80089d0:	0801dd6a 	.word	0x0801dd6a
 80089d4:	20000840 	.word	0x20000840

080089d8 <crc8_SMBUS_calculate>:
 * @return The 8-bit CRC checksum.
 */
//FIXME: Create crc table for speed up.
uint8_t crc8_SMBUS_calculate(const uint8_t *data, size_t length) {
    uint8_t crc = 0x00;
    for (size_t i = 0; i < length; ++i) {
 80089d8:	0003      	movs	r3, r0
uint8_t crc8_SMBUS_calculate(const uint8_t *data, size_t length) {
 80089da:	b530      	push	{r4, r5, lr}
 80089dc:	1841      	adds	r1, r0, r1
        crc ^= data[i];
        for (int j = 0; j < 8; ++j) {
            if (crc & 0x80) { // If MSB is 1
                crc = (crc << 1) ^ CRC8_SMBUS_POLYNOMIAL;
 80089de:	2507      	movs	r5, #7
    uint8_t crc = 0x00;
 80089e0:	2000      	movs	r0, #0
    for (size_t i = 0; i < length; ++i) {
 80089e2:	428b      	cmp	r3, r1
 80089e4:	d100      	bne.n	80089e8 <crc8_SMBUS_calculate+0x10>
                crc <<= 1;
            }
        }
    }
    return crc;
}
 80089e6:	bd30      	pop	{r4, r5, pc}
        crc ^= data[i];
 80089e8:	2408      	movs	r4, #8
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	4050      	eors	r0, r2
            if (crc & 0x80) { // If MSB is 1
 80089ee:	b242      	sxtb	r2, r0
                crc <<= 1;
 80089f0:	0040      	lsls	r0, r0, #1
 80089f2:	b2c0      	uxtb	r0, r0
            if (crc & 0x80) { // If MSB is 1
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	da02      	bge.n	80089fe <crc8_SMBUS_calculate+0x26>
                crc = (crc << 1) ^ CRC8_SMBUS_POLYNOMIAL;
 80089f8:	0052      	lsls	r2, r2, #1
 80089fa:	406a      	eors	r2, r5
 80089fc:	b2d0      	uxtb	r0, r2
        for (int j = 0; j < 8; ++j) {
 80089fe:	3c01      	subs	r4, #1
 8008a00:	2c00      	cmp	r4, #0
 8008a02:	d1f4      	bne.n	80089ee <crc8_SMBUS_calculate+0x16>
    for (size_t i = 0; i < length; ++i) {
 8008a04:	3301      	adds	r3, #1
 8008a06:	e7ec      	b.n	80089e2 <crc8_SMBUS_calculate+0xa>

08008a08 <Rad_USBX_HID_ACK_response.isra.0>:

static UINT Rad_USBX_HID_ACK_response(const uint8_t cmd_id, const uint8_t parm_id, const uint8_t error_code) {
 8008a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t tx_buf[64] = {0};
 8008a0a:	2740      	movs	r7, #64	@ 0x40
static UINT Rad_USBX_HID_ACK_response(const uint8_t cmd_id, const uint8_t parm_id, const uint8_t error_code) {
 8008a0c:	b091      	sub	sp, #68	@ 0x44
 8008a0e:	0006      	movs	r6, r0
 8008a10:	000d      	movs	r5, r1
 8008a12:	0014      	movs	r4, r2
    uint8_t tx_buf[64] = {0};
 8008a14:	2100      	movs	r1, #0
 8008a16:	003a      	movs	r2, r7
 8008a18:	4668      	mov	r0, sp
 8008a1a:	f011 fe9b 	bl	801a754 <memset>

    // 1. start
    tx_buf[0] = DEVICE_PACKET_START_0;
 8008a1e:	4b09      	ldr	r3, [pc, #36]	@ (8008a44 <Rad_USBX_HID_ACK_response.isra.0+0x3c>)
    // 4. data
    tx_buf[4] = cmd_id; // Command ID
    tx_buf[5] = parm_id; // Parameter ID
    tx_buf[6] = error_code; // Error code
    // 5. checksum
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008a20:	2103      	movs	r1, #3
    tx_buf[0] = DEVICE_PACKET_START_0;
 8008a22:	9300      	str	r3, [sp, #0]
    tx_buf[4] = cmd_id; // Command ID
 8008a24:	466b      	mov	r3, sp
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008a26:	a801      	add	r0, sp, #4
    tx_buf[4] = cmd_id; // Command ID
 8008a28:	711e      	strb	r6, [r3, #4]
    tx_buf[5] = parm_id; // Parameter ID
 8008a2a:	715d      	strb	r5, [r3, #5]
    tx_buf[6] = error_code; // Error code
 8008a2c:	719c      	strb	r4, [r3, #6]
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008a2e:	f7ff ffd3 	bl	80089d8 <crc8_SMBUS_calculate>
 8008a32:	466b      	mov	r3, sp

    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008a34:	0039      	movs	r1, r7
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008a36:	71d8      	strb	r0, [r3, #7]
    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008a38:	4668      	mov	r0, sp
 8008a3a:	f010 fbf5 	bl	8019228 <USB_Send_HidReport>
}
 8008a3e:	b011      	add	sp, #68	@ 0x44
 8008a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a42:	46c0      	nop			@ (mov r8, r8)
 8008a44:	03fe5555 	.word	0x03fe5555

08008a48 <RAD_USBX_Device_Init>:
static void Rad_USBX_HID_Set_Command(const uint8_t parm_id);
static void Rad_USBX_HID_Get_Parameters(const uint8_t parm_id);
static void Rad_USBX_HID_Get_Records(const uint8_t parm_id);
static void Rad_USBX_HID_Set_Parameters(const uint8_t *data, const uint8_t len);

UINT RAD_USBX_Device_Init(void){
 8008a48:	b570      	push	{r4, r5, r6, lr}
	UINT status  = 0;


	//Sometimes it fails to initiate device due to memory insufficient
	// add this flag to ensure initiate device successfully.
	status = MX_USBX_Device_Init();
 8008a4a:	f010 fb23 	bl	8019094 <MX_USBX_Device_Init>
 8008a4e:	1e04      	subs	r4, r0, #0
	if (status != 0) {
 8008a50:	d005      	beq.n	8008a5e <RAD_USBX_Device_Init+0x16>
//FIXME: add debug level.
#if DEBUG_LOG ==1
		printf("Failed: MX_USBX_Device_Init status %x\n",status);
 8008a52:	0021      	movs	r1, r4
 8008a54:	481b      	ldr	r0, [pc, #108]	@ (8008ac4 <RAD_USBX_Device_Init+0x7c>)
 8008a56:	f011 fcb1 	bl	801a3bc <iprintf>
	ux_dcd_stm32_initialize((ULONG)0, (ULONG)&hpcd_USB_DRD_FS);

	HAL_PCD_Start(&hpcd_USB_DRD_FS);

	return status;
}
 8008a5a:	0020      	movs	r0, r4
 8008a5c:	bd70      	pop	{r4, r5, r6, pc}
	MX_USB_PCD_Init();
 8008a5e:	f7ff fe2b 	bl	80086b8 <MX_USB_PCD_Init>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x40);
 8008a62:	4d19      	ldr	r5, [pc, #100]	@ (8008ac8 <RAD_USBX_Device_Init+0x80>)
 8008a64:	0022      	movs	r2, r4
 8008a66:	0021      	movs	r1, r4
 8008a68:	2340      	movs	r3, #64	@ 0x40
 8008a6a:	0028      	movs	r0, r5
 8008a6c:	f008 f8eb 	bl	8010c46 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x80);
 8008a70:	2380      	movs	r3, #128	@ 0x80
 8008a72:	0022      	movs	r2, r4
 8008a74:	0019      	movs	r1, r3
 8008a76:	0028      	movs	r0, r5
 8008a78:	f008 f8e5 	bl	8010c46 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x01, PCD_SNG_BUF, 0xC0);
 8008a7c:	0022      	movs	r2, r4
 8008a7e:	23c0      	movs	r3, #192	@ 0xc0
 8008a80:	2101      	movs	r1, #1
 8008a82:	0028      	movs	r0, r5
 8008a84:	f008 f8df 	bl	8010c46 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x100);
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	0022      	movs	r2, r4
 8008a8c:	2181      	movs	r1, #129	@ 0x81
 8008a8e:	0028      	movs	r0, r5
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	f008 f8d8 	bl	8010c46 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x02, PCD_SNG_BUF, 0x140);
 8008a96:	23a0      	movs	r3, #160	@ 0xa0
 8008a98:	0022      	movs	r2, r4
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	0028      	movs	r0, r5
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	f008 f8d1 	bl	8010c46 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x82, PCD_SNG_BUF, 0x180);
 8008aa4:	23c0      	movs	r3, #192	@ 0xc0
 8008aa6:	0022      	movs	r2, r4
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	2182      	movs	r1, #130	@ 0x82
 8008aac:	0028      	movs	r0, r5
 8008aae:	f008 f8ca 	bl	8010c46 <HAL_PCDEx_PMAConfig>
	ux_dcd_stm32_initialize((ULONG)0, (ULONG)&hpcd_USB_DRD_FS);
 8008ab2:	0029      	movs	r1, r5
 8008ab4:	0020      	movs	r0, r4
 8008ab6:	f010 f90f 	bl	8018cd8 <_ux_dcd_stm32_initialize>
	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8008aba:	0028      	movs	r0, r5
 8008abc:	f007 fb28 	bl	8010110 <HAL_PCD_Start>
	return status;
 8008ac0:	e7cb      	b.n	8008a5a <RAD_USBX_Device_Init+0x12>
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	0801ddce 	.word	0x0801ddce
 8008ac8:	20000564 	.word	0x20000564

08008acc <RAD_USBX_Device_Process>:

void RAD_USBX_Device_Process(void){
 8008acc:	b510      	push	{r4, lr}

	 ux_device_stack_tasks_run();
 8008ace:	f00e f805 	bl	8016adc <_ux_device_stack_tasks_run>

}
 8008ad2:	bd10      	pop	{r4, pc}

08008ad4 <DeviceSetting_Send>:
    for (uint8_t i = 0; i < pkt->len; ++i)
        sum += pkt->data[i];
    return (uint8_t)(sum % 256);
}

int DeviceSetting_Send(const DeviceSettingPacket_t* pkt) {
 8008ad4:	b570      	push	{r4, r5, r6, lr}
    uint8_t tx_buf[64] = {0};
 8008ad6:	2640      	movs	r6, #64	@ 0x40
int DeviceSetting_Send(const DeviceSettingPacket_t* pkt) {
 8008ad8:	b090      	sub	sp, #64	@ 0x40
 8008ada:	0004      	movs	r4, r0
    uint8_t tx_buf[64] = {0};
 8008adc:	0032      	movs	r2, r6
 8008ade:	2100      	movs	r1, #0
 8008ae0:	4668      	mov	r0, sp
 8008ae2:	f011 fe37 	bl	801a754 <memset>
    size_t idx = 0;

    // 1. start
    tx_buf[idx++] = pkt->start[0];
 8008ae6:	466a      	mov	r2, sp
 8008ae8:	7823      	ldrb	r3, [r4, #0]
    // 3. parm_id
    tx_buf[idx++] = pkt->parm_id;
    // 4. len
    tx_buf[idx++] = pkt->len;
    // 5. data
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 8008aea:	1d61      	adds	r1, r4, #5
    tx_buf[idx++] = pkt->start[0];
 8008aec:	7013      	strb	r3, [r2, #0]
    tx_buf[idx++] = pkt->start[1];
 8008aee:	7863      	ldrb	r3, [r4, #1]
 8008af0:	7053      	strb	r3, [r2, #1]
    tx_buf[idx++] = pkt->cmd_id;
 8008af2:	78a3      	ldrb	r3, [r4, #2]
 8008af4:	7093      	strb	r3, [r2, #2]
    tx_buf[idx++] = pkt->parm_id;
 8008af6:	78e3      	ldrb	r3, [r4, #3]
 8008af8:	70d3      	strb	r3, [r2, #3]
    tx_buf[idx++] = pkt->len;
 8008afa:	466b      	mov	r3, sp
 8008afc:	7925      	ldrb	r5, [r4, #4]
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 8008afe:	1d58      	adds	r0, r3, #5
    tx_buf[idx++] = pkt->len;
 8008b00:	7115      	strb	r5, [r2, #4]
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 8008b02:	002a      	movs	r2, r5
 8008b04:	f011 fef0 	bl	801a8e8 <memcpy>
    // 5. checksum
    tx_buf[idx++] = pkt->checksum;
 8008b08:	002b      	movs	r3, r5
 8008b0a:	343e      	adds	r4, #62	@ 0x3e
 8008b0c:	7822      	ldrb	r2, [r4, #0]
 8008b0e:	446b      	add	r3, sp

    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008b10:	0031      	movs	r1, r6
 8008b12:	4668      	mov	r0, sp
    tx_buf[idx++] = pkt->checksum;
 8008b14:	715a      	strb	r2, [r3, #5]
    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008b16:	f010 fb87 	bl	8019228 <USB_Send_HidReport>
}
 8008b1a:	b010      	add	sp, #64	@ 0x40
 8008b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b20 <USB_HID_Send_Record>:

UINT USB_HID_Send_Record(const uint16_t record_idx)
{
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	0005      	movs	r5, r0
 8008b24:	b096      	sub	sp, #88	@ 0x58
    // Read entry
    log_entry_t e = {0};
 8008b26:	2215      	movs	r2, #21
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4668      	mov	r0, sp
 8008b2c:	f011 fe12 	bl	801a754 <memset>
    meas_data_log_read_entry(record_idx, &e);
 8008b30:	4669      	mov	r1, sp
 8008b32:	0028      	movs	r0, r5
 8008b34:	f7ff feec 	bl	8008910 <meas_data_log_read_entry>

    if (e.year == 0xFF) {
 8008b38:	466b      	mov	r3, sp
 8008b3a:	789e      	ldrb	r6, [r3, #2]
 8008b3c:	2eff      	cmp	r6, #255	@ 0xff
 8008b3e:	d10a      	bne.n	8008b56 <USB_HID_Send_Record+0x36>
        printf("[USB] Record %u has invalid year (0xFF), stop sending.\r\n", record_idx);
 8008b40:	0029      	movs	r1, r5
 8008b42:	4826      	ldr	r0, [pc, #152]	@ (8008bdc <USB_HID_Send_Record+0xbc>)
 8008b44:	f011 fc3a 	bl	801a3bc <iprintf>
        usbx_host_req_records = 0;  // 전송 종료 신호
 8008b48:	2000      	movs	r0, #0
 8008b4a:	4b25      	ldr	r3, [pc, #148]	@ (8008be0 <USB_HID_Send_Record+0xc0>)
 8008b4c:	6018      	str	r0, [r3, #0]
        cur_record_num = 0;
 8008b4e:	4b25      	ldr	r3, [pc, #148]	@ (8008be4 <USB_HID_Send_Record+0xc4>)
 8008b50:	6018      	str	r0, [r3, #0]

    //FIXME: Change to CRC8_STANDARD func.
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);

    return DeviceSetting_Send(&pkt);
}
 8008b52:	b016      	add	sp, #88	@ 0x58
 8008b54:	bd70      	pop	{r4, r5, r6, pc}
    DeviceSettingPacket_t pkt = {0};
 8008b56:	201b      	movs	r0, #27
 8008b58:	223c      	movs	r2, #60	@ 0x3c
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4468      	add	r0, sp
 8008b5e:	f011 fdf9 	bl	801a754 <memset>
    pkt.start[0] = DEVICE_PACKET_START_0;
 8008b62:	2355      	movs	r3, #85	@ 0x55
    DeviceSettingPacket_t pkt = {0};
 8008b64:	ac06      	add	r4, sp, #24
    pkt.start[0] = DEVICE_PACKET_START_0;
 8008b66:	7023      	strb	r3, [r4, #0]
    pkt.start[1] = DEVICE_PACKET_START_1;
 8008b68:	7063      	strb	r3, [r4, #1]
    pkt.len      = DEVICE_CID_GET_RECRORDS_RESP_LEN;
 8008b6a:	2111      	movs	r1, #17
    pkt.cmd_id   = DEVICE_CID_GET_RECRORDS_RESP;
 8008b6c:	3b43      	subs	r3, #67	@ 0x43
 8008b6e:	70a3      	strb	r3, [r4, #2]
    pkt.data[3] = e.month;
 8008b70:	466b      	mov	r3, sp
    pkt.data[0] = record_idx & 0xFF;
 8008b72:	7165      	strb	r5, [r4, #5]
    pkt.data[1] = (record_idx >> 8) & 0xFF;
 8008b74:	0a2d      	lsrs	r5, r5, #8
    pkt.len      = DEVICE_CID_GET_RECRORDS_RESP_LEN;
 8008b76:	7121      	strb	r1, [r4, #4]
    pkt.data[1] = (record_idx >> 8) & 0xFF;
 8008b78:	71a5      	strb	r5, [r4, #6]
    pkt.data[2] = e.year;
 8008b7a:	71e6      	strb	r6, [r4, #7]
    pkt.data[3] = e.month;
 8008b7c:	78db      	ldrb	r3, [r3, #3]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 8008b7e:	201d      	movs	r0, #29
    pkt.data[3] = e.month;
 8008b80:	7223      	strb	r3, [r4, #8]
    pkt.data[4] = e.day;
 8008b82:	466b      	mov	r3, sp
 8008b84:	791b      	ldrb	r3, [r3, #4]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 8008b86:	4468      	add	r0, sp
    pkt.data[4] = e.day;
 8008b88:	7263      	strb	r3, [r4, #9]
    pkt.data[5] = e.hour;
 8008b8a:	466b      	mov	r3, sp
 8008b8c:	795b      	ldrb	r3, [r3, #5]
 8008b8e:	72a3      	strb	r3, [r4, #10]
    pkt.data[6] = e.minute;
 8008b90:	466b      	mov	r3, sp
 8008b92:	799b      	ldrb	r3, [r3, #6]
 8008b94:	72e3      	strb	r3, [r4, #11]
    pkt.data[7] = e.second;
 8008b96:	466b      	mov	r3, sp
 8008b98:	79db      	ldrb	r3, [r3, #7]
 8008b9a:	7323      	strb	r3, [r4, #12]
    pkt.data[8]  = e.temperature & 0xFF;
 8008b9c:	466b      	mov	r3, sp
 8008b9e:	220a      	movs	r2, #10
 8008ba0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ba2:	7363      	strb	r3, [r4, #13]
    pkt.data[9]  = (e.temperature >> 8) & 0xFF;
 8008ba4:	121b      	asrs	r3, r3, #8
 8008ba6:	73a3      	strb	r3, [r4, #14]
    pkt.data[10] = e.count & 0xFF;
 8008ba8:	466b      	mov	r3, sp
 8008baa:	891b      	ldrh	r3, [r3, #8]
 8008bac:	73e3      	strb	r3, [r4, #15]
    pkt.data[11] = (e.count >> 8) & 0xFF;
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	7423      	strb	r3, [r4, #16]
    pkt.data[12] = e.dose & 0xFF;
 8008bb2:	9b03      	ldr	r3, [sp, #12]
    pkt.data[13] = (e.dose >> 8) & 0xFF;
 8008bb4:	0a1a      	lsrs	r2, r3, #8
    pkt.data[12] = e.dose & 0xFF;
 8008bb6:	7463      	strb	r3, [r4, #17]
    pkt.data[13] = (e.dose >> 8) & 0xFF;
 8008bb8:	74a2      	strb	r2, [r4, #18]
    pkt.data[14] = (e.dose >> 16) & 0xFF;
 8008bba:	0c1a      	lsrs	r2, r3, #16
    pkt.data[15] = (e.dose >> 24) & 0xFF;
 8008bbc:	0e1b      	lsrs	r3, r3, #24
 8008bbe:	7523      	strb	r3, [r4, #20]
    pkt.data[16] = e.mark;
 8008bc0:	466b      	mov	r3, sp
    pkt.data[14] = (e.dose >> 16) & 0xFF;
 8008bc2:	74e2      	strb	r2, [r4, #19]
    pkt.data[16] = e.mark;
 8008bc4:	7c1b      	ldrb	r3, [r3, #16]
 8008bc6:	7563      	strb	r3, [r4, #21]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 8008bc8:	f7ff ff06 	bl	80089d8 <crc8_SMBUS_calculate>
 8008bcc:	2356      	movs	r3, #86	@ 0x56
 8008bce:	446b      	add	r3, sp
 8008bd0:	7018      	strb	r0, [r3, #0]
    return DeviceSetting_Send(&pkt);
 8008bd2:	0020      	movs	r0, r4
 8008bd4:	f7ff ff7e 	bl	8008ad4 <DeviceSetting_Send>
 8008bd8:	e7bb      	b.n	8008b52 <USB_HID_Send_Record+0x32>
 8008bda:	46c0      	nop			@ (mov r8, r8)
 8008bdc:	0801ddf5 	.word	0x0801ddf5
 8008be0:	20000b74 	.word	0x20000b74
 8008be4:	200004f4 	.word	0x200004f4

08008be8 <RAD_USBX_Fatfs_format_disk>:
    memset(data, 0, *len);
    *len = 0;
}


void RAD_USBX_Fatfs_format_disk(void) {
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	b087      	sub	sp, #28


  MKFS_PARM format_options = {
 8008bec:	ac02      	add	r4, sp, #8
 8008bee:	0022      	movs	r2, r4
 8008bf0:	4b23      	ldr	r3, [pc, #140]	@ (8008c80 <RAD_USBX_Fatfs_format_disk+0x98>)
 8008bf2:	cb23      	ldmia	r3!, {r0, r1, r5}
 8008bf4:	c223      	stmia	r2!, {r0, r1, r5}
      .align = 4,         // Data area alignment (Cluster size in sector unit.)
      .n_root = MEDIA_DIRECTORY_ENTRIES,      // Number of root directory entries
      .au_size = MEDIA_LOGICAL_CLUSTER_SIZE        // Cluster size (0=default, determined by volume size)
  };

  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 8008bf6:	4d23      	ldr	r5, [pc, #140]	@ (8008c84 <RAD_USBX_Fatfs_format_disk+0x9c>)
  MKFS_PARM format_options = {
 8008bf8:	681b      	ldr	r3, [r3, #0]
  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 8008bfa:	0029      	movs	r1, r5
  MKFS_PARM format_options = {
 8008bfc:	6013      	str	r3, [r2, #0]
  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 8008bfe:	4822      	ldr	r0, [pc, #136]	@ (8008c88 <RAD_USBX_Fatfs_format_disk+0xa0>)
 8008c00:	2201      	movs	r2, #1
 8008c02:	f00c f95f 	bl	8014ec4 <f_mount>
 8008c06:	4e21      	ldr	r6, [pc, #132]	@ (8008c8c <RAD_USBX_Fatfs_format_disk+0xa4>)
 8008c08:	7030      	strb	r0, [r6, #0]

  if (res == FR_NO_FILESYSTEM) {
 8008c0a:	280d      	cmp	r0, #13
 8008c0c:	d118      	bne.n	8008c40 <RAD_USBX_Fatfs_format_disk+0x58>
      LOG_USB_MSC("No filesystem found, formatting...\r\n");
 8008c0e:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8008c10:	4f20      	ldr	r7, [pc, #128]	@ (8008c94 <RAD_USBX_Fatfs_format_disk+0xac>)
 8008c12:	9301      	str	r3, [sp, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	4920      	ldr	r1, [pc, #128]	@ (8008c98 <RAD_USBX_Fatfs_format_disk+0xb0>)
 8008c18:	9a01      	ldr	r2, [sp, #4]
 8008c1a:	68d8      	ldr	r0, [r3, #12]
 8008c1c:	f011 fba2 	bl	801a364 <fiprintf>
      res = f_mkfs("", &format_options , work, sizeof(work));
 8008c20:	2380      	movs	r3, #128	@ 0x80
 8008c22:	0021      	movs	r1, r4
 8008c24:	015b      	lsls	r3, r3, #5
 8008c26:	0028      	movs	r0, r5
 8008c28:	4a1c      	ldr	r2, [pc, #112]	@ (8008c9c <RAD_USBX_Fatfs_format_disk+0xb4>)
 8008c2a:	f00c fce5 	bl	80155f8 <f_mkfs>
 8008c2e:	1e03      	subs	r3, r0, #0
 8008c30:	7030      	strb	r0, [r6, #0]
      if (res != FR_OK) {
 8008c32:	d005      	beq.n	8008c40 <RAD_USBX_Fatfs_format_disk+0x58>
          LOG_USB_MSC("Error formatting drive! ret:%02x\r\n",res);
 8008c34:	6838      	ldr	r0, [r7, #0]
 8008c36:	491a      	ldr	r1, [pc, #104]	@ (8008ca0 <RAD_USBX_Fatfs_format_disk+0xb8>)
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	68c0      	ldr	r0, [r0, #12]
 8008c3c:	f011 fb92 	bl	801a364 <fiprintf>
      }
  }
  res = f_mount(&fs, "", 1);
 8008c40:	2201      	movs	r2, #1
 8008c42:	0029      	movs	r1, r5
 8008c44:	4810      	ldr	r0, [pc, #64]	@ (8008c88 <RAD_USBX_Fatfs_format_disk+0xa0>)
 8008c46:	f00c f93d 	bl	8014ec4 <f_mount>
 8008c4a:	4c10      	ldr	r4, [pc, #64]	@ (8008c8c <RAD_USBX_Fatfs_format_disk+0xa4>)
 8008c4c:	1e03      	subs	r3, r0, #0
 8008c4e:	7020      	strb	r0, [r4, #0]
  if (res != FR_OK) {
 8008c50:	d006      	beq.n	8008c60 <RAD_USBX_Fatfs_format_disk+0x78>
        LOG_USB_MSC("Error mount drive! ret:%02x\r\n",res);
 8008c52:	4810      	ldr	r0, [pc, #64]	@ (8008c94 <RAD_USBX_Fatfs_format_disk+0xac>)
 8008c54:	4a0e      	ldr	r2, [pc, #56]	@ (8008c90 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8008c56:	6800      	ldr	r0, [r0, #0]
 8008c58:	4912      	ldr	r1, [pc, #72]	@ (8008ca4 <RAD_USBX_Fatfs_format_disk+0xbc>)
 8008c5a:	68c0      	ldr	r0, [r0, #12]
 8008c5c:	f011 fb82 	bl	801a364 <fiprintf>
  }
  res = f_setlabel("0:RAD_TAG_LOG");
 8008c60:	4811      	ldr	r0, [pc, #68]	@ (8008ca8 <RAD_USBX_Fatfs_format_disk+0xc0>)
 8008c62:	f00c fc4b 	bl	80154fc <f_setlabel>
 8008c66:	1e03      	subs	r3, r0, #0
 8008c68:	7020      	strb	r0, [r4, #0]
    if (res != FR_OK) {
 8008c6a:	d006      	beq.n	8008c7a <RAD_USBX_Fatfs_format_disk+0x92>
        LOG_USB_MSC("Error setlabel volume! ret:%02x\r\n",res);
 8008c6c:	4809      	ldr	r0, [pc, #36]	@ (8008c94 <RAD_USBX_Fatfs_format_disk+0xac>)
 8008c6e:	4a08      	ldr	r2, [pc, #32]	@ (8008c90 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8008c70:	6800      	ldr	r0, [r0, #0]
 8008c72:	490e      	ldr	r1, [pc, #56]	@ (8008cac <RAD_USBX_Fatfs_format_disk+0xc4>)
 8008c74:	68c0      	ldr	r0, [r0, #12]
 8008c76:	f011 fb75 	bl	801a364 <fiprintf>
  }
}
 8008c7a:	b007      	add	sp, #28
 8008c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c7e:	46c0      	nop			@ (mov r8, r8)
 8008c80:	0801cc78 	.word	0x0801cc78
 8008c84:	0801f5e0 	.word	0x0801f5e0
 8008c88:	20001b7c 	.word	0x20001b7c
 8008c8c:	20001b78 	.word	0x20001b78
 8008c90:	0801de2e 	.word	0x0801de2e
 8008c94:	200002cc 	.word	0x200002cc
 8008c98:	0801de36 	.word	0x0801de36
 8008c9c:	20000b78 	.word	0x20000b78
 8008ca0:	0801de60 	.word	0x0801de60
 8008ca4:	0801de88 	.word	0x0801de88
 8008ca8:	0801deab 	.word	0x0801deab
 8008cac:	0801deb9 	.word	0x0801deb9

08008cb0 <RAD_USBX_Clean_Vol>:

void RAD_USBX_Clean_Vol(void) {
 8008cb0:	b570      	push	{r4, r5, r6, lr}
    int num_blk_64k = (NOR_FLASH_TOTAL_SIZE / NOR_FLASH_BLOCK_64K_SIZE);
    uint32_t addr = 0;

    for (int i = 0; i < num_blk_64k; i++)
 8008cb2:	2580      	movs	r5, #128	@ 0x80
void RAD_USBX_Clean_Vol(void) {
 8008cb4:	2400      	movs	r4, #0
    for (int i = 0; i < num_blk_64k; i++)
 8008cb6:	036d      	lsls	r5, r5, #13
    {
        addr = NOR_FLASH_BASE_ADDRESS + (i * NOR_FLASH_BLOCK_64K_SIZE);
        SPI_FLASH_EraseBlock64k(addr);
 8008cb8:	0020      	movs	r0, r4
 8008cba:	f001 faaf 	bl	800a21c <SPI_FLASH_EraseBlock64k>
    for (int i = 0; i < num_blk_64k; i++)
 8008cbe:	2380      	movs	r3, #128	@ 0x80
 8008cc0:	025b      	lsls	r3, r3, #9
 8008cc2:	18e4      	adds	r4, r4, r3
 8008cc4:	42ac      	cmp	r4, r5
 8008cc6:	d1f7      	bne.n	8008cb8 <RAD_USBX_Clean_Vol+0x8>
    }
}
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ccc <USB_HID_Receive>:
{
 8008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cce:	b0a1      	sub	sp, #132	@ 0x84
 8008cd0:	0007      	movs	r7, r0
 8008cd2:	9106      	str	r1, [sp, #24]
    if (USB_Get_HidReport(data, len) == 1) {
 8008cd4:	f010 facc 	bl	8019270 <USB_Get_HidReport>
 8008cd8:	2801      	cmp	r0, #1
 8008cda:	d00c      	beq.n	8008cf6 <USB_HID_Receive+0x2a>
    if (*len == 0)  {
 8008cdc:	9b06      	ldr	r3, [sp, #24]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <USB_HID_Receive+0x2a>
    if (data[0] != 0x55 || data[1] != 0x55) {
 8008ce4:	7839      	ldrb	r1, [r7, #0]
 8008ce6:	787a      	ldrb	r2, [r7, #1]
 8008ce8:	2955      	cmp	r1, #85	@ 0x55
 8008cea:	d101      	bne.n	8008cf0 <USB_HID_Receive+0x24>
 8008cec:	2a55      	cmp	r2, #85	@ 0x55
 8008cee:	d004      	beq.n	8008cfa <USB_HID_Receive+0x2e>
        printf("[USB] Invalid Start Byte: %02X %02X\n", data[0], data[1]);
 8008cf0:	48cf      	ldr	r0, [pc, #828]	@ (8009030 <USB_HID_Receive+0x364>)
 8008cf2:	f011 fb63 	bl	801a3bc <iprintf>
}
 8008cf6:	b021      	add	sp, #132	@ 0x84
 8008cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    parm_id = data[3];
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
    checksum = data[5 + payload_len];
 8008cfc:	793e      	ldrb	r6, [r7, #4]
    parm_id = data[3];
 8008cfe:	9305      	str	r3, [sp, #20]
    checksum = data[5 + payload_len];
 8008d00:	19bb      	adds	r3, r7, r6
 8008d02:	795b      	ldrb	r3, [r3, #5]
    printf("[USB][RX] ");
 8008d04:	48cb      	ldr	r0, [pc, #812]	@ (8009034 <USB_HID_Receive+0x368>)
    cmd_id = data[2];
 8008d06:	78bd      	ldrb	r5, [r7, #2]
    checksum = data[5 + payload_len];
 8008d08:	9307      	str	r3, [sp, #28]
    for (int i = 0; i < *len; i++)
 8008d0a:	2400      	movs	r4, #0
    printf("[USB][RX] ");
 8008d0c:	f011 fb56 	bl	801a3bc <iprintf>
    for (int i = 0; i < *len; i++)
 8008d10:	9b06      	ldr	r3, [sp, #24]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d819      	bhi.n	8008d4c <USB_HID_Receive+0x80>
    printf("\n");
 8008d18:	200a      	movs	r0, #10
 8008d1a:	f011 fb5f 	bl	801a3dc <putchar>
    printf("[USB][PARSE] cmd_id=0x%02X, len=%u, payload=0x%02X, checksum=0x%02X\n",
 8008d1e:	9b07      	ldr	r3, [sp, #28]
 8008d20:	0032      	movs	r2, r6
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	0029      	movs	r1, r5
 8008d26:	48c4      	ldr	r0, [pc, #784]	@ (8009038 <USB_HID_Receive+0x36c>)
 8008d28:	9b05      	ldr	r3, [sp, #20]
 8008d2a:	f011 fb47 	bl	801a3bc <iprintf>
    switch (cmd_id) {
 8008d2e:	1e68      	subs	r0, r5, #1
 8008d30:	2807      	cmp	r0, #7
 8008d32:	d901      	bls.n	8008d38 <USB_HID_Receive+0x6c>
 8008d34:	f000 fe55 	bl	80099e2 <USB_HID_Receive+0xd16>
 8008d38:	f7f7 fa0c 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008d3c:	031b000e 	.word	0x031b000e
 8008d40:	0590031f 	.word	0x0590031f
 8008d44:	0648062c 	.word	0x0648062c
 8008d48:	064f0653 	.word	0x064f0653
        printf("%02X ", data[i]);
 8008d4c:	5d39      	ldrb	r1, [r7, r4]
 8008d4e:	48bb      	ldr	r0, [pc, #748]	@ (800903c <USB_HID_Receive+0x370>)
 8008d50:	f011 fb34 	bl	801a3bc <iprintf>
    for (int i = 0; i < *len; i++)
 8008d54:	3401      	adds	r4, #1
 8008d56:	e7db      	b.n	8008d10 <USB_HID_Receive+0x44>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_SUCCESS);
}


static void Rad_USBX_HID_Get_Parameters(const uint8_t parm_id) {
    DeviceSettingPacket_t response_pkt = {0};
 8008d58:	ac10      	add	r4, sp, #64	@ 0x40
 8008d5a:	223f      	movs	r2, #63	@ 0x3f
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	0020      	movs	r0, r4
 8008d60:	f011 fcf8 	bl	801a754 <memset>

    printf("[USB][GET_PARAM] parm_id=0x%02X\n", parm_id);
 8008d64:	48b6      	ldr	r0, [pc, #728]	@ (8009040 <USB_HID_Receive+0x374>)
 8008d66:	9905      	ldr	r1, [sp, #20]
 8008d68:	f011 fb28 	bl	801a3bc <iprintf>

    switch (parm_id)
 8008d6c:	9b05      	ldr	r3, [sp, #20]
 8008d6e:	1e58      	subs	r0, r3, #1
 8008d70:	2819      	cmp	r0, #25
 8008d72:	d900      	bls.n	8008d76 <USB_HID_Receive+0xaa>
 8008d74:	e2f3      	b.n	800935e <USB_HID_Receive+0x692>
 8008d76:	f7f7 f9ed 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008d7a:	001a      	.short	0x001a
 8008d7c:	00540051 	.word	0x00540051
 8008d80:	00600057 	.word	0x00600057
 8008d84:	00680064 	.word	0x00680064
 8008d88:	007e007b 	.word	0x007e007b
 8008d8c:	00a00082 	.word	0x00a00082
 8008d90:	00c000bc 	.word	0x00c000bc
 8008d94:	01250109 	.word	0x01250109
 8008d98:	0152014e 	.word	0x0152014e
 8008d9c:	01b70156 	.word	0x01b70156
 8008da0:	022d01f6 	.word	0x022d01f6
 8008da4:	0287025a 	.word	0x0287025a
 8008da8:	02e102b4 	.word	0x02e102b4
 8008dac:	0141      	.short	0x0141
    {
    case DEVICE_PID_DEVICE_CODE:
        printf("[USB][GET_PARAM] DEVICE_CODE -> %s\n", current_settings.device_code);
 8008dae:	4da5      	ldr	r5, [pc, #660]	@ (8009044 <USB_HID_Receive+0x378>)
 8008db0:	48a5      	ldr	r0, [pc, #660]	@ (8009048 <USB_HID_Receive+0x37c>)
        memcpy(response_pkt.data, current_settings.device_code, strlen((const char*)current_settings.device_code));
        response_pkt.len = strlen((const char*)current_settings.device_code);
        break;

    case DEVICE_PID_SERIAL_NUMBER:
        printf("[USB][GET_PARAM] SERIAL -> %s\n", current_settings.serial);
 8008db2:	0029      	movs	r1, r5
 8008db4:	f011 fb02 	bl	801a3bc <iprintf>
        memcpy(response_pkt.data, current_settings.serial, strlen((const char*)current_settings.serial));
 8008db8:	0028      	movs	r0, r5
 8008dba:	f7f7 f9a5 	bl	8000108 <strlen>
 8008dbe:	0002      	movs	r2, r0
 8008dc0:	202d      	movs	r0, #45	@ 0x2d
 8008dc2:	ab06      	add	r3, sp, #24
 8008dc4:	0029      	movs	r1, r5
 8008dc6:	18c0      	adds	r0, r0, r3
 8008dc8:	f011 fd8e 	bl	801a8e8 <memcpy>
        response_pkt.len = strlen((const char*)current_settings.serial);
 8008dcc:	0028      	movs	r0, r5
 8008dce:	f7f7 f99b 	bl	8000108 <strlen>
 8008dd2:	7120      	strb	r0, [r4, #4]
        printf("[USB][GET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
        Rad_USBX_HID_ACK_response(DEVICE_CID_GET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
        return;
    }

    response_pkt.start[0] = DEVICE_PACKET_START_0;
 8008dd4:	4b9d      	ldr	r3, [pc, #628]	@ (800904c <USB_HID_Receive+0x380>)
 8008dd6:	ac10      	add	r4, sp, #64	@ 0x40
 8008dd8:	8023      	strh	r3, [r4, #0]
    response_pkt.start[1] = DEVICE_PACKET_START_1;
    response_pkt.cmd_id   = DEVICE_CID_GET_PARAMETERS_RESP;
 8008dda:	2311      	movs	r3, #17
    response_pkt.parm_id  = parm_id;
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008ddc:	202d      	movs	r0, #45	@ 0x2d
    response_pkt.cmd_id   = DEVICE_CID_GET_PARAMETERS_RESP;
 8008dde:	70a3      	strb	r3, [r4, #2]
    response_pkt.parm_id  = parm_id;
 8008de0:	9b05      	ldr	r3, [sp, #20]
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008de2:	7925      	ldrb	r5, [r4, #4]
    response_pkt.parm_id  = parm_id;
 8008de4:	70e3      	strb	r3, [r4, #3]
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008de6:	ab06      	add	r3, sp, #24
 8008de8:	0029      	movs	r1, r5
 8008dea:	18c0      	adds	r0, r0, r3
 8008dec:	f7ff fdf4 	bl	80089d8 <crc8_SMBUS_calculate>
 8008df0:	2366      	movs	r3, #102	@ 0x66
 8008df2:	a906      	add	r1, sp, #24
 8008df4:	185b      	adds	r3, r3, r1
 8008df6:	0002      	movs	r2, r0
 8008df8:	7018      	strb	r0, [r3, #0]

    printf("[USB][GET_PARAM] Sending response (len=%u, checksum=0x%02X)\n",
 8008dfa:	0029      	movs	r1, r5
 8008dfc:	4894      	ldr	r0, [pc, #592]	@ (8009050 <USB_HID_Receive+0x384>)
 8008dfe:	f011 fadd 	bl	801a3bc <iprintf>
           response_pkt.len, response_pkt.checksum);

    DeviceSetting_Send(&response_pkt);
 8008e02:	0020      	movs	r0, r4
 8008e04:	f7ff fe66 	bl	8008ad4 <DeviceSetting_Send>
    memset(data, 0, *len);
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	0038      	movs	r0, r7
 8008e10:	f011 fca0 	bl	801a754 <memset>
    *len = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	9a06      	ldr	r2, [sp, #24]
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	e76c      	b.n	8008cf6 <USB_HID_Receive+0x2a>
        printf("[USB][GET_PARAM] SERIAL -> %s\n", current_settings.serial);
 8008e1c:	4d8d      	ldr	r5, [pc, #564]	@ (8009054 <USB_HID_Receive+0x388>)
 8008e1e:	488e      	ldr	r0, [pc, #568]	@ (8009058 <USB_HID_Receive+0x38c>)
 8008e20:	e7c7      	b.n	8008db2 <USB_HID_Receive+0xe6>
        printf("[USB][GET_PARAM] FW_VER -> %s\n", current_settings.firmware_ver);
 8008e22:	4d8e      	ldr	r5, [pc, #568]	@ (800905c <USB_HID_Receive+0x390>)
 8008e24:	488e      	ldr	r0, [pc, #568]	@ (8009060 <USB_HID_Receive+0x394>)
 8008e26:	e7c4      	b.n	8008db2 <USB_HID_Receive+0xe6>
        printf("[USB][GET_PARAM] RECORDING_TYPE -> %u\n", current_settings.sensor_type);
 8008e28:	4d8e      	ldr	r5, [pc, #568]	@ (8009064 <USB_HID_Receive+0x398>)
 8008e2a:	488f      	ldr	r0, [pc, #572]	@ (8009068 <USB_HID_Receive+0x39c>)
 8008e2c:	7829      	ldrb	r1, [r5, #0]
        printf("[USB][GET_PARAM] RAD_UNIT -> %u\n", current_settings.display_dose_unit);
 8008e2e:	f011 fac5 	bl	801a3bc <iprintf>
        response_pkt.data[0] = current_settings.display_dose_unit;
 8008e32:	782b      	ldrb	r3, [r5, #0]
 8008e34:	7163      	strb	r3, [r4, #5]
        response_pkt.len = 1;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e018      	b.n	8008e6c <USB_HID_Receive+0x1a0>
        printf("[USB][GET_PARAM] BATTERY_LEVEL not supported\n");
 8008e3a:	488c      	ldr	r0, [pc, #560]	@ (800906c <USB_HID_Receive+0x3a0>)
 8008e3c:	f011 fb2e 	bl	801a49c <puts>
        break;
 8008e40:	e7c8      	b.n	8008dd4 <USB_HID_Receive+0x108>
        printf("[USB][GET_PARAM] DEVICE_STATUS -> %u\n", current_settings.mode_status);
 8008e42:	4d8b      	ldr	r5, [pc, #556]	@ (8009070 <USB_HID_Receive+0x3a4>)
 8008e44:	488b      	ldr	r0, [pc, #556]	@ (8009074 <USB_HID_Receive+0x3a8>)
 8008e46:	7829      	ldrb	r1, [r5, #0]
 8008e48:	e7f1      	b.n	8008e2e <USB_HID_Receive+0x162>
        printf("[USB][GET_PARAM] TRIP_CODE -> %u\n", current_settings.trip_code);
 8008e4a:	4d8b      	ldr	r5, [pc, #556]	@ (8009078 <USB_HID_Receive+0x3ac>)
 8008e4c:	4e8b      	ldr	r6, [pc, #556]	@ (800907c <USB_HID_Receive+0x3b0>)
 8008e4e:	7829      	ldrb	r1, [r5, #0]
 8008e50:	7833      	ldrb	r3, [r6, #0]
 8008e52:	0209      	lsls	r1, r1, #8
 8008e54:	4319      	orrs	r1, r3
 8008e56:	488a      	ldr	r0, [pc, #552]	@ (8009080 <USB_HID_Receive+0x3b4>)
 8008e58:	f011 fab0 	bl	801a3bc <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.trip_code, response_pkt.data[0], response_pkt.data[1]);
 8008e5c:	782b      	ldrb	r3, [r5, #0]
 8008e5e:	7832      	ldrb	r2, [r6, #0]
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	4313      	orrs	r3, r2
 8008e64:	7163      	strb	r3, [r4, #5]
 8008e66:	0a1b      	lsrs	r3, r3, #8
 8008e68:	71a3      	strb	r3, [r4, #6]
        response_pkt.len = 2;
 8008e6a:	2302      	movs	r3, #2
        response_pkt.len = 4;
 8008e6c:	7123      	strb	r3, [r4, #4]
        break;
 8008e6e:	e7b1      	b.n	8008dd4 <USB_HID_Receive+0x108>
        printf("[USB][GET_PARAM] TRIP_DESCRIPTION -> %s\n", current_settings.trip_desc);
 8008e70:	4d84      	ldr	r5, [pc, #528]	@ (8009084 <USB_HID_Receive+0x3b8>)
 8008e72:	4885      	ldr	r0, [pc, #532]	@ (8009088 <USB_HID_Receive+0x3bc>)
 8008e74:	e79d      	b.n	8008db2 <USB_HID_Receive+0xe6>
        printf("[USB][GET_PARAM] START_MODE -> %u\n", current_settings.start_mode);
 8008e76:	4d85      	ldr	r5, [pc, #532]	@ (800908c <USB_HID_Receive+0x3c0>)
 8008e78:	4885      	ldr	r0, [pc, #532]	@ (8009090 <USB_HID_Receive+0x3c4>)
 8008e7a:	7829      	ldrb	r1, [r5, #0]
 8008e7c:	e7d7      	b.n	8008e2e <USB_HID_Receive+0x162>
        uint32_t v = (uint32_t)current_settings.start_delay;
 8008e7e:	4b71      	ldr	r3, [pc, #452]	@ (8009044 <USB_HID_Receive+0x378>)
 8008e80:	4a84      	ldr	r2, [pc, #528]	@ (8009094 <USB_HID_Receive+0x3c8>)
 8008e82:	0019      	movs	r1, r3
 8008e84:	3165      	adds	r1, #101	@ 0x65
 8008e86:	7809      	ldrb	r1, [r1, #0]
 8008e88:	7812      	ldrb	r2, [r2, #0]
 8008e8a:	0209      	lsls	r1, r1, #8
 8008e8c:	4311      	orrs	r1, r2
 8008e8e:	001a      	movs	r2, r3
 8008e90:	3266      	adds	r2, #102	@ 0x66
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	3367      	adds	r3, #103	@ 0x67
 8008e96:	0412      	lsls	r2, r2, #16
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] START_DELAY -> %lu (len=4)\n", (unsigned long)v);
 8008e9c:	487e      	ldr	r0, [pc, #504]	@ (8009098 <USB_HID_Receive+0x3cc>)
        uint32_t v = (uint32_t)current_settings.start_delay;
 8008e9e:	0609      	lsls	r1, r1, #24
 8008ea0:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((v >> 8) & 0xFF);
 8008ea2:	0a0b      	lsrs	r3, r1, #8
 8008ea4:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((v >> 16) & 0xFF);
 8008ea6:	0c0b      	lsrs	r3, r1, #16
 8008ea8:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((v >> 24) & 0xFF);
 8008eaa:	0e0b      	lsrs	r3, r1, #24
 8008eac:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008eae:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(v & 0xFF);
 8008eb0:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008eb2:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] LOGGING_DURATION -> %u day(s)\n", days);
 8008eb4:	f011 fa82 	bl	801a3bc <iprintf>
        break;
 8008eb8:	e78c      	b.n	8008dd4 <USB_HID_Receive+0x108>
        uint32_t epoch = current_settings.start_reservation_time;
 8008eba:	4b62      	ldr	r3, [pc, #392]	@ (8009044 <USB_HID_Receive+0x378>)
 8008ebc:	4a77      	ldr	r2, [pc, #476]	@ (800909c <USB_HID_Receive+0x3d0>)
 8008ebe:	0019      	movs	r1, r3
 8008ec0:	31a6      	adds	r1, #166	@ 0xa6
 8008ec2:	7809      	ldrb	r1, [r1, #0]
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	0209      	lsls	r1, r1, #8
 8008ec8:	4311      	orrs	r1, r2
 8008eca:	001a      	movs	r2, r3
 8008ecc:	32a7      	adds	r2, #167	@ 0xa7
 8008ece:	7812      	ldrb	r2, [r2, #0]
 8008ed0:	33a8      	adds	r3, #168	@ 0xa8
 8008ed2:	0412      	lsls	r2, r2, #16
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] START_TIME -> epoch=%lu\n", (unsigned long)epoch);
 8008ed8:	4871      	ldr	r0, [pc, #452]	@ (80090a0 <USB_HID_Receive+0x3d4>)
        uint32_t epoch = current_settings.start_reservation_time;
 8008eda:	0609      	lsls	r1, r1, #24
 8008edc:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((epoch >> 8) & 0xFF);
 8008ede:	0a0b      	lsrs	r3, r1, #8
 8008ee0:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((epoch >> 16) & 0xFF);
 8008ee2:	0c0b      	lsrs	r3, r1, #16
 8008ee4:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((epoch >> 24) & 0xFF);
 8008ee6:	0e0b      	lsrs	r3, r1, #24
 8008ee8:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008eea:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(epoch & 0xFF);
 8008eec:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008eee:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] START_TIME -> epoch=%lu\n", (unsigned long)epoch);
 8008ef0:	e7e0      	b.n	8008eb4 <USB_HID_Receive+0x1e8>
        printf("[USB][GET_PARAM] PAUSE -> %u\n", current_settings.pause_enable);
 8008ef2:	4d6c      	ldr	r5, [pc, #432]	@ (80090a4 <USB_HID_Receive+0x3d8>)
 8008ef4:	486c      	ldr	r0, [pc, #432]	@ (80090a8 <USB_HID_Receive+0x3dc>)
 8008ef6:	7829      	ldrb	r1, [r5, #0]
 8008ef8:	e799      	b.n	8008e2e <USB_HID_Receive+0x162>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8008efa:	4e6c      	ldr	r6, [pc, #432]	@ (80090ac <USB_HID_Receive+0x3e0>)
 8008efc:	ac0b      	add	r4, sp, #44	@ 0x2c
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8008efe:	ad0a      	add	r5, sp, #40	@ 0x28
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8008f00:	0021      	movs	r1, r4
 8008f02:	2201      	movs	r2, #1
 8008f04:	0030      	movs	r0, r6
 8008f06:	f009 f967 	bl	80121d8 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8008f0a:	0029      	movs	r1, r5
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	0030      	movs	r0, r6
 8008f10:	f009 f994 	bl	801223c <HAL_RTC_GetDate>
        response_pkt.data[0] = BCD2BIN(sDate.Year);
 8008f14:	220a      	movs	r2, #10
 8008f16:	260f      	movs	r6, #15
 8008f18:	78e9      	ldrb	r1, [r5, #3]
 8008f1a:	a810      	add	r0, sp, #64	@ 0x40
 8008f1c:	090b      	lsrs	r3, r1, #4
 8008f1e:	4353      	muls	r3, r2
 8008f20:	4031      	ands	r1, r6
 8008f22:	185b      	adds	r3, r3, r1
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	7143      	strb	r3, [r0, #5]
 8008f28:	9307      	str	r3, [sp, #28]
        response_pkt.data[1] = BCD2BIN(sDate.Month);
 8008f2a:	7869      	ldrb	r1, [r5, #1]
 8008f2c:	090b      	lsrs	r3, r1, #4
 8008f2e:	4353      	muls	r3, r2
 8008f30:	4031      	ands	r1, r6
 8008f32:	185b      	adds	r3, r3, r1
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	7183      	strb	r3, [r0, #6]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008f38:	78a9      	ldrb	r1, [r5, #2]
        response_pkt.data[1] = BCD2BIN(sDate.Month);
 8008f3a:	469c      	mov	ip, r3
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008f3c:	090b      	lsrs	r3, r1, #4
 8008f3e:	4353      	muls	r3, r2
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 8008f40:	7825      	ldrb	r5, [r4, #0]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008f42:	4031      	ands	r1, r6
 8008f44:	185b      	adds	r3, r3, r1
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 8008f46:	0929      	lsrs	r1, r5, #4
 8008f48:	4351      	muls	r1, r2
 8008f4a:	4035      	ands	r5, r6
 8008f4c:	1949      	adds	r1, r1, r5
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008f4e:	b2db      	uxtb	r3, r3
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 8008f50:	b2c9      	uxtb	r1, r1
 8008f52:	7201      	strb	r1, [r0, #8]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008f54:	71c3      	strb	r3, [r0, #7]
 8008f56:	9308      	str	r3, [sp, #32]
        response_pkt.data[4] = BCD2BIN(sTime.Minutes);
 8008f58:	7863      	ldrb	r3, [r4, #1]
 8008f5a:	091d      	lsrs	r5, r3, #4
 8008f5c:	4355      	muls	r5, r2
 8008f5e:	4033      	ands	r3, r6
 8008f60:	18ed      	adds	r5, r5, r3
 8008f62:	b2ed      	uxtb	r5, r5
 8008f64:	7245      	strb	r5, [r0, #9]
        response_pkt.data[5] = BCD2BIN(sTime.Seconds);
 8008f66:	78a4      	ldrb	r4, [r4, #2]
 8008f68:	0923      	lsrs	r3, r4, #4
 8008f6a:	435a      	muls	r2, r3
 8008f6c:	4034      	ands	r4, r6
 8008f6e:	1912      	adds	r2, r2, r4
        response_pkt.len = 6;
 8008f70:	2406      	movs	r4, #6
        response_pkt.data[5] = BCD2BIN(sTime.Seconds);
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	7282      	strb	r2, [r0, #10]
        response_pkt.len = 6;
 8008f76:	7104      	strb	r4, [r0, #4]
        printf("[USB][GET_PARAM] DEVICE_TIME -> 20%02u-%02u-%02u %02u:%02u:%02u\n",
 8008f78:	9b08      	ldr	r3, [sp, #32]
 8008f7a:	9202      	str	r2, [sp, #8]
 8008f7c:	9100      	str	r1, [sp, #0]
 8008f7e:	4662      	mov	r2, ip
 8008f80:	9907      	ldr	r1, [sp, #28]
 8008f82:	9501      	str	r5, [sp, #4]
 8008f84:	484a      	ldr	r0, [pc, #296]	@ (80090b0 <USB_HID_Receive+0x3e4>)
 8008f86:	f011 fa19 	bl	801a3bc <iprintf>
        break;
 8008f8a:	e723      	b.n	8008dd4 <USB_HID_Receive+0x108>
        uint32_t v = (uint32_t)current_settings.temp_interval;
 8008f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8009044 <USB_HID_Receive+0x378>)
 8008f8e:	4a49      	ldr	r2, [pc, #292]	@ (80090b4 <USB_HID_Receive+0x3e8>)
 8008f90:	0019      	movs	r1, r3
 8008f92:	3176      	adds	r1, #118	@ 0x76
 8008f94:	7809      	ldrb	r1, [r1, #0]
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	0209      	lsls	r1, r1, #8
 8008f9a:	4311      	orrs	r1, r2
 8008f9c:	001a      	movs	r2, r3
 8008f9e:	3277      	adds	r2, #119	@ 0x77
 8008fa0:	7812      	ldrb	r2, [r2, #0]
 8008fa2:	3378      	adds	r3, #120	@ 0x78
 8008fa4:	0412      	lsls	r2, r2, #16
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] TEMP_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008faa:	4843      	ldr	r0, [pc, #268]	@ (80090b8 <USB_HID_Receive+0x3ec>)
        uint32_t v = (uint32_t)current_settings.temp_interval;
 8008fac:	0609      	lsls	r1, r1, #24
 8008fae:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((v >> 8) & 0xFF);
 8008fb0:	0a0b      	lsrs	r3, r1, #8
 8008fb2:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((v >> 16) & 0xFF);
 8008fb4:	0c0b      	lsrs	r3, r1, #16
 8008fb6:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((v >> 24) & 0xFF);
 8008fb8:	0e0b      	lsrs	r3, r1, #24
 8008fba:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008fbc:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(v & 0xFF);
 8008fbe:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008fc0:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] TEMP_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008fc2:	e777      	b.n	8008eb4 <USB_HID_Receive+0x1e8>
        uint32_t v = (uint32_t)current_settings.rad_interval; // 구조체가 u16이면 상위는 0
 8008fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8009044 <USB_HID_Receive+0x378>)
 8008fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80090bc <USB_HID_Receive+0x3f0>)
 8008fc8:	0019      	movs	r1, r3
 8008fca:	3172      	adds	r1, #114	@ 0x72
 8008fcc:	7809      	ldrb	r1, [r1, #0]
 8008fce:	7812      	ldrb	r2, [r2, #0]
 8008fd0:	0209      	lsls	r1, r1, #8
 8008fd2:	4311      	orrs	r1, r2
 8008fd4:	001a      	movs	r2, r3
 8008fd6:	3273      	adds	r2, #115	@ 0x73
 8008fd8:	7812      	ldrb	r2, [r2, #0]
 8008fda:	3374      	adds	r3, #116	@ 0x74
 8008fdc:	0412      	lsls	r2, r2, #16
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] RAD_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008fe2:	4837      	ldr	r0, [pc, #220]	@ (80090c0 <USB_HID_Receive+0x3f4>)
        uint32_t v = (uint32_t)current_settings.rad_interval; // 구조체가 u16이면 상위는 0
 8008fe4:	0609      	lsls	r1, r1, #24
 8008fe6:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((v >> 8) & 0xFF);
 8008fe8:	0a0b      	lsrs	r3, r1, #8
 8008fea:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((v >> 16) & 0xFF);
 8008fec:	0c0b      	lsrs	r3, r1, #16
 8008fee:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((v >> 24) & 0xFF);
 8008ff0:	0e0b      	lsrs	r3, r1, #24
 8008ff2:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008ff4:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(v & 0xFF);
 8008ff6:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008ff8:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] RAD_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008ffa:	e75b      	b.n	8008eb4 <USB_HID_Receive+0x1e8>
        uint16_t days = current_settings.interval_duration_day;  // 0이면 미설정
 8008ffc:	4a31      	ldr	r2, [pc, #196]	@ (80090c4 <USB_HID_Receive+0x3f8>)
 8008ffe:	4b32      	ldr	r3, [pc, #200]	@ (80090c8 <USB_HID_Receive+0x3fc>)
 8009000:	7811      	ldrb	r1, [r2, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	0209      	lsls	r1, r1, #8
 8009006:	4319      	orrs	r1, r3
        response_pkt.data[1] = (uint8_t)((days >> 8) & 0xFF);
 8009008:	0a0b      	lsrs	r3, r1, #8
 800900a:	71a3      	strb	r3, [r4, #6]
        response_pkt.len = 2;
 800900c:	2302      	movs	r3, #2
        printf("[USB][GET_PARAM] LOGGING_DURATION -> %u day(s)\n", days);
 800900e:	482f      	ldr	r0, [pc, #188]	@ (80090cc <USB_HID_Receive+0x400>)
        response_pkt.data[0] = (uint8_t)(days & 0xFF);
 8009010:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 2;
 8009012:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] LOGGING_DURATION -> %u day(s)\n", days);
 8009014:	e74e      	b.n	8008eb4 <USB_HID_Receive+0x1e8>
        printf("[USB][GET_PARAM] REPORT_FORMAT -> %u\n", current_settings.report_format);
 8009016:	4d2e      	ldr	r5, [pc, #184]	@ (80090d0 <USB_HID_Receive+0x404>)
 8009018:	482e      	ldr	r0, [pc, #184]	@ (80090d4 <USB_HID_Receive+0x408>)
 800901a:	7829      	ldrb	r1, [r5, #0]
 800901c:	e707      	b.n	8008e2e <USB_HID_Receive+0x162>
        printf("[USB][GET_PARAM] TEMP_UNIT -> %u\n", current_settings.display_temp_unit);
 800901e:	4d2e      	ldr	r5, [pc, #184]	@ (80090d8 <USB_HID_Receive+0x40c>)
 8009020:	482e      	ldr	r0, [pc, #184]	@ (80090dc <USB_HID_Receive+0x410>)
 8009022:	7829      	ldrb	r1, [r5, #0]
 8009024:	e703      	b.n	8008e2e <USB_HID_Receive+0x162>
        printf("[USB][GET_PARAM] RAD_UNIT -> %u\n", current_settings.display_dose_unit);
 8009026:	4d2e      	ldr	r5, [pc, #184]	@ (80090e0 <USB_HID_Receive+0x414>)
 8009028:	482e      	ldr	r0, [pc, #184]	@ (80090e4 <USB_HID_Receive+0x418>)
 800902a:	7829      	ldrb	r1, [r5, #0]
 800902c:	e6ff      	b.n	8008e2e <USB_HID_Receive+0x162>
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	0801dee0 	.word	0x0801dee0
 8009034:	0801df05 	.word	0x0801df05
 8009038:	0801df16 	.word	0x0801df16
 800903c:	0801df10 	.word	0x0801df10
 8009040:	0801df5b 	.word	0x0801df5b
 8009044:	20002bac 	.word	0x20002bac
 8009048:	0801df7c 	.word	0x0801df7c
 800904c:	00005555 	.word	0x00005555
 8009050:	0801e46a 	.word	0x0801e46a
 8009054:	20002bcc 	.word	0x20002bcc
 8009058:	0801dfa0 	.word	0x0801dfa0
 800905c:	20002bdd 	.word	0x20002bdd
 8009060:	0801dfbf 	.word	0x0801dfbf
 8009064:	20002bdc 	.word	0x20002bdc
 8009068:	0801dfde 	.word	0x0801dfde
 800906c:	0801e005 	.word	0x0801e005
 8009070:	20002c38 	.word	0x20002c38
 8009074:	0801e032 	.word	0x0801e032
 8009078:	20002be6 	.word	0x20002be6
 800907c:	20002be5 	.word	0x20002be5
 8009080:	0801e058 	.word	0x0801e058
 8009084:	20002be7 	.word	0x20002be7
 8009088:	0801e07a 	.word	0x0801e07a
 800908c:	20002c0f 	.word	0x20002c0f
 8009090:	0801e0a3 	.word	0x0801e0a3
 8009094:	20002c10 	.word	0x20002c10
 8009098:	0801e0c6 	.word	0x0801e0c6
 800909c:	20002c51 	.word	0x20002c51
 80090a0:	0801e0f3 	.word	0x0801e0f3
 80090a4:	20002c1c 	.word	0x20002c1c
 80090a8:	0801e11d 	.word	0x0801e11d
 80090ac:	200009f8 	.word	0x200009f8
 80090b0:	0801e13b 	.word	0x0801e13b
 80090b4:	20002c21 	.word	0x20002c21
 80090b8:	0801e17c 	.word	0x0801e17c
 80090bc:	20002c1d 	.word	0x20002c1d
 80090c0:	0801e1b7 	.word	0x0801e1b7
 80090c4:	20002c56 	.word	0x20002c56
 80090c8:	20002c55 	.word	0x20002c55
 80090cc:	0801e1f1 	.word	0x0801e1f1
 80090d0:	20002c25 	.word	0x20002c25
 80090d4:	0801e221 	.word	0x0801e221
 80090d8:	20002c36 	.word	0x20002c36
 80090dc:	0801e247 	.word	0x0801e247
 80090e0:	20002c37 	.word	0x20002c37
 80090e4:	0801e269 	.word	0x0801e269
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 80090e8:	2503      	movs	r5, #3
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 80090ea:	4be3      	ldr	r3, [pc, #908]	@ (8009478 <USB_HID_Receive+0x7ac>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 80090ec:	49e3      	ldr	r1, [pc, #908]	@ (800947c <USB_HID_Receive+0x7b0>)
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	781a      	ldrb	r2, [r3, #0]
 80090f2:	4be3      	ldr	r3, [pc, #908]	@ (8009480 <USB_HID_Receive+0x7b4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 80090f4:	7809      	ldrb	r1, [r1, #0]
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 80090f6:	781b      	ldrb	r3, [r3, #0]
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 80090f8:	0209      	lsls	r1, r1, #8
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 80090fa:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 80090fc:	4313      	orrs	r3, r2
 80090fe:	4ae1      	ldr	r2, [pc, #900]	@ (8009484 <USB_HID_Receive+0x7b8>)
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8009100:	4ce1      	ldr	r4, [pc, #900]	@ (8009488 <USB_HID_Receive+0x7bc>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8009102:	7812      	ldrb	r2, [r2, #0]
 8009104:	3494      	adds	r4, #148	@ 0x94
 8009106:	4311      	orrs	r1, r2
 8009108:	4ae0      	ldr	r2, [pc, #896]	@ (800948c <USB_HID_Receive+0x7c0>)
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 800910a:	4ee1      	ldr	r6, [pc, #900]	@ (8009490 <USB_HID_Receive+0x7c4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 800910c:	7812      	ldrb	r2, [r2, #0]
 800910e:	48e1      	ldr	r0, [pc, #900]	@ (8009494 <USB_HID_Receive+0x7c8>)
 8009110:	0412      	lsls	r2, r2, #16
 8009112:	430a      	orrs	r2, r1
 8009114:	7821      	ldrb	r1, [r4, #0]
 8009116:	0609      	lsls	r1, r1, #24
 8009118:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 800911a:	69b1      	ldr	r1, [r6, #24]
 800911c:	0a09      	lsrs	r1, r1, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 800911e:	4029      	ands	r1, r5
 8009120:	f011 f94c 	bl	801a3bc <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1);
 8009124:	69b3      	ldr	r3, [r6, #24]
 8009126:	aa10      	add	r2, sp, #64	@ 0x40
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	402b      	ands	r3, r5
 800912c:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_rh1, response_pkt.data[1], response_pkt.data[2]);
 800912e:	4bd5      	ldr	r3, [pc, #852]	@ (8009484 <USB_HID_Receive+0x7b8>)
 8009130:	7819      	ldrb	r1, [r3, #0]
 8009132:	4bd2      	ldr	r3, [pc, #840]	@ (800947c <USB_HID_Receive+0x7b0>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	430b      	orrs	r3, r1
 800913a:	49d4      	ldr	r1, [pc, #848]	@ (800948c <USB_HID_Receive+0x7c0>)
 800913c:	7809      	ldrb	r1, [r1, #0]
 800913e:	0409      	lsls	r1, r1, #16
 8009140:	4319      	orrs	r1, r3
 8009142:	7823      	ldrb	r3, [r4, #0]
 8009144:	061b      	lsls	r3, r3, #24
 8009146:	430b      	orrs	r3, r1
 8009148:	7193      	strb	r3, [r2, #6]
 800914a:	0a1b      	lsrs	r3, r3, #8
 800914c:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_rh1, response_pkt.data[3], response_pkt.data[4]);
 800914e:	9b07      	ldr	r3, [sp, #28]
 8009150:	7819      	ldrb	r1, [r3, #0]
 8009152:	4bcb      	ldr	r3, [pc, #812]	@ (8009480 <USB_HID_Receive+0x7b4>)
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl2, response_pkt.data[3], response_pkt.data[4]);
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	430b      	orrs	r3, r1
 800915a:	7213      	strb	r3, [r2, #8]
 800915c:	0a1b      	lsrs	r3, r3, #8
 800915e:	7253      	strb	r3, [r2, #9]
        response_pkt.len = 5;
 8009160:	2305      	movs	r3, #5
 8009162:	7113      	strb	r3, [r2, #4]
        break;
 8009164:	e636      	b.n	8008dd4 <USB_HID_Receive+0x108>
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8009166:	2503      	movs	r5, #3
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8009168:	4bcb      	ldr	r3, [pc, #812]	@ (8009498 <USB_HID_Receive+0x7cc>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 800916a:	49cc      	ldr	r1, [pc, #816]	@ (800949c <USB_HID_Receive+0x7d0>)
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 800916c:	9307      	str	r3, [sp, #28]
 800916e:	781a      	ldrb	r2, [r3, #0]
 8009170:	4bcb      	ldr	r3, [pc, #812]	@ (80094a0 <USB_HID_Receive+0x7d4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8009172:	7809      	ldrb	r1, [r1, #0]
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8009174:	781b      	ldrb	r3, [r3, #0]
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8009176:	0209      	lsls	r1, r1, #8
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8009178:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 800917a:	4313      	orrs	r3, r2
 800917c:	4ac9      	ldr	r2, [pc, #804]	@ (80094a4 <USB_HID_Receive+0x7d8>)
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 800917e:	4cc2      	ldr	r4, [pc, #776]	@ (8009488 <USB_HID_Receive+0x7bc>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8009180:	7812      	ldrb	r2, [r2, #0]
 8009182:	349c      	adds	r4, #156	@ 0x9c
 8009184:	4311      	orrs	r1, r2
 8009186:	4ac8      	ldr	r2, [pc, #800]	@ (80094a8 <USB_HID_Receive+0x7dc>)
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8009188:	4ec1      	ldr	r6, [pc, #772]	@ (8009490 <USB_HID_Receive+0x7c4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 800918a:	7812      	ldrb	r2, [r2, #0]
 800918c:	48c7      	ldr	r0, [pc, #796]	@ (80094ac <USB_HID_Receive+0x7e0>)
 800918e:	0412      	lsls	r2, r2, #16
 8009190:	430a      	orrs	r2, r1
 8009192:	7821      	ldrb	r1, [r4, #0]
 8009194:	0609      	lsls	r1, r1, #24
 8009196:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8009198:	69b1      	ldr	r1, [r6, #24]
 800919a:	0a89      	lsrs	r1, r1, #10
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 800919c:	4029      	ands	r1, r5
 800919e:	f011 f90d 	bl	801a3bc <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2);
 80091a2:	69b3      	ldr	r3, [r6, #24]
 80091a4:	aa10      	add	r2, sp, #64	@ 0x40
 80091a6:	0a9b      	lsrs	r3, r3, #10
 80091a8:	402b      	ands	r3, r5
 80091aa:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_rh2, response_pkt.data[1], response_pkt.data[2]);
 80091ac:	4bbd      	ldr	r3, [pc, #756]	@ (80094a4 <USB_HID_Receive+0x7d8>)
 80091ae:	7819      	ldrb	r1, [r3, #0]
 80091b0:	4bba      	ldr	r3, [pc, #744]	@ (800949c <USB_HID_Receive+0x7d0>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	021b      	lsls	r3, r3, #8
 80091b6:	430b      	orrs	r3, r1
 80091b8:	49bb      	ldr	r1, [pc, #748]	@ (80094a8 <USB_HID_Receive+0x7dc>)
 80091ba:	7809      	ldrb	r1, [r1, #0]
 80091bc:	0409      	lsls	r1, r1, #16
 80091be:	4319      	orrs	r1, r3
 80091c0:	7823      	ldrb	r3, [r4, #0]
 80091c2:	061b      	lsls	r3, r3, #24
 80091c4:	430b      	orrs	r3, r1
 80091c6:	7193      	strb	r3, [r2, #6]
 80091c8:	0a1b      	lsrs	r3, r3, #8
 80091ca:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_rh2, response_pkt.data[3], response_pkt.data[4]);
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	7819      	ldrb	r1, [r3, #0]
 80091d0:	4bb3      	ldr	r3, [pc, #716]	@ (80094a0 <USB_HID_Receive+0x7d4>)
 80091d2:	e7bf      	b.n	8009154 <USB_HID_Receive+0x488>
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 80091d4:	4aac      	ldr	r2, [pc, #688]	@ (8009488 <USB_HID_Receive+0x7bc>)
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 80091d6:	2503      	movs	r5, #3
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 80091d8:	0014      	movs	r4, r2
 80091da:	4bb5      	ldr	r3, [pc, #724]	@ (80094b0 <USB_HID_Receive+0x7e4>)
 80091dc:	3495      	adds	r4, #149	@ 0x95
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	7819      	ldrb	r1, [r3, #0]
 80091e2:	4bb4      	ldr	r3, [pc, #720]	@ (80094b4 <USB_HID_Receive+0x7e8>)
 80091e4:	3296      	adds	r2, #150	@ 0x96
 80091e6:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 80091e8:	4ea9      	ldr	r6, [pc, #676]	@ (8009490 <USB_HID_Receive+0x7c4>)
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 80091ea:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 80091ec:	430b      	orrs	r3, r1
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 80091ee:	7821      	ldrb	r1, [r4, #0]
 80091f0:	9208      	str	r2, [sp, #32]
 80091f2:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 80091f4:	48b0      	ldr	r0, [pc, #704]	@ (80094b8 <USB_HID_Receive+0x7ec>)
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 80091f6:	0212      	lsls	r2, r2, #8
 80091f8:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 80091fa:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 80091fc:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 80091fe:	0b09      	lsrs	r1, r1, #12
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 8009200:	1412      	asrs	r2, r2, #16
 8009202:	4029      	ands	r1, r5
 8009204:	f011 f8da 	bl	801a3bc <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1);
 8009208:	69b3      	ldr	r3, [r6, #24]
 800920a:	aa10      	add	r2, sp, #64	@ 0x40
 800920c:	0b1b      	lsrs	r3, r3, #12
 800920e:	402b      	ands	r3, r5
 8009210:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_th1, response_pkt.data[1], response_pkt.data[2]);
 8009212:	9b08      	ldr	r3, [sp, #32]
 8009214:	7821      	ldrb	r1, [r4, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	430b      	orrs	r3, r1
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	141b      	asrs	r3, r3, #16
 8009220:	7193      	strb	r3, [r2, #6]
 8009222:	121b      	asrs	r3, r3, #8
 8009224:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_th1, response_pkt.data[3], response_pkt.data[4]);
 8009226:	9b07      	ldr	r3, [sp, #28]
 8009228:	7819      	ldrb	r1, [r3, #0]
 800922a:	4ba2      	ldr	r3, [pc, #648]	@ (80094b4 <USB_HID_Receive+0x7e8>)
 800922c:	e792      	b.n	8009154 <USB_HID_Receive+0x488>
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 800922e:	4a96      	ldr	r2, [pc, #600]	@ (8009488 <USB_HID_Receive+0x7bc>)
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009230:	2503      	movs	r5, #3
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009232:	0014      	movs	r4, r2
 8009234:	4ba1      	ldr	r3, [pc, #644]	@ (80094bc <USB_HID_Receive+0x7f0>)
 8009236:	349d      	adds	r4, #157	@ 0x9d
 8009238:	9307      	str	r3, [sp, #28]
 800923a:	7819      	ldrb	r1, [r3, #0]
 800923c:	4ba0      	ldr	r3, [pc, #640]	@ (80094c0 <USB_HID_Receive+0x7f4>)
 800923e:	329e      	adds	r2, #158	@ 0x9e
 8009240:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8009242:	4e93      	ldr	r6, [pc, #588]	@ (8009490 <USB_HID_Receive+0x7c4>)
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009244:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009246:	430b      	orrs	r3, r1
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009248:	7821      	ldrb	r1, [r4, #0]
 800924a:	9208      	str	r2, [sp, #32]
 800924c:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 800924e:	489d      	ldr	r0, [pc, #628]	@ (80094c4 <USB_HID_Receive+0x7f8>)
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009250:	0212      	lsls	r2, r2, #8
 8009252:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8009254:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009256:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8009258:	0b89      	lsrs	r1, r1, #14
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 800925a:	1412      	asrs	r2, r2, #16
 800925c:	4029      	ands	r1, r5
 800925e:	f011 f8ad 	bl	801a3bc <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2);
 8009262:	69b3      	ldr	r3, [r6, #24]
 8009264:	aa10      	add	r2, sp, #64	@ 0x40
 8009266:	0b9b      	lsrs	r3, r3, #14
 8009268:	402b      	ands	r3, r5
 800926a:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_th2, response_pkt.data[1], response_pkt.data[2]);
 800926c:	9b08      	ldr	r3, [sp, #32]
 800926e:	7821      	ldrb	r1, [r4, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	430b      	orrs	r3, r1
 8009276:	041b      	lsls	r3, r3, #16
 8009278:	141b      	asrs	r3, r3, #16
 800927a:	7193      	strb	r3, [r2, #6]
 800927c:	121b      	asrs	r3, r3, #8
 800927e:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_th2, response_pkt.data[3], response_pkt.data[4]);
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	7819      	ldrb	r1, [r3, #0]
 8009284:	4b8e      	ldr	r3, [pc, #568]	@ (80094c0 <USB_HID_Receive+0x7f4>)
 8009286:	e765      	b.n	8009154 <USB_HID_Receive+0x488>
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 8009288:	4a7f      	ldr	r2, [pc, #508]	@ (8009488 <USB_HID_Receive+0x7bc>)
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 800928a:	2503      	movs	r5, #3
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 800928c:	0014      	movs	r4, r2
 800928e:	4b8e      	ldr	r3, [pc, #568]	@ (80094c8 <USB_HID_Receive+0x7fc>)
 8009290:	3497      	adds	r4, #151	@ 0x97
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	7819      	ldrb	r1, [r3, #0]
 8009296:	4b8d      	ldr	r3, [pc, #564]	@ (80094cc <USB_HID_Receive+0x800>)
 8009298:	3298      	adds	r2, #152	@ 0x98
 800929a:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 800929c:	4e7c      	ldr	r6, [pc, #496]	@ (8009490 <USB_HID_Receive+0x7c4>)
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 800929e:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 80092a0:	430b      	orrs	r3, r1
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80092a2:	7821      	ldrb	r1, [r4, #0]
 80092a4:	9208      	str	r2, [sp, #32]
 80092a6:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 80092a8:	4889      	ldr	r0, [pc, #548]	@ (80094d0 <USB_HID_Receive+0x804>)
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80092aa:	0212      	lsls	r2, r2, #8
 80092ac:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 80092ae:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80092b0:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 80092b2:	0c09      	lsrs	r1, r1, #16
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 80092b4:	1412      	asrs	r2, r2, #16
 80092b6:	4029      	ands	r1, r5
 80092b8:	f011 f880 	bl	801a3bc <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1);
 80092bc:	69b3      	ldr	r3, [r6, #24]
 80092be:	aa10      	add	r2, sp, #64	@ 0x40
 80092c0:	0c1b      	lsrs	r3, r3, #16
 80092c2:	402b      	ands	r3, r5
 80092c4:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_tl1, response_pkt.data[1], response_pkt.data[2]);
 80092c6:	9b08      	ldr	r3, [sp, #32]
 80092c8:	7821      	ldrb	r1, [r4, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	430b      	orrs	r3, r1
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	141b      	asrs	r3, r3, #16
 80092d4:	7193      	strb	r3, [r2, #6]
 80092d6:	121b      	asrs	r3, r3, #8
 80092d8:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl1, response_pkt.data[3], response_pkt.data[4]);
 80092da:	9b07      	ldr	r3, [sp, #28]
 80092dc:	7819      	ldrb	r1, [r3, #0]
 80092de:	4b7b      	ldr	r3, [pc, #492]	@ (80094cc <USB_HID_Receive+0x800>)
 80092e0:	e738      	b.n	8009154 <USB_HID_Receive+0x488>
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 80092e2:	4a69      	ldr	r2, [pc, #420]	@ (8009488 <USB_HID_Receive+0x7bc>)
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 80092e4:	2503      	movs	r5, #3
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 80092e6:	0014      	movs	r4, r2
 80092e8:	4b7a      	ldr	r3, [pc, #488]	@ (80094d4 <USB_HID_Receive+0x808>)
 80092ea:	349f      	adds	r4, #159	@ 0x9f
 80092ec:	9307      	str	r3, [sp, #28]
 80092ee:	7819      	ldrb	r1, [r3, #0]
 80092f0:	4b79      	ldr	r3, [pc, #484]	@ (80094d8 <USB_HID_Receive+0x80c>)
 80092f2:	32a0      	adds	r2, #160	@ 0xa0
 80092f4:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 80092f6:	4e66      	ldr	r6, [pc, #408]	@ (8009490 <USB_HID_Receive+0x7c4>)
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 80092f8:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 80092fa:	430b      	orrs	r3, r1
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 80092fc:	7821      	ldrb	r1, [r4, #0]
 80092fe:	9208      	str	r2, [sp, #32]
 8009300:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009302:	4876      	ldr	r0, [pc, #472]	@ (80094dc <USB_HID_Receive+0x810>)
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8009304:	0212      	lsls	r2, r2, #8
 8009306:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 8009308:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 800930a:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 800930c:	0c89      	lsrs	r1, r1, #18
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 800930e:	1412      	asrs	r2, r2, #16
 8009310:	4029      	ands	r1, r5
 8009312:	f011 f853 	bl	801a3bc <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2);
 8009316:	69b3      	ldr	r3, [r6, #24]
 8009318:	aa10      	add	r2, sp, #64	@ 0x40
 800931a:	0c9b      	lsrs	r3, r3, #18
 800931c:	402b      	ands	r3, r5
 800931e:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_tl2, response_pkt.data[1], response_pkt.data[2]);
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	7821      	ldrb	r1, [r4, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	430b      	orrs	r3, r1
 800932a:	041b      	lsls	r3, r3, #16
 800932c:	141b      	asrs	r3, r3, #16
 800932e:	7193      	strb	r3, [r2, #6]
 8009330:	121b      	asrs	r3, r3, #8
 8009332:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl2, response_pkt.data[3], response_pkt.data[4]);
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	7819      	ldrb	r1, [r3, #0]
 8009338:	4b67      	ldr	r3, [pc, #412]	@ (80094d8 <USB_HID_Receive+0x80c>)
 800933a:	e70b      	b.n	8009154 <USB_HID_Receive+0x488>
        printf("[USB][GET_PARAM] CURRENT_INDEX_READINGS -> temp=%u rad=%u\n", idx_temp, idx_rad);
 800933c:	4d68      	ldr	r5, [pc, #416]	@ (80094e0 <USB_HID_Receive+0x814>)
 800933e:	4e69      	ldr	r6, [pc, #420]	@ (80094e4 <USB_HID_Receive+0x818>)
 8009340:	882a      	ldrh	r2, [r5, #0]
 8009342:	8831      	ldrh	r1, [r6, #0]
 8009344:	4868      	ldr	r0, [pc, #416]	@ (80094e8 <USB_HID_Receive+0x81c>)
 8009346:	f011 f839 	bl	801a3bc <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(idx_temp, response_pkt.data[0], response_pkt.data[1]);
 800934a:	8833      	ldrh	r3, [r6, #0]
 800934c:	7163      	strb	r3, [r4, #5]
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	71a3      	strb	r3, [r4, #6]
        U16_TO_LITTLE_ENDIAN_BYTES(idx_rad, response_pkt.data[2], response_pkt.data[3]);
 8009352:	882b      	ldrh	r3, [r5, #0]
 8009354:	71e3      	strb	r3, [r4, #7]
 8009356:	0a1b      	lsrs	r3, r3, #8
 8009358:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 800935a:	2304      	movs	r3, #4
 800935c:	e586      	b.n	8008e6c <USB_HID_Receive+0x1a0>
        printf("[USB][GET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
 800935e:	9905      	ldr	r1, [sp, #20]
 8009360:	4862      	ldr	r0, [pc, #392]	@ (80094ec <USB_HID_Receive+0x820>)
 8009362:	f011 f82b 	bl	801a3bc <iprintf>
        Rad_USBX_HID_ACK_response(DEVICE_CID_GET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 8009366:	22fe      	movs	r2, #254	@ 0xfe
 8009368:	2001      	movs	r0, #1
 800936a:	9905      	ldr	r1, [sp, #20]
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 800936c:	f7ff fb4c 	bl	8008a08 <Rad_USBX_HID_ACK_response.isra.0>
            return;
 8009370:	e54a      	b.n	8008e08 <USB_HID_Receive+0x13c>
}

static void Rad_USBX_HID_Get_Records(const uint8_t parm_id)
{
    UNUSED(parm_id);
    usbx_host_req_records = 1; // Set flag to send all records at main loop
 8009372:	2201      	movs	r2, #1
 8009374:	4b5e      	ldr	r3, [pc, #376]	@ (80094f0 <USB_HID_Receive+0x824>)
 8009376:	601a      	str	r2, [r3, #0]
}
 8009378:	e546      	b.n	8008e08 <USB_HID_Receive+0x13c>
    uint8_t parm_id = data[3];
 800937a:	78fb      	ldrb	r3, [r7, #3]
    uint8_t payload_len = data[4];
 800937c:	793d      	ldrb	r5, [r7, #4]
    printf("[USB][SET_PARAM] parm_id=0x%02X, payload_len=%u\n", parm_id, payload_len);
 800937e:	0019      	movs	r1, r3
 8009380:	002a      	movs	r2, r5
 8009382:	485c      	ldr	r0, [pc, #368]	@ (80094f4 <USB_HID_Receive+0x828>)
    uint8_t parm_id = data[3];
 8009384:	9305      	str	r3, [sp, #20]
    printf("[USB][SET_PARAM] parm_id=0x%02X, payload_len=%u\n", parm_id, payload_len);
 8009386:	f011 f819 	bl	801a3bc <iprintf>
    switch (parm_id)
 800938a:	9b05      	ldr	r3, [sp, #20]
    uint8_t *payload = (uint8_t *)&data[5];
 800938c:	1d7c      	adds	r4, r7, #5
    switch (parm_id)
 800938e:	1e58      	subs	r0, r3, #1
 8009390:	2819      	cmp	r0, #25
 8009392:	d900      	bls.n	8009396 <USB_HID_Receive+0x6ca>
 8009394:	e25a      	b.n	800984c <USB_HID_Receive+0xb80>
 8009396:	f7f6 fedd 	bl	8000154 <__gnu_thumb1_case_uhi>
 800939a:	001a      	.short	0x001a
 800939c:	003f0032 	.word	0x003f0032
 80093a0:	0053004c 	.word	0x0053004c
 80093a4:	00570259 	.word	0x00570259
 80093a8:	00c90061 	.word	0x00c90061
 80093ac:	00fa00e0 	.word	0x00fa00e0
 80093b0:	0124011f 	.word	0x0124011f
 80093b4:	0167013f 	.word	0x0167013f
 80093b8:	018f018a 	.word	0x018f018a
 80093bc:	01990194 	.word	0x01990194
 80093c0:	01df01bd 	.word	0x01df01bd
 80093c4:	021b01fe 	.word	0x021b01fe
 80093c8:	0259023a 	.word	0x0259023a
 80093cc:	00ce      	.short	0x00ce
        memset(current_settings.device_code, 0, sizeof(current_settings.device_code));
 80093ce:	4e2e      	ldr	r6, [pc, #184]	@ (8009488 <USB_HID_Receive+0x7bc>)
 80093d0:	2210      	movs	r2, #16
 80093d2:	2100      	movs	r1, #0
 80093d4:	0030      	movs	r0, r6
 80093d6:	f011 f9bd 	bl	801a754 <memset>
        memcpy(current_settings.device_code, payload, payload_len);
 80093da:	002a      	movs	r2, r5
 80093dc:	0021      	movs	r1, r4
 80093de:	0030      	movs	r0, r6
 80093e0:	f011 fa82 	bl	801a8e8 <memcpy>
        printf("[USB][SET_PARAM] DEVICE_CODE <- %.*s\n", payload_len, payload);
 80093e4:	4844      	ldr	r0, [pc, #272]	@ (80094f8 <USB_HID_Receive+0x82c>)
        printf("[USB][SET_PARAM] SERIAL <- %.*s\n", payload_len, payload);
 80093e6:	0022      	movs	r2, r4
 80093e8:	0029      	movs	r1, r5
 80093ea:	f010 ffe7 	bl	801a3bc <iprintf>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_SUCCESS);
 80093ee:	2003      	movs	r0, #3
 80093f0:	9905      	ldr	r1, [sp, #20]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f7ff fb08 	bl	8008a08 <Rad_USBX_HID_ACK_response.isra.0>
    printf("[USB][SET_PARAM] ACK sent for parm_id=0x%02X\n", parm_id);
 80093f8:	4840      	ldr	r0, [pc, #256]	@ (80094fc <USB_HID_Receive+0x830>)
 80093fa:	9905      	ldr	r1, [sp, #20]
 80093fc:	e130      	b.n	8009660 <USB_HID_Receive+0x994>
        memset(current_settings.serial, 0, sizeof(current_settings.serial));
 80093fe:	4e40      	ldr	r6, [pc, #256]	@ (8009500 <USB_HID_Receive+0x834>)
 8009400:	2210      	movs	r2, #16
 8009402:	2100      	movs	r1, #0
 8009404:	0030      	movs	r0, r6
 8009406:	f011 f9a5 	bl	801a754 <memset>
        memcpy(current_settings.serial, payload, payload_len);
 800940a:	002a      	movs	r2, r5
 800940c:	0021      	movs	r1, r4
 800940e:	0030      	movs	r0, r6
 8009410:	f011 fa6a 	bl	801a8e8 <memcpy>
        printf("[USB][SET_PARAM] SERIAL <- %.*s\n", payload_len, payload);
 8009414:	483b      	ldr	r0, [pc, #236]	@ (8009504 <USB_HID_Receive+0x838>)
 8009416:	e7e6      	b.n	80093e6 <USB_HID_Receive+0x71a>
        memset(current_settings.firmware_ver, 0, sizeof(current_settings.firmware_ver));
 8009418:	4e3b      	ldr	r6, [pc, #236]	@ (8009508 <USB_HID_Receive+0x83c>)
 800941a:	2208      	movs	r2, #8
 800941c:	2100      	movs	r1, #0
 800941e:	0030      	movs	r0, r6
 8009420:	f011 f998 	bl	801a754 <memset>
        memcpy(current_settings.firmware_ver, payload, payload_len);
 8009424:	002a      	movs	r2, r5
 8009426:	0021      	movs	r1, r4
 8009428:	0030      	movs	r0, r6
 800942a:	f011 fa5d 	bl	801a8e8 <memcpy>
        printf("[USB][SET_PARAM] FIRMWARE_VER <- %.*s\n", payload_len, payload);
 800942e:	4837      	ldr	r0, [pc, #220]	@ (800950c <USB_HID_Receive+0x840>)
 8009430:	e7d9      	b.n	80093e6 <USB_HID_Receive+0x71a>
        current_settings.sensor_type = payload[0];
 8009432:	7979      	ldrb	r1, [r7, #5]
 8009434:	4b36      	ldr	r3, [pc, #216]	@ (8009510 <USB_HID_Receive+0x844>)
        printf("[USB][SET_PARAM] RECORDING_TYPE <- %u\n", current_settings.sensor_type);
 8009436:	4837      	ldr	r0, [pc, #220]	@ (8009514 <USB_HID_Receive+0x848>)
        current_settings.sensor_type = payload[0];
 8009438:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 800943a:	f010 ffbf 	bl	801a3bc <iprintf>
        break;
 800943e:	e7d6      	b.n	80093ee <USB_HID_Receive+0x722>
        printf("[USB][SET_PARAM] BATTERY_LEVEL not supported\n");
 8009440:	4835      	ldr	r0, [pc, #212]	@ (8009518 <USB_HID_Receive+0x84c>)
 8009442:	f011 f82b 	bl	801a49c <puts>
        break;
 8009446:	e7d2      	b.n	80093ee <USB_HID_Receive+0x722>
        current_settings.trip_code = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009448:	7861      	ldrb	r1, [r4, #1]
 800944a:	797b      	ldrb	r3, [r7, #5]
 800944c:	0209      	lsls	r1, r1, #8
 800944e:	4319      	orrs	r1, r3
 8009450:	4b32      	ldr	r3, [pc, #200]	@ (800951c <USB_HID_Receive+0x850>)
 8009452:	0a0a      	lsrs	r2, r1, #8
        printf("[USB][SET_PARAM] TRIP_CODE <- %u\n", current_settings.trip_code);
 8009454:	4832      	ldr	r0, [pc, #200]	@ (8009520 <USB_HID_Receive+0x854>)
        current_settings.trip_code = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009456:	7019      	strb	r1, [r3, #0]
 8009458:	705a      	strb	r2, [r3, #1]
        printf("[USB][SET_PARAM] TRIP_CODE <- %u\n", current_settings.trip_code);
 800945a:	e7ee      	b.n	800943a <USB_HID_Receive+0x76e>
        memset(current_settings.trip_desc, 0, sizeof(current_settings.trip_desc));
 800945c:	4e31      	ldr	r6, [pc, #196]	@ (8009524 <USB_HID_Receive+0x858>)
 800945e:	2228      	movs	r2, #40	@ 0x28
 8009460:	2100      	movs	r1, #0
 8009462:	0030      	movs	r0, r6
 8009464:	f011 f976 	bl	801a754 <memset>
        memcpy(current_settings.trip_desc, payload, payload_len);
 8009468:	002a      	movs	r2, r5
 800946a:	0021      	movs	r1, r4
 800946c:	0030      	movs	r0, r6
 800946e:	f011 fa3b 	bl	801a8e8 <memcpy>
        printf("[USB][SET_PARAM] TRIP_DESCRIPTION <- %.*s\n", payload_len, payload);
 8009472:	482d      	ldr	r0, [pc, #180]	@ (8009528 <USB_HID_Receive+0x85c>)
 8009474:	e7b7      	b.n	80093e6 <USB_HID_Receive+0x71a>
 8009476:	46c0      	nop			@ (mov r8, r8)
 8009478:	20002c26 	.word	0x20002c26
 800947c:	20002c3e 	.word	0x20002c3e
 8009480:	20002c27 	.word	0x20002c27
 8009484:	20002c3d 	.word	0x20002c3d
 8009488:	20002bac 	.word	0x20002bac
 800948c:	20002c3f 	.word	0x20002c3f
 8009490:	20000b50 	.word	0x20000b50
 8009494:	0801e28a 	.word	0x0801e28a
 8009498:	20002c28 	.word	0x20002c28
 800949c:	20002c46 	.word	0x20002c46
 80094a0:	20002c29 	.word	0x20002c29
 80094a4:	20002c45 	.word	0x20002c45
 80094a8:	20002c47 	.word	0x20002c47
 80094ac:	0801e2c8 	.word	0x0801e2c8
 80094b0:	20002c2a 	.word	0x20002c2a
 80094b4:	20002c2b 	.word	0x20002c2b
 80094b8:	0801e306 	.word	0x0801e306
 80094bc:	20002c2c 	.word	0x20002c2c
 80094c0:	20002c2d 	.word	0x20002c2d
 80094c4:	0801e345 	.word	0x0801e345
 80094c8:	20002c2e 	.word	0x20002c2e
 80094cc:	20002c2f 	.word	0x20002c2f
 80094d0:	0801e384 	.word	0x0801e384
 80094d4:	20002c30 	.word	0x20002c30
 80094d8:	20002c31 	.word	0x20002c31
 80094dc:	0801e3c2 	.word	0x0801e3c2
 80094e0:	20000500 	.word	0x20000500
 80094e4:	200004fe 	.word	0x200004fe
 80094e8:	0801e400 	.word	0x0801e400
 80094ec:	0801e43b 	.word	0x0801e43b
 80094f0:	20000b74 	.word	0x20000b74
 80094f4:	0801e4a7 	.word	0x0801e4a7
 80094f8:	0801e4d8 	.word	0x0801e4d8
 80094fc:	0801ea0e 	.word	0x0801ea0e
 8009500:	20002bcc 	.word	0x20002bcc
 8009504:	0801e4fe 	.word	0x0801e4fe
 8009508:	20002bdd 	.word	0x20002bdd
 800950c:	0801e51f 	.word	0x0801e51f
 8009510:	20002bdc 	.word	0x20002bdc
 8009514:	0801e546 	.word	0x0801e546
 8009518:	0801e56d 	.word	0x0801e56d
 800951c:	20002be5 	.word	0x20002be5
 8009520:	0801e59a 	.word	0x0801e59a
 8009524:	20002be7 	.word	0x20002be7
 8009528:	0801e5bc 	.word	0x0801e5bc
        current_settings.start_mode = payload[0];
 800952c:	7979      	ldrb	r1, [r7, #5]
 800952e:	4be1      	ldr	r3, [pc, #900]	@ (80098b4 <USB_HID_Receive+0xbe8>)
        printf("[USB][SET_PARAM] START_MODE <- %u\n", current_settings.start_mode);
 8009530:	48e1      	ldr	r0, [pc, #900]	@ (80098b8 <USB_HID_Receive+0xbec>)
        current_settings.start_mode = payload[0];
 8009532:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] START_MODE <- %u\n", current_settings.start_mode);
 8009534:	e781      	b.n	800943a <USB_HID_Receive+0x76e>
        current_settings.interval_duration_day = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009536:	7863      	ldrb	r3, [r4, #1]
 8009538:	797a      	ldrb	r2, [r7, #5]
 800953a:	4de0      	ldr	r5, [pc, #896]	@ (80098bc <USB_HID_Receive+0xbf0>)
 800953c:	4ce0      	ldr	r4, [pc, #896]	@ (80098c0 <USB_HID_Receive+0xbf4>)
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	4313      	orrs	r3, r2
 8009542:	702b      	strb	r3, [r5, #0]
        printf("[USB][SET_PARAM] LOGGING_DURATION <- %u day(s)\n", current_settings.interval_duration_day);
 8009544:	34aa      	adds	r4, #170	@ 0xaa
        current_settings.interval_duration_day = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	706b      	strb	r3, [r5, #1]
        Save_CurrentSettings();
 800954a:	f000 fb67 	bl	8009c1c <Save_CurrentSettings>
        printf("[USB][SET_PARAM] LOGGING_DURATION <- %u day(s)\n", current_settings.interval_duration_day);
 800954e:	7821      	ldrb	r1, [r4, #0]
 8009550:	782b      	ldrb	r3, [r5, #0]
 8009552:	0209      	lsls	r1, r1, #8
 8009554:	48db      	ldr	r0, [pc, #876]	@ (80098c4 <USB_HID_Receive+0xbf8>)
 8009556:	4319      	orrs	r1, r3
 8009558:	e76f      	b.n	800943a <USB_HID_Receive+0x76e>
        uint32_t v32 = ((uint32_t)payload[0])
 800955a:	7862      	ldrb	r2, [r4, #1]
 800955c:	797b      	ldrb	r3, [r7, #5]
 800955e:	0212      	lsls	r2, r2, #8
 8009560:	431a      	orrs	r2, r3
 8009562:	78a3      	ldrb	r3, [r4, #2]
 8009564:	78e1      	ldrb	r1, [r4, #3]
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	4313      	orrs	r3, r2
 800956a:	0609      	lsls	r1, r1, #24
 800956c:	4319      	orrs	r1, r3
        current_settings.start_delay = v32;
 800956e:	4ad6      	ldr	r2, [pc, #856]	@ (80098c8 <USB_HID_Receive+0xbfc>)
 8009570:	4bd3      	ldr	r3, [pc, #844]	@ (80098c0 <USB_HID_Receive+0xbf4>)
 8009572:	7011      	strb	r1, [r2, #0]
 8009574:	001a      	movs	r2, r3
 8009576:	0a08      	lsrs	r0, r1, #8
 8009578:	3265      	adds	r2, #101	@ 0x65
 800957a:	7010      	strb	r0, [r2, #0]
 800957c:	001a      	movs	r2, r3
 800957e:	0c08      	lsrs	r0, r1, #16
 8009580:	3266      	adds	r2, #102	@ 0x66
 8009582:	7010      	strb	r0, [r2, #0]
 8009584:	3367      	adds	r3, #103	@ 0x67
 8009586:	0e0a      	lsrs	r2, r1, #24
        printf("[USB][SET_PARAM] START_DELAY <- %lu (len=4)\n", (unsigned long)v32);
 8009588:	48d0      	ldr	r0, [pc, #832]	@ (80098cc <USB_HID_Receive+0xc00>)
        current_settings.start_delay = v32;
 800958a:	701a      	strb	r2, [r3, #0]
        printf("[USB][SET_PARAM] START_DELAY <- %lu (len=4)\n", (unsigned long)v32);
 800958c:	e755      	b.n	800943a <USB_HID_Receive+0x76e>
        uint8_t yy = payload[0];  // 2000년 기준
 800958e:	797b      	ldrb	r3, [r7, #5]
        uint8_t hh = payload[3];
 8009590:	7a3c      	ldrb	r4, [r7, #8]
        uint8_t yy = payload[0];  // 2000년 기준
 8009592:	9307      	str	r3, [sp, #28]
        uint8_t mm = payload[1];
 8009594:	79bb      	ldrb	r3, [r7, #6]
        uint8_t mi = payload[4];
 8009596:	7a7d      	ldrb	r5, [r7, #9]
        uint8_t mm = payload[1];
 8009598:	9308      	str	r3, [sp, #32]
        uint8_t dd = payload[2];
 800959a:	79fb      	ldrb	r3, [r7, #7]
        uint8_t ss = payload[5];
 800959c:	7abe      	ldrb	r6, [r7, #10]
        uint8_t dd = payload[2];
 800959e:	9309      	str	r3, [sp, #36]	@ 0x24
        uint32_t epoch = ymd_to_epoch(yy, mm, dd, hh, mi, ss);
 80095a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095a2:	0023      	movs	r3, r4
 80095a4:	9908      	ldr	r1, [sp, #32]
 80095a6:	9807      	ldr	r0, [sp, #28]
 80095a8:	9601      	str	r6, [sp, #4]
 80095aa:	9500      	str	r5, [sp, #0]
 80095ac:	f000 fa7e 	bl	8009aac <ymd_to_epoch>
 80095b0:	0002      	movs	r2, r0
        current_settings.start_reservation_time = epoch;
 80095b2:	4bc7      	ldr	r3, [pc, #796]	@ (80098d0 <USB_HID_Receive+0xc04>)
 80095b4:	0a01      	lsrs	r1, r0, #8
 80095b6:	7059      	strb	r1, [r3, #1]
 80095b8:	0c01      	lsrs	r1, r0, #16
 80095ba:	7099      	strb	r1, [r3, #2]
 80095bc:	0e01      	lsrs	r1, r0, #24
 80095be:	7018      	strb	r0, [r3, #0]
 80095c0:	70d9      	strb	r1, [r3, #3]
        printf("[USB][SET_PARAM] START_TIME <- 20%02u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\n",
 80095c2:	48c4      	ldr	r0, [pc, #784]	@ (80098d4 <USB_HID_Receive+0xc08>)
 80095c4:	9203      	str	r2, [sp, #12]
 80095c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c8:	9a08      	ldr	r2, [sp, #32]
 80095ca:	9907      	ldr	r1, [sp, #28]
 80095cc:	9602      	str	r6, [sp, #8]
 80095ce:	9501      	str	r5, [sp, #4]
 80095d0:	9400      	str	r4, [sp, #0]
 80095d2:	f010 fef3 	bl	801a3bc <iprintf>
        break;
 80095d6:	e70a      	b.n	80093ee <USB_HID_Receive+0x722>
        current_settings.pause_enable = payload[0];
 80095d8:	7979      	ldrb	r1, [r7, #5]
 80095da:	4bbf      	ldr	r3, [pc, #764]	@ (80098d8 <USB_HID_Receive+0xc0c>)
        printf("[USB][SET_PARAM] PAUSE <- %u\n", current_settings.pause_enable);
 80095dc:	48bf      	ldr	r0, [pc, #764]	@ (80098dc <USB_HID_Receive+0xc10>)
        current_settings.pause_enable = payload[0];
 80095de:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] PAUSE <- %u\n", current_settings.pause_enable);
 80095e0:	e72b      	b.n	800943a <USB_HID_Receive+0x76e>
        uint8_t yy = payload[0];
 80095e2:	797b      	ldrb	r3, [r7, #5]
        uint8_t hh = payload[3];
 80095e4:	7a3c      	ldrb	r4, [r7, #8]
        uint8_t yy = payload[0];
 80095e6:	9307      	str	r3, [sp, #28]
        uint8_t mm = payload[1];
 80095e8:	79bb      	ldrb	r3, [r7, #6]
        uint8_t mi = payload[4];
 80095ea:	7a7d      	ldrb	r5, [r7, #9]
        uint8_t mm = payload[1];
 80095ec:	9308      	str	r3, [sp, #32]
        uint8_t dd = payload[2];
 80095ee:	79fb      	ldrb	r3, [r7, #7]
        uint8_t ss = payload[5];
 80095f0:	7abe      	ldrb	r6, [r7, #10]
        uint8_t dd = payload[2];
 80095f2:	9309      	str	r3, [sp, #36]	@ 0x24
        Set_RTC_TimeOnly(yy, mm, dd, hh, mi, ss);
 80095f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f6:	0023      	movs	r3, r4
 80095f8:	9908      	ldr	r1, [sp, #32]
 80095fa:	9807      	ldr	r0, [sp, #28]
 80095fc:	9601      	str	r6, [sp, #4]
 80095fe:	9500      	str	r5, [sp, #0]
 8009600:	f7fc fb7e 	bl	8005d00 <Set_RTC_TimeOnly>
        printf("[USB][SET_PARAM] DEVICE_TIME <- 20%02u-%02u-%02u %02u:%02u:%02u\n",
 8009604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009606:	9a08      	ldr	r2, [sp, #32]
 8009608:	9907      	ldr	r1, [sp, #28]
 800960a:	9602      	str	r6, [sp, #8]
 800960c:	9501      	str	r5, [sp, #4]
 800960e:	9400      	str	r4, [sp, #0]
 8009610:	48b3      	ldr	r0, [pc, #716]	@ (80098e0 <USB_HID_Receive+0xc14>)
 8009612:	f010 fed3 	bl	801a3bc <iprintf>
        break;
 8009616:	e6ea      	b.n	80093ee <USB_HID_Receive+0x722>
        if (payload_len == 4) {
 8009618:	2d04      	cmp	r5, #4
 800961a:	d114      	bne.n	8009646 <USB_HID_Receive+0x97a>
            v32  =  ((uint32_t)payload[0])
 800961c:	7862      	ldrb	r2, [r4, #1]
 800961e:	797b      	ldrb	r3, [r7, #5]
 8009620:	0212      	lsls	r2, r2, #8
 8009622:	431a      	orrs	r2, r3
 8009624:	78a3      	ldrb	r3, [r4, #2]
 8009626:	78e1      	ldrb	r1, [r4, #3]
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	4313      	orrs	r3, r2
 800962c:	0609      	lsls	r1, r1, #24
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 800962e:	4319      	orrs	r1, r3
        current_settings.temp_interval = (typeof(current_settings.temp_interval))v32;
 8009630:	4bac      	ldr	r3, [pc, #688]	@ (80098e4 <USB_HID_Receive+0xc18>)
 8009632:	0a0a      	lsrs	r2, r1, #8
 8009634:	705a      	strb	r2, [r3, #1]
 8009636:	0c0a      	lsrs	r2, r1, #16
 8009638:	709a      	strb	r2, [r3, #2]
        printf("[USB][SET_PARAM] TEMP_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 800963a:	48ab      	ldr	r0, [pc, #684]	@ (80098e8 <USB_HID_Receive+0xc1c>)
        current_settings.temp_interval = (typeof(current_settings.temp_interval))v32;
 800963c:	0e0a      	lsrs	r2, r1, #24
 800963e:	7019      	strb	r1, [r3, #0]
 8009640:	70da      	strb	r2, [r3, #3]
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 8009642:	002a      	movs	r2, r5
 8009644:	e6d1      	b.n	80093ea <USB_HID_Receive+0x71e>
        } else if (payload_len == 2) {
 8009646:	2d02      	cmp	r5, #2
 8009648:	d103      	bne.n	8009652 <USB_HID_Receive+0x986>
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 800964a:	7861      	ldrb	r1, [r4, #1]
 800964c:	797b      	ldrb	r3, [r7, #5]
 800964e:	0209      	lsls	r1, r1, #8
 8009650:	e7ed      	b.n	800962e <USB_HID_Receive+0x962>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id,
 8009652:	2003      	movs	r0, #3
 8009654:	22fe      	movs	r2, #254	@ 0xfe
 8009656:	210e      	movs	r1, #14
 8009658:	f7ff f9d6 	bl	8008a08 <Rad_USBX_HID_ACK_response.isra.0>
            printf("[USB][SET_PARAM][ERR] TEMP_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 800965c:	48a3      	ldr	r0, [pc, #652]	@ (80098ec <USB_HID_Receive+0xc20>)
            printf("[USB][SET_PARAM][ERR] RAD_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 800965e:	0029      	movs	r1, r5
    printf("[USB][SET_PARAM] ACK sent for parm_id=0x%02X\n", parm_id);
 8009660:	f010 feac 	bl	801a3bc <iprintf>
 8009664:	f7ff fbd0 	bl	8008e08 <USB_HID_Receive+0x13c>
        if (payload_len == 4) {
 8009668:	2d04      	cmp	r5, #4
 800966a:	d113      	bne.n	8009694 <USB_HID_Receive+0x9c8>
            v32  =  ((uint32_t)payload[0])
 800966c:	7862      	ldrb	r2, [r4, #1]
 800966e:	797b      	ldrb	r3, [r7, #5]
 8009670:	0212      	lsls	r2, r2, #8
 8009672:	431a      	orrs	r2, r3
 8009674:	78a3      	ldrb	r3, [r4, #2]
 8009676:	78e1      	ldrb	r1, [r4, #3]
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	4313      	orrs	r3, r2
 800967c:	0609      	lsls	r1, r1, #24
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]); // 하위호환
 800967e:	4319      	orrs	r1, r3
        current_settings.rad_interval = (typeof(current_settings.rad_interval))v32;
 8009680:	4b9b      	ldr	r3, [pc, #620]	@ (80098f0 <USB_HID_Receive+0xc24>)
 8009682:	0a0a      	lsrs	r2, r1, #8
 8009684:	705a      	strb	r2, [r3, #1]
 8009686:	0c0a      	lsrs	r2, r1, #16
 8009688:	709a      	strb	r2, [r3, #2]
 800968a:	0e0a      	lsrs	r2, r1, #24
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 800968c:	4899      	ldr	r0, [pc, #612]	@ (80098f4 <USB_HID_Receive+0xc28>)
        current_settings.rad_interval = (typeof(current_settings.rad_interval))v32;
 800968e:	7019      	strb	r1, [r3, #0]
 8009690:	70da      	strb	r2, [r3, #3]
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 8009692:	e7d6      	b.n	8009642 <USB_HID_Receive+0x976>
        } else if (payload_len == 2) {
 8009694:	2d02      	cmp	r5, #2
 8009696:	d103      	bne.n	80096a0 <USB_HID_Receive+0x9d4>
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]); // 하위호환
 8009698:	7861      	ldrb	r1, [r4, #1]
 800969a:	797b      	ldrb	r3, [r7, #5]
 800969c:	0209      	lsls	r1, r1, #8
 800969e:	e7ee      	b.n	800967e <USB_HID_Receive+0x9b2>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id,
 80096a0:	2003      	movs	r0, #3
 80096a2:	22fe      	movs	r2, #254	@ 0xfe
 80096a4:	210f      	movs	r1, #15
 80096a6:	f7ff f9af 	bl	8008a08 <Rad_USBX_HID_ACK_response.isra.0>
            printf("[USB][SET_PARAM][ERR] RAD_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 80096aa:	4893      	ldr	r0, [pc, #588]	@ (80098f8 <USB_HID_Receive+0xc2c>)
 80096ac:	e7d7      	b.n	800965e <USB_HID_Receive+0x992>
        current_settings.report_format = payload[0];
 80096ae:	7979      	ldrb	r1, [r7, #5]
 80096b0:	4b92      	ldr	r3, [pc, #584]	@ (80098fc <USB_HID_Receive+0xc30>)
        printf("[USB][SET_PARAM] REPORT_FORMAT <- %u\n", current_settings.report_format);
 80096b2:	4893      	ldr	r0, [pc, #588]	@ (8009900 <USB_HID_Receive+0xc34>)
        current_settings.report_format = payload[0];
 80096b4:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] REPORT_FORMAT <- %u\n", current_settings.report_format);
 80096b6:	e6c0      	b.n	800943a <USB_HID_Receive+0x76e>
        current_settings.display_temp_unit = payload[0];
 80096b8:	7979      	ldrb	r1, [r7, #5]
 80096ba:	4b92      	ldr	r3, [pc, #584]	@ (8009904 <USB_HID_Receive+0xc38>)
        printf("[USB][SET_PARAM] TEMP_UNIT <- %u\n", current_settings.display_temp_unit);
 80096bc:	4892      	ldr	r0, [pc, #584]	@ (8009908 <USB_HID_Receive+0xc3c>)
        current_settings.display_temp_unit = payload[0];
 80096be:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] TEMP_UNIT <- %u\n", current_settings.display_temp_unit);
 80096c0:	e6bb      	b.n	800943a <USB_HID_Receive+0x76e>
        current_settings.display_dose_unit = payload[0];
 80096c2:	7979      	ldrb	r1, [r7, #5]
 80096c4:	4b91      	ldr	r3, [pc, #580]	@ (800990c <USB_HID_Receive+0xc40>)
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 80096c6:	4892      	ldr	r0, [pc, #584]	@ (8009910 <USB_HID_Receive+0xc44>)
        current_settings.display_dose_unit = payload[0];
 80096c8:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 80096ca:	e6b6      	b.n	800943a <USB_HID_Receive+0x76e>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, payload[0]);
 80096cc:	22c0      	movs	r2, #192	@ 0xc0
 80096ce:	797b      	ldrb	r3, [r7, #5]
 80096d0:	4990      	ldr	r1, [pc, #576]	@ (8009914 <USB_HID_Receive+0xc48>)
 80096d2:	0092      	lsls	r2, r2, #2
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	4890      	ldr	r0, [pc, #576]	@ (8009918 <USB_HID_Receive+0xc4c>)
 80096d8:	4013      	ands	r3, r2
 80096da:	698a      	ldr	r2, [r1, #24]
 80096dc:	4002      	ands	r2, r0
 80096de:	4313      	orrs	r3, r2
 80096e0:	618b      	str	r3, [r1, #24]
        current_settings.alarm_rh1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[1], payload[2]);
 80096e2:	79fa      	ldrb	r2, [r7, #7]
 80096e4:	79bb      	ldrb	r3, [r7, #6]
 80096e6:	0212      	lsls	r2, r2, #8
 80096e8:	431a      	orrs	r2, r3
 80096ea:	4b8c      	ldr	r3, [pc, #560]	@ (800991c <USB_HID_Receive+0xc50>)
 80096ec:	0a11      	lsrs	r1, r2, #8
 80096ee:	7059      	strb	r1, [r3, #1]
 80096f0:	2100      	movs	r1, #0
 80096f2:	7099      	strb	r1, [r3, #2]
 80096f4:	0e11      	lsrs	r1, r2, #24
 80096f6:	701a      	strb	r2, [r3, #0]
 80096f8:	70d9      	strb	r1, [r3, #3]
        current_settings.alarm_delay_rh1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 80096fa:	7a7b      	ldrb	r3, [r7, #9]
 80096fc:	7a39      	ldrb	r1, [r7, #8]
 80096fe:	021b      	lsls	r3, r3, #8
 8009700:	430b      	orrs	r3, r1
 8009702:	4987      	ldr	r1, [pc, #540]	@ (8009920 <USB_HID_Receive+0xc54>)
 8009704:	0a18      	lsrs	r0, r3, #8
 8009706:	7048      	strb	r0, [r1, #1]
 8009708:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] RAD_HIGH_ALARM_1 <- state=%u th=%u delay=%u\n",
 800970a:	7979      	ldrb	r1, [r7, #5]
 800970c:	4885      	ldr	r0, [pc, #532]	@ (8009924 <USB_HID_Receive+0xc58>)
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_2 <- state=%u th=%d delay=%u\n",
 800970e:	f010 fe55 	bl	801a3bc <iprintf>
        break;
 8009712:	e66c      	b.n	80093ee <USB_HID_Receive+0x722>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, payload[0]);
 8009714:	22c0      	movs	r2, #192	@ 0xc0
 8009716:	797b      	ldrb	r3, [r7, #5]
 8009718:	497e      	ldr	r1, [pc, #504]	@ (8009914 <USB_HID_Receive+0xc48>)
 800971a:	0112      	lsls	r2, r2, #4
 800971c:	029b      	lsls	r3, r3, #10
 800971e:	4882      	ldr	r0, [pc, #520]	@ (8009928 <USB_HID_Receive+0xc5c>)
 8009720:	4013      	ands	r3, r2
 8009722:	698a      	ldr	r2, [r1, #24]
 8009724:	4002      	ands	r2, r0
 8009726:	4313      	orrs	r3, r2
 8009728:	618b      	str	r3, [r1, #24]
        current_settings.alarm_rh2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[1], payload[2]);
 800972a:	79fa      	ldrb	r2, [r7, #7]
 800972c:	79bb      	ldrb	r3, [r7, #6]
 800972e:	0212      	lsls	r2, r2, #8
 8009730:	431a      	orrs	r2, r3
 8009732:	4b7e      	ldr	r3, [pc, #504]	@ (800992c <USB_HID_Receive+0xc60>)
 8009734:	0a11      	lsrs	r1, r2, #8
 8009736:	7059      	strb	r1, [r3, #1]
 8009738:	2100      	movs	r1, #0
 800973a:	7099      	strb	r1, [r3, #2]
 800973c:	0e11      	lsrs	r1, r2, #24
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	70d9      	strb	r1, [r3, #3]
        current_settings.alarm_delay_rh2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 8009742:	7a7b      	ldrb	r3, [r7, #9]
 8009744:	7a39      	ldrb	r1, [r7, #8]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	430b      	orrs	r3, r1
 800974a:	4979      	ldr	r1, [pc, #484]	@ (8009930 <USB_HID_Receive+0xc64>)
 800974c:	0a18      	lsrs	r0, r3, #8
 800974e:	7048      	strb	r0, [r1, #1]
 8009750:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] RAD_HIGH_ALARM_2 <- state=%u th=%u delay=%u\n",
 8009752:	7979      	ldrb	r1, [r7, #5]
 8009754:	4877      	ldr	r0, [pc, #476]	@ (8009934 <USB_HID_Receive+0xc68>)
 8009756:	e7da      	b.n	800970e <USB_HID_Receive+0xa42>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, payload[0]);
 8009758:	22c0      	movs	r2, #192	@ 0xc0
 800975a:	797b      	ldrb	r3, [r7, #5]
 800975c:	496d      	ldr	r1, [pc, #436]	@ (8009914 <USB_HID_Receive+0xc48>)
 800975e:	0192      	lsls	r2, r2, #6
 8009760:	031b      	lsls	r3, r3, #12
 8009762:	4875      	ldr	r0, [pc, #468]	@ (8009938 <USB_HID_Receive+0xc6c>)
 8009764:	4013      	ands	r3, r2
 8009766:	698a      	ldr	r2, [r1, #24]
 8009768:	4002      	ands	r2, r0
 800976a:	4313      	orrs	r3, r2
 800976c:	618b      	str	r3, [r1, #24]
        current_settings.alarm_th1 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	79ba      	ldrb	r2, [r7, #6]
 8009772:	4972      	ldr	r1, [pc, #456]	@ (800993c <USB_HID_Receive+0xc70>)
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	4313      	orrs	r3, r2
 8009778:	700b      	strb	r3, [r1, #0]
 800977a:	b21a      	sxth	r2, r3
 800977c:	0a1b      	lsrs	r3, r3, #8
 800977e:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_th1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3],payload[4]);
 8009780:	7a7b      	ldrb	r3, [r7, #9]
 8009782:	7a39      	ldrb	r1, [r7, #8]
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	430b      	orrs	r3, r1
 8009788:	496d      	ldr	r1, [pc, #436]	@ (8009940 <USB_HID_Receive+0xc74>)
 800978a:	0a18      	lsrs	r0, r3, #8
 800978c:	7048      	strb	r0, [r1, #1]
 800978e:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_HIGH_ALARM_1 <- state=%u th=%d delay=%u\n",
 8009790:	7979      	ldrb	r1, [r7, #5]
 8009792:	486c      	ldr	r0, [pc, #432]	@ (8009944 <USB_HID_Receive+0xc78>)
 8009794:	e7bb      	b.n	800970e <USB_HID_Receive+0xa42>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, payload[0]);
 8009796:	495f      	ldr	r1, [pc, #380]	@ (8009914 <USB_HID_Receive+0xc48>)
 8009798:	797b      	ldrb	r3, [r7, #5]
 800979a:	698a      	ldr	r2, [r1, #24]
 800979c:	486a      	ldr	r0, [pc, #424]	@ (8009948 <USB_HID_Receive+0xc7c>)
 800979e:	079b      	lsls	r3, r3, #30
 80097a0:	4002      	ands	r2, r0
 80097a2:	0c1b      	lsrs	r3, r3, #16
 80097a4:	4313      	orrs	r3, r2
 80097a6:	618b      	str	r3, [r1, #24]
        current_settings.alarm_th2 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	79ba      	ldrb	r2, [r7, #6]
 80097ac:	4967      	ldr	r1, [pc, #412]	@ (800994c <USB_HID_Receive+0xc80>)
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	4313      	orrs	r3, r2
 80097b2:	700b      	strb	r3, [r1, #0]
 80097b4:	b21a      	sxth	r2, r3
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_th2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3],payload[4]);
 80097ba:	7a7b      	ldrb	r3, [r7, #9]
 80097bc:	7a39      	ldrb	r1, [r7, #8]
 80097be:	021b      	lsls	r3, r3, #8
 80097c0:	430b      	orrs	r3, r1
 80097c2:	4963      	ldr	r1, [pc, #396]	@ (8009950 <USB_HID_Receive+0xc84>)
 80097c4:	0a18      	lsrs	r0, r3, #8
 80097c6:	7048      	strb	r0, [r1, #1]
 80097c8:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_HIGH_ALARM_2 <- state=%u th=%d delay=%u\n",
 80097ca:	7979      	ldrb	r1, [r7, #5]
 80097cc:	4861      	ldr	r0, [pc, #388]	@ (8009954 <USB_HID_Receive+0xc88>)
 80097ce:	e79e      	b.n	800970e <USB_HID_Receive+0xa42>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, payload[0]);
 80097d0:	22c0      	movs	r2, #192	@ 0xc0
 80097d2:	797b      	ldrb	r3, [r7, #5]
 80097d4:	494f      	ldr	r1, [pc, #316]	@ (8009914 <USB_HID_Receive+0xc48>)
 80097d6:	0292      	lsls	r2, r2, #10
 80097d8:	041b      	lsls	r3, r3, #16
 80097da:	485f      	ldr	r0, [pc, #380]	@ (8009958 <USB_HID_Receive+0xc8c>)
 80097dc:	4013      	ands	r3, r2
 80097de:	698a      	ldr	r2, [r1, #24]
 80097e0:	4002      	ands	r2, r0
 80097e2:	4313      	orrs	r3, r2
 80097e4:	618b      	str	r3, [r1, #24]
        current_settings.alarm_tl1 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	79ba      	ldrb	r2, [r7, #6]
 80097ea:	495c      	ldr	r1, [pc, #368]	@ (800995c <USB_HID_Receive+0xc90>)
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	4313      	orrs	r3, r2
 80097f0:	700b      	strb	r3, [r1, #0]
 80097f2:	b21a      	sxth	r2, r3
 80097f4:	0a1b      	lsrs	r3, r3, #8
 80097f6:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_tl1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 80097f8:	7a7b      	ldrb	r3, [r7, #9]
 80097fa:	7a39      	ldrb	r1, [r7, #8]
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	430b      	orrs	r3, r1
 8009800:	4957      	ldr	r1, [pc, #348]	@ (8009960 <USB_HID_Receive+0xc94>)
 8009802:	0a18      	lsrs	r0, r3, #8
 8009804:	7048      	strb	r0, [r1, #1]
 8009806:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_1 <- state=%u th=%d delay=%u\n",
 8009808:	7979      	ldrb	r1, [r7, #5]
 800980a:	4856      	ldr	r0, [pc, #344]	@ (8009964 <USB_HID_Receive+0xc98>)
 800980c:	e77f      	b.n	800970e <USB_HID_Receive+0xa42>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, payload[0]);
 800980e:	22c0      	movs	r2, #192	@ 0xc0
 8009810:	797b      	ldrb	r3, [r7, #5]
 8009812:	4940      	ldr	r1, [pc, #256]	@ (8009914 <USB_HID_Receive+0xc48>)
 8009814:	0312      	lsls	r2, r2, #12
 8009816:	049b      	lsls	r3, r3, #18
 8009818:	4853      	ldr	r0, [pc, #332]	@ (8009968 <USB_HID_Receive+0xc9c>)
 800981a:	4013      	ands	r3, r2
 800981c:	698a      	ldr	r2, [r1, #24]
 800981e:	4002      	ands	r2, r0
 8009820:	4313      	orrs	r3, r2
 8009822:	618b      	str	r3, [r1, #24]
        current_settings.alarm_tl2 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	79ba      	ldrb	r2, [r7, #6]
 8009828:	4950      	ldr	r1, [pc, #320]	@ (800996c <USB_HID_Receive+0xca0>)
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	4313      	orrs	r3, r2
 800982e:	700b      	strb	r3, [r1, #0]
 8009830:	b21a      	sxth	r2, r3
 8009832:	0a1b      	lsrs	r3, r3, #8
 8009834:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_tl2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 8009836:	7a7b      	ldrb	r3, [r7, #9]
 8009838:	7a39      	ldrb	r1, [r7, #8]
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	430b      	orrs	r3, r1
 800983e:	494c      	ldr	r1, [pc, #304]	@ (8009970 <USB_HID_Receive+0xca4>)
 8009840:	0a18      	lsrs	r0, r3, #8
 8009842:	7048      	strb	r0, [r1, #1]
 8009844:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_2 <- state=%u th=%d delay=%u\n",
 8009846:	7979      	ldrb	r1, [r7, #5]
 8009848:	484a      	ldr	r0, [pc, #296]	@ (8009974 <USB_HID_Receive+0xca8>)
 800984a:	e760      	b.n	800970e <USB_HID_Receive+0xa42>
        printf("[USB][SET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
 800984c:	9905      	ldr	r1, [sp, #20]
 800984e:	484a      	ldr	r0, [pc, #296]	@ (8009978 <USB_HID_Receive+0xcac>)
 8009850:	f010 fdb4 	bl	801a3bc <iprintf>
        Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 8009854:	22fe      	movs	r2, #254	@ 0xfe
 8009856:	2003      	movs	r0, #3
 8009858:	9905      	ldr	r1, [sp, #20]
 800985a:	e587      	b.n	800936c <USB_HID_Receive+0x6a0>
    switch (command_code) {
 800985c:	9b05      	ldr	r3, [sp, #20]
 800985e:	1e58      	subs	r0, r3, #1
 8009860:	2804      	cmp	r0, #4
 8009862:	d81e      	bhi.n	80098a2 <USB_HID_Receive+0xbd6>
 8009864:	f7f6 fc62 	bl	800012c <__gnu_thumb1_case_uqi>
 8009868:	15100803 	.word	0x15100803
 800986c:	17          	.byte	0x17
 800986d:	00          	.byte	0x00
            printf("[CMD] Start logging\n");
 800986e:	4843      	ldr	r0, [pc, #268]	@ (800997c <USB_HID_Receive+0xcb0>)
            printf("[CMD] Resume\n");
 8009870:	f010 fe14 	bl	801a49c <puts>
            Switch_Backup_reg(MODE_Start);
 8009874:	2003      	movs	r0, #3
 8009876:	e003      	b.n	8009880 <USB_HID_Receive+0xbb4>
            printf("[CMD] Stop logging\n");
 8009878:	4841      	ldr	r0, [pc, #260]	@ (8009980 <USB_HID_Receive+0xcb4>)
 800987a:	f010 fe0f 	bl	801a49c <puts>
            Switch_Backup_reg(MODE_Stop);
 800987e:	2002      	movs	r0, #2
            Switch_Backup_reg(MODE_Start);
 8009880:	f7fc fc3c 	bl	80060fc <Switch_Backup_reg>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_SUCCESS);
 8009884:	2200      	movs	r2, #0
 8009886:	e011      	b.n	80098ac <USB_HID_Receive+0xbe0>
            printf("[CMD] Pause\n");
 8009888:	483e      	ldr	r0, [pc, #248]	@ (8009984 <USB_HID_Receive+0xcb8>)
 800988a:	f010 fe07 	bl	801a49c <puts>
            Switch_Backup_reg(MODE_Pause);
 800988e:	2004      	movs	r0, #4
 8009890:	e7f6      	b.n	8009880 <USB_HID_Receive+0xbb4>
            printf("[CMD] Resume\n");
 8009892:	483d      	ldr	r0, [pc, #244]	@ (8009988 <USB_HID_Receive+0xcbc>)
 8009894:	e7ec      	b.n	8009870 <USB_HID_Receive+0xba4>
            printf("[CMD] Erase Data\n");
 8009896:	483d      	ldr	r0, [pc, #244]	@ (800998c <USB_HID_Receive+0xcc0>)
 8009898:	f010 fe00 	bl	801a49c <puts>
            meas_data_log_erase();
 800989c:	f7fe ffec 	bl	8008878 <meas_data_log_erase>
            break;
 80098a0:	e7f0      	b.n	8009884 <USB_HID_Receive+0xbb8>
            printf("[CMD] Unknown code: 0x%02X\n", command_code);
 80098a2:	483b      	ldr	r0, [pc, #236]	@ (8009990 <USB_HID_Receive+0xcc4>)
 80098a4:	9905      	ldr	r1, [sp, #20]
 80098a6:	f010 fd89 	bl	801a3bc <iprintf>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 80098aa:	22fe      	movs	r2, #254	@ 0xfe
 80098ac:	2004      	movs	r0, #4
 80098ae:	9905      	ldr	r1, [sp, #20]
 80098b0:	e55c      	b.n	800936c <USB_HID_Receive+0x6a0>
 80098b2:	46c0      	nop			@ (mov r8, r8)
 80098b4:	20002c0f 	.word	0x20002c0f
 80098b8:	0801e5e7 	.word	0x0801e5e7
 80098bc:	20002c55 	.word	0x20002c55
 80098c0:	20002bac 	.word	0x20002bac
 80098c4:	0801e60a 	.word	0x0801e60a
 80098c8:	20002c10 	.word	0x20002c10
 80098cc:	0801e63a 	.word	0x0801e63a
 80098d0:	20002c51 	.word	0x20002c51
 80098d4:	0801e667 	.word	0x0801e667
 80098d8:	20002c1c 	.word	0x20002c1c
 80098dc:	0801e6b3 	.word	0x0801e6b3
 80098e0:	0801e6d1 	.word	0x0801e6d1
 80098e4:	20002c21 	.word	0x20002c21
 80098e8:	0801e74e 	.word	0x0801e74e
 80098ec:	0801e712 	.word	0x0801e712
 80098f0:	20002c1d 	.word	0x20002c1d
 80098f4:	0801e7c5 	.word	0x0801e7c5
 80098f8:	0801e78a 	.word	0x0801e78a
 80098fc:	20002c25 	.word	0x20002c25
 8009900:	0801e800 	.word	0x0801e800
 8009904:	20002c36 	.word	0x20002c36
 8009908:	0801e826 	.word	0x0801e826
 800990c:	20002c37 	.word	0x20002c37
 8009910:	0801e848 	.word	0x0801e848
 8009914:	20000b50 	.word	0x20000b50
 8009918:	fffffcff 	.word	0xfffffcff
 800991c:	20002c3d 	.word	0x20002c3d
 8009920:	20002c26 	.word	0x20002c26
 8009924:	0801e869 	.word	0x0801e869
 8009928:	fffff3ff 	.word	0xfffff3ff
 800992c:	20002c45 	.word	0x20002c45
 8009930:	20002c28 	.word	0x20002c28
 8009934:	0801e8a7 	.word	0x0801e8a7
 8009938:	ffffcfff 	.word	0xffffcfff
 800993c:	20002c41 	.word	0x20002c41
 8009940:	20002c2a 	.word	0x20002c2a
 8009944:	0801e8e5 	.word	0x0801e8e5
 8009948:	ffff3fff 	.word	0xffff3fff
 800994c:	20002c49 	.word	0x20002c49
 8009950:	20002c2c 	.word	0x20002c2c
 8009954:	0801e924 	.word	0x0801e924
 8009958:	fffcffff 	.word	0xfffcffff
 800995c:	20002c43 	.word	0x20002c43
 8009960:	20002c2e 	.word	0x20002c2e
 8009964:	0801e963 	.word	0x0801e963
 8009968:	fff3ffff 	.word	0xfff3ffff
 800996c:	20002c4b 	.word	0x20002c4b
 8009970:	20002c30 	.word	0x20002c30
 8009974:	0801e9a1 	.word	0x0801e9a1
 8009978:	0801e9df 	.word	0x0801e9df
 800997c:	0801ea3c 	.word	0x0801ea3c
 8009980:	0801ea50 	.word	0x0801ea50
 8009984:	0801ea63 	.word	0x0801ea63
 8009988:	0801ea6f 	.word	0x0801ea6f
 800998c:	0801ea7c 	.word	0x0801ea7c
 8009990:	0801ea8d 	.word	0x0801ea8d
         uint8_t yy = data[4];
 8009994:	793b      	ldrb	r3, [r7, #4]
         uint8_t hh = data[7];
 8009996:	79fc      	ldrb	r4, [r7, #7]
         uint8_t yy = data[4];
 8009998:	9305      	str	r3, [sp, #20]
         uint8_t mm = data[5];
 800999a:	797b      	ldrb	r3, [r7, #5]
         uint8_t mi = data[8];
 800999c:	7a3d      	ldrb	r5, [r7, #8]
         uint8_t mm = data[5];
 800999e:	9307      	str	r3, [sp, #28]
         uint8_t dd = data[6];
 80099a0:	79bb      	ldrb	r3, [r7, #6]
         uint8_t ss = data[9];
 80099a2:	7a7e      	ldrb	r6, [r7, #9]
         uint8_t dd = data[6];
 80099a4:	9308      	str	r3, [sp, #32]
         Set_RTC_TimeOnly(yy, mm, dd, hh, mi, ss);
 80099a6:	9a08      	ldr	r2, [sp, #32]
 80099a8:	0023      	movs	r3, r4
 80099aa:	9907      	ldr	r1, [sp, #28]
 80099ac:	9805      	ldr	r0, [sp, #20]
 80099ae:	9601      	str	r6, [sp, #4]
 80099b0:	9500      	str	r5, [sp, #0]
 80099b2:	f7fc f9a5 	bl	8005d00 <Set_RTC_TimeOnly>
         printf("[CMD] Set RTC to 20%02u-%02u-%02u %02u:%02u:%02u\n", yy, mm, dd, hh, mi, ss);
 80099b6:	9b08      	ldr	r3, [sp, #32]
 80099b8:	9a07      	ldr	r2, [sp, #28]
 80099ba:	9905      	ldr	r1, [sp, #20]
 80099bc:	9602      	str	r6, [sp, #8]
 80099be:	9501      	str	r5, [sp, #4]
 80099c0:	9400      	str	r4, [sp, #0]
 80099c2:	480d      	ldr	r0, [pc, #52]	@ (80099f8 <USB_HID_Receive+0xd2c>)
 80099c4:	f010 fcfa 	bl	801a3bc <iprintf>
         break;
 80099c8:	f7ff fa1e 	bl	8008e08 <USB_HID_Receive+0x13c>
    	 RAD_USBX_Clean_Vol();
 80099cc:	f7ff f970 	bl	8008cb0 <RAD_USBX_Clean_Vol>
    	 printf("Erase CSV & PDF");
 80099d0:	480a      	ldr	r0, [pc, #40]	@ (80099fc <USB_HID_Receive+0xd30>)
    	 printf("Reset RTC Alarm");
 80099d2:	f010 fcf3 	bl	801a3bc <iprintf>
         break;
 80099d6:	f7ff fa17 	bl	8008e08 <USB_HID_Receive+0x13c>
    	 RTC_Disable_All_Wakeup();
 80099da:	f7fb ff4d 	bl	8005878 <RTC_Disable_All_Wakeup>
    	 printf("Reset RTC Alarm");
 80099de:	4808      	ldr	r0, [pc, #32]	@ (8009a00 <USB_HID_Receive+0xd34>)
 80099e0:	e7f7      	b.n	80099d2 <USB_HID_Receive+0xd06>
        LOG_APP("[USB] Unknown command ID: 0x%02X\n", cmd_id);
 80099e2:	4b08      	ldr	r3, [pc, #32]	@ (8009a04 <USB_HID_Receive+0xd38>)
 80099e4:	4a08      	ldr	r2, [pc, #32]	@ (8009a08 <USB_HID_Receive+0xd3c>)
 80099e6:	6818      	ldr	r0, [r3, #0]
 80099e8:	4908      	ldr	r1, [pc, #32]	@ (8009a0c <USB_HID_Receive+0xd40>)
 80099ea:	002b      	movs	r3, r5
 80099ec:	68c0      	ldr	r0, [r0, #12]
 80099ee:	f010 fcb9 	bl	801a364 <fiprintf>
        break;
 80099f2:	f7ff fa09 	bl	8008e08 <USB_HID_Receive+0x13c>
 80099f6:	46c0      	nop			@ (mov r8, r8)
 80099f8:	0801eaa9 	.word	0x0801eaa9
 80099fc:	0801eadb 	.word	0x0801eadb
 8009a00:	0801eaeb 	.word	0x0801eaeb
 8009a04:	200002cc 	.word	0x200002cc
 8009a08:	0801eafb 	.word	0x0801eafb
 8009a0c:	0801eaff 	.word	0x0801eaff

08009a10 <RAD_Fatfs_MountOnly>:


FRESULT RAD_Fatfs_MountOnly(void)
{
    // 안전하게 언마운트 후 재마운트 (선택)
    f_mount(0, "", 0);
 8009a10:	2200      	movs	r2, #0
{
 8009a12:	b510      	push	{r4, lr}
    f_mount(0, "", 0);
 8009a14:	4c0c      	ldr	r4, [pc, #48]	@ (8009a48 <RAD_Fatfs_MountOnly+0x38>)
 8009a16:	0010      	movs	r0, r2
 8009a18:	0021      	movs	r1, r4
 8009a1a:	f00b fa53 	bl	8014ec4 <f_mount>

    FRESULT r = f_mount(&fs, "", 1);  // 즉시 마운트
 8009a1e:	0021      	movs	r1, r4
 8009a20:	2201      	movs	r2, #1
 8009a22:	480a      	ldr	r0, [pc, #40]	@ (8009a4c <RAD_Fatfs_MountOnly+0x3c>)
 8009a24:	f00b fa4e 	bl	8014ec4 <f_mount>
 8009a28:	1e04      	subs	r4, r0, #0
    if (r == FR_OK) {
        printf("[FATFS] remount OK\r\n");
 8009a2a:	4809      	ldr	r0, [pc, #36]	@ (8009a50 <RAD_Fatfs_MountOnly+0x40>)
    if (r == FR_OK) {
 8009a2c:	d002      	beq.n	8009a34 <RAD_Fatfs_MountOnly+0x24>
    } else if (r == FR_NO_FILESYSTEM) {
 8009a2e:	2c0d      	cmp	r4, #13
 8009a30:	d104      	bne.n	8009a3c <RAD_Fatfs_MountOnly+0x2c>
        printf("[FATFS] remount FAIL: no filesystem (FR_NO_FILESYSTEM)\r\n");
 8009a32:	4808      	ldr	r0, [pc, #32]	@ (8009a54 <RAD_Fatfs_MountOnly+0x44>)
 8009a34:	f010 fd32 	bl	801a49c <puts>
        // RAD_USBX_Fatfs_format_disk();
    } else {
        printf("[FATFS] remount FAIL: %d\r\n", r);
    }
    return r;
}
 8009a38:	0020      	movs	r0, r4
 8009a3a:	bd10      	pop	{r4, pc}
        printf("[FATFS] remount FAIL: %d\r\n", r);
 8009a3c:	0021      	movs	r1, r4
 8009a3e:	4806      	ldr	r0, [pc, #24]	@ (8009a58 <RAD_Fatfs_MountOnly+0x48>)
 8009a40:	f010 fcbc 	bl	801a3bc <iprintf>
 8009a44:	e7f8      	b.n	8009a38 <RAD_Fatfs_MountOnly+0x28>
 8009a46:	46c0      	nop			@ (mov r8, r8)
 8009a48:	0801f5e0 	.word	0x0801f5e0
 8009a4c:	20001b7c 	.word	0x20001b7c
 8009a50:	0801eb26 	.word	0x0801eb26
 8009a54:	0801eb3a 	.word	0x0801eb3a
 8009a58:	0801eb72 	.word	0x0801eb72

08009a5c <is_leap_u16>:
extern volatile bool RTC_During_Wakeup;


// ==== Epoch(절대초) 유틸: 2000-01-01 00:00:00 기준 ====
bool is_leap_u16(uint16_t y2000){
    uint16_t y = 2000 + y2000;
 8009a5c:	23fa      	movs	r3, #250	@ 0xfa
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	18c0      	adds	r0, r0, r3
bool is_leap_u16(uint16_t y2000){
 8009a62:	b510      	push	{r4, lr}
    uint16_t y = 2000 + y2000;
 8009a64:	b284      	uxth	r4, r0
    return ((y%4==0) && (y%100!=0)) || (y%400==0);
 8009a66:	0780      	lsls	r0, r0, #30
 8009a68:	d107      	bne.n	8009a7a <is_leap_u16+0x1e>
 8009a6a:	2164      	movs	r1, #100	@ 0x64
 8009a6c:	0020      	movs	r0, r4
 8009a6e:	f7f6 fc01 	bl	8000274 <__aeabi_uidivmod>
 8009a72:	b289      	uxth	r1, r1
 8009a74:	2001      	movs	r0, #1
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d107      	bne.n	8009a8a <is_leap_u16+0x2e>
 8009a7a:	21c8      	movs	r1, #200	@ 0xc8
 8009a7c:	0020      	movs	r0, r4
 8009a7e:	0049      	lsls	r1, r1, #1
 8009a80:	f7f6 fbf8 	bl	8000274 <__aeabi_uidivmod>
 8009a84:	b288      	uxth	r0, r1
 8009a86:	4243      	negs	r3, r0
 8009a88:	4158      	adcs	r0, r3
}
 8009a8a:	bd10      	pop	{r4, pc}

08009a8c <dim_u16>:
 uint8_t dim_u16(uint8_t m, uint16_t y2000){
 8009a8c:	0003      	movs	r3, r0
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	0008      	movs	r0, r1
    static const uint8_t dim[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    return (m==2) ? (uint8_t)(dim[1] + (is_leap_u16(y2000)?1:0)) : dim[m-1];
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d104      	bne.n	8009aa0 <dim_u16+0x14>
 8009a96:	f7ff ffe1 	bl	8009a5c <is_leap_u16>
 8009a9a:	301c      	adds	r0, #28
 8009a9c:	b2c0      	uxtb	r0, r0
}
 8009a9e:	bd10      	pop	{r4, pc}
    return (m==2) ? (uint8_t)(dim[1] + (is_leap_u16(y2000)?1:0)) : dim[m-1];
 8009aa0:	4a01      	ldr	r2, [pc, #4]	@ (8009aa8 <dim_u16+0x1c>)
 8009aa2:	5c98      	ldrb	r0, [r3, r2]
 8009aa4:	e7fb      	b.n	8009a9e <dim_u16+0x12>
 8009aa6:	46c0      	nop			@ (mov r8, r8)
 8009aa8:	08020639 	.word	0x08020639

08009aac <ymd_to_epoch>:
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 8009aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    // days since 2000-01-01
    uint32_t days = 0;
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 8009aae:	2400      	movs	r4, #0
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 8009ab0:	0006      	movs	r6, r0
 8009ab2:	000f      	movs	r7, r1
    uint32_t days = 0;
 8009ab4:	0025      	movs	r5, r4
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	ab0a      	add	r3, sp, #40	@ 0x28
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	9200      	str	r2, [sp, #0]
 8009ac0:	9302      	str	r3, [sp, #8]
 8009ac2:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	9303      	str	r3, [sp, #12]
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 8009ac8:	42b4      	cmp	r4, r6
 8009aca:	d114      	bne.n	8009af6 <ymd_to_epoch+0x4a>
    for(uint8_t im=1; im<m; ++im)  days += dim_u16(im, y2000);
 8009acc:	2401      	movs	r4, #1
 8009ace:	42bc      	cmp	r4, r7
 8009ad0:	d31a      	bcc.n	8009b08 <ymd_to_epoch+0x5c>
    days += (uint32_t)(d - 1);
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 8009ad2:	203c      	movs	r0, #60	@ 0x3c
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	9a01      	ldr	r2, [sp, #4]
 8009ad8:	4358      	muls	r0, r3
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	18c0      	adds	r0, r0, r3
 8009ade:	23e1      	movs	r3, #225	@ 0xe1
 8009ae0:	011b      	lsls	r3, r3, #4
 8009ae2:	4353      	muls	r3, r2
 8009ae4:	18c0      	adds	r0, r0, r3
    days += (uint32_t)(d - 1);
 8009ae6:	9b00      	ldr	r3, [sp, #0]
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 8009ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8009b18 <ymd_to_epoch+0x6c>)
    days += (uint32_t)(d - 1);
 8009aea:	3b01      	subs	r3, #1
 8009aec:	195b      	adds	r3, r3, r5
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 8009aee:	4353      	muls	r3, r2
 8009af0:	18c0      	adds	r0, r0, r3
}
 8009af2:	b005      	add	sp, #20
 8009af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 8009af6:	0020      	movs	r0, r4
 8009af8:	f7ff ffb0 	bl	8009a5c <is_leap_u16>
 8009afc:	306e      	adds	r0, #110	@ 0x6e
 8009afe:	30ff      	adds	r0, #255	@ 0xff
 8009b00:	3401      	adds	r4, #1
 8009b02:	182d      	adds	r5, r5, r0
 8009b04:	b2a4      	uxth	r4, r4
 8009b06:	e7df      	b.n	8009ac8 <ymd_to_epoch+0x1c>
    for(uint8_t im=1; im<m; ++im)  days += dim_u16(im, y2000);
 8009b08:	0020      	movs	r0, r4
 8009b0a:	0031      	movs	r1, r6
 8009b0c:	f7ff ffbe 	bl	8009a8c <dim_u16>
 8009b10:	3401      	adds	r4, #1
 8009b12:	182d      	adds	r5, r5, r0
 8009b14:	b2e4      	uxtb	r4, r4
 8009b16:	e7da      	b.n	8009ace <ymd_to_epoch+0x22>
 8009b18:	00015180 	.word	0x00015180

08009b1c <epoch_to_ymdhms>:
 void epoch_to_ymdhms(uint32_t epoch, uint16_t *y2000, uint8_t *m, uint8_t *d,
                             uint8_t *hh, uint8_t *mm, uint8_t *ss){
 8009b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b1e:	000e      	movs	r6, r1
    uint32_t days = epoch / 86400u;
 8009b20:	4920      	ldr	r1, [pc, #128]	@ (8009ba4 <epoch_to_ymdhms+0x88>)
                             uint8_t *hh, uint8_t *mm, uint8_t *ss){
 8009b22:	0017      	movs	r7, r2
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	0005      	movs	r5, r0
    uint32_t days = epoch / 86400u;
 8009b28:	f7f6 fb1e 	bl	8000168 <__udivsi3>
    uint32_t sod  = epoch % 86400u;
 8009b2c:	491d      	ldr	r1, [pc, #116]	@ (8009ba4 <epoch_to_ymdhms+0x88>)
    uint32_t days = epoch / 86400u;
 8009b2e:	0004      	movs	r4, r0
    uint32_t sod  = epoch % 86400u;
 8009b30:	0028      	movs	r0, r5
 8009b32:	f7f6 fb9f 	bl	8000274 <__aeabi_uidivmod>
 8009b36:	000d      	movs	r5, r1
    *hh = (uint8_t)(sod/3600u); sod%=3600u;
 8009b38:	21e1      	movs	r1, #225	@ 0xe1
 8009b3a:	0028      	movs	r0, r5
 8009b3c:	0109      	lsls	r1, r1, #4
 8009b3e:	f7f6 fb13 	bl	8000168 <__udivsi3>
 8009b42:	21e1      	movs	r1, #225	@ 0xe1
 8009b44:	9b08      	ldr	r3, [sp, #32]
 8009b46:	0109      	lsls	r1, r1, #4
 8009b48:	7018      	strb	r0, [r3, #0]
 8009b4a:	0028      	movs	r0, r5
 8009b4c:	f7f6 fb92 	bl	8000274 <__aeabi_uidivmod>
 8009b50:	000d      	movs	r5, r1
    *mm = (uint8_t)(sod/60u);
 8009b52:	213c      	movs	r1, #60	@ 0x3c
 8009b54:	0028      	movs	r0, r5
 8009b56:	f7f6 fb07 	bl	8000168 <__udivsi3>
 8009b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *ss = (uint8_t)(sod%60u);
 8009b5c:	213c      	movs	r1, #60	@ 0x3c
    *mm = (uint8_t)(sod/60u);
 8009b5e:	7018      	strb	r0, [r3, #0]
    *ss = (uint8_t)(sod%60u);
 8009b60:	0028      	movs	r0, r5
 8009b62:	f7f6 fb87 	bl	8000274 <__aeabi_uidivmod>

    uint16_t y = 0;
 8009b66:	2500      	movs	r5, #0
    *ss = (uint8_t)(sod%60u);
 8009b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6a:	7019      	strb	r1, [r3, #0]
    while(1){
        uint32_t ydays = 365 + (is_leap_u16(y)?1:0);
 8009b6c:	0028      	movs	r0, r5
 8009b6e:	f7ff ff75 	bl	8009a5c <is_leap_u16>
 8009b72:	306e      	adds	r0, #110	@ 0x6e
 8009b74:	30ff      	adds	r0, #255	@ 0xff
        if(days >= ydays){ days -= ydays; ++y; }
 8009b76:	42a0      	cmp	r0, r4
 8009b78:	d803      	bhi.n	8009b82 <epoch_to_ymdhms+0x66>
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	1a24      	subs	r4, r4, r0
 8009b7e:	b2ad      	uxth	r5, r5
    while(1){
 8009b80:	e7f4      	b.n	8009b6c <epoch_to_ymdhms+0x50>
        else break;
    }
    *y2000 = y;
 8009b82:	8035      	strh	r5, [r6, #0]

    uint8_t mon=1;
 8009b84:	2601      	movs	r6, #1
    while(1){
        uint8_t mdays = dim_u16(mon, *y2000);
 8009b86:	0029      	movs	r1, r5
 8009b88:	0030      	movs	r0, r6
 8009b8a:	f7ff ff7f 	bl	8009a8c <dim_u16>
        if(days >= mdays){ days -= mdays; ++mon; }
 8009b8e:	42a0      	cmp	r0, r4
 8009b90:	d803      	bhi.n	8009b9a <epoch_to_ymdhms+0x7e>
 8009b92:	3601      	adds	r6, #1
 8009b94:	1a24      	subs	r4, r4, r0
 8009b96:	b2f6      	uxtb	r6, r6
    while(1){
 8009b98:	e7f5      	b.n	8009b86 <epoch_to_ymdhms+0x6a>
        else break;
    }
    *m = mon;
    *d = (uint8_t)(days+1);
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	3401      	adds	r4, #1
    *m = mon;
 8009b9e:	703e      	strb	r6, [r7, #0]
    *d = (uint8_t)(days+1);
 8009ba0:	701c      	strb	r4, [r3, #0]
}
 8009ba2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009ba4:	00015180 	.word	0x00015180

08009ba8 <Save_DeviceSettings>:


 void Save_DeviceSettings(const DeviceSettings *cfg) {
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	0005      	movs	r5, r0
 8009bac:	b088      	sub	sp, #32
 8009bae:	b672      	cpsid	i
     __disable_irq();
     HAL_FLASH_Unlock();
 8009bb0:	f005 fcc0 	bl	800f534 <HAL_FLASH_Unlock>

     FLASH_EraseInitTypeDef erase = { .TypeErase=FLASH_TYPEERASE_PAGES,
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9204      	str	r2, [sp, #16]
 8009bba:	327d      	adds	r2, #125	@ 0x7d
 8009bbc:	9206      	str	r2, [sp, #24]
         .Page=(SETTINGS_FLASH_ADDR-FLASH_BASE)/FLASH_PAGE_SIZE, .NbPages=1 };
     uint32_t err=0;
     if (HAL_FLASHEx_Erase(&erase, &err)!=HAL_OK || err!=0xFFFFFFFFu) goto done;
 8009bbe:	a901      	add	r1, sp, #4
     FLASH_EraseInitTypeDef erase = { .TypeErase=FLASH_TYPEERASE_PAGES,
 8009bc0:	3a7e      	subs	r2, #126	@ 0x7e
     if (HAL_FLASHEx_Erase(&erase, &err)!=HAL_OK || err!=0xFFFFFFFFu) goto done;
 8009bc2:	a804      	add	r0, sp, #16
     FLASH_EraseInitTypeDef erase = { .TypeErase=FLASH_TYPEERASE_PAGES,
 8009bc4:	9305      	str	r3, [sp, #20]
 8009bc6:	9207      	str	r2, [sp, #28]
     uint32_t err=0;
 8009bc8:	9301      	str	r3, [sp, #4]
     if (HAL_FLASHEx_Erase(&erase, &err)!=HAL_OK || err!=0xFFFFFFFFu) goto done;
 8009bca:	f005 fd49 	bl	800f660 <HAL_FLASHEx_Erase>
 8009bce:	1e04      	subs	r4, r0, #0
 8009bd0:	d11c      	bne.n	8009c0c <Save_DeviceSettings+0x64>
 8009bd2:	9b01      	ldr	r3, [sp, #4]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	d119      	bne.n	8009c0c <Save_DeviceSettings+0x64>

     uint32_t off = 0;
     const uint8_t *p = (const uint8_t*)cfg;
     uint8_t buf[8];
     while (off < sizeof(DeviceSettings)) {
         uint32_t n = (sizeof(DeviceSettings)-off >= 8) ? 8 : (sizeof(DeviceSettings)-off);
 8009bd8:	26af      	movs	r6, #175	@ 0xaf
         memset(buf, 0xFF, 8);
 8009bda:	2208      	movs	r2, #8
 8009bdc:	21ff      	movs	r1, #255	@ 0xff
 8009bde:	a802      	add	r0, sp, #8
 8009be0:	f010 fdb8 	bl	801a754 <memset>
         uint32_t n = (sizeof(DeviceSettings)-off >= 8) ? 8 : (sizeof(DeviceSettings)-off);
 8009be4:	1b32      	subs	r2, r6, r4
 8009be6:	2a08      	cmp	r2, #8
 8009be8:	d900      	bls.n	8009bec <Save_DeviceSettings+0x44>
 8009bea:	2208      	movs	r2, #8
         memcpy(buf, p+off, n);
 8009bec:	1929      	adds	r1, r5, r4
 8009bee:	a802      	add	r0, sp, #8
 8009bf0:	f010 fe7a 	bl	801a8e8 <memcpy>
         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8009bf4:	9a02      	ldr	r2, [sp, #8]
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	4907      	ldr	r1, [pc, #28]	@ (8009c18 <Save_DeviceSettings+0x70>)
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	1861      	adds	r1, r4, r1
 8009bfe:	f005 fceb 	bl	800f5d8 <HAL_FLASH_Program>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d102      	bne.n	8009c0c <Save_DeviceSettings+0x64>
                 SETTINGS_FLASH_ADDR+off, *(uint64_t*)buf) != HAL_OK) break;
         off += 8;
 8009c06:	3408      	adds	r4, #8
     while (off < sizeof(DeviceSettings)) {
 8009c08:	2cb0      	cmp	r4, #176	@ 0xb0
 8009c0a:	d1e6      	bne.n	8009bda <Save_DeviceSettings+0x32>
     }
 done:
     HAL_FLASH_Lock();
 8009c0c:	f005 fca4 	bl	800f558 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8009c10:	b662      	cpsie	i
     __enable_irq();
 }
 8009c12:	b008      	add	sp, #32
 8009c14:	bd70      	pop	{r4, r5, r6, pc}
 8009c16:	46c0      	nop			@ (mov r8, r8)
 8009c18:	0803f800 	.word	0x0803f800

08009c1c <Save_CurrentSettings>:
    Save_CurrentSettings();
//    printf("[Debug][Load] Loaded start_target_seconds: %lu\r\n", current_settings.start_target_seconds);
}

void Save_CurrentSettings(void)
{
 8009c1c:	b510      	push	{r4, lr}

    Save_DeviceSettings(&current_settings);
 8009c1e:	4803      	ldr	r0, [pc, #12]	@ (8009c2c <Save_CurrentSettings+0x10>)
 8009c20:	f7ff ffc2 	bl	8009ba8 <Save_DeviceSettings>
    printf("[Save] DeviceSettings saved to Flash.\n");
 8009c24:	4802      	ldr	r0, [pc, #8]	@ (8009c30 <Save_CurrentSettings+0x14>)
 8009c26:	f010 fc39 	bl	801a49c <puts>

}
 8009c2a:	bd10      	pop	{r4, pc}
 8009c2c:	20002bac 	.word	0x20002bac
 8009c30:	0801eb8d 	.word	0x0801eb8d

08009c34 <Load_DefaultSettings>:
void Load_DefaultSettings(void) {
 8009c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memcpy(&current_settings, (const void*)SETTINGS_FLASH_ADDR, sizeof(DeviceSettings));
 8009c36:	4d68      	ldr	r5, [pc, #416]	@ (8009dd8 <Load_DefaultSettings+0x1a4>)
 8009c38:	22af      	movs	r2, #175	@ 0xaf
 8009c3a:	0028      	movs	r0, r5
 8009c3c:	4967      	ldr	r1, [pc, #412]	@ (8009ddc <Load_DefaultSettings+0x1a8>)
 8009c3e:	f010 fe53 	bl	801a8e8 <memcpy>
    strncpy(current_settings.device_code, "LogNc 1", sizeof(current_settings.device_code) - 1);
 8009c42:	220f      	movs	r2, #15
 8009c44:	0028      	movs	r0, r5
 8009c46:	4966      	ldr	r1, [pc, #408]	@ (8009de0 <Load_DefaultSettings+0x1ac>)
 8009c48:	f010 fda7 	bl	801a79a <strncpy>
    strncpy (current_settings.firmware_ver, "1.0.0", sizeof(current_settings.firmware_ver) - 1);
 8009c4c:	2207      	movs	r2, #7
 8009c4e:	4965      	ldr	r1, [pc, #404]	@ (8009de4 <Load_DefaultSettings+0x1b0>)
 8009c50:	4865      	ldr	r0, [pc, #404]	@ (8009de8 <Load_DefaultSettings+0x1b4>)
 8009c52:	f010 fda2 	bl	801a79a <strncpy>
    strncpy(current_settings.model, "Test ver", sizeof(current_settings.model) - 1);
 8009c56:	4e65      	ldr	r6, [pc, #404]	@ (8009dec <Load_DefaultSettings+0x1b8>)
 8009c58:	220f      	movs	r2, #15
 8009c5a:	0030      	movs	r0, r6
 8009c5c:	4964      	ldr	r1, [pc, #400]	@ (8009df0 <Load_DefaultSettings+0x1bc>)
 8009c5e:	f010 fd9c 	bl	801a79a <strncpy>
    strncpy(current_settings.serial, "RT01023", sizeof(current_settings.serial) - 1);
 8009c62:	220f      	movs	r2, #15
 8009c64:	4963      	ldr	r1, [pc, #396]	@ (8009df4 <Load_DefaultSettings+0x1c0>)
 8009c66:	4864      	ldr	r0, [pc, #400]	@ (8009df8 <Load_DefaultSettings+0x1c4>)
 8009c68:	f010 fd97 	bl	801a79a <strncpy>
    strncpy(current_settings.trip_desc, "Test trip code", sizeof(current_settings.trip_desc) - 1);
 8009c6c:	2227      	movs	r2, #39	@ 0x27
 8009c6e:	4963      	ldr	r1, [pc, #396]	@ (8009dfc <Load_DefaultSettings+0x1c8>)
 8009c70:	4863      	ldr	r0, [pc, #396]	@ (8009e00 <Load_DefaultSettings+0x1cc>)
 8009c72:	f010 fd92 	bl	801a79a <strncpy>
    current_settings.trip_code = 0x01;
 8009c76:	002b      	movs	r3, r5
 8009c78:	2400      	movs	r4, #0
 8009c7a:	2701      	movs	r7, #1
 8009c7c:	3339      	adds	r3, #57	@ 0x39
 8009c7e:	701f      	strb	r7, [r3, #0]
 8009c80:	705c      	strb	r4, [r3, #1]
    current_settings.start_delay = 60;
 8009c82:	002b      	movs	r3, r5
 8009c84:	223c      	movs	r2, #60	@ 0x3c
 8009c86:	3364      	adds	r3, #100	@ 0x64
 8009c88:	701a      	strb	r2, [r3, #0]
 8009c8a:	002b      	movs	r3, r5
 8009c8c:	3365      	adds	r3, #101	@ 0x65
 8009c8e:	701c      	strb	r4, [r3, #0]
 8009c90:	002b      	movs	r3, r5
 8009c92:	3366      	adds	r3, #102	@ 0x66
 8009c94:	701c      	strb	r4, [r3, #0]
 8009c96:	002b      	movs	r3, r5
 8009c98:	3367      	adds	r3, #103	@ 0x67
 8009c9a:	701c      	strb	r4, [r3, #0]
    current_settings.temp_interval = 600;
 8009c9c:	002b      	movs	r3, r5
 8009c9e:	2158      	movs	r1, #88	@ 0x58
 8009ca0:	3375      	adds	r3, #117	@ 0x75
 8009ca2:	3a3a      	subs	r2, #58	@ 0x3a
 8009ca4:	7019      	strb	r1, [r3, #0]
 8009ca6:	705a      	strb	r2, [r3, #1]
 8009ca8:	709c      	strb	r4, [r3, #2]
 8009caa:	70dc      	strb	r4, [r3, #3]
    current_settings.rad_interval = 600;
 8009cac:	002b      	movs	r3, r5
 8009cae:	3371      	adds	r3, #113	@ 0x71
 8009cb0:	7019      	strb	r1, [r3, #0]
 8009cb2:	705a      	strb	r2, [r3, #1]
 8009cb4:	709c      	strb	r4, [r3, #2]
 8009cb6:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_delay = 0;
 8009cb8:	002b      	movs	r3, r5
 8009cba:	3386      	adds	r3, #134	@ 0x86
 8009cbc:	701c      	strb	r4, [r3, #0]
 8009cbe:	002b      	movs	r3, r5
 8009cc0:	3387      	adds	r3, #135	@ 0x87
 8009cc2:	701c      	strb	r4, [r3, #0]
 8009cc4:	002b      	movs	r3, r5
 8009cc6:	3388      	adds	r3, #136	@ 0x88
 8009cc8:	701c      	strb	r4, [r3, #0]
 8009cca:	002b      	movs	r3, r5
 8009ccc:	3389      	adds	r3, #137	@ 0x89
 8009cce:	701c      	strb	r4, [r3, #0]
    current_settings.display_temp_unit = 0;
 8009cd0:	002b      	movs	r3, r5
 8009cd2:	338a      	adds	r3, #138	@ 0x8a
 8009cd4:	701c      	strb	r4, [r3, #0]
    current_settings.display_dose_unit = 0;
 8009cd6:	002b      	movs	r3, r5
    device_config.display_temp = current_settings.display_temp_unit;
 8009cd8:	484a      	ldr	r0, [pc, #296]	@ (8009e04 <Load_DefaultSettings+0x1d0>)
    current_settings.sensor_type = 1; // 예: 1이면 T&R(interval)로 해석 (CSV는 고정문자열로 처리됨)
 8009cda:	3620      	adds	r6, #32
    current_settings.display_dose_unit = 0;
 8009cdc:	338b      	adds	r3, #139	@ 0x8b
    current_settings.sensor_type = 1; // 예: 1이면 T&R(interval)로 해석 (CSV는 고정문자열로 처리됨)
 8009cde:	7037      	strb	r7, [r6, #0]
    device_config.display_temp = current_settings.display_temp_unit;
 8009ce0:	83c4      	strh	r4, [r0, #30]
    current_settings.display_dose_unit = 0;
 8009ce2:	701c      	strb	r4, [r3, #0]
    Save_IntervalInfo_To_Backup(&device_config);
 8009ce4:	f7fc fb8e 	bl	8006404 <Save_IntervalInfo_To_Backup>
    current_settings.alarm_rh1 = 2000; // devide 100 is u/Sv
 8009ce8:	002b      	movs	r3, r5
 8009cea:	2230      	movs	r2, #48	@ 0x30
 8009cec:	3391      	adds	r3, #145	@ 0x91
 8009cee:	4252      	negs	r2, r2
 8009cf0:	701a      	strb	r2, [r3, #0]
 8009cf2:	3237      	adds	r2, #55	@ 0x37
 8009cf4:	705a      	strb	r2, [r3, #1]
 8009cf6:	709c      	strb	r4, [r3, #2]
 8009cf8:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_rh2 = 5000;
 8009cfa:	002b      	movs	r3, r5
 8009cfc:	3a7f      	subs	r2, #127	@ 0x7f
 8009cfe:	3399      	adds	r3, #153	@ 0x99
 8009d00:	701a      	strb	r2, [r3, #0]
 8009d02:	328b      	adds	r2, #139	@ 0x8b
 8009d04:	705a      	strb	r2, [r3, #1]
 8009d06:	709c      	strb	r4, [r3, #2]
 8009d08:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_th1 = 100; // device 10 is 'C
 8009d0a:	002b      	movs	r3, r5
 8009d0c:	3251      	adds	r2, #81	@ 0x51
 8009d0e:	3395      	adds	r3, #149	@ 0x95
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	705c      	strb	r4, [r3, #1]
    current_settings.alarm_th2 =500;
 8009d14:	002b      	movs	r3, r5
 8009d16:	3a70      	subs	r2, #112	@ 0x70
 8009d18:	339d      	adds	r3, #157	@ 0x9d
 8009d1a:	701a      	strb	r2, [r3, #0]
 8009d1c:	705f      	strb	r7, [r3, #1]
    current_settings.alarm_tl1 = -200;
 8009d1e:	002b      	movs	r3, r5
 8009d20:	3244      	adds	r2, #68	@ 0x44
 8009d22:	3397      	adds	r3, #151	@ 0x97
 8009d24:	701a      	strb	r2, [r3, #0]
 8009d26:	3a39      	subs	r2, #57	@ 0x39
 8009d28:	705a      	strb	r2, [r3, #1]
    current_settings.alarm_tl2 = -300;
 8009d2a:	002b      	movs	r3, r5
 8009d2c:	3a2b      	subs	r2, #43	@ 0x2b
 8009d2e:	339f      	adds	r3, #159	@ 0x9f
 8009d30:	701a      	strb	r2, [r3, #0]
 8009d32:	322a      	adds	r2, #42	@ 0x2a
 8009d34:	705a      	strb	r2, [r3, #1]
    current_settings.alarm_delay_rh1 = 0;
 8009d36:	002b      	movs	r3, r5
 8009d38:	337a      	adds	r3, #122	@ 0x7a
 8009d3a:	701c      	strb	r4, [r3, #0]
 8009d3c:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_rh2 = 0;
 8009d3e:	002b      	movs	r3, r5
 8009d40:	337c      	adds	r3, #124	@ 0x7c
 8009d42:	701c      	strb	r4, [r3, #0]
 8009d44:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_th1 = 0;
 8009d46:	002b      	movs	r3, r5
 8009d48:	337e      	adds	r3, #126	@ 0x7e
 8009d4a:	701c      	strb	r4, [r3, #0]
 8009d4c:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_th2 = 0;
 8009d4e:	002b      	movs	r3, r5
 8009d50:	3380      	adds	r3, #128	@ 0x80
 8009d52:	701c      	strb	r4, [r3, #0]
 8009d54:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_tl1 = 0;
 8009d56:	002b      	movs	r3, r5
 8009d58:	3382      	adds	r3, #130	@ 0x82
 8009d5a:	701c      	strb	r4, [r3, #0]
 8009d5c:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_tl2 = 0;
 8009d5e:	002b      	movs	r3, r5
 8009d60:	3384      	adds	r3, #132	@ 0x84
 8009d62:	701c      	strb	r4, [r3, #0]
 8009d64:	705c      	strb	r4, [r3, #1]
	current_settings. mode_status = 0x00;
 8009d66:	002b      	movs	r3, r5
 8009d68:	338c      	adds	r3, #140	@ 0x8c
 8009d6a:	701c      	strb	r4, [r3, #0]
	current_settings.report_format = 0x01;
 8009d6c:	002b      	movs	r3, r5
 8009d6e:	3379      	adds	r3, #121	@ 0x79
 8009d70:	701f      	strb	r7, [r3, #0]
    current_settings.start_time_info = 0x00;
 8009d72:	002b      	movs	r3, r5
 8009d74:	336c      	adds	r3, #108	@ 0x6c
 8009d76:	701c      	strb	r4, [r3, #0]
 8009d78:	002b      	movs	r3, r5
 8009d7a:	336d      	adds	r3, #109	@ 0x6d
 8009d7c:	701c      	strb	r4, [r3, #0]
 8009d7e:	002b      	movs	r3, r5
 8009d80:	336e      	adds	r3, #110	@ 0x6e
 8009d82:	701c      	strb	r4, [r3, #0]
 8009d84:	002b      	movs	r3, r5
 8009d86:	336f      	adds	r3, #111	@ 0x6f
 8009d88:	701c      	strb	r4, [r3, #0]
    current_settings.start_reservation_time = 0;
 8009d8a:	002b      	movs	r3, r5
 8009d8c:	33a5      	adds	r3, #165	@ 0xa5
 8009d8e:	701c      	strb	r4, [r3, #0]
 8009d90:	705c      	strb	r4, [r3, #1]
 8009d92:	709c      	strb	r4, [r3, #2]
 8009d94:	70dc      	strb	r4, [r3, #3]
    current_settings.start_mode = 0x00;
 8009d96:	002b      	movs	r3, r5
 8009d98:	3363      	adds	r3, #99	@ 0x63
 8009d9a:	701c      	strb	r4, [r3, #0]
    current_settings.start_target_seconds = 0x00;  // start_delay 적용된 RTC 기준 초 시각
 8009d9c:	002b      	movs	r3, r5
 8009d9e:	33a1      	adds	r3, #161	@ 0xa1
 8009da0:	701c      	strb	r4, [r3, #0]
 8009da2:	705c      	strb	r4, [r3, #1]
 8009da4:	709c      	strb	r4, [r3, #2]
 8009da6:	70dc      	strb	r4, [r3, #3]
    current_settings.interval_duration_day= 0x00;
 8009da8:	002b      	movs	r3, r5
 8009daa:	33a9      	adds	r3, #169	@ 0xa9
 8009dac:	701c      	strb	r4, [r3, #0]
 8009dae:	705c      	strb	r4, [r3, #1]
    current_settings.end_target_seconds= 0x00;
 8009db0:	002b      	movs	r3, r5
 8009db2:	33ab      	adds	r3, #171	@ 0xab
 8009db4:	701c      	strb	r4, [r3, #0]
 8009db6:	705c      	strb	r4, [r3, #1]
 8009db8:	709c      	strb	r4, [r3, #2]
 8009dba:	70dc      	strb	r4, [r3, #3]
    current_settings.start_time_info_for_alarm = 0x00;
 8009dbc:	002b      	movs	r3, r5
 8009dbe:	3368      	adds	r3, #104	@ 0x68
 8009dc0:	701c      	strb	r4, [r3, #0]
 8009dc2:	002b      	movs	r3, r5
 8009dc4:	3369      	adds	r3, #105	@ 0x69
 8009dc6:	701c      	strb	r4, [r3, #0]
 8009dc8:	002b      	movs	r3, r5
 8009dca:	356b      	adds	r5, #107	@ 0x6b
 8009dcc:	336a      	adds	r3, #106	@ 0x6a
 8009dce:	702c      	strb	r4, [r5, #0]
 8009dd0:	701c      	strb	r4, [r3, #0]
    Save_CurrentSettings();
 8009dd2:	f7ff ff23 	bl	8009c1c <Save_CurrentSettings>
}
 8009dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd8:	20002bac 	.word	0x20002bac
 8009ddc:	0803f800 	.word	0x0803f800
 8009de0:	0801ebb3 	.word	0x0801ebb3
 8009de4:	0801ebbb 	.word	0x0801ebbb
 8009de8:	20002bdd 	.word	0x20002bdd
 8009dec:	20002bbc 	.word	0x20002bbc
 8009df0:	0801ebc1 	.word	0x0801ebc1
 8009df4:	0801ebca 	.word	0x0801ebca
 8009df8:	20002bcc 	.word	0x20002bcc
 8009dfc:	0801ebd2 	.word	0x0801ebd2
 8009e00:	20002be7 	.word	0x20002be7
 8009e04:	20000b50 	.word	0x20000b50

08009e08 <Init_DeviceSettings>:




void Init_DeviceSettings(void) {
 8009e08:	b510      	push	{r4, lr}
	memcpy(&current_settings, (const void*)SETTINGS_FLASH_ADDR, sizeof(DeviceSettings));
 8009e0a:	4c09      	ldr	r4, [pc, #36]	@ (8009e30 <Init_DeviceSettings+0x28>)
 8009e0c:	22af      	movs	r2, #175	@ 0xaf
 8009e0e:	0020      	movs	r0, r4
 8009e10:	4908      	ldr	r1, [pc, #32]	@ (8009e34 <Init_DeviceSettings+0x2c>)
 8009e12:	f010 fd69 	bl	801a8e8 <memcpy>

    uint8_t *p = (uint8_t*)&current_settings;
    int empty = 1;
    for (size_t i = 0; i < sizeof(DeviceSettings); i++) {
 8009e16:	2300      	movs	r3, #0
        if (p[i] != 0xFF) {
 8009e18:	5ce2      	ldrb	r2, [r4, r3]
 8009e1a:	2aff      	cmp	r2, #255	@ 0xff
 8009e1c:	d107      	bne.n	8009e2e <Init_DeviceSettings+0x26>
    for (size_t i = 0; i < sizeof(DeviceSettings); i++) {
 8009e1e:	3301      	adds	r3, #1
 8009e20:	2baf      	cmp	r3, #175	@ 0xaf
 8009e22:	d1f9      	bne.n	8009e18 <Init_DeviceSettings+0x10>
            break;
        }
    }
//
    if (empty) {
    	printf("--------------Default Setting call----------------");
 8009e24:	4804      	ldr	r0, [pc, #16]	@ (8009e38 <Init_DeviceSettings+0x30>)
 8009e26:	f010 fac9 	bl	801a3bc <iprintf>
    Load_DefaultSettings();
 8009e2a:	f7ff ff03 	bl	8009c34 <Load_DefaultSettings>
    }

}
 8009e2e:	bd10      	pop	{r4, pc}
 8009e30:	20002bac 	.word	0x20002bac
 8009e34:	0803f800 	.word	0x0803f800
 8009e38:	0801ebe1 	.word	0x0801ebe1

08009e3c <AlarmDelay_InitStart_Flash>:
//
//    printf("[AlarmDelay] Start 기준초 저장: %02u:%02u:%02u (%lu)\r\n",
//           t.Hours, t.Minutes, t.Seconds, now_sec);
//}
void AlarmDelay_InitStart_Flash(void)
{
 8009e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009e3e:	4d27      	ldr	r5, [pc, #156]	@ (8009edc <AlarmDelay_InitStart_Flash+0xa0>)
{
 8009e40:	b089      	sub	sp, #36	@ 0x24
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009e42:	ae03      	add	r6, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009e44:	ac02      	add	r4, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009e46:	0031      	movs	r1, r6
 8009e48:	2200      	movs	r2, #0
 8009e4a:	0028      	movs	r0, r5
 8009e4c:	f008 f9c4 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009e50:	0021      	movs	r1, r4
 8009e52:	2200      	movs	r2, #0
 8009e54:	0028      	movs	r0, r5
 8009e56:	f008 f9f1 	bl	801223c <HAL_RTC_GetDate>

    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8009e5a:	78a2      	ldrb	r2, [r4, #2]
 8009e5c:	7861      	ldrb	r1, [r4, #1]
 8009e5e:	78e0      	ldrb	r0, [r4, #3]
 8009e60:	78b4      	ldrb	r4, [r6, #2]
 8009e62:	7833      	ldrb	r3, [r6, #0]
 8009e64:	9401      	str	r4, [sp, #4]
 8009e66:	7874      	ldrb	r4, [r6, #1]
 8009e68:	9400      	str	r4, [sp, #0]
 8009e6a:	f7ff fe1f 	bl	8009aac <ymd_to_epoch>
                                      t.Hours, t.Minutes, t.Seconds);

    Set_EndTarget_FromNow_Days(current_settings.interval_duration_day);
 8009e6e:	4c1c      	ldr	r4, [pc, #112]	@ (8009ee0 <AlarmDelay_InitStart_Flash+0xa4>)
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8009e70:	0005      	movs	r5, r0
    Set_EndTarget_FromNow_Days(current_settings.interval_duration_day);
 8009e72:	0022      	movs	r2, r4
 8009e74:	4b1b      	ldr	r3, [pc, #108]	@ (8009ee4 <AlarmDelay_InitStart_Flash+0xa8>)
 8009e76:	32aa      	adds	r2, #170	@ 0xaa
 8009e78:	7810      	ldrb	r0, [r2, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	0200      	lsls	r0, r0, #8
 8009e7e:	4318      	orrs	r0, r3
 8009e80:	f7fb fe4c 	bl	8005b1c <Set_EndTarget_FromNow_Days>
    current_settings.start_time_info = now_epoch;
 8009e84:	21ff      	movs	r1, #255	@ 0xff
 8009e86:	0028      	movs	r0, r5
 8009e88:	0023      	movs	r3, r4
 8009e8a:	4008      	ands	r0, r1
 8009e8c:	336c      	adds	r3, #108	@ 0x6c
 8009e8e:	7018      	strb	r0, [r3, #0]
 8009e90:	0023      	movs	r3, r4
 8009e92:	0a2a      	lsrs	r2, r5, #8
 8009e94:	400a      	ands	r2, r1
 8009e96:	336d      	adds	r3, #109	@ 0x6d
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	0c2b      	lsrs	r3, r5, #16
 8009e9c:	400b      	ands	r3, r1
 8009e9e:	0021      	movs	r1, r4
 8009ea0:	0027      	movs	r7, r4
 8009ea2:	316e      	adds	r1, #110	@ 0x6e
 8009ea4:	700b      	strb	r3, [r1, #0]
 8009ea6:	376f      	adds	r7, #111	@ 0x6f
 8009ea8:	0e29      	lsrs	r1, r5, #24
 8009eaa:	7039      	strb	r1, [r7, #0]
    current_settings.start_time_info_for_alarm = now_epoch; // ★ 이제 절대초로 저장 (이전에는 SOD 저장)
 8009eac:	0027      	movs	r7, r4
 8009eae:	3768      	adds	r7, #104	@ 0x68
 8009eb0:	7038      	strb	r0, [r7, #0]
 8009eb2:	0020      	movs	r0, r4
 8009eb4:	3069      	adds	r0, #105	@ 0x69
 8009eb6:	7002      	strb	r2, [r0, #0]
 8009eb8:	0022      	movs	r2, r4
 8009eba:	346b      	adds	r4, #107	@ 0x6b
 8009ebc:	326a      	adds	r2, #106	@ 0x6a
 8009ebe:	7013      	strb	r3, [r2, #0]
 8009ec0:	7021      	strb	r1, [r4, #0]
    Save_CurrentSettings();
 8009ec2:	f7ff feab 	bl	8009c1c <Save_CurrentSettings>

    printf("[AlarmDelay] Gate start EPOCH=%lu (%02u:%02u:%02u)\r\n",
 8009ec6:	78b1      	ldrb	r1, [r6, #2]
 8009ec8:	7873      	ldrb	r3, [r6, #1]
 8009eca:	7832      	ldrb	r2, [r6, #0]
 8009ecc:	4806      	ldr	r0, [pc, #24]	@ (8009ee8 <AlarmDelay_InitStart_Flash+0xac>)
 8009ece:	9100      	str	r1, [sp, #0]
 8009ed0:	0029      	movs	r1, r5
 8009ed2:	f010 fa73 	bl	801a3bc <iprintf>
           (unsigned long)now_epoch, t.Hours, t.Minutes, t.Seconds);
}
 8009ed6:	b009      	add	sp, #36	@ 0x24
 8009ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eda:	46c0      	nop			@ (mov r8, r8)
 8009edc:	200009f8 	.word	0x200009f8
 8009ee0:	20002bac 	.word	0x20002bac
 8009ee4:	20002c55 	.word	0x20002c55
 8009ee8:	0801ec14 	.word	0x0801ec14

08009eec <Set_StartTargetTime_FromRTC>:
//    //        elapsed, *g_rh1,*g_rh2,*g_th1,*g_th2,*g_tl1,*g_tl2);
//}

// Delay 타깃을 '절대초'로 저장
void Set_StartTargetTime_FromRTC(void)
{
 8009eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009eee:	4e39      	ldr	r6, [pc, #228]	@ (8009fd4 <Set_StartTargetTime_FromRTC+0xe8>)
{
 8009ef0:	b089      	sub	sp, #36	@ 0x24
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009ef2:	ac03      	add	r4, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009ef4:	ad02      	add	r5, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009ef6:	0021      	movs	r1, r4
 8009ef8:	2200      	movs	r2, #0
 8009efa:	0030      	movs	r0, r6
 8009efc:	f008 f96c 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009f00:	0029      	movs	r1, r5
 8009f02:	2200      	movs	r2, #0
 8009f04:	0030      	movs	r0, r6
 8009f06:	f008 f999 	bl	801223c <HAL_RTC_GetDate>

    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8009f0a:	78aa      	ldrb	r2, [r5, #2]
 8009f0c:	7869      	ldrb	r1, [r5, #1]
 8009f0e:	78e8      	ldrb	r0, [r5, #3]
 8009f10:	78a5      	ldrb	r5, [r4, #2]
 8009f12:	7823      	ldrb	r3, [r4, #0]
 8009f14:	9501      	str	r5, [sp, #4]
 8009f16:	7864      	ldrb	r4, [r4, #1]
 8009f18:	9400      	str	r4, [sp, #0]
 8009f1a:	f7ff fdc7 	bl	8009aac <ymd_to_epoch>

//    Load_DefaultSettings();
    // 최대 31일(요구사항), 더 길게 허용하려면 아래 clamp 제거
    uint32_t max_delay = 31u * 86400u;
    if (current_settings.start_delay > max_delay) current_settings.start_delay = max_delay;
 8009f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8009fd8 <Set_StartTargetTime_FromRTC+0xec>)
 8009f20:	4e2e      	ldr	r6, [pc, #184]	@ (8009fdc <Set_StartTargetTime_FromRTC+0xf0>)
 8009f22:	001d      	movs	r5, r3
 8009f24:	3565      	adds	r5, #101	@ 0x65
 8009f26:	001c      	movs	r4, r3
 8009f28:	782a      	ldrb	r2, [r5, #0]
 8009f2a:	7831      	ldrb	r1, [r6, #0]
 8009f2c:	0212      	lsls	r2, r2, #8
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	0019      	movs	r1, r3
 8009f32:	3466      	adds	r4, #102	@ 0x66
 8009f34:	7827      	ldrb	r7, [r4, #0]
 8009f36:	3167      	adds	r1, #103	@ 0x67
 8009f38:	043f      	lsls	r7, r7, #16
 8009f3a:	4317      	orrs	r7, r2
 8009f3c:	780a      	ldrb	r2, [r1, #0]
 8009f3e:	0612      	lsls	r2, r2, #24
 8009f40:	433a      	orrs	r2, r7
 8009f42:	4f27      	ldr	r7, [pc, #156]	@ (8009fe0 <Set_StartTargetTime_FromRTC+0xf4>)
 8009f44:	42ba      	cmp	r2, r7
 8009f46:	d908      	bls.n	8009f5a <Set_StartTargetTime_FromRTC+0x6e>
 8009f48:	2280      	movs	r2, #128	@ 0x80
 8009f4a:	4252      	negs	r2, r2
 8009f4c:	7032      	strb	r2, [r6, #0]
 8009f4e:	325e      	adds	r2, #94	@ 0x5e
 8009f50:	702a      	strb	r2, [r5, #0]
 8009f52:	324a      	adds	r2, #74	@ 0x4a
 8009f54:	7022      	strb	r2, [r4, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	700a      	strb	r2, [r1, #0]

    uint32_t target_epoch = now_epoch + current_settings.start_delay;
 8009f5a:	001e      	movs	r6, r3
 8009f5c:	001f      	movs	r7, r3
 8009f5e:	001d      	movs	r5, r3
 8009f60:	3665      	adds	r6, #101	@ 0x65
 8009f62:	7831      	ldrb	r1, [r6, #0]
 8009f64:	3764      	adds	r7, #100	@ 0x64
 8009f66:	783a      	ldrb	r2, [r7, #0]
 8009f68:	3566      	adds	r5, #102	@ 0x66
 8009f6a:	0209      	lsls	r1, r1, #8
 8009f6c:	4311      	orrs	r1, r2
 8009f6e:	782a      	ldrb	r2, [r5, #0]
//    current_settings.start_time_info = target_epoch;         // ★ 절대초 저장
    current_settings.start_target_seconds = target_epoch;    // (과거 호환; 의미를 '절대초'로 통일)
 8009f70:	33a1      	adds	r3, #161	@ 0xa1
    uint32_t target_epoch = now_epoch + current_settings.start_delay;
 8009f72:	0412      	lsls	r2, r2, #16
 8009f74:	430a      	orrs	r2, r1
 8009f76:	491b      	ldr	r1, [pc, #108]	@ (8009fe4 <Set_StartTargetTime_FromRTC+0xf8>)
 8009f78:	780c      	ldrb	r4, [r1, #0]
 8009f7a:	0624      	lsls	r4, r4, #24
 8009f7c:	4314      	orrs	r4, r2
 8009f7e:	1824      	adds	r4, r4, r0
    current_settings.start_target_seconds = target_epoch;    // (과거 호환; 의미를 '절대초'로 통일)
 8009f80:	0a22      	lsrs	r2, r4, #8
 8009f82:	705a      	strb	r2, [r3, #1]
 8009f84:	0c22      	lsrs	r2, r4, #16
 8009f86:	709a      	strb	r2, [r3, #2]
 8009f88:	0e22      	lsrs	r2, r4, #24
 8009f8a:	701c      	strb	r4, [r3, #0]
 8009f8c:	70da      	strb	r2, [r3, #3]
    Save_CurrentSettings();
 8009f8e:	f7ff fe45 	bl	8009c1c <Save_CurrentSettings>

    // 알람은 정확히 Delay 만큼 뒤로
    RTC_SetAlarmA_SecondsFromNow(current_settings.start_delay -3);
 8009f92:	7832      	ldrb	r2, [r6, #0]
 8009f94:	783b      	ldrb	r3, [r7, #0]
 8009f96:	0212      	lsls	r2, r2, #8
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	782b      	ldrb	r3, [r5, #0]
 8009f9c:	041b      	lsls	r3, r3, #16
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	4a10      	ldr	r2, [pc, #64]	@ (8009fe4 <Set_StartTargetTime_FromRTC+0xf8>)
 8009fa2:	7810      	ldrb	r0, [r2, #0]
 8009fa4:	0600      	lsls	r0, r0, #24
 8009fa6:	4318      	orrs	r0, r3
 8009fa8:	3803      	subs	r0, #3
 8009faa:	f7fb fc8f 	bl	80058cc <RTC_SetAlarmA_SecondsFromNow>
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009fae:	7832      	ldrb	r2, [r6, #0]
 8009fb0:	783b      	ldrb	r3, [r7, #0]
 8009fb2:	0212      	lsls	r2, r2, #8
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	782b      	ldrb	r3, [r5, #0]
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 8009fb8:	0021      	movs	r1, r4
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009fba:	041b      	lsls	r3, r3, #16
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	4a09      	ldr	r2, [pc, #36]	@ (8009fe4 <Set_StartTargetTime_FromRTC+0xf8>)
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 8009fc0:	4809      	ldr	r0, [pc, #36]	@ (8009fe8 <Set_StartTargetTime_FromRTC+0xfc>)
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009fc2:	7812      	ldrb	r2, [r2, #0]
 8009fc4:	0612      	lsls	r2, r2, #24
 8009fc6:	431a      	orrs	r2, r3
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 8009fc8:	3a03      	subs	r2, #3
 8009fca:	f010 f9f7 	bl	801a3bc <iprintf>
}
 8009fce:	b009      	add	sp, #36	@ 0x24
 8009fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd2:	46c0      	nop			@ (mov r8, r8)
 8009fd4:	200009f8 	.word	0x200009f8
 8009fd8:	20002bac 	.word	0x20002bac
 8009fdc:	20002c10 	.word	0x20002c10
 8009fe0:	0028de80 	.word	0x0028de80
 8009fe4:	20002c13 	.word	0x20002c13
 8009fe8:	0801ec49 	.word	0x0801ec49

08009fec <Set_ModeStatus>:
    }
}


void Set_ModeStatus(uint8_t mode_status)
{
 8009fec:	b510      	push	{r4, lr}
    current_settings.mode_status = mode_status;
 8009fee:	4b04      	ldr	r3, [pc, #16]	@ (800a000 <Set_ModeStatus+0x14>)
{
 8009ff0:	0001      	movs	r1, r0
    current_settings.mode_status = mode_status;
 8009ff2:	7018      	strb	r0, [r3, #0]
    printf("[MODE] Set mode_status = %u\r\n", mode_status);
 8009ff4:	4803      	ldr	r0, [pc, #12]	@ (800a004 <Set_ModeStatus+0x18>)
 8009ff6:	f010 f9e1 	bl	801a3bc <iprintf>
    Save_CurrentSettings();                 // 플래시에 저장
 8009ffa:	f7ff fe0f 	bl	8009c1c <Save_CurrentSettings>
}
 8009ffe:	bd10      	pop	{r4, pc}
 800a000:	20002c38 	.word	0x20002c38
 800a004:	0801ec7e 	.word	0x0801ec7e

0800a008 <Get_And_Print_Seconds_Left_ToStart>:
{
 800a008:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800a00a:	4e3a      	ldr	r6, [pc, #232]	@ (800a0f4 <Get_And_Print_Seconds_Left_ToStart+0xec>)
{
 800a00c:	b08b      	sub	sp, #44	@ 0x2c
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800a00e:	ac05      	add	r4, sp, #20
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 800a010:	ad04      	add	r5, sp, #16
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800a012:	0021      	movs	r1, r4
 800a014:	2200      	movs	r2, #0
 800a016:	0030      	movs	r0, r6
 800a018:	f008 f8de 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 800a01c:	0029      	movs	r1, r5
 800a01e:	2200      	movs	r2, #0
 800a020:	0030      	movs	r0, r6
 800a022:	f008 f90b 	bl	801223c <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 800a026:	7823      	ldrb	r3, [r4, #0]
 800a028:	78e8      	ldrb	r0, [r5, #3]
 800a02a:	7869      	ldrb	r1, [r5, #1]
 800a02c:	78aa      	ldrb	r2, [r5, #2]
    uint32_t target_epoch = current_settings.start_target_seconds;
 800a02e:	4d32      	ldr	r5, [pc, #200]	@ (800a0f8 <Get_And_Print_Seconds_Left_ToStart+0xf0>)
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 800a030:	9303      	str	r3, [sp, #12]
    uint32_t target_epoch = current_settings.start_target_seconds;
 800a032:	782d      	ldrb	r5, [r5, #0]
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 800a034:	7866      	ldrb	r6, [r4, #1]
    uint32_t target_epoch = current_settings.start_target_seconds;
 800a036:	46ac      	mov	ip, r5
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 800a038:	78a7      	ldrb	r7, [r4, #2]
    uint32_t target_epoch = current_settings.start_target_seconds;
 800a03a:	4c30      	ldr	r4, [pc, #192]	@ (800a0fc <Get_And_Print_Seconds_Left_ToStart+0xf4>)
 800a03c:	4663      	mov	r3, ip
 800a03e:	0025      	movs	r5, r4
 800a040:	35a2      	adds	r5, #162	@ 0xa2
 800a042:	782d      	ldrb	r5, [r5, #0]
 800a044:	022d      	lsls	r5, r5, #8
 800a046:	431d      	orrs	r5, r3
 800a048:	23a3      	movs	r3, #163	@ 0xa3
 800a04a:	469c      	mov	ip, r3
 800a04c:	44a4      	add	ip, r4
 800a04e:	4663      	mov	r3, ip
 800a050:	34a4      	adds	r4, #164	@ 0xa4
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	7824      	ldrb	r4, [r4, #0]
 800a056:	041b      	lsls	r3, r3, #16
 800a058:	431d      	orrs	r5, r3
 800a05a:	0624      	lsls	r4, r4, #24
 800a05c:	432c      	orrs	r4, r5
    if (target_epoch == 0) {
 800a05e:	4d28      	ldr	r5, [pc, #160]	@ (800a100 <Get_And_Print_Seconds_Left_ToStart+0xf8>)
 800a060:	d139      	bne.n	800a0d6 <Get_And_Print_Seconds_Left_ToStart+0xce>
            start_remaining = 0;
 800a062:	602c      	str	r4, [r5, #0]
            Clear_WakeupTime_Backup();
 800a064:	f7fc f832 	bl	80060cc <Clear_WakeupTime_Backup>
            AlarmDelay_InitStart_Flash();
 800a068:	f7ff fee8 	bl	8009e3c <AlarmDelay_InitStart_Flash>
            Set_ModeStatus(mode_internal_backup_start);
 800a06c:	2001      	movs	r0, #1
 800a06e:	f7ff ffbd 	bl	8009fec <Set_ModeStatus>
            Switch_Backup_reg(MODE_Start);
 800a072:	2003      	movs	r0, #3
 800a074:	f7fc f842 	bl	80060fc <Switch_Backup_reg>
            Interval_LCD_Count = 1;
 800a078:	2201      	movs	r2, #1
            First_Measure = 0;
 800a07a:	4b22      	ldr	r3, [pc, #136]	@ (800a104 <Get_And_Print_Seconds_Left_ToStart+0xfc>)
            printf("[Delay] no valid target (epoch empty, BKP invalid). Skip auto-correction.\r\n");
 800a07c:	4822      	ldr	r0, [pc, #136]	@ (800a108 <Get_And_Print_Seconds_Left_ToStart+0x100>)
            First_Measure = 0;
 800a07e:	701c      	strb	r4, [r3, #0]
            Tick_Save = 0;
 800a080:	4b22      	ldr	r3, [pc, #136]	@ (800a10c <Get_And_Print_Seconds_Left_ToStart+0x104>)
 800a082:	601c      	str	r4, [r3, #0]
            Interval_LCD_Count = 1;
 800a084:	4b22      	ldr	r3, [pc, #136]	@ (800a110 <Get_And_Print_Seconds_Left_ToStart+0x108>)
 800a086:	601a      	str	r2, [r3, #0]
            RTC_During_Wakeup = 0;
 800a088:	4b22      	ldr	r3, [pc, #136]	@ (800a114 <Get_And_Print_Seconds_Left_ToStart+0x10c>)
 800a08a:	701c      	strb	r4, [r3, #0]
            printf("[Delay] no valid target (epoch empty, BKP invalid). Skip auto-correction.\r\n");
 800a08c:	f010 fa06 	bl	801a49c <puts>
            printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 800a090:	4821      	ldr	r0, [pc, #132]	@ (800a118 <Get_And_Print_Seconds_Left_ToStart+0x110>)
 800a092:	f010 fa03 	bl	801a49c <puts>
    if (target_epoch <= now_epoch) start_remaining = 0;
 800a096:	2100      	movs	r1, #0
    printf("Start 예정까지 남은 시간: %lu초\r\n", (unsigned long)start_remaining);
 800a098:	4820      	ldr	r0, [pc, #128]	@ (800a11c <Get_And_Print_Seconds_Left_ToStart+0x114>)
 800a09a:	6029      	str	r1, [r5, #0]
 800a09c:	f010 f98e 	bl	801a3bc <iprintf>
    if (start_remaining == 0) {
 800a0a0:	682c      	ldr	r4, [r5, #0]
 800a0a2:	2c00      	cmp	r4, #0
 800a0a4:	d120      	bne.n	800a0e8 <Get_And_Print_Seconds_Left_ToStart+0xe0>
        AlarmDelay_InitStart_Flash();
 800a0a6:	f7ff fec9 	bl	8009e3c <AlarmDelay_InitStart_Flash>
        Set_ModeStatus(mode_internal_backup_start);
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	f7ff ff9e 	bl	8009fec <Set_ModeStatus>
        Clear_WakeupTime_Backup();
 800a0b0:	f7fc f80c 	bl	80060cc <Clear_WakeupTime_Backup>
        Switch_Backup_reg(MODE_Start);
 800a0b4:	2003      	movs	r0, #3
 800a0b6:	f7fc f821 	bl	80060fc <Switch_Backup_reg>
        Interval_LCD_Count = 1;
 800a0ba:	2201      	movs	r2, #1
        First_Measure = 0;
 800a0bc:	4b11      	ldr	r3, [pc, #68]	@ (800a104 <Get_And_Print_Seconds_Left_ToStart+0xfc>)
        printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 800a0be:	4816      	ldr	r0, [pc, #88]	@ (800a118 <Get_And_Print_Seconds_Left_ToStart+0x110>)
        First_Measure = 0;
 800a0c0:	701c      	strb	r4, [r3, #0]
        Tick_Save = 0;
 800a0c2:	4b12      	ldr	r3, [pc, #72]	@ (800a10c <Get_And_Print_Seconds_Left_ToStart+0x104>)
 800a0c4:	601c      	str	r4, [r3, #0]
        Interval_LCD_Count = 1;
 800a0c6:	4b12      	ldr	r3, [pc, #72]	@ (800a110 <Get_And_Print_Seconds_Left_ToStart+0x108>)
 800a0c8:	601a      	str	r2, [r3, #0]
        RTC_During_Wakeup = 0;
 800a0ca:	4b12      	ldr	r3, [pc, #72]	@ (800a114 <Get_And_Print_Seconds_Left_ToStart+0x10c>)
 800a0cc:	701c      	strb	r4, [r3, #0]
        printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 800a0ce:	f010 f9e5 	bl	801a49c <puts>
}
 800a0d2:	b00b      	add	sp, #44	@ 0x2c
 800a0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	9701      	str	r7, [sp, #4]
 800a0da:	9600      	str	r6, [sp, #0]
 800a0dc:	f7ff fce6 	bl	8009aac <ymd_to_epoch>
    if (target_epoch <= now_epoch) start_remaining = 0;
 800a0e0:	42a0      	cmp	r0, r4
 800a0e2:	d2d8      	bcs.n	800a096 <Get_And_Print_Seconds_Left_ToStart+0x8e>
    else                           start_remaining = target_epoch - now_epoch;
 800a0e4:	1a21      	subs	r1, r4, r0
 800a0e6:	e7d7      	b.n	800a098 <Get_And_Print_Seconds_Left_ToStart+0x90>
    } else if (start_remaining <= 7) {
 800a0e8:	2c07      	cmp	r4, #7
 800a0ea:	d8f2      	bhi.n	800a0d2 <Get_And_Print_Seconds_Left_ToStart+0xca>
        Tick_Save = 0;
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4b07      	ldr	r3, [pc, #28]	@ (800a10c <Get_And_Print_Seconds_Left_ToStart+0x104>)
 800a0f0:	601a      	str	r2, [r3, #0]
}
 800a0f2:	e7ee      	b.n	800a0d2 <Get_And_Print_Seconds_Left_ToStart+0xca>
 800a0f4:	200009f8 	.word	0x200009f8
 800a0f8:	20002c4d 	.word	0x20002c4d
 800a0fc:	20002bac 	.word	0x20002bac
 800a100:	200004f8 	.word	0x200004f8
 800a104:	20000534 	.word	0x20000534
 800a108:	0801ec9c 	.word	0x0801ec9c
 800a10c:	20000540 	.word	0x20000540
 800a110:	2000053c 	.word	0x2000053c
 800a114:	200004fc 	.word	0x200004fc
 800a118:	0801ece7 	.word	0x0801ece7
 800a11c:	0801ed14 	.word	0x0801ed14

0800a120 <SPI_FLASH_ReadStatus>:
static volatile uint8_t spi_dma_done = 0;
/**
  * @brief  Reads the flash status register. Uses blocking SPI for speed.
  */
 HAL_StatusTypeDef SPI_FLASH_ReadStatus(uint8_t *status)
{
 800a120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_StatusTypeDef ret;
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 800a122:	466b      	mov	r3, sp
    FLASH_CS_LOW();
 800a124:	26a0      	movs	r6, #160	@ 0xa0
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 800a126:	1ddc      	adds	r4, r3, #7
 800a128:	2305      	movs	r3, #5
    FLASH_CS_LOW();
 800a12a:	05f6      	lsls	r6, r6, #23
{
 800a12c:	0005      	movs	r5, r0
    FLASH_CS_LOW();
 800a12e:	2200      	movs	r2, #0
 800a130:	0030      	movs	r0, r6
 800a132:	2110      	movs	r1, #16
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 800a134:	7023      	strb	r3, [r4, #0]
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 800a136:	2701      	movs	r7, #1
    FLASH_CS_LOW();
 800a138:	f005 fc1e 	bl	800f978 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 800a13c:	480a      	ldr	r0, [pc, #40]	@ (800a168 <SPI_FLASH_ReadStatus+0x48>)
 800a13e:	0021      	movs	r1, r4
 800a140:	0004      	movs	r4, r0
 800a142:	427f      	negs	r7, r7
 800a144:	003b      	movs	r3, r7
 800a146:	2201      	movs	r2, #1
 800a148:	f008 faad 	bl	80126a6 <HAL_SPI_Transmit>
    ret = HAL_SPI_Receive(&hspi3, status, 1, HAL_MAX_DELAY);
 800a14c:	003b      	movs	r3, r7
 800a14e:	0029      	movs	r1, r5
 800a150:	2201      	movs	r2, #1
 800a152:	0020      	movs	r0, r4
 800a154:	f008 fc74 	bl	8012a40 <HAL_SPI_Receive>
 800a158:	0004      	movs	r4, r0
    FLASH_CS_HIGH();
 800a15a:	2201      	movs	r2, #1
 800a15c:	0030      	movs	r0, r6
 800a15e:	2110      	movs	r1, #16
 800a160:	f005 fc0a 	bl	800f978 <HAL_GPIO_WritePin>
    return ret;
}
 800a164:	0020      	movs	r0, r4
 800a166:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a168:	20000994 	.word	0x20000994

0800a16c <SPI_FLASH_WaitForWriteCompletion>:

/**
  * @brief  Waits for the current write or erase operation to complete.
  */
static HAL_StatusTypeDef SPI_FLASH_WaitForWriteCompletion(void)
{
 800a16c:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	466a      	mov	r2, sp
 800a172:	2401      	movs	r4, #1
 800a174:	71d3      	strb	r3, [r2, #7]
    HAL_StatusTypeDef ret;
    do
    {
        // This function is now much faster as SPI_FLASH_ReadStatus is blocking
        ret = SPI_FLASH_ReadStatus(&status);
 800a176:	466b      	mov	r3, sp
 800a178:	1dd8      	adds	r0, r3, #7
 800a17a:	f7ff ffd1 	bl	800a120 <SPI_FLASH_ReadStatus>
        if (ret != HAL_OK) {
 800a17e:	2800      	cmp	r0, #0
 800a180:	d105      	bne.n	800a18e <SPI_FLASH_WaitForWriteCompletion+0x22>
            return ret;
        }
        // Could add a small delay here in an RTOS environment
    } while ((status & 0x01) == 0x01); // Wait for WIP (Write-In-Progress) bit to clear
 800a182:	466b      	mov	r3, sp
 800a184:	79db      	ldrb	r3, [r3, #7]
 800a186:	0018      	movs	r0, r3
 800a188:	4020      	ands	r0, r4
 800a18a:	4223      	tst	r3, r4
 800a18c:	d1f3      	bne.n	800a176 <SPI_FLASH_WaitForWriteCompletion+0xa>

    return HAL_OK;
}
 800a18e:	bd16      	pop	{r1, r2, r4, pc}

0800a190 <SPI_FLASH_Init>:

void SPI_FLASH_Init(void)
{
    FLASH_CS_HIGH();
 800a190:	20a0      	movs	r0, #160	@ 0xa0
{
 800a192:	b510      	push	{r4, lr}
    FLASH_CS_HIGH();
 800a194:	2201      	movs	r2, #1
 800a196:	2110      	movs	r1, #16
 800a198:	05c0      	lsls	r0, r0, #23
 800a19a:	f005 fbed 	bl	800f978 <HAL_GPIO_WritePin>
}
 800a19e:	bd10      	pop	{r4, pc}

0800a1a0 <SPI_FLASH_WriteEnable>:

/**
  * @brief  Sends the Write Enable (WREN) command. Uses blocking SPI for speed.
  */
void SPI_FLASH_WriteEnable(void)
{
 800a1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 800a1a2:	466b      	mov	r3, sp
    FLASH_CS_LOW();
 800a1a4:	24a0      	movs	r4, #160	@ 0xa0
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 800a1a6:	1ddd      	adds	r5, r3, #7
 800a1a8:	2306      	movs	r3, #6
    FLASH_CS_LOW();
 800a1aa:	05e4      	lsls	r4, r4, #23
 800a1ac:	0020      	movs	r0, r4
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2110      	movs	r1, #16
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 800a1b2:	702b      	strb	r3, [r5, #0]
    FLASH_CS_LOW();
 800a1b4:	f005 fbe0 	bl	800f978 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	0029      	movs	r1, r5
 800a1bc:	425b      	negs	r3, r3
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4804      	ldr	r0, [pc, #16]	@ (800a1d4 <SPI_FLASH_WriteEnable+0x34>)
 800a1c2:	f008 fa70 	bl	80126a6 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	2110      	movs	r1, #16
 800a1ca:	0020      	movs	r0, r4
 800a1cc:	f005 fbd4 	bl	800f978 <HAL_GPIO_WritePin>
}
 800a1d0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800a1d2:	46c0      	nop			@ (mov r8, r8)
 800a1d4:	20000994 	.word	0x20000994

0800a1d8 <SPI_FLASH_EraseSector>:

/**
  * @brief  Erases a 4KB sector.
  */
HAL_StatusTypeDef SPI_FLASH_EraseSector(uint32_t addr)
{
 800a1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a1da:	2320      	movs	r3, #32
    SPI_FLASH_WriteEnable();
    FLASH_CS_LOW();
 800a1dc:	25a0      	movs	r5, #160	@ 0xa0
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a1de:	ac01      	add	r4, sp, #4
    FLASH_CS_LOW();
 800a1e0:	05ed      	lsls	r5, r5, #23
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a1e2:	7023      	strb	r3, [r4, #0]
 800a1e4:	0c03      	lsrs	r3, r0, #16
 800a1e6:	ba40      	rev16	r0, r0
 800a1e8:	7063      	strb	r3, [r4, #1]
 800a1ea:	8060      	strh	r0, [r4, #2]
    SPI_FLASH_WriteEnable();
 800a1ec:	f7ff ffd8 	bl	800a1a0 <SPI_FLASH_WriteEnable>
    FLASH_CS_LOW();
 800a1f0:	0028      	movs	r0, r5
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2110      	movs	r1, #16
 800a1f6:	f005 fbbf 	bl	800f978 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY); // Use blocking for small command
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	0021      	movs	r1, r4
 800a1fe:	425b      	negs	r3, r3
 800a200:	2204      	movs	r2, #4
 800a202:	4805      	ldr	r0, [pc, #20]	@ (800a218 <SPI_FLASH_EraseSector+0x40>)
 800a204:	f008 fa4f 	bl	80126a6 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 800a208:	0028      	movs	r0, r5
 800a20a:	2201      	movs	r2, #1
 800a20c:	2110      	movs	r1, #16
 800a20e:	f005 fbb3 	bl	800f978 <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 800a212:	f7ff ffab 	bl	800a16c <SPI_FLASH_WaitForWriteCompletion>
}
 800a216:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800a218:	20000994 	.word	0x20000994

0800a21c <SPI_FLASH_EraseBlock64k>:

/**
  * @brief  Erases a 64KB block.
  */
HAL_StatusTypeDef SPI_FLASH_EraseBlock64k(uint32_t addr)
{
 800a21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a21e:	23d8      	movs	r3, #216	@ 0xd8
    SPI_FLASH_WriteEnable();
    FLASH_CS_LOW();
 800a220:	25a0      	movs	r5, #160	@ 0xa0
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a222:	ac01      	add	r4, sp, #4
    FLASH_CS_LOW();
 800a224:	05ed      	lsls	r5, r5, #23
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a226:	7023      	strb	r3, [r4, #0]
 800a228:	0c03      	lsrs	r3, r0, #16
 800a22a:	ba40      	rev16	r0, r0
 800a22c:	7063      	strb	r3, [r4, #1]
 800a22e:	8060      	strh	r0, [r4, #2]
    SPI_FLASH_WriteEnable();
 800a230:	f7ff ffb6 	bl	800a1a0 <SPI_FLASH_WriteEnable>
    FLASH_CS_LOW();
 800a234:	0028      	movs	r0, r5
 800a236:	2200      	movs	r2, #0
 800a238:	2110      	movs	r1, #16
 800a23a:	f005 fb9d 	bl	800f978 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY); // Use blocking for small command
 800a23e:	2301      	movs	r3, #1
 800a240:	0021      	movs	r1, r4
 800a242:	425b      	negs	r3, r3
 800a244:	2204      	movs	r2, #4
 800a246:	4805      	ldr	r0, [pc, #20]	@ (800a25c <SPI_FLASH_EraseBlock64k+0x40>)
 800a248:	f008 fa2d 	bl	80126a6 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 800a24c:	0028      	movs	r0, r5
 800a24e:	2201      	movs	r2, #1
 800a250:	2110      	movs	r1, #16
 800a252:	f005 fb91 	bl	800f978 <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 800a256:	f7ff ff89 	bl	800a16c <SPI_FLASH_WaitForWriteCompletion>
}
 800a25a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800a25c:	20000994 	.word	0x20000994

0800a260 <SPI_FLASH_PageProgram>:
  * Uses blocking SPI for the command and DMA for the data payload.
  */
HAL_StatusTypeDef SPI_FLASH_PageProgram(uint32_t addr, uint8_t *buf, uint32_t len)
{
    HAL_StatusTypeDef ret;
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a260:	2302      	movs	r3, #2
{
 800a262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a264:	ad01      	add	r5, sp, #4
 800a266:	702b      	strb	r3, [r5, #0]
 800a268:	0c03      	lsrs	r3, r0, #16
 800a26a:	ba40      	rev16	r0, r0
 800a26c:	706b      	strb	r3, [r5, #1]
{
 800a26e:	000e      	movs	r6, r1
 800a270:	0014      	movs	r4, r2
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a272:	8068      	strh	r0, [r5, #2]

    SPI_FLASH_WriteEnable();
 800a274:	f7ff ff94 	bl	800a1a0 <SPI_FLASH_WriteEnable>

    FLASH_CS_LOW();
 800a278:	20a0      	movs	r0, #160	@ 0xa0
 800a27a:	2200      	movs	r2, #0
 800a27c:	2110      	movs	r1, #16
 800a27e:	05c0      	lsls	r0, r0, #23
 800a280:	f005 fb7a 	bl	800f978 <HAL_GPIO_WritePin>

    // 1. Transmit command using blocking SPI (it's small and fast)
    if (HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY) != HAL_OK)
 800a284:	2301      	movs	r3, #1
 800a286:	4f17      	ldr	r7, [pc, #92]	@ (800a2e4 <SPI_FLASH_PageProgram+0x84>)
 800a288:	2204      	movs	r2, #4
 800a28a:	0029      	movs	r1, r5
 800a28c:	0038      	movs	r0, r7
 800a28e:	425b      	negs	r3, r3
 800a290:	f008 fa09 	bl	80126a6 <HAL_SPI_Transmit>
 800a294:	2800      	cmp	r0, #0
 800a296:	d008      	beq.n	800a2aa <SPI_FLASH_PageProgram+0x4a>
    {
        FLASH_CS_HIGH();
 800a298:	20a0      	movs	r0, #160	@ 0xa0
 800a29a:	2201      	movs	r2, #1
 800a29c:	2110      	movs	r1, #16
 800a29e:	05c0      	lsls	r0, r0, #23
 800a2a0:	f005 fb6a 	bl	800f978 <HAL_GPIO_WritePin>
        return HAL_ERROR;
 800a2a4:	2401      	movs	r4, #1

    FLASH_CS_HIGH();

    // 4. Wait for the flash chip's internal write process to complete
    return SPI_FLASH_WaitForWriteCompletion();
}
 800a2a6:	0020      	movs	r0, r4
 800a2a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    spi_dma_done = 0;
 800a2aa:	4d0f      	ldr	r5, [pc, #60]	@ (800a2e8 <SPI_FLASH_PageProgram+0x88>)
    ret = HAL_SPI_Transmit_DMA(&hspi3, buf, len);
 800a2ac:	b2a2      	uxth	r2, r4
    spi_dma_done = 0;
 800a2ae:	7028      	strb	r0, [r5, #0]
    ret = HAL_SPI_Transmit_DMA(&hspi3, buf, len);
 800a2b0:	0031      	movs	r1, r6
 800a2b2:	0038      	movs	r0, r7
 800a2b4:	f008 fc84 	bl	8012bc0 <HAL_SPI_Transmit_DMA>
 800a2b8:	1e04      	subs	r4, r0, #0
    if (ret != HAL_OK)
 800a2ba:	d006      	beq.n	800a2ca <SPI_FLASH_PageProgram+0x6a>
        FLASH_CS_HIGH();
 800a2bc:	20a0      	movs	r0, #160	@ 0xa0
 800a2be:	2201      	movs	r2, #1
 800a2c0:	2110      	movs	r1, #16
 800a2c2:	05c0      	lsls	r0, r0, #23
 800a2c4:	f005 fb58 	bl	800f978 <HAL_GPIO_WritePin>
        return ret;
 800a2c8:	e7ed      	b.n	800a2a6 <SPI_FLASH_PageProgram+0x46>
    while (spi_dma_done == 0) {}
 800a2ca:	782b      	ldrb	r3, [r5, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0fc      	beq.n	800a2ca <SPI_FLASH_PageProgram+0x6a>
    FLASH_CS_HIGH();
 800a2d0:	20a0      	movs	r0, #160	@ 0xa0
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	2110      	movs	r1, #16
 800a2d6:	05c0      	lsls	r0, r0, #23
 800a2d8:	f005 fb4e 	bl	800f978 <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 800a2dc:	f7ff ff46 	bl	800a16c <SPI_FLASH_WaitForWriteCompletion>
 800a2e0:	0004      	movs	r4, r0
 800a2e2:	e7e0      	b.n	800a2a6 <SPI_FLASH_PageProgram+0x46>
 800a2e4:	20000994 	.word	0x20000994
 800a2e8:	20002c5b 	.word	0x20002c5b

0800a2ec <SPI_FLASH_ReadData>:
  * Uses blocking SPI for the command and DMA for the data payload.
  */
HAL_StatusTypeDef SPI_FLASH_ReadData(uint32_t addr, uint8_t *buf, uint32_t len)
{
    HAL_StatusTypeDef ret;
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a2ec:	2303      	movs	r3, #3
{
 800a2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a2f0:	ad01      	add	r5, sp, #4
 800a2f2:	702b      	strb	r3, [r5, #0]
 800a2f4:	0c03      	lsrs	r3, r0, #16
 800a2f6:	ba40      	rev16	r0, r0
 800a2f8:	8068      	strh	r0, [r5, #2]

    FLASH_CS_LOW();
 800a2fa:	20a0      	movs	r0, #160	@ 0xa0
{
 800a2fc:	000e      	movs	r6, r1
    FLASH_CS_LOW();
 800a2fe:	05c0      	lsls	r0, r0, #23
 800a300:	2110      	movs	r1, #16
{
 800a302:	0014      	movs	r4, r2
    FLASH_CS_LOW();
 800a304:	2200      	movs	r2, #0
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a306:	706b      	strb	r3, [r5, #1]
    FLASH_CS_LOW();
 800a308:	f005 fb36 	bl	800f978 <HAL_GPIO_WritePin>

    // 1. Transmit command using blocking SPI
    if (HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY) != HAL_OK)
 800a30c:	2301      	movs	r3, #1
 800a30e:	4f13      	ldr	r7, [pc, #76]	@ (800a35c <SPI_FLASH_ReadData+0x70>)
 800a310:	2204      	movs	r2, #4
 800a312:	0029      	movs	r1, r5
 800a314:	0038      	movs	r0, r7
 800a316:	425b      	negs	r3, r3
 800a318:	f008 f9c5 	bl	80126a6 <HAL_SPI_Transmit>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d008      	beq.n	800a332 <SPI_FLASH_ReadData+0x46>
    {
        FLASH_CS_HIGH();
 800a320:	20a0      	movs	r0, #160	@ 0xa0
 800a322:	2201      	movs	r2, #1
 800a324:	2110      	movs	r1, #16
 800a326:	05c0      	lsls	r0, r0, #23
 800a328:	f005 fb26 	bl	800f978 <HAL_GPIO_WritePin>
        return HAL_ERROR;
 800a32c:	2401      	movs	r4, #1
    while (spi_dma_done == 0) {}

    FLASH_CS_HIGH();

    return ret;
}
 800a32e:	0020      	movs	r0, r4
 800a330:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    spi_dma_done = 0;
 800a332:	4d0b      	ldr	r5, [pc, #44]	@ (800a360 <SPI_FLASH_ReadData+0x74>)
    ret = HAL_SPI_Receive_DMA(&hspi3, buf, len);
 800a334:	b2a2      	uxth	r2, r4
    spi_dma_done = 0;
 800a336:	7028      	strb	r0, [r5, #0]
    ret = HAL_SPI_Receive_DMA(&hspi3, buf, len);
 800a338:	0031      	movs	r1, r6
 800a33a:	0038      	movs	r0, r7
 800a33c:	f008 fd9e 	bl	8012e7c <HAL_SPI_Receive_DMA>
 800a340:	1e04      	subs	r4, r0, #0
     if (ret != HAL_OK)
 800a342:	d006      	beq.n	800a352 <SPI_FLASH_ReadData+0x66>
    FLASH_CS_HIGH();
 800a344:	20a0      	movs	r0, #160	@ 0xa0
 800a346:	2201      	movs	r2, #1
 800a348:	2110      	movs	r1, #16
 800a34a:	05c0      	lsls	r0, r0, #23
 800a34c:	f005 fb14 	bl	800f978 <HAL_GPIO_WritePin>
    return ret;
 800a350:	e7ed      	b.n	800a32e <SPI_FLASH_ReadData+0x42>
    while (spi_dma_done == 0) {}
 800a352:	782b      	ldrb	r3, [r5, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0fc      	beq.n	800a352 <SPI_FLASH_ReadData+0x66>
 800a358:	e7f4      	b.n	800a344 <SPI_FLASH_ReadData+0x58>
 800a35a:	46c0      	nop			@ (mov r8, r8)
 800a35c:	20000994 	.word	0x20000994
 800a360:	20002c5b 	.word	0x20002c5b

0800a364 <HAL_SPI_TxCpltCallback>:

/* --- HAL DMA Callback Functions --- */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (hspi->Instance == SPI3)
 800a364:	4b03      	ldr	r3, [pc, #12]	@ (800a374 <HAL_SPI_TxCpltCallback+0x10>)
 800a366:	6802      	ldr	r2, [r0, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d102      	bne.n	800a372 <HAL_SPI_TxCpltCallback+0xe>
  {
    spi_dma_done = 1;
 800a36c:	2201      	movs	r2, #1
 800a36e:	4b02      	ldr	r3, [pc, #8]	@ (800a378 <HAL_SPI_TxCpltCallback+0x14>)
 800a370:	701a      	strb	r2, [r3, #0]
  }
}
 800a372:	4770      	bx	lr
 800a374:	40003c00 	.word	0x40003c00
 800a378:	20002c5b 	.word	0x20002c5b

0800a37c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
 800a37c:	b510      	push	{r4, lr}
 800a37e:	f7ff fff1 	bl	800a364 <HAL_SPI_TxCpltCallback>
 800a382:	bd10      	pop	{r4, pc}

0800a384 <HAL_SPI_ErrorCallback>:
  * @brief  SPI error callback.
  * @param  hspi: SPI handle
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a384:	b510      	push	{r4, lr}
    // Handle or log the error
    Error_Handler();
 800a386:	f7fe fa35 	bl	80087f4 <Error_Handler>
}
 800a38a:	bd10      	pop	{r4, pc}

0800a38c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a38c:	b507      	push	{r0, r1, r2, lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a38e:	2180      	movs	r1, #128	@ 0x80
 800a390:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <HAL_MspInit+0x38>)
 800a392:	0549      	lsls	r1, r1, #21
 800a394:	6d9a      	ldr	r2, [r3, #88]	@ 0x58

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a396:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800a398:	430a      	orrs	r2, r1
 800a39a:	659a      	str	r2, [r3, #88]	@ 0x58
 800a39c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a39e:	400a      	ands	r2, r1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3a0:	2101      	movs	r1, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800a3a2:	9200      	str	r2, [sp, #0]
 800a3a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	661a      	str	r2, [r3, #96]	@ 0x60
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a3ac:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3b0:	400b      	ands	r3, r1
 800a3b2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a3b4:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a3b8:	f004 ff1c 	bl	800f1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800a3bc:	2004      	movs	r0, #4
 800a3be:	f004 ff43 	bl	800f248 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a3c2:	bd07      	pop	{r0, r1, r2, pc}
 800a3c4:	40021000 	.word	0x40021000

0800a3c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	0004      	movs	r4, r0
 800a3cc:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ce:	2214      	movs	r2, #20
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	a802      	add	r0, sp, #8
 800a3d4:	f010 f9be 	bl	801a754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a3d8:	2244      	movs	r2, #68	@ 0x44
 800a3da:	2100      	movs	r1, #0
 800a3dc:	a807      	add	r0, sp, #28
 800a3de:	f010 f9b9 	bl	801a754 <memset>
  if(hadc->Instance==ADC1)
 800a3e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a44c <HAL_ADC_MspInit+0x84>)
 800a3e4:	6822      	ldr	r2, [r4, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d12d      	bne.n	800a446 <HAL_ADC_MspInit+0x7e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800a3ea:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3ec:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800a3ee:	01db      	lsls	r3, r3, #7
 800a3f0:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3f2:	f007 f8ff 	bl	80115f4 <HAL_RCCEx_PeriphCLKConfig>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d001      	beq.n	800a3fe <HAL_ADC_MspInit+0x36>
    {
      Error_Handler();
 800a3fa:	f7fe f9fb 	bl	80087f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800a3fe:	2180      	movs	r1, #128	@ 0x80
 800a400:	4b13      	ldr	r3, [pc, #76]	@ (800a450 <HAL_ADC_MspInit+0x88>)
 800a402:	0349      	lsls	r1, r1, #13
 800a404:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a406:	2400      	movs	r4, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 800a408:	430a      	orrs	r2, r1
 800a40a:	661a      	str	r2, [r3, #96]	@ 0x60
 800a40c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a40e:	4811      	ldr	r0, [pc, #68]	@ (800a454 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800a410:	400a      	ands	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a412:	2104      	movs	r1, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 800a414:	9200      	str	r2, [sp, #0]
 800a416:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a418:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a41a:	430a      	orrs	r2, r1
 800a41c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a41e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a420:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a422:	400b      	ands	r3, r1
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a428:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a42a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a42c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a42e:	3b02      	subs	r3, #2
 800a430:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a432:	f005 f95d 	bl	800f6f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 800a436:	200c      	movs	r0, #12
 800a438:	0022      	movs	r2, r4
 800a43a:	0021      	movs	r1, r4
 800a43c:	f004 feda 	bl	800f1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 800a440:	200c      	movs	r0, #12
 800a442:	f004 ff01 	bl	800f248 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800a446:	b018      	add	sp, #96	@ 0x60
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	46c0      	nop			@ (mov r8, r8)
 800a44c:	40012400 	.word	0x40012400
 800a450:	40021000 	.word	0x40021000
 800a454:	50000800 	.word	0x50000800

0800a458 <HAL_ADC_MspDeInit>:
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 800a458:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <HAL_ADC_MspDeInit+0x20>)
 800a45a:	6802      	ldr	r2, [r0, #0]
{
 800a45c:	b510      	push	{r4, lr}
  if(hadc->Instance==ADC1)
 800a45e:	429a      	cmp	r2, r3
 800a460:	d108      	bne.n	800a474 <HAL_ADC_MspDeInit+0x1c>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800a462:	4a06      	ldr	r2, [pc, #24]	@ (800a47c <HAL_ADC_MspDeInit+0x24>)
 800a464:	4906      	ldr	r1, [pc, #24]	@ (800a480 <HAL_ADC_MspDeInit+0x28>)
 800a466:	6e13      	ldr	r3, [r2, #96]	@ 0x60

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2);
 800a468:	4806      	ldr	r0, [pc, #24]	@ (800a484 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC_CLK_DISABLE();
 800a46a:	400b      	ands	r3, r1
 800a46c:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2);
 800a46e:	2105      	movs	r1, #5
 800a470:	f005 f9fc 	bl	800f86c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800a474:	bd10      	pop	{r4, pc}
 800a476:	46c0      	nop			@ (mov r8, r8)
 800a478:	40012400 	.word	0x40012400
 800a47c:	40021000 	.word	0x40021000
 800a480:	ffefffff 	.word	0xffefffff
 800a484:	50000800 	.word	0x50000800

0800a488 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800a488:	b530      	push	{r4, r5, lr}
 800a48a:	0004      	movs	r4, r0
 800a48c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a48e:	2214      	movs	r2, #20
 800a490:	2100      	movs	r1, #0
 800a492:	a803      	add	r0, sp, #12
 800a494:	f010 f95e 	bl	801a754 <memset>
  if(hcomp->Instance==COMP1)
 800a498:	4b1b      	ldr	r3, [pc, #108]	@ (800a508 <HAL_COMP_MspInit+0x80>)
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d130      	bne.n	800a502 <HAL_COMP_MspInit+0x7a>
  {
    /* USER CODE BEGIN COMP1_MspInit 0 */

    /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP_CLK_ENABLE();
 800a4a0:	2101      	movs	r1, #1

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4a2:	2404      	movs	r4, #4
    __HAL_RCC_COMP_CLK_ENABLE();
 800a4a4:	4b19      	ldr	r3, [pc, #100]	@ (800a50c <HAL_COMP_MspInit+0x84>)
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4a6:	2503      	movs	r5, #3
    __HAL_RCC_COMP_CLK_ENABLE();
 800a4a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4aa:	4819      	ldr	r0, [pc, #100]	@ (800a510 <HAL_COMP_MspInit+0x88>)
    __HAL_RCC_COMP_CLK_ENABLE();
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a4b2:	400a      	ands	r2, r1
 800a4b4:	9200      	str	r2, [sp, #0]
 800a4b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4ba:	1849      	adds	r1, r1, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4bc:	4322      	orrs	r2, r4
 800a4be:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a4c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4c2:	4022      	ands	r2, r4
 800a4c4:	9201      	str	r2, [sp, #4]
 800a4c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a4ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4d0:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4d2:	400b      	ands	r3, r1
 800a4d4:	9302      	str	r3, [sp, #8]
 800a4d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a4d8:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4da:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a4dc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4de:	f005 f907 	bl	800f6f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a4e2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e4:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4e6:	480b      	ldr	r0, [pc, #44]	@ (800a514 <HAL_COMP_MspInit+0x8c>)
 800a4e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4ea:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ec:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4ee:	f005 f8ff 	bl	800f6f0 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 800a4f2:	200c      	movs	r0, #12
 800a4f4:	0022      	movs	r2, r4
 800a4f6:	0021      	movs	r1, r4
 800a4f8:	f004 fe7c 	bl	800f1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 800a4fc:	200c      	movs	r0, #12
 800a4fe:	f004 fea3 	bl	800f248 <HAL_NVIC_EnableIRQ>

    /* USER CODE END COMP1_MspInit 1 */

  }

}
 800a502:	b009      	add	sp, #36	@ 0x24
 800a504:	bd30      	pop	{r4, r5, pc}
 800a506:	46c0      	nop			@ (mov r8, r8)
 800a508:	40010200 	.word	0x40010200
 800a50c:	40021000 	.word	0x40021000
 800a510:	50000800 	.word	0x50000800
 800a514:	50000400 	.word	0x50000400

0800a518 <HAL_COMP_MspDeInit>:
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspDeInit(COMP_HandleTypeDef* hcomp)
{
  if(hcomp->Instance==COMP1)
 800a518:	4b09      	ldr	r3, [pc, #36]	@ (800a540 <HAL_COMP_MspDeInit+0x28>)
 800a51a:	6802      	ldr	r2, [r0, #0]
{
 800a51c:	b510      	push	{r4, lr}
  if(hcomp->Instance==COMP1)
 800a51e:	429a      	cmp	r2, r3
 800a520:	d10c      	bne.n	800a53c <HAL_COMP_MspDeInit+0x24>
  {
    /* USER CODE BEGIN COMP1_MspDeInit 0 */

    /* USER CODE END COMP1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_COMP_CLK_DISABLE();
 800a522:	2101      	movs	r1, #1
 800a524:	4a07      	ldr	r2, [pc, #28]	@ (800a544 <HAL_COMP_MspDeInit+0x2c>)

    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800a526:	4808      	ldr	r0, [pc, #32]	@ (800a548 <HAL_COMP_MspDeInit+0x30>)
    __HAL_RCC_COMP_CLK_DISABLE();
 800a528:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800a52a:	438b      	bics	r3, r1
 800a52c:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800a52e:	310f      	adds	r1, #15
 800a530:	f005 f99c 	bl	800f86c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 800a534:	2104      	movs	r1, #4
 800a536:	4805      	ldr	r0, [pc, #20]	@ (800a54c <HAL_COMP_MspDeInit+0x34>)
 800a538:	f005 f998 	bl	800f86c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN COMP1_MspDeInit 1 */

    /* USER CODE END COMP1_MspDeInit 1 */
  }

}
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	46c0      	nop			@ (mov r8, r8)
 800a540:	40010200 	.word	0x40010200
 800a544:	40021000 	.word	0x40021000
 800a548:	50000800 	.word	0x50000800
 800a54c:	50000400 	.word	0x50000400

0800a550 <HAL_LCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	0004      	movs	r4, r0
 800a554:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a556:	2214      	movs	r2, #20
 800a558:	2100      	movs	r1, #0
 800a55a:	a804      	add	r0, sp, #16
 800a55c:	f010 f8fa 	bl	801a754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a560:	2244      	movs	r2, #68	@ 0x44
 800a562:	2100      	movs	r1, #0
 800a564:	a809      	add	r0, sp, #36	@ 0x24
 800a566:	f010 f8f5 	bl	801a754 <memset>
  if(hlcd->Instance==LCD)
 800a56a:	4b2b      	ldr	r3, [pc, #172]	@ (800a618 <HAL_LCD_MspInit+0xc8>)
 800a56c:	6822      	ldr	r2, [r4, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d150      	bne.n	800a614 <HAL_LCD_MspInit+0xc4>

    /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a572:	2380      	movs	r3, #128	@ 0x80
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a578:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a57a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	9319      	str	r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a580:	f007 f838 	bl	80115f4 <HAL_RCCEx_PeriphCLKConfig>
 800a584:	2800      	cmp	r0, #0
 800a586:	d001      	beq.n	800a58c <HAL_LCD_MspInit+0x3c>
    {
      Error_Handler();
 800a588:	f7fe f934 	bl	80087f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800a58c:	2180      	movs	r1, #128	@ 0x80

    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a58e:	2502      	movs	r5, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 800a590:	4b22      	ldr	r3, [pc, #136]	@ (800a61c <HAL_LCD_MspInit+0xcc>)
 800a592:	0089      	lsls	r1, r1, #2
 800a594:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a596:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a598:	260b      	movs	r6, #11
    __HAL_RCC_LCD_CLK_ENABLE();
 800a59a:	430a      	orrs	r2, r1
 800a59c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a59e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5a0:	481f      	ldr	r0, [pc, #124]	@ (800a620 <HAL_LCD_MspInit+0xd0>)
    __HAL_RCC_LCD_CLK_ENABLE();
 800a5a2:	400a      	ands	r2, r1
 800a5a4:	9200      	str	r2, [sp, #0]
 800a5a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5a8:	39fd      	subs	r1, #253	@ 0xfd
 800a5aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5ac:	39ff      	subs	r1, #255	@ 0xff
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a5b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5b4:	400a      	ands	r2, r1
 800a5b6:	9201      	str	r2, [sp, #4]
 800a5b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5bc:	3903      	subs	r1, #3
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a5c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5c4:	400a      	ands	r2, r1
 800a5c6:	9202      	str	r2, [sp, #8]
 800a5c8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5cc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5ce:	432a      	orrs	r2, r5
 800a5d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a5d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d4:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5d6:	402b      	ands	r3, r5
 800a5d8:	9303      	str	r3, [sp, #12]
 800a5da:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a5dc:	4b11      	ldr	r3, [pc, #68]	@ (800a624 <HAL_LCD_MspInit+0xd4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5de:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a5e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a5e4:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5e6:	f005 f883 	bl	800f6f0 <HAL_GPIO_Init>
                          |GPIO_PIN_10|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ea:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800a5ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a628 <HAL_LCD_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ee:	a904      	add	r1, sp, #16
 800a5f0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800a5f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5f4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5f8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a5fa:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5fc:	f005 f878 	bl	800f6f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800a600:	4b0a      	ldr	r3, [pc, #40]	@ (800a62c <HAL_LCD_MspInit+0xdc>)
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a602:	480b      	ldr	r0, [pc, #44]	@ (800a630 <HAL_LCD_MspInit+0xe0>)
 800a604:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800a606:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a608:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a60a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a60c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a60e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a610:	f005 f86e 	bl	800f6f0 <HAL_GPIO_Init>

    /* USER CODE END LCD_MspInit 1 */

  }

}
 800a614:	b01a      	add	sp, #104	@ 0x68
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	40002400 	.word	0x40002400
 800a61c:	40021000 	.word	0x40021000
 800a620:	50000800 	.word	0x50000800
 800a624:	000003ea 	.word	0x000003ea
 800a628:	000087ee 	.word	0x000087ee
 800a62c:	0000fabb 	.word	0x0000fabb
 800a630:	50000400 	.word	0x50000400

0800a634 <HAL_LCD_MspDeInit>:
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspDeInit(LCD_HandleTypeDef* hlcd)
{
  if(hlcd->Instance==LCD)
 800a634:	4b0b      	ldr	r3, [pc, #44]	@ (800a664 <HAL_LCD_MspDeInit+0x30>)
 800a636:	6802      	ldr	r2, [r0, #0]
{
 800a638:	b510      	push	{r4, lr}
  if(hlcd->Instance==LCD)
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d111      	bne.n	800a662 <HAL_LCD_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN LCD_MspDeInit 0 */

    /* USER CODE END LCD_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LCD_CLK_DISABLE();
 800a63e:	4a0a      	ldr	r2, [pc, #40]	@ (800a668 <HAL_LCD_MspDeInit+0x34>)
 800a640:	490a      	ldr	r1, [pc, #40]	@ (800a66c <HAL_LCD_MspDeInit+0x38>)
 800a642:	6d93      	ldr	r3, [r2, #88]	@ 0x58
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB7     ------> LCD_SEG21
    PB9     ------> LCD_COM3
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a644:	480a      	ldr	r0, [pc, #40]	@ (800a670 <HAL_LCD_MspDeInit+0x3c>)
    __HAL_RCC_LCD_CLK_DISABLE();
 800a646:	400b      	ands	r3, r1
 800a648:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a64a:	490a      	ldr	r1, [pc, #40]	@ (800a674 <HAL_LCD_MspDeInit+0x40>)
 800a64c:	f005 f90e 	bl	800f86c <HAL_GPIO_DeInit>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800a650:	20a0      	movs	r0, #160	@ 0xa0
 800a652:	4909      	ldr	r1, [pc, #36]	@ (800a678 <HAL_LCD_MspDeInit+0x44>)
 800a654:	05c0      	lsls	r0, r0, #23
 800a656:	f005 f909 	bl	800f86c <HAL_GPIO_DeInit>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_15);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800a65a:	4908      	ldr	r1, [pc, #32]	@ (800a67c <HAL_LCD_MspDeInit+0x48>)
 800a65c:	4808      	ldr	r0, [pc, #32]	@ (800a680 <HAL_LCD_MspDeInit+0x4c>)
 800a65e:	f005 f905 	bl	800f86c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN LCD_MspDeInit 1 */

    /* USER CODE END LCD_MspDeInit 1 */
  }

}
 800a662:	bd10      	pop	{r4, pc}
 800a664:	40002400 	.word	0x40002400
 800a668:	40021000 	.word	0x40021000
 800a66c:	fffffdff 	.word	0xfffffdff
 800a670:	50000800 	.word	0x50000800
 800a674:	000003ea 	.word	0x000003ea
 800a678:	000087ee 	.word	0x000087ee
 800a67c:	0000fabb 	.word	0x0000fabb
 800a680:	50000400 	.word	0x50000400

0800a684 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800a684:	b510      	push	{r4, lr}
 800a686:	0004      	movs	r4, r0
 800a688:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a68a:	2244      	movs	r2, #68	@ 0x44
 800a68c:	2100      	movs	r1, #0
 800a68e:	a801      	add	r0, sp, #4
 800a690:	f010 f860 	bl	801a754 <memset>
  if(hlptim->Instance==LPTIM1)
 800a694:	4b12      	ldr	r3, [pc, #72]	@ (800a6e0 <HAL_LPTIM_MspInit+0x5c>)
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d11e      	bne.n	800a6da <HAL_LPTIM_MspInit+0x56>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800a69c:	2380      	movs	r3, #128	@ 0x80
 800a69e:	9301      	str	r3, [sp, #4]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800a6a0:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a6a2:	a801      	add	r0, sp, #4
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800a6a4:	031b      	lsls	r3, r3, #12
 800a6a6:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a6a8:	f006 ffa4 	bl	80115f4 <HAL_RCCEx_PeriphCLKConfig>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d001      	beq.n	800a6b4 <HAL_LPTIM_MspInit+0x30>
    {
      Error_Handler();
 800a6b0:	f7fe f8a0 	bl	80087f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a6b4:	2280      	movs	r2, #128	@ 0x80
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e4 <HAL_LPTIM_MspInit+0x60>)
 800a6b8:	0612      	lsls	r2, r2, #24
 800a6ba:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a6bc:	2011      	movs	r0, #17
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a6c2:	2200      	movs	r2, #0
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a6c6:	0011      	movs	r1, r2
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a6c8:	0fdb      	lsrs	r3, r3, #31
 800a6ca:	07db      	lsls	r3, r3, #31
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a6d0:	f004 fd90 	bl	800f1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800a6d4:	2011      	movs	r0, #17
 800a6d6:	f004 fdb7 	bl	800f248 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 800a6da:	b012      	add	sp, #72	@ 0x48
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	46c0      	nop			@ (mov r8, r8)
 800a6e0:	40007c00 	.word	0x40007c00
 800a6e4:	40021000 	.word	0x40021000

0800a6e8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	0004      	movs	r4, r0
 800a6ec:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a6ee:	2244      	movs	r2, #68	@ 0x44
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	a801      	add	r0, sp, #4
 800a6f4:	f010 f82e 	bl	801a754 <memset>
  if(hrtc->Instance==RTC)
 800a6f8:	4b14      	ldr	r3, [pc, #80]	@ (800a74c <HAL_RTC_MspInit+0x64>)
 800a6fa:	6822      	ldr	r2, [r4, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d122      	bne.n	800a746 <HAL_RTC_MspInit+0x5e>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a700:	2480      	movs	r4, #128	@ 0x80
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a702:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a704:	0224      	lsls	r4, r4, #8
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a706:	005b      	lsls	r3, r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a708:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a70a:	9401      	str	r4, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a70c:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a70e:	f006 ff71 	bl	80115f4 <HAL_RCCEx_PeriphCLKConfig>
 800a712:	2800      	cmp	r0, #0
 800a714:	d001      	beq.n	800a71a <HAL_RTC_MspInit+0x32>
    {
      Error_Handler();
 800a716:	f7fe f86d 	bl	80087f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a71a:	4a0d      	ldr	r2, [pc, #52]	@ (800a750 <HAL_RTC_MspInit+0x68>)
 800a71c:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <HAL_RTC_MspInit+0x6c>)
 800a71e:	6811      	ldr	r1, [r2, #0]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a720:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 800a722:	430c      	orrs	r4, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a724:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_RTC_ENABLE();
 800a726:	6014      	str	r4, [r2, #0]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a728:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a72a:	00c9      	lsls	r1, r1, #3
 800a72c:	430a      	orrs	r2, r1
 800a72e:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a730:	2200      	movs	r2, #0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a734:	400b      	ands	r3, r1
 800a736:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a738:	0011      	movs	r1, r2
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a73a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a73c:	f004 fd5a 	bl	800f1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800a740:	2002      	movs	r0, #2
 800a742:	f004 fd81 	bl	800f248 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800a746:	b012      	add	sp, #72	@ 0x48
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	46c0      	nop			@ (mov r8, r8)
 800a74c:	40002800 	.word	0x40002800
 800a750:	40021090 	.word	0x40021090
 800a754:	40021000 	.word	0x40021000

0800a758 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a758:	b530      	push	{r4, r5, lr}
 800a75a:	0005      	movs	r5, r0
 800a75c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a75e:	2214      	movs	r2, #20
 800a760:	2100      	movs	r1, #0
 800a762:	a803      	add	r0, sp, #12
 800a764:	f00f fff6 	bl	801a754 <memset>
  if(hspi->Instance==SPI3)
 800a768:	4b28      	ldr	r3, [pc, #160]	@ (800a80c <HAL_SPI_MspInit+0xb4>)
 800a76a:	682a      	ldr	r2, [r5, #0]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d14b      	bne.n	800a808 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a770:	2180      	movs	r1, #128	@ 0x80
 800a772:	4b27      	ldr	r3, [pc, #156]	@ (800a810 <HAL_SPI_MspInit+0xb8>)
 800a774:	0209      	lsls	r1, r1, #8
 800a776:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a778:	4826      	ldr	r0, [pc, #152]	@ (800a814 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a77a:	430a      	orrs	r2, r1
 800a77c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a77e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a780:	400a      	ands	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a782:	2104      	movs	r1, #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a784:	9201      	str	r2, [sp, #4]
 800a786:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a788:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a78a:	430a      	orrs	r2, r1
 800a78c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a78e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a790:	400b      	ands	r3, r1
 800a792:	9302      	str	r3, [sp, #8]
 800a794:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a796:	23e0      	movs	r3, #224	@ 0xe0
 800a798:	015b      	lsls	r3, r3, #5
 800a79a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a79c:	2302      	movs	r3, #2
 800a79e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a7a0:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7a2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a7a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7a6:	f004 ffa3 	bl	800f6f0 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel1;
 800a7aa:	4c1b      	ldr	r4, [pc, #108]	@ (800a818 <HAL_SPI_MspInit+0xc0>)
 800a7ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a81c <HAL_SPI_MspInit+0xc4>)
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a7ae:	2280      	movs	r2, #128	@ 0x80
    hdma_spi3_rx.Instance = DMA1_Channel1;
 800a7b0:	6023      	str	r3, [r4, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800a7b2:	2328      	movs	r3, #40	@ 0x28
 800a7b4:	6063      	str	r3, [r4, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7b6:	2300      	movs	r3, #0
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800a7b8:	0020      	movs	r0, r4
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7ba:	60a3      	str	r3, [r4, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7bc:	60e3      	str	r3, [r4, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a7be:	6122      	str	r2, [r4, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7c0:	6163      	str	r3, [r4, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7c2:	61a3      	str	r3, [r4, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800a7c4:	61e3      	str	r3, [r4, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a7c6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800a7c8:	f004 fda6 	bl	800f318 <HAL_DMA_Init>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d001      	beq.n	800a7d4 <HAL_SPI_MspInit+0x7c>
    {
      Error_Handler();
 800a7d0:	f7fe f810 	bl	80087f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a7d4:	4b12      	ldr	r3, [pc, #72]	@ (800a820 <HAL_SPI_MspInit+0xc8>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800a7d6:	65ac      	str	r4, [r5, #88]	@ 0x58
 800a7d8:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a7da:	4c12      	ldr	r4, [pc, #72]	@ (800a824 <HAL_SPI_MspInit+0xcc>)
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7dc:	2280      	movs	r2, #128	@ 0x80
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a7de:	6023      	str	r3, [r4, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800a7e0:	2329      	movs	r3, #41	@ 0x29
 800a7e2:	6063      	str	r3, [r4, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7e4:	3b19      	subs	r3, #25
 800a7e6:	60a3      	str	r3, [r4, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7e8:	2300      	movs	r3, #0
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a7ea:	0020      	movs	r0, r4
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7ec:	60e3      	str	r3, [r4, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7ee:	6122      	str	r2, [r4, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7f0:	6163      	str	r3, [r4, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7f2:	61a3      	str	r3, [r4, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800a7f4:	61e3      	str	r3, [r4, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a7f6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a7f8:	f004 fd8e 	bl	800f318 <HAL_DMA_Init>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d001      	beq.n	800a804 <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 800a800:	f7fd fff8 	bl	80087f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800a804:	656c      	str	r4, [r5, #84]	@ 0x54
 800a806:	62a5      	str	r5, [r4, #40]	@ 0x28

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800a808:	b009      	add	sp, #36	@ 0x24
 800a80a:	bd30      	pop	{r4, r5, pc}
 800a80c:	40003c00 	.word	0x40003c00
 800a810:	40021000 	.word	0x40021000
 800a814:	50000800 	.word	0x50000800
 800a818:	20000934 	.word	0x20000934
 800a81c:	40020008 	.word	0x40020008
 800a820:	4002001c 	.word	0x4002001c
 800a824:	200008d4 	.word	0x200008d4

0800a828 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a828:	b510      	push	{r4, lr}
 800a82a:	0004      	movs	r4, r0
 800a82c:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a82e:	2214      	movs	r2, #20
 800a830:	2100      	movs	r1, #0
 800a832:	a802      	add	r0, sp, #8
 800a834:	f00f ff8e 	bl	801a754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a838:	2244      	movs	r2, #68	@ 0x44
 800a83a:	2100      	movs	r1, #0
 800a83c:	a807      	add	r0, sp, #28
 800a83e:	f00f ff89 	bl	801a754 <memset>
  if(huart->Instance==USART3)
 800a842:	4b18      	ldr	r3, [pc, #96]	@ (800a8a4 <HAL_UART_MspInit+0x7c>)
 800a844:	6822      	ldr	r2, [r4, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d129      	bne.n	800a89e <HAL_UART_MspInit+0x76>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a84a:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a84c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a84e:	025b      	lsls	r3, r3, #9
 800a850:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a852:	f006 fecf 	bl	80115f4 <HAL_RCCEx_PeriphCLKConfig>
 800a856:	2800      	cmp	r0, #0
 800a858:	d001      	beq.n	800a85e <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800a85a:	f7fd ffcb 	bl	80087f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a85e:	2180      	movs	r1, #128	@ 0x80
 800a860:	4b11      	ldr	r3, [pc, #68]	@ (800a8a8 <HAL_UART_MspInit+0x80>)
 800a862:	02c9      	lsls	r1, r1, #11
 800a864:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a866:	4811      	ldr	r0, [pc, #68]	@ (800a8ac <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800a868:	430a      	orrs	r2, r1
 800a86a:	659a      	str	r2, [r3, #88]	@ 0x58
 800a86c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a86e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a870:	2102      	movs	r1, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800a872:	9200      	str	r2, [sp, #0]
 800a874:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a878:	430a      	orrs	r2, r1
 800a87a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a87c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a87e:	400b      	ands	r3, r1
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a884:	2380      	movs	r3, #128	@ 0x80
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a88a:	3bee      	subs	r3, #238	@ 0xee
 800a88c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a88e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a890:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a892:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a894:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a896:	3307      	adds	r3, #7
 800a898:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a89a:	f004 ff29 	bl	800f6f0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800a89e:	b018      	add	sp, #96	@ 0x60
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	46c0      	nop			@ (mov r8, r8)
 800a8a4:	40004800 	.word	0x40004800
 800a8a8:	40021000 	.word	0x40021000
 800a8ac:	50000400 	.word	0x50000400

0800a8b0 <HAL_UART_MspDeInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART3)
 800a8b0:	4b07      	ldr	r3, [pc, #28]	@ (800a8d0 <HAL_UART_MspDeInit+0x20>)
 800a8b2:	6802      	ldr	r2, [r0, #0]
{
 800a8b4:	b510      	push	{r4, lr}
  if(huart->Instance==USART3)
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d109      	bne.n	800a8ce <HAL_UART_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN USART3_MspDeInit 0 */

    /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 800a8ba:	4a06      	ldr	r2, [pc, #24]	@ (800a8d4 <HAL_UART_MspDeInit+0x24>)
 800a8bc:	4906      	ldr	r1, [pc, #24]	@ (800a8d8 <HAL_UART_MspDeInit+0x28>)
 800a8be:	6d93      	ldr	r3, [r2, #88]	@ 0x58

    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a8c0:	4806      	ldr	r0, [pc, #24]	@ (800a8dc <HAL_UART_MspDeInit+0x2c>)
    __HAL_RCC_USART3_CLK_DISABLE();
 800a8c2:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a8c4:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART3_CLK_DISABLE();
 800a8c6:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a8c8:	0049      	lsls	r1, r1, #1
 800a8ca:	f004 ffcf 	bl	800f86c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800a8ce:	bd10      	pop	{r4, pc}
 800a8d0:	40004800 	.word	0x40004800
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	fffbffff 	.word	0xfffbffff
 800a8dc:	50000400 	.word	0x50000400

0800a8e0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	0004      	movs	r4, r0
 800a8e4:	b098      	sub	sp, #96	@ 0x60
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a8e6:	2244      	movs	r2, #68	@ 0x44
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	a807      	add	r0, sp, #28
 800a8ec:	f00f ff32 	bl	801a754 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800a8f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a960 <HAL_PCD_MspInit+0x80>)
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d130      	bne.n	800a95a <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a8f8:	2380      	movs	r3, #128	@ 0x80
 800a8fa:	015b      	lsls	r3, r3, #5
 800a8fc:	9307      	str	r3, [sp, #28]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a8fe:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a900:	a807      	add	r0, sp, #28
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a902:	051b      	lsls	r3, r3, #20
 800a904:	9314      	str	r3, [sp, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a906:	f006 fe75 	bl	80115f4 <HAL_RCCEx_PeriphCLKConfig>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d001      	beq.n	800a912 <HAL_PCD_MspInit+0x32>
    {
      Error_Handler();
 800a90e:	f7fd ff71 	bl	80087f4 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800a912:	f006 fa7f 	bl	8010e14 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a916:	2180      	movs	r1, #128	@ 0x80
 800a918:	4b12      	ldr	r3, [pc, #72]	@ (800a964 <HAL_PCD_MspInit+0x84>)
 800a91a:	0189      	lsls	r1, r1, #6
 800a91c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a91e:	2008      	movs	r0, #8
    __HAL_RCC_USB_CLK_ENABLE();
 800a920:	430a      	orrs	r2, r1
 800a922:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a924:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800a926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a928:	400b      	ands	r3, r1
 800a92a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a92c:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800a92e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a930:	f004 fc60 	bl	800f1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800a934:	2008      	movs	r0, #8
 800a936:	f004 fc87 	bl	800f248 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a93a:	2300      	movs	r3, #0
 800a93c:	9304      	str	r3, [sp, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a93e:	23c0      	movs	r3, #192	@ 0xc0
 800a940:	015b      	lsls	r3, r3, #5
 800a942:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a944:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a946:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a948:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a94a:	3301      	adds	r3, #1
 800a94c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a94e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a950:	3307      	adds	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a952:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a954:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a956:	f004 fecb 	bl	800f6f0 <HAL_GPIO_Init>
    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800a95a:	b018      	add	sp, #96	@ 0x60
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	46c0      	nop			@ (mov r8, r8)
 800a960:	40005c00 	.word	0x40005c00
 800a964:	40021000 	.word	0x40021000

0800a968 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a968:	e7fe      	b.n	800a968 <NMI_Handler>

0800a96a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a96a:	e7fe      	b.n	800a96a <HardFault_Handler>

0800a96c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a96c:	4770      	bx	lr

0800a96e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800a96e:	4770      	bx	lr

0800a970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a970:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a972:	f003 fd5f 	bl	800e434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a976:	bd10      	pop	{r4, pc}

0800a978 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800a978:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800a97a:	4c0a      	ldr	r4, [pc, #40]	@ (800a9a4 <RTC_TAMP_IRQHandler+0x2c>)
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */
  // 1) Wake-Up 타이머 EXTI 라인(20) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800a97c:	4d0a      	ldr	r5, [pc, #40]	@ (800a9a8 <RTC_TAMP_IRQHandler+0x30>)
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800a97e:	0020      	movs	r0, r4
 800a980:	f007 f9b8 	bl	8011cf4 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a984:	0020      	movs	r0, r4
 800a986:	f007 fc97 	bl	80122b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800a98a:	2380      	movs	r3, #128	@ 0x80
 800a98c:	055b      	lsls	r3, r3, #21
 800a98e:	60eb      	str	r3, [r5, #12]
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a990:	0020      	movs	r0, r4
 800a992:	f007 fc91 	bl	80122b8 <HAL_RTCEx_WakeUpTimerIRQHandler>

  // 2) Tamper EXTI 라인(21) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_TAMPER_EVENT;
 800a996:	2380      	movs	r3, #128	@ 0x80
 800a998:	059b      	lsls	r3, r3, #22
 800a99a:	60eb      	str	r3, [r5, #12]
  HAL_RTCEx_TamperIRQHandler(&hrtc);
 800a99c:	0020      	movs	r0, r4
 800a99e:	f007 fca5 	bl	80122ec <HAL_RTCEx_TamperIRQHandler>
  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	200009f8 	.word	0x200009f8
 800a9a8:	40021800 	.word	0x40021800

0800a9ac <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
 800a9ac:	4770      	bx	lr
	...

0800a9b0 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 800a9b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800a9b2:	4802      	ldr	r0, [pc, #8]	@ (800a9bc <USB_DRD_FS_IRQHandler+0xc>)
 800a9b4:	f005 fbe4 	bl	8010180 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	46c0      	nop			@ (mov r8, r8)
 800a9bc:	20000564 	.word	0x20000564

0800a9c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a9c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800a9c2:	4802      	ldr	r0, [pc, #8]	@ (800a9cc <DMA1_Channel1_IRQHandler+0xc>)
 800a9c4:	f004 fd5e 	bl	800f484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a9c8:	bd10      	pop	{r4, pc}
 800a9ca:	46c0      	nop			@ (mov r8, r8)
 800a9cc:	20000934 	.word	0x20000934

0800a9d0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800a9d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800a9d2:	4802      	ldr	r0, [pc, #8]	@ (800a9dc <DMA1_Channel2_3_IRQHandler+0xc>)
 800a9d4:	f004 fd56 	bl	800f484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800a9d8:	bd10      	pop	{r4, pc}
 800a9da:	46c0      	nop			@ (mov r8, r8)
 800a9dc:	200008d4 	.word	0x200008d4

0800a9e0 <ADC_COMP1_2_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC_COMP1_2_IRQHandler(void)
{
 800a9e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 0 */

  /* USER CODE END ADC_COMP1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a9e2:	4803      	ldr	r0, [pc, #12]	@ (800a9f0 <ADC_COMP1_2_IRQHandler+0x10>)
 800a9e4:	f003 fec8 	bl	800e778 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 800a9e8:	4802      	ldr	r0, [pc, #8]	@ (800a9f4 <ADC_COMP1_2_IRQHandler+0x14>)
 800a9ea:	f004 fbd7 	bl	800f19c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 1 */

  /* USER CODE END ADC_COMP1_2_IRQn 1 */
}
 800a9ee:	bd10      	pop	{r4, pc}
 800a9f0:	20000aec 	.word	0x20000aec
 800a9f4:	20000abc 	.word	0x20000abc

0800a9f8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800a9f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800a9fa:	4802      	ldr	r0, [pc, #8]	@ (800aa04 <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 800a9fc:	f005 f9e9 	bl	800fdd2 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	46c0      	nop			@ (mov r8, r8)
 800aa04:	20000a28 	.word	0x20000a28

0800aa08 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800aa08:	2001      	movs	r0, #1
 800aa0a:	4770      	bx	lr

0800aa0c <_kill>:

int _kill(int pid, int sig)
{
 800aa0c:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800aa0e:	f00f ff2b 	bl	801a868 <__errno>
 800aa12:	2316      	movs	r3, #22
 800aa14:	6003      	str	r3, [r0, #0]
  return -1;
 800aa16:	2001      	movs	r0, #1
}
 800aa18:	4240      	negs	r0, r0
 800aa1a:	bd10      	pop	{r4, pc}

0800aa1c <_exit>:

void _exit (int status)
{
 800aa1c:	b510      	push	{r4, lr}
  errno = EINVAL;
 800aa1e:	f00f ff23 	bl	801a868 <__errno>
 800aa22:	2316      	movs	r3, #22
 800aa24:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800aa26:	e7fe      	b.n	800aa26 <_exit+0xa>

0800aa28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	000e      	movs	r6, r1
 800aa2c:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa2e:	2500      	movs	r5, #0
 800aa30:	42a5      	cmp	r5, r4
 800aa32:	db01      	blt.n	800aa38 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800aa34:	0020      	movs	r0, r4
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800aa38:	e000      	b.n	800aa3c <_read+0x14>
 800aa3a:	bf00      	nop
 800aa3c:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa3e:	3501      	adds	r5, #1
 800aa40:	e7f6      	b.n	800aa30 <_read+0x8>

0800aa42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800aa42:	b570      	push	{r4, r5, r6, lr}
 800aa44:	000e      	movs	r6, r1
 800aa46:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa48:	2500      	movs	r5, #0
 800aa4a:	42a5      	cmp	r5, r4
 800aa4c:	db01      	blt.n	800aa52 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800aa4e:	0020      	movs	r0, r4
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800aa52:	5d70      	ldrb	r0, [r6, r5]
 800aa54:	f7fc fda0 	bl	8007598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa58:	3501      	adds	r5, #1
 800aa5a:	e7f6      	b.n	800aa4a <_write+0x8>

0800aa5c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800aa5c:	2001      	movs	r0, #1
}
 800aa5e:	4240      	negs	r0, r0
 800aa60:	4770      	bx	lr

0800aa62 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800aa62:	2380      	movs	r3, #128	@ 0x80
 800aa64:	019b      	lsls	r3, r3, #6
  return 0;
}
 800aa66:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800aa68:	604b      	str	r3, [r1, #4]
}
 800aa6a:	4770      	bx	lr

0800aa6c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800aa6c:	2001      	movs	r0, #1
 800aa6e:	4770      	bx	lr

0800aa70 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800aa70:	2000      	movs	r0, #0
 800aa72:	4770      	bx	lr

0800aa74 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aa74:	490b      	ldr	r1, [pc, #44]	@ (800aaa4 <_sbrk+0x30>)
 800aa76:	4a0c      	ldr	r2, [pc, #48]	@ (800aaa8 <_sbrk+0x34>)
{
 800aa78:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aa7a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aa7c:	490b      	ldr	r1, [pc, #44]	@ (800aaac <_sbrk+0x38>)
{
 800aa7e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800aa80:	6808      	ldr	r0, [r1, #0]
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d101      	bne.n	800aa8a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800aa86:	480a      	ldr	r0, [pc, #40]	@ (800aab0 <_sbrk+0x3c>)
 800aa88:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aa8a:	6808      	ldr	r0, [r1, #0]
 800aa8c:	18c3      	adds	r3, r0, r3
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d906      	bls.n	800aaa0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800aa92:	f00f fee9 	bl	801a868 <__errno>
 800aa96:	230c      	movs	r3, #12
 800aa98:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800aa9a:	2001      	movs	r0, #1
 800aa9c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800aa9e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800aaa0:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800aaa2:	e7fc      	b.n	800aa9e <_sbrk+0x2a>
 800aaa4:	00000400 	.word	0x00000400
 800aaa8:	2000a000 	.word	0x2000a000
 800aaac:	20002c5c 	.word	0x20002c5c
 800aab0:	20006800 	.word	0x20006800

0800aab4 <SystemInit>:
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aab4:	2280      	movs	r2, #128	@ 0x80
 800aab6:	4b0a      	ldr	r3, [pc, #40]	@ (800aae0 <SystemInit+0x2c>)
 800aab8:	0512      	lsls	r2, r2, #20
 800aaba:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800aabc:	4b09      	ldr	r3, [pc, #36]	@ (800aae4 <SystemInit+0x30>)
 800aabe:	4a0a      	ldr	r2, [pc, #40]	@ (800aae8 <SystemInit+0x34>)
 800aac0:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
  tmp_optr = FLASH->OPTR;
 800aac2:	6a13      	ldr	r3, [r2, #32]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800aac4:	03c9      	lsls	r1, r1, #15
 800aac6:	d509      	bpl.n	800aadc <SystemInit+0x28>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2bcc      	cmp	r3, #204	@ 0xcc
 800aacc:	d006      	beq.n	800aadc <SystemInit+0x28>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800aace:	2baa      	cmp	r3, #170	@ 0xaa
 800aad0:	d004      	beq.n	800aadc <SystemInit+0x28>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800aad2:	2380      	movs	r3, #128	@ 0x80
 800aad4:	6811      	ldr	r1, [r2, #0]
 800aad6:	02db      	lsls	r3, r3, #11
 800aad8:	430b      	orrs	r3, r1
 800aada:	6013      	str	r3, [r2, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800aadc:	4770      	bx	lr
 800aade:	46c0      	nop			@ (mov r8, r8)
 800aae0:	e000ed00 	.word	0xe000ed00
 800aae4:	40022004 	.word	0x40022004
 800aae8:	40022000 	.word	0x40022000

0800aaec <csv_device_info>:
}

static void csv_device_info(const DeviceSettings *dev_setting) {

	log_csv.device_info.device_code = dev_setting->device_code;
	log_csv.device_info.model_code = dev_setting->model;
 800aaec:	0003      	movs	r3, r0
static void csv_device_info(const DeviceSettings *dev_setting) {
 800aaee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaf0:	4c3e      	ldr	r4, [pc, #248]	@ (800abec <csv_device_info+0x100>)
	log_csv.device_info.model_code = dev_setting->model;
 800aaf2:	3310      	adds	r3, #16
static void csv_device_info(const DeviceSettings *dev_setting) {
 800aaf4:	44a5      	add	sp, r4
	log_csv.device_info.device_code = dev_setting->device_code;
 800aaf6:	4c3e      	ldr	r4, [pc, #248]	@ (800abf0 <csv_device_info+0x104>)
	log_csv.device_info.model_code = dev_setting->model;
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	60e3      	str	r3, [r4, #12]
	log_csv.device_info.firmware_version = dev_setting->firmware_ver;
 800aafc:	3321      	adds	r3, #33	@ 0x21
 800aafe:	9306      	str	r3, [sp, #24]
 800ab00:	60a3      	str	r3, [r4, #8]
	log_csv.device_info.serial_number = dev_setting->serial;
 800ab02:	3b11      	subs	r3, #17
	log_csv.device_info.device_code = dev_setting->device_code;
 800ab04:	6020      	str	r0, [r4, #0]
	log_csv.device_info.serial_number = dev_setting->serial;
 800ab06:	9307      	str	r3, [sp, #28]
 800ab08:	6123      	str	r3, [r4, #16]

	// sensor_type 값에 따라 probe_type 문자열 설정
	if (dev_setting->sensor_type == 1)
 800ab0a:	3030      	adds	r0, #48	@ 0x30
 800ab0c:	7802      	ldrb	r2, [r0, #0]
 800ab0e:	4b39      	ldr	r3, [pc, #228]	@ (800abf4 <csv_device_info+0x108>)
 800ab10:	2a01      	cmp	r2, #1
 800ab12:	d003      	beq.n	800ab1c <csv_device_info+0x30>
	    log_csv.device_info.probe_type = "Temperature and Radiation (interval)";
	else if (dev_setting->sensor_type == 2)
 800ab14:	4b38      	ldr	r3, [pc, #224]	@ (800abf8 <csv_device_info+0x10c>)
 800ab16:	2a02      	cmp	r2, #2
 800ab18:	d000      	beq.n	800ab1c <csv_device_info+0x30>
 800ab1a:	4b38      	ldr	r3, [pc, #224]	@ (800abfc <csv_device_info+0x110>)
	    log_csv.device_info.probe_type = "Temperature Only";
	else
	    log_csv.device_info.probe_type = "Unknown Sensor Type";

    char tmp_buff[512] = {0};
 800ab1c:	2680      	movs	r6, #128	@ 0x80
 800ab1e:	00b6      	lsls	r6, r6, #2
 800ab20:	0032      	movs	r2, r6
 800ab22:	2100      	movs	r1, #0
 800ab24:	a808      	add	r0, sp, #32
	    log_csv.device_info.probe_type = "Temperature and Radiation (interval)";
 800ab26:	6063      	str	r3, [r4, #4]
    char tmp_buff[512] = {0};
 800ab28:	f00f fe14 	bl	801a754 <memset>
    const int buffer_size = sizeof(tmp_buff);

    const int label_width = 20;

    // 1. Add the static header to the buffer
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab2c:	4934      	ldr	r1, [pc, #208]	@ (800ac00 <csv_device_info+0x114>)
 800ab2e:	a808      	add	r0, sp, #32
 800ab30:	f00f fec7 	bl	801a8c2 <strcpy>
                       "Device Information\n"
                       "************************************************\n");

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab34:	2514      	movs	r5, #20
 800ab36:	21de      	movs	r1, #222	@ 0xde
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	4a32      	ldr	r2, [pc, #200]	@ (800ac04 <csv_device_info+0x118>)
 800ab3c:	9302      	str	r3, [sp, #8]
 800ab3e:	4b32      	ldr	r3, [pc, #200]	@ (800ac08 <csv_device_info+0x11c>)
 800ab40:	9501      	str	r5, [sp, #4]
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	0049      	lsls	r1, r1, #1
 800ab46:	002b      	movs	r3, r5
 800ab48:	a819      	add	r0, sp, #100	@ 0x64
 800ab4a:	9204      	str	r2, [sp, #16]
 800ab4c:	f00f fcb0 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Device code", label_width, log_csv.device_info.device_code);

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab50:	ab08      	add	r3, sp, #32
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab52:	3044      	adds	r0, #68	@ 0x44
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab54:	1a31      	subs	r1, r6, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab56:	0007      	movs	r7, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab58:	1818      	adds	r0, r3, r0
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	9a04      	ldr	r2, [sp, #16]
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	2328      	movs	r3, #40	@ 0x28
 800ab62:	9301      	str	r3, [sp, #4]
 800ab64:	4b29      	ldr	r3, [pc, #164]	@ (800ac0c <csv_device_info+0x120>)
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	002b      	movs	r3, r5
 800ab6a:	f00f fca1 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Probe Type", 40, log_csv.device_info.probe_type);

    log_csv.device_info.firmware_version = dev_setting-> firmware_ver;
 800ab6e:	9b06      	ldr	r3, [sp, #24]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab70:	183f      	adds	r7, r7, r0
    log_csv.device_info.firmware_version = dev_setting-> firmware_ver;
 800ab72:	60a3      	str	r3, [r4, #8]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab74:	ab08      	add	r3, sp, #32
 800ab76:	19d8      	adds	r0, r3, r7
 800ab78:	9b06      	ldr	r3, [sp, #24]
 800ab7a:	1bf1      	subs	r1, r6, r7
 800ab7c:	9302      	str	r3, [sp, #8]
 800ab7e:	4b24      	ldr	r3, [pc, #144]	@ (800ac10 <csv_device_info+0x124>)
 800ab80:	9a04      	ldr	r2, [sp, #16]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	9501      	str	r5, [sp, #4]
 800ab86:	002b      	movs	r3, r5
 800ab88:	f00f fc92 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Firmware Version", label_width, log_csv.device_info.firmware_version);

    log_csv.device_info.model_code = dev_setting-> model;
 800ab8c:	9b05      	ldr	r3, [sp, #20]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab8e:	183f      	adds	r7, r7, r0
    log_csv.device_info.model_code = dev_setting-> model;
 800ab90:	60e3      	str	r3, [r4, #12]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab92:	ab08      	add	r3, sp, #32
 800ab94:	19d8      	adds	r0, r3, r7
 800ab96:	9b05      	ldr	r3, [sp, #20]
 800ab98:	1bf1      	subs	r1, r6, r7
 800ab9a:	9302      	str	r3, [sp, #8]
 800ab9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ac14 <csv_device_info+0x128>)
 800ab9e:	9a04      	ldr	r2, [sp, #16]
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	9501      	str	r5, [sp, #4]
 800aba4:	002b      	movs	r3, r5
 800aba6:	f00f fc83 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Model Code", label_width, log_csv.device_info.model_code);

    log_csv.device_info.serial_number = dev_setting-> serial;
 800abaa:	9b07      	ldr	r3, [sp, #28]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800abac:	183f      	adds	r7, r7, r0
    log_csv.device_info.serial_number = dev_setting-> serial;
 800abae:	6123      	str	r3, [r4, #16]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800abb0:	ab08      	add	r3, sp, #32
 800abb2:	19d8      	adds	r0, r3, r7
 800abb4:	9b07      	ldr	r3, [sp, #28]
 800abb6:	1bf1      	subs	r1, r6, r7
 800abb8:	9302      	str	r3, [sp, #8]
 800abba:	4b17      	ldr	r3, [pc, #92]	@ (800ac18 <csv_device_info+0x12c>)
 800abbc:	4a17      	ldr	r2, [pc, #92]	@ (800ac1c <csv_device_info+0x130>)
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	9501      	str	r5, [sp, #4]
 800abc2:	002b      	movs	r3, r5
 800abc4:	f00f fc74 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n\n", label_width, "Serial Number", label_width, log_csv.device_info.serial_number);
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800abc8:	23c2      	movs	r3, #194	@ 0xc2
 800abca:	22c4      	movs	r2, #196	@ 0xc4
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	58e3      	ldr	r3, [r4, r3]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800abd0:	183f      	adds	r7, r7, r0
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800abd2:	3301      	adds	r3, #1
 800abd4:	19db      	adds	r3, r3, r7
 800abd6:	0052      	lsls	r2, r2, #1

    fatfs_write_str(&csv_file, tmp_buff);
 800abd8:	4911      	ldr	r1, [pc, #68]	@ (800ac20 <csv_device_info+0x134>)
 800abda:	a808      	add	r0, sp, #32
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800abdc:	50a3      	str	r3, [r4, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800abde:	f00b f88b 	bl	8015cf8 <f_puts>
}
 800abe2:	2389      	movs	r3, #137	@ 0x89
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	449d      	add	sp, r3
 800abe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abea:	46c0      	nop			@ (mov r8, r8)
 800abec:	fffffddc 	.word	0xfffffddc
 800abf0:	20000058 	.word	0x20000058
 800abf4:	0801ed3f 	.word	0x0801ed3f
 800abf8:	0801ed64 	.word	0x0801ed64
 800abfc:	0801ed75 	.word	0x0801ed75
 800ac00:	0801ed89 	.word	0x0801ed89
 800ac04:	0801edce 	.word	0x0801edce
 800ac08:	0801edda 	.word	0x0801edda
 800ac0c:	0801ede6 	.word	0x0801ede6
 800ac10:	0801edf1 	.word	0x0801edf1
 800ac14:	0801ee02 	.word	0x0801ee02
 800ac18:	0801ee1a 	.word	0x0801ee1a
 800ac1c:	0801ee0d 	.word	0x0801ee0d
 800ac20:	20002c60 	.word	0x20002c60

0800ac24 <csv_trip_info>:

static void csv_trip_info(const DeviceSettings *dev_setting) {
 800ac24:	b570      	push	{r4, r5, r6, lr}
	log_csv.trip_info.trip_id = dev_setting->trip_code;
	log_csv.trip_info.description = dev_setting->trip_desc;

    char tmp_buff[256] = {0};
 800ac26:	2280      	movs	r2, #128	@ 0x80
	log_csv.trip_info.description = dev_setting->trip_desc;
 800ac28:	0006      	movs	r6, r0
static void csv_trip_info(const DeviceSettings *dev_setting) {
 800ac2a:	0004      	movs	r4, r0
 800ac2c:	b0c4      	sub	sp, #272	@ 0x110
	log_csv.trip_info.description = dev_setting->trip_desc;
 800ac2e:	4d1b      	ldr	r5, [pc, #108]	@ (800ac9c <csv_trip_info+0x78>)
 800ac30:	363b      	adds	r6, #59	@ 0x3b
    char tmp_buff[256] = {0};
 800ac32:	0052      	lsls	r2, r2, #1
 800ac34:	2100      	movs	r1, #0
 800ac36:	a804      	add	r0, sp, #16
	log_csv.trip_info.description = dev_setting->trip_desc;
 800ac38:	61ae      	str	r6, [r5, #24]
    char tmp_buff[256] = {0};
 800ac3a:	f00f fd8b 	bl	801a754 <memset>
    int offset = 0;
    const int buffer_size = sizeof(tmp_buff);
    const int label_width = 20;

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac3e:	4918      	ldr	r1, [pc, #96]	@ (800aca0 <csv_trip_info+0x7c>)
 800ac40:	a804      	add	r0, sp, #16
 800ac42:	f00f fe3e 	bl	801a8c2 <strcpy>
                    "Trip Information\n"
                    "************************************************\n");
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800ac46:	0023      	movs	r3, r4
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac48:	2052      	movs	r0, #82	@ 0x52
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800ac4a:	3339      	adds	r3, #57	@ 0x39
 800ac4c:	343a      	adds	r4, #58	@ 0x3a
 800ac4e:	781a      	ldrb	r2, [r3, #0]
 800ac50:	7823      	ldrb	r3, [r4, #0]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac52:	21be      	movs	r1, #190	@ 0xbe
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800ac54:	021b      	lsls	r3, r3, #8
 800ac56:	4313      	orrs	r3, r2
 800ac58:	616b      	str	r3, [r5, #20]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	4b11      	ldr	r3, [pc, #68]	@ (800aca4 <csv_trip_info+0x80>)
 800ac5e:	4a12      	ldr	r2, [pc, #72]	@ (800aca8 <csv_trip_info+0x84>)
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	4468      	add	r0, sp
 800ac64:	2314      	movs	r3, #20
 800ac66:	f00f fc23 	bl	801a4b0 <sniprintf>
        "%-*s: %07ld\n", label_width, "Trip Id", log_csv.trip_info.trip_id);

    log_csv.trip_info.description = dev_setting -> trip_desc;
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac6a:	2314      	movs	r3, #20
 800ac6c:	490f      	ldr	r1, [pc, #60]	@ (800acac <csv_trip_info+0x88>)
    log_csv.trip_info.description = dev_setting -> trip_desc;
 800ac6e:	61ae      	str	r6, [r5, #24]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac70:	4a0f      	ldr	r2, [pc, #60]	@ (800acb0 <csv_trip_info+0x8c>)
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	9100      	str	r1, [sp, #0]
 800ac76:	9602      	str	r6, [sp, #8]
 800ac78:	21a0      	movs	r1, #160	@ 0xa0
 800ac7a:	a81c      	add	r0, sp, #112	@ 0x70
 800ac7c:	f00f fc18 	bl	801a4b0 <sniprintf>
        "%-*s: %-*s\n", label_width, "Description", label_width, log_csv.trip_info.description);
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800ac80:	23c4      	movs	r3, #196	@ 0xc4
 800ac82:	22c6      	movs	r2, #198	@ 0xc6
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	58eb      	ldr	r3, [r5, r3]
 800ac88:	0052      	lsls	r2, r2, #1
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac8a:	181b      	adds	r3, r3, r0
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800ac8c:	3361      	adds	r3, #97	@ 0x61

    fatfs_write_str(&csv_file, tmp_buff);
 800ac8e:	4909      	ldr	r1, [pc, #36]	@ (800acb4 <csv_trip_info+0x90>)
 800ac90:	a804      	add	r0, sp, #16
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800ac92:	50ab      	str	r3, [r5, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800ac94:	f00b f830 	bl	8015cf8 <f_puts>
}
 800ac98:	b044      	add	sp, #272	@ 0x110
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	20000058 	.word	0x20000058
 800aca0:	0801ee28 	.word	0x0801ee28
 800aca4:	0801ee78 	.word	0x0801ee78
 800aca8:	0801ee6b 	.word	0x0801ee6b
 800acac:	0801ee80 	.word	0x0801ee80
 800acb0:	0801edce 	.word	0x0801edce
 800acb4:	20002c60 	.word	0x20002c60

0800acb8 <seconds_to_hms_string.part.0>:
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800acb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acba:	000d      	movs	r5, r1
    uint32_t hours = total_secs / 3600;
 800acbc:	21e1      	movs	r1, #225	@ 0xe1
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800acbe:	b085      	sub	sp, #20
    uint32_t hours = total_secs / 3600;
 800acc0:	0109      	lsls	r1, r1, #4
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800acc2:	0016      	movs	r6, r2
 800acc4:	0004      	movs	r4, r0
    uint32_t hours = total_secs / 3600;
 800acc6:	f7f5 fa4f 	bl	8000168 <__udivsi3>
    uint32_t seconds = total_secs % 60;
 800acca:	213c      	movs	r1, #60	@ 0x3c
    uint32_t hours = total_secs / 3600;
 800accc:	9003      	str	r0, [sp, #12]
    uint32_t seconds = total_secs % 60;
 800acce:	0020      	movs	r0, r4
 800acd0:	f7f5 fad0 	bl	8000274 <__aeabi_uidivmod>
    snprintf(buffer, buffer_size, "%02luH %02luM %02luS", hours, minutes, seconds);
 800acd4:	9101      	str	r1, [sp, #4]
    uint32_t minutes = (total_secs % 3600) / 60;
 800acd6:	21e1      	movs	r1, #225	@ 0xe1
 800acd8:	0020      	movs	r0, r4
 800acda:	0109      	lsls	r1, r1, #4
 800acdc:	f7f5 faca 	bl	8000274 <__aeabi_uidivmod>
 800ace0:	0008      	movs	r0, r1
 800ace2:	213c      	movs	r1, #60	@ 0x3c
 800ace4:	f7f5 fa40 	bl	8000168 <__udivsi3>
    snprintf(buffer, buffer_size, "%02luH %02luM %02luS", hours, minutes, seconds);
 800ace8:	4f04      	ldr	r7, [pc, #16]	@ (800acfc <seconds_to_hms_string.part.0+0x44>)
 800acea:	9000      	str	r0, [sp, #0]
 800acec:	003a      	movs	r2, r7
 800acee:	0031      	movs	r1, r6
 800acf0:	0028      	movs	r0, r5
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	f00f fbdc 	bl	801a4b0 <sniprintf>
}
 800acf8:	b005      	add	sp, #20
 800acfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acfc:	0801ee8c 	.word	0x0801ee8c

0800ad00 <csv_conf_info>:

static void csv_conf_info(const DeviceSettings *dev_setting) {
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ad00:	0003      	movs	r3, r0
static void csv_conf_info(const DeviceSettings *dev_setting) {
 800ad02:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ad04:	3375      	adds	r3, #117	@ 0x75
 800ad06:	781a      	ldrb	r2, [r3, #0]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	4c62      	ldr	r4, [pc, #392]	@ (800ae98 <csv_conf_info+0x198>)
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	4313      	orrs	r3, r2
 800ad12:	0002      	movs	r2, r0
 800ad14:	3277      	adds	r2, #119	@ 0x77
 800ad16:	7812      	ldrb	r2, [r2, #0]
static void csv_conf_info(const DeviceSettings *dev_setting) {
 800ad18:	b0d1      	sub	sp, #324	@ 0x144
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ad1a:	0412      	lsls	r2, r2, #16
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	0003      	movs	r3, r0
 800ad20:	3378      	adds	r3, #120	@ 0x78
 800ad22:	781b      	ldrb	r3, [r3, #0]
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ad24:	0007      	movs	r7, r0
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ad26:	061b      	lsls	r3, r3, #24
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	61e3      	str	r3, [r4, #28]
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ad2c:	0003      	movs	r3, r0
 800ad2e:	3771      	adds	r7, #113	@ 0x71
 800ad30:	3372      	adds	r3, #114	@ 0x72
 800ad32:	783a      	ldrb	r2, [r7, #0]
 800ad34:	9305      	str	r3, [sp, #20]
 800ad36:	781b      	ldrb	r3, [r3, #0]
                       "************************************************\n");
    char tmp[16];

    seconds_to_hms_string(log_csv.config_info.temp_interval_sec, tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ad38:	250f      	movs	r5, #15
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	0002      	movs	r2, r0
 800ad40:	3273      	adds	r2, #115	@ 0x73
 800ad42:	9206      	str	r2, [sp, #24]
 800ad44:	7812      	ldrb	r2, [r2, #0]
    char tmp_buff[256] = {0};
 800ad46:	2100      	movs	r1, #0
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ad48:	0412      	lsls	r2, r2, #16
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	0003      	movs	r3, r0
 800ad4e:	3374      	adds	r3, #116	@ 0x74
 800ad50:	9307      	str	r3, [sp, #28]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	061b      	lsls	r3, r3, #24
 800ad56:	4313      	orrs	r3, r2
 800ad58:	6223      	str	r3, [r4, #32]
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800ad5a:	0003      	movs	r3, r0
 800ad5c:	3364      	adds	r3, #100	@ 0x64
 800ad5e:	9308      	str	r3, [sp, #32]
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	0002      	movs	r2, r0
 800ad6e:	3266      	adds	r2, #102	@ 0x66
 800ad70:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad72:	7812      	ldrb	r2, [r2, #0]
 800ad74:	3067      	adds	r0, #103	@ 0x67
 800ad76:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ad78:	0412      	lsls	r2, r2, #16
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	7803      	ldrb	r3, [r0, #0]
    char tmp_buff[256] = {0};
 800ad7e:	a810      	add	r0, sp, #64	@ 0x40
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800ad80:	061b      	lsls	r3, r3, #24
 800ad82:	4313      	orrs	r3, r2
    char tmp_buff[256] = {0};
 800ad84:	2280      	movs	r2, #128	@ 0x80
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800ad86:	62e3      	str	r3, [r4, #44]	@ 0x2c
	log_csv.config_info.start_mode = "Manual";
 800ad88:	4b44      	ldr	r3, [pc, #272]	@ (800ae9c <csv_conf_info+0x19c>)
    char tmp_buff[256] = {0};
 800ad8a:	0052      	lsls	r2, r2, #1
	log_csv.config_info.start_mode = "Manual";
 800ad8c:	6263      	str	r3, [r4, #36]	@ 0x24
	log_csv.config_info.stop_mode = "Manual & Software";
 800ad8e:	4b44      	ldr	r3, [pc, #272]	@ (800aea0 <csv_conf_info+0x1a0>)
 800ad90:	62a3      	str	r3, [r4, #40]	@ 0x28
    char tmp_buff[256] = {0};
 800ad92:	f00f fcdf 	bl	801a754 <memset>
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ad96:	4943      	ldr	r1, [pc, #268]	@ (800aea4 <csv_conf_info+0x1a4>)
 800ad98:	a810      	add	r0, sp, #64	@ 0x40
 800ad9a:	f00f fd92 	bl	801a8c2 <strcpy>
    if (buffer == NULL || buffer_size == 0) {
 800ad9e:	69e0      	ldr	r0, [r4, #28]
 800ada0:	a90c      	add	r1, sp, #48	@ 0x30
 800ada2:	2210      	movs	r2, #16
 800ada4:	f7ff ff88 	bl	800acb8 <seconds_to_hms_string.part.0>
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ada8:	ab0c      	add	r3, sp, #48	@ 0x30
 800adaa:	4e3f      	ldr	r6, [pc, #252]	@ (800aea8 <csv_conf_info+0x1a8>)
 800adac:	9302      	str	r3, [sp, #8]
 800adae:	4b3f      	ldr	r3, [pc, #252]	@ (800aeac <csv_conf_info+0x1ac>)
 800adb0:	0032      	movs	r2, r6
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	21b4      	movs	r1, #180	@ 0xb4
 800adb6:	002b      	movs	r3, r5
 800adb8:	9501      	str	r5, [sp, #4]
 800adba:	a823      	add	r0, sp, #140	@ 0x8c
 800adbc:	f00f fb78 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Temp Log Interval",
                       label_width , tmp);

    log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800adc0:	9a05      	ldr	r2, [sp, #20]
 800adc2:	783b      	ldrb	r3, [r7, #0]
 800adc4:	7812      	ldrb	r2, [r2, #0]
 800adc6:	a90c      	add	r1, sp, #48	@ 0x30
 800adc8:	0212      	lsls	r2, r2, #8
 800adca:	431a      	orrs	r2, r3
 800adcc:	9b06      	ldr	r3, [sp, #24]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	4313      	orrs	r3, r2
 800add4:	9a07      	ldr	r2, [sp, #28]
 800add6:	7810      	ldrb	r0, [r2, #0]
 800add8:	2210      	movs	r2, #16
 800adda:	0600      	lsls	r0, r0, #24
 800addc:	4318      	orrs	r0, r3
 800adde:	6220      	str	r0, [r4, #32]
    if (buffer == NULL || buffer_size == 0) {
 800ade0:	f7ff ff6a 	bl	800acb8 <seconds_to_hms_string.part.0>
    seconds_to_hms_string(log_csv.config_info.rad_interval_sec, tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ade4:	208f      	movs	r0, #143	@ 0x8f
 800ade6:	ab0c      	add	r3, sp, #48	@ 0x30
 800ade8:	9302      	str	r3, [sp, #8]
 800adea:	4b31      	ldr	r3, [pc, #196]	@ (800aeb0 <csv_conf_info+0x1b0>)
 800adec:	0032      	movs	r2, r6
 800adee:	ae08      	add	r6, sp, #32
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	2191      	movs	r1, #145	@ 0x91
 800adf4:	002b      	movs	r3, r5
 800adf6:	9501      	str	r5, [sp, #4]
 800adf8:	1980      	adds	r0, r0, r6
 800adfa:	f00f fb59 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Rad Log Interval",
                       label_width , tmp);


    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800adfe:	20b1      	movs	r0, #177	@ 0xb1
 800ae00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ae02:	4f2c      	ldr	r7, [pc, #176]	@ (800aeb4 <csv_conf_info+0x1b4>)
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	4b2c      	ldr	r3, [pc, #176]	@ (800aeb8 <csv_conf_info+0x1b8>)
 800ae08:	003a      	movs	r2, r7
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	216f      	movs	r1, #111	@ 0x6f
 800ae0e:	002b      	movs	r3, r5
 800ae10:	1980      	adds	r0, r0, r6
 800ae12:	f00f fb4d 	bl	801a4b0 <sniprintf>
                       "%-*s: %-20s\n", label_width, "Start Mode",
                       log_csv.config_info.start_mode);

    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ae16:	2380      	movs	r3, #128	@ 0x80
    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800ae18:	3091      	adds	r0, #145	@ 0x91
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	1a19      	subs	r1, r3, r0
 800ae1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ae20:	aa10      	add	r2, sp, #64	@ 0x40
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	4b25      	ldr	r3, [pc, #148]	@ (800aebc <csv_conf_info+0x1bc>)
    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800ae26:	0006      	movs	r6, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	1810      	adds	r0, r2, r0
 800ae2c:	002b      	movs	r3, r5
 800ae2e:	003a      	movs	r2, r7
 800ae30:	f00f fb3e 	bl	801a4b0 <sniprintf>
                       "%-*s: %-20s\n", label_width, "Stop Mode",
                       log_csv.config_info.stop_mode);

    log_csv.config_info.start_delay_sec = (unsigned long)(dev_setting ->start_delay);
 800ae34:	9a08      	ldr	r2, [sp, #32]
 800ae36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae38:	7813      	ldrb	r3, [r2, #0]
 800ae3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ae3c:	1836      	adds	r6, r6, r0
    log_csv.config_info.start_delay_sec = (unsigned long)(dev_setting ->start_delay);
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	0212      	lsls	r2, r2, #8
 800ae42:	431a      	orrs	r2, r3
 800ae44:	780b      	ldrb	r3, [r1, #0]
 800ae46:	a90c      	add	r1, sp, #48	@ 0x30
 800ae48:	041b      	lsls	r3, r3, #16
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae4e:	7810      	ldrb	r0, [r2, #0]
 800ae50:	2210      	movs	r2, #16
 800ae52:	0600      	lsls	r0, r0, #24
 800ae54:	4318      	orrs	r0, r3
 800ae56:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (buffer == NULL || buffer_size == 0) {
 800ae58:	f7ff ff2e 	bl	800acb8 <seconds_to_hms_string.part.0>
    seconds_to_hms_string(log_csv.config_info.start_delay_sec,
                           tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ae5c:	2380      	movs	r3, #128	@ 0x80
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	1b99      	subs	r1, r3, r6
 800ae62:	ab10      	add	r3, sp, #64	@ 0x40
 800ae64:	1998      	adds	r0, r3, r6
 800ae66:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae68:	9302      	str	r3, [sp, #8]
 800ae6a:	4b15      	ldr	r3, [pc, #84]	@ (800aec0 <csv_conf_info+0x1c0>)
 800ae6c:	4a15      	ldr	r2, [pc, #84]	@ (800aec4 <csv_conf_info+0x1c4>)
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	9501      	str	r5, [sp, #4]
 800ae72:	002b      	movs	r3, r5
 800ae74:	f00f fb1c 	bl	801a4b0 <sniprintf>
                       "%-*s: %-*s\n\n", label_width, "Start Delay",
                       label_width, tmp);

    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800ae78:	23c6      	movs	r3, #198	@ 0xc6
 800ae7a:	22c8      	movs	r2, #200	@ 0xc8
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	58e3      	ldr	r3, [r4, r3]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ae80:	1836      	adds	r6, r6, r0
    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800ae82:	3301      	adds	r3, #1
 800ae84:	199b      	adds	r3, r3, r6
 800ae86:	0052      	lsls	r2, r2, #1
    fatfs_write_str(&csv_file, tmp_buff);
 800ae88:	490f      	ldr	r1, [pc, #60]	@ (800aec8 <csv_conf_info+0x1c8>)
 800ae8a:	a810      	add	r0, sp, #64	@ 0x40
    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800ae8c:	50a3      	str	r3, [r4, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800ae8e:	f00a ff33 	bl	8015cf8 <f_puts>
}
 800ae92:	b051      	add	sp, #324	@ 0x144
 800ae94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae96:	46c0      	nop			@ (mov r8, r8)
 800ae98:	20000058 	.word	0x20000058
 800ae9c:	0801eea1 	.word	0x0801eea1
 800aea0:	0801eea8 	.word	0x0801eea8
 800aea4:	0801eeba 	.word	0x0801eeba
 800aea8:	0801edce 	.word	0x0801edce
 800aeac:	0801ef07 	.word	0x0801ef07
 800aeb0:	0801ef19 	.word	0x0801ef19
 800aeb4:	0801ef2a 	.word	0x0801ef2a
 800aeb8:	0801ef37 	.word	0x0801ef37
 800aebc:	0801ef42 	.word	0x0801ef42
 800aec0:	0801ef4c 	.word	0x0801ef4c
 800aec4:	0801ee0d 	.word	0x0801ee0d
 800aec8:	20002c60 	.word	0x20002c60

0800aecc <seconds_to_dhms_string_long.part.0>:
void seconds_to_dhms_string_long(uint32_t total_seconds, char *buffer, size_t buffer_size)
 800aecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aece:	000d      	movs	r5, r1
 800aed0:	b087      	sub	sp, #28
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800aed2:	4914      	ldr	r1, [pc, #80]	@ (800af24 <seconds_to_dhms_string_long.part.0+0x58>)
void seconds_to_dhms_string_long(uint32_t total_seconds, char *buffer, size_t buffer_size)
 800aed4:	0016      	movs	r6, r2
 800aed6:	0004      	movs	r4, r0
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800aed8:	f7f5 f946 	bl	8000168 <__udivsi3>
    unsigned int seconds = total_seconds % 60;                 // 남은 초
 800aedc:	213c      	movs	r1, #60	@ 0x3c
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800aede:	9005      	str	r0, [sp, #20]
    unsigned int seconds = total_seconds % 60;                 // 남은 초
 800aee0:	0020      	movs	r0, r4
 800aee2:	f7f5 f9c7 	bl	8000274 <__aeabi_uidivmod>
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800aee6:	9102      	str	r1, [sp, #8]
    unsigned int minutes = (total_seconds % 3600) / 60;        // 나머지에서 분 추출
 800aee8:	21e1      	movs	r1, #225	@ 0xe1
 800aeea:	0020      	movs	r0, r4
 800aeec:	0109      	lsls	r1, r1, #4
 800aeee:	f7f5 f9c1 	bl	8000274 <__aeabi_uidivmod>
 800aef2:	0008      	movs	r0, r1
 800aef4:	213c      	movs	r1, #60	@ 0x3c
 800aef6:	f7f5 f937 	bl	8000168 <__udivsi3>
    unsigned int hours   = (total_seconds % 86400) / 3600;     // 나머지에서 시간 추출
 800aefa:	490a      	ldr	r1, [pc, #40]	@ (800af24 <seconds_to_dhms_string_long.part.0+0x58>)
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800aefc:	9001      	str	r0, [sp, #4]
    unsigned int hours   = (total_seconds % 86400) / 3600;     // 나머지에서 시간 추출
 800aefe:	0020      	movs	r0, r4
 800af00:	f7f5 f9b8 	bl	8000274 <__aeabi_uidivmod>
 800af04:	0008      	movs	r0, r1
 800af06:	21e1      	movs	r1, #225	@ 0xe1
 800af08:	0109      	lsls	r1, r1, #4
 800af0a:	f7f5 f92d 	bl	8000168 <__udivsi3>
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800af0e:	4f06      	ldr	r7, [pc, #24]	@ (800af28 <seconds_to_dhms_string_long.part.0+0x5c>)
 800af10:	9000      	str	r0, [sp, #0]
 800af12:	003a      	movs	r2, r7
 800af14:	0031      	movs	r1, r6
 800af16:	0028      	movs	r0, r5
 800af18:	9b05      	ldr	r3, [sp, #20]
 800af1a:	f00f fac9 	bl	801a4b0 <sniprintf>
}
 800af1e:	b007      	add	sp, #28
 800af20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af22:	46c0      	nop			@ (mov r8, r8)
 800af24:	00015180 	.word	0x00015180
 800af28:	0801ef58 	.word	0x0801ef58

0800af2c <csv_alarm_summary_fill>:
}


static void csv_alarm_summary_fill(const DeviceSettings *dev_setting)
{
    char tmp_buff[768] = {0};
 800af2c:	22c0      	movs	r2, #192	@ 0xc0
{
 800af2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af30:	4c8f      	ldr	r4, [pc, #572]	@ (800b170 <csv_alarm_summary_fill+0x244>)
    char tmp_buff[768] = {0};
 800af32:	2100      	movs	r1, #0
{
 800af34:	44a5      	add	sp, r4
    char tmp_buff[768] = {0};
 800af36:	0092      	lsls	r2, r2, #2
{
 800af38:	0005      	movs	r5, r0
    char tmp_buff[768] = {0};
 800af3a:	a81a      	add	r0, sp, #104	@ 0x68
 800af3c:	f00f fc0a 	bl	801a754 <memset>
    int offset = 0;
    const int fixed_block_size = sizeof(tmp_buff);

    printf("[CSV][AlarmFill] 알람 요약 데이터 채우기 시작\r\n");
 800af40:	488c      	ldr	r0, [pc, #560]	@ (800b174 <csv_alarm_summary_fill+0x248>)
 800af42:	f00f faab 	bl	801a49c <puts>

    // ★ 더 이상 zones[].threshold 에 /10.0f 로 저장하지 않습니다. (표시는 지역변수로 처리)

    // ── 본문(각 Zone 라인)만 tmp_buff에 누적 ──
    for (int i = 0; i < 6; i++) {
 800af46:	4b8c      	ldr	r3, [pc, #560]	@ (800b178 <csv_alarm_summary_fill+0x24c>)
 800af48:	9307      	str	r3, [sp, #28]
 800af4a:	2300      	movs	r3, #0
    int offset = 0;
 800af4c:	001e      	movs	r6, r3
    for (int i = 0; i < 6; i++) {
 800af4e:	9306      	str	r3, [sp, #24]
        char s_delay[32], s_tot[32];
        uint32_t delay_sec = 0;
        uint32_t violations = 0;

        switch (i) {
 800af50:	9b06      	ldr	r3, [sp, #24]
            case 0: delay_sec = dev_setting->alarm_delay_rh1; violations = log_csv.logging_summary.RH1_alarm_count; break;
 800af52:	002a      	movs	r2, r5
        switch (i) {
 800af54:	1e58      	subs	r0, r3, #1
 800af56:	4b89      	ldr	r3, [pc, #548]	@ (800b17c <csv_alarm_summary_fill+0x250>)
 800af58:	2804      	cmp	r0, #4
 800af5a:	d804      	bhi.n	800af66 <csv_alarm_summary_fill+0x3a>
 800af5c:	f7f5 f8e6 	bl	800012c <__gnu_thumb1_case_uqi>
 800af60:	988f867d 	.word	0x988f867d
 800af64:	a1          	.byte	0xa1
 800af65:	00          	.byte	0x00
            case 0: delay_sec = dev_setting->alarm_delay_rh1; violations = log_csv.logging_summary.RH1_alarm_count; break;
 800af66:	0029      	movs	r1, r5
 800af68:	317b      	adds	r1, #123	@ 0x7b
 800af6a:	780c      	ldrb	r4, [r1, #0]
 800af6c:	327a      	adds	r2, #122	@ 0x7a
 800af6e:	7812      	ldrb	r2, [r2, #0]
 800af70:	0224      	lsls	r4, r4, #8
 800af72:	4314      	orrs	r4, r2
 800af74:	22b8      	movs	r2, #184	@ 0xb8
            case 1: delay_sec = dev_setting->alarm_delay_rh2; violations = log_csv.logging_summary.RH2_alarm_count; break;
            case 2: delay_sec = dev_setting->alarm_delay_th1; violations = log_csv.logging_summary.TH1_alarm_count; break;
            case 3: delay_sec = dev_setting->alarm_delay_th2; violations = log_csv.logging_summary.TH2_alarm_count; break;
            case 4: delay_sec = dev_setting->alarm_delay_tl1; violations = log_csv.logging_summary.TL1_alarm_count; break;
            case 5: delay_sec = dev_setting->alarm_delay_tl2; violations = log_csv.logging_summary.TL2_alarm_count; break;
 800af76:	0052      	lsls	r2, r2, #1
 800af78:	5a9f      	ldrh	r7, [r3, r2]
    if (buffer == NULL || buffer_size == 0) {
 800af7a:	0020      	movs	r0, r4
 800af7c:	2220      	movs	r2, #32
 800af7e:	a90a      	add	r1, sp, #40	@ 0x28
 800af80:	f7ff ffa4 	bl	800aecc <seconds_to_dhms_string_long.part.0>
        }

        seconds_to_dhms_string_long(delay_sec, s_delay, sizeof(s_delay));

        // 예시 계산(실제 위반 누적 시간을 따로 관리한다면 그 값을 쓰세요)
        uint32_t tot_violation_sec = 0;
 800af84:	2200      	movs	r2, #0
        if (log_csv.logging_summary.elapsed_time_sec > delay_sec) {
 800af86:	4b7e      	ldr	r3, [pc, #504]	@ (800b180 <csv_alarm_summary_fill+0x254>)
        uint32_t tot_violation_sec = 0;
 800af88:	9208      	str	r2, [sp, #32]
        if (log_csv.logging_summary.elapsed_time_sec > delay_sec) {
 800af8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	d901      	bls.n	800af94 <csv_alarm_summary_fill+0x68>
            tot_violation_sec = log_csv.logging_summary.elapsed_time_sec - delay_sec;
 800af90:	1b1b      	subs	r3, r3, r4
 800af92:	9308      	str	r3, [sp, #32]
    if (buffer == NULL || buffer_size == 0) {
 800af94:	2220      	movs	r2, #32
 800af96:	9808      	ldr	r0, [sp, #32]
 800af98:	a912      	add	r1, sp, #72	@ 0x48
 800af9a:	f7ff ff97 	bl	800aecc <seconds_to_dhms_string_long.part.0>
        }
        seconds_to_dhms_string_long(tot_violation_sec, s_tot, sizeof(s_tot));

        const char *status = (violations >= 1) ? "ALARM" : "OK";
 800af9e:	4b79      	ldr	r3, [pc, #484]	@ (800b184 <csv_alarm_summary_fill+0x258>)
 800afa0:	9309      	str	r3, [sp, #36]	@ 0x24
 800afa2:	2f00      	cmp	r7, #0
 800afa4:	d001      	beq.n	800afaa <csv_alarm_summary_fill+0x7e>
 800afa6:	4b78      	ldr	r3, [pc, #480]	@ (800b188 <csv_alarm_summary_fill+0x25c>)
 800afa8:	9309      	str	r3, [sp, #36]	@ 0x24
        log_csv.alarm_summary.zones[i].status = (violations >= 1) ? ALARM_STATUS_ALARM : ALARM_STATUS_OK;
 800afaa:	003b      	movs	r3, r7
 800afac:	1e5a      	subs	r2, r3, #1
 800afae:	4193      	sbcs	r3, r2
 800afb0:	9a07      	ldr	r2, [sp, #28]
 800afb2:	7513      	strb	r3, [r2, #20]
        log_csv.alarm_summary.zones[i].alarm_delay_sec = delay_sec;
 800afb4:	0013      	movs	r3, r2
 800afb6:	6014      	str	r4, [r2, #0]
        log_csv.alarm_summary.zones[i].total_time_in_violation_minutes = tot_violation_sec; // 이름과 달리 sec일 수 있음
 800afb8:	001c      	movs	r4, r3
 800afba:	9a08      	ldr	r2, [sp, #32]
        log_csv.alarm_summary.zones[i].violation_count = violations;
 800afbc:	611f      	str	r7, [r3, #16]
        log_csv.alarm_summary.zones[i].total_time_in_violation_minutes = tot_violation_sec; // 이름과 달리 sec일 수 있음
 800afbe:	60da      	str	r2, [r3, #12]

        // ★ 표시용 threshold 계산 & 올바른 포맷으로 출력
        if (i < 2) {
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	3c14      	subs	r4, #20
 800afc4:	9408      	str	r4, [sp, #32]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	dd00      	ble.n	800afcc <csv_alarm_summary_fill+0xa0>
 800afca:	e083      	b.n	800b0d4 <csv_alarm_summary_fill+0x1a8>
            // RH1/RH2: 원시단위가 0.01이므로 /10 해서 정수 표시 (예: 200000 → 20000)
            unsigned rh_disp = (i == 0) ? (unsigned)(dev_setting->alarm_rh1 / 10U)
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d000      	beq.n	800afd2 <csv_alarm_summary_fill+0xa6>
 800afd0:	e070      	b.n	800b0b4 <csv_alarm_summary_fill+0x188>
            unsigned rh_disp = (i == 0) ? (unsigned)(dev_setting->alarm_rh1 / 10U)
 800afd2:	002a      	movs	r2, r5
 800afd4:	002b      	movs	r3, r5
 800afd6:	3292      	adds	r2, #146	@ 0x92
 800afd8:	7812      	ldrb	r2, [r2, #0]
 800afda:	3391      	adds	r3, #145	@ 0x91
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	0212      	lsls	r2, r2, #8
 800afe0:	431a      	orrs	r2, r3
 800afe2:	002b      	movs	r3, r5
 800afe4:	3393      	adds	r3, #147	@ 0x93
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	041b      	lsls	r3, r3, #16
 800afea:	4313      	orrs	r3, r2
 800afec:	002a      	movs	r2, r5
 800afee:	3294      	adds	r2, #148	@ 0x94
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800aff0:	7810      	ldrb	r0, [r2, #0]
 800aff2:	210a      	movs	r1, #10
 800aff4:	0600      	lsls	r0, r0, #24
 800aff6:	4318      	orrs	r0, r3
 800aff8:	f7f5 f8b6 	bl	8000168 <__udivsi3>
 800affc:	0003      	movs	r3, r0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800affe:	4a63      	ldr	r2, [pc, #396]	@ (800b18c <csv_alarm_summary_fill+0x260>)
            // TH/TL: 원시단위가 0.1이므로 /10 해서 부호 있는 정수 표시 (예: -600 → -60)
            int thtl_disp = (i == 2) ? (int)(dev_setting->alarm_th1 / 10)
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
                                       : (int)(dev_setting->alarm_tl2 / 10);
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800b000:	21c0      	movs	r1, #192	@ 0xc0
 800b002:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b004:	9703      	str	r7, [sp, #12]
 800b006:	af12      	add	r7, sp, #72	@ 0x48
 800b008:	9702      	str	r7, [sp, #8]
 800b00a:	0089      	lsls	r1, r1, #2
 800b00c:	a81a      	add	r0, sp, #104	@ 0x68
 800b00e:	af0a      	add	r7, sp, #40	@ 0x28
 800b010:	1b89      	subs	r1, r1, r6
 800b012:	1980      	adds	r0, r0, r6
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	9404      	str	r4, [sp, #16]
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	9701      	str	r7, [sp, #4]
 800b01c:	f00f fa48 	bl	801a4b0 <sniprintf>
                               log_csv.alarm_summary.zones[i].zone_name,
                               thtl_disp, s_delay, s_tot,
                               (unsigned long)violations, status);
        }

        if (offset >= fixed_block_size) {
 800b020:	23c0      	movs	r3, #192	@ 0xc0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800b022:	1836      	adds	r6, r6, r0
        if (offset >= fixed_block_size) {
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	429e      	cmp	r6, r3
 800b028:	da00      	bge.n	800b02c <csv_alarm_summary_fill+0x100>
 800b02a:	e07e      	b.n	800b12a <csv_alarm_summary_fill+0x1fe>
            printf("[CSV][AlarmFill][WARN] tmp_buff overflow, truncated\r\n");
            offset = fixed_block_size; // 안전
 800b02c:	26c0      	movs	r6, #192	@ 0xc0
            printf("[CSV][AlarmFill][WARN] tmp_buff overflow, truncated\r\n");
 800b02e:	4858      	ldr	r0, [pc, #352]	@ (800b190 <csv_alarm_summary_fill+0x264>)
 800b030:	f00f fa34 	bl	801a49c <puts>
            offset = fixed_block_size; // 안전
 800b034:	00b6      	lsls	r6, r6, #2
            break;
        }
    }

    // ── CSV에 덮어쓰기 ──
    FRESULT fr = f_lseek(&csv_file, log_csv.csv_fiels_offset.alarm_summary_fill_offset);
 800b036:	24ca      	movs	r4, #202	@ 0xca
 800b038:	4d50      	ldr	r5, [pc, #320]	@ (800b17c <csv_alarm_summary_fill+0x250>)
 800b03a:	4f56      	ldr	r7, [pc, #344]	@ (800b194 <csv_alarm_summary_fill+0x268>)
 800b03c:	0064      	lsls	r4, r4, #1
 800b03e:	5929      	ldr	r1, [r5, r4]
 800b040:	0038      	movs	r0, r7
 800b042:	f00a f97d 	bl	8015340 <f_lseek>
 800b046:	1e01      	subs	r1, r0, #0
    if (fr != FR_OK) {
 800b048:	d100      	bne.n	800b04c <csv_alarm_summary_fill+0x120>
 800b04a:	e079      	b.n	800b140 <csv_alarm_summary_fill+0x214>
        printf("[CSV][AlarmFill][ERR] f_lseek fail: 0x%02X\r\n", fr);
 800b04c:	4852      	ldr	r0, [pc, #328]	@ (800b198 <csv_alarm_summary_fill+0x26c>)
 800b04e:	f00f f9b5 	bl	801a3bc <iprintf>
               (unsigned)to_write, (unsigned)ALARM_SUMMARY_PAD_BYTES);
    }

    printf("[CSV][AlarmFill] 알람 요약 데이터 채움 완료: %u bytes at offset %lu\r\n",
           (unsigned)to_write, (unsigned long)log_csv.csv_fiels_offset.alarm_summary_fill_offset);
}
 800b052:	23db      	movs	r3, #219	@ 0xdb
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	449d      	add	sp, r3
 800b058:	bdf0      	pop	{r4, r5, r6, r7, pc}
            case 1: delay_sec = dev_setting->alarm_delay_rh2; violations = log_csv.logging_summary.RH2_alarm_count; break;
 800b05a:	0029      	movs	r1, r5
 800b05c:	317d      	adds	r1, #125	@ 0x7d
 800b05e:	780c      	ldrb	r4, [r1, #0]
 800b060:	327c      	adds	r2, #124	@ 0x7c
 800b062:	7812      	ldrb	r2, [r2, #0]
 800b064:	0224      	lsls	r4, r4, #8
 800b066:	4314      	orrs	r4, r2
 800b068:	22b9      	movs	r2, #185	@ 0xb9
 800b06a:	e784      	b.n	800af76 <csv_alarm_summary_fill+0x4a>
            case 2: delay_sec = dev_setting->alarm_delay_th1; violations = log_csv.logging_summary.TH1_alarm_count; break;
 800b06c:	0029      	movs	r1, r5
 800b06e:	317f      	adds	r1, #127	@ 0x7f
 800b070:	780c      	ldrb	r4, [r1, #0]
 800b072:	327e      	adds	r2, #126	@ 0x7e
 800b074:	7812      	ldrb	r2, [r2, #0]
 800b076:	0224      	lsls	r4, r4, #8
 800b078:	4314      	orrs	r4, r2
 800b07a:	22ba      	movs	r2, #186	@ 0xba
 800b07c:	e77b      	b.n	800af76 <csv_alarm_summary_fill+0x4a>
            case 3: delay_sec = dev_setting->alarm_delay_th2; violations = log_csv.logging_summary.TH2_alarm_count; break;
 800b07e:	0029      	movs	r1, r5
 800b080:	3181      	adds	r1, #129	@ 0x81
 800b082:	780c      	ldrb	r4, [r1, #0]
 800b084:	3280      	adds	r2, #128	@ 0x80
 800b086:	7812      	ldrb	r2, [r2, #0]
 800b088:	0224      	lsls	r4, r4, #8
 800b08a:	4314      	orrs	r4, r2
 800b08c:	22bb      	movs	r2, #187	@ 0xbb
 800b08e:	e772      	b.n	800af76 <csv_alarm_summary_fill+0x4a>
            case 4: delay_sec = dev_setting->alarm_delay_tl1; violations = log_csv.logging_summary.TL1_alarm_count; break;
 800b090:	0029      	movs	r1, r5
 800b092:	3183      	adds	r1, #131	@ 0x83
 800b094:	780c      	ldrb	r4, [r1, #0]
 800b096:	3282      	adds	r2, #130	@ 0x82
 800b098:	7812      	ldrb	r2, [r2, #0]
 800b09a:	0224      	lsls	r4, r4, #8
 800b09c:	4314      	orrs	r4, r2
 800b09e:	22bc      	movs	r2, #188	@ 0xbc
 800b0a0:	e769      	b.n	800af76 <csv_alarm_summary_fill+0x4a>
            case 5: delay_sec = dev_setting->alarm_delay_tl2; violations = log_csv.logging_summary.TL2_alarm_count; break;
 800b0a2:	0029      	movs	r1, r5
 800b0a4:	3185      	adds	r1, #133	@ 0x85
 800b0a6:	780c      	ldrb	r4, [r1, #0]
 800b0a8:	3284      	adds	r2, #132	@ 0x84
 800b0aa:	7812      	ldrb	r2, [r2, #0]
 800b0ac:	0224      	lsls	r4, r4, #8
 800b0ae:	4314      	orrs	r4, r2
 800b0b0:	22bd      	movs	r2, #189	@ 0xbd
 800b0b2:	e760      	b.n	800af76 <csv_alarm_summary_fill+0x4a>
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800b0b4:	002a      	movs	r2, r5
 800b0b6:	002b      	movs	r3, r5
 800b0b8:	329a      	adds	r2, #154	@ 0x9a
 800b0ba:	7812      	ldrb	r2, [r2, #0]
 800b0bc:	3399      	adds	r3, #153	@ 0x99
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	0212      	lsls	r2, r2, #8
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	002b      	movs	r3, r5
 800b0c6:	339b      	adds	r3, #155	@ 0x9b
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	041b      	lsls	r3, r3, #16
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	002a      	movs	r2, r5
 800b0d0:	329c      	adds	r2, #156	@ 0x9c
 800b0d2:	e78d      	b.n	800aff0 <csv_alarm_summary_fill+0xc4>
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
 800b0d4:	9b06      	ldr	r3, [sp, #24]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d10f      	bne.n	800b0fa <csv_alarm_summary_fill+0x1ce>
            int thtl_disp = (i == 2) ? (int)(dev_setting->alarm_th1 / 10)
 800b0da:	002b      	movs	r3, r5
 800b0dc:	002a      	movs	r2, r5
 800b0de:	3395      	adds	r3, #149	@ 0x95
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	3296      	adds	r2, #150	@ 0x96
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800b0e4:	7810      	ldrb	r0, [r2, #0]
 800b0e6:	210a      	movs	r1, #10
 800b0e8:	0200      	lsls	r0, r0, #8
 800b0ea:	4318      	orrs	r0, r3
 800b0ec:	0400      	lsls	r0, r0, #16
 800b0ee:	1400      	asrs	r0, r0, #16
 800b0f0:	f7f5 f8c4 	bl	800027c <__divsi3>
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800b0f4:	4a29      	ldr	r2, [pc, #164]	@ (800b19c <csv_alarm_summary_fill+0x270>)
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800b0f6:	b203      	sxth	r3, r0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800b0f8:	e782      	b.n	800b000 <csv_alarm_summary_fill+0xd4>
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
 800b0fa:	9b06      	ldr	r3, [sp, #24]
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d105      	bne.n	800b10c <csv_alarm_summary_fill+0x1e0>
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
 800b100:	002b      	movs	r3, r5
 800b102:	002a      	movs	r2, r5
 800b104:	339d      	adds	r3, #157	@ 0x9d
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	329e      	adds	r2, #158	@ 0x9e
 800b10a:	e7eb      	b.n	800b0e4 <csv_alarm_summary_fill+0x1b8>
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800b10c:	9b06      	ldr	r3, [sp, #24]
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d105      	bne.n	800b11e <csv_alarm_summary_fill+0x1f2>
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
 800b112:	002b      	movs	r3, r5
 800b114:	002a      	movs	r2, r5
 800b116:	3397      	adds	r3, #151	@ 0x97
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	3298      	adds	r2, #152	@ 0x98
 800b11c:	e7e2      	b.n	800b0e4 <csv_alarm_summary_fill+0x1b8>
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800b11e:	002b      	movs	r3, r5
 800b120:	002a      	movs	r2, r5
 800b122:	339f      	adds	r3, #159	@ 0x9f
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	32a0      	adds	r2, #160	@ 0xa0
 800b128:	e7dc      	b.n	800b0e4 <csv_alarm_summary_fill+0x1b8>
    for (int i = 0; i < 6; i++) {
 800b12a:	9b06      	ldr	r3, [sp, #24]
 800b12c:	3301      	adds	r3, #1
 800b12e:	9306      	str	r3, [sp, #24]
 800b130:	9b07      	ldr	r3, [sp, #28]
 800b132:	332c      	adds	r3, #44	@ 0x2c
 800b134:	9307      	str	r3, [sp, #28]
 800b136:	9b06      	ldr	r3, [sp, #24]
 800b138:	2b06      	cmp	r3, #6
 800b13a:	d000      	beq.n	800b13e <csv_alarm_summary_fill+0x212>
 800b13c:	e708      	b.n	800af50 <csv_alarm_summary_fill+0x24>
 800b13e:	e77a      	b.n	800b036 <csv_alarm_summary_fill+0x10a>
    UINT bw = 0;
 800b140:	9012      	str	r0, [sp, #72]	@ 0x48
    fr = f_write(&csv_file, tmp_buff, to_write, &bw);
 800b142:	a91a      	add	r1, sp, #104	@ 0x68
 800b144:	0032      	movs	r2, r6
 800b146:	0038      	movs	r0, r7
 800b148:	ab12      	add	r3, sp, #72	@ 0x48
 800b14a:	f009 ffbd 	bl	80150c8 <f_write>
 800b14e:	1e01      	subs	r1, r0, #0
    if (fr != FR_OK || bw != to_write) {
 800b150:	d102      	bne.n	800b158 <csv_alarm_summary_fill+0x22c>
 800b152:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b154:	42b3      	cmp	r3, r6
 800b156:	d005      	beq.n	800b164 <csv_alarm_summary_fill+0x238>
        printf("[CSV][AlarmFill][ERR] f_write fail: 0x%02X, bw=%u/%u\r\n", fr, (unsigned)bw, (unsigned)to_write);
 800b158:	0033      	movs	r3, r6
 800b15a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b15c:	4810      	ldr	r0, [pc, #64]	@ (800b1a0 <csv_alarm_summary_fill+0x274>)
 800b15e:	f00f f92d 	bl	801a3bc <iprintf>
        return;
 800b162:	e776      	b.n	800b052 <csv_alarm_summary_fill+0x126>
    printf("[CSV][AlarmFill] 알람 요약 데이터 채움 완료: %u bytes at offset %lu\r\n",
 800b164:	0031      	movs	r1, r6
 800b166:	592a      	ldr	r2, [r5, r4]
 800b168:	480e      	ldr	r0, [pc, #56]	@ (800b1a4 <csv_alarm_summary_fill+0x278>)
 800b16a:	f00f f927 	bl	801a3bc <iprintf>
 800b16e:	e770      	b.n	800b052 <csv_alarm_summary_fill+0x126>
 800b170:	fffffc94 	.word	0xfffffc94
 800b174:	0801ef79 	.word	0x0801ef79
 800b178:	200000a4 	.word	0x200000a4
 800b17c:	20000058 	.word	0x20000058
 800b180:	20000154 	.word	0x20000154
 800b184:	0801ef76 	.word	0x0801ef76
 800b188:	0801ef70 	.word	0x0801ef70
 800b18c:	0801efb4 	.word	0x0801efb4
 800b190:	0801f002 	.word	0x0801f002
 800b194:	20002c60 	.word	0x20002c60
 800b198:	0801f037 	.word	0x0801f037
 800b19c:	0801efdb 	.word	0x0801efdb
 800b1a0:	0801f064 	.word	0x0801f064
 800b1a4:	0801f09b 	.word	0x0801f09b

0800b1a8 <time_to_dmyhms_string.part.0>:
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	0004      	movs	r4, r0
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800b1ac:	7863      	ldrb	r3, [r4, #1]
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800b1ae:	0008      	movs	r0, r1
 800b1b0:	0011      	movs	r1, r2
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800b1b2:	1e5a      	subs	r2, r3, #1
 800b1b4:	4d0a      	ldr	r5, [pc, #40]	@ (800b1e0 <time_to_dmyhms_string.part.0+0x38>)
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800b1b6:	b086      	sub	sp, #24
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800b1b8:	2a0b      	cmp	r2, #11
 800b1ba:	d802      	bhi.n	800b1c2 <time_to_dmyhms_string.part.0+0x1a>
 800b1bc:	4a09      	ldr	r2, [pc, #36]	@ (800b1e4 <time_to_dmyhms_string.part.0+0x3c>)
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	589d      	ldr	r5, [r3, r2]
    snprintf(buffer, buffer_size,
 800b1c2:	7966      	ldrb	r6, [r4, #5]
 800b1c4:	78a3      	ldrb	r3, [r4, #2]
 800b1c6:	9604      	str	r6, [sp, #16]
 800b1c8:	7926      	ldrb	r6, [r4, #4]
 800b1ca:	4a07      	ldr	r2, [pc, #28]	@ (800b1e8 <time_to_dmyhms_string.part.0+0x40>)
 800b1cc:	9603      	str	r6, [sp, #12]
 800b1ce:	78e6      	ldrb	r6, [r4, #3]
 800b1d0:	9602      	str	r6, [sp, #8]
 800b1d2:	7824      	ldrb	r4, [r4, #0]
 800b1d4:	9500      	str	r5, [sp, #0]
 800b1d6:	9401      	str	r4, [sp, #4]
 800b1d8:	f00f f96a 	bl	801a4b0 <sniprintf>
}
 800b1dc:	b006      	add	sp, #24
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	0801f0ec 	.word	0x0801f0ec
 800b1e4:	08020690 	.word	0x08020690
 800b1e8:	0801f0f0 	.word	0x0801f0f0

0800b1ec <csv_dump_log_entries_with_summary_seek>:
    // Remainder of the function
    log_csv.csv_fiels_offset.marked_events_offset = log_csv.csv_fiels_offset.logging_summary_offset + offset + 1;
    fatfs_write_str(&csv_file, tmp_buff);
}

static void csv_dump_log_entries_with_summary_seek(void) {
 800b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t max_idx = LOG_MAX_SIZE / ENTRY_SIZE;
    double sum_temp = 0.0, sum_dose = 0.0;
    uint32_t valid_count = 0;
    uint32_t valid_rad_count = 0;
    bool rh1_lat = false, rh2_lat = false, th1_lat = false, th2_lat = false, tl1_lat = false, tl2_lat = false;
    log_csv.logging_summary.RH1_alarm_count = 0;
 800b1ee:	2500      	movs	r5, #0
static void csv_dump_log_entries_with_summary_seek(void) {
 800b1f0:	4ce7      	ldr	r4, [pc, #924]	@ (800b590 <csv_dump_log_entries_with_summary_seek+0x3a4>)
    bool first_found = false;
    char tmp_buff[256];

    extern uint16_t idx_rad;
    extern uint16_t idx_temp;
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800b1f2:	4fe8      	ldr	r7, [pc, #928]	@ (800b594 <csv_dump_log_entries_with_summary_seek+0x3a8>)
static void csv_dump_log_entries_with_summary_seek(void) {
 800b1f4:	44a5      	add	sp, r4
    log_csv.logging_summary.RH1_alarm_count = 0;
 800b1f6:	4ce8      	ldr	r4, [pc, #928]	@ (800b598 <csv_dump_log_entries_with_summary_seek+0x3ac>)
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	5ef8      	ldrsh	r0, [r7, r3]
    log_csv.logging_summary.RH1_alarm_count = 0;
 800b1fc:	6765      	str	r5, [r4, #116]	@ 0x74
    log_csv.logging_summary.TH1_alarm_count = 0;
 800b1fe:	67a5      	str	r5, [r4, #120]	@ 0x78
    log_csv.logging_summary.TL1_alarm_count = 0;
 800b200:	67e5      	str	r5, [r4, #124]	@ 0x7c
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800b202:	f7f6 fa93 	bl	800172c <__aeabi_i2f>
 800b206:	49e5      	ldr	r1, [pc, #916]	@ (800b59c <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800b208:	f7f5 fcce 	bl	8000ba8 <__aeabi_fdiv>
 800b20c:	6460      	str	r0, [r4, #68]	@ 0x44
 800b20e:	900a      	str	r0, [sp, #40]	@ 0x28
    log_csv.logging_summary.lowest_temp    = device_config.temp_min / 10.0f;
 800b210:	2302      	movs	r3, #2
 800b212:	5ef8      	ldrsh	r0, [r7, r3]
 800b214:	f7f6 fa8a 	bl	800172c <__aeabi_i2f>
 800b218:	49e0      	ldr	r1, [pc, #896]	@ (800b59c <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800b21a:	f7f5 fcc5 	bl	8000ba8 <__aeabi_fdiv>
 800b21e:	1c06      	adds	r6, r0, #0
 800b220:	64a0      	str	r0, [r4, #72]	@ 0x48
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7f6 fad2 	bl	80017cc <__aeabi_ui2f>
 800b228:	49dd      	ldr	r1, [pc, #884]	@ (800b5a0 <csv_dump_log_entries_with_summary_seek+0x3b4>)
 800b22a:	f7f5 fcbd 	bl	8000ba8 <__aeabi_fdiv>

    // 1. Logging Summary Header 및 자리 확보
    char summary_buff[512] = {0};
 800b22e:	2280      	movs	r2, #128	@ 0x80
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800b230:	6520      	str	r0, [r4, #80]	@ 0x50
    char summary_buff[512] = {0};
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	0029      	movs	r1, r5
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800b236:	1c07      	adds	r7, r0, #0
    char summary_buff[512] = {0};
 800b238:	a8c8      	add	r0, sp, #800	@ 0x320
 800b23a:	f00f fa8b 	bl	801a754 <memset>
    int offset = 0;
    offset += snprintf(summary_buff + offset, sizeof(summary_buff) - offset,
 800b23e:	1c38      	adds	r0, r7, #0
 800b240:	f7f8 faaa 	bl	8003798 <__aeabi_f2d>
 800b244:	9004      	str	r0, [sp, #16]
 800b246:	9105      	str	r1, [sp, #20]
 800b248:	1c30      	adds	r0, r6, #0
 800b24a:	f7f8 faa5 	bl	8003798 <__aeabi_f2d>
 800b24e:	9002      	str	r0, [sp, #8]
 800b250:	9103      	str	r1, [sp, #12]
 800b252:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b254:	f7f8 faa0 	bl	8003798 <__aeabi_f2d>
 800b258:	9000      	str	r0, [sp, #0]
 800b25a:	9101      	str	r1, [sp, #4]
 800b25c:	2180      	movs	r1, #128	@ 0x80
 800b25e:	4cd1      	ldr	r4, [pc, #836]	@ (800b5a4 <csv_dump_log_entries_with_summary_seek+0x3b8>)
 800b260:	0089      	lsls	r1, r1, #2
 800b262:	0022      	movs	r2, r4
 800b264:	a8c8      	add	r0, sp, #800	@ 0x320
 800b266:	f00f f923 	bl	801a4b0 <sniprintf>
        "Highest Radiation Dose:%7.2f\n",
        log_csv.logging_summary.highest_temp,
        log_csv.logging_summary.lowest_temp,
        log_csv.logging_summary.highest_radiation);

    fatfs_write_str(&csv_file, summary_buff);
 800b26a:	4ccf      	ldr	r4, [pc, #828]	@ (800b5a8 <csv_dump_log_entries_with_summary_seek+0x3bc>)
 800b26c:	a8c8      	add	r0, sp, #800	@ 0x320
 800b26e:	0021      	movs	r1, r4
 800b270:	f00a fd42 	bl	8015cf8 <f_puts>
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800b274:	22d0      	movs	r2, #208	@ 0xd0

    char summary_padding[512];
    memset(summary_padding, ' ', sizeof(summary_padding));
 800b276:	20a4      	movs	r0, #164	@ 0xa4
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800b278:	6961      	ldr	r1, [r4, #20]
 800b27a:	4bcc      	ldr	r3, [pc, #816]	@ (800b5ac <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b27c:	0052      	lsls	r2, r2, #1
    memset(summary_padding, ' ', sizeof(summary_padding));
 800b27e:	00c0      	lsls	r0, r0, #3
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800b280:	5099      	str	r1, [r3, r2]
    memset(summary_padding, ' ', sizeof(summary_padding));
 800b282:	4468      	add	r0, sp
 800b284:	2120      	movs	r1, #32
 800b286:	3260      	adds	r2, #96	@ 0x60
 800b288:	f00f fa64 	bl	801a754 <memset>
    f_write(&csv_file, summary_padding, sizeof(summary_padding), NULL);
 800b28c:	21a4      	movs	r1, #164	@ 0xa4
 800b28e:	2280      	movs	r2, #128	@ 0x80
 800b290:	00c9      	lsls	r1, r1, #3
 800b292:	002b      	movs	r3, r5
 800b294:	0020      	movs	r0, r4
 800b296:	0092      	lsls	r2, r2, #2
 800b298:	4469      	add	r1, sp
 800b29a:	f009 ff15 	bl	80150c8 <f_write>
    // 2. 로그 헤더
    fatfs_write_str(&csv_file,
 800b29e:	0021      	movs	r1, r4
 800b2a0:	48c3      	ldr	r0, [pc, #780]	@ (800b5b0 <csv_dump_log_entries_with_summary_seek+0x3c4>)
 800b2a2:	f00a fd29 	bl	8015cf8 <f_puts>
    double sum_temp = 0.0, sum_dose = 0.0;
 800b2a6:	2400      	movs	r4, #0
 800b2a8:	2300      	movs	r3, #0
    bool first_found = false;
 800b2aa:	002e      	movs	r6, r5
    double sum_temp = 0.0, sum_dose = 0.0;
 800b2ac:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2ae:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b2b0:	9314      	str	r3, [sp, #80]	@ 0x50
 800b2b2:	9415      	str	r4, [sp, #84]	@ 0x54
    log_entry_t first = {0}, last = {0};
 800b2b4:	950a      	str	r5, [sp, #40]	@ 0x28
 800b2b6:	9516      	str	r5, [sp, #88]	@ 0x58
 800b2b8:	951f      	str	r5, [sp, #124]	@ 0x7c
 800b2ba:	951e      	str	r5, [sp, #120]	@ 0x78
 800b2bc:	951d      	str	r5, [sp, #116]	@ 0x74
 800b2be:	951c      	str	r5, [sp, #112]	@ 0x70
 800b2c0:	951b      	str	r5, [sp, #108]	@ 0x6c
    uint32_t valid_rad_count = 0;
 800b2c2:	950e      	str	r5, [sp, #56]	@ 0x38
    log_entry_t first = {0}, last = {0};
 800b2c4:	951a      	str	r5, [sp, #104]	@ 0x68
 800b2c6:	9511      	str	r5, [sp, #68]	@ 0x44
 800b2c8:	9510      	str	r5, [sp, #64]	@ 0x40
 800b2ca:	950d      	str	r5, [sp, #52]	@ 0x34
 800b2cc:	950f      	str	r5, [sp, #60]	@ 0x3c
        "************************************************\n"
        "Index,Date,Time,Temperature,Rad,Mark\n");

    // 3. Flash 순회
    for (uint32_t i = 0; i < max_idx; i++) {
        meas_data_log_read_entry(i, &entry);
 800b2ce:	ac2a      	add	r4, sp, #168	@ 0xa8
 800b2d0:	0021      	movs	r1, r4
 800b2d2:	0028      	movs	r0, r5
 800b2d4:	f7fd fb1c 	bl	8008910 <meas_data_log_read_entry>
        if (entry.year == 0xFF || entry.index == 0xFFFF || entry.month == 0xFF) break;
 800b2d8:	78a3      	ldrb	r3, [r4, #2]
 800b2da:	2bff      	cmp	r3, #255	@ 0xff
 800b2dc:	d100      	bne.n	800b2e0 <csv_dump_log_entries_with_summary_seek+0xf4>
 800b2de:	e2a6      	b.n	800b82e <csv_dump_log_entries_with_summary_seek+0x642>
 800b2e0:	8822      	ldrh	r2, [r4, #0]
 800b2e2:	4bb4      	ldr	r3, [pc, #720]	@ (800b5b4 <csv_dump_log_entries_with_summary_seek+0x3c8>)
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d100      	bne.n	800b2ea <csv_dump_log_entries_with_summary_seek+0xfe>
 800b2e8:	e2a1      	b.n	800b82e <csv_dump_log_entries_with_summary_seek+0x642>
 800b2ea:	78e3      	ldrb	r3, [r4, #3]
 800b2ec:	2bff      	cmp	r3, #255	@ 0xff
 800b2ee:	d100      	bne.n	800b2f2 <csv_dump_log_entries_with_summary_seek+0x106>
 800b2f0:	e29d      	b.n	800b82e <csv_dump_log_entries_with_summary_seek+0x642>

        float temp = entry.temperature / 10.0f;
 800b2f2:	230a      	movs	r3, #10
 800b2f4:	5ee0      	ldrsh	r0, [r4, r3]
 800b2f6:	f7f6 fa19 	bl	800172c <__aeabi_i2f>
 800b2fa:	49a8      	ldr	r1, [pc, #672]	@ (800b59c <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800b2fc:	f7f5 fc54 	bl	8000ba8 <__aeabi_fdiv>
 800b300:	9017      	str	r0, [sp, #92]	@ 0x5c
        float dose = entry.dose / 100.0f;
 800b302:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800b304:	f7f6 fa62 	bl	80017cc <__aeabi_ui2f>
 800b308:	49a5      	ldr	r1, [pc, #660]	@ (800b5a0 <csv_dump_log_entries_with_summary_seek+0x3b4>)
 800b30a:	f7f5 fc4d 	bl	8000ba8 <__aeabi_fdiv>
        char rad_str[16];

        // Rad 미측정 구간이면 "n/a"로
        if (entry.rad_measure_mark == 0) {
 800b30e:	7c63      	ldrb	r3, [r4, #17]
        float dose = entry.dose / 100.0f;
 800b310:	1c07      	adds	r7, r0, #0
        if (entry.rad_measure_mark == 0) {
 800b312:	2b00      	cmp	r3, #0
 800b314:	d000      	beq.n	800b318 <csv_dump_log_entries_with_summary_seek+0x12c>
 800b316:	e25f      	b.n	800b7d8 <csv_dump_log_entries_with_summary_seek+0x5ec>
            strcpy(rad_str, "n/a");
 800b318:	49a7      	ldr	r1, [pc, #668]	@ (800b5b8 <csv_dump_log_entries_with_summary_seek+0x3cc>)
 800b31a:	a878      	add	r0, sp, #480	@ 0x1e0
 800b31c:	f00f fad1 	bl	801a8c2 <strcpy>
        } else {
            snprintf(rad_str, sizeof(rad_str), "%.2f", dose);
        }

        if (!first_found) {
            first = entry;
 800b320:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b322:	79da      	ldrb	r2, [r3, #7]
 800b324:	920a      	str	r2, [sp, #40]	@ 0x28
 800b326:	789a      	ldrb	r2, [r3, #2]
 800b328:	9216      	str	r2, [sp, #88]	@ 0x58
 800b32a:	78da      	ldrb	r2, [r3, #3]
 800b32c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b32e:	791a      	ldrb	r2, [r3, #4]
 800b330:	920d      	str	r2, [sp, #52]	@ 0x34
 800b332:	795a      	ldrb	r2, [r3, #5]
 800b334:	9210      	str	r2, [sp, #64]	@ 0x40
 800b336:	799b      	ldrb	r3, [r3, #6]
 800b338:	9311      	str	r3, [sp, #68]	@ 0x44
        if (!first_found) {
 800b33a:	2e00      	cmp	r6, #0
 800b33c:	d10a      	bne.n	800b354 <csv_dump_log_entries_with_summary_seek+0x168>
            first = entry;
 800b33e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b340:	921d      	str	r2, [sp, #116]	@ 0x74
 800b342:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b344:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b346:	931e      	str	r3, [sp, #120]	@ 0x78
 800b348:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b34a:	931c      	str	r3, [sp, #112]	@ 0x70
 800b34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b34e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b352:	931a      	str	r3, [sp, #104]	@ 0x68
            first_found = true;
        }
        last = entry;

        sum_temp += temp;
 800b354:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b356:	f7f8 fa1f 	bl	8003798 <__aeabi_f2d>
 800b35a:	000b      	movs	r3, r1
 800b35c:	0002      	movs	r2, r0
 800b35e:	9018      	str	r0, [sp, #96]	@ 0x60
 800b360:	9119      	str	r1, [sp, #100]	@ 0x64
 800b362:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b364:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b366:	f7f6 fa77 	bl	8001858 <__aeabi_dadd>
 800b36a:	9014      	str	r0, [sp, #80]	@ 0x50
 800b36c:	9115      	str	r1, [sp, #84]	@ 0x54

        if (entry.rad_measure_mark != 0) {
 800b36e:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b370:	7c5c      	ldrb	r4, [r3, #17]
 800b372:	2c00      	cmp	r4, #0
 800b374:	d00d      	beq.n	800b392 <csv_dump_log_entries_with_summary_seek+0x1a6>
            sum_dose += dose;
 800b376:	1c38      	adds	r0, r7, #0
 800b378:	f7f8 fa0e 	bl	8003798 <__aeabi_f2d>
 800b37c:	000b      	movs	r3, r1
 800b37e:	0002      	movs	r2, r0
 800b380:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b382:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b384:	f7f6 fa68 	bl	8001858 <__aeabi_dadd>
            // rad valid count 별도
            valid_rad_count++;
 800b388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            sum_dose += dose;
 800b38a:	9012      	str	r0, [sp, #72]	@ 0x48
 800b38c:	9113      	str	r1, [sp, #76]	@ 0x4c
            valid_rad_count++;
 800b38e:	3301      	adds	r3, #1
 800b390:	930e      	str	r3, [sp, #56]	@ 0x38

        }
        valid_count++;
 800b392:	1c6b      	adds	r3, r5, #1
 800b394:	9317      	str	r3, [sp, #92]	@ 0x5c

        // --- [추가] 루프 내부, sum/CSV 쓰기 전에 ---
        int16_t  t_x10  = (int16_t)entry.temperature;   // 0.1℃ 단위
 800b396:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b398:	220a      	movs	r2, #10
 800b39a:	5e9e      	ldrsh	r6, [r3, r2]
        uint16_t d_x100 = (uint16_t)entry.dose;         // 0.01 단위

        uint32_t interval_sec = current_settings.temp_interval;
 800b39c:	4987      	ldr	r1, [pc, #540]	@ (800b5bc <csv_dump_log_entries_with_summary_seek+0x3d0>)
 800b39e:	4b88      	ldr	r3, [pc, #544]	@ (800b5c0 <csv_dump_log_entries_with_summary_seek+0x3d4>)
 800b3a0:	7808      	ldrb	r0, [r1, #0]
 800b3a2:	0019      	movs	r1, r3
 800b3a4:	3176      	adds	r1, #118	@ 0x76
 800b3a6:	7809      	ldrb	r1, [r1, #0]
        uint16_t d_x100 = (uint16_t)entry.dose;         // 0.01 단위
 800b3a8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
        uint32_t interval_sec = current_settings.temp_interval;
 800b3aa:	0209      	lsls	r1, r1, #8
 800b3ac:	4301      	orrs	r1, r0
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	3077      	adds	r0, #119	@ 0x77
 800b3b2:	7800      	ldrb	r0, [r0, #0]
 800b3b4:	0400      	lsls	r0, r0, #16
 800b3b6:	4308      	orrs	r0, r1
 800b3b8:	0019      	movs	r1, r3
 800b3ba:	3178      	adds	r1, #120	@ 0x78
 800b3bc:	7809      	ldrb	r1, [r1, #0]
 800b3be:	0609      	lsls	r1, r1, #24
 800b3c0:	4301      	orrs	r1, r0
        uint32_t elapsed_sec  = (valid_count > 0) ? (valid_count - 1U) * interval_sec : 0U;
 800b3c2:	4369      	muls	r1, r5

        bool gate_rh1 = (elapsed_sec >= current_settings.alarm_delay_rh1);
        bool gate_rh2 = (elapsed_sec >= current_settings.alarm_delay_rh2);
 800b3c4:	001d      	movs	r5, r3
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	357d      	adds	r5, #125	@ 0x7d
 800b3ca:	782f      	ldrb	r7, [r5, #0]
 800b3cc:	307c      	adds	r0, #124	@ 0x7c
 800b3ce:	7800      	ldrb	r0, [r0, #0]
 800b3d0:	023f      	lsls	r7, r7, #8
 800b3d2:	4307      	orrs	r7, r0
        bool gate_th1 = (elapsed_sec >= current_settings.alarm_delay_th1);
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	307e      	adds	r0, #126	@ 0x7e
 800b3d8:	7805      	ldrb	r5, [r0, #0]
 800b3da:	0018      	movs	r0, r3
 800b3dc:	307f      	adds	r0, #127	@ 0x7f
 800b3de:	7800      	ldrb	r0, [r0, #0]
 800b3e0:	0200      	lsls	r0, r0, #8
 800b3e2:	4328      	orrs	r0, r5
 800b3e4:	9020      	str	r0, [sp, #128]	@ 0x80
        bool gate_th2 = (elapsed_sec >= current_settings.alarm_delay_th2);
 800b3e6:	0018      	movs	r0, r3
 800b3e8:	3080      	adds	r0, #128	@ 0x80
 800b3ea:	7805      	ldrb	r5, [r0, #0]
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	3081      	adds	r0, #129	@ 0x81
 800b3f0:	7800      	ldrb	r0, [r0, #0]
 800b3f2:	0200      	lsls	r0, r0, #8
 800b3f4:	4328      	orrs	r0, r5
 800b3f6:	9021      	str	r0, [sp, #132]	@ 0x84
        bool gate_tl1 = (elapsed_sec >= current_settings.alarm_delay_tl1);
 800b3f8:	0018      	movs	r0, r3
 800b3fa:	3082      	adds	r0, #130	@ 0x82
 800b3fc:	7805      	ldrb	r5, [r0, #0]
 800b3fe:	0018      	movs	r0, r3
 800b400:	3083      	adds	r0, #131	@ 0x83
 800b402:	7800      	ldrb	r0, [r0, #0]
 800b404:	0200      	lsls	r0, r0, #8
 800b406:	4328      	orrs	r0, r5
 800b408:	9022      	str	r0, [sp, #136]	@ 0x88
        bool gate_tl2 = (elapsed_sec >= current_settings.alarm_delay_tl2);
 800b40a:	0018      	movs	r0, r3
 800b40c:	3084      	adds	r0, #132	@ 0x84
 800b40e:	7805      	ldrb	r5, [r0, #0]
 800b410:	0018      	movs	r0, r3
 800b412:	3085      	adds	r0, #133	@ 0x85
 800b414:	7800      	ldrb	r0, [r0, #0]
 800b416:	0200      	lsls	r0, r0, #8
 800b418:	4328      	orrs	r0, r5
 800b41a:	9023      	str	r0, [sp, #140]	@ 0x8c
        bool gate_rh1 = (elapsed_sec >= current_settings.alarm_delay_rh1);
 800b41c:	0018      	movs	r0, r3
 800b41e:	307a      	adds	r0, #122	@ 0x7a
 800b420:	7805      	ldrb	r5, [r0, #0]
 800b422:	0018      	movs	r0, r3
 800b424:	307b      	adds	r0, #123	@ 0x7b
 800b426:	7800      	ldrb	r0, [r0, #0]
 800b428:	0200      	lsls	r0, r0, #8
 800b42a:	4328      	orrs	r0, r5

        // 조건(게이트 적용) — RH는 유효 방사선 구간에서만 판정
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b42c:	4288      	cmp	r0, r1
 800b42e:	d900      	bls.n	800b432 <csv_dump_log_entries_with_summary_seek+0x246>
 800b430:	e1dd      	b.n	800b7ee <csv_dump_log_entries_with_summary_seek+0x602>
 800b432:	0025      	movs	r5, r4
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b434:	1e20      	subs	r0, r4, #0
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b436:	d018      	beq.n	800b46a <csv_dump_log_entries_with_summary_seek+0x27e>
 800b438:	001c      	movs	r4, r3
 800b43a:	0018      	movs	r0, r3
 800b43c:	3492      	adds	r4, #146	@ 0x92
 800b43e:	7824      	ldrb	r4, [r4, #0]
 800b440:	3091      	adds	r0, #145	@ 0x91
 800b442:	7800      	ldrb	r0, [r0, #0]
 800b444:	0224      	lsls	r4, r4, #8
 800b446:	4304      	orrs	r4, r0
 800b448:	0018      	movs	r0, r3
 800b44a:	3093      	adds	r0, #147	@ 0x93
 800b44c:	7800      	ldrb	r0, [r0, #0]
 800b44e:	3394      	adds	r3, #148	@ 0x94
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	0400      	lsls	r0, r0, #16
 800b454:	4320      	orrs	r0, r4
 800b456:	061b      	lsls	r3, r3, #24
 800b458:	4303      	orrs	r3, r0
 800b45a:	2000      	movs	r0, #0
 800b45c:	0005      	movs	r5, r0
 800b45e:	b294      	uxth	r4, r2
 800b460:	429c      	cmp	r4, r3
 800b462:	4145      	adcs	r5, r0
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b464:	428f      	cmp	r7, r1
 800b466:	d800      	bhi.n	800b46a <csv_dump_log_entries_with_summary_seek+0x27e>
 800b468:	e1cb      	b.n	800b802 <csv_dump_log_entries_with_summary_seek+0x616>
        bool th1_cond = gate_th1 && (t_x10 >= current_settings.alarm_th1);
 800b46a:	2300      	movs	r3, #0
 800b46c:	469c      	mov	ip, r3
 800b46e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b470:	428b      	cmp	r3, r1
 800b472:	d80c      	bhi.n	800b48e <csv_dump_log_entries_with_summary_seek+0x2a2>
 800b474:	4b53      	ldr	r3, [pc, #332]	@ (800b5c4 <csv_dump_log_entries_with_summary_seek+0x3d8>)
 800b476:	17f4      	asrs	r4, r6, #31
 800b478:	781a      	ldrb	r2, [r3, #0]
 800b47a:	4b53      	ldr	r3, [pc, #332]	@ (800b5c8 <csv_dump_log_entries_with_summary_seek+0x3dc>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	4313      	orrs	r3, r2
 800b482:	041b      	lsls	r3, r3, #16
 800b484:	141a      	asrs	r2, r3, #16
 800b486:	0fdb      	lsrs	r3, r3, #31
 800b488:	4296      	cmp	r6, r2
 800b48a:	4163      	adcs	r3, r4
 800b48c:	469c      	mov	ip, r3
        bool th2_cond = gate_th2 && (t_x10 >= current_settings.alarm_th2);
 800b48e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b490:	2400      	movs	r4, #0
 800b492:	428b      	cmp	r3, r1
 800b494:	d80b      	bhi.n	800b4ae <csv_dump_log_entries_with_summary_seek+0x2c2>
 800b496:	4a4d      	ldr	r2, [pc, #308]	@ (800b5cc <csv_dump_log_entries_with_summary_seek+0x3e0>)
 800b498:	4b4d      	ldr	r3, [pc, #308]	@ (800b5d0 <csv_dump_log_entries_with_summary_seek+0x3e4>)
 800b49a:	7814      	ldrb	r4, [r2, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	0224      	lsls	r4, r4, #8
 800b4a0:	431c      	orrs	r4, r3
 800b4a2:	0424      	lsls	r4, r4, #16
 800b4a4:	1423      	asrs	r3, r4, #16
 800b4a6:	17f2      	asrs	r2, r6, #31
 800b4a8:	0fe4      	lsrs	r4, r4, #31
 800b4aa:	429e      	cmp	r6, r3
 800b4ac:	4154      	adcs	r4, r2
        bool tl1_cond = gate_tl1 && (t_x10 <= current_settings.alarm_tl1);
 800b4ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	428b      	cmp	r3, r1
 800b4b4:	d80b      	bhi.n	800b4ce <csv_dump_log_entries_with_summary_seek+0x2e2>
 800b4b6:	4a47      	ldr	r2, [pc, #284]	@ (800b5d4 <csv_dump_log_entries_with_summary_seek+0x3e8>)
 800b4b8:	4b47      	ldr	r3, [pc, #284]	@ (800b5d8 <csv_dump_log_entries_with_summary_seek+0x3ec>)
 800b4ba:	7812      	ldrb	r2, [r2, #0]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	0212      	lsls	r2, r2, #8
 800b4c0:	431a      	orrs	r2, r3
 800b4c2:	0412      	lsls	r2, r2, #16
 800b4c4:	1413      	asrs	r3, r2, #16
 800b4c6:	0ff7      	lsrs	r7, r6, #31
 800b4c8:	17d2      	asrs	r2, r2, #31
 800b4ca:	42b3      	cmp	r3, r6
 800b4cc:	417a      	adcs	r2, r7
        bool tl2_cond = gate_tl2 && (t_x10 <= current_settings.alarm_tl2);
 800b4ce:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	428f      	cmp	r7, r1
 800b4d4:	d80b      	bhi.n	800b4ee <csv_dump_log_entries_with_summary_seek+0x302>
 800b4d6:	4b41      	ldr	r3, [pc, #260]	@ (800b5dc <csv_dump_log_entries_with_summary_seek+0x3f0>)
 800b4d8:	0ff7      	lsrs	r7, r6, #31
 800b4da:	7819      	ldrb	r1, [r3, #0]
 800b4dc:	4b40      	ldr	r3, [pc, #256]	@ (800b5e0 <csv_dump_log_entries_with_summary_seek+0x3f4>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	021b      	lsls	r3, r3, #8
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	041b      	lsls	r3, r3, #16
 800b4e6:	1419      	asrs	r1, r3, #16
 800b4e8:	17db      	asrs	r3, r3, #31
 800b4ea:	42b1      	cmp	r1, r6
 800b4ec:	417b      	adcs	r3, r7

        // 카운트(현재 방식: 조건 만족 샘플 수 기반)
        if (rh1_cond) log_csv.logging_summary.RH1_alarm_count++;
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	d005      	beq.n	800b4fe <csv_dump_log_entries_with_summary_seek+0x312>
 800b4f2:	26b8      	movs	r6, #184	@ 0xb8
 800b4f4:	492d      	ldr	r1, [pc, #180]	@ (800b5ac <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b4f6:	0076      	lsls	r6, r6, #1
 800b4f8:	5b8d      	ldrh	r5, [r1, r6]
 800b4fa:	3501      	adds	r5, #1
 800b4fc:	538d      	strh	r5, [r1, r6]
        if (rh2_cond) log_csv.logging_summary.RH2_alarm_count++;
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d005      	beq.n	800b50e <csv_dump_log_entries_with_summary_seek+0x322>
 800b502:	25b9      	movs	r5, #185	@ 0xb9
 800b504:	4929      	ldr	r1, [pc, #164]	@ (800b5ac <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b506:	006d      	lsls	r5, r5, #1
 800b508:	5b48      	ldrh	r0, [r1, r5]
 800b50a:	3001      	adds	r0, #1
 800b50c:	5348      	strh	r0, [r1, r5]
        if (th1_cond) log_csv.logging_summary.TH1_alarm_count++;
 800b50e:	4661      	mov	r1, ip
 800b510:	2900      	cmp	r1, #0
 800b512:	d005      	beq.n	800b520 <csv_dump_log_entries_with_summary_seek+0x334>
 800b514:	25ba      	movs	r5, #186	@ 0xba
 800b516:	4925      	ldr	r1, [pc, #148]	@ (800b5ac <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b518:	006d      	lsls	r5, r5, #1
 800b51a:	5b48      	ldrh	r0, [r1, r5]
 800b51c:	3001      	adds	r0, #1
 800b51e:	5348      	strh	r0, [r1, r5]
        if (th2_cond) log_csv.logging_summary.TH2_alarm_count++;
 800b520:	2c00      	cmp	r4, #0
 800b522:	d005      	beq.n	800b530 <csv_dump_log_entries_with_summary_seek+0x344>
 800b524:	24bb      	movs	r4, #187	@ 0xbb
 800b526:	4921      	ldr	r1, [pc, #132]	@ (800b5ac <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b528:	0064      	lsls	r4, r4, #1
 800b52a:	5b08      	ldrh	r0, [r1, r4]
 800b52c:	3001      	adds	r0, #1
 800b52e:	5308      	strh	r0, [r1, r4]
        if (tl1_cond) log_csv.logging_summary.TL1_alarm_count++;
 800b530:	2a00      	cmp	r2, #0
 800b532:	d005      	beq.n	800b540 <csv_dump_log_entries_with_summary_seek+0x354>
 800b534:	20bc      	movs	r0, #188	@ 0xbc
 800b536:	4a1d      	ldr	r2, [pc, #116]	@ (800b5ac <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b538:	0040      	lsls	r0, r0, #1
 800b53a:	5a11      	ldrh	r1, [r2, r0]
 800b53c:	3101      	adds	r1, #1
 800b53e:	5211      	strh	r1, [r2, r0]
        if (tl2_cond) log_csv.logging_summary.TL2_alarm_count++;
 800b540:	2b00      	cmp	r3, #0
 800b542:	d005      	beq.n	800b550 <csv_dump_log_entries_with_summary_seek+0x364>
 800b544:	21bd      	movs	r1, #189	@ 0xbd
 800b546:	4b19      	ldr	r3, [pc, #100]	@ (800b5ac <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b548:	0049      	lsls	r1, r1, #1
 800b54a:	5a5a      	ldrh	r2, [r3, r1]
 800b54c:	3201      	adds	r2, #1
 800b54e:	525a      	strh	r2, [r3, r1]
//
//        if (tl2_cond) { if (!tl2_lat) { log_csv.logging_summary.TL2_alarm_count++; tl2_lat = true; } }
//        else          { tl2_lat = false; }


        snprintf(tmp_buff, sizeof(tmp_buff),
 800b550:	2050      	movs	r0, #80	@ 0x50
 800b552:	2240      	movs	r2, #64	@ 0x40
 800b554:	a91a      	add	r1, sp, #104	@ 0x68
 800b556:	1809      	adds	r1, r1, r0
 800b558:	7809      	ldrb	r1, [r1, #0]
 800b55a:	ab1a      	add	r3, sp, #104	@ 0x68
 800b55c:	189b      	adds	r3, r3, r2
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	9109      	str	r1, [sp, #36]	@ 0x24
 800b562:	a978      	add	r1, sp, #480	@ 0x1e0
 800b564:	9108      	str	r1, [sp, #32]
 800b566:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b568:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800b56a:	9006      	str	r0, [sp, #24]
 800b56c:	9107      	str	r1, [sp, #28]
 800b56e:	20fa      	movs	r0, #250	@ 0xfa
 800b570:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b572:	00c0      	lsls	r0, r0, #3
 800b574:	9105      	str	r1, [sp, #20]
 800b576:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b578:	4a1a      	ldr	r2, [pc, #104]	@ (800b5e4 <csv_dump_log_entries_with_summary_seek+0x3f8>)
 800b57a:	9104      	str	r1, [sp, #16]
 800b57c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b57e:	2601      	movs	r6, #1
 800b580:	9103      	str	r1, [sp, #12]
 800b582:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b584:	9102      	str	r1, [sp, #8]
 800b586:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b588:	9101      	str	r1, [sp, #4]
 800b58a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b58c:	1809      	adds	r1, r1, r0
 800b58e:	e02b      	b.n	800b5e8 <csv_dump_log_entries_with_summary_seek+0x3fc>
 800b590:	fffff8dc 	.word	0xfffff8dc
 800b594:	20000b50 	.word	0x20000b50
 800b598:	20000154 	.word	0x20000154
 800b59c:	41200000 	.word	0x41200000
 800b5a0:	42c80000 	.word	0x42c80000
 800b5a4:	0801f10d 	.word	0x0801f10d
 800b5a8:	20002c60 	.word	0x20002c60
 800b5ac:	20000058 	.word	0x20000058
 800b5b0:	0801f1a7 	.word	0x0801f1a7
 800b5b4:	0000ffff 	.word	0x0000ffff
 800b5b8:	0801fac6 	.word	0x0801fac6
 800b5bc:	20002c21 	.word	0x20002c21
 800b5c0:	20002bac 	.word	0x20002bac
 800b5c4:	20002c41 	.word	0x20002c41
 800b5c8:	20002c42 	.word	0x20002c42
 800b5cc:	20002c4a 	.word	0x20002c4a
 800b5d0:	20002c49 	.word	0x20002c49
 800b5d4:	20002c44 	.word	0x20002c44
 800b5d8:	20002c43 	.word	0x20002c43
 800b5dc:	20002c4b 	.word	0x20002c4b
 800b5e0:	20002c4c 	.word	0x20002c4c
 800b5e4:	0801f212 	.word	0x0801f212
 800b5e8:	9100      	str	r1, [sp, #0]
 800b5ea:	2180      	movs	r1, #128	@ 0x80
 800b5ec:	a838      	add	r0, sp, #224	@ 0xe0
 800b5ee:	0049      	lsls	r1, r1, #1
 800b5f0:	f00e ff5e 	bl	801a4b0 <sniprintf>
            "%u,%04u-%02u-%02u,%02u:%02u:%02u,%.1f,%s,0x%02X\n",
            entry.index,
            2000 + entry.year, entry.month, entry.day,
            entry.hour, entry.minute, entry.second,
            temp, rad_str, entry.mark);
        fatfs_write_str(&csv_file, tmp_buff);
 800b5f4:	4995      	ldr	r1, [pc, #596]	@ (800b84c <csv_dump_log_entries_with_summary_seek+0x660>)
 800b5f6:	a838      	add	r0, sp, #224	@ 0xe0
 800b5f8:	f00a fb7e 	bl	8015cf8 <f_puts>
    for (uint32_t i = 0; i < max_idx; i++) {
 800b5fc:	4b94      	ldr	r3, [pc, #592]	@ (800b850 <csv_dump_log_entries_with_summary_seek+0x664>)
 800b5fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b600:	429a      	cmp	r2, r3
 800b602:	d000      	beq.n	800b606 <csv_dump_log_entries_with_summary_seek+0x41a>
 800b604:	e0e6      	b.n	800b7d4 <csv_dump_log_entries_with_summary_seek+0x5e8>
 800b606:	0015      	movs	r5, r2
        LOG_APP("[ERROR] No valid entries found!\n");
        return;
    }

    // 4. 평균 계산 및 구조체 반영
    float avg_temp = sum_temp / valid_count;
 800b608:	0028      	movs	r0, r5
 800b60a:	f7f8 f8a1 	bl	8003750 <__aeabi_ui2d>
 800b60e:	000b      	movs	r3, r1
 800b610:	0002      	movs	r2, r0
 800b612:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b614:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b616:	f7f6 fce5 	bl	8001fe4 <__aeabi_ddiv>
 800b61a:	f7f8 f905 	bl	8003828 <__aeabi_d2f>
    float avg_dose = (valid_rad_count ? (sum_dose / valid_rad_count) : 0.0f);
 800b61e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b620:	2600      	movs	r6, #0
    float avg_temp = sum_temp / valid_count;
 800b622:	9014      	str	r0, [sp, #80]	@ 0x50
    float avg_dose = (valid_rad_count ? (sum_dose / valid_rad_count) : 0.0f);
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00b      	beq.n	800b640 <csv_dump_log_entries_with_summary_seek+0x454>
 800b628:	0018      	movs	r0, r3
 800b62a:	f7f8 f891 	bl	8003750 <__aeabi_ui2d>
 800b62e:	0002      	movs	r2, r0
 800b630:	000b      	movs	r3, r1
 800b632:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b634:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b636:	f7f6 fcd5 	bl	8001fe4 <__aeabi_ddiv>
 800b63a:	f7f8 f8f5 	bl	8003828 <__aeabi_d2f>
 800b63e:	1c06      	adds	r6, r0, #0
    float mkt = avg_temp;

    log_csv.logging_summary.average_temp = avg_temp;
 800b640:	4c84      	ldr	r4, [pc, #528]	@ (800b854 <csv_dump_log_entries_with_summary_seek+0x668>)
 800b642:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b644:	4a84      	ldr	r2, [pc, #528]	@ (800b858 <csv_dump_log_entries_with_summary_seek+0x66c>)
 800b646:	64e3      	str	r3, [r4, #76]	@ 0x4c
    log_csv.logging_summary.average_radiation = avg_dose;
    log_csv.logging_summary.mean_kinetic_temp = mkt;
 800b648:	65a3      	str	r3, [r4, #88]	@ 0x58

    log_csv.logging_summary.start_time = (file_log_time_t){
 800b64a:	23ac      	movs	r3, #172	@ 0xac
 800b64c:	0017      	movs	r7, r2
 800b64e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	54fa      	strb	r2, [r7, r3]
 800b654:	235a      	movs	r3, #90	@ 0x5a
 800b656:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b658:	33ff      	adds	r3, #255	@ 0xff
 800b65a:	54fa      	strb	r2, [r7, r3]
 800b65c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b65e:	3301      	adds	r3, #1
 800b660:	54fa      	strb	r2, [r7, r3]
 800b662:	235c      	movs	r3, #92	@ 0x5c
 800b664:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b666:	33ff      	adds	r3, #255	@ 0xff
 800b668:	54fa      	strb	r2, [r7, r3]
 800b66a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b66c:	3301      	adds	r3, #1
 800b66e:	54fa      	strb	r2, [r7, r3]
 800b670:	235e      	movs	r3, #94	@ 0x5e
 800b672:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800b674:	33ff      	adds	r3, #255	@ 0xff
 800b676:	54fa      	strb	r2, [r7, r3]
        .year = first.year, .month = first.month, .day = first.day,
        .hour = first.hour, .minute = first.minute, .second = first.second };

    log_csv.logging_summary.stop_time = (file_log_time_t){
 800b678:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b67a:	3301      	adds	r3, #1
 800b67c:	54fa      	strb	r2, [r7, r3]
 800b67e:	2360      	movs	r3, #96	@ 0x60
 800b680:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b682:	33ff      	adds	r3, #255	@ 0xff
 800b684:	54fa      	strb	r2, [r7, r3]
 800b686:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b688:	3301      	adds	r3, #1
 800b68a:	54fa      	strb	r2, [r7, r3]
 800b68c:	2362      	movs	r3, #98	@ 0x62
 800b68e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b690:	33ff      	adds	r3, #255	@ 0xff
 800b692:	54fa      	strb	r2, [r7, r3]
 800b694:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b696:	3301      	adds	r3, #1
 800b698:	54fa      	strb	r2, [r7, r3]
 800b69a:	2364      	movs	r3, #100	@ 0x64
 800b69c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b69e:	33ff      	adds	r3, #255	@ 0xff
 800b6a0:	54fa      	strb	r2, [r7, r3]
        .year = last.year, .month = last.month, .day = last.day,
        .hour = last.hour, .minute = last.minute, .second = last.second };

    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b6a2:	4b6e      	ldr	r3, [pc, #440]	@ (800b85c <csv_dump_log_entries_with_summary_seek+0x670>)
 800b6a4:	496e      	ldr	r1, [pc, #440]	@ (800b860 <csv_dump_log_entries_with_summary_seek+0x674>)
 800b6a6:	0018      	movs	r0, r3
    log_csv.logging_summary.average_radiation = avg_dose;
 800b6a8:	6566      	str	r6, [r4, #84]	@ 0x54
    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b6aa:	3076      	adds	r0, #118	@ 0x76
 800b6ac:	7809      	ldrb	r1, [r1, #0]
 800b6ae:	7800      	ldrb	r0, [r0, #0]
 800b6b0:	1e6a      	subs	r2, r5, #1
 800b6b2:	0200      	lsls	r0, r0, #8
 800b6b4:	4308      	orrs	r0, r1
 800b6b6:	0019      	movs	r1, r3
 800b6b8:	3177      	adds	r1, #119	@ 0x77
 800b6ba:	7809      	ldrb	r1, [r1, #0]
 800b6bc:	3378      	adds	r3, #120	@ 0x78
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	0409      	lsls	r1, r1, #16
 800b6c2:	4301      	orrs	r1, r0
 800b6c4:	061b      	lsls	r3, r3, #24
 800b6c6:	430b      	orrs	r3, r1
 800b6c8:	4353      	muls	r3, r2
    log_csv.logging_summary.data_points_temp_count = idx_temp;
    log_csv.logging_summary.data_points_radiation_count = idx_rad;

    // 5. 평균 정보 문자열 생성 및 덮어쓰기
    char avg_text[320] = {0};
 800b6ca:	22a0      	movs	r2, #160	@ 0xa0
    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b6cc:	66a3      	str	r3, [r4, #104]	@ 0x68
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b6ce:	4b65      	ldr	r3, [pc, #404]	@ (800b864 <csv_dump_log_entries_with_summary_seek+0x678>)
    char avg_text[320] = {0};
 800b6d0:	0052      	lsls	r2, r2, #1
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b6d2:	930d      	str	r3, [sp, #52]	@ 0x34
 800b6d4:	881b      	ldrh	r3, [r3, #0]
    char avg_text[320] = {0};
 800b6d6:	2100      	movs	r1, #0
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b6d8:	66e3      	str	r3, [r4, #108]	@ 0x6c
    log_csv.logging_summary.data_points_radiation_count = idx_rad;
 800b6da:	4b63      	ldr	r3, [pc, #396]	@ (800b868 <csv_dump_log_entries_with_summary_seek+0x67c>)
    char avg_text[320] = {0};
 800b6dc:	a878      	add	r0, sp, #480	@ 0x1e0
    log_csv.logging_summary.data_points_radiation_count = idx_rad;
 800b6de:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	6723      	str	r3, [r4, #112]	@ 0x70
    char avg_text[320] = {0};
 800b6e4:	f00f f836 	bl	801a754 <memset>
    int avg_offset = 0;
    char time_str[32], tmp[20];

    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b6e8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b6ea:	f7f8 f855 	bl	8003798 <__aeabi_f2d>
 800b6ee:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b6f2:	9000      	str	r0, [sp, #0]
 800b6f4:	9101      	str	r1, [sp, #4]
 800b6f6:	21a0      	movs	r1, #160	@ 0xa0
 800b6f8:	4a5c      	ldr	r2, [pc, #368]	@ (800b86c <csv_dump_log_entries_with_summary_seek+0x680>)
 800b6fa:	0049      	lsls	r1, r1, #1
 800b6fc:	a878      	add	r0, sp, #480	@ 0x1e0
 800b6fe:	f00e fed7 	bl	801a4b0 <sniprintf>
        "Average Temperature:   %6.1f\n", avg_temp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b702:	23a0      	movs	r3, #160	@ 0xa0
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	1a1a      	subs	r2, r3, r0
 800b708:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b70a:	aa78      	add	r2, sp, #480	@ 0x1e0
 800b70c:	1812      	adds	r2, r2, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b70e:	0005      	movs	r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b710:	1c30      	adds	r0, r6, #0
 800b712:	9210      	str	r2, [sp, #64]	@ 0x40
 800b714:	f7f8 f840 	bl	8003798 <__aeabi_f2d>
 800b718:	4a55      	ldr	r2, [pc, #340]	@ (800b870 <csv_dump_log_entries_with_summary_seek+0x684>)
 800b71a:	9000      	str	r0, [sp, #0]
 800b71c:	9101      	str	r1, [sp, #4]
 800b71e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b720:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b722:	f00e fec5 	bl	801a4b0 <sniprintf>
        "Average Radiation:     %6.1f\n", avg_dose);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b726:	26a0      	movs	r6, #160	@ 0xa0
 800b728:	4b52      	ldr	r3, [pc, #328]	@ (800b874 <csv_dump_log_entries_with_summary_seek+0x688>)
 800b72a:	0076      	lsls	r6, r6, #1
 800b72c:	930f      	str	r3, [sp, #60]	@ 0x3c
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b72e:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b730:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b732:	1b71      	subs	r1, r6, r5
 800b734:	1958      	adds	r0, r3, r5
 800b736:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b73a:	9200      	str	r2, [sp, #0]
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b740:	f00e feb6 	bl	801a4b0 <sniprintf>
 800b744:	a930      	add	r1, sp, #192	@ 0xc0
 800b746:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b748:	2220      	movs	r2, #32
 800b74a:	484b      	ldr	r0, [pc, #300]	@ (800b878 <csv_dump_log_entries_with_summary_seek+0x68c>)
 800b74c:	f7ff fd2c 	bl	800b1a8 <time_to_dmyhms_string.part.0>
        "MKT:                   %6.1f\n", mkt);

    time_to_dmyhms_string(&log_csv.logging_summary.start_time, time_str, sizeof(time_str));
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b750:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b752:	1b71      	subs	r1, r6, r5
 800b754:	1958      	adds	r0, r3, r5
 800b756:	4a49      	ldr	r2, [pc, #292]	@ (800b87c <csv_dump_log_entries_with_summary_seek+0x690>)
 800b758:	ab30      	add	r3, sp, #192	@ 0xc0
 800b75a:	f00e fea9 	bl	801a4b0 <sniprintf>
 800b75e:	a930      	add	r1, sp, #192	@ 0xc0
 800b760:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b762:	2220      	movs	r2, #32
 800b764:	4846      	ldr	r0, [pc, #280]	@ (800b880 <csv_dump_log_entries_with_summary_seek+0x694>)
 800b766:	f7ff fd1f 	bl	800b1a8 <time_to_dmyhms_string.part.0>
        "Start Time:            %s\n", time_str);

    time_to_dmyhms_string(&log_csv.logging_summary.stop_time, time_str, sizeof(time_str));
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b76a:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b76c:	1b71      	subs	r1, r6, r5
 800b76e:	1958      	adds	r0, r3, r5
 800b770:	4a44      	ldr	r2, [pc, #272]	@ (800b884 <csv_dump_log_entries_with_summary_seek+0x698>)
 800b772:	ab30      	add	r3, sp, #192	@ 0xc0
 800b774:	f00e fe9c 	bl	801a4b0 <sniprintf>
 800b778:	a925      	add	r1, sp, #148	@ 0x94
 800b77a:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0) {
 800b77c:	2214      	movs	r2, #20
 800b77e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800b780:	f7ff fba4 	bl	800aecc <seconds_to_dhms_string_long.part.0>
        "Stop Time:             %s\n", time_str);

    seconds_to_dhms_string_long(log_csv.logging_summary.elapsed_time_sec, tmp, sizeof(tmp));

    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b784:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b786:	1b71      	subs	r1, r6, r5
 800b788:	1958      	adds	r0, r3, r5
 800b78a:	4a3f      	ldr	r2, [pc, #252]	@ (800b888 <csv_dump_log_entries_with_summary_seek+0x69c>)
 800b78c:	ab25      	add	r3, sp, #148	@ 0x94
 800b78e:	f00e fe8f 	bl	801a4b0 <sniprintf>
        "Elapsed Time:          %s\n", tmp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b794:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b796:	a878      	add	r0, sp, #480	@ 0x1e0
 800b798:	1b71      	subs	r1, r6, r5
 800b79a:	881b      	ldrh	r3, [r3, #0]
 800b79c:	4a3b      	ldr	r2, [pc, #236]	@ (800b88c <csv_dump_log_entries_with_summary_seek+0x6a0>)
 800b79e:	1940      	adds	r0, r0, r5
 800b7a0:	f00e fe86 	bl	801a4b0 <sniprintf>
        "Temp Data Points:      %6u\n", idx_temp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b7a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b7a6:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b7a8:	a878      	add	r0, sp, #480	@ 0x1e0
 800b7aa:	1b71      	subs	r1, r6, r5
 800b7ac:	4a38      	ldr	r2, [pc, #224]	@ (800b890 <csv_dump_log_entries_with_summary_seek+0x6a4>)
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	1940      	adds	r0, r0, r5
 800b7b2:	f00e fe7d 	bl	801a4b0 <sniprintf>
        "Rad Data Points:       %6u\n", idx_rad);

    f_lseek(&csv_file, log_csv.csv_fiels_offset.logging_summary_avg_offset);
 800b7b6:	23d0      	movs	r3, #208	@ 0xd0
 800b7b8:	4c24      	ldr	r4, [pc, #144]	@ (800b84c <csv_dump_log_entries_with_summary_seek+0x660>)
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	58f9      	ldr	r1, [r7, r3]
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b7be:	182d      	adds	r5, r5, r0
    f_lseek(&csv_file, log_csv.csv_fiels_offset.logging_summary_avg_offset);
 800b7c0:	0020      	movs	r0, r4
 800b7c2:	f009 fdbd 	bl	8015340 <f_lseek>

    f_write(&csv_file, avg_text, avg_offset, NULL);
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	002a      	movs	r2, r5
 800b7ca:	0020      	movs	r0, r4
 800b7cc:	a978      	add	r1, sp, #480	@ 0x1e0
 800b7ce:	f009 fc7b 	bl	80150c8 <f_write>
 800b7d2:	e038      	b.n	800b846 <csv_dump_log_entries_with_summary_seek+0x65a>
 800b7d4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b7d6:	e57a      	b.n	800b2ce <csv_dump_log_entries_with_summary_seek+0xe2>
            snprintf(rad_str, sizeof(rad_str), "%.2f", dose);
 800b7d8:	f7f7 ffde 	bl	8003798 <__aeabi_f2d>
 800b7dc:	4c2d      	ldr	r4, [pc, #180]	@ (800b894 <csv_dump_log_entries_with_summary_seek+0x6a8>)
 800b7de:	9000      	str	r0, [sp, #0]
 800b7e0:	9101      	str	r1, [sp, #4]
 800b7e2:	0022      	movs	r2, r4
 800b7e4:	2110      	movs	r1, #16
 800b7e6:	a878      	add	r0, sp, #480	@ 0x1e0
 800b7e8:	f00e fe62 	bl	801a4b0 <sniprintf>
 800b7ec:	e598      	b.n	800b320 <csv_dump_log_entries_with_summary_seek+0x134>
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b7ee:	2500      	movs	r5, #0
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b7f0:	0028      	movs	r0, r5
 800b7f2:	428f      	cmp	r7, r1
 800b7f4:	d900      	bls.n	800b7f8 <csv_dump_log_entries_with_summary_seek+0x60c>
 800b7f6:	e638      	b.n	800b46a <csv_dump_log_entries_with_summary_seek+0x27e>
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b7f8:	0025      	movs	r5, r4
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b7fa:	1e20      	subs	r0, r4, #0
 800b7fc:	d100      	bne.n	800b800 <csv_dump_log_entries_with_summary_seek+0x614>
 800b7fe:	e634      	b.n	800b46a <csv_dump_log_entries_with_summary_seek+0x27e>
 800b800:	2500      	movs	r5, #0
 800b802:	4b16      	ldr	r3, [pc, #88]	@ (800b85c <csv_dump_log_entries_with_summary_seek+0x670>)
 800b804:	4824      	ldr	r0, [pc, #144]	@ (800b898 <csv_dump_log_entries_with_summary_seek+0x6ac>)
 800b806:	001c      	movs	r4, r3
 800b808:	349a      	adds	r4, #154	@ 0x9a
 800b80a:	7824      	ldrb	r4, [r4, #0]
 800b80c:	7800      	ldrb	r0, [r0, #0]
 800b80e:	0224      	lsls	r4, r4, #8
 800b810:	4304      	orrs	r4, r0
 800b812:	0018      	movs	r0, r3
 800b814:	309b      	adds	r0, #155	@ 0x9b
 800b816:	7800      	ldrb	r0, [r0, #0]
 800b818:	339c      	adds	r3, #156	@ 0x9c
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	0400      	lsls	r0, r0, #16
 800b81e:	4320      	orrs	r0, r4
 800b820:	061b      	lsls	r3, r3, #24
 800b822:	4303      	orrs	r3, r0
 800b824:	2000      	movs	r0, #0
 800b826:	b292      	uxth	r2, r2
 800b828:	429a      	cmp	r2, r3
 800b82a:	4140      	adcs	r0, r0
 800b82c:	e61d      	b.n	800b46a <csv_dump_log_entries_with_summary_seek+0x27e>
    if (!first_found || valid_count == 0) {
 800b82e:	2e00      	cmp	r6, #0
 800b830:	d002      	beq.n	800b838 <csv_dump_log_entries_with_summary_seek+0x64c>
 800b832:	2d00      	cmp	r5, #0
 800b834:	d000      	beq.n	800b838 <csv_dump_log_entries_with_summary_seek+0x64c>
 800b836:	e6e7      	b.n	800b608 <csv_dump_log_entries_with_summary_seek+0x41c>
        LOG_APP("[ERROR] No valid entries found!\n");
 800b838:	4b18      	ldr	r3, [pc, #96]	@ (800b89c <csv_dump_log_entries_with_summary_seek+0x6b0>)
 800b83a:	4a19      	ldr	r2, [pc, #100]	@ (800b8a0 <csv_dump_log_entries_with_summary_seek+0x6b4>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4919      	ldr	r1, [pc, #100]	@ (800b8a4 <csv_dump_log_entries_with_summary_seek+0x6b8>)
 800b840:	68d8      	ldr	r0, [r3, #12]
 800b842:	f00e fd8f 	bl	801a364 <fiprintf>
}
 800b846:	4b18      	ldr	r3, [pc, #96]	@ (800b8a8 <csv_dump_log_entries_with_summary_seek+0x6bc>)
 800b848:	449d      	add	sp, r3
 800b84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b84c:	20002c60 	.word	0x20002c60
 800b850:	0000c30c 	.word	0x0000c30c
 800b854:	20000154 	.word	0x20000154
 800b858:	20000058 	.word	0x20000058
 800b85c:	20002bac 	.word	0x20002bac
 800b860:	20002c21 	.word	0x20002c21
 800b864:	200004fe 	.word	0x200004fe
 800b868:	20000500 	.word	0x20000500
 800b86c:	0801f269 	.word	0x0801f269
 800b870:	0801f287 	.word	0x0801f287
 800b874:	0801f2a5 	.word	0x0801f2a5
 800b878:	200001b0 	.word	0x200001b0
 800b87c:	0801f2c3 	.word	0x0801f2c3
 800b880:	200001b6 	.word	0x200001b6
 800b884:	0801f2de 	.word	0x0801f2de
 800b888:	0801f2f9 	.word	0x0801f2f9
 800b88c:	0801f314 	.word	0x0801f314
 800b890:	0801f330 	.word	0x0801f330
 800b894:	0801f20d 	.word	0x0801f20d
 800b898:	20002c45 	.word	0x20002c45
 800b89c:	200002cc 	.word	0x200002cc
 800b8a0:	0801eafb 	.word	0x0801eafb
 800b8a4:	0801f243 	.word	0x0801f243
 800b8a8:	00000724 	.word	0x00000724

0800b8ac <csv_alarm_summary_prealloc.isra.0>:
static void csv_alarm_summary_prealloc(const DeviceSettings *dev)
 800b8ac:	b530      	push	{r4, r5, lr}
 800b8ae:	4c1f      	ldr	r4, [pc, #124]	@ (800b92c <csv_alarm_summary_prealloc.isra.0+0x80>)
    char buf[256] = {0};
 800b8b0:	2100      	movs	r1, #0
static void csv_alarm_summary_prealloc(const DeviceSettings *dev)
 800b8b2:	44a5      	add	sp, r4
    char buf[256] = {0};
 800b8b4:	2480      	movs	r4, #128	@ 0x80
 800b8b6:	0064      	lsls	r4, r4, #1
 800b8b8:	0022      	movs	r2, r4
 800b8ba:	a808      	add	r0, sp, #32
 800b8bc:	f00e ff4a 	bl	801a754 <memset>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b8c0:	491b      	ldr	r1, [pc, #108]	@ (800b930 <csv_alarm_summary_prealloc.isra.0+0x84>)
 800b8c2:	a808      	add	r0, sp, #32
 800b8c4:	f00e fffd 	bl	801a8c2 <strcpy>
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b8c8:	4669      	mov	r1, sp
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	4819      	ldr	r0, [pc, #100]	@ (800b934 <csv_alarm_summary_prealloc.isra.0+0x88>)
 800b8ce:	f7ff fc6b 	bl	800b1a8 <time_to_dmyhms_string.part.0>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b8d2:	206d      	movs	r0, #109	@ 0x6d
 800b8d4:	466b      	mov	r3, sp
 800b8d6:	21b3      	movs	r1, #179	@ 0xb3
 800b8d8:	4a17      	ldr	r2, [pc, #92]	@ (800b938 <csv_alarm_summary_prealloc.isra.0+0x8c>)
 800b8da:	4468      	add	r0, sp
 800b8dc:	f00e fde8 	bl	801a4b0 <sniprintf>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b8e0:	ab08      	add	r3, sp, #32
    off += snprintf(buf + off, sizeof(buf)-off,
 800b8e2:	304d      	adds	r0, #77	@ 0x4d
    off += snprintf(buf + off, sizeof(buf)-off,
 800b8e4:	1a21      	subs	r1, r4, r0
 800b8e6:	4a15      	ldr	r2, [pc, #84]	@ (800b93c <csv_alarm_summary_prealloc.isra.0+0x90>)
 800b8e8:	1818      	adds	r0, r3, r0
 800b8ea:	f00e fde1 	bl	801a4b0 <sniprintf>
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b8ee:	23c8      	movs	r3, #200	@ 0xc8
 800b8f0:	4c13      	ldr	r4, [pc, #76]	@ (800b940 <csv_alarm_summary_prealloc.isra.0+0x94>)
 800b8f2:	4d14      	ldr	r5, [pc, #80]	@ (800b944 <csv_alarm_summary_prealloc.isra.0+0x98>)
 800b8f4:	6962      	ldr	r2, [r4, #20]
    fatfs_write_str(&csv_file, buf);
 800b8f6:	0021      	movs	r1, r4
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b8f8:	005b      	lsls	r3, r3, #1
    fatfs_write_str(&csv_file, buf);
 800b8fa:	a808      	add	r0, sp, #32
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b8fc:	50ea      	str	r2, [r5, r3]
    fatfs_write_str(&csv_file, buf);
 800b8fe:	f00a f9fb 	bl	8015cf8 <f_puts>
    log_csv.csv_fiels_offset.alarm_summary_fill_offset = f_tell(&csv_file);
 800b902:	23ca      	movs	r3, #202	@ 0xca
 800b904:	6962      	ldr	r2, [r4, #20]
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	50ea      	str	r2, [r5, r3]
    memset(pad, ' ', sizeof(pad));
 800b90a:	2580      	movs	r5, #128	@ 0x80
 800b90c:	00ed      	lsls	r5, r5, #3
 800b90e:	002a      	movs	r2, r5
 800b910:	2120      	movs	r1, #32
 800b912:	a848      	add	r0, sp, #288	@ 0x120
 800b914:	f00e ff1e 	bl	801a754 <memset>
    f_write(&csv_file, pad, sizeof(pad), NULL);
 800b918:	2300      	movs	r3, #0
 800b91a:	002a      	movs	r2, r5
 800b91c:	0020      	movs	r0, r4
 800b91e:	a948      	add	r1, sp, #288	@ 0x120
 800b920:	f009 fbd2 	bl	80150c8 <f_write>
}
 800b924:	4b08      	ldr	r3, [pc, #32]	@ (800b948 <csv_alarm_summary_prealloc.isra.0+0x9c>)
 800b926:	449d      	add	sp, r3
 800b928:	bd30      	pop	{r4, r5, pc}
 800b92a:	46c0      	nop			@ (mov r8, r8)
 800b92c:	fffffadc 	.word	0xfffffadc
 800b930:	0801f34c 	.word	0x0801f34c
 800b934:	20000088 	.word	0x20000088
 800b938:	0801f39a 	.word	0x0801f39a
 800b93c:	0801f3b8 	.word	0x0801f3b8
 800b940:	20002c60 	.word	0x20002c60
 800b944:	20000058 	.word	0x20000058
 800b948:	00000524 	.word	0x00000524

0800b94c <csv_gen_template_file>:
UINT csv_gen_template_file(const DeviceSettings *dev_setting) {
 800b94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    res = f_stat (csv_file_name,&fno);
 800b94e:	4f3c      	ldr	r7, [pc, #240]	@ (800ba40 <csv_gen_template_file+0xf4>)
UINT csv_gen_template_file(const DeviceSettings *dev_setting) {
 800b950:	b08f      	sub	sp, #60	@ 0x3c
 800b952:	9000      	str	r0, [sp, #0]
    res = f_stat (csv_file_name,&fno);
 800b954:	a908      	add	r1, sp, #32
 800b956:	6838      	ldr	r0, [r7, #0]
 800b958:	f009 fd7d 	bl	8015456 <f_stat>
 800b95c:	4d39      	ldr	r5, [pc, #228]	@ (800ba44 <csv_gen_template_file+0xf8>)
 800b95e:	1e04      	subs	r4, r0, #0
    switch (res)
 800b960:	4e39      	ldr	r6, [pc, #228]	@ (800ba48 <csv_gen_template_file+0xfc>)
 800b962:	d009      	beq.n	800b978 <csv_gen_template_file+0x2c>
 800b964:	2804      	cmp	r0, #4
 800b966:	d010      	beq.n	800b98a <csv_gen_template_file+0x3e>
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800b968:	6830      	ldr	r0, [r6, #0]
 800b96a:	0023      	movs	r3, r4
 800b96c:	002a      	movs	r2, r5
 800b96e:	4937      	ldr	r1, [pc, #220]	@ (800ba4c <csv_gen_template_file+0x100>)
 800b970:	68c0      	ldr	r0, [r0, #12]
 800b972:	f00e fcf7 	bl	801a364 <fiprintf>
        break;
 800b976:	e023      	b.n	800b9c0 <csv_gen_template_file+0x74>
        LOG_APP("File '%s' exists \r\n", csv_file_name);
 800b978:	6830      	ldr	r0, [r6, #0]
 800b97a:	002a      	movs	r2, r5
 800b97c:	4934      	ldr	r1, [pc, #208]	@ (800ba50 <csv_gen_template_file+0x104>)
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	68c0      	ldr	r0, [r0, #12]
 800b982:	f00e fcef 	bl	801a364 <fiprintf>
    res = f_stat (csv_file_name,&fno);
 800b986:	2400      	movs	r4, #0
 800b988:	e01a      	b.n	800b9c0 <csv_gen_template_file+0x74>
        LOG_APP("File '%s' not found. Creating new file with header.\n", csv_file_name);
 800b98a:	6830      	ldr	r0, [r6, #0]
 800b98c:	002a      	movs	r2, r5
 800b98e:	4931      	ldr	r1, [pc, #196]	@ (800ba54 <csv_gen_template_file+0x108>)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	68c0      	ldr	r0, [r0, #12]
 800b994:	f00e fce6 	bl	801a364 <fiprintf>
        res = f_open(&csv_file, csv_file_name, FA_CREATE_NEW | FA_WRITE);
 800b998:	4b2f      	ldr	r3, [pc, #188]	@ (800ba58 <csv_gen_template_file+0x10c>)
 800b99a:	2206      	movs	r2, #6
 800b99c:	0018      	movs	r0, r3
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	9301      	str	r3, [sp, #4]
 800b9a2:	f009 fab9 	bl	8014f18 <f_open>
 800b9a6:	1e04      	subs	r4, r0, #0
        if (res != FR_OK)
 800b9a8:	d00d      	beq.n	800b9c6 <csv_gen_template_file+0x7a>
            LOG_APP("Open csv log file failed,Unmount...\r\n");
 800b9aa:	6833      	ldr	r3, [r6, #0]
 800b9ac:	002a      	movs	r2, r5
 800b9ae:	492b      	ldr	r1, [pc, #172]	@ (800ba5c <csv_gen_template_file+0x110>)
 800b9b0:	68d8      	ldr	r0, [r3, #12]
 800b9b2:	f00e fcd7 	bl	801a364 <fiprintf>
            f_mount(NULL, "", 0);
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	4929      	ldr	r1, [pc, #164]	@ (800ba60 <csv_gen_template_file+0x114>)
 800b9ba:	0010      	movs	r0, r2
 800b9bc:	f009 fa82 	bl	8014ec4 <f_mount>
    return res;
 800b9c0:	0020      	movs	r0, r4
}
 800b9c2:	b00f      	add	sp, #60	@ 0x3c
 800b9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const char* header_static[] = {
 800b9c6:	a903      	add	r1, sp, #12
 800b9c8:	000a      	movs	r2, r1
 800b9ca:	4b26      	ldr	r3, [pc, #152]	@ (800ba64 <csv_gen_template_file+0x118>)
 800b9cc:	cb83      	ldmia	r3!, {r0, r1, r7}
 800b9ce:	c283      	stmia	r2!, {r0, r1, r7}
 800b9d0:	cb03      	ldmia	r3!, {r0, r1}
 800b9d2:	c203      	stmia	r2!, {r0, r1}
    log_csv.csv_fiels_offset.device_info_offset = sizeof(header_static) + 1;
 800b9d4:	22c2      	movs	r2, #194	@ 0xc2
 800b9d6:	2115      	movs	r1, #21
 800b9d8:	4b23      	ldr	r3, [pc, #140]	@ (800ba68 <csv_gen_template_file+0x11c>)
 800b9da:	0052      	lsls	r2, r2, #1
 800b9dc:	5099      	str	r1, [r3, r2]
        fatfs_write_str(&csv_file, header_static[i]);
 800b9de:	00a2      	lsls	r2, r4, #2
 800b9e0:	ab03      	add	r3, sp, #12
 800b9e2:	9901      	ldr	r1, [sp, #4]
 800b9e4:	58d0      	ldr	r0, [r2, r3]
    for (int i = 0; i < sizeof(header_static)/sizeof(header_static[0]); ++i)
 800b9e6:	3401      	adds	r4, #1
        fatfs_write_str(&csv_file, header_static[i]);
 800b9e8:	f00a f986 	bl	8015cf8 <f_puts>
    for (int i = 0; i < sizeof(header_static)/sizeof(header_static[0]); ++i)
 800b9ec:	2c05      	cmp	r4, #5
 800b9ee:	d1f6      	bne.n	800b9de <csv_gen_template_file+0x92>
        csv_device_info(dev_setting);
 800b9f0:	9800      	ldr	r0, [sp, #0]
 800b9f2:	f7ff f87b 	bl	800aaec <csv_device_info>
        csv_trip_info(dev_setting);
 800b9f6:	9800      	ldr	r0, [sp, #0]
 800b9f8:	f7ff f914 	bl	800ac24 <csv_trip_info>
        csv_conf_info(dev_setting);
 800b9fc:	9800      	ldr	r0, [sp, #0]
 800b9fe:	f7ff f97f 	bl	800ad00 <csv_conf_info>
        csv_alarm_summary_prealloc(dev_setting);
 800ba02:	f7ff ff53 	bl	800b8ac <csv_alarm_summary_prealloc.isra.0>
        csv_dump_log_entries_with_summary_seek();
 800ba06:	f7ff fbf1 	bl	800b1ec <csv_dump_log_entries_with_summary_seek>
        csv_alarm_summary_fill(dev_setting);
 800ba0a:	9800      	ldr	r0, [sp, #0]
 800ba0c:	f7ff fa8e 	bl	800af2c <csv_alarm_summary_fill>
        LOG_APP("SUCCESS: Created template csv file\r\n");
 800ba10:	6833      	ldr	r3, [r6, #0]
 800ba12:	002a      	movs	r2, r5
 800ba14:	4915      	ldr	r1, [pc, #84]	@ (800ba6c <csv_gen_template_file+0x120>)
 800ba16:	68d8      	ldr	r0, [r3, #12]
 800ba18:	f00e fca4 	bl	801a364 <fiprintf>
        LOG_APP("Closing file, Flush...\r\n");
 800ba1c:	6833      	ldr	r3, [r6, #0]
 800ba1e:	002a      	movs	r2, r5
 800ba20:	4913      	ldr	r1, [pc, #76]	@ (800ba70 <csv_gen_template_file+0x124>)
 800ba22:	68d8      	ldr	r0, [r3, #12]
 800ba24:	f00e fc9e 	bl	801a364 <fiprintf>
        res = f_close(&csv_file);
 800ba28:	9801      	ldr	r0, [sp, #4]
 800ba2a:	f009 fc7b 	bl	8015324 <f_close>
 800ba2e:	1e04      	subs	r4, r0, #0
        if (res != FR_OK)
 800ba30:	d0a9      	beq.n	800b986 <csv_gen_template_file+0x3a>
            LOG_APP("Close CSV failed\r\n");
 800ba32:	6833      	ldr	r3, [r6, #0]
 800ba34:	002a      	movs	r2, r5
 800ba36:	490f      	ldr	r1, [pc, #60]	@ (800ba74 <csv_gen_template_file+0x128>)
 800ba38:	68d8      	ldr	r0, [r3, #12]
 800ba3a:	f00e fc93 	bl	801a364 <fiprintf>
            return res;
 800ba3e:	e7bf      	b.n	800b9c0 <csv_gen_template_file+0x74>
 800ba40:	20000054 	.word	0x20000054
 800ba44:	0801eafb 	.word	0x0801eafb
 800ba48:	200002cc 	.word	0x200002cc
 800ba4c:	0801f4e6 	.word	0x0801f4e6
 800ba50:	0801f408 	.word	0x0801f408
 800ba54:	0801f421 	.word	0x0801f421
 800ba58:	20002c60 	.word	0x20002c60
 800ba5c:	0801f45b 	.word	0x0801f45b
 800ba60:	0801f5e0 	.word	0x0801f5e0
 800ba64:	0801cc88 	.word	0x0801cc88
 800ba68:	20000058 	.word	0x20000058
 800ba6c:	0801f486 	.word	0x0801f486
 800ba70:	0801f4b0 	.word	0x0801f4b0
 800ba74:	0801f4ce 	.word	0x0801f4ce

0800ba78 <seconds_to_hms_string>:
{
 800ba78:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0) {
 800ba7a:	2900      	cmp	r1, #0
 800ba7c:	d003      	beq.n	800ba86 <seconds_to_hms_string+0xe>
 800ba7e:	2a00      	cmp	r2, #0
 800ba80:	d001      	beq.n	800ba86 <seconds_to_hms_string+0xe>
 800ba82:	f7ff f919 	bl	800acb8 <seconds_to_hms_string.part.0>
}
 800ba86:	bd10      	pop	{r4, pc}

0800ba88 <seconds_to_dhms_string_long>:
{
 800ba88:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0) {
 800ba8a:	2900      	cmp	r1, #0
 800ba8c:	d003      	beq.n	800ba96 <seconds_to_dhms_string_long+0xe>
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	d001      	beq.n	800ba96 <seconds_to_dhms_string_long+0xe>
 800ba92:	f7ff fa1b 	bl	800aecc <seconds_to_dhms_string_long.part.0>
}
 800ba96:	bd10      	pop	{r4, pc}

0800ba98 <time_to_dmyhms_string>:
{
 800ba98:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800ba9a:	2900      	cmp	r1, #0
 800ba9c:	d004      	beq.n	800baa8 <time_to_dmyhms_string+0x10>
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	d002      	beq.n	800baa8 <time_to_dmyhms_string+0x10>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d101      	bne.n	800baaa <time_to_dmyhms_string+0x12>
        if(buffer != NULL && buffer_size > 0) buffer[0] = '\0';
 800baa6:	7008      	strb	r0, [r1, #0]
}
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	f7ff fb7d 	bl	800b1a8 <time_to_dmyhms_string.part.0>
 800baae:	e7fb      	b.n	800baa8 <time_to_dmyhms_string+0x10>

0800bab0 <convert_month_to_string>:
    return ((month >= 1 && month <= 12) ? months[month] : months[0]);
 800bab0:	1e42      	subs	r2, r0, #1
{
 800bab2:	0003      	movs	r3, r0
    return ((month >= 1 && month <= 12) ? months[month] : months[0]);
 800bab4:	4803      	ldr	r0, [pc, #12]	@ (800bac4 <convert_month_to_string+0x14>)
 800bab6:	2a0b      	cmp	r2, #11
 800bab8:	d802      	bhi.n	800bac0 <convert_month_to_string+0x10>
 800baba:	4a03      	ldr	r2, [pc, #12]	@ (800bac8 <convert_month_to_string+0x18>)
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	5898      	ldr	r0, [r3, r2]
}
 800bac0:	4770      	bx	lr
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	0801f0ec 	.word	0x0801f0ec
 800bac8:	08020690 	.word	0x08020690

0800bacc <csv_get_logging_summary>:
    fatfs_write_str(&csv_file, tmp_buff);
}

const logging_summary_t* csv_get_logging_summary(void)
{
    return &log_csv.logging_summary;
 800bacc:	4800      	ldr	r0, [pc, #0]	@ (800bad0 <csv_get_logging_summary+0x4>)
}
 800bace:	4770      	bx	lr
 800bad0:	20000198 	.word	0x20000198

0800bad4 <generate_pdf_raw_report>:
    sprintf(work_buffer, "startxref\n%lu\n%%EOF\n", (unsigned long)xref_offset);
    fatfs_write_string(&pdf_file, work_buffer);
}


static void generate_pdf_raw_report(void) {
 800bad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("PDF First Page Make\r\n");
 800bad6:	4892      	ldr	r0, [pc, #584]	@ (800bd20 <generate_pdf_raw_report+0x24c>)
static void generate_pdf_raw_report(void) {
 800bad8:	b0cb      	sub	sp, #300	@ 0x12c
	printf("PDF First Page Make\r\n");
 800bada:	f00e fcdf 	bl	801a49c <puts>
    fatfs_write_string(&pdf_file, TPDF_HEADER);
 800bade:	4c91      	ldr	r4, [pc, #580]	@ (800bd24 <generate_pdf_raw_report+0x250>)
 800bae0:	4891      	ldr	r0, [pc, #580]	@ (800bd28 <generate_pdf_raw_report+0x254>)
 800bae2:	0021      	movs	r1, r4
 800bae4:	f00a f908 	bl	8015cf8 <f_puts>
    sprintf(content_buffer, "<<\n/Type /Catalog\n/Pages %d 0 R >>", TPDF_OBJ_PAGES_KID);
 800bae8:	2203      	movs	r2, #3
 800baea:	4990      	ldr	r1, [pc, #576]	@ (800bd2c <generate_pdf_raw_report+0x258>)
 800baec:	a80a      	add	r0, sp, #40	@ 0x28
 800baee:	f00e fd15 	bl	801a51c <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_CATALOG, content_buffer, &pdf_monitor);
 800baf2:	4d8f      	ldr	r5, [pc, #572]	@ (800bd30 <generate_pdf_raw_report+0x25c>)
 800baf4:	2102      	movs	r1, #2
 800baf6:	002b      	movs	r3, r5
 800baf8:	0020      	movs	r0, r4
 800bafa:	aa0a      	add	r2, sp, #40	@ 0x28
 800bafc:	f00d fa68 	bl	8018fd0 <tpdf_add_new_obj>
    sprintf(content_buffer,"<<\n/Type /Font\n/Subtype /TrueType\n/Name /F1\n/BaseFont /%s\n/Encoding /WinAnsiEncoding\n>>",TPDF_FONT);
 800bb00:	4a8c      	ldr	r2, [pc, #560]	@ (800bd34 <generate_pdf_raw_report+0x260>)
 800bb02:	498d      	ldr	r1, [pc, #564]	@ (800bd38 <generate_pdf_raw_report+0x264>)
 800bb04:	a80a      	add	r0, sp, #40	@ 0x28
 800bb06:	f00e fd09 	bl	801a51c <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_FONT_ARIAL, content_buffer, &pdf_monitor);
 800bb0a:	002b      	movs	r3, r5
 800bb0c:	2104      	movs	r1, #4
 800bb0e:	0020      	movs	r0, r4
 800bb10:	aa0a      	add	r2, sp, #40	@ 0x28
 800bb12:	f00d fa5d 	bl	8018fd0 <tpdf_add_new_obj>
    sprintf(content_buffer,"<<\n/Type /Font\n/Subtype /TrueType\n/Name /F2\n/BaseFont /%s\n/Encoding /WinAnsiEncoding\n>>",TPDF_FONT_BOLD);
 800bb16:	4a89      	ldr	r2, [pc, #548]	@ (800bd3c <generate_pdf_raw_report+0x268>)
 800bb18:	4989      	ldr	r1, [pc, #548]	@ (800bd40 <generate_pdf_raw_report+0x26c>)
 800bb1a:	a80a      	add	r0, sp, #40	@ 0x28
 800bb1c:	f00e fcfe 	bl	801a51c <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_FONT_ARIAL_BOLD, content_buffer, &pdf_monitor);
 800bb20:	002b      	movs	r3, r5
 800bb22:	2105      	movs	r1, #5
 800bb24:	0020      	movs	r0, r4
 800bb26:	aa0a      	add	r2, sp, #40	@ 0x28
 800bb28:	f00d fa52 	bl	8018fd0 <tpdf_add_new_obj>
    sprintf(content_buffer, "<<\n/Font << /F1 %d 0 R /F2 %d 0 R >>\n/ProcSet [ /PDF /Text ] \n>>",
 800bb2c:	2305      	movs	r3, #5
 800bb2e:	2204      	movs	r2, #4
 800bb30:	4984      	ldr	r1, [pc, #528]	@ (800bd44 <generate_pdf_raw_report+0x270>)
 800bb32:	a80a      	add	r0, sp, #40	@ 0x28
 800bb34:	f00e fcf2 	bl	801a51c <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_RESOURCES, content_buffer, &pdf_monitor);
 800bb38:	002b      	movs	r3, r5
 800bb3a:	2111      	movs	r1, #17
 800bb3c:	0020      	movs	r0, r4
 800bb3e:	aa0a      	add	r2, sp, #40	@ 0x28
 800bb40:	f00d fa46 	bl	8018fd0 <tpdf_add_new_obj>
  tpdf_start_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL,TPDF_OBJ_NUM_TABLE_TEMPL + 1, &pdf_monitor);
 800bb44:	002b      	movs	r3, r5
 800bb46:	2209      	movs	r2, #9
 800bb48:	2108      	movs	r1, #8
 800bb4a:	0020      	movs	r0, r4
 800bb4c:	f00d fa66 	bl	801901c <tpdf_start_new_stream_obj>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP-20, PDF_PAGE_LEFT, PDF_PAGE_TOP-20, 1.5, 0,0,0);
 800bb50:	26ff      	movs	r6, #255	@ 0xff
 800bb52:	22c3      	movs	r2, #195	@ 0xc3
 800bb54:	2700      	movs	r7, #0
 800bb56:	0092      	lsls	r2, r2, #2
 800bb58:	05b6      	lsls	r6, r6, #22
 800bb5a:	2332      	movs	r3, #50	@ 0x32
 800bb5c:	0020      	movs	r0, r4
 800bb5e:	497a      	ldr	r1, [pc, #488]	@ (800bd48 <generate_pdf_raw_report+0x274>)
 800bb60:	9200      	str	r2, [sp, #0]
 800bb62:	9704      	str	r7, [sp, #16]
 800bb64:	9703      	str	r7, [sp, #12]
 800bb66:	9702      	str	r7, [sp, #8]
 800bb68:	9601      	str	r6, [sp, #4]
 800bb6a:	f00d f9c7 	bl	8018efc <tpdf_draw_line>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800bb6e:	4a77      	ldr	r2, [pc, #476]	@ (800bd4c <generate_pdf_raw_report+0x278>)
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP-20, PDF_PAGE_LEFT, PDF_PAGE_TOP-20, 1.5, 0,0,0);
 800bb70:	0005      	movs	r5, r0
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800bb72:	2332      	movs	r3, #50	@ 0x32
 800bb74:	0020      	movs	r0, r4
 800bb76:	4974      	ldr	r1, [pc, #464]	@ (800bd48 <generate_pdf_raw_report+0x274>)
 800bb78:	9200      	str	r2, [sp, #0]
 800bb7a:	9704      	str	r7, [sp, #16]
 800bb7c:	9703      	str	r7, [sp, #12]
 800bb7e:	9702      	str	r7, [sp, #8]
 800bb80:	9601      	str	r6, [sp, #4]
 800bb82:	f00d f9bb 	bl	8018efc <tpdf_draw_line>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM + 20, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800bb86:	2346      	movs	r3, #70	@ 0x46
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800bb88:	182d      	adds	r5, r5, r0
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM + 20, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	0020      	movs	r0, r4
 800bb8e:	2246      	movs	r2, #70	@ 0x46
 800bb90:	2132      	movs	r1, #50	@ 0x32
 800bb92:	4b6d      	ldr	r3, [pc, #436]	@ (800bd48 <generate_pdf_raw_report+0x274>)
 800bb94:	9704      	str	r7, [sp, #16]
 800bb96:	9703      	str	r7, [sp, #12]
 800bb98:	9702      	str	r7, [sp, #8]
 800bb9a:	9601      	str	r6, [sp, #4]
 800bb9c:	f00d f9ae 	bl	8018efc <tpdf_draw_line>
 800bba0:	2432      	movs	r4, #50	@ 0x32
 800bba2:	182d      	adds	r5, r5, r0
    stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + i *99), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + i *99), PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800bba4:	4b5f      	ldr	r3, [pc, #380]	@ (800bd24 <generate_pdf_raw_report+0x250>)
 800bba6:	22c3      	movs	r2, #195	@ 0xc3
 800bba8:	9307      	str	r3, [sp, #28]
 800bbaa:	23ff      	movs	r3, #255	@ 0xff
 800bbac:	059b      	lsls	r3, r3, #22
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	2346      	movs	r3, #70	@ 0x46
 800bbb2:	0092      	lsls	r2, r2, #2
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	0021      	movs	r1, r4
 800bbb8:	0023      	movs	r3, r4
 800bbba:	9807      	ldr	r0, [sp, #28]
 800bbbc:	9704      	str	r7, [sp, #16]
 800bbbe:	9703      	str	r7, [sp, #12]
 800bbc0:	9702      	str	r7, [sp, #8]
 800bbc2:	f00d f99b 	bl	8018efc <tpdf_draw_line>
 800bbc6:	1943      	adds	r3, r0, r5
 800bbc8:	9308      	str	r3, [sp, #32]
    if (i < CHILD_TABLE_NUMS)
 800bbca:	0023      	movs	r3, r4
 800bbcc:	3363      	adds	r3, #99	@ 0x63
 800bbce:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd0:	23a1      	movs	r3, #161	@ 0xa1
 800bbd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d152      	bne.n	800bc80 <generate_pdf_raw_report+0x1ac>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800bbda:	23ff      	movs	r3, #255	@ 0xff
 800bbdc:	2432      	movs	r4, #50	@ 0x32
 800bbde:	059b      	lsls	r3, r3, #22
 800bbe0:	0022      	movs	r2, r4
 800bbe2:	0021      	movs	r1, r4
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	9400      	str	r4, [sp, #0]
 800bbe8:	4b57      	ldr	r3, [pc, #348]	@ (800bd48 <generate_pdf_raw_report+0x274>)
 800bbea:	9807      	ldr	r0, [sp, #28]
 800bbec:	9704      	str	r7, [sp, #16]
 800bbee:	9703      	str	r7, [sp, #12]
 800bbf0:	9702      	str	r7, [sp, #8]
 800bbf2:	f00d f983 	bl	8018efc <tpdf_draw_line>
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800bbf6:	4b56      	ldr	r3, [pc, #344]	@ (800bd50 <generate_pdf_raw_report+0x27c>)
 800bbf8:	2609      	movs	r6, #9
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	23fe      	movs	r3, #254	@ 0xfe
 800bbfe:	4d55      	ldr	r5, [pc, #340]	@ (800bd54 <generate_pdf_raw_report+0x280>)
 800bc00:	059b      	lsls	r3, r3, #22
 800bc02:	0021      	movs	r1, r4
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800bc04:	9009      	str	r0, [sp, #36]	@ 0x24
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	2228      	movs	r2, #40	@ 0x28
 800bc0a:	002b      	movs	r3, r5
 800bc0c:	9807      	ldr	r0, [sp, #28]
 800bc0e:	9702      	str	r7, [sp, #8]
 800bc10:	9701      	str	r7, [sp, #4]
 800bc12:	9600      	str	r6, [sp, #0]
 800bc14:	f00d f93c 	bl	8018e90 <tpdf_draw_colored_text>
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800bc18:	4b4f      	ldr	r3, [pc, #316]	@ (800bd58 <generate_pdf_raw_report+0x284>)
 800bc1a:	21fa      	movs	r1, #250	@ 0xfa
 800bc1c:	9304      	str	r3, [sp, #16]
 800bc1e:	23fe      	movs	r3, #254	@ 0xfe
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800bc20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800bc22:	059b      	lsls	r3, r3, #22
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800bc24:	1814      	adds	r4, r2, r0
 800bc26:	9a08      	ldr	r2, [sp, #32]
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800bc28:	9303      	str	r3, [sp, #12]
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800bc2a:	18a4      	adds	r4, r4, r2
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800bc2c:	002b      	movs	r3, r5
 800bc2e:	2228      	movs	r2, #40	@ 0x28
 800bc30:	9807      	ldr	r0, [sp, #28]
 800bc32:	9702      	str	r7, [sp, #8]
 800bc34:	9701      	str	r7, [sp, #4]
 800bc36:	9600      	str	r6, [sp, #0]
 800bc38:	31ff      	adds	r1, #255	@ 0xff
 800bc3a:	f00d f929 	bl	8018e90 <tpdf_draw_colored_text>
  tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL + 1,stream_length,&pdf_monitor);
 800bc3e:	4d3c      	ldr	r5, [pc, #240]	@ (800bd30 <generate_pdf_raw_report+0x25c>)
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800bc40:	1822      	adds	r2, r4, r0
  tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL + 1,stream_length,&pdf_monitor);
 800bc42:	002b      	movs	r3, r5
 800bc44:	0031      	movs	r1, r6
 800bc46:	9807      	ldr	r0, [sp, #28]
 800bc48:	f00d fa04 	bl	8019054 <tpdf_end_new_stream_obj>

static void generate_pdf_report_2nd_page(void) {
    // --- Create Object 20: first page
	char content_buffer[128];
    // Ref to table template and start/stop time header (OBJ 6 and 8 )
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R %d 0 R %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800bc4c:	2311      	movs	r3, #17
 800bc4e:	2416      	movs	r4, #22
 800bc50:	9302      	str	r3, [sp, #8]
 800bc52:	3b09      	subs	r3, #9
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	2203      	movs	r2, #3
 800bc58:	4940      	ldr	r1, [pc, #256]	@ (800bd5c <generate_pdf_raw_report+0x288>)
 800bc5a:	9401      	str	r4, [sp, #4]
 800bc5c:	3b02      	subs	r3, #2
 800bc5e:	a80a      	add	r0, sp, #40	@ 0x28
 800bc60:	f00e fc5c 	bl	801a51c <siprintf>
            TPDF_OBJ_NUM_HEADER_TIME_START_STOP,\
            TPDF_OBJ_NUM_TABLE_TEMPL,\
            TPDF_OBJ_NUM_PAGE_2ND +2,\
            TPDF_OBJ_NUM_PAGE_RESOURCES);

    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_2ND, content_buffer, &pdf_monitor);
 800bc64:	002b      	movs	r3, r5
 800bc66:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc68:	2114      	movs	r1, #20
 800bc6a:	9807      	ldr	r0, [sp, #28]
 800bc6c:	f00d f9b0 	bl	8018fd0 <tpdf_add_new_obj>
    // obj 22: contain data content.
    // obj 24: contain data stream length
    // Open stream for writing:
    tpdf_start_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_2ND + 2, TPDF_OBJ_NUM_PAGE_2ND + 4, &pdf_monitor);
 800bc70:	002b      	movs	r3, r5
 800bc72:	2218      	movs	r2, #24
 800bc74:	0021      	movs	r1, r4
 800bc76:	9807      	ldr	r0, [sp, #28]
 800bc78:	f00d f9d0 	bl	801901c <tpdf_start_new_stream_obj>
}
 800bc7c:	b04b      	add	sp, #300	@ 0x12c
 800bc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 51 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 51 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bc80:	0021      	movs	r1, r4
 800bc82:	25fc      	movs	r5, #252	@ 0xfc
 800bc84:	2346      	movs	r3, #70	@ 0x46
 800bc86:	22c3      	movs	r2, #195	@ 0xc3
 800bc88:	05ad      	lsls	r5, r5, #22
 800bc8a:	3133      	adds	r1, #51	@ 0x33
 800bc8c:	9504      	str	r5, [sp, #16]
 800bc8e:	9503      	str	r5, [sp, #12]
 800bc90:	9502      	str	r5, [sp, #8]
 800bc92:	9501      	str	r5, [sp, #4]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	0092      	lsls	r2, r2, #2
 800bc98:	000b      	movs	r3, r1
 800bc9a:	9807      	ldr	r0, [sp, #28]
 800bc9c:	f00d f92e 	bl	8018efc <tpdf_draw_line>
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bca0:	0021      	movs	r1, r4
 800bca2:	2346      	movs	r3, #70	@ 0x46
 800bca4:	22c3      	movs	r2, #195	@ 0xc3
 800bca6:	3145      	adds	r1, #69	@ 0x45
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 51 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 51 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bca8:	0006      	movs	r6, r0
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bcaa:	9504      	str	r5, [sp, #16]
 800bcac:	9503      	str	r5, [sp, #12]
 800bcae:	9502      	str	r5, [sp, #8]
 800bcb0:	9501      	str	r5, [sp, #4]
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	0092      	lsls	r2, r2, #2
 800bcb6:	000b      	movs	r3, r1
 800bcb8:	9807      	ldr	r0, [sp, #28]
 800bcba:	f00d f91f 	bl	8018efc <tpdf_draw_line>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800bcbe:	2506      	movs	r5, #6
 800bcc0:	0021      	movs	r1, r4
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bcc2:	9b08      	ldr	r3, [sp, #32]
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800bcc4:	4a26      	ldr	r2, [pc, #152]	@ (800bd60 <generate_pdf_raw_report+0x28c>)
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bcc6:	1836      	adds	r6, r6, r0
 800bcc8:	18f6      	adds	r6, r6, r3
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800bcca:	4b26      	ldr	r3, [pc, #152]	@ (800bd64 <generate_pdf_raw_report+0x290>)
 800bccc:	310a      	adds	r1, #10
 800bcce:	9204      	str	r2, [sp, #16]
 800bcd0:	9500      	str	r5, [sp, #0]
 800bcd2:	4a25      	ldr	r2, [pc, #148]	@ (800bd68 <generate_pdf_raw_report+0x294>)
 800bcd4:	9807      	ldr	r0, [sp, #28]
 800bcd6:	9703      	str	r7, [sp, #12]
 800bcd8:	9702      	str	r7, [sp, #8]
 800bcda:	9701      	str	r7, [sp, #4]
 800bcdc:	9308      	str	r3, [sp, #32]
 800bcde:	f00d f8d7 	bl	8018e90 <tpdf_draw_colored_text>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800bce2:	0021      	movs	r1, r4
 800bce4:	4b21      	ldr	r3, [pc, #132]	@ (800bd6c <generate_pdf_raw_report+0x298>)
 800bce6:	4a20      	ldr	r2, [pc, #128]	@ (800bd68 <generate_pdf_raw_report+0x294>)
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800bce8:	1836      	adds	r6, r6, r0
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800bcea:	3138      	adds	r1, #56	@ 0x38
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	9500      	str	r5, [sp, #0]
 800bcf0:	9b08      	ldr	r3, [sp, #32]
 800bcf2:	9807      	ldr	r0, [sp, #28]
 800bcf4:	9703      	str	r7, [sp, #12]
 800bcf6:	9702      	str	r7, [sp, #8]
 800bcf8:	9701      	str	r7, [sp, #4]
 800bcfa:	f00d f8c9 	bl	8018e90 <tpdf_draw_colored_text>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 76 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"uSv/h");
 800bcfe:	0021      	movs	r1, r4
 800bd00:	4b1b      	ldr	r3, [pc, #108]	@ (800bd70 <generate_pdf_raw_report+0x29c>)
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800bd02:	1836      	adds	r6, r6, r0
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 76 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"uSv/h");
 800bd04:	9304      	str	r3, [sp, #16]
 800bd06:	9500      	str	r5, [sp, #0]
 800bd08:	9b08      	ldr	r3, [sp, #32]
 800bd0a:	4a17      	ldr	r2, [pc, #92]	@ (800bd68 <generate_pdf_raw_report+0x294>)
 800bd0c:	9807      	ldr	r0, [sp, #28]
 800bd0e:	314c      	adds	r1, #76	@ 0x4c
 800bd10:	9703      	str	r7, [sp, #12]
 800bd12:	9702      	str	r7, [sp, #8]
 800bd14:	9701      	str	r7, [sp, #4]
 800bd16:	f00d f8bb 	bl	8018e90 <tpdf_draw_colored_text>
 800bd1a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bd1c:	1835      	adds	r5, r6, r0
  for (int i = 0; i<= CHILD_TABLE_NUMS; i++ ) {
 800bd1e:	e741      	b.n	800bba4 <generate_pdf_raw_report+0xd0>
 800bd20:	0801f61a 	.word	0x0801f61a
 800bd24:	20003090 	.word	0x20003090
 800bd28:	0801f62f 	.word	0x0801f62f
 800bd2c:	0801f639 	.word	0x0801f639
 800bd30:	20002c88 	.word	0x20002c88
 800bd34:	0801f65c 	.word	0x0801f65c
 800bd38:	0801f662 	.word	0x0801f662
 800bd3c:	0801f6ba 	.word	0x0801f6ba
 800bd40:	0801f6c5 	.word	0x0801f6c5
 800bd44:	0801f71d 	.word	0x0801f71d
 800bd48:	00000221 	.word	0x00000221
 800bd4c:	000002fd 	.word	0x000002fd
 800bd50:	0801f761 	.word	0x0801f761
 800bd54:	0801f75e 	.word	0x0801f75e
 800bd58:	0801f777 	.word	0x0801f777
 800bd5c:	0801f77e 	.word	0x0801f77e
 800bd60:	0801f7e1 	.word	0x0801f7e1
 800bd64:	0801f7de 	.word	0x0801f7de
 800bd68:	00000302 	.word	0x00000302
 800bd6c:	0801de34 	.word	0x0801de34
 800bd70:	0801f7eb 	.word	0x0801f7eb

0800bd74 <pdf_page_handle_for_new_datapoints>:

}

// Number of report page equal record_nums / (number of data points per page)
static void pdf_page_handle_for_new_datapoints(const UINT current_page) {
 800bd74:	b5f0      	push	{r4, r5, r6, r7, lr}

	char content_buffer[128];
    int stream_length = 0;
    UINT current_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page *10);
 800bd76:	240a      	movs	r4, #10
 800bd78:	4344      	muls	r4, r0
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;

    // End of stream of previous obj page 
    // FIXME: how to get stream length of current page?
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, stream_length ,&pdf_monitor );
 800bd7a:	0021      	movs	r1, r4
 800bd7c:	4e12      	ldr	r6, [pc, #72]	@ (800bdc8 <pdf_page_handle_for_new_datapoints+0x54>)
 800bd7e:	4d13      	ldr	r5, [pc, #76]	@ (800bdcc <pdf_page_handle_for_new_datapoints+0x58>)
static void pdf_page_handle_for_new_datapoints(const UINT current_page) {
 800bd80:	b0a5      	sub	sp, #148	@ 0x94
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, stream_length ,&pdf_monitor );
 800bd82:	0033      	movs	r3, r6
 800bd84:	2200      	movs	r2, #0
 800bd86:	0028      	movs	r0, r5
 800bd88:	3118      	adds	r1, #24
 800bd8a:	f00d f963 	bl	8019054 <tpdf_end_new_stream_obj>

    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R %d 0 R %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800bd8e:	0027      	movs	r7, r4
 800bd90:	2311      	movs	r3, #17
 800bd92:	3720      	adds	r7, #32
 800bd94:	9302      	str	r3, [sp, #8]
 800bd96:	3b09      	subs	r3, #9
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	2203      	movs	r2, #3
 800bd9c:	490c      	ldr	r1, [pc, #48]	@ (800bdd0 <pdf_page_handle_for_new_datapoints+0x5c>)
 800bd9e:	9701      	str	r7, [sp, #4]
 800bda0:	3b02      	subs	r3, #2
 800bda2:	a804      	add	r0, sp, #16
 800bda4:	f00e fbba 	bl	801a51c <siprintf>
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;
 800bda8:	0021      	movs	r1, r4
            TPDF_OBJ_NUM_HEADER_TIME_START_STOP,\
            TPDF_OBJ_NUM_TABLE_TEMPL,\
            (next_obj  +2),\
            TPDF_OBJ_NUM_PAGE_RESOURCES);

    tpdf_add_new_obj(&pdf_file, next_obj, content_buffer, &pdf_monitor);
 800bdaa:	0033      	movs	r3, r6
 800bdac:	aa04      	add	r2, sp, #16
 800bdae:	0028      	movs	r0, r5
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;
 800bdb0:	311e      	adds	r1, #30
    tpdf_add_new_obj(&pdf_file, next_obj, content_buffer, &pdf_monitor);
 800bdb2:	f00d f90d 	bl	8018fd0 <tpdf_add_new_obj>
    // obj x2: contain data content.
    // obj x4: contain data stream length
    // Open stream for writing:
    tpdf_start_new_stream_obj(&pdf_file, next_obj + 2, next_obj + 4, &pdf_monitor);
 800bdb6:	0022      	movs	r2, r4
 800bdb8:	0033      	movs	r3, r6
 800bdba:	0039      	movs	r1, r7
 800bdbc:	0028      	movs	r0, r5
 800bdbe:	3222      	adds	r2, #34	@ 0x22
 800bdc0:	f00d f92c 	bl	801901c <tpdf_start_new_stream_obj>
}
 800bdc4:	b025      	add	sp, #148	@ 0x94
 800bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc8:	20002c88 	.word	0x20002c88
 800bdcc:	20003090 	.word	0x20003090
 800bdd0:	0801f77e 	.word	0x0801f77e

0800bdd4 <pdf_alarm_row.constprop.0>:
static int pdf_alarm_row(FIL* file_ptr,
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	0016      	movs	r6, r2
    char row_commands[512] = "";
 800bdd8:	2280      	movs	r2, #128	@ 0x80
static int pdf_alarm_row(FIL* file_ptr,
 800bdda:	4c5c      	ldr	r4, [pc, #368]	@ (800bf4c <pdf_alarm_row.constprop.0+0x178>)
    char row_commands[512] = "";
 800bddc:	0092      	lsls	r2, r2, #2
static int pdf_alarm_row(FIL* file_ptr,
 800bdde:	44a5      	add	sp, r4
 800bde0:	000d      	movs	r5, r1
 800bde2:	0004      	movs	r4, r0
    char row_commands[512] = "";
 800bde4:	2100      	movs	r1, #0
 800bde6:	a82c      	add	r0, sp, #176	@ 0xb0
 800bde8:	f00e fcb4 	bl	801a754 <memset>
    const uint8_t state = GET_ALARM_STATE(device_config.alarm_state, alarm_pos);
 800bdec:	4b58      	ldr	r3, [pc, #352]	@ (800bf50 <pdf_alarm_row.constprop.0+0x17c>)
    if (disabled) {
 800bdee:	2203      	movs	r2, #3
    const uint8_t state = GET_ALARM_STATE(device_config.alarm_state, alarm_pos);
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	40f3      	lsrs	r3, r6
    if (disabled) {
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d144      	bne.n	800be84 <pdf_alarm_row.constprop.0+0xb0>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 55  %d Td () Tj ET\n",
 800bdfa:	0023      	movs	r3, r4
 800bdfc:	3205      	adds	r2, #5
 800bdfe:	4955      	ldr	r1, [pc, #340]	@ (800bf54 <pdf_alarm_row.constprop.0+0x180>)
 800be00:	a80c      	add	r0, sp, #48	@ 0x30
 800be02:	f00e fb8b 	bl	801a51c <siprintf>
        strcat(row_commands, temp_buffer);
 800be06:	a90c      	add	r1, sp, #48	@ 0x30
 800be08:	a82c      	add	r0, sp, #176	@ 0xb0
 800be0a:	f00e fcab 	bl	801a764 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 155 %d Td () Tj ET\n",
 800be0e:	0023      	movs	r3, r4
 800be10:	2208      	movs	r2, #8
 800be12:	4951      	ldr	r1, [pc, #324]	@ (800bf58 <pdf_alarm_row.constprop.0+0x184>)
 800be14:	a80c      	add	r0, sp, #48	@ 0x30
 800be16:	f00e fb81 	bl	801a51c <siprintf>
        strcat(row_commands, temp_buffer);
 800be1a:	a90c      	add	r1, sp, #48	@ 0x30
 800be1c:	a82c      	add	r0, sp, #176	@ 0xb0
 800be1e:	f00e fca1 	bl	801a764 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 245 %d Td () Tj ET\n",
 800be22:	0023      	movs	r3, r4
 800be24:	2208      	movs	r2, #8
 800be26:	494d      	ldr	r1, [pc, #308]	@ (800bf5c <pdf_alarm_row.constprop.0+0x188>)
 800be28:	a80c      	add	r0, sp, #48	@ 0x30
 800be2a:	f00e fb77 	bl	801a51c <siprintf>
        strcat(row_commands, temp_buffer);
 800be2e:	a90c      	add	r1, sp, #48	@ 0x30
 800be30:	a82c      	add	r0, sp, #176	@ 0xb0
 800be32:	f00e fc97 	bl	801a764 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 325 %d Td () Tj ET\n",
 800be36:	0023      	movs	r3, r4
 800be38:	2208      	movs	r2, #8
 800be3a:	4949      	ldr	r1, [pc, #292]	@ (800bf60 <pdf_alarm_row.constprop.0+0x18c>)
 800be3c:	a80c      	add	r0, sp, #48	@ 0x30
 800be3e:	f00e fb6d 	bl	801a51c <siprintf>
        strcat(row_commands, temp_buffer);
 800be42:	a90c      	add	r1, sp, #48	@ 0x30
 800be44:	a82c      	add	r0, sp, #176	@ 0xb0
 800be46:	f00e fc8d 	bl	801a764 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 435 %d Td () Tj ET\n",
 800be4a:	0023      	movs	r3, r4
 800be4c:	2208      	movs	r2, #8
 800be4e:	4945      	ldr	r1, [pc, #276]	@ (800bf64 <pdf_alarm_row.constprop.0+0x190>)
 800be50:	a80c      	add	r0, sp, #48	@ 0x30
 800be52:	f00e fb63 	bl	801a51c <siprintf>
        strcat(row_commands, temp_buffer);
 800be56:	a90c      	add	r1, sp, #48	@ 0x30
 800be58:	a82c      	add	r0, sp, #176	@ 0xb0
 800be5a:	f00e fc83 	bl	801a764 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 500 %d Td () Tj ET\n",
 800be5e:	0023      	movs	r3, r4
 800be60:	2208      	movs	r2, #8
 800be62:	4941      	ldr	r1, [pc, #260]	@ (800bf68 <pdf_alarm_row.constprop.0+0x194>)
 800be64:	a80c      	add	r0, sp, #48	@ 0x30
 800be66:	f00e fb59 	bl	801a51c <siprintf>
        strcat(row_commands, temp_buffer);
 800be6a:	a90c      	add	r1, sp, #48	@ 0x30
 800be6c:	a82c      	add	r0, sp, #176	@ 0xb0
 800be6e:	f00e fc79 	bl	801a764 <strcat>
    if (file_ptr) { fatfs_write_string(file_ptr, row_commands); return 0; }
 800be72:	493e      	ldr	r1, [pc, #248]	@ (800bf6c <pdf_alarm_row.constprop.0+0x198>)
 800be74:	a82c      	add	r0, sp, #176	@ 0xb0
 800be76:	f009 ff3f 	bl	8015cf8 <f_puts>
}
 800be7a:	2000      	movs	r0, #0
 800be7c:	23ac      	movs	r3, #172	@ 0xac
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	449d      	add	sp, r3
 800be82:	bd70      	pop	{r4, r5, r6, pc}
                data->status, SECTION_CONTENT_FONT_SIZE, y_pos,
 800be84:	002b      	movs	r3, r5
 800be86:	3328      	adds	r3, #40	@ 0x28
        sprintf(temp_buffer,
 800be88:	781a      	ldrb	r2, [r3, #0]
                data->zone_name, (int16_t)data->threshold);
 800be8a:	2110      	movs	r1, #16
 800be8c:	5e6b      	ldrsh	r3, [r5, r1]
    if (data->zone_name[0] == 'T') {
 800be8e:	7829      	ldrb	r1, [r5, #0]
 800be90:	2954      	cmp	r1, #84	@ 0x54
 800be92:	d158      	bne.n	800bf46 <pdf_alarm_row.constprop.0+0x172>
        sprintf(temp_buffer,
 800be94:	4936      	ldr	r1, [pc, #216]	@ (800bf70 <pdf_alarm_row.constprop.0+0x19c>)
            data->status, SECTION_CONTENT_FONT_SIZE, y_pos, tmp_time_buff);
 800be96:	002e      	movs	r6, r5
        sprintf(temp_buffer,
 800be98:	9302      	str	r3, [sp, #8]
 800be9a:	9501      	str	r5, [sp, #4]
 800be9c:	2308      	movs	r3, #8
 800be9e:	9400      	str	r4, [sp, #0]
 800bea0:	a80c      	add	r0, sp, #48	@ 0x30
 800bea2:	f00e fb3b 	bl	801a51c <siprintf>
    strcat(row_commands, temp_buffer);
 800bea6:	a90c      	add	r1, sp, #48	@ 0x30
 800bea8:	a82c      	add	r0, sp, #176	@ 0xb0
 800beaa:	f00e fc5b 	bl	801a764 <strcat>
    seconds_to_dhms_string_long(data->alarm_delay_sec, tmp_time_buff, sizeof(tmp_time_buff));
 800beae:	2220      	movs	r2, #32
 800beb0:	6968      	ldr	r0, [r5, #20]
 800beb2:	a904      	add	r1, sp, #16
 800beb4:	f7ff fde8 	bl	800ba88 <seconds_to_dhms_string_long>
            data->status, SECTION_CONTENT_FONT_SIZE, y_pos, tmp_time_buff);
 800beb8:	3628      	adds	r6, #40	@ 0x28
    sprintf(temp_buffer,
 800beba:	ab04      	add	r3, sp, #16
 800bebc:	7832      	ldrb	r2, [r6, #0]
 800bebe:	492d      	ldr	r1, [pc, #180]	@ (800bf74 <pdf_alarm_row.constprop.0+0x1a0>)
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	9400      	str	r4, [sp, #0]
 800bec4:	2308      	movs	r3, #8
 800bec6:	a80c      	add	r0, sp, #48	@ 0x30
 800bec8:	f00e fb28 	bl	801a51c <siprintf>
    strcat(row_commands, temp_buffer);
 800becc:	a90c      	add	r1, sp, #48	@ 0x30
 800bece:	a82c      	add	r0, sp, #176	@ 0xb0
 800bed0:	f00e fc48 	bl	801a764 <strcat>
    sprintf(temp_buffer,
 800bed4:	002b      	movs	r3, r5
 800bed6:	3318      	adds	r3, #24
 800bed8:	2208      	movs	r2, #8
 800beda:	4927      	ldr	r1, [pc, #156]	@ (800bf78 <pdf_alarm_row.constprop.0+0x1a4>)
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	a80c      	add	r0, sp, #48	@ 0x30
 800bee0:	0023      	movs	r3, r4
 800bee2:	f00e fb1b 	bl	801a51c <siprintf>
    strcat(row_commands, temp_buffer);
 800bee6:	a90c      	add	r1, sp, #48	@ 0x30
 800bee8:	a82c      	add	r0, sp, #176	@ 0xb0
 800beea:	f00e fc3b 	bl	801a764 <strcat>
    seconds_to_dhms_string_long(data->total_time_in_violation_minutes, tmp_time_buff, sizeof(tmp_time_buff));
 800beee:	2220      	movs	r2, #32
 800bef0:	6a28      	ldr	r0, [r5, #32]
 800bef2:	a904      	add	r1, sp, #16
 800bef4:	f7ff fdc8 	bl	800ba88 <seconds_to_dhms_string_long>
    sprintf(temp_buffer,
 800bef8:	ab04      	add	r3, sp, #16
 800befa:	7832      	ldrb	r2, [r6, #0]
 800befc:	491f      	ldr	r1, [pc, #124]	@ (800bf7c <pdf_alarm_row.constprop.0+0x1a8>)
 800befe:	9301      	str	r3, [sp, #4]
 800bf00:	9400      	str	r4, [sp, #0]
 800bf02:	2308      	movs	r3, #8
 800bf04:	a80c      	add	r0, sp, #48	@ 0x30
 800bf06:	f00e fb09 	bl	801a51c <siprintf>
    strcat(row_commands, temp_buffer);
 800bf0a:	a90c      	add	r1, sp, #48	@ 0x30
 800bf0c:	a82c      	add	r0, sp, #176	@ 0xb0
 800bf0e:	f00e fc29 	bl	801a764 <strcat>
    sprintf(temp_buffer,
 800bf12:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800bf14:	7832      	ldrb	r2, [r6, #0]
 800bf16:	491a      	ldr	r1, [pc, #104]	@ (800bf80 <pdf_alarm_row.constprop.0+0x1ac>)
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	9400      	str	r4, [sp, #0]
 800bf1c:	2308      	movs	r3, #8
 800bf1e:	a80c      	add	r0, sp, #48	@ 0x30
 800bf20:	f00e fafc 	bl	801a51c <siprintf>
    strcat(row_commands, temp_buffer);
 800bf24:	a90c      	add	r1, sp, #48	@ 0x30
 800bf26:	a82c      	add	r0, sp, #176	@ 0xb0
 800bf28:	f00e fc1c 	bl	801a764 <strcat>
        const char *alr_status = (data->status == ALARM_STATUS_ALARM) ? "ALARM" : "OK";
 800bf2c:	7832      	ldrb	r2, [r6, #0]
 800bf2e:	4b15      	ldr	r3, [pc, #84]	@ (800bf84 <pdf_alarm_row.constprop.0+0x1b0>)
 800bf30:	2a01      	cmp	r2, #1
 800bf32:	d100      	bne.n	800bf36 <pdf_alarm_row.constprop.0+0x162>
 800bf34:	4b14      	ldr	r3, [pc, #80]	@ (800bf88 <pdf_alarm_row.constprop.0+0x1b4>)
        sprintf(temp_buffer,
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	4914      	ldr	r1, [pc, #80]	@ (800bf8c <pdf_alarm_row.constprop.0+0x1b8>)
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	9400      	str	r4, [sp, #0]
 800bf3e:	a80c      	add	r0, sp, #48	@ 0x30
 800bf40:	f00e faec 	bl	801a51c <siprintf>
 800bf44:	e791      	b.n	800be6a <pdf_alarm_row.constprop.0+0x96>
        sprintf(temp_buffer,
 800bf46:	4912      	ldr	r1, [pc, #72]	@ (800bf90 <pdf_alarm_row.constprop.0+0x1bc>)
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	e7a4      	b.n	800be96 <pdf_alarm_row.constprop.0+0xc2>
 800bf4c:	fffffd50 	.word	0xfffffd50
 800bf50:	20000b50 	.word	0x20000b50
 800bf54:	0801f7f1 	.word	0x0801f7f1
 800bf58:	0801f81b 	.word	0x0801f81b
 800bf5c:	0801f845 	.word	0x0801f845
 800bf60:	0801f86f 	.word	0x0801f86f
 800bf64:	0801f899 	.word	0x0801f899
 800bf68:	0801f8c3 	.word	0x0801f8c3
 800bf6c:	20003090 	.word	0x20003090
 800bf70:	0801f8ed 	.word	0x0801f8ed
 800bf74:	0801f957 	.word	0x0801f957
 800bf78:	0801f984 	.word	0x0801f984
 800bf7c:	0801f9b0 	.word	0x0801f9b0
 800bf80:	0801f9dd 	.word	0x0801f9dd
 800bf84:	0801ef76 	.word	0x0801ef76
 800bf88:	0801ef70 	.word	0x0801ef70
 800bf8c:	0801fa0a 	.word	0x0801fa0a
 800bf90:	0801f920 	.word	0x0801f920

0800bf94 <draw_section_title.constprop.0>:
    int len = draw_title_background(file_ptr, y_pos - 12);
 800bf94:	0002      	movs	r2, r0
static int draw_section_title(FIL* file_ptr, int y_pos, const char* title) {
 800bf96:	b570      	push	{r4, r5, r6, lr}
 800bf98:	b096      	sub	sp, #88	@ 0x58
 800bf9a:	0004      	movs	r4, r0
 800bf9c:	000d      	movs	r5, r1
    int len = draw_title_background(file_ptr, y_pos - 12);
 800bf9e:	3a0c      	subs	r2, #12
    sprintf(temp_buffer, "q\n0.9 0.9 0.9 rg\n50 %d 495 15 re\nf\nQ\n", y_pos);
 800bfa0:	490c      	ldr	r1, [pc, #48]	@ (800bfd4 <draw_section_title.constprop.0+0x40>)
 800bfa2:	a806      	add	r0, sp, #24
 800bfa4:	f00e faba 	bl	801a51c <siprintf>
        fatfs_write_string(file_ptr, temp_buffer);
 800bfa8:	4e0b      	ldr	r6, [pc, #44]	@ (800bfd8 <draw_section_title.constprop.0+0x44>)
 800bfaa:	a806      	add	r0, sp, #24
 800bfac:	0031      	movs	r1, r6
 800bfae:	f009 fea3 	bl	8015cf8 <f_puts>
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,y_pos-8,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,title);
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	0022      	movs	r2, r4
 800bfb6:	9103      	str	r1, [sp, #12]
 800bfb8:	9102      	str	r1, [sp, #8]
 800bfba:	9101      	str	r1, [sp, #4]
 800bfbc:	210a      	movs	r1, #10
 800bfbe:	0030      	movs	r0, r6
 800bfc0:	9100      	str	r1, [sp, #0]
 800bfc2:	4b06      	ldr	r3, [pc, #24]	@ (800bfdc <draw_section_title.constprop.0+0x48>)
 800bfc4:	3a08      	subs	r2, #8
 800bfc6:	9504      	str	r5, [sp, #16]
 800bfc8:	312d      	adds	r1, #45	@ 0x2d
 800bfca:	f00c ff61 	bl	8018e90 <tpdf_draw_colored_text>
}
 800bfce:	b016      	add	sp, #88	@ 0x58
 800bfd0:	bd70      	pop	{r4, r5, r6, pc}
 800bfd2:	46c0      	nop			@ (mov r8, r8)
 800bfd4:	0801fa37 	.word	0x0801fa37
 800bfd8:	20003090 	.word	0x20003090
 800bfdc:	0801f7de 	.word	0x0801f7de

0800bfe0 <draw_key_value_pair.constprop.0>:
static int draw_key_value_pair(FIL* file_ptr, int x_pos, int y_pos, const char* key, const char* value) {
 800bfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfe2:	000d      	movs	r5, r1
    int written = snprintf(
 800bfe4:	4915      	ldr	r1, [pc, #84]	@ (800c03c <draw_key_value_pair.constprop.0+0x5c>)
static int draw_key_value_pair(FIL* file_ptr, int x_pos, int y_pos, const char* key, const char* value) {
 800bfe6:	b0c5      	sub	sp, #276	@ 0x114
    int written = snprintf(
 800bfe8:	9202      	str	r2, [sp, #8]
 800bfea:	000a      	movs	r2, r1
 800bfec:	2180      	movs	r1, #128	@ 0x80
static int draw_key_value_pair(FIL* file_ptr, int x_pos, int y_pos, const char* key, const char* value) {
 800bfee:	0004      	movs	r4, r0
 800bff0:	001f      	movs	r7, r3
    int written = snprintf(
 800bff2:	9000      	str	r0, [sp, #0]
 800bff4:	2308      	movs	r3, #8
 800bff6:	9501      	str	r5, [sp, #4]
 800bff8:	0049      	lsls	r1, r1, #1
 800bffa:	a804      	add	r0, sp, #16
 800bffc:	f00e fa58 	bl	801a4b0 <sniprintf>
    if (written < 0 || written >= (int)sizeof(temp_buffer)) {
 800c000:	28ff      	cmp	r0, #255	@ 0xff
 800c002:	d903      	bls.n	800c00c <draw_key_value_pair.constprop.0+0x2c>
        return -1;
 800c004:	2001      	movs	r0, #1
 800c006:	4240      	negs	r0, r0
}
 800c008:	b045      	add	sp, #276	@ 0x114
 800c00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (file_ptr) fatfs_write_string(file_ptr, temp_buffer);
 800c00c:	4e0c      	ldr	r6, [pc, #48]	@ (800c040 <draw_key_value_pair.constprop.0+0x60>)
 800c00e:	a804      	add	r0, sp, #16
 800c010:	0031      	movs	r1, r6
 800c012:	f009 fe71 	bl	8015cf8 <f_puts>
    written = snprintf(
 800c016:	2180      	movs	r1, #128	@ 0x80
 800c018:	347d      	adds	r4, #125	@ 0x7d
 800c01a:	2308      	movs	r3, #8
 800c01c:	4a09      	ldr	r2, [pc, #36]	@ (800c044 <draw_key_value_pair.constprop.0+0x64>)
 800c01e:	9702      	str	r7, [sp, #8]
 800c020:	9501      	str	r5, [sp, #4]
 800c022:	9400      	str	r4, [sp, #0]
 800c024:	0049      	lsls	r1, r1, #1
 800c026:	a804      	add	r0, sp, #16
 800c028:	f00e fa42 	bl	801a4b0 <sniprintf>
    if (written < 0 || written >= (int)sizeof(temp_buffer)) {
 800c02c:	28ff      	cmp	r0, #255	@ 0xff
 800c02e:	d8e9      	bhi.n	800c004 <draw_key_value_pair.constprop.0+0x24>
    if (file_ptr) fatfs_write_string(file_ptr, temp_buffer);
 800c030:	0031      	movs	r1, r6
 800c032:	a804      	add	r0, sp, #16
 800c034:	f009 fe60 	bl	8015cf8 <f_puts>
    return file_ptr ? 0 : len;
 800c038:	2000      	movs	r0, #0
 800c03a:	e7e5      	b.n	800c008 <draw_key_value_pair.constprop.0+0x28>
 800c03c:	0801fa5d 	.word	0x0801fa5d
 800c040:	20003090 	.word	0x20003090
 800c044:	0801fa88 	.word	0x0801fa88

0800c048 <pdf_chart_plot_data.constprop.0>:
static void pdf_chart_plot_data(FIL* file_p, int y_pos, float* data, int start_index, int num_points_in_chunk, int total_points, float r, float g, float b, float data_min, float data_max) {
 800c048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04a:	b08f      	sub	sp, #60	@ 0x3c
 800c04c:	000c      	movs	r4, r1
 800c04e:	9006      	str	r0, [sp, #24]
    if (num_points_in_chunk < 2) {
 800c050:	2b01      	cmp	r3, #1
 800c052:	d06e      	beq.n	800c132 <pdf_chart_plot_data.constprop.0+0xea>
    const int chart_y_start = y_pos - FIELD_SPACING;
 800c054:	0001      	movs	r1, r0
 800c056:	18d3      	adds	r3, r2, r3
 800c058:	3914      	subs	r1, #20
 800c05a:	9109      	str	r1, [sp, #36]	@ 0x24
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800c05c:	1c57      	adds	r7, r2, #1
 800c05e:	930a      	str	r3, [sp, #40]	@ 0x28
        float x1 = map_value((float)(start_index + i), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800c060:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c062:	1e58      	subs	r0, r3, #1
 800c064:	f7f5 fb62 	bl	800172c <__aeabi_i2f>
 800c068:	1c06      	adds	r6, r0, #0
        float y1 = map_value(data[i], data_min, data_max, chart_y_start - CHART_HEIGHT, chart_y_start);
 800c06a:	9806      	ldr	r0, [sp, #24]
 800c06c:	380f      	subs	r0, #15
 800c06e:	38ff      	subs	r0, #255	@ 0xff
 800c070:	f7f5 fb5c 	bl	800172c <__aeabi_i2f>
 800c074:	1c05      	adds	r5, r0, #0
 800c076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c078:	f7f5 fb58 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800c07c:	1c29      	adds	r1, r5, #0
 800c07e:	f7f5 f8bb 	bl	80011f8 <__aeabi_fsub>
 800c082:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c084:	9007      	str	r0, [sp, #28]
 800c086:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800c088:	f7f5 f8b6 	bl	80011f8 <__aeabi_fsub>
 800c08c:	9008      	str	r0, [sp, #32]
        float x2 = map_value((float)(start_index + i + 1), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800c08e:	0038      	movs	r0, r7
 800c090:	f7f5 fb4c 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800c094:	4928      	ldr	r1, [pc, #160]	@ (800c138 <pdf_chart_plot_data.constprop.0+0xf0>)
 800c096:	f7f4 ff55 	bl	8000f44 <__aeabi_fmul>
 800c09a:	1c31      	adds	r1, r6, #0
 800c09c:	f7f4 fd84 	bl	8000ba8 <__aeabi_fdiv>
 800c0a0:	4926      	ldr	r1, [pc, #152]	@ (800c13c <pdf_chart_plot_data.constprop.0+0xf4>)
 800c0a2:	f7f4 fb8f 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800c0a6:	f7f5 fb21 	bl	80016ec <__aeabi_f2iz>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800c0aa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800c0ac:	900b      	str	r0, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800c0ae:	6820      	ldr	r0, [r4, #0]
 800c0b0:	f7f5 f8a2 	bl	80011f8 <__aeabi_fsub>
 800c0b4:	9907      	ldr	r1, [sp, #28]
 800c0b6:	f7f4 ff45 	bl	8000f44 <__aeabi_fmul>
 800c0ba:	9908      	ldr	r1, [sp, #32]
 800c0bc:	f7f4 fd74 	bl	8000ba8 <__aeabi_fdiv>
 800c0c0:	1c29      	adds	r1, r5, #0
 800c0c2:	f7f4 fb7f 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800c0c6:	f7f5 fb11 	bl	80016ec <__aeabi_f2iz>
 800c0ca:	900c      	str	r0, [sp, #48]	@ 0x30
        float x1 = map_value((float)(start_index + i), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800c0cc:	1e78      	subs	r0, r7, #1
 800c0ce:	f7f5 fb2d 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800c0d2:	4919      	ldr	r1, [pc, #100]	@ (800c138 <pdf_chart_plot_data.constprop.0+0xf0>)
 800c0d4:	f7f4 ff36 	bl	8000f44 <__aeabi_fmul>
 800c0d8:	1c31      	adds	r1, r6, #0
 800c0da:	f7f4 fd65 	bl	8000ba8 <__aeabi_fdiv>
 800c0de:	4917      	ldr	r1, [pc, #92]	@ (800c13c <pdf_chart_plot_data.constprop.0+0xf4>)
 800c0e0:	f7f4 fb70 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800c0e4:	f7f5 fb02 	bl	80016ec <__aeabi_f2iz>
 800c0e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0ea:	4e15      	ldr	r6, [pc, #84]	@ (800c140 <pdf_chart_plot_data.constprop.0+0xf8>)
 800c0ec:	900d      	str	r0, [sp, #52]	@ 0x34
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800c0f6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800c0f8:	9302      	str	r3, [sp, #8]
 800c0fa:	4b12      	ldr	r3, [pc, #72]	@ (800c144 <pdf_chart_plot_data.constprop.0+0xfc>)
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800c0fc:	3701      	adds	r7, #1
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800c0fe:	9301      	str	r3, [sp, #4]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800c100:	6860      	ldr	r0, [r4, #4]
 800c102:	f7f5 f879 	bl	80011f8 <__aeabi_fsub>
 800c106:	9907      	ldr	r1, [sp, #28]
 800c108:	f7f4 ff1c 	bl	8000f44 <__aeabi_fmul>
 800c10c:	9908      	ldr	r1, [sp, #32]
 800c10e:	f7f4 fd4b 	bl	8000ba8 <__aeabi_fdiv>
 800c112:	1c29      	adds	r1, r5, #0
 800c114:	f7f4 fb56 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800c118:	f7f5 fae8 	bl	80016ec <__aeabi_f2iz>
 800c11c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c11e:	9000      	str	r0, [sp, #0]
 800c120:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c122:	0030      	movs	r0, r6
 800c124:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c126:	f00c fee9 	bl	8018efc <tpdf_draw_line>
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800c12a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c12c:	3404      	adds	r4, #4
 800c12e:	42bb      	cmp	r3, r7
 800c130:	d196      	bne.n	800c060 <pdf_chart_plot_data.constprop.0+0x18>
}
 800c132:	b00f      	add	sp, #60	@ 0x3c
 800c134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c136:	46c0      	nop			@ (mov r8, r8)
 800c138:	43e10000 	.word	0x43e10000
 800c13c:	42960000 	.word	0x42960000
 800c140:	20003090 	.word	0x20003090
 800c144:	3fa00000 	.word	0x3fa00000

0800c148 <pdf_insert_datapoint_to_table.constprop.0>:
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800c148:	b5f0      	push	{r4, r5, r6, r7, lr}
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800c14a:	4c7b      	ldr	r4, [pc, #492]	@ (800c338 <pdf_insert_datapoint_to_table.constprop.0+0x1f0>)
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800c14c:	1c16      	adds	r6, r2, #0
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800c14e:	0022      	movs	r2, r4
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800c150:	b0bf      	sub	sp, #252	@ 0xfc
 800c152:	910c      	str	r1, [sp, #48]	@ 0x30
 800c154:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c156:	1c1f      	adds	r7, r3, #0
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800c158:	3292      	adds	r2, #146	@ 0x92
 800c15a:	4b78      	ldr	r3, [pc, #480]	@ (800c33c <pdf_insert_datapoint_to_table.constprop.0+0x1f4>)
 800c15c:	7812      	ldrb	r2, [r2, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	0212      	lsls	r2, r2, #8
 800c162:	431a      	orrs	r2, r3
 800c164:	0023      	movs	r3, r4
 800c166:	3393      	adds	r3, #147	@ 0x93
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	041b      	lsls	r3, r3, #16
 800c16c:	4313      	orrs	r3, r2
 800c16e:	0022      	movs	r2, r4
 800c170:	3294      	adds	r2, #148	@ 0x94
 800c172:	7815      	ldrb	r5, [r2, #0]
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800c174:	0022      	movs	r2, r4
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800c176:	062d      	lsls	r5, r5, #24
 800c178:	431d      	orrs	r5, r3
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800c17a:	0023      	movs	r3, r4
 800c17c:	329a      	adds	r2, #154	@ 0x9a
 800c17e:	7812      	ldrb	r2, [r2, #0]
 800c180:	3399      	adds	r3, #153	@ 0x99
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	0212      	lsls	r2, r2, #8
 800c186:	431a      	orrs	r2, r3
 800c188:	0023      	movs	r3, r4
 800c18a:	339b      	adds	r3, #155	@ 0x9b
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	041b      	lsls	r3, r3, #16
 800c190:	4313      	orrs	r3, r2
 800c192:	0022      	movs	r2, r4
 800c194:	329c      	adds	r2, #156	@ 0x9c
 800c196:	7812      	ldrb	r2, [r2, #0]
 800c198:	0612      	lsls	r2, r2, #24
 800c19a:	431a      	orrs	r2, r3
 800c19c:	920d      	str	r2, [sp, #52]	@ 0x34
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800c19e:	0022      	movs	r2, r4
 800c1a0:	0023      	movs	r3, r4
 800c1a2:	3298      	adds	r2, #152	@ 0x98
 800c1a4:	7810      	ldrb	r0, [r2, #0]
 800c1a6:	3397      	adds	r3, #151	@ 0x97
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	0200      	lsls	r0, r0, #8
 800c1ac:	4318      	orrs	r0, r3
 800c1ae:	0400      	lsls	r0, r0, #16
 800c1b0:	1400      	asrs	r0, r0, #16
 800c1b2:	f7f5 fabb 	bl	800172c <__aeabi_i2f>
 800c1b6:	4962      	ldr	r1, [pc, #392]	@ (800c340 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800c1b8:	f7f4 fcf6 	bl	8000ba8 <__aeabi_fdiv>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800c1bc:	0023      	movs	r3, r4
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800c1be:	9007      	str	r0, [sp, #28]
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800c1c0:	339f      	adds	r3, #159	@ 0x9f
 800c1c2:	781a      	ldrb	r2, [r3, #0]
 800c1c4:	0023      	movs	r3, r4
 800c1c6:	33a0      	adds	r3, #160	@ 0xa0
 800c1c8:	781b      	ldrb	r3, [r3, #0]
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c1ca:	2100      	movs	r1, #0
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800c1cc:	021b      	lsls	r3, r3, #8
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	041b      	lsls	r3, r3, #16
 800c1d2:	141b      	asrs	r3, r3, #16
 800c1d4:	9308      	str	r3, [sp, #32]
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800c1d6:	0023      	movs	r3, r4
 800c1d8:	3395      	adds	r3, #149	@ 0x95
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	0023      	movs	r3, r4
 800c1de:	3396      	adds	r3, #150	@ 0x96
 800c1e0:	781b      	ldrb	r3, [r3, #0]
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c1e2:	1c38      	adds	r0, r7, #0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	041b      	lsls	r3, r3, #16
 800c1ea:	141b      	asrs	r3, r3, #16
 800c1ec:	9309      	str	r3, [sp, #36]	@ 0x24
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800c1ee:	0023      	movs	r3, r4
 800c1f0:	349e      	adds	r4, #158	@ 0x9e
 800c1f2:	339d      	adds	r3, #157	@ 0x9d
 800c1f4:	781a      	ldrb	r2, [r3, #0]
 800c1f6:	7823      	ldrb	r3, [r4, #0]
 800c1f8:	021b      	lsls	r3, r3, #8
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	041b      	lsls	r3, r3, #16
 800c1fe:	141b      	asrs	r3, r3, #16
 800c200:	930a      	str	r3, [sp, #40]	@ 0x28
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c202:	f7f4 f995 	bl	8000530 <__aeabi_fcmpge>
 800c206:	1e04      	subs	r4, r0, #0
 800c208:	d017      	beq.n	800c23a <pdf_insert_datapoint_to_table.constprop.0+0xf2>
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800c20a:	0028      	movs	r0, r5
 800c20c:	f7f5 fade 	bl	80017cc <__aeabi_ui2f>
 800c210:	494c      	ldr	r1, [pc, #304]	@ (800c344 <pdf_insert_datapoint_to_table.constprop.0+0x1fc>)
 800c212:	f7f4 fcc9 	bl	8000ba8 <__aeabi_fdiv>
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c216:	1c39      	adds	r1, r7, #0
 800c218:	f7f4 f96c 	bl	80004f4 <__aeabi_fcmplt>
 800c21c:	2401      	movs	r4, #1
 800c21e:	2800      	cmp	r0, #0
 800c220:	d10b      	bne.n	800c23a <pdf_insert_datapoint_to_table.constprop.0+0xf2>
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800c222:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c224:	f7f5 fad2 	bl	80017cc <__aeabi_ui2f>
 800c228:	4946      	ldr	r1, [pc, #280]	@ (800c344 <pdf_insert_datapoint_to_table.constprop.0+0x1fc>)
 800c22a:	f7f4 fcbd 	bl	8000ba8 <__aeabi_fdiv>
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c22e:	1c39      	adds	r1, r7, #0
 800c230:	f7f4 f960 	bl	80004f4 <__aeabi_fcmplt>
 800c234:	1e43      	subs	r3, r0, #1
 800c236:	4198      	sbcs	r0, r3
 800c238:	0004      	movs	r4, r0
                       temperature >= th1 || temperature >= th2);
 800c23a:	9807      	ldr	r0, [sp, #28]
 800c23c:	1c31      	adds	r1, r6, #0
 800c23e:	f7f4 f96d 	bl	800051c <__aeabi_fcmpgt>
 800c242:	2501      	movs	r5, #1
 800c244:	2800      	cmp	r0, #0
 800c246:	d121      	bne.n	800c28c <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800c248:	9808      	ldr	r0, [sp, #32]
 800c24a:	f7f5 fa6f 	bl	800172c <__aeabi_i2f>
 800c24e:	493c      	ldr	r1, [pc, #240]	@ (800c340 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800c250:	f7f4 fcaa 	bl	8000ba8 <__aeabi_fdiv>
    bool temp_alarm = (temperature < tl1 || temperature < tl2 ||
 800c254:	1c31      	adds	r1, r6, #0
 800c256:	f7f4 f961 	bl	800051c <__aeabi_fcmpgt>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d116      	bne.n	800c28c <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800c25e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c260:	f7f5 fa64 	bl	800172c <__aeabi_i2f>
 800c264:	4936      	ldr	r1, [pc, #216]	@ (800c340 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800c266:	f7f4 fc9f 	bl	8000ba8 <__aeabi_fdiv>
    bool temp_alarm = (temperature < tl1 || temperature < tl2 ||
 800c26a:	1c31      	adds	r1, r6, #0
 800c26c:	f7f4 f94c 	bl	8000508 <__aeabi_fcmple>
 800c270:	2800      	cmp	r0, #0
 800c272:	d10b      	bne.n	800c28c <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800c274:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c276:	f7f5 fa59 	bl	800172c <__aeabi_i2f>
 800c27a:	4931      	ldr	r1, [pc, #196]	@ (800c340 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800c27c:	f7f4 fc94 	bl	8000ba8 <__aeabi_fdiv>
                       temperature >= th1 || temperature >= th2);
 800c280:	1c31      	adds	r1, r6, #0
 800c282:	f7f4 f941 	bl	8000508 <__aeabi_fcmple>
 800c286:	1e43      	subs	r3, r0, #1
 800c288:	4198      	sbcs	r0, r3
 800c28a:	0005      	movs	r5, r0
    time_to_dmyhms_string(time, time_buff, sizeof(time_buff));
 800c28c:	2240      	movs	r2, #64	@ 0x40
 800c28e:	432c      	orrs	r4, r5
 800c290:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800c292:	a90e      	add	r1, sp, #56	@ 0x38
 800c294:	9407      	str	r4, [sp, #28]
 800c296:	f7ff fbff 	bl	800ba98 <time_to_dmyhms_string>
    index = record_num % DATAPOINTS_PER_PAGE;
 800c29a:	21f0      	movs	r1, #240	@ 0xf0
 800c29c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c29e:	0049      	lsls	r1, r1, #1
 800c2a0:	f7f3 ffe8 	bl	8000274 <__aeabi_uidivmod>
 800c2a4:	000d      	movs	r5, r1
    child_table_num = (UINT) (index / DATAPOINTS_PER_CHILD_TABLE);
 800c2a6:	2160      	movs	r1, #96	@ 0x60
 800c2a8:	0028      	movs	r0, r5
 800c2aa:	f7f3 ff5d 	bl	8000168 <__udivsi3>
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800c2ae:	2463      	movs	r4, #99	@ 0x63
    index_in_child_table = (index % DATAPOINTS_PER_CHILD_TABLE);
 800c2b0:	2160      	movs	r1, #96	@ 0x60
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800c2b2:	4344      	muls	r4, r0
    index_in_child_table = (index % DATAPOINTS_PER_CHILD_TABLE);
 800c2b4:	0028      	movs	r0, r5
 800c2b6:	f7f3 ffdd 	bl	8000274 <__aeabi_uidivmod>
    *y = TEXT_DATAPOINT_Y_POS_START - index_in_child_table * DATAPOINTS_Y_MARGIN;
 800c2ba:	2307      	movs	r3, #7
 800c2bc:	434b      	muls	r3, r1
 800c2be:	4d22      	ldr	r5, [pc, #136]	@ (800c348 <pdf_insert_datapoint_to_table.constprop.0+0x200>)
    if (radiation < 0.0f)
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	1c38      	adds	r0, r7, #0
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800c2c4:	3434      	adds	r4, #52	@ 0x34
    *y = TEXT_DATAPOINT_Y_POS_START - index_in_child_table * DATAPOINTS_Y_MARGIN;
 800c2c6:	1aed      	subs	r5, r5, r3
    if (radiation < 0.0f)
 800c2c8:	f7f4 f914 	bl	80004f4 <__aeabi_fcmplt>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d021      	beq.n	800c314 <pdf_insert_datapoint_to_table.constprop.0+0x1cc>
        snprintf(buff, sizeof(buff), "%s     %-5.1f      n/a",     time_buff, temperature);
 800c2d0:	1c30      	adds	r0, r6, #0
 800c2d2:	f7f7 fa61 	bl	8003798 <__aeabi_f2d>
 800c2d6:	4f1d      	ldr	r7, [pc, #116]	@ (800c34c <pdf_insert_datapoint_to_table.constprop.0+0x204>)
 800c2d8:	9000      	str	r0, [sp, #0]
 800c2da:	9101      	str	r1, [sp, #4]
 800c2dc:	003a      	movs	r2, r7
 800c2de:	2180      	movs	r1, #128	@ 0x80
 800c2e0:	ab0e      	add	r3, sp, #56	@ 0x38
 800c2e2:	a81e      	add	r0, sp, #120	@ 0x78
 800c2e4:	f00e f8e4 	bl	801a4b0 <sniprintf>
    float r = is_alarm ? 1.0f : 0.0f, g = 0.0f, b = 0.0f;
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	9b07      	ldr	r3, [sp, #28]
 800c2ec:	1c11      	adds	r1, r2, #0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <pdf_insert_datapoint_to_table.constprop.0+0x1ae>
 800c2f2:	21fe      	movs	r1, #254	@ 0xfe
 800c2f4:	0589      	lsls	r1, r1, #22
    return tpdf_draw_colored_text(&pdf_file, x_pos, y_pos, "F1", TEXT_DATAPOINT_FONT_SIZE, r, g, b, buff);
 800c2f6:	9203      	str	r2, [sp, #12]
 800c2f8:	9202      	str	r2, [sp, #8]
 800c2fa:	2205      	movs	r2, #5
 800c2fc:	ae1e      	add	r6, sp, #120	@ 0x78
 800c2fe:	9101      	str	r1, [sp, #4]
 800c300:	9200      	str	r2, [sp, #0]
 800c302:	0021      	movs	r1, r4
 800c304:	002a      	movs	r2, r5
 800c306:	4b12      	ldr	r3, [pc, #72]	@ (800c350 <pdf_insert_datapoint_to_table.constprop.0+0x208>)
 800c308:	9604      	str	r6, [sp, #16]
 800c30a:	4812      	ldr	r0, [pc, #72]	@ (800c354 <pdf_insert_datapoint_to_table.constprop.0+0x20c>)
 800c30c:	f00c fdc0 	bl	8018e90 <tpdf_draw_colored_text>
}
 800c310:	b03f      	add	sp, #252	@ 0xfc
 800c312:	bdf0      	pop	{r4, r5, r6, r7, pc}
        snprintf(buff, sizeof(buff), "%s     %-5.1f      %-6.2f", time_buff, temperature, radiation);
 800c314:	1c38      	adds	r0, r7, #0
 800c316:	f7f7 fa3f 	bl	8003798 <__aeabi_f2d>
 800c31a:	9002      	str	r0, [sp, #8]
 800c31c:	9103      	str	r1, [sp, #12]
 800c31e:	1c30      	adds	r0, r6, #0
 800c320:	f7f7 fa3a 	bl	8003798 <__aeabi_f2d>
 800c324:	4a0c      	ldr	r2, [pc, #48]	@ (800c358 <pdf_insert_datapoint_to_table.constprop.0+0x210>)
 800c326:	9000      	str	r0, [sp, #0]
 800c328:	9101      	str	r1, [sp, #4]
 800c32a:	ab0e      	add	r3, sp, #56	@ 0x38
 800c32c:	2180      	movs	r1, #128	@ 0x80
 800c32e:	a81e      	add	r0, sp, #120	@ 0x78
 800c330:	f00e f8be 	bl	801a4b0 <sniprintf>
 800c334:	e7d8      	b.n	800c2e8 <pdf_insert_datapoint_to_table.constprop.0+0x1a0>
 800c336:	46c0      	nop			@ (mov r8, r8)
 800c338:	20002bac 	.word	0x20002bac
 800c33c:	20002c3d 	.word	0x20002c3d
 800c340:	41200000 	.word	0x41200000
 800c344:	42c80000 	.word	0x42c80000
 800c348:	000002ee 	.word	0x000002ee
 800c34c:	0801fab3 	.word	0x0801fab3
 800c350:	0801f75e 	.word	0x0801f75e
 800c354:	20003090 	.word	0x20003090
 800c358:	0801faca 	.word	0x0801faca

0800c35c <pdf_gen_template_file>:
UINT pdf_gen_template_file(void) {
 800c35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    res = f_stat (pdf_file_name,&fno);
 800c35e:	4e27      	ldr	r6, [pc, #156]	@ (800c3fc <pdf_gen_template_file+0xa0>)
UINT pdf_gen_template_file(void) {
 800c360:	b089      	sub	sp, #36	@ 0x24
    res = f_stat (pdf_file_name,&fno);
 800c362:	6830      	ldr	r0, [r6, #0]
 800c364:	a902      	add	r1, sp, #8
 800c366:	f009 f876 	bl	8015456 <f_stat>
 800c36a:	4c25      	ldr	r4, [pc, #148]	@ (800c400 <pdf_gen_template_file+0xa4>)
 800c36c:	1e07      	subs	r7, r0, #0
    switch (res)
 800c36e:	4d25      	ldr	r5, [pc, #148]	@ (800c404 <pdf_gen_template_file+0xa8>)
 800c370:	d005      	beq.n	800c37e <pdf_gen_template_file+0x22>
 800c372:	2804      	cmp	r0, #4
 800c374:	d00b      	beq.n	800c38e <pdf_gen_template_file+0x32>
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800c376:	003b      	movs	r3, r7
 800c378:	4923      	ldr	r1, [pc, #140]	@ (800c408 <pdf_gen_template_file+0xac>)
 800c37a:	6828      	ldr	r0, [r5, #0]
 800c37c:	e002      	b.n	800c384 <pdf_gen_template_file+0x28>
        LOG_APP("File '%s' exists \r\n", pdf_file_name);
 800c37e:	4923      	ldr	r1, [pc, #140]	@ (800c40c <pdf_gen_template_file+0xb0>)
 800c380:	6828      	ldr	r0, [r5, #0]
        LOG_APP("SUCCESS: Created template %s file\r\n",pdf_file_name);
 800c382:	6833      	ldr	r3, [r6, #0]
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800c384:	0022      	movs	r2, r4
 800c386:	68c0      	ldr	r0, [r0, #12]
 800c388:	f00d ffec 	bl	801a364 <fiprintf>
        break;
 800c38c:	e01a      	b.n	800c3c4 <pdf_gen_template_file+0x68>
        LOG_APP("File '%s' not found. Creating new file with header.\n", pdf_file_name);
 800c38e:	6828      	ldr	r0, [r5, #0]
 800c390:	0022      	movs	r2, r4
 800c392:	491f      	ldr	r1, [pc, #124]	@ (800c410 <pdf_gen_template_file+0xb4>)
 800c394:	6833      	ldr	r3, [r6, #0]
 800c396:	68c0      	ldr	r0, [r0, #12]
 800c398:	f00d ffe4 	bl	801a364 <fiprintf>
        res = f_open(&pdf_file, pdf_file_name, FA_CREATE_NEW | FA_WRITE);
 800c39c:	4b1d      	ldr	r3, [pc, #116]	@ (800c414 <pdf_gen_template_file+0xb8>)
 800c39e:	2206      	movs	r2, #6
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	6831      	ldr	r1, [r6, #0]
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	f008 fdb7 	bl	8014f18 <f_open>
 800c3aa:	1e07      	subs	r7, r0, #0
        if (res != FR_OK)
 800c3ac:	d00d      	beq.n	800c3ca <pdf_gen_template_file+0x6e>
            LOG_APP("Open PDF log file failed,Unmount...\r\n");
 800c3ae:	682b      	ldr	r3, [r5, #0]
 800c3b0:	0022      	movs	r2, r4
 800c3b2:	4919      	ldr	r1, [pc, #100]	@ (800c418 <pdf_gen_template_file+0xbc>)
 800c3b4:	68d8      	ldr	r0, [r3, #12]
 800c3b6:	f00d ffd5 	bl	801a364 <fiprintf>
            f_mount(NULL, "", 0);
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	4917      	ldr	r1, [pc, #92]	@ (800c41c <pdf_gen_template_file+0xc0>)
 800c3be:	0010      	movs	r0, r2
 800c3c0:	f008 fd80 	bl	8014ec4 <f_mount>
    return res;
 800c3c4:	0038      	movs	r0, r7
}
 800c3c6:	b009      	add	sp, #36	@ 0x24
 800c3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        generate_pdf_raw_report();
 800c3ca:	f7ff fb83 	bl	800bad4 <generate_pdf_raw_report>
        LOG_APP("Closing file, Flush...\r\n");
 800c3ce:	682b      	ldr	r3, [r5, #0]
 800c3d0:	0022      	movs	r2, r4
 800c3d2:	4913      	ldr	r1, [pc, #76]	@ (800c420 <pdf_gen_template_file+0xc4>)
 800c3d4:	68d8      	ldr	r0, [r3, #12]
 800c3d6:	f00d ffc5 	bl	801a364 <fiprintf>
        res = f_close(&pdf_file);
 800c3da:	9801      	ldr	r0, [sp, #4]
 800c3dc:	f008 ffa2 	bl	8015324 <f_close>
 800c3e0:	1e07      	subs	r7, r0, #0
        if (res != FR_OK)
 800c3e2:	d006      	beq.n	800c3f2 <pdf_gen_template_file+0x96>
            LOG_APP("f_close pdf file failed, ret=%d\r\n",res);
 800c3e4:	6828      	ldr	r0, [r5, #0]
 800c3e6:	003b      	movs	r3, r7
 800c3e8:	0022      	movs	r2, r4
 800c3ea:	490e      	ldr	r1, [pc, #56]	@ (800c424 <pdf_gen_template_file+0xc8>)
 800c3ec:	68c0      	ldr	r0, [r0, #12]
 800c3ee:	f00d ffb9 	bl	801a364 <fiprintf>
        LOG_APP("SUCCESS: Created template %s file\r\n",pdf_file_name);
 800c3f2:	4b04      	ldr	r3, [pc, #16]	@ (800c404 <pdf_gen_template_file+0xa8>)
 800c3f4:	490c      	ldr	r1, [pc, #48]	@ (800c428 <pdf_gen_template_file+0xcc>)
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	e7c3      	b.n	800c382 <pdf_gen_template_file+0x26>
 800c3fa:	46c0      	nop			@ (mov r8, r8)
 800c3fc:	200001fc 	.word	0x200001fc
 800c400:	0801eafb 	.word	0x0801eafb
 800c404:	200002cc 	.word	0x200002cc
 800c408:	0801f4e6 	.word	0x0801f4e6
 800c40c:	0801f408 	.word	0x0801f408
 800c410:	0801f421 	.word	0x0801f421
 800c414:	20003090 	.word	0x20003090
 800c418:	0801fae4 	.word	0x0801fae4
 800c41c:	0801f5e0 	.word	0x0801f5e0
 800c420:	0801f4b0 	.word	0x0801f4b0
 800c424:	0801fb0f 	.word	0x0801fb0f
 800c428:	0801fb36 	.word	0x0801fb36

0800c42c <pdf_append_all_flash_log_entries>:
{
 800c42c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 800c42e:	4b3a      	ldr	r3, [pc, #232]	@ (800c518 <pdf_append_all_flash_log_entries+0xec>)
 800c430:	4e3a      	ldr	r6, [pc, #232]	@ (800c51c <pdf_append_all_flash_log_entries+0xf0>)
 800c432:	2232      	movs	r2, #50	@ 0x32
 800c434:	0030      	movs	r0, r6
 800c436:	6819      	ldr	r1, [r3, #0]
{
 800c438:	b089      	sub	sp, #36	@ 0x24
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 800c43a:	f008 fd6d 	bl	8014f18 <f_open>
 800c43e:	1e04      	subs	r4, r0, #0
 800c440:	d008      	beq.n	800c454 <pdf_append_all_flash_log_entries+0x28>
        LOG_APP("FATAL: f_open pdf_file FAILED\r\n");
 800c442:	4b37      	ldr	r3, [pc, #220]	@ (800c520 <pdf_append_all_flash_log_entries+0xf4>)
 800c444:	4a37      	ldr	r2, [pc, #220]	@ (800c524 <pdf_append_all_flash_log_entries+0xf8>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4937      	ldr	r1, [pc, #220]	@ (800c528 <pdf_append_all_flash_log_entries+0xfc>)
 800c44a:	68d8      	ldr	r0, [r3, #12]
 800c44c:	f00d ff8a 	bl	801a364 <fiprintf>
}
 800c450:	b009      	add	sp, #36	@ 0x24
 800c452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(&pdf_file, f_size(&pdf_file));
 800c454:	0030      	movs	r0, r6
 800c456:	68f1      	ldr	r1, [r6, #12]
 800c458:	f008 ff72 	bl	8015340 <f_lseek>
        meas_data_log_read_entry(i, &entry);
 800c45c:	ad02      	add	r5, sp, #8
 800c45e:	0029      	movs	r1, r5
 800c460:	0020      	movs	r0, r4
 800c462:	f7fc fa55 	bl	8008910 <meas_data_log_read_entry>
        if (entry.year == 0xFF || entry.index == 0xFFFF || entry.month == 0xFF)
 800c466:	78aa      	ldrb	r2, [r5, #2]
 800c468:	2aff      	cmp	r2, #255	@ 0xff
 800c46a:	d02e      	beq.n	800c4ca <pdf_append_all_flash_log_entries+0x9e>
 800c46c:	8829      	ldrh	r1, [r5, #0]
 800c46e:	4b2f      	ldr	r3, [pc, #188]	@ (800c52c <pdf_append_all_flash_log_entries+0x100>)
 800c470:	4299      	cmp	r1, r3
 800c472:	d02a      	beq.n	800c4ca <pdf_append_all_flash_log_entries+0x9e>
 800c474:	78eb      	ldrb	r3, [r5, #3]
 800c476:	2bff      	cmp	r3, #255	@ 0xff
 800c478:	d027      	beq.n	800c4ca <pdf_append_all_flash_log_entries+0x9e>
        file_log_time_t time = {
 800c47a:	4669      	mov	r1, sp
 800c47c:	704b      	strb	r3, [r1, #1]
 800c47e:	88ab      	ldrh	r3, [r5, #4]
 800c480:	700a      	strb	r2, [r1, #0]
 800c482:	804b      	strh	r3, [r1, #2]
 800c484:	88eb      	ldrh	r3, [r5, #6]
 800c486:	808b      	strh	r3, [r1, #4]
        float temp = entry.temperature / 10.0f;
 800c488:	230a      	movs	r3, #10
 800c48a:	5ee8      	ldrsh	r0, [r5, r3]
 800c48c:	f7f5 f94e 	bl	800172c <__aeabi_i2f>
 800c490:	4927      	ldr	r1, [pc, #156]	@ (800c530 <pdf_append_all_flash_log_entries+0x104>)
 800c492:	f7f4 fb89 	bl	8000ba8 <__aeabi_fdiv>
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800c496:	7c6b      	ldrb	r3, [r5, #17]
        float temp = entry.temperature / 10.0f;
 800c498:	1c07      	adds	r7, r0, #0
        float dose = entry.dose / 100.0f;
 800c49a:	9805      	ldr	r0, [sp, #20]
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d018      	beq.n	800c4d2 <pdf_append_all_flash_log_entries+0xa6>
        float dose = entry.dose / 100.0f;
 800c4a0:	f7f5 f994 	bl	80017cc <__aeabi_ui2f>
 800c4a4:	4923      	ldr	r1, [pc, #140]	@ (800c534 <pdf_append_all_flash_log_entries+0x108>)
 800c4a6:	f7f4 fb7f 	bl	8000ba8 <__aeabi_fdiv>
 800c4aa:	1c03      	adds	r3, r0, #0
        if (pdf_insert_datapoint_to_table(i, &time, temp, rad_for_print, &current_settings) < 0) {
 800c4ac:	4669      	mov	r1, sp
 800c4ae:	0020      	movs	r0, r4
 800c4b0:	1c3a      	adds	r2, r7, #0
 800c4b2:	f7ff fe49 	bl	800c148 <pdf_insert_datapoint_to_table.constprop.0>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	da0d      	bge.n	800c4d6 <pdf_append_all_flash_log_entries+0xaa>
            LOG_APP("PDF: insert failed at %lu\r\n", (unsigned long)i);
 800c4ba:	4b19      	ldr	r3, [pc, #100]	@ (800c520 <pdf_append_all_flash_log_entries+0xf4>)
 800c4bc:	4a19      	ldr	r2, [pc, #100]	@ (800c524 <pdf_append_all_flash_log_entries+0xf8>)
 800c4be:	6818      	ldr	r0, [r3, #0]
 800c4c0:	491d      	ldr	r1, [pc, #116]	@ (800c538 <pdf_append_all_flash_log_entries+0x10c>)
 800c4c2:	0023      	movs	r3, r4
 800c4c4:	68c0      	ldr	r0, [r0, #12]
 800c4c6:	f00d ff4d 	bl	801a364 <fiprintf>
    f_close(&pdf_file);
 800c4ca:	0030      	movs	r0, r6
 800c4cc:	f008 ff2a 	bl	8015324 <f_close>
 800c4d0:	e7be      	b.n	800c450 <pdf_append_all_flash_log_entries+0x24>
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800c4d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c53c <pdf_append_all_flash_log_entries+0x110>)
 800c4d4:	e7ea      	b.n	800c4ac <pdf_append_all_flash_log_entries+0x80>
        if ((i % DATAPOINTS_PER_PAGE) == (DATAPOINTS_PER_PAGE - 1)) {
 800c4d6:	21f0      	movs	r1, #240	@ 0xf0
 800c4d8:	0020      	movs	r0, r4
 800c4da:	0049      	lsls	r1, r1, #1
 800c4dc:	f7f3 feca 	bl	8000274 <__aeabi_uidivmod>
 800c4e0:	23e0      	movs	r3, #224	@ 0xe0
 800c4e2:	33ff      	adds	r3, #255	@ 0xff
 800c4e4:	4299      	cmp	r1, r3
 800c4e6:	d106      	bne.n	800c4f6 <pdf_append_all_flash_log_entries+0xca>
            UINT current_page = (UINT)(i / DATAPOINTS_PER_PAGE);
 800c4e8:	21f0      	movs	r1, #240	@ 0xf0
 800c4ea:	0020      	movs	r0, r4
 800c4ec:	0049      	lsls	r1, r1, #1
 800c4ee:	f7f3 fe3b 	bl	8000168 <__udivsi3>
            pdf_page_handle_for_new_datapoints(current_page);
 800c4f2:	f7ff fc3f 	bl	800bd74 <pdf_page_handle_for_new_datapoints>
        if ((i & 0xFF) == 0) {
 800c4f6:	b2e3      	uxtb	r3, r4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d107      	bne.n	800c50c <pdf_append_all_flash_log_entries+0xe0>
            LOG_APP("PDF append progress: %lu\r\n", (unsigned long)i);
 800c4fc:	4b08      	ldr	r3, [pc, #32]	@ (800c520 <pdf_append_all_flash_log_entries+0xf4>)
 800c4fe:	4a09      	ldr	r2, [pc, #36]	@ (800c524 <pdf_append_all_flash_log_entries+0xf8>)
 800c500:	6818      	ldr	r0, [r3, #0]
 800c502:	490f      	ldr	r1, [pc, #60]	@ (800c540 <pdf_append_all_flash_log_entries+0x114>)
 800c504:	0023      	movs	r3, r4
 800c506:	68c0      	ldr	r0, [r0, #12]
 800c508:	f00d ff2c 	bl	801a364 <fiprintf>
    for (uint32_t i = 0; i < max_idx; i++) {
 800c50c:	4b0d      	ldr	r3, [pc, #52]	@ (800c544 <pdf_append_all_flash_log_entries+0x118>)
 800c50e:	3401      	adds	r4, #1
 800c510:	429c      	cmp	r4, r3
 800c512:	d1a3      	bne.n	800c45c <pdf_append_all_flash_log_entries+0x30>
 800c514:	e7d9      	b.n	800c4ca <pdf_append_all_flash_log_entries+0x9e>
 800c516:	46c0      	nop			@ (mov r8, r8)
 800c518:	200001fc 	.word	0x200001fc
 800c51c:	20003090 	.word	0x20003090
 800c520:	200002cc 	.word	0x200002cc
 800c524:	0801eafb 	.word	0x0801eafb
 800c528:	0801fb5f 	.word	0x0801fb5f
 800c52c:	0000ffff 	.word	0x0000ffff
 800c530:	41200000 	.word	0x41200000
 800c534:	42c80000 	.word	0x42c80000
 800c538:	0801fb84 	.word	0x0801fb84
 800c53c:	bf800000 	.word	0xbf800000
 800c540:	0801fba5 	.word	0x0801fba5
 800c544:	0000c30c 	.word	0x0000c30c

0800c548 <pdf_gen_completed_report>:
                            const DeviceSettings *dev_setting) {
 800c548:	2300      	movs	r3, #0
 800c54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c54c:	4c16      	ldr	r4, [pc, #88]	@ (800c5a8 <pdf_gen_completed_report+0x60>)
 800c54e:	44a5      	add	sp, r4
 800c550:	0004      	movs	r4, r0
 800c552:	9311      	str	r3, [sp, #68]	@ 0x44
 800c554:	9107      	str	r1, [sp, #28]
	const logging_summary_t *summary = csv_get_logging_summary();
 800c556:	f7ff fab9 	bl	800bacc <csv_get_logging_summary>
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800c55a:	21f0      	movs	r1, #240	@ 0xf0
	       (unsigned)log->data_points_temp_count, (unsigned)DATAPOINTS_PER_PAGE,
 800c55c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800c55e:	0049      	lsls	r1, r1, #1
	const logging_summary_t *summary = csv_get_logging_summary();
 800c560:	0006      	movs	r6, r0
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800c562:	0028      	movs	r0, r5
 800c564:	f7f3 fe00 	bl	8000168 <__udivsi3>
	printf("[DBG][PDF] temp_pts=%u, per_page=%u -> total_pages=%u(+1st)\r\n",
 800c568:	22f0      	movs	r2, #240	@ 0xf0
 800c56a:	4f10      	ldr	r7, [pc, #64]	@ (800c5ac <pdf_gen_completed_report+0x64>)
 800c56c:	0029      	movs	r1, r5
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	0052      	lsls	r2, r2, #1
 800c572:	0038      	movs	r0, r7
 800c574:	f00d ff22 	bl	801a3bc <iprintf>
	printf("Report PDF File\r\n");
 800c578:	480d      	ldr	r0, [pc, #52]	@ (800c5b0 <pdf_gen_completed_report+0x68>)
 800c57a:	f00d ff8f 	bl	801a49c <puts>
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800c57e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 800c580:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b4 <pdf_gen_completed_report+0x6c>)
 800c582:	4c0d      	ldr	r4, [pc, #52]	@ (800c5b8 <pdf_gen_completed_report+0x70>)
 800c584:	2232      	movs	r2, #50	@ 0x32
 800c586:	0020      	movs	r0, r4
 800c588:	6819      	ldr	r1, [r3, #0]
 800c58a:	f008 fcc5 	bl	8014f18 <f_open>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d01c      	beq.n	800c5cc <pdf_gen_completed_report+0x84>
        LOG_APP("FATAL: f_open pdf FAILED\r\n");
 800c592:	4b0a      	ldr	r3, [pc, #40]	@ (800c5bc <pdf_gen_completed_report+0x74>)
 800c594:	4a0a      	ldr	r2, [pc, #40]	@ (800c5c0 <pdf_gen_completed_report+0x78>)
 800c596:	490b      	ldr	r1, [pc, #44]	@ (800c5c4 <pdf_gen_completed_report+0x7c>)
 800c598:	681b      	ldr	r3, [r3, #0]
    LOG_APP("Close PDF log file\r\n");
 800c59a:	68d8      	ldr	r0, [r3, #12]
 800c59c:	f00d fee2 	bl	801a364 <fiprintf>
}
 800c5a0:	4b09      	ldr	r3, [pc, #36]	@ (800c5c8 <pdf_gen_completed_report+0x80>)
 800c5a2:	449d      	add	sp, r3
 800c5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a6:	46c0      	nop			@ (mov r8, r8)
 800c5a8:	ffffef2c 	.word	0xffffef2c
 800c5ac:	0801fbcd 	.word	0x0801fbcd
 800c5b0:	0801fc0b 	.word	0x0801fc0b
 800c5b4:	200001fc 	.word	0x200001fc
 800c5b8:	20003090 	.word	0x20003090
 800c5bc:	200002cc 	.word	0x200002cc
 800c5c0:	0801eafb 	.word	0x0801eafb
 800c5c4:	0801fc1c 	.word	0x0801fc1c
 800c5c8:	000010d4 	.word	0x000010d4
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800c5cc:	21f0      	movs	r1, #240	@ 0xf0
 800c5ce:	0028      	movs	r0, r5
 800c5d0:	0049      	lsls	r1, r1, #1
 800c5d2:	f7f3 fdc9 	bl	8000168 <__udivsi3>
    UINT current_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page *10);
 800c5d6:	210a      	movs	r1, #10
 800c5d8:	4341      	muls	r1, r0
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, 1234 ,&pdf_monitor );
 800c5da:	4dfb      	ldr	r5, [pc, #1004]	@ (800c9c8 <pdf_gen_completed_report+0x480>)
 800c5dc:	4afb      	ldr	r2, [pc, #1004]	@ (800c9cc <pdf_gen_completed_report+0x484>)
 800c5de:	002b      	movs	r3, r5
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800c5e0:	900e      	str	r0, [sp, #56]	@ 0x38
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, 1234 ,&pdf_monitor );
 800c5e2:	3118      	adds	r1, #24
 800c5e4:	0020      	movs	r0, r4
 800c5e6:	f00c fd35 	bl	8019054 <tpdf_end_new_stream_obj>
    time_to_dmyhms_string(&log->start_time, tmp_start_time, sizeof(tmp_start_time));
 800c5ea:	0030      	movs	r0, r6
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	3018      	adds	r0, #24
 800c5f0:	a934      	add	r1, sp, #208	@ 0xd0
 800c5f2:	f7ff fa51 	bl	800ba98 <time_to_dmyhms_string>
    time_to_dmyhms_string(&log->stop_time, tmp_stop_time, sizeof(tmp_stop_time));
 800c5f6:	0030      	movs	r0, r6
 800c5f8:	2220      	movs	r2, #32
 800c5fa:	301e      	adds	r0, #30
 800c5fc:	a974      	add	r1, sp, #464	@ 0x1d0
 800c5fe:	f7ff fa4b 	bl	800ba98 <time_to_dmyhms_string>
    tpdf_start_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, &pdf_monitor);
 800c602:	002b      	movs	r3, r5
 800c604:	2207      	movs	r2, #7
 800c606:	2106      	movs	r1, #6
 800c608:	0020      	movs	r0, r4
 800c60a:	f00c fd07 	bl	801901c <tpdf_start_new_stream_obj>
    snprintf(buff, sizeof(buff), "Start time: %s", tmp_start_time);
 800c60e:	48f0      	ldr	r0, [pc, #960]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c610:	ae1a      	add	r6, sp, #104	@ 0x68
 800c612:	2140      	movs	r1, #64	@ 0x40
 800c614:	4aef      	ldr	r2, [pc, #956]	@ (800c9d4 <pdf_gen_completed_report+0x48c>)
 800c616:	ab34      	add	r3, sp, #208	@ 0xd0
 800c618:	1980      	adds	r0, r0, r6
 800c61a:	f00d ff49 	bl	801a4b0 <sniprintf>
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800c61e:	4aec      	ldr	r2, [pc, #944]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c620:	2700      	movs	r7, #0
 800c622:	1992      	adds	r2, r2, r6
 800c624:	9204      	str	r2, [sp, #16]
 800c626:	2209      	movs	r2, #9
 800c628:	9200      	str	r2, [sp, #0]
 800c62a:	22c8      	movs	r2, #200	@ 0xc8
 800c62c:	4bea      	ldr	r3, [pc, #936]	@ (800c9d8 <pdf_gen_completed_report+0x490>)
 800c62e:	2132      	movs	r1, #50	@ 0x32
 800c630:	0092      	lsls	r2, r2, #2
 800c632:	0020      	movs	r0, r4
 800c634:	9703      	str	r7, [sp, #12]
 800c636:	9702      	str	r7, [sp, #8]
 800c638:	9701      	str	r7, [sp, #4]
 800c63a:	9308      	str	r3, [sp, #32]
 800c63c:	f00c fc28 	bl	8018e90 <tpdf_draw_colored_text>
 800c640:	9006      	str	r0, [sp, #24]
    snprintf(buff, sizeof(buff), "Stop time: %s", tmp_stop_time);
 800c642:	48e3      	ldr	r0, [pc, #908]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c644:	2140      	movs	r1, #64	@ 0x40
 800c646:	4ae5      	ldr	r2, [pc, #916]	@ (800c9dc <pdf_gen_completed_report+0x494>)
 800c648:	ab74      	add	r3, sp, #464	@ 0x1d0
 800c64a:	1980      	adds	r0, r0, r6
 800c64c:	f00d ff30 	bl	801a4b0 <sniprintf>
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_RIGHT - 120, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800c650:	2209      	movs	r2, #9
 800c652:	21aa      	movs	r1, #170	@ 0xaa
 800c654:	9200      	str	r2, [sp, #0]
 800c656:	22c8      	movs	r2, #200	@ 0xc8
 800c658:	4bdd      	ldr	r3, [pc, #884]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c65a:	0092      	lsls	r2, r2, #2
 800c65c:	199b      	adds	r3, r3, r6
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	31ff      	adds	r1, #255	@ 0xff
 800c662:	9b08      	ldr	r3, [sp, #32]
 800c664:	0020      	movs	r0, r4
 800c666:	9703      	str	r7, [sp, #12]
 800c668:	9702      	str	r7, [sp, #8]
 800c66a:	9701      	str	r7, [sp, #4]
 800c66c:	f00c fc10 	bl	8018e90 <tpdf_draw_colored_text>
 800c670:	9b06      	ldr	r3, [sp, #24]
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c672:	2132      	movs	r1, #50	@ 0x32
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_RIGHT - 120, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800c674:	181e      	adds	r6, r3, r0
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c676:	23ff      	movs	r3, #255	@ 0xff
 800c678:	059b      	lsls	r3, r3, #22
 800c67a:	9301      	str	r3, [sp, #4]
 800c67c:	4bd8      	ldr	r3, [pc, #864]	@ (800c9e0 <pdf_gen_completed_report+0x498>)
 800c67e:	4ad8      	ldr	r2, [pc, #864]	@ (800c9e0 <pdf_gen_completed_report+0x498>)
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	0020      	movs	r0, r4
 800c684:	4bd7      	ldr	r3, [pc, #860]	@ (800c9e4 <pdf_gen_completed_report+0x49c>)
 800c686:	9704      	str	r7, [sp, #16]
 800c688:	9703      	str	r7, [sp, #12]
 800c68a:	9702      	str	r7, [sp, #8]
 800c68c:	f00c fc36 	bl	8018efc <tpdf_draw_line>
    tpdf_end_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, stream_length, &pdf_monitor);
 800c690:	002b      	movs	r3, r5
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c692:	1832      	adds	r2, r6, r0
    tpdf_end_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, stream_length, &pdf_monitor);
 800c694:	2107      	movs	r1, #7
 800c696:	0020      	movs	r0, r4
 800c698:	f00c fcdc 	bl	8019054 <tpdf_end_new_stream_obj>
        const logging_summary_t *summary = csv_get_logging_summary();
 800c69c:	f7ff fa16 	bl	800bacc <csv_get_logging_summary>
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800c6a0:	2311      	movs	r3, #17
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	49d0      	ldr	r1, [pc, #832]	@ (800c9e8 <pdf_gen_completed_report+0x4a0>)
 800c6a6:	9300      	str	r3, [sp, #0]
        const logging_summary_t *summary = csv_get_logging_summary();
 800c6a8:	0006      	movs	r6, r0
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800c6aa:	3b06      	subs	r3, #6
 800c6ac:	a834      	add	r0, sp, #208	@ 0xd0
 800c6ae:	f00d ff35 	bl	801a51c <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_1ST, content_buffer, &pdf_monitor);
 800c6b2:	a934      	add	r1, sp, #208	@ 0xd0
 800c6b4:	002b      	movs	r3, r5
 800c6b6:	000a      	movs	r2, r1
 800c6b8:	0020      	movs	r0, r4
 800c6ba:	210a      	movs	r1, #10
 800c6bc:	f00c fc88 	bl	8018fd0 <tpdf_add_new_obj>
    tpdf_start_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,&pdf_monitor);
 800c6c0:	002b      	movs	r3, r5
 800c6c2:	220d      	movs	r2, #13
 800c6c4:	210b      	movs	r1, #11
 800c6c6:	0020      	movs	r0, r4
 800c6c8:	f00c fca8 	bl	801901c <tpdf_start_new_stream_obj>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT,PDF_PAGE_TOP,"F2",24,0,0,1,"DATA LOG");
 800c6cc:	4bc7      	ldr	r3, [pc, #796]	@ (800c9ec <pdf_gen_completed_report+0x4a4>)
 800c6ce:	21fe      	movs	r1, #254	@ 0xfe
 800c6d0:	9304      	str	r3, [sp, #16]
 800c6d2:	22c8      	movs	r2, #200	@ 0xc8
 800c6d4:	2318      	movs	r3, #24
 800c6d6:	4dc6      	ldr	r5, [pc, #792]	@ (800c9f0 <pdf_gen_completed_report+0x4a8>)
 800c6d8:	0589      	lsls	r1, r1, #22
 800c6da:	9103      	str	r1, [sp, #12]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	2132      	movs	r1, #50	@ 0x32
 800c6e0:	002b      	movs	r3, r5
 800c6e2:	0092      	lsls	r2, r2, #2
 800c6e4:	0020      	movs	r0, r4
 800c6e6:	9702      	str	r7, [sp, #8]
 800c6e8:	9701      	str	r7, [sp, #4]
 800c6ea:	f00c fbd1 	bl	8018e90 <tpdf_draw_colored_text>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c6ee:	4bc1      	ldr	r3, [pc, #772]	@ (800c9f4 <pdf_gen_completed_report+0x4ac>)
 800c6f0:	2200      	movs	r2, #0
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT,PDF_PAGE_TOP,"F2",24,0,0,1,"DATA LOG");
 800c6f2:	900a      	str	r0, [sp, #40]	@ 0x28
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c6f4:	a921      	add	r1, sp, #132	@ 0x84
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6fa:	f005 fd6d 	bl	80121d8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c6fe:	2200      	movs	r2, #0
 800c700:	a920      	add	r1, sp, #128	@ 0x80
 800c702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c704:	f005 fd9a 	bl	801223c <HAL_RTC_GetDate>
    snprintf(created_at, sizeof(created_at), "20%02u-%02u-%02u %02u:%02u:%02u",
 800c708:	a91a      	add	r1, sp, #104	@ 0x68
 800c70a:	7ecb      	ldrb	r3, [r1, #27]
 800c70c:	7f89      	ldrb	r1, [r1, #30]
 800c70e:	4aba      	ldr	r2, [pc, #744]	@ (800c9f8 <pdf_gen_completed_report+0x4b0>)
 800c710:	9104      	str	r1, [sp, #16]
 800c712:	a91a      	add	r1, sp, #104	@ 0x68
 800c714:	7f49      	ldrb	r1, [r1, #29]
 800c716:	a82c      	add	r0, sp, #176	@ 0xb0
 800c718:	9103      	str	r1, [sp, #12]
 800c71a:	a91a      	add	r1, sp, #104	@ 0x68
 800c71c:	7f09      	ldrb	r1, [r1, #28]
 800c71e:	9102      	str	r1, [sp, #8]
 800c720:	a91a      	add	r1, sp, #104	@ 0x68
 800c722:	7e89      	ldrb	r1, [r1, #26]
 800c724:	9101      	str	r1, [sp, #4]
 800c726:	a91a      	add	r1, sp, #104	@ 0x68
 800c728:	7e49      	ldrb	r1, [r1, #25]
 800c72a:	9100      	str	r1, [sp, #0]
 800c72c:	2120      	movs	r1, #32
 800c72e:	f00d febf 	bl	801a4b0 <sniprintf>
    stream_len += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT + 130, PDF_PAGE_TOP, "F2", 9, 0,0,0, "File Created At: ");
 800c732:	2209      	movs	r2, #9
 800c734:	9200      	str	r2, [sp, #0]
 800c736:	22c8      	movs	r2, #200	@ 0xc8
 800c738:	4bb0      	ldr	r3, [pc, #704]	@ (800c9fc <pdf_gen_completed_report+0x4b4>)
 800c73a:	21b4      	movs	r1, #180	@ 0xb4
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	0092      	lsls	r2, r2, #2
 800c740:	002b      	movs	r3, r5
 800c742:	0020      	movs	r0, r4
 800c744:	9703      	str	r7, [sp, #12]
 800c746:	9702      	str	r7, [sp, #8]
 800c748:	9701      	str	r7, [sp, #4]
 800c74a:	f00c fba1 	bl	8018e90 <tpdf_draw_colored_text>
    stream_len += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT + 260, PDF_PAGE_TOP, "F1", 9, 0,0,0, created_at);
 800c74e:	2209      	movs	r2, #9
 800c750:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c752:	9200      	str	r2, [sp, #0]
 800c754:	180d      	adds	r5, r1, r0
 800c756:	a92c      	add	r1, sp, #176	@ 0xb0
 800c758:	9104      	str	r1, [sp, #16]
 800c75a:	22c8      	movs	r2, #200	@ 0xc8
 800c75c:	219b      	movs	r1, #155	@ 0x9b
 800c75e:	9b08      	ldr	r3, [sp, #32]
 800c760:	0092      	lsls	r2, r2, #2
 800c762:	0049      	lsls	r1, r1, #1
 800c764:	0020      	movs	r0, r4
 800c766:	9703      	str	r7, [sp, #12]
 800c768:	9702      	str	r7, [sp, #8]
 800c76a:	9701      	str	r7, [sp, #4]
 800c76c:	f00c fb90 	bl	8018e90 <tpdf_draw_colored_text>
    stream_len += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT,PDF_PAGE_TOP - 5, 2.0, 0,0,0);
 800c770:	2380      	movs	r3, #128	@ 0x80
 800c772:	05db      	lsls	r3, r3, #23
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	4b9a      	ldr	r3, [pc, #616]	@ (800c9e0 <pdf_gen_completed_report+0x498>)
 800c778:	4a99      	ldr	r2, [pc, #612]	@ (800c9e0 <pdf_gen_completed_report+0x498>)
 800c77a:	1945      	adds	r5, r0, r5
 800c77c:	2132      	movs	r1, #50	@ 0x32
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	0020      	movs	r0, r4
 800c782:	4b98      	ldr	r3, [pc, #608]	@ (800c9e4 <pdf_gen_completed_report+0x49c>)
 800c784:	9704      	str	r7, [sp, #16]
 800c786:	9703      	str	r7, [sp, #12]
 800c788:	9702      	str	r7, [sp, #8]
 800c78a:	f00c fbb7 	bl	8018efc <tpdf_draw_line>
 800c78e:	1943      	adds	r3, r0, r5
    int len = draw_section_title(file_ptr, *y_pos, "Device Information");
 800c790:	20be      	movs	r0, #190	@ 0xbe
 800c792:	499b      	ldr	r1, [pc, #620]	@ (800ca00 <pdf_gen_completed_report+0x4b8>)
 800c794:	0080      	lsls	r0, r0, #2
 800c796:	9308      	str	r3, [sp, #32]
 800c798:	f7ff fbfc 	bl	800bf94 <draw_section_title.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c79c:	21b9      	movs	r1, #185	@ 0xb9
    int len = draw_section_title(file_ptr, *y_pos, "Device Information");
 800c79e:	0005      	movs	r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c7a0:	4a98      	ldr	r2, [pc, #608]	@ (800ca04 <pdf_gen_completed_report+0x4bc>)
 800c7a2:	9b07      	ldr	r3, [sp, #28]
 800c7a4:	2037      	movs	r0, #55	@ 0x37
 800c7a6:	0089      	lsls	r1, r1, #2
 800c7a8:	f7ff fc1a 	bl	800bfe0 <draw_key_value_pair.constprop.0>
	if (dev_setting->sensor_type == 1)
 800c7ac:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c7ae:	182d      	adds	r5, r5, r0
	if (dev_setting->sensor_type == 1)
 800c7b0:	3330      	adds	r3, #48	@ 0x30
 800c7b2:	781a      	ldrb	r2, [r3, #0]
		probe_type_str = "Temperature and Radiation (interval)";
 800c7b4:	4b94      	ldr	r3, [pc, #592]	@ (800ca08 <pdf_gen_completed_report+0x4c0>)
	if (dev_setting->sensor_type == 1)
 800c7b6:	2a01      	cmp	r2, #1
 800c7b8:	d003      	beq.n	800c7c2 <pdf_gen_completed_report+0x27a>
		probe_type_str = "Unknown Sensor Type";
 800c7ba:	4b94      	ldr	r3, [pc, #592]	@ (800ca0c <pdf_gen_completed_report+0x4c4>)
	else if (dev_setting->sensor_type == 2)
 800c7bc:	2a02      	cmp	r2, #2
 800c7be:	d100      	bne.n	800c7c2 <pdf_gen_completed_report+0x27a>
		probe_type_str = "Temperature Only";
 800c7c0:	4b93      	ldr	r3, [pc, #588]	@ (800ca10 <pdf_gen_completed_report+0x4c8>)
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Probe Type :", probe_type_str);
 800c7c2:	21b9      	movs	r1, #185	@ 0xb9
 800c7c4:	2096      	movs	r0, #150	@ 0x96
 800c7c6:	4a93      	ldr	r2, [pc, #588]	@ (800ca14 <pdf_gen_completed_report+0x4cc>)
 800c7c8:	0089      	lsls	r1, r1, #2
 800c7ca:	0040      	lsls	r0, r0, #1
 800c7cc:	f7ff fc08 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c7d0:	21b6      	movs	r1, #182	@ 0xb6
 800c7d2:	9b07      	ldr	r3, [sp, #28]
 800c7d4:	4a90      	ldr	r2, [pc, #576]	@ (800ca18 <pdf_gen_completed_report+0x4d0>)
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Probe Type :", probe_type_str);
 800c7d6:	182d      	adds	r5, r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c7d8:	3320      	adds	r3, #32
 800c7da:	0089      	lsls	r1, r1, #2
 800c7dc:	2037      	movs	r0, #55	@ 0x37
 800c7de:	f7ff fbff 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c7e2:	21b6      	movs	r1, #182	@ 0xb6
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c7e4:	182d      	adds	r5, r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c7e6:	2096      	movs	r0, #150	@ 0x96
 800c7e8:	9b07      	ldr	r3, [sp, #28]
 800c7ea:	4a8c      	ldr	r2, [pc, #560]	@ (800ca1c <pdf_gen_completed_report+0x4d4>)
 800c7ec:	3331      	adds	r3, #49	@ 0x31
 800c7ee:	0089      	lsls	r1, r1, #2
 800c7f0:	0040      	lsls	r0, r0, #1
 800c7f2:	f7ff fbf5 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c7f6:	21b3      	movs	r1, #179	@ 0xb3
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c7f8:	182b      	adds	r3, r5, r0
 800c7fa:	9309      	str	r3, [sp, #36]	@ 0x24
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c7fc:	9b07      	ldr	r3, [sp, #28]
 800c7fe:	4a88      	ldr	r2, [pc, #544]	@ (800ca20 <pdf_gen_completed_report+0x4d8>)
 800c800:	3310      	adds	r3, #16
 800c802:	0089      	lsls	r1, r1, #2
 800c804:	2037      	movs	r0, #55	@ 0x37
 800c806:	f7ff fbeb 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800c80a:	0005      	movs	r5, r0
    int len = draw_section_title(file_ptr, *y_pos, "Trip Information");
 800c80c:	20ae      	movs	r0, #174	@ 0xae
 800c80e:	4985      	ldr	r1, [pc, #532]	@ (800ca24 <pdf_gen_completed_report+0x4dc>)
 800c810:	0080      	lsls	r0, r0, #2
 800c812:	f7ff fbbf 	bl	800bf94 <draw_section_title.constprop.0>
    snprintf(tmp_buff,sizeof(tmp_buff),"%7u",dev_setting->trip_code);
 800c816:	9b07      	ldr	r3, [sp, #28]
    int len = draw_section_title(file_ptr, *y_pos, "Trip Information");
 800c818:	9006      	str	r0, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%7u",dev_setting->trip_code);
 800c81a:	3339      	adds	r3, #57	@ 0x39
 800c81c:	781a      	ldrb	r2, [r3, #0]
 800c81e:	9b07      	ldr	r3, [sp, #28]
 800c820:	486b      	ldr	r0, [pc, #428]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c822:	333a      	adds	r3, #58	@ 0x3a
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	ac1a      	add	r4, sp, #104	@ 0x68
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	4313      	orrs	r3, r2
 800c82c:	2110      	movs	r1, #16
 800c82e:	4a7e      	ldr	r2, [pc, #504]	@ (800ca28 <pdf_gen_completed_report+0x4e0>)
 800c830:	1900      	adds	r0, r0, r4
 800c832:	f00d fe3d 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c836:	21a9      	movs	r1, #169	@ 0xa9
 800c838:	4b65      	ldr	r3, [pc, #404]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c83a:	4a7c      	ldr	r2, [pc, #496]	@ (800ca2c <pdf_gen_completed_report+0x4e4>)
 800c83c:	191b      	adds	r3, r3, r4
 800c83e:	0089      	lsls	r1, r1, #2
 800c840:	2037      	movs	r0, #55	@ 0x37
 800c842:	f7ff fbcd 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c846:	21a6      	movs	r1, #166	@ 0xa6
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c848:	9b06      	ldr	r3, [sp, #24]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c84a:	4a79      	ldr	r2, [pc, #484]	@ (800ca30 <pdf_gen_completed_report+0x4e8>)
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c84c:	181c      	adds	r4, r3, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c84e:	9b07      	ldr	r3, [sp, #28]
 800c850:	2037      	movs	r0, #55	@ 0x37
 800c852:	333b      	adds	r3, #59	@ 0x3b
 800c854:	0089      	lsls	r1, r1, #2
 800c856:	f7ff fbc3 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c85a:	9b08      	ldr	r3, [sp, #32]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c85c:	1824      	adds	r4, r4, r0
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c85e:	18e4      	adds	r4, r4, r3
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c862:	195b      	adds	r3, r3, r5
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c864:	18e3      	adds	r3, r4, r3
 800c866:	9308      	str	r3, [sp, #32]
    switch (dev_setting->start_mode) {
 800c868:	9b07      	ldr	r3, [sp, #28]
 800c86a:	4d72      	ldr	r5, [pc, #456]	@ (800ca34 <pdf_gen_completed_report+0x4ec>)
 800c86c:	3363      	adds	r3, #99	@ 0x63
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b02      	cmp	r3, #2
 800c872:	d802      	bhi.n	800c87a <pdf_gen_completed_report+0x332>
 800c874:	4a70      	ldr	r2, [pc, #448]	@ (800ca38 <pdf_gen_completed_report+0x4f0>)
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	589d      	ldr	r5, [r3, r2]
    int len = draw_section_title(file_ptr, *y_pos, "Configuration Information");
 800c87a:	20a1      	movs	r0, #161	@ 0xa1
 800c87c:	496f      	ldr	r1, [pc, #444]	@ (800ca3c <pdf_gen_completed_report+0x4f4>)
 800c87e:	0080      	lsls	r0, r0, #2
 800c880:	f7ff fb88 	bl	800bf94 <draw_section_title.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c884:	219c      	movs	r1, #156	@ 0x9c
 800c886:	002b      	movs	r3, r5
    int len = draw_section_title(file_ptr, *y_pos, "Configuration Information");
 800c888:	0004      	movs	r4, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c88a:	4a6d      	ldr	r2, [pc, #436]	@ (800ca40 <pdf_gen_completed_report+0x4f8>)
 800c88c:	0089      	lsls	r1, r1, #2
 800c88e:	2037      	movs	r0, #55	@ 0x37
 800c890:	f7ff fba6 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->temp_interval,tmp,sizeof(tmp));
 800c894:	9a07      	ldr	r2, [sp, #28]
 800c896:	9b07      	ldr	r3, [sp, #28]
 800c898:	3276      	adds	r2, #118	@ 0x76
 800c89a:	7812      	ldrb	r2, [r2, #0]
 800c89c:	3375      	adds	r3, #117	@ 0x75
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	0212      	lsls	r2, r2, #8
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c8a6:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->temp_interval,tmp,sizeof(tmp));
 800c8a8:	3377      	adds	r3, #119	@ 0x77
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	a91a      	add	r1, sp, #104	@ 0x68
 800c8ae:	041b      	lsls	r3, r3, #16
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	9a07      	ldr	r2, [sp, #28]
 800c8b4:	3278      	adds	r2, #120	@ 0x78
 800c8b6:	7810      	ldrb	r0, [r2, #0]
 800c8b8:	2210      	movs	r2, #16
 800c8ba:	0600      	lsls	r0, r0, #24
 800c8bc:	4318      	orrs	r0, r3
 800c8be:	4b44      	ldr	r3, [pc, #272]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c8c0:	185b      	adds	r3, r3, r1
 800c8c2:	0019      	movs	r1, r3
 800c8c4:	f7ff f8d8 	bl	800ba78 <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Temperature Log Interval :", tmp);
 800c8c8:	4b41      	ldr	r3, [pc, #260]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c8ca:	a91a      	add	r1, sp, #104	@ 0x68
 800c8cc:	185b      	adds	r3, r3, r1
 800c8ce:	2096      	movs	r0, #150	@ 0x96
 800c8d0:	219c      	movs	r1, #156	@ 0x9c
 800c8d2:	4a5c      	ldr	r2, [pc, #368]	@ (800ca44 <pdf_gen_completed_report+0x4fc>)
 800c8d4:	0089      	lsls	r1, r1, #2
 800c8d6:	0040      	lsls	r0, r0, #1
 800c8d8:	f7ff fb82 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->start_delay,tmp,sizeof(tmp));
 800c8dc:	9a07      	ldr	r2, [sp, #28]
 800c8de:	9b07      	ldr	r3, [sp, #28]
 800c8e0:	3265      	adds	r2, #101	@ 0x65
 800c8e2:	7812      	ldrb	r2, [r2, #0]
 800c8e4:	3364      	adds	r3, #100	@ 0x64
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	0212      	lsls	r2, r2, #8
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Temperature Log Interval :", tmp);
 800c8ee:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->start_delay,tmp,sizeof(tmp));
 800c8f0:	3366      	adds	r3, #102	@ 0x66
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	a91a      	add	r1, sp, #104	@ 0x68
 800c8f6:	041b      	lsls	r3, r3, #16
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	9a07      	ldr	r2, [sp, #28]
 800c8fc:	3267      	adds	r2, #103	@ 0x67
 800c8fe:	7810      	ldrb	r0, [r2, #0]
 800c900:	2210      	movs	r2, #16
 800c902:	0600      	lsls	r0, r0, #24
 800c904:	4318      	orrs	r0, r3
 800c906:	4b32      	ldr	r3, [pc, #200]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c908:	185b      	adds	r3, r3, r1
 800c90a:	0019      	movs	r1, r3
 800c90c:	f7ff f8b4 	bl	800ba78 <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Delay :", tmp);
 800c910:	4b2f      	ldr	r3, [pc, #188]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c912:	a91a      	add	r1, sp, #104	@ 0x68
 800c914:	185b      	adds	r3, r3, r1
 800c916:	2199      	movs	r1, #153	@ 0x99
 800c918:	4a4b      	ldr	r2, [pc, #300]	@ (800ca48 <pdf_gen_completed_report+0x500>)
 800c91a:	0089      	lsls	r1, r1, #2
 800c91c:	2037      	movs	r0, #55	@ 0x37
 800c91e:	f7ff fb5f 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->rad_interval,tmp,sizeof(tmp));
 800c922:	9a07      	ldr	r2, [sp, #28]
 800c924:	9b07      	ldr	r3, [sp, #28]
 800c926:	3272      	adds	r2, #114	@ 0x72
 800c928:	7812      	ldrb	r2, [r2, #0]
 800c92a:	3371      	adds	r3, #113	@ 0x71
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	0212      	lsls	r2, r2, #8
 800c930:	431a      	orrs	r2, r3
 800c932:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Delay :", tmp);
 800c934:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->rad_interval,tmp,sizeof(tmp));
 800c936:	3373      	adds	r3, #115	@ 0x73
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	a91a      	add	r1, sp, #104	@ 0x68
 800c93c:	041b      	lsls	r3, r3, #16
 800c93e:	4313      	orrs	r3, r2
 800c940:	9a07      	ldr	r2, [sp, #28]
 800c942:	3274      	adds	r2, #116	@ 0x74
 800c944:	7810      	ldrb	r0, [r2, #0]
 800c946:	2210      	movs	r2, #16
 800c948:	0600      	lsls	r0, r0, #24
 800c94a:	4318      	orrs	r0, r3
 800c94c:	4b20      	ldr	r3, [pc, #128]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c94e:	185b      	adds	r3, r3, r1
 800c950:	0019      	movs	r1, r3
 800c952:	f7ff f891 	bl	800ba78 <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Radiation Log Interval :", tmp);
 800c956:	4b1e      	ldr	r3, [pc, #120]	@ (800c9d0 <pdf_gen_completed_report+0x488>)
 800c958:	a91a      	add	r1, sp, #104	@ 0x68
 800c95a:	185b      	adds	r3, r3, r1
 800c95c:	2096      	movs	r0, #150	@ 0x96
 800c95e:	2199      	movs	r1, #153	@ 0x99
 800c960:	4a3a      	ldr	r2, [pc, #232]	@ (800ca4c <pdf_gen_completed_report+0x504>)
 800c962:	0089      	lsls	r1, r1, #2
 800c964:	0040      	lsls	r0, r0, #1
 800c966:	f7ff fb3b 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Stop Mode :", "Manual + Software");
 800c96a:	2196      	movs	r1, #150	@ 0x96
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Radiation Log Interval :", tmp);
 800c96c:	1824      	adds	r4, r4, r0
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Stop Mode :", "Manual + Software");
 800c96e:	2096      	movs	r0, #150	@ 0x96
 800c970:	4a37      	ldr	r2, [pc, #220]	@ (800ca50 <pdf_gen_completed_report+0x508>)
 800c972:	4b38      	ldr	r3, [pc, #224]	@ (800ca54 <pdf_gen_completed_report+0x50c>)
 800c974:	0089      	lsls	r1, r1, #2
 800c976:	0040      	lsls	r0, r0, #1
 800c978:	f7ff fb32 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800c97c:	1824      	adds	r4, r4, r0
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c97e:	2091      	movs	r0, #145	@ 0x91
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c980:	9b08      	ldr	r3, [sp, #32]
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c982:	4935      	ldr	r1, [pc, #212]	@ (800ca58 <pdf_gen_completed_report+0x510>)
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c984:	18e3      	adds	r3, r4, r3
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c986:	0080      	lsls	r0, r0, #2
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c988:	931d      	str	r3, [sp, #116]	@ 0x74
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c98a:	f7ff fb03 	bl	800bf94 <draw_section_title.constprop.0>
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c98e:	4b33      	ldr	r3, [pc, #204]	@ (800ca5c <pdf_gen_completed_report+0x514>)
 800c990:	228f      	movs	r2, #143	@ 0x8f
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	230a      	movs	r3, #10
 800c996:	4c32      	ldr	r4, [pc, #200]	@ (800ca60 <pdf_gen_completed_report+0x518>)
 800c998:	4d15      	ldr	r5, [pc, #84]	@ (800c9f0 <pdf_gen_completed_report+0x4a8>)
 800c99a:	2137      	movs	r1, #55	@ 0x37
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c99c:	9009      	str	r0, [sp, #36]	@ 0x24
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	0020      	movs	r0, r4
 800c9a2:	002b      	movs	r3, r5
 800c9a4:	0092      	lsls	r2, r2, #2
 800c9a6:	9703      	str	r7, [sp, #12]
 800c9a8:	9702      	str	r7, [sp, #8]
 800c9aa:	9701      	str	r7, [sp, #4]
 800c9ac:	f00c fa70 	bl	8018e90 <tpdf_draw_colored_text>
    len += tpdf_draw_colored_text(file_ptr,155,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Delay Time");
 800c9b0:	4b2c      	ldr	r3, [pc, #176]	@ (800ca64 <pdf_gen_completed_report+0x51c>)
 800c9b2:	228f      	movs	r2, #143	@ 0x8f
 800c9b4:	9304      	str	r3, [sp, #16]
 800c9b6:	230a      	movs	r3, #10
 800c9b8:	219b      	movs	r1, #155	@ 0x9b
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c9ba:	9008      	str	r0, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,155,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Delay Time");
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	0020      	movs	r0, r4
 800c9c0:	002b      	movs	r3, r5
 800c9c2:	0092      	lsls	r2, r2, #2
 800c9c4:	e050      	b.n	800ca68 <pdf_gen_completed_report+0x520>
 800c9c6:	46c0      	nop			@ (mov r8, r8)
 800c9c8:	20002c88 	.word	0x20002c88
 800c9cc:	000004d2 	.word	0x000004d2
 800c9d0:	000008e8 	.word	0x000008e8
 800c9d4:	0801fc3c 	.word	0x0801fc3c
 800c9d8:	0801f75e 	.word	0x0801f75e
 800c9dc:	0801fc4b 	.word	0x0801fc4b
 800c9e0:	0000031b 	.word	0x0000031b
 800c9e4:	00000221 	.word	0x00000221
 800c9e8:	0801fc59 	.word	0x0801fc59
 800c9ec:	0801fcab 	.word	0x0801fcab
 800c9f0:	0801f7de 	.word	0x0801f7de
 800c9f4:	200009f8 	.word	0x200009f8
 800c9f8:	0801fcb4 	.word	0x0801fcb4
 800c9fc:	0801fcd4 	.word	0x0801fcd4
 800ca00:	0801fce6 	.word	0x0801fce6
 800ca04:	0801fcf9 	.word	0x0801fcf9
 800ca08:	0801ed3f 	.word	0x0801ed3f
 800ca0c:	0801ed75 	.word	0x0801ed75
 800ca10:	0801ed64 	.word	0x0801ed64
 800ca14:	0801fd07 	.word	0x0801fd07
 800ca18:	0801fd14 	.word	0x0801fd14
 800ca1c:	0801fd24 	.word	0x0801fd24
 800ca20:	0801fd37 	.word	0x0801fd37
 800ca24:	0801fd43 	.word	0x0801fd43
 800ca28:	0801fd54 	.word	0x0801fd54
 800ca2c:	0801fd58 	.word	0x0801fd58
 800ca30:	0801fd62 	.word	0x0801fd62
 800ca34:	0801fbc5 	.word	0x0801fbc5
 800ca38:	080206c4 	.word	0x080206c4
 800ca3c:	0801fd70 	.word	0x0801fd70
 800ca40:	0801fd8a 	.word	0x0801fd8a
 800ca44:	0801fd97 	.word	0x0801fd97
 800ca48:	0801fdb2 	.word	0x0801fdb2
 800ca4c:	0801fdc0 	.word	0x0801fdc0
 800ca50:	0801fdeb 	.word	0x0801fdeb
 800ca54:	0801fdd9 	.word	0x0801fdd9
 800ca58:	0801f5e0 	.word	0x0801f5e0
 800ca5c:	0801fdf7 	.word	0x0801fdf7
 800ca60:	20003090 	.word	0x20003090
 800ca64:	0801fe02 	.word	0x0801fe02
 800ca68:	9703      	str	r7, [sp, #12]
 800ca6a:	9702      	str	r7, [sp, #8]
 800ca6c:	9701      	str	r7, [sp, #4]
 800ca6e:	f00c fa0f 	bl	8018e90 <tpdf_draw_colored_text>
 800ca72:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,245,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Type");
 800ca74:	4bf5      	ldr	r3, [pc, #980]	@ (800ce4c <pdf_gen_completed_report+0x904>)
 800ca76:	1812      	adds	r2, r2, r0
 800ca78:	9208      	str	r2, [sp, #32]
 800ca7a:	9304      	str	r3, [sp, #16]
 800ca7c:	228f      	movs	r2, #143	@ 0x8f
 800ca7e:	230a      	movs	r3, #10
 800ca80:	21f5      	movs	r1, #245	@ 0xf5
 800ca82:	0020      	movs	r0, r4
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	0092      	lsls	r2, r2, #2
 800ca88:	002b      	movs	r3, r5
 800ca8a:	9703      	str	r7, [sp, #12]
 800ca8c:	9702      	str	r7, [sp, #8]
 800ca8e:	9701      	str	r7, [sp, #4]
 800ca90:	f00c f9fe 	bl	8018e90 <tpdf_draw_colored_text>
 800ca94:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,325,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Total Time");
 800ca96:	4bee      	ldr	r3, [pc, #952]	@ (800ce50 <pdf_gen_completed_report+0x908>)
 800ca98:	1882      	adds	r2, r0, r2
 800ca9a:	9208      	str	r2, [sp, #32]
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	228f      	movs	r2, #143	@ 0x8f
 800caa0:	230a      	movs	r3, #10
 800caa2:	2146      	movs	r1, #70	@ 0x46
 800caa4:	0020      	movs	r0, r4
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	0092      	lsls	r2, r2, #2
 800caaa:	002b      	movs	r3, r5
 800caac:	31ff      	adds	r1, #255	@ 0xff
 800caae:	9703      	str	r7, [sp, #12]
 800cab0:	9702      	str	r7, [sp, #8]
 800cab2:	9701      	str	r7, [sp, #4]
 800cab4:	f00c f9ec 	bl	8018e90 <tpdf_draw_colored_text>
 800cab8:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,435,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Violations");
 800caba:	4be6      	ldr	r3, [pc, #920]	@ (800ce54 <pdf_gen_completed_report+0x90c>)
 800cabc:	1882      	adds	r2, r0, r2
 800cabe:	9208      	str	r2, [sp, #32]
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	228f      	movs	r2, #143	@ 0x8f
 800cac4:	230a      	movs	r3, #10
 800cac6:	21b4      	movs	r1, #180	@ 0xb4
 800cac8:	0020      	movs	r0, r4
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	0092      	lsls	r2, r2, #2
 800cace:	002b      	movs	r3, r5
 800cad0:	31ff      	adds	r1, #255	@ 0xff
 800cad2:	9703      	str	r7, [sp, #12]
 800cad4:	9702      	str	r7, [sp, #8]
 800cad6:	9701      	str	r7, [sp, #4]
 800cad8:	f00c f9da 	bl	8018e90 <tpdf_draw_colored_text>
 800cadc:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800cade:	4bde      	ldr	r3, [pc, #888]	@ (800ce58 <pdf_gen_completed_report+0x910>)
 800cae0:	1882      	adds	r2, r0, r2
 800cae2:	9208      	str	r2, [sp, #32]
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	228f      	movs	r2, #143	@ 0x8f
 800cae8:	230a      	movs	r3, #10
 800caea:	21fa      	movs	r1, #250	@ 0xfa
 800caec:	0020      	movs	r0, r4
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	0092      	lsls	r2, r2, #2
 800caf2:	002b      	movs	r3, r5
 800caf4:	0049      	lsls	r1, r1, #1
 800caf6:	9703      	str	r7, [sp, #12]
 800caf8:	9702      	str	r7, [sp, #8]
 800cafa:	9701      	str	r7, [sp, #4]
 800cafc:	f00c f9c8 	bl	8018e90 <tpdf_draw_colored_text>
 800cb00:	9b08      	ldr	r3, [sp, #32]
 800cb02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800cb04:	9907      	ldr	r1, [sp, #28]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800cb06:	181b      	adds	r3, r3, r0
 800cb08:	189b      	adds	r3, r3, r2
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800cb0a:	9a07      	ldr	r2, [sp, #28]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800cb0c:	931f      	str	r3, [sp, #124]	@ 0x7c
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800cb0e:	317b      	adds	r1, #123	@ 0x7b
 800cb10:	780c      	ldrb	r4, [r1, #0]
 800cb12:	327a      	adds	r2, #122	@ 0x7a
 800cb14:	7812      	ldrb	r2, [r2, #0]
 800cb16:	0224      	lsls	r4, r4, #8
 800cb18:	4314      	orrs	r4, r2
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh1) : 0UL;
 800cb1a:	2200      	movs	r2, #0
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800cb1c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh1) : 0UL;
 800cb1e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	d901      	bls.n	800cb28 <pdf_gen_completed_report+0x5e0>
 800cb24:	1b1a      	subs	r2, r3, r4
 800cb26:	9217      	str	r2, [sp, #92]	@ 0x5c
    unsigned long rh2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh2)
 800cb28:	9a07      	ldr	r2, [sp, #28]
 800cb2a:	327c      	adds	r2, #124	@ 0x7c
 800cb2c:	7811      	ldrb	r1, [r2, #0]
 800cb2e:	9a07      	ldr	r2, [sp, #28]
 800cb30:	327d      	adds	r2, #125	@ 0x7d
 800cb32:	7812      	ldrb	r2, [r2, #0]
 800cb34:	0212      	lsls	r2, r2, #8
 800cb36:	430a      	orrs	r2, r1
 800cb38:	9208      	str	r2, [sp, #32]
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh2) : 0UL;
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	9218      	str	r2, [sp, #96]	@ 0x60
 800cb3e:	9a08      	ldr	r2, [sp, #32]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d901      	bls.n	800cb48 <pdf_gen_completed_report+0x600>
 800cb44:	1a9a      	subs	r2, r3, r2
 800cb46:	9218      	str	r2, [sp, #96]	@ 0x60
    unsigned long th1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_th1)
 800cb48:	9a07      	ldr	r2, [sp, #28]
 800cb4a:	327e      	adds	r2, #126	@ 0x7e
 800cb4c:	7811      	ldrb	r1, [r2, #0]
 800cb4e:	9a07      	ldr	r2, [sp, #28]
 800cb50:	327f      	adds	r2, #127	@ 0x7f
 800cb52:	7812      	ldrb	r2, [r2, #0]
 800cb54:	0212      	lsls	r2, r2, #8
 800cb56:	430a      	orrs	r2, r1
 800cb58:	9209      	str	r2, [sp, #36]	@ 0x24
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_th1) : 0UL;
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d901      	bls.n	800cb68 <pdf_gen_completed_report+0x620>
 800cb64:	1a9a      	subs	r2, r3, r2
 800cb66:	9219      	str	r2, [sp, #100]	@ 0x64
    unsigned long th2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_th2)
 800cb68:	9a07      	ldr	r2, [sp, #28]
 800cb6a:	3280      	adds	r2, #128	@ 0x80
 800cb6c:	7811      	ldrb	r1, [r2, #0]
 800cb6e:	9a07      	ldr	r2, [sp, #28]
 800cb70:	3281      	adds	r2, #129	@ 0x81
 800cb72:	7812      	ldrb	r2, [r2, #0]
 800cb74:	0212      	lsls	r2, r2, #8
 800cb76:	430a      	orrs	r2, r1
 800cb78:	920a      	str	r2, [sp, #40]	@ 0x28
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_th2) : 0UL;
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cb7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d901      	bls.n	800cb88 <pdf_gen_completed_report+0x640>
 800cb84:	1a9a      	subs	r2, r3, r2
 800cb86:	921a      	str	r2, [sp, #104]	@ 0x68
    unsigned long tl1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_tl1)
 800cb88:	9a07      	ldr	r2, [sp, #28]
 800cb8a:	3282      	adds	r2, #130	@ 0x82
 800cb8c:	7811      	ldrb	r1, [r2, #0]
 800cb8e:	9a07      	ldr	r2, [sp, #28]
 800cb90:	3283      	adds	r2, #131	@ 0x83
 800cb92:	7812      	ldrb	r2, [r2, #0]
 800cb94:	0212      	lsls	r2, r2, #8
 800cb96:	430a      	orrs	r2, r1
 800cb98:	920b      	str	r2, [sp, #44]	@ 0x2c
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_tl1) : 0UL;
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800cb9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d901      	bls.n	800cba8 <pdf_gen_completed_report+0x660>
 800cba4:	1a9a      	subs	r2, r3, r2
 800cba6:	921b      	str	r2, [sp, #108]	@ 0x6c
    unsigned long tl2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_tl2)
 800cba8:	9a07      	ldr	r2, [sp, #28]
 800cbaa:	3284      	adds	r2, #132	@ 0x84
 800cbac:	7811      	ldrb	r1, [r2, #0]
 800cbae:	9a07      	ldr	r2, [sp, #28]
 800cbb0:	3285      	adds	r2, #133	@ 0x85
 800cbb2:	7812      	ldrb	r2, [r2, #0]
 800cbb4:	0212      	lsls	r2, r2, #8
 800cbb6:	430a      	orrs	r2, r1
 800cbb8:	920c      	str	r2, [sp, #48]	@ 0x30
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_tl2) : 0UL;
 800cbba:	2200      	movs	r2, #0
 800cbbc:	921c      	str	r2, [sp, #112]	@ 0x70
 800cbbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d901      	bls.n	800cbc8 <pdf_gen_completed_report+0x680>
 800cbc4:	1a9b      	subs	r3, r3, r2
 800cbc6:	931c      	str	r3, [sp, #112]	@ 0x70
    const uint16_t c_rh1 = log->RH1_alarm_count;
 800cbc8:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
    alarm_zone_info_t tmp_alrm[6] = {
 800cbca:	a81a      	add	r0, sp, #104	@ 0x68
    const uint16_t c_rh1 = log->RH1_alarm_count;
 800cbcc:	930f      	str	r3, [sp, #60]	@ 0x3c
    const uint16_t c_rh2 = log->RH2_alarm_count;
 800cbce:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
    alarm_zone_info_t tmp_alrm[6] = {
 800cbd0:	220a      	movs	r2, #10
    const uint16_t c_rh2 = log->RH2_alarm_count;
 800cbd2:	9310      	str	r3, [sp, #64]	@ 0x40
    const uint16_t c_th1 = log->TH1_alarm_count;
 800cbd4:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 800cbd6:	9312      	str	r3, [sp, #72]	@ 0x48
    const uint16_t c_th2 = log->TH2_alarm_count;
 800cbd8:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 800cbda:	9314      	str	r3, [sp, #80]	@ 0x50
    const uint16_t c_tl1 = log->TL1_alarm_count;
 800cbdc:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 800cbde:	9315      	str	r3, [sp, #84]	@ 0x54
    const uint16_t c_tl2 = log->TL2_alarm_count;
 800cbe0:	8f73      	ldrh	r3, [r6, #58]	@ 0x3a
 800cbe2:	9316      	str	r3, [sp, #88]	@ 0x58
    alarm_zone_info_t tmp_alrm[6] = {
 800cbe4:	4b9d      	ldr	r3, [pc, #628]	@ (800ce5c <pdf_gen_completed_report+0x914>)
 800cbe6:	001d      	movs	r5, r3
 800cbe8:	0019      	movs	r1, r3
 800cbea:	4b9d      	ldr	r3, [pc, #628]	@ (800ce60 <pdf_gen_completed_report+0x918>)
 800cbec:	181b      	adds	r3, r3, r0
 800cbee:	0018      	movs	r0, r3
 800cbf0:	f00d fe7a 	bl	801a8e8 <memcpy>
 800cbf4:	489b      	ldr	r0, [pc, #620]	@ (800ce64 <pdf_gen_completed_report+0x91c>)
 800cbf6:	ab1a      	add	r3, sp, #104	@ 0x68
 800cbf8:	2206      	movs	r2, #6
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	18c0      	adds	r0, r0, r3
 800cbfe:	f00d fda9 	bl	801a754 <memset>
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800cc02:	9a07      	ldr	r2, [sp, #28]
 800cc04:	9b07      	ldr	r3, [sp, #28]
 800cc06:	3292      	adds	r2, #146	@ 0x92
 800cc08:	7812      	ldrb	r2, [r2, #0]
 800cc0a:	3391      	adds	r3, #145	@ 0x91
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	0212      	lsls	r2, r2, #8
 800cc10:	431a      	orrs	r2, r3
 800cc12:	9b07      	ldr	r3, [sp, #28]
 800cc14:	2164      	movs	r1, #100	@ 0x64
 800cc16:	3393      	adds	r3, #147	@ 0x93
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	041b      	lsls	r3, r3, #16
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	9a07      	ldr	r2, [sp, #28]
 800cc20:	3294      	adds	r2, #148	@ 0x94
 800cc22:	7810      	ldrb	r0, [r2, #0]
 800cc24:	0600      	lsls	r0, r0, #24
 800cc26:	4318      	orrs	r0, r3
 800cc28:	f7f3 fa9e 	bl	8000168 <__udivsi3>
    alarm_zone_info_t tmp_alrm[6] = {
 800cc2c:	4a8e      	ldr	r2, [pc, #568]	@ (800ce68 <pdf_gen_completed_report+0x920>)
 800cc2e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc30:	189b      	adds	r3, r3, r2
 800cc32:	8018      	strh	r0, [r3, #0]
 800cc34:	4b8d      	ldr	r3, [pc, #564]	@ (800ce6c <pdf_gen_completed_report+0x924>)
 800cc36:	aa1a      	add	r2, sp, #104	@ 0x68
 800cc38:	189b      	adds	r3, r3, r2
 800cc3a:	601c      	str	r4, [r3, #0]
 800cc3c:	2390      	movs	r3, #144	@ 0x90
 800cc3e:	4c8c      	ldr	r4, [pc, #560]	@ (800ce70 <pdf_gen_completed_report+0x928>)
 800cc40:	011b      	lsls	r3, r3, #4
 800cc42:	189b      	adds	r3, r3, r2
 800cc44:	4a8b      	ldr	r2, [pc, #556]	@ (800ce74 <pdf_gen_completed_report+0x92c>)
 800cc46:	601c      	str	r4, [r3, #0]
 800cc48:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc4a:	18d2      	adds	r2, r2, r3
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	4a89      	ldr	r2, [pc, #548]	@ (800ce78 <pdf_gen_completed_report+0x930>)
 800cc52:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc54:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800cc56:	18d2      	adds	r2, r2, r3
 800cc58:	6011      	str	r1, [r2, #0]
 800cc5a:	4a88      	ldr	r2, [pc, #544]	@ (800ce7c <pdf_gen_completed_report+0x934>)
 800cc5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cc5e:	18d2      	adds	r2, r2, r3
 800cc60:	6011      	str	r1, [r2, #0]
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800cc62:	000a      	movs	r2, r1
    alarm_zone_info_t tmp_alrm[6] = {
 800cc64:	2191      	movs	r1, #145	@ 0x91
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800cc66:	1e53      	subs	r3, r2, #1
 800cc68:	419a      	sbcs	r2, r3
    alarm_zone_info_t tmp_alrm[6] = {
 800cc6a:	0109      	lsls	r1, r1, #4
 800cc6c:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc6e:	18c9      	adds	r1, r1, r3
 800cc70:	700a      	strb	r2, [r1, #0]
 800cc72:	0029      	movs	r1, r5
 800cc74:	4882      	ldr	r0, [pc, #520]	@ (800ce80 <pdf_gen_completed_report+0x938>)
 800cc76:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc78:	220a      	movs	r2, #10
 800cc7a:	3110      	adds	r1, #16
 800cc7c:	18c0      	adds	r0, r0, r3
 800cc7e:	f00d fe33 	bl	801a8e8 <memcpy>
 800cc82:	4880      	ldr	r0, [pc, #512]	@ (800ce84 <pdf_gen_completed_report+0x93c>)
 800cc84:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc86:	2206      	movs	r2, #6
 800cc88:	2100      	movs	r1, #0
 800cc8a:	18c0      	adds	r0, r0, r3
 800cc8c:	f00d fd62 	bl	801a754 <memset>
        {"RH2: over",  dev_setting->alarm_rh2/100, dev_setting->alarm_delay_rh2, "Sin", rh2_total, c_rh2, (c_rh2 ? 1 : 0)},
 800cc90:	9a07      	ldr	r2, [sp, #28]
 800cc92:	9907      	ldr	r1, [sp, #28]
 800cc94:	3299      	adds	r2, #153	@ 0x99
 800cc96:	7813      	ldrb	r3, [r2, #0]
 800cc98:	9a07      	ldr	r2, [sp, #28]
 800cc9a:	319b      	adds	r1, #155	@ 0x9b
 800cc9c:	329a      	adds	r2, #154	@ 0x9a
 800cc9e:	7812      	ldrb	r2, [r2, #0]
 800cca0:	0212      	lsls	r2, r2, #8
 800cca2:	431a      	orrs	r2, r3
 800cca4:	780b      	ldrb	r3, [r1, #0]
 800cca6:	2164      	movs	r1, #100	@ 0x64
 800cca8:	041b      	lsls	r3, r3, #16
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	9a07      	ldr	r2, [sp, #28]
 800ccae:	329c      	adds	r2, #156	@ 0x9c
 800ccb0:	7810      	ldrb	r0, [r2, #0]
 800ccb2:	0600      	lsls	r0, r0, #24
 800ccb4:	4318      	orrs	r0, r3
 800ccb6:	f7f3 fa57 	bl	8000168 <__udivsi3>
    alarm_zone_info_t tmp_alrm[6] = {
 800ccba:	4973      	ldr	r1, [pc, #460]	@ (800ce88 <pdf_gen_completed_report+0x940>)
 800ccbc:	aa1a      	add	r2, sp, #104	@ 0x68
 800ccbe:	1852      	adds	r2, r2, r1
 800ccc0:	8010      	strh	r0, [r2, #0]
 800ccc2:	4a72      	ldr	r2, [pc, #456]	@ (800ce8c <pdf_gen_completed_report+0x944>)
 800ccc4:	ab1a      	add	r3, sp, #104	@ 0x68
 800ccc6:	9908      	ldr	r1, [sp, #32]
 800ccc8:	18d2      	adds	r2, r2, r3
 800ccca:	6011      	str	r1, [r2, #0]
 800cccc:	4a70      	ldr	r2, [pc, #448]	@ (800ce90 <pdf_gen_completed_report+0x948>)
 800ccce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800ccd0:	18d2      	adds	r2, r2, r3
 800ccd2:	6014      	str	r4, [r2, #0]
 800ccd4:	2293      	movs	r2, #147	@ 0x93
 800ccd6:	0112      	lsls	r2, r2, #4
 800ccd8:	18d2      	adds	r2, r2, r3
 800ccda:	2300      	movs	r3, #0
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	4a6d      	ldr	r2, [pc, #436]	@ (800ce94 <pdf_gen_completed_report+0x94c>)
 800cce0:	ab1a      	add	r3, sp, #104	@ 0x68
 800cce2:	18d2      	adds	r2, r2, r3
 800cce4:	6011      	str	r1, [r2, #0]
 800cce6:	4a6c      	ldr	r2, [pc, #432]	@ (800ce98 <pdf_gen_completed_report+0x950>)
 800cce8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ccea:	18d2      	adds	r2, r2, r3
 800ccec:	6011      	str	r1, [r2, #0]
        {"RH2: over",  dev_setting->alarm_rh2/100, dev_setting->alarm_delay_rh2, "Sin", rh2_total, c_rh2, (c_rh2 ? 1 : 0)},
 800ccee:	000a      	movs	r2, r1
 800ccf0:	1e53      	subs	r3, r2, #1
 800ccf2:	419a      	sbcs	r2, r3
    alarm_zone_info_t tmp_alrm[6] = {
 800ccf4:	4969      	ldr	r1, [pc, #420]	@ (800ce9c <pdf_gen_completed_report+0x954>)
 800ccf6:	ab1a      	add	r3, sp, #104	@ 0x68
 800ccf8:	18c9      	adds	r1, r1, r3
 800ccfa:	2094      	movs	r0, #148	@ 0x94
 800ccfc:	700a      	strb	r2, [r1, #0]
 800ccfe:	0029      	movs	r1, r5
 800cd00:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd02:	0100      	lsls	r0, r0, #4
 800cd04:	220a      	movs	r2, #10
 800cd06:	3120      	adds	r1, #32
 800cd08:	18c0      	adds	r0, r0, r3
 800cd0a:	f00d fded 	bl	801a8e8 <memcpy>
 800cd0e:	4864      	ldr	r0, [pc, #400]	@ (800cea0 <pdf_gen_completed_report+0x958>)
 800cd10:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd12:	2206      	movs	r2, #6
 800cd14:	2100      	movs	r1, #0
 800cd16:	18c0      	adds	r0, r0, r3
 800cd18:	f00d fd1c 	bl	801a754 <memset>
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cd1c:	9a07      	ldr	r2, [sp, #28]
    alarm_zone_info_t tmp_alrm[6] = {
 800cd1e:	210a      	movs	r1, #10
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cd20:	3295      	adds	r2, #149	@ 0x95
 800cd22:	7813      	ldrb	r3, [r2, #0]
 800cd24:	9a07      	ldr	r2, [sp, #28]
 800cd26:	3296      	adds	r2, #150	@ 0x96
 800cd28:	7810      	ldrb	r0, [r2, #0]
 800cd2a:	0200      	lsls	r0, r0, #8
 800cd2c:	4318      	orrs	r0, r3
 800cd2e:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800cd30:	1400      	asrs	r0, r0, #16
 800cd32:	f7f3 faa3 	bl	800027c <__divsi3>
 800cd36:	2295      	movs	r2, #149	@ 0x95
 800cd38:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd3a:	0112      	lsls	r2, r2, #4
 800cd3c:	18d2      	adds	r2, r2, r3
 800cd3e:	8010      	strh	r0, [r2, #0]
 800cd40:	4a58      	ldr	r2, [pc, #352]	@ (800cea4 <pdf_gen_completed_report+0x95c>)
 800cd42:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd46:	18d2      	adds	r2, r2, r3
 800cd48:	6011      	str	r1, [r2, #0]
 800cd4a:	4a57      	ldr	r2, [pc, #348]	@ (800cea8 <pdf_gen_completed_report+0x960>)
 800cd4c:	4957      	ldr	r1, [pc, #348]	@ (800ceac <pdf_gen_completed_report+0x964>)
 800cd4e:	18d2      	adds	r2, r2, r3
 800cd50:	18c9      	adds	r1, r1, r3
 800cd52:	2300      	movs	r3, #0
 800cd54:	6014      	str	r4, [r2, #0]
 800cd56:	600b      	str	r3, [r1, #0]
 800cd58:	2196      	movs	r1, #150	@ 0x96
 800cd5a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cd5c:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd5e:	0109      	lsls	r1, r1, #4
 800cd60:	18c9      	adds	r1, r1, r3
 800cd62:	6008      	str	r0, [r1, #0]
 800cd64:	4952      	ldr	r1, [pc, #328]	@ (800ceb0 <pdf_gen_completed_report+0x968>)
 800cd66:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cd68:	18c9      	adds	r1, r1, r3
 800cd6a:	6008      	str	r0, [r1, #0]
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cd6c:	0001      	movs	r1, r0
 800cd6e:	1e4a      	subs	r2, r1, #1
 800cd70:	4191      	sbcs	r1, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800cd72:	4a50      	ldr	r2, [pc, #320]	@ (800ceb4 <pdf_gen_completed_report+0x96c>)
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cd74:	000b      	movs	r3, r1
    alarm_zone_info_t tmp_alrm[6] = {
 800cd76:	a91a      	add	r1, sp, #104	@ 0x68
 800cd78:	1852      	adds	r2, r2, r1
 800cd7a:	0029      	movs	r1, r5
 800cd7c:	484e      	ldr	r0, [pc, #312]	@ (800ceb8 <pdf_gen_completed_report+0x970>)
 800cd7e:	7013      	strb	r3, [r2, #0]
 800cd80:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd82:	220a      	movs	r2, #10
 800cd84:	3130      	adds	r1, #48	@ 0x30
 800cd86:	18c0      	adds	r0, r0, r3
 800cd88:	f00d fdae 	bl	801a8e8 <memcpy>
 800cd8c:	484b      	ldr	r0, [pc, #300]	@ (800cebc <pdf_gen_completed_report+0x974>)
 800cd8e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd90:	2206      	movs	r2, #6
 800cd92:	2100      	movs	r1, #0
 800cd94:	18c0      	adds	r0, r0, r3
 800cd96:	f00d fcdd 	bl	801a754 <memset>
        {"TH2: over",  dev_setting->alarm_th2/10,  dev_setting->alarm_delay_th2, "Sin", th2_total, c_th2, (c_th2 ? 1 : 0)},
 800cd9a:	9a07      	ldr	r2, [sp, #28]
 800cd9c:	9907      	ldr	r1, [sp, #28]
 800cd9e:	329e      	adds	r2, #158	@ 0x9e
 800cda0:	7810      	ldrb	r0, [r2, #0]
 800cda2:	319d      	adds	r1, #157	@ 0x9d
 800cda4:	780b      	ldrb	r3, [r1, #0]
 800cda6:	0200      	lsls	r0, r0, #8
 800cda8:	4318      	orrs	r0, r3
 800cdaa:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800cdac:	210a      	movs	r1, #10
 800cdae:	1400      	asrs	r0, r0, #16
 800cdb0:	f7f3 fa64 	bl	800027c <__divsi3>
 800cdb4:	4942      	ldr	r1, [pc, #264]	@ (800cec0 <pdf_gen_completed_report+0x978>)
 800cdb6:	ab1a      	add	r3, sp, #104	@ 0x68
 800cdb8:	18c9      	adds	r1, r1, r3
 800cdba:	8008      	strh	r0, [r1, #0]
 800cdbc:	2198      	movs	r1, #152	@ 0x98
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	ab1a      	add	r3, sp, #104	@ 0x68
 800cdc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cdc4:	0109      	lsls	r1, r1, #4
 800cdc6:	18c9      	adds	r1, r1, r3
 800cdc8:	6008      	str	r0, [r1, #0]
 800cdca:	493e      	ldr	r1, [pc, #248]	@ (800cec4 <pdf_gen_completed_report+0x97c>)
 800cdcc:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800cdce:	18c9      	adds	r1, r1, r3
 800cdd0:	600c      	str	r4, [r1, #0]
 800cdd2:	493c      	ldr	r1, [pc, #240]	@ (800cec4 <pdf_gen_completed_report+0x97c>)
 800cdd4:	18c9      	adds	r1, r1, r3
 800cdd6:	604a      	str	r2, [r1, #4]
 800cdd8:	493b      	ldr	r1, [pc, #236]	@ (800cec8 <pdf_gen_completed_report+0x980>)
 800cdda:	ab1a      	add	r3, sp, #104	@ 0x68
 800cddc:	18c9      	adds	r1, r1, r3
 800cdde:	6008      	str	r0, [r1, #0]
 800cde0:	2199      	movs	r1, #153	@ 0x99
 800cde2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800cde4:	0109      	lsls	r1, r1, #4
 800cde6:	18c9      	adds	r1, r1, r3
        {"TH2: over",  dev_setting->alarm_th2/10,  dev_setting->alarm_delay_th2, "Sin", th2_total, c_th2, (c_th2 ? 1 : 0)},
 800cde8:	0003      	movs	r3, r0
 800cdea:	1e5a      	subs	r2, r3, #1
 800cdec:	4193      	sbcs	r3, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800cdee:	6008      	str	r0, [r1, #0]
 800cdf0:	4936      	ldr	r1, [pc, #216]	@ (800cecc <pdf_gen_completed_report+0x984>)
 800cdf2:	aa1a      	add	r2, sp, #104	@ 0x68
 800cdf4:	1889      	adds	r1, r1, r2
 800cdf6:	700b      	strb	r3, [r1, #0]
 800cdf8:	0029      	movs	r1, r5
 800cdfa:	4835      	ldr	r0, [pc, #212]	@ (800ced0 <pdf_gen_completed_report+0x988>)
 800cdfc:	ab1a      	add	r3, sp, #104	@ 0x68
 800cdfe:	220b      	movs	r2, #11
 800ce00:	3140      	adds	r1, #64	@ 0x40
 800ce02:	18c0      	adds	r0, r0, r3
 800ce04:	f00d fd70 	bl	801a8e8 <memcpy>
 800ce08:	4832      	ldr	r0, [pc, #200]	@ (800ced4 <pdf_gen_completed_report+0x98c>)
 800ce0a:	ab1a      	add	r3, sp, #104	@ 0x68
 800ce0c:	2205      	movs	r2, #5
 800ce0e:	2100      	movs	r1, #0
 800ce10:	18c0      	adds	r0, r0, r3
 800ce12:	f00d fc9f 	bl	801a754 <memset>
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800ce16:	9907      	ldr	r1, [sp, #28]
 800ce18:	9b07      	ldr	r3, [sp, #28]
 800ce1a:	3198      	adds	r1, #152	@ 0x98
 800ce1c:	7808      	ldrb	r0, [r1, #0]
 800ce1e:	3397      	adds	r3, #151	@ 0x97
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	0200      	lsls	r0, r0, #8
 800ce24:	4318      	orrs	r0, r3
 800ce26:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800ce28:	210a      	movs	r1, #10
 800ce2a:	1400      	asrs	r0, r0, #16
 800ce2c:	f7f3 fa26 	bl	800027c <__divsi3>
 800ce30:	4b29      	ldr	r3, [pc, #164]	@ (800ced8 <pdf_gen_completed_report+0x990>)
 800ce32:	aa1a      	add	r2, sp, #104	@ 0x68
 800ce34:	189b      	adds	r3, r3, r2
 800ce36:	4929      	ldr	r1, [pc, #164]	@ (800cedc <pdf_gen_completed_report+0x994>)
 800ce38:	8018      	strh	r0, [r3, #0]
 800ce3a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ce3c:	1889      	adds	r1, r1, r2
 800ce3e:	6008      	str	r0, [r1, #0]
 800ce40:	219b      	movs	r1, #155	@ 0x9b
 800ce42:	0109      	lsls	r1, r1, #4
 800ce44:	1889      	adds	r1, r1, r2
 800ce46:	2200      	movs	r2, #0
 800ce48:	e04a      	b.n	800cee0 <pdf_gen_completed_report+0x998>
 800ce4a:	46c0      	nop			@ (mov r8, r8)
 800ce4c:	0801fe0d 	.word	0x0801fe0d
 800ce50:	0801fe18 	.word	0x0801fe18
 800ce54:	0801fe23 	.word	0x0801fe23
 800ce58:	0801fe2e 	.word	0x0801fe2e
 800ce5c:	0801cc9c 	.word	0x0801cc9c
 800ce60:	000008e8 	.word	0x000008e8
 800ce64:	000008f2 	.word	0x000008f2
 800ce68:	000008f8 	.word	0x000008f8
 800ce6c:	000008fc 	.word	0x000008fc
 800ce70:	006e6953 	.word	0x006e6953
 800ce74:	00000904 	.word	0x00000904
 800ce78:	00000908 	.word	0x00000908
 800ce7c:	0000090c 	.word	0x0000090c
 800ce80:	00000914 	.word	0x00000914
 800ce84:	0000091e 	.word	0x0000091e
 800ce88:	00000924 	.word	0x00000924
 800ce8c:	00000928 	.word	0x00000928
 800ce90:	0000092c 	.word	0x0000092c
 800ce94:	00000934 	.word	0x00000934
 800ce98:	00000938 	.word	0x00000938
 800ce9c:	0000093c 	.word	0x0000093c
 800cea0:	0000094a 	.word	0x0000094a
 800cea4:	00000954 	.word	0x00000954
 800cea8:	00000958 	.word	0x00000958
 800ceac:	0000095c 	.word	0x0000095c
 800ceb0:	00000964 	.word	0x00000964
 800ceb4:	00000968 	.word	0x00000968
 800ceb8:	0000096c 	.word	0x0000096c
 800cebc:	00000976 	.word	0x00000976
 800cec0:	0000097c 	.word	0x0000097c
 800cec4:	00000984 	.word	0x00000984
 800cec8:	0000098c 	.word	0x0000098c
 800cecc:	00000994 	.word	0x00000994
 800ced0:	00000998 	.word	0x00000998
 800ced4:	000009a3 	.word	0x000009a3
 800ced8:	000009a8 	.word	0x000009a8
 800cedc:	000009ac 	.word	0x000009ac
 800cee0:	600c      	str	r4, [r1, #0]
 800cee2:	604a      	str	r2, [r1, #4]
 800cee4:	49fe      	ldr	r1, [pc, #1016]	@ (800d2e0 <pdf_gen_completed_report+0xd98>)
 800cee6:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800cee8:	ab1a      	add	r3, sp, #104	@ 0x68
 800ceea:	18c9      	adds	r1, r1, r3
 800ceec:	6008      	str	r0, [r1, #0]
 800ceee:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800cef0:	49fc      	ldr	r1, [pc, #1008]	@ (800d2e4 <pdf_gen_completed_report+0xd9c>)
 800cef2:	18c9      	adds	r1, r1, r3
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800cef4:	0003      	movs	r3, r0
    alarm_zone_info_t tmp_alrm[6] = {
 800cef6:	6008      	str	r0, [r1, #0]
 800cef8:	219c      	movs	r1, #156	@ 0x9c
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800cefa:	1e5a      	subs	r2, r3, #1
 800cefc:	4193      	sbcs	r3, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800cefe:	0109      	lsls	r1, r1, #4
 800cf00:	aa1a      	add	r2, sp, #104	@ 0x68
 800cf02:	1889      	adds	r1, r1, r2
 800cf04:	700b      	strb	r3, [r1, #0]
 800cf06:	0029      	movs	r1, r5
 800cf08:	48f7      	ldr	r0, [pc, #988]	@ (800d2e8 <pdf_gen_completed_report+0xda0>)
 800cf0a:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf0c:	220b      	movs	r2, #11
 800cf0e:	3150      	adds	r1, #80	@ 0x50
 800cf10:	18c0      	adds	r0, r0, r3
 800cf12:	f00d fce9 	bl	801a8e8 <memcpy>
 800cf16:	48f5      	ldr	r0, [pc, #980]	@ (800d2ec <pdf_gen_completed_report+0xda4>)
 800cf18:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf1a:	2205      	movs	r2, #5
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	18c0      	adds	r0, r0, r3
 800cf20:	f00d fc18 	bl	801a754 <memset>
        {"TL2: below", dev_setting->alarm_tl2/10,  dev_setting->alarm_delay_tl2, "Sin", tl2_total, c_tl2, (c_tl2 ? 1 : 0)},
 800cf24:	9907      	ldr	r1, [sp, #28]
 800cf26:	9b07      	ldr	r3, [sp, #28]
 800cf28:	31a0      	adds	r1, #160	@ 0xa0
 800cf2a:	7808      	ldrb	r0, [r1, #0]
 800cf2c:	339f      	adds	r3, #159	@ 0x9f
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	0200      	lsls	r0, r0, #8
 800cf32:	4318      	orrs	r0, r3
 800cf34:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800cf36:	210a      	movs	r1, #10
 800cf38:	1400      	asrs	r0, r0, #16
 800cf3a:	f7f3 f99f 	bl	800027c <__divsi3>
 800cf3e:	4bec      	ldr	r3, [pc, #944]	@ (800d2f0 <pdf_gen_completed_report+0xda8>)
 800cf40:	aa1a      	add	r2, sp, #104	@ 0x68
 800cf42:	189b      	adds	r3, r3, r2
 800cf44:	49eb      	ldr	r1, [pc, #940]	@ (800d2f4 <pdf_gen_completed_report+0xdac>)
 800cf46:	8018      	strh	r0, [r3, #0]
 800cf48:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800cf4a:	1889      	adds	r1, r1, r2
 800cf4c:	6008      	str	r0, [r1, #0]
 800cf4e:	49ea      	ldr	r1, [pc, #936]	@ (800d2f8 <pdf_gen_completed_report+0xdb0>)
 800cf50:	4bea      	ldr	r3, [pc, #936]	@ (800d2fc <pdf_gen_completed_report+0xdb4>)
 800cf52:	1889      	adds	r1, r1, r2
 800cf54:	2200      	movs	r2, #0
 800cf56:	600c      	str	r4, [r1, #0]
 800cf58:	604a      	str	r2, [r1, #4]
 800cf5a:	aa1a      	add	r2, sp, #104	@ 0x68
 800cf5c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800cf5e:	189b      	adds	r3, r3, r2
 800cf60:	6019      	str	r1, [r3, #0]
 800cf62:	4be7      	ldr	r3, [pc, #924]	@ (800d300 <pdf_gen_completed_report+0xdb8>)
 800cf64:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800cf66:	189b      	adds	r3, r3, r2
 800cf68:	6019      	str	r1, [r3, #0]
        {"TL2: below", dev_setting->alarm_tl2/10,  dev_setting->alarm_delay_tl2, "Sin", tl2_total, c_tl2, (c_tl2 ? 1 : 0)},
 800cf6a:	000b      	movs	r3, r1
 800cf6c:	1e5a      	subs	r2, r3, #1
 800cf6e:	4193      	sbcs	r3, r2
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800cf70:	208c      	movs	r0, #140	@ 0x8c
    alarm_zone_info_t tmp_alrm[6] = {
 800cf72:	49e4      	ldr	r1, [pc, #912]	@ (800d304 <pdf_gen_completed_report+0xdbc>)
 800cf74:	aa1a      	add	r2, sp, #104	@ 0x68
 800cf76:	1889      	adds	r1, r1, r2
 800cf78:	714b      	strb	r3, [r1, #5]
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800cf7a:	4be3      	ldr	r3, [pc, #908]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800cf7c:	a91a      	add	r1, sp, #104	@ 0x68
 800cf7e:	185b      	adds	r3, r3, r1
 800cf80:	0019      	movs	r1, r3
 800cf82:	2208      	movs	r2, #8
 800cf84:	0080      	lsls	r0, r0, #2
 800cf86:	f7fe ff25 	bl	800bdd4 <pdf_alarm_row.constprop.0>
 800cf8a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800cf8c:	a91a      	add	r1, sp, #104	@ 0x68
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800cf8e:	181c      	adds	r4, r3, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800cf90:	2089      	movs	r0, #137	@ 0x89
 800cf92:	4bde      	ldr	r3, [pc, #888]	@ (800d30c <pdf_gen_completed_report+0xdc4>)
 800cf94:	220a      	movs	r2, #10
 800cf96:	185b      	adds	r3, r3, r1
 800cf98:	0019      	movs	r1, r3
 800cf9a:	0080      	lsls	r0, r0, #2
 800cf9c:	f7fe ff1a 	bl	800bdd4 <pdf_alarm_row.constprop.0>
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[2], ALARM_STATE_POS_TH1);  *y_pos -= LINE_SPACING;
 800cfa0:	2394      	movs	r3, #148	@ 0x94
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800cfa2:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[2], ALARM_STATE_POS_TH1);  *y_pos -= LINE_SPACING;
 800cfa4:	2086      	movs	r0, #134	@ 0x86
 800cfa6:	a91a      	add	r1, sp, #104	@ 0x68
 800cfa8:	011b      	lsls	r3, r3, #4
 800cfaa:	185b      	adds	r3, r3, r1
 800cfac:	0019      	movs	r1, r3
 800cfae:	220c      	movs	r2, #12
 800cfb0:	0080      	lsls	r0, r0, #2
 800cfb2:	f7fe ff0f 	bl	800bdd4 <pdf_alarm_row.constprop.0>
 800cfb6:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[3], ALARM_STATE_POS_TH2);  *y_pos -= LINE_SPACING;
 800cfb8:	2083      	movs	r0, #131	@ 0x83
 800cfba:	4bd5      	ldr	r3, [pc, #852]	@ (800d310 <pdf_gen_completed_report+0xdc8>)
 800cfbc:	a91a      	add	r1, sp, #104	@ 0x68
 800cfbe:	185b      	adds	r3, r3, r1
 800cfc0:	0019      	movs	r1, r3
 800cfc2:	220e      	movs	r2, #14
 800cfc4:	0080      	lsls	r0, r0, #2
 800cfc6:	f7fe ff05 	bl	800bdd4 <pdf_alarm_row.constprop.0>
 800cfca:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[4], ALARM_STATE_POS_TL1);  *y_pos -= LINE_SPACING;
 800cfcc:	2080      	movs	r0, #128	@ 0x80
 800cfce:	4bd1      	ldr	r3, [pc, #836]	@ (800d314 <pdf_gen_completed_report+0xdcc>)
 800cfd0:	a91a      	add	r1, sp, #104	@ 0x68
 800cfd2:	185b      	adds	r3, r3, r1
 800cfd4:	0019      	movs	r1, r3
 800cfd6:	2210      	movs	r2, #16
 800cfd8:	0080      	lsls	r0, r0, #2
 800cfda:	f7fe fefb 	bl	800bdd4 <pdf_alarm_row.constprop.0>
 800cfde:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[5], ALARM_STATE_POS_TL2);  *y_pos -= LINE_SPACING;
 800cfe0:	20fa      	movs	r0, #250	@ 0xfa
 800cfe2:	4bc1      	ldr	r3, [pc, #772]	@ (800d2e8 <pdf_gen_completed_report+0xda0>)
 800cfe4:	a91a      	add	r1, sp, #104	@ 0x68
 800cfe6:	185b      	adds	r3, r3, r1
 800cfe8:	2212      	movs	r2, #18
 800cfea:	0019      	movs	r1, r3
 800cfec:	0040      	lsls	r0, r0, #1
 800cfee:	f7fe fef1 	bl	800bdd4 <pdf_alarm_row.constprop.0>
 800cff2:	1824      	adds	r4, r4, r0
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800cff4:	20ea      	movs	r0, #234	@ 0xea
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800cff6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800cff8:	49c7      	ldr	r1, [pc, #796]	@ (800d318 <pdf_gen_completed_report+0xdd0>)
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800cffa:	18e3      	adds	r3, r4, r3
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800cffc:	0040      	lsls	r0, r0, #1
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800cffe:	9308      	str	r3, [sp, #32]
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800d000:	f7fe ffc8 	bl	800bf94 <draw_section_title.constprop.0>
 800d004:	0005      	movs	r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->highest_temp);
 800d006:	6830      	ldr	r0, [r6, #0]
 800d008:	f7f6 fbc6 	bl	8003798 <__aeabi_f2d>
 800d00c:	4bbe      	ldr	r3, [pc, #760]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d00e:	4cc3      	ldr	r4, [pc, #780]	@ (800d31c <pdf_gen_completed_report+0xdd4>)
 800d010:	9000      	str	r0, [sp, #0]
 800d012:	9101      	str	r1, [sp, #4]
 800d014:	a81a      	add	r0, sp, #104	@ 0x68
 800d016:	181b      	adds	r3, r3, r0
 800d018:	0022      	movs	r2, r4
 800d01a:	2140      	movs	r1, #64	@ 0x40
 800d01c:	0018      	movs	r0, r3
 800d01e:	f00d fa47 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Highest Temperature :", tmp_buff);
 800d022:	4bb9      	ldr	r3, [pc, #740]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d024:	a91a      	add	r1, sp, #104	@ 0x68
 800d026:	185b      	adds	r3, r3, r1
 800d028:	21e0      	movs	r1, #224	@ 0xe0
 800d02a:	4abd      	ldr	r2, [pc, #756]	@ (800d320 <pdf_gen_completed_report+0xdd8>)
 800d02c:	0049      	lsls	r1, r1, #1
 800d02e:	2037      	movs	r0, #55	@ 0x37
 800d030:	f7fe ffd6 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d034:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->lowest_temp);
 800d036:	6870      	ldr	r0, [r6, #4]
 800d038:	f7f6 fbae 	bl	8003798 <__aeabi_f2d>
 800d03c:	4bb2      	ldr	r3, [pc, #712]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d03e:	9000      	str	r0, [sp, #0]
 800d040:	9101      	str	r1, [sp, #4]
 800d042:	a81a      	add	r0, sp, #104	@ 0x68
 800d044:	181b      	adds	r3, r3, r0
 800d046:	0022      	movs	r2, r4
 800d048:	2140      	movs	r1, #64	@ 0x40
 800d04a:	0018      	movs	r0, r3
 800d04c:	f00d fa30 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Lowest Temperature :", tmp_buff);
 800d050:	4bad      	ldr	r3, [pc, #692]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d052:	a91a      	add	r1, sp, #104	@ 0x68
 800d054:	185b      	adds	r3, r3, r1
 800d056:	21da      	movs	r1, #218	@ 0xda
 800d058:	4ab2      	ldr	r2, [pc, #712]	@ (800d324 <pdf_gen_completed_report+0xddc>)
 800d05a:	0049      	lsls	r1, r1, #1
 800d05c:	2037      	movs	r0, #55	@ 0x37
 800d05e:	f7fe ffbf 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d062:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->average_temp);
 800d064:	68b0      	ldr	r0, [r6, #8]
 800d066:	f7f6 fb97 	bl	8003798 <__aeabi_f2d>
 800d06a:	4ba7      	ldr	r3, [pc, #668]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d06c:	9000      	str	r0, [sp, #0]
 800d06e:	9101      	str	r1, [sp, #4]
 800d070:	a81a      	add	r0, sp, #104	@ 0x68
 800d072:	181b      	adds	r3, r3, r0
 800d074:	0022      	movs	r2, r4
 800d076:	2140      	movs	r1, #64	@ 0x40
 800d078:	0018      	movs	r0, r3
 800d07a:	f00d fa19 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Temperature :", tmp_buff);
 800d07e:	4ba2      	ldr	r3, [pc, #648]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d080:	a91a      	add	r1, sp, #104	@ 0x68
 800d082:	185b      	adds	r3, r3, r1
 800d084:	21d4      	movs	r1, #212	@ 0xd4
 800d086:	4aa8      	ldr	r2, [pc, #672]	@ (800d328 <pdf_gen_completed_report+0xde0>)
 800d088:	0049      	lsls	r1, r1, #1
 800d08a:	2037      	movs	r0, #55	@ 0x37
 800d08c:	f7fe ffa8 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d090:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->mean_kinetic_temp);
 800d092:	6970      	ldr	r0, [r6, #20]
 800d094:	f7f6 fb80 	bl	8003798 <__aeabi_f2d>
 800d098:	4b9b      	ldr	r3, [pc, #620]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d09a:	9000      	str	r0, [sp, #0]
 800d09c:	9101      	str	r1, [sp, #4]
 800d09e:	a81a      	add	r0, sp, #104	@ 0x68
 800d0a0:	181b      	adds	r3, r3, r0
 800d0a2:	0022      	movs	r2, r4
 800d0a4:	2140      	movs	r1, #64	@ 0x40
 800d0a6:	0018      	movs	r0, r3
 800d0a8:	f00d fa02 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "MKT :", tmp_buff);
 800d0ac:	4b96      	ldr	r3, [pc, #600]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d0ae:	a91a      	add	r1, sp, #104	@ 0x68
 800d0b0:	185b      	adds	r3, r3, r1
 800d0b2:	21ce      	movs	r1, #206	@ 0xce
 800d0b4:	4a9d      	ldr	r2, [pc, #628]	@ (800d32c <pdf_gen_completed_report+0xde4>)
 800d0b6:	0049      	lsls	r1, r1, #1
 800d0b8:	2037      	movs	r0, #55	@ 0x37
 800d0ba:	f7fe ff91 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d0be:	182c      	adds	r4, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.2f (uSv/h)",log->highest_radiation);
 800d0c0:	68f0      	ldr	r0, [r6, #12]
 800d0c2:	f7f6 fb69 	bl	8003798 <__aeabi_f2d>
 800d0c6:	4b90      	ldr	r3, [pc, #576]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d0c8:	9000      	str	r0, [sp, #0]
 800d0ca:	9101      	str	r1, [sp, #4]
 800d0cc:	4d98      	ldr	r5, [pc, #608]	@ (800d330 <pdf_gen_completed_report+0xde8>)
 800d0ce:	a81a      	add	r0, sp, #104	@ 0x68
 800d0d0:	181b      	adds	r3, r3, r0
 800d0d2:	002a      	movs	r2, r5
 800d0d4:	2140      	movs	r1, #64	@ 0x40
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	f00d f9ea 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Highest Rad :", tmp_buff);
 800d0dc:	4b8a      	ldr	r3, [pc, #552]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d0de:	a91a      	add	r1, sp, #104	@ 0x68
 800d0e0:	185b      	adds	r3, r3, r1
 800d0e2:	21c8      	movs	r1, #200	@ 0xc8
 800d0e4:	4a93      	ldr	r2, [pc, #588]	@ (800d334 <pdf_gen_completed_report+0xdec>)
 800d0e6:	0049      	lsls	r1, r1, #1
 800d0e8:	2037      	movs	r0, #55	@ 0x37
 800d0ea:	f7fe ff79 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d0ee:	1824      	adds	r4, r4, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.2f (uSv/h)",log->average_radiation);
 800d0f0:	6930      	ldr	r0, [r6, #16]
 800d0f2:	f7f6 fb51 	bl	8003798 <__aeabi_f2d>
 800d0f6:	4b84      	ldr	r3, [pc, #528]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d0f8:	9000      	str	r0, [sp, #0]
 800d0fa:	9101      	str	r1, [sp, #4]
 800d0fc:	a81a      	add	r0, sp, #104	@ 0x68
 800d0fe:	181b      	adds	r3, r3, r0
 800d100:	002a      	movs	r2, r5
 800d102:	2140      	movs	r1, #64	@ 0x40
 800d104:	0018      	movs	r0, r3
 800d106:	f00d f9d3 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Rad :", tmp_buff);
 800d10a:	4b7f      	ldr	r3, [pc, #508]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d10c:	a91a      	add	r1, sp, #104	@ 0x68
 800d10e:	185b      	adds	r3, r3, r1
 800d110:	21c2      	movs	r1, #194	@ 0xc2
 800d112:	4a89      	ldr	r2, [pc, #548]	@ (800d338 <pdf_gen_completed_report+0xdf0>)
 800d114:	0049      	lsls	r1, r1, #1
 800d116:	2037      	movs	r0, #55	@ 0x37
 800d118:	f7fe ff62 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800d11c:	2380      	movs	r3, #128	@ 0x80
 800d11e:	2200      	movs	r2, #0
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	9374      	str	r3, [sp, #464]	@ 0x1d0
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800d124:	4b78      	ldr	r3, [pc, #480]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d126:	a91a      	add	r1, sp, #104	@ 0x68
 800d128:	185b      	adds	r3, r3, r1
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Rad :", tmp_buff);
 800d12a:	1824      	adds	r4, r4, r0
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800d12c:	a874      	add	r0, sp, #464	@ 0x1d0
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800d12e:	0019      	movs	r1, r3
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800d130:	8082      	strh	r2, [r0, #4]
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800d132:	3240      	adds	r2, #64	@ 0x40
 800d134:	f7fe fcb0 	bl	800ba98 <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Alarm At(Te) :", tmp_buff);
 800d138:	4b73      	ldr	r3, [pc, #460]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d13a:	a91a      	add	r1, sp, #104	@ 0x68
 800d13c:	185b      	adds	r3, r3, r1
 800d13e:	2096      	movs	r0, #150	@ 0x96
 800d140:	21e0      	movs	r1, #224	@ 0xe0
 800d142:	4a7e      	ldr	r2, [pc, #504]	@ (800d33c <pdf_gen_completed_report+0xdf4>)
 800d144:	0049      	lsls	r1, r1, #1
 800d146:	0040      	lsls	r0, r0, #1
 800d148:	f7fe ff4a 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d14c:	1824      	adds	r4, r4, r0
    time_to_dmyhms_string(&log->start_time,tmp_buff,sizeof(tmp_buff));
 800d14e:	0030      	movs	r0, r6
 800d150:	4b6d      	ldr	r3, [pc, #436]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d152:	a91a      	add	r1, sp, #104	@ 0x68
 800d154:	185b      	adds	r3, r3, r1
 800d156:	0019      	movs	r1, r3
 800d158:	2240      	movs	r2, #64	@ 0x40
 800d15a:	3018      	adds	r0, #24
 800d15c:	f7fe fc9c 	bl	800ba98 <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Start Time :", tmp_buff);
 800d160:	4b69      	ldr	r3, [pc, #420]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d162:	a91a      	add	r1, sp, #104	@ 0x68
 800d164:	185b      	adds	r3, r3, r1
 800d166:	2096      	movs	r0, #150	@ 0x96
 800d168:	21da      	movs	r1, #218	@ 0xda
 800d16a:	4a75      	ldr	r2, [pc, #468]	@ (800d340 <pdf_gen_completed_report+0xdf8>)
 800d16c:	0049      	lsls	r1, r1, #1
 800d16e:	0040      	lsls	r0, r0, #1
 800d170:	f7fe ff36 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d174:	1824      	adds	r4, r4, r0
    time_to_dmyhms_string(&log->stop_time,tmp_buff,sizeof(tmp_buff));
 800d176:	0030      	movs	r0, r6
 800d178:	4b63      	ldr	r3, [pc, #396]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d17a:	a91a      	add	r1, sp, #104	@ 0x68
 800d17c:	185b      	adds	r3, r3, r1
 800d17e:	0019      	movs	r1, r3
 800d180:	2240      	movs	r2, #64	@ 0x40
 800d182:	301e      	adds	r0, #30
 800d184:	f7fe fc88 	bl	800ba98 <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Stop Time :", tmp_buff);
 800d188:	4b5f      	ldr	r3, [pc, #380]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d18a:	a91a      	add	r1, sp, #104	@ 0x68
 800d18c:	185b      	adds	r3, r3, r1
 800d18e:	2096      	movs	r0, #150	@ 0x96
 800d190:	21d4      	movs	r1, #212	@ 0xd4
 800d192:	4a6c      	ldr	r2, [pc, #432]	@ (800d344 <pdf_gen_completed_report+0xdfc>)
 800d194:	0049      	lsls	r1, r1, #1
 800d196:	0040      	lsls	r0, r0, #1
 800d198:	f7fe ff22 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    uint32_t start_sec = log->start_time.hour * 3600 +
 800d19c:	21e1      	movs	r1, #225	@ 0xe1
                         log->start_time.minute  * 60 +
 800d19e:	223c      	movs	r2, #60	@ 0x3c
 800d1a0:	7f33      	ldrb	r3, [r6, #28]
    len += draw_key_value_pair(file_ptr, 300, current_y, "Stop Time :", tmp_buff);
 800d1a2:	1824      	adds	r4, r4, r0
    uint32_t start_sec = log->start_time.hour * 3600 +
 800d1a4:	7ef0      	ldrb	r0, [r6, #27]
 800d1a6:	0109      	lsls	r1, r1, #4
                         log->start_time.minute  * 60 +
 800d1a8:	4353      	muls	r3, r2
    uint32_t start_sec = log->start_time.hour * 3600 +
 800d1aa:	4348      	muls	r0, r1
 800d1ac:	18c0      	adds	r0, r0, r3
                         log->start_time.second;
 800d1ae:	7f73      	ldrb	r3, [r6, #29]
                         log->start_time.minute  * 60 +
 800d1b0:	18c0      	adds	r0, r0, r3
    uint32_t stop_sec  = log->stop_time.hour  * 3600 +
 800d1b2:	1cb3      	adds	r3, r6, #2
 800d1b4:	7fdb      	ldrb	r3, [r3, #31]
 800d1b6:	434b      	muls	r3, r1
                         log->stop_time.minute   * 60 +
 800d1b8:	1cf1      	adds	r1, r6, #3
 800d1ba:	7fc9      	ldrb	r1, [r1, #31]
 800d1bc:	434a      	muls	r2, r1
    uint32_t stop_sec  = log->stop_time.hour  * 3600 +
 800d1be:	189b      	adds	r3, r3, r2
                         log->stop_time.second;
 800d1c0:	1d32      	adds	r2, r6, #4
 800d1c2:	7fd2      	ldrb	r2, [r2, #31]
                         log->stop_time.minute   * 60 +
 800d1c4:	189b      	adds	r3, r3, r2
    if (stop_sec >= start_sec) {
 800d1c6:	4298      	cmp	r0, r3
 800d1c8:	d901      	bls.n	800d1ce <pdf_gen_completed_report+0xc86>
 800d1ca:	f000 ff7a 	bl	800e0c2 <pdf_gen_completed_report+0x1b7a>
        elapsed_sec = (86400 - start_sec) + stop_sec;
 800d1ce:	1a18      	subs	r0, r3, r0
    seconds_to_dhms_string_long(elapsed_sec, tmp_buff, sizeof(tmp_buff));
 800d1d0:	4b4d      	ldr	r3, [pc, #308]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d1d2:	a91a      	add	r1, sp, #104	@ 0x68
 800d1d4:	185b      	adds	r3, r3, r1
 800d1d6:	0019      	movs	r1, r3
 800d1d8:	2240      	movs	r2, #64	@ 0x40
 800d1da:	f7fe fc55 	bl	800ba88 <seconds_to_dhms_string_long>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800d1de:	4b4a      	ldr	r3, [pc, #296]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d1e0:	a91a      	add	r1, sp, #104	@ 0x68
 800d1e2:	185b      	adds	r3, r3, r1
 800d1e4:	2096      	movs	r0, #150	@ 0x96
 800d1e6:	21ce      	movs	r1, #206	@ 0xce
 800d1e8:	4a57      	ldr	r2, [pc, #348]	@ (800d348 <pdf_gen_completed_report+0xe00>)
 800d1ea:	0049      	lsls	r1, r1, #1
 800d1ec:	0040      	lsls	r0, r0, #1
 800d1ee:	f7fe fef7 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800d1f2:	4d56      	ldr	r5, [pc, #344]	@ (800d34c <pdf_gen_completed_report+0xe04>)
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800d1f4:	1823      	adds	r3, r4, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800d1f6:	4844      	ldr	r0, [pc, #272]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d1f8:	ac1a      	add	r4, sp, #104	@ 0x68
 800d1fa:	002a      	movs	r2, r5
 800d1fc:	2140      	movs	r1, #64	@ 0x40
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800d1fe:	9306      	str	r3, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800d200:	1900      	adds	r0, r0, r4
 800d202:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800d204:	f00d f954 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Temperature Data Points :", tmp_buff);
 800d208:	21c8      	movs	r1, #200	@ 0xc8
 800d20a:	2096      	movs	r0, #150	@ 0x96
 800d20c:	4b3e      	ldr	r3, [pc, #248]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d20e:	4a50      	ldr	r2, [pc, #320]	@ (800d350 <pdf_gen_completed_report+0xe08>)
 800d210:	191b      	adds	r3, r3, r4
 800d212:	0049      	lsls	r1, r1, #1
 800d214:	0040      	lsls	r0, r0, #1
 800d216:	f7fe fee3 	bl	800bfe0 <draw_key_value_pair.constprop.0>
 800d21a:	9b06      	ldr	r3, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_radiation_count);
 800d21c:	002a      	movs	r2, r5
    len += draw_key_value_pair(file_ptr, 300, current_y, "Temperature Data Points :", tmp_buff);
 800d21e:	181c      	adds	r4, r3, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_radiation_count);
 800d220:	4839      	ldr	r0, [pc, #228]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d222:	ad1a      	add	r5, sp, #104	@ 0x68
 800d224:	2140      	movs	r1, #64	@ 0x40
 800d226:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800d228:	1940      	adds	r0, r0, r5
 800d22a:	f00d f941 	bl	801a4b0 <sniprintf>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Radiation Data Points :", tmp_buff);
 800d22e:	21c2      	movs	r1, #194	@ 0xc2
 800d230:	2096      	movs	r0, #150	@ 0x96
 800d232:	4b35      	ldr	r3, [pc, #212]	@ (800d308 <pdf_gen_completed_report+0xdc0>)
 800d234:	4a47      	ldr	r2, [pc, #284]	@ (800d354 <pdf_gen_completed_report+0xe0c>)
 800d236:	195b      	adds	r3, r3, r5
 800d238:	0049      	lsls	r1, r1, #1
 800d23a:	0040      	lsls	r0, r0, #1
 800d23c:	f7fe fed0 	bl	800bfe0 <draw_key_value_pair.constprop.0>
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d240:	2182      	movs	r1, #130	@ 0x82
    stream_len += pdf_logging_summary(&pdf_file, &current_y, summary);
 800d242:	9b08      	ldr	r3, [sp, #32]
    len += draw_key_value_pair(file_ptr, 300, current_y, "Radiation Data Points :", tmp_buff);
 800d244:	1824      	adds	r4, r4, r0
    stream_len += pdf_logging_summary(&pdf_file, &current_y, summary);
 800d246:	18e3      	adds	r3, r4, r3
 800d248:	9314      	str	r3, [sp, #80]	@ 0x50
     const uint16_t record_nums = log->data_points_temp_count;
 800d24a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d24c:	6830      	ldr	r0, [r6, #0]
 800d24e:	05c9      	lsls	r1, r1, #23
     const uint16_t record_nums = log->data_points_temp_count;
 800d250:	9315      	str	r3, [sp, #84]	@ 0x54
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d252:	f7f3 fab7 	bl	80007c4 <__aeabi_fadd>
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800d256:	4940      	ldr	r1, [pc, #256]	@ (800d358 <pdf_gen_completed_report+0xe10>)
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d258:	9008      	str	r0, [sp, #32]
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800d25a:	68f0      	ldr	r0, [r6, #12]
 800d25c:	f7f3 fab2 	bl	80007c4 <__aeabi_fadd>
 800d260:	f7f3 f9ae 	bl	80005c0 <__aeabi_f2uiz>
    g_temp_axis_min = log->lowest_temp - 10.0f;
 800d264:	493d      	ldr	r1, [pc, #244]	@ (800d35c <pdf_gen_completed_report+0xe14>)
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800d266:	900a      	str	r0, [sp, #40]	@ 0x28
    g_temp_axis_min = log->lowest_temp - 10.0f;
 800d268:	6870      	ldr	r0, [r6, #4]
 800d26a:	f7f3 ffc5 	bl	80011f8 <__aeabi_fsub>
 800d26e:	4b3c      	ldr	r3, [pc, #240]	@ (800d360 <pdf_gen_completed_report+0xe18>)
 800d270:	1c01      	adds	r1, r0, #0
 800d272:	6018      	str	r0, [r3, #0]
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d274:	9808      	ldr	r0, [sp, #32]
 800d276:	f7f3 ffbf 	bl	80011f8 <__aeabi_fsub>
 800d27a:	21fa      	movs	r1, #250	@ 0xfa
 800d27c:	0589      	lsls	r1, r1, #22
 800d27e:	f7f3 fe61 	bl	8000f44 <__aeabi_fmul>
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800d282:	2106      	movs	r1, #6
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d284:	900c      	str	r0, [sp, #48]	@ 0x30
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800d286:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d288:	f7f2 ff6e 	bl	8000168 <__udivsi3>
 800d28c:	f7f4 fa9e 	bl	80017cc <__aeabi_ui2f>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start, 1.5, 0, 0, 0); // Bottom
 800d290:	25ff      	movs	r5, #255	@ 0xff
 800d292:	23a9      	movs	r3, #169	@ 0xa9
 800d294:	22a9      	movs	r2, #169	@ 0xa9
 800d296:	4c33      	ldr	r4, [pc, #204]	@ (800d364 <pdf_gen_completed_report+0xe1c>)
 800d298:	05ad      	lsls	r5, r5, #22
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	214b      	movs	r1, #75	@ 0x4b
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800d29e:	900f      	str	r0, [sp, #60]	@ 0x3c
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start, 1.5, 0, 0, 0); // Bottom
 800d2a0:	9501      	str	r5, [sp, #4]
 800d2a2:	0020      	movs	r0, r4
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	0052      	lsls	r2, r2, #1
 800d2a8:	4b2f      	ldr	r3, [pc, #188]	@ (800d368 <pdf_gen_completed_report+0xe20>)
 800d2aa:	9704      	str	r7, [sp, #16]
 800d2ac:	9703      	str	r7, [sp, #12]
 800d2ae:	9702      	str	r7, [sp, #8]
 800d2b0:	f00b fe24 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0); // Left
 800d2b4:	234b      	movs	r3, #75	@ 0x4b
 800d2b6:	9501      	str	r5, [sp, #4]
 800d2b8:	22a9      	movs	r2, #169	@ 0xa9
 800d2ba:	2558      	movs	r5, #88	@ 0x58
 800d2bc:	0019      	movs	r1, r3
 800d2be:	0020      	movs	r0, r4
 800d2c0:	0052      	lsls	r2, r2, #1
 800d2c2:	9704      	str	r7, [sp, #16]
 800d2c4:	9703      	str	r7, [sp, #12]
 800d2c6:	9702      	str	r7, [sp, #8]
 800d2c8:	9500      	str	r5, [sp, #0]
 800d2ca:	f00b fe17 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START + CHART_WIDTH, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0);// Right
 800d2ce:	23ff      	movs	r3, #255	@ 0xff
 800d2d0:	22a9      	movs	r2, #169	@ 0xa9
 800d2d2:	059b      	lsls	r3, r3, #22
 800d2d4:	9301      	str	r3, [sp, #4]
 800d2d6:	4b24      	ldr	r3, [pc, #144]	@ (800d368 <pdf_gen_completed_report+0xe20>)
 800d2d8:	0020      	movs	r0, r4
 800d2da:	0019      	movs	r1, r3
 800d2dc:	e046      	b.n	800d36c <pdf_gen_completed_report+0xe24>
 800d2de:	46c0      	nop			@ (mov r8, r8)
 800d2e0:	000009b8 	.word	0x000009b8
 800d2e4:	000009bc 	.word	0x000009bc
 800d2e8:	000009c4 	.word	0x000009c4
 800d2ec:	000009cf 	.word	0x000009cf
 800d2f0:	000009d4 	.word	0x000009d4
 800d2f4:	000009d8 	.word	0x000009d8
 800d2f8:	000009dc 	.word	0x000009dc
 800d2fc:	000009e4 	.word	0x000009e4
 800d300:	000009e8 	.word	0x000009e8
 800d304:	000009e7 	.word	0x000009e7
 800d308:	000008e8 	.word	0x000008e8
 800d30c:	00000914 	.word	0x00000914
 800d310:	0000096c 	.word	0x0000096c
 800d314:	00000998 	.word	0x00000998
 800d318:	0801fe35 	.word	0x0801fe35
 800d31c:	0801fe45 	.word	0x0801fe45
 800d320:	0801fe4e 	.word	0x0801fe4e
 800d324:	0801fe64 	.word	0x0801fe64
 800d328:	0801fe79 	.word	0x0801fe79
 800d32c:	0801fe8f 	.word	0x0801fe8f
 800d330:	0801fe95 	.word	0x0801fe95
 800d334:	0801fea2 	.word	0x0801fea2
 800d338:	0801feb0 	.word	0x0801feb0
 800d33c:	0801febe 	.word	0x0801febe
 800d340:	0801fecd 	.word	0x0801fecd
 800d344:	0801feda 	.word	0x0801feda
 800d348:	0801fee6 	.word	0x0801fee6
 800d34c:	0801fef5 	.word	0x0801fef5
 800d350:	0801fef8 	.word	0x0801fef8
 800d354:	0801ff12 	.word	0x0801ff12
 800d358:	42c80000 	.word	0x42c80000
 800d35c:	41200000 	.word	0x41200000
 800d360:	20000200 	.word	0x20000200
 800d364:	20003090 	.word	0x20003090
 800d368:	0000020d 	.word	0x0000020d
 800d36c:	0052      	lsls	r2, r2, #1
 800d36e:	9704      	str	r7, [sp, #16]
 800d370:	9703      	str	r7, [sp, #12]
 800d372:	9702      	str	r7, [sp, #8]
 800d374:	9500      	str	r5, [sp, #0]
 800d376:	f00b fdc1 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start - CHART_HEIGHT, CHART_X_START + CHART_WIDTH, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0); // Top
 800d37a:	23ff      	movs	r3, #255	@ 0xff
 800d37c:	059b      	lsls	r3, r3, #22
 800d37e:	002a      	movs	r2, r5
 800d380:	214b      	movs	r1, #75	@ 0x4b
 800d382:	0020      	movs	r0, r4
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	9704      	str	r7, [sp, #16]
 800d388:	4bfa      	ldr	r3, [pc, #1000]	@ (800d774 <pdf_gen_completed_report+0x122c>)
 800d38a:	9703      	str	r7, [sp, #12]
 800d38c:	9702      	str	r7, [sp, #8]
 800d38e:	9500      	str	r5, [sp, #0]
 800d390:	f00b fdb4 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, CHART_X_START - 20, chart_y_start + 15, "F1", 11, 0, 0, 0, "[C]");
 800d394:	4af8      	ldr	r2, [pc, #992]	@ (800d778 <pdf_gen_completed_report+0x1230>)
 800d396:	0020      	movs	r0, r4
 800d398:	9204      	str	r2, [sp, #16]
 800d39a:	220b      	movs	r2, #11
 800d39c:	9200      	str	r2, [sp, #0]
 800d39e:	2262      	movs	r2, #98	@ 0x62
 800d3a0:	2137      	movs	r1, #55	@ 0x37
 800d3a2:	4bf6      	ldr	r3, [pc, #984]	@ (800d77c <pdf_gen_completed_report+0x1234>)
 800d3a4:	9703      	str	r7, [sp, #12]
 800d3a6:	9702      	str	r7, [sp, #8]
 800d3a8:	9701      	str	r7, [sp, #4]
 800d3aa:	32ff      	adds	r2, #255	@ 0xff
 800d3ac:	f00b fd70 	bl	8018e90 <tpdf_draw_colored_text>
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800d3b0:	2400      	movs	r4, #0
        float temp = (float) (g_temp_axis_min  + i * temper_label_interval);
 800d3b2:	4bf3      	ldr	r3, [pc, #972]	@ (800d780 <pdf_gen_completed_report+0x1238>)
 800d3b4:	0020      	movs	r0, r4
 800d3b6:	681b      	ldr	r3, [r3, #0]
        sprintf(label_buffer, "%0.1f", temp);
 800d3b8:	ad1a      	add	r5, sp, #104	@ 0x68
        float temp = (float) (g_temp_axis_min  + i * temper_label_interval);
 800d3ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3bc:	f7f4 f9b6 	bl	800172c <__aeabi_i2f>
 800d3c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d3c2:	f7f3 fdbf 	bl	8000f44 <__aeabi_fmul>
 800d3c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3c8:	f7f3 f9fc 	bl	80007c4 <__aeabi_fadd>
 800d3cc:	9006      	str	r0, [sp, #24]
        sprintf(label_buffer, "%0.1f", temp);
 800d3ce:	f7f6 f9e3 	bl	8003798 <__aeabi_f2d>
 800d3d2:	0002      	movs	r2, r0
 800d3d4:	48eb      	ldr	r0, [pc, #940]	@ (800d784 <pdf_gen_completed_report+0x123c>)
 800d3d6:	000b      	movs	r3, r1
 800d3d8:	1940      	adds	r0, r0, r5
 800d3da:	49eb      	ldr	r1, [pc, #940]	@ (800d788 <pdf_gen_completed_report+0x1240>)
 800d3dc:	f00d f89e 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d3e0:	4be6      	ldr	r3, [pc, #920]	@ (800d77c <pdf_gen_completed_report+0x1234>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d3e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3e4:	9806      	ldr	r0, [sp, #24]
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d3e6:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d3e8:	f7f3 ff06 	bl	80011f8 <__aeabi_fsub>
 800d3ec:	49e7      	ldr	r1, [pc, #924]	@ (800d78c <pdf_gen_completed_report+0x1244>)
 800d3ee:	f7f3 fda9 	bl	8000f44 <__aeabi_fmul>
 800d3f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3f4:	1c05      	adds	r5, r0, #0
 800d3f6:	9808      	ldr	r0, [sp, #32]
 800d3f8:	f7f3 fefe 	bl	80011f8 <__aeabi_fsub>
 800d3fc:	1c01      	adds	r1, r0, #0
 800d3fe:	1c28      	adds	r0, r5, #0
 800d400:	f7f3 fbd2 	bl	8000ba8 <__aeabi_fdiv>
 800d404:	49e2      	ldr	r1, [pc, #904]	@ (800d790 <pdf_gen_completed_report+0x1248>)
 800d406:	f7f3 f9dd 	bl	80007c4 <__aeabi_fadd>
        int y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800d40a:	f7f4 f96f 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d40e:	4bdd      	ldr	r3, [pc, #884]	@ (800d784 <pdf_gen_completed_report+0x123c>)
 800d410:	a91a      	add	r1, sp, #104	@ 0x68
 800d412:	185b      	adds	r3, r3, r1
 800d414:	9304      	str	r3, [sp, #16]
 800d416:	2308      	movs	r3, #8
 800d418:	4dde      	ldr	r5, [pc, #888]	@ (800d794 <pdf_gen_completed_report+0x124c>)
 800d41a:	1ec2      	subs	r2, r0, #3
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	2137      	movs	r1, #55	@ 0x37
 800d420:	0028      	movs	r0, r5
 800d422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d424:	9703      	str	r7, [sp, #12]
 800d426:	9702      	str	r7, [sp, #8]
 800d428:	9701      	str	r7, [sp, #4]
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800d42a:	3401      	adds	r4, #1
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d42c:	f00b fd30 	bl	8018e90 <tpdf_draw_colored_text>
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800d430:	2c05      	cmp	r4, #5
 800d432:	d1be      	bne.n	800d3b2 <pdf_gen_completed_report+0xe6a>
    tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, chart_y_start + 15, "F1", 11, 0, 0, 0, "[uSv/h]");
 800d434:	4bd8      	ldr	r3, [pc, #864]	@ (800d798 <pdf_gen_completed_report+0x1250>)
 800d436:	2262      	movs	r2, #98	@ 0x62
 800d438:	9304      	str	r3, [sp, #16]
 800d43a:	230b      	movs	r3, #11
 800d43c:	0028      	movs	r0, r5
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	49d6      	ldr	r1, [pc, #856]	@ (800d79c <pdf_gen_completed_report+0x1254>)
 800d442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d444:	9703      	str	r7, [sp, #12]
 800d446:	9702      	str	r7, [sp, #8]
 800d448:	9701      	str	r7, [sp, #4]
 800d44a:	32ff      	adds	r2, #255	@ 0xff
 800d44c:	f00b fd20 	bl	8018e90 <tpdf_draw_colored_text>
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800d450:	2400      	movs	r4, #0
        float rad = RAD_MIN + i * rad_label_interval;
 800d452:	0020      	movs	r0, r4
 800d454:	f7f4 f96a 	bl	800172c <__aeabi_i2f>
 800d458:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d45a:	f7f3 fd73 	bl	8000f44 <__aeabi_fmul>
 800d45e:	2100      	movs	r1, #0
 800d460:	f7f3 f9b0 	bl	80007c4 <__aeabi_fadd>
 800d464:	900c      	str	r0, [sp, #48]	@ 0x30
        unsigned int y = (unsigned int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT,chart_y_start );
 800d466:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d468:	f7f4 f9b0 	bl	80017cc <__aeabi_ui2f>
 800d46c:	9009      	str	r0, [sp, #36]	@ 0x24
        sprintf(label_buffer, "%u", (unsigned int)rad);
 800d46e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d470:	f7f3 f8a6 	bl	80005c0 <__aeabi_f2uiz>
 800d474:	4dc3      	ldr	r5, [pc, #780]	@ (800d784 <pdf_gen_completed_report+0x123c>)
 800d476:	ab1a      	add	r3, sp, #104	@ 0x68
 800d478:	18ed      	adds	r5, r5, r3
 800d47a:	0002      	movs	r2, r0
 800d47c:	49c8      	ldr	r1, [pc, #800]	@ (800d7a0 <pdf_gen_completed_report+0x1258>)
 800d47e:	0028      	movs	r0, r5
 800d480:	f00d f84c 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d484:	4bbd      	ldr	r3, [pc, #756]	@ (800d77c <pdf_gen_completed_report+0x1234>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d486:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d488:	49c0      	ldr	r1, [pc, #768]	@ (800d78c <pdf_gen_completed_report+0x1244>)
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d48a:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d48c:	f7f3 fd5a 	bl	8000f44 <__aeabi_fmul>
 800d490:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d492:	f7f3 fb89 	bl	8000ba8 <__aeabi_fdiv>
 800d496:	49be      	ldr	r1, [pc, #760]	@ (800d790 <pdf_gen_completed_report+0x1248>)
 800d498:	f7f3 f994 	bl	80007c4 <__aeabi_fadd>
        unsigned int y = (unsigned int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT,chart_y_start );
 800d49c:	f7f3 f890 	bl	80005c0 <__aeabi_f2uiz>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d4a0:	9504      	str	r5, [sp, #16]
 800d4a2:	2508      	movs	r5, #8
 800d4a4:	4bbb      	ldr	r3, [pc, #748]	@ (800d794 <pdf_gen_completed_report+0x124c>)
 800d4a6:	1ec2      	subs	r2, r0, #3
 800d4a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4aa:	49bc      	ldr	r1, [pc, #752]	@ (800d79c <pdf_gen_completed_report+0x1254>)
 800d4ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4ae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d4b0:	9703      	str	r7, [sp, #12]
 800d4b2:	9702      	str	r7, [sp, #8]
 800d4b4:	9701      	str	r7, [sp, #4]
 800d4b6:	9500      	str	r5, [sp, #0]
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800d4b8:	3401      	adds	r4, #1
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d4ba:	f00b fce9 	bl	8018e90 <tpdf_draw_colored_text>
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800d4be:	2c07      	cmp	r4, #7
 800d4c0:	d1c7      	bne.n	800d452 <pdf_gen_completed_report+0xf0a>
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800d4c2:	7e70      	ldrb	r0, [r6, #25]
 800d4c4:	7eb4      	ldrb	r4, [r6, #26]
 800d4c6:	f7fe faf3 	bl	800bab0 <convert_month_to_string>
 800d4ca:	7e33      	ldrb	r3, [r6, #24]
 800d4cc:	4ab5      	ldr	r2, [pc, #724]	@ (800d7a4 <pdf_gen_completed_report+0x125c>)
 800d4ce:	9301      	str	r3, [sp, #4]
 800d4d0:	0023      	movs	r3, r4
            stop_time->day,\
 800d4d2:	0034      	movs	r4, r6
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800d4d4:	2110      	movs	r1, #16
 800d4d6:	9000      	str	r0, [sp, #0]
 800d4d8:	a874      	add	r0, sp, #464	@ 0x1d0
 800d4da:	9210      	str	r2, [sp, #64]	@ 0x40
 800d4dc:	f00c ffe8 	bl	801a4b0 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 10, "F1", 8, 0, 0, 0, tmp_time);
 800d4e0:	ab74      	add	r3, sp, #464	@ 0x1d0
 800d4e2:	224e      	movs	r2, #78	@ 0x4e
 800d4e4:	213c      	movs	r1, #60	@ 0x3c
 800d4e6:	9304      	str	r3, [sp, #16]
 800d4e8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d4ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4ec:	9703      	str	r7, [sp, #12]
 800d4ee:	9702      	str	r7, [sp, #8]
 800d4f0:	9701      	str	r7, [sp, #4]
 800d4f2:	9500      	str	r5, [sp, #0]
 800d4f4:	f00b fccc 	bl	8018e90 <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u:%02u:%02u", \
 800d4f8:	7f72      	ldrb	r2, [r6, #29]
 800d4fa:	7ef3      	ldrb	r3, [r6, #27]
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	49aa      	ldr	r1, [pc, #680]	@ (800d7a8 <pdf_gen_completed_report+0x1260>)
 800d500:	7f32      	ldrb	r2, [r6, #28]
 800d502:	a874      	add	r0, sp, #464	@ 0x1d0
 800d504:	9200      	str	r2, [sp, #0]
 800d506:	9112      	str	r1, [sp, #72]	@ 0x48
 800d508:	000a      	movs	r2, r1
 800d50a:	2110      	movs	r1, #16
 800d50c:	f00c ffd0 	bl	801a4b0 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800d510:	ab74      	add	r3, sp, #464	@ 0x1d0
            stop_time->day,\
 800d512:	341e      	adds	r4, #30
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800d514:	2246      	movs	r2, #70	@ 0x46
 800d516:	213c      	movs	r1, #60	@ 0x3c
 800d518:	9304      	str	r3, [sp, #16]
 800d51a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d51c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d51e:	9703      	str	r7, [sp, #12]
 800d520:	9702      	str	r7, [sp, #8]
 800d522:	9701      	str	r7, [sp, #4]
 800d524:	9500      	str	r5, [sp, #0]
 800d526:	f00b fcb3 	bl	8018e90 <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800d52a:	78a3      	ldrb	r3, [r4, #2]
 800d52c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d52e:	7860      	ldrb	r0, [r4, #1]
 800d530:	f7fe fabe 	bl	800bab0 <convert_month_to_string>
 800d534:	7fb3      	ldrb	r3, [r6, #30]
 800d536:	2110      	movs	r1, #16
 800d538:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d53a:	9301      	str	r3, [sp, #4]
 800d53c:	9000      	str	r0, [sp, #0]
 800d53e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d540:	a874      	add	r0, sp, #464	@ 0x1d0
 800d542:	f00c ffb5 	bl	801a4b0 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH -15, chart_y_start - CHART_HEIGHT - 10, "F1", 8, 0, 0, 0, tmp_time);
 800d546:	21ff      	movs	r1, #255	@ 0xff
 800d548:	ab74      	add	r3, sp, #464	@ 0x1d0
 800d54a:	224e      	movs	r2, #78	@ 0x4e
 800d54c:	9304      	str	r3, [sp, #16]
 800d54e:	0049      	lsls	r1, r1, #1
 800d550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d552:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d554:	9703      	str	r7, [sp, #12]
 800d556:	9702      	str	r7, [sp, #8]
 800d558:	9701      	str	r7, [sp, #4]
 800d55a:	9500      	str	r5, [sp, #0]
 800d55c:	f00b fc98 	bl	8018e90 <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u:%02u:%02u", \
 800d560:	7962      	ldrb	r2, [r4, #5]
 800d562:	78e3      	ldrb	r3, [r4, #3]
 800d564:	9201      	str	r2, [sp, #4]
 800d566:	7922      	ldrb	r2, [r4, #4]
 800d568:	2110      	movs	r1, #16
 800d56a:	9200      	str	r2, [sp, #0]
 800d56c:	a874      	add	r0, sp, #464	@ 0x1d0
 800d56e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d570:	f00c ff9e 	bl	801a4b0 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START+ CHART_WIDTH -15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800d574:	21ff      	movs	r1, #255	@ 0xff
 800d576:	ab74      	add	r3, sp, #464	@ 0x1d0
 800d578:	2246      	movs	r2, #70	@ 0x46
 800d57a:	9304      	str	r3, [sp, #16]
 800d57c:	0049      	lsls	r1, r1, #1
 800d57e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d580:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d582:	9703      	str	r7, [sp, #12]
 800d584:	9702      	str	r7, [sp, #8]
 800d586:	9701      	str	r7, [sp, #4]
 800d588:	9500      	str	r5, [sp, #0]
 800d58a:	f00b fc81 	bl	8018e90 <tpdf_draw_colored_text>
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d58e:	4b7c      	ldr	r3, [pc, #496]	@ (800d780 <pdf_gen_completed_report+0x1238>)
 800d590:	9808      	ldr	r0, [sp, #32]
 800d592:	6819      	ldr	r1, [r3, #0]
 800d594:	f7f3 fe30 	bl	80011f8 <__aeabi_fsub>
 800d598:	21fa      	movs	r1, #250	@ 0xfa
 800d59a:	0589      	lsls	r1, r1, #22
 800d59c:	f7f3 fcd2 	bl	8000f44 <__aeabi_fmul>
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800d5a0:	2401      	movs	r4, #1
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d5a2:	900b      	str	r0, [sp, #44]	@ 0x2c
        float temp = (float)(g_temp_axis_min  + i * temper_label_interval);
 800d5a4:	4b76      	ldr	r3, [pc, #472]	@ (800d780 <pdf_gen_completed_report+0x1238>)
 800d5a6:	0020      	movs	r0, r4
 800d5a8:	681e      	ldr	r6, [r3, #0]
 800d5aa:	f7f4 f8bf 	bl	800172c <__aeabi_i2f>
 800d5ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5b0:	f7f3 fcc8 	bl	8000f44 <__aeabi_fmul>
 800d5b4:	1c31      	adds	r1, r6, #0
 800d5b6:	f7f3 f905 	bl	80007c4 <__aeabi_fadd>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d5ba:	1c31      	adds	r1, r6, #0
 800d5bc:	f7f3 fe1c 	bl	80011f8 <__aeabi_fsub>
 800d5c0:	4972      	ldr	r1, [pc, #456]	@ (800d78c <pdf_gen_completed_report+0x1244>)
 800d5c2:	f7f3 fcbf 	bl	8000f44 <__aeabi_fmul>
 800d5c6:	1c31      	adds	r1, r6, #0
 800d5c8:	1c05      	adds	r5, r0, #0
 800d5ca:	9808      	ldr	r0, [sp, #32]
 800d5cc:	f7f3 fe14 	bl	80011f8 <__aeabi_fsub>
 800d5d0:	1c01      	adds	r1, r0, #0
 800d5d2:	1c28      	adds	r0, r5, #0
 800d5d4:	f7f3 fae8 	bl	8000ba8 <__aeabi_fdiv>
 800d5d8:	496d      	ldr	r1, [pc, #436]	@ (800d790 <pdf_gen_completed_report+0x1248>)
 800d5da:	f7f3 f8f3 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up,chart_y_start - CHART_HEIGHT, chart_y_start);
 800d5de:	f7f4 f885 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d5e2:	2304      	movs	r3, #4
 800d5e4:	9305      	str	r3, [sp, #20]
 800d5e6:	23fc      	movs	r3, #252	@ 0xfc
 800d5e8:	4e70      	ldr	r6, [pc, #448]	@ (800d7ac <pdf_gen_completed_report+0x1264>)
 800d5ea:	4d6a      	ldr	r5, [pc, #424]	@ (800d794 <pdf_gen_completed_report+0x124c>)
 800d5ec:	059b      	lsls	r3, r3, #22
        y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up,chart_y_start - CHART_HEIGHT, chart_y_start);
 800d5ee:	0002      	movs	r2, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	9000      	str	r0, [sp, #0]
 800d5f4:	214b      	movs	r1, #75	@ 0x4b
 800d5f6:	0028      	movs	r0, r5
 800d5f8:	4b5e      	ldr	r3, [pc, #376]	@ (800d774 <pdf_gen_completed_report+0x122c>)
 800d5fa:	9604      	str	r6, [sp, #16]
 800d5fc:	9603      	str	r6, [sp, #12]
 800d5fe:	9602      	str	r6, [sp, #8]
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800d600:	3401      	adds	r4, #1
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d602:	f00b fcaf 	bl	8018f64 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800d606:	2c04      	cmp	r4, #4
 800d608:	d1cc      	bne.n	800d5a4 <pdf_gen_completed_report+0x105c>
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800d60a:	3c03      	subs	r4, #3
        float rad = RAD_MIN + i * rad_label_interval;
 800d60c:	0020      	movs	r0, r4
 800d60e:	f7f4 f88d 	bl	800172c <__aeabi_i2f>
 800d612:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d614:	f7f3 fc96 	bl	8000f44 <__aeabi_fmul>
 800d618:	2100      	movs	r1, #0
 800d61a:	f7f3 f8d3 	bl	80007c4 <__aeabi_fadd>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d61e:	495b      	ldr	r1, [pc, #364]	@ (800d78c <pdf_gen_completed_report+0x1244>)
 800d620:	f7f3 fc90 	bl	8000f44 <__aeabi_fmul>
 800d624:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d626:	f7f3 fabf 	bl	8000ba8 <__aeabi_fdiv>
 800d62a:	4959      	ldr	r1, [pc, #356]	@ (800d790 <pdf_gen_completed_report+0x1248>)
 800d62c:	f7f3 f8ca 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800d630:	f7f4 f85c 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d634:	2304      	movs	r3, #4
 800d636:	9305      	str	r3, [sp, #20]
 800d638:	23fc      	movs	r3, #252	@ 0xfc
 800d63a:	4d56      	ldr	r5, [pc, #344]	@ (800d794 <pdf_gen_completed_report+0x124c>)
 800d63c:	059b      	lsls	r3, r3, #22
        y = (int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800d63e:	0002      	movs	r2, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d640:	9301      	str	r3, [sp, #4]
 800d642:	9000      	str	r0, [sp, #0]
 800d644:	214b      	movs	r1, #75	@ 0x4b
 800d646:	0028      	movs	r0, r5
 800d648:	4b4a      	ldr	r3, [pc, #296]	@ (800d774 <pdf_gen_completed_report+0x122c>)
 800d64a:	9604      	str	r6, [sp, #16]
 800d64c:	9603      	str	r6, [sp, #12]
 800d64e:	9602      	str	r6, [sp, #8]
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800d650:	3401      	adds	r4, #1
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d652:	f00b fc87 	bl	8018f64 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800d656:	2c06      	cmp	r4, #6
 800d658:	d1d8      	bne.n	800d60c <pdf_gen_completed_report+0x10c4>
    const int grid_size = ( CHART_HEIGHT / ((int)(rad_highest_scale_up-RAD_MIN)/rad_label_interval) );
 800d65a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d65c:	f7f4 f866 	bl	800172c <__aeabi_i2f>
 800d660:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d662:	f7f3 faa1 	bl	8000ba8 <__aeabi_fdiv>
 800d666:	1c01      	adds	r1, r0, #0
 800d668:	4848      	ldr	r0, [pc, #288]	@ (800d78c <pdf_gen_completed_report+0x1244>)
 800d66a:	f7f3 fa9d 	bl	8000ba8 <__aeabi_fdiv>
 800d66e:	f7f4 f83d 	bl	80016ec <__aeabi_f2iz>
 800d672:	0004      	movs	r4, r0
    const int num_grid_col_lines = (int)(CHART_WIDTH / grid_size);
 800d674:	0001      	movs	r1, r0
 800d676:	20e1      	movs	r0, #225	@ 0xe1
 800d678:	0040      	lsls	r0, r0, #1
 800d67a:	f7f2 fdff 	bl	800027c <__divsi3>
 800d67e:	0025      	movs	r5, r4
    for (int i = 1; i <= num_grid_col_lines; i++)
 800d680:	2301      	movs	r3, #1
    const int num_grid_col_lines = (int)(CHART_WIDTH / grid_size);
 800d682:	900c      	str	r0, [sp, #48]	@ 0x30
    for (int i = 1; i <= num_grid_col_lines; i++)
 800d684:	354b      	adds	r5, #75	@ 0x4b
 800d686:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d688:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d68a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d68c:	4293      	cmp	r3, r2
 800d68e:	db01      	blt.n	800d694 <pdf_gen_completed_report+0x114c>
 800d690:	f000 fd1b 	bl	800e0ca <pdf_gen_completed_report+0x1b82>
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800d694:	9a07      	ldr	r2, [sp, #28]
 800d696:	9b07      	ldr	r3, [sp, #28]
 800d698:	329e      	adds	r2, #158	@ 0x9e
 800d69a:	7810      	ldrb	r0, [r2, #0]
 800d69c:	339d      	adds	r3, #157	@ 0x9d
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	0200      	lsls	r0, r0, #8
 800d6a2:	4318      	orrs	r0, r3
 800d6a4:	0400      	lsls	r0, r0, #16
 800d6a6:	1400      	asrs	r0, r0, #16
 800d6a8:	f7f4 f840 	bl	800172c <__aeabi_i2f>
 800d6ac:	4940      	ldr	r1, [pc, #256]	@ (800d7b0 <pdf_gen_completed_report+0x1268>)
 800d6ae:	f7f3 fa7b 	bl	8000ba8 <__aeabi_fdiv>
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d6b2:	9a07      	ldr	r2, [sp, #28]
 800d6b4:	9b07      	ldr	r3, [sp, #28]
 800d6b6:	3296      	adds	r2, #150	@ 0x96
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800d6b8:	1c06      	adds	r6, r0, #0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d6ba:	3395      	adds	r3, #149	@ 0x95
 800d6bc:	7810      	ldrb	r0, [r2, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	0200      	lsls	r0, r0, #8
 800d6c2:	4318      	orrs	r0, r3
 800d6c4:	0400      	lsls	r0, r0, #16
 800d6c6:	1400      	asrs	r0, r0, #16
 800d6c8:	f7f4 f830 	bl	800172c <__aeabi_i2f>
 800d6cc:	4938      	ldr	r1, [pc, #224]	@ (800d7b0 <pdf_gen_completed_report+0x1268>)
 800d6ce:	f7f3 fa6b 	bl	8000ba8 <__aeabi_fdiv>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d6d2:	9a07      	ldr	r2, [sp, #28]
 800d6d4:	9b07      	ldr	r3, [sp, #28]
 800d6d6:	32a0      	adds	r2, #160	@ 0xa0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d6d8:	900c      	str	r0, [sp, #48]	@ 0x30
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d6da:	7810      	ldrb	r0, [r2, #0]
 800d6dc:	339f      	adds	r3, #159	@ 0x9f
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	0200      	lsls	r0, r0, #8
 800d6e2:	4318      	orrs	r0, r3
 800d6e4:	0400      	lsls	r0, r0, #16
 800d6e6:	1400      	asrs	r0, r0, #16
 800d6e8:	f7f4 f820 	bl	800172c <__aeabi_i2f>
 800d6ec:	4930      	ldr	r1, [pc, #192]	@ (800d7b0 <pdf_gen_completed_report+0x1268>)
 800d6ee:	f7f3 fa5b 	bl	8000ba8 <__aeabi_fdiv>
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d6f2:	9a07      	ldr	r2, [sp, #28]
 800d6f4:	9b07      	ldr	r3, [sp, #28]
 800d6f6:	3298      	adds	r2, #152	@ 0x98
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d6f8:	900f      	str	r0, [sp, #60]	@ 0x3c
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d6fa:	7810      	ldrb	r0, [r2, #0]
 800d6fc:	3397      	adds	r3, #151	@ 0x97
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	0200      	lsls	r0, r0, #8
 800d702:	4318      	orrs	r0, r3
 800d704:	0400      	lsls	r0, r0, #16
 800d706:	1400      	asrs	r0, r0, #16
 800d708:	f7f4 f810 	bl	800172c <__aeabi_i2f>
 800d70c:	4928      	ldr	r1, [pc, #160]	@ (800d7b0 <pdf_gen_completed_report+0x1268>)
 800d70e:	f7f3 fa4b 	bl	8000ba8 <__aeabi_fdiv>
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d712:	9a07      	ldr	r2, [sp, #28]
 800d714:	9b07      	ldr	r3, [sp, #28]
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d716:	9010      	str	r0, [sp, #64]	@ 0x40
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d718:	329a      	adds	r2, #154	@ 0x9a
 800d71a:	7812      	ldrb	r2, [r2, #0]
 800d71c:	3399      	adds	r3, #153	@ 0x99
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	0212      	lsls	r2, r2, #8
 800d722:	431a      	orrs	r2, r3
 800d724:	9b07      	ldr	r3, [sp, #28]
 800d726:	2164      	movs	r1, #100	@ 0x64
 800d728:	339b      	adds	r3, #155	@ 0x9b
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	041b      	lsls	r3, r3, #16
 800d72e:	4313      	orrs	r3, r2
 800d730:	9a07      	ldr	r2, [sp, #28]
 800d732:	329c      	adds	r2, #156	@ 0x9c
 800d734:	7810      	ldrb	r0, [r2, #0]
 800d736:	0600      	lsls	r0, r0, #24
 800d738:	4318      	orrs	r0, r3
 800d73a:	f7f2 fd15 	bl	8000168 <__udivsi3>
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d73e:	9b07      	ldr	r3, [sp, #28]
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d740:	900b      	str	r0, [sp, #44]	@ 0x2c
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d742:	3391      	adds	r3, #145	@ 0x91
 800d744:	781a      	ldrb	r2, [r3, #0]
 800d746:	9b07      	ldr	r3, [sp, #28]
 800d748:	2164      	movs	r1, #100	@ 0x64
 800d74a:	3392      	adds	r3, #146	@ 0x92
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	021b      	lsls	r3, r3, #8
 800d750:	4313      	orrs	r3, r2
 800d752:	9a07      	ldr	r2, [sp, #28]
 800d754:	3293      	adds	r2, #147	@ 0x93
 800d756:	7812      	ldrb	r2, [r2, #0]
 800d758:	0412      	lsls	r2, r2, #16
 800d75a:	431a      	orrs	r2, r3
 800d75c:	9b07      	ldr	r3, [sp, #28]
 800d75e:	3394      	adds	r3, #148	@ 0x94
 800d760:	7818      	ldrb	r0, [r3, #0]
 800d762:	0600      	lsls	r0, r0, #24
 800d764:	4310      	orrs	r0, r2
 800d766:	f7f2 fcff 	bl	8000168 <__udivsi3>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH2) && (temp_highest_scale_up > th2)) {
 800d76a:	4b12      	ldr	r3, [pc, #72]	@ (800d7b4 <pdf_gen_completed_report+0x126c>)
 800d76c:	2280      	movs	r2, #128	@ 0x80
 800d76e:	699c      	ldr	r4, [r3, #24]
 800d770:	e022      	b.n	800d7b8 <pdf_gen_completed_report+0x1270>
 800d772:	46c0      	nop			@ (mov r8, r8)
 800d774:	0000020d 	.word	0x0000020d
 800d778:	0801ff2a 	.word	0x0801ff2a
 800d77c:	0801f75e 	.word	0x0801f75e
 800d780:	20000200 	.word	0x20000200
 800d784:	000008e8 	.word	0x000008e8
 800d788:	0801ff2e 	.word	0x0801ff2e
 800d78c:	437a0000 	.word	0x437a0000
 800d790:	42b00000 	.word	0x42b00000
 800d794:	20003090 	.word	0x20003090
 800d798:	0801ff34 	.word	0x0801ff34
 800d79c:	00000212 	.word	0x00000212
 800d7a0:	0801ff3c 	.word	0x0801ff3c
 800d7a4:	0801ff3f 	.word	0x0801ff3f
 800d7a8:	0801fcc5 	.word	0x0801fcc5
 800d7ac:	3f333333 	.word	0x3f333333
 800d7b0:	41200000 	.word	0x41200000
 800d7b4:	20000b50 	.word	0x20000b50
 800d7b8:	23c0      	movs	r3, #192	@ 0xc0
 800d7ba:	021b      	lsls	r3, r3, #8
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d7bc:	9007      	str	r0, [sp, #28]
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH2) && (temp_highest_scale_up > th2)) {
 800d7be:	4023      	ands	r3, r4
 800d7c0:	0212      	lsls	r2, r2, #8
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d101      	bne.n	800d7ca <pdf_gen_completed_report+0x1282>
 800d7c6:	f000 fc97 	bl	800e0f8 <pdf_gen_completed_report+0x1bb0>
 800d7ca:	9808      	ldr	r0, [sp, #32]
 800d7cc:	1c31      	adds	r1, r6, #0
 800d7ce:	f7f2 fea5 	bl	800051c <__aeabi_fcmpgt>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d101      	bne.n	800d7da <pdf_gen_completed_report+0x1292>
 800d7d6:	f000 fc8f 	bl	800e0f8 <pdf_gen_completed_report+0x1bb0>
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d7da:	4bf6      	ldr	r3, [pc, #984]	@ (800dbb4 <pdf_gen_completed_report+0x166c>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d7dc:	1c30      	adds	r0, r6, #0
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d7de:	681d      	ldr	r5, [r3, #0]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d7e0:	1c29      	adds	r1, r5, #0
 800d7e2:	f7f3 fd09 	bl	80011f8 <__aeabi_fsub>
 800d7e6:	49f4      	ldr	r1, [pc, #976]	@ (800dbb8 <pdf_gen_completed_report+0x1670>)
 800d7e8:	f7f3 fbac 	bl	8000f44 <__aeabi_fmul>
 800d7ec:	1c29      	adds	r1, r5, #0
 800d7ee:	1c04      	adds	r4, r0, #0
 800d7f0:	9808      	ldr	r0, [sp, #32]
 800d7f2:	f7f3 fd01 	bl	80011f8 <__aeabi_fsub>
 800d7f6:	1c01      	adds	r1, r0, #0
 800d7f8:	1c20      	adds	r0, r4, #0
 800d7fa:	f7f3 f9d5 	bl	8000ba8 <__aeabi_fdiv>
 800d7fe:	49ef      	ldr	r1, [pc, #956]	@ (800dbbc <pdf_gen_completed_report+0x1674>)
 800d800:	f7f2 ffe0 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d804:	f7f3 ff72 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d808:	2304      	movs	r3, #4
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d80a:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d80c:	20ff      	movs	r0, #255	@ 0xff
 800d80e:	4dec      	ldr	r5, [pc, #944]	@ (800dbc0 <pdf_gen_completed_report+0x1678>)
 800d810:	4aec      	ldr	r2, [pc, #944]	@ (800dbc4 <pdf_gen_completed_report+0x167c>)
 800d812:	9305      	str	r3, [sp, #20]
 800d814:	4bec      	ldr	r3, [pc, #944]	@ (800dbc8 <pdf_gen_completed_report+0x1680>)
 800d816:	0580      	lsls	r0, r0, #22
 800d818:	214b      	movs	r1, #75	@ 0x4b
 800d81a:	9303      	str	r3, [sp, #12]
 800d81c:	9202      	str	r2, [sp, #8]
 800d81e:	4beb      	ldr	r3, [pc, #940]	@ (800dbcc <pdf_gen_completed_report+0x1684>)
 800d820:	0022      	movs	r2, r4
 800d822:	9001      	str	r0, [sp, #4]
 800d824:	9704      	str	r7, [sp, #16]
 800d826:	0028      	movs	r0, r5
 800d828:	9400      	str	r4, [sp, #0]
 800d82a:	f00b fb9b 	bl	8018f64 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", th2);
 800d82e:	1c30      	adds	r0, r6, #0
 800d830:	f7f5 ffb2 	bl	8003798 <__aeabi_f2d>
 800d834:	4ee6      	ldr	r6, [pc, #920]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800d836:	ab1a      	add	r3, sp, #104	@ 0x68
 800d838:	9012      	str	r0, [sp, #72]	@ 0x48
 800d83a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d83c:	18f6      	adds	r6, r6, r3
 800d83e:	49e5      	ldr	r1, [pc, #916]	@ (800dbd4 <pdf_gen_completed_report+0x168c>)
 800d840:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d842:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d844:	0030      	movs	r0, r6
 800d846:	f00c fe69 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d84a:	49df      	ldr	r1, [pc, #892]	@ (800dbc8 <pdf_gen_completed_report+0x1680>)
 800d84c:	4be2      	ldr	r3, [pc, #904]	@ (800dbd8 <pdf_gen_completed_report+0x1690>)
 800d84e:	9102      	str	r1, [sp, #8]
 800d850:	49dc      	ldr	r1, [pc, #880]	@ (800dbc4 <pdf_gen_completed_report+0x167c>)
 800d852:	1ee2      	subs	r2, r4, #3
 800d854:	9101      	str	r1, [sp, #4]
 800d856:	2108      	movs	r1, #8
 800d858:	0028      	movs	r0, r5
 800d85a:	9100      	str	r1, [sp, #0]
 800d85c:	9604      	str	r6, [sp, #16]
 800d85e:	312f      	adds	r1, #47	@ 0x2f
 800d860:	9703      	str	r7, [sp, #12]
 800d862:	f00b fb15 	bl	8018e90 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TH2 draw y=%d (%.1f)\r\n", y, th2);
 800d866:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d868:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d86a:	0021      	movs	r1, r4
 800d86c:	48db      	ldr	r0, [pc, #876]	@ (800dbdc <pdf_gen_completed_report+0x1694>)
 800d86e:	f00c fda5 	bl	801a3bc <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH1) && (temp_highest_scale_up > th1)) {
 800d872:	4bdb      	ldr	r3, [pc, #876]	@ (800dbe0 <pdf_gen_completed_report+0x1698>)
 800d874:	2280      	movs	r2, #128	@ 0x80
 800d876:	699c      	ldr	r4, [r3, #24]
 800d878:	23c0      	movs	r3, #192	@ 0xc0
 800d87a:	019b      	lsls	r3, r3, #6
 800d87c:	4023      	ands	r3, r4
 800d87e:	0192      	lsls	r2, r2, #6
 800d880:	4293      	cmp	r3, r2
 800d882:	d101      	bne.n	800d888 <pdf_gen_completed_report+0x1340>
 800d884:	f000 fc3f 	bl	800e106 <pdf_gen_completed_report+0x1bbe>
 800d888:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d88a:	9808      	ldr	r0, [sp, #32]
 800d88c:	f7f2 fe46 	bl	800051c <__aeabi_fcmpgt>
 800d890:	2800      	cmp	r0, #0
 800d892:	d101      	bne.n	800d898 <pdf_gen_completed_report+0x1350>
 800d894:	f000 fc37 	bl	800e106 <pdf_gen_completed_report+0x1bbe>
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d898:	4bc6      	ldr	r3, [pc, #792]	@ (800dbb4 <pdf_gen_completed_report+0x166c>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d89a:	980c      	ldr	r0, [sp, #48]	@ 0x30
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d89c:	681d      	ldr	r5, [r3, #0]
        sprintf(label_buffer, "%0.1f", th1);
 800d89e:	ae1a      	add	r6, sp, #104	@ 0x68
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d8a0:	1c29      	adds	r1, r5, #0
 800d8a2:	f7f3 fca9 	bl	80011f8 <__aeabi_fsub>
 800d8a6:	49c4      	ldr	r1, [pc, #784]	@ (800dbb8 <pdf_gen_completed_report+0x1670>)
 800d8a8:	f7f3 fb4c 	bl	8000f44 <__aeabi_fmul>
 800d8ac:	1c29      	adds	r1, r5, #0
 800d8ae:	1c04      	adds	r4, r0, #0
 800d8b0:	9808      	ldr	r0, [sp, #32]
 800d8b2:	f7f3 fca1 	bl	80011f8 <__aeabi_fsub>
 800d8b6:	1c01      	adds	r1, r0, #0
 800d8b8:	1c20      	adds	r0, r4, #0
 800d8ba:	f7f3 f975 	bl	8000ba8 <__aeabi_fdiv>
 800d8be:	49bf      	ldr	r1, [pc, #764]	@ (800dbbc <pdf_gen_completed_report+0x1674>)
 800d8c0:	f7f2 ff80 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d8c4:	f7f3 ff12 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d8c8:	2304      	movs	r3, #4
 800d8ca:	9305      	str	r3, [sp, #20]
 800d8cc:	23fc      	movs	r3, #252	@ 0xfc
 800d8ce:	059b      	lsls	r3, r3, #22
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d8d0:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d8d2:	9304      	str	r3, [sp, #16]
 800d8d4:	22fe      	movs	r2, #254	@ 0xfe
 800d8d6:	23fd      	movs	r3, #253	@ 0xfd
 800d8d8:	20ff      	movs	r0, #255	@ 0xff
 800d8da:	4db9      	ldr	r5, [pc, #740]	@ (800dbc0 <pdf_gen_completed_report+0x1678>)
 800d8dc:	059b      	lsls	r3, r3, #22
 800d8de:	0592      	lsls	r2, r2, #22
 800d8e0:	0580      	lsls	r0, r0, #22
 800d8e2:	214b      	movs	r1, #75	@ 0x4b
 800d8e4:	9303      	str	r3, [sp, #12]
 800d8e6:	9202      	str	r2, [sp, #8]
 800d8e8:	4bb8      	ldr	r3, [pc, #736]	@ (800dbcc <pdf_gen_completed_report+0x1684>)
 800d8ea:	0022      	movs	r2, r4
 800d8ec:	9001      	str	r0, [sp, #4]
 800d8ee:	9400      	str	r4, [sp, #0]
 800d8f0:	0028      	movs	r0, r5
 800d8f2:	f00b fb37 	bl	8018f64 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", th1);
 800d8f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d8f8:	f7f5 ff4e 	bl	8003798 <__aeabi_f2d>
 800d8fc:	900c      	str	r0, [sp, #48]	@ 0x30
 800d8fe:	910d      	str	r1, [sp, #52]	@ 0x34
 800d900:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d904:	48b2      	ldr	r0, [pc, #712]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800d906:	49b3      	ldr	r1, [pc, #716]	@ (800dbd4 <pdf_gen_completed_report+0x168c>)
 800d908:	1980      	adds	r0, r0, r6
 800d90a:	f00c fe07 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d90e:	21fc      	movs	r1, #252	@ 0xfc
 800d910:	0589      	lsls	r1, r1, #22
 800d912:	9103      	str	r1, [sp, #12]
 800d914:	21fd      	movs	r1, #253	@ 0xfd
 800d916:	0589      	lsls	r1, r1, #22
 800d918:	9102      	str	r1, [sp, #8]
 800d91a:	21fe      	movs	r1, #254	@ 0xfe
 800d91c:	0589      	lsls	r1, r1, #22
 800d91e:	9101      	str	r1, [sp, #4]
 800d920:	2108      	movs	r1, #8
 800d922:	48ab      	ldr	r0, [pc, #684]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800d924:	4bac      	ldr	r3, [pc, #688]	@ (800dbd8 <pdf_gen_completed_report+0x1690>)
 800d926:	1980      	adds	r0, r0, r6
 800d928:	1ee2      	subs	r2, r4, #3
 800d92a:	9004      	str	r0, [sp, #16]
 800d92c:	9100      	str	r1, [sp, #0]
 800d92e:	0028      	movs	r0, r5
 800d930:	312f      	adds	r1, #47	@ 0x2f
 800d932:	f00b faad 	bl	8018e90 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TH1 draw y=%d (%.1f)\r\n", y, th1);
 800d936:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d938:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d93a:	0021      	movs	r1, r4
 800d93c:	48a9      	ldr	r0, [pc, #676]	@ (800dbe4 <pdf_gen_completed_report+0x169c>)
 800d93e:	f00c fd3d 	bl	801a3bc <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TL2) && (g_temp_axis_min < tl2)) {
 800d942:	4ba7      	ldr	r3, [pc, #668]	@ (800dbe0 <pdf_gen_completed_report+0x1698>)
 800d944:	2280      	movs	r2, #128	@ 0x80
 800d946:	699c      	ldr	r4, [r3, #24]
 800d948:	23c0      	movs	r3, #192	@ 0xc0
 800d94a:	031b      	lsls	r3, r3, #12
 800d94c:	4023      	ands	r3, r4
 800d94e:	0312      	lsls	r2, r2, #12
 800d950:	4293      	cmp	r3, r2
 800d952:	d100      	bne.n	800d956 <pdf_gen_completed_report+0x140e>
 800d954:	e3dd      	b.n	800e112 <pdf_gen_completed_report+0x1bca>
 800d956:	4b97      	ldr	r3, [pc, #604]	@ (800dbb4 <pdf_gen_completed_report+0x166c>)
 800d958:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d95a:	681d      	ldr	r5, [r3, #0]
 800d95c:	1c29      	adds	r1, r5, #0
 800d95e:	f7f2 fddd 	bl	800051c <__aeabi_fcmpgt>
 800d962:	2800      	cmp	r0, #0
 800d964:	d100      	bne.n	800d968 <pdf_gen_completed_report+0x1420>
 800d966:	e3d4      	b.n	800e112 <pdf_gen_completed_report+0x1bca>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d968:	1c29      	adds	r1, r5, #0
 800d96a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d96c:	f7f3 fc44 	bl	80011f8 <__aeabi_fsub>
 800d970:	4991      	ldr	r1, [pc, #580]	@ (800dbb8 <pdf_gen_completed_report+0x1670>)
 800d972:	f7f3 fae7 	bl	8000f44 <__aeabi_fmul>
 800d976:	1c29      	adds	r1, r5, #0
 800d978:	1c04      	adds	r4, r0, #0
 800d97a:	9808      	ldr	r0, [sp, #32]
 800d97c:	f7f3 fc3c 	bl	80011f8 <__aeabi_fsub>
 800d980:	1c01      	adds	r1, r0, #0
 800d982:	1c20      	adds	r0, r4, #0
 800d984:	f7f3 f910 	bl	8000ba8 <__aeabi_fdiv>
 800d988:	498c      	ldr	r1, [pc, #560]	@ (800dbbc <pdf_gen_completed_report+0x1674>)
 800d98a:	f7f2 ff1b 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(tl2, g_temp_axis_min, temp_highest_scale_up,
 800d98e:	f7f3 fead 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d992:	2304      	movs	r3, #4
 800d994:	22ff      	movs	r2, #255	@ 0xff
 800d996:	4d8a      	ldr	r5, [pc, #552]	@ (800dbc0 <pdf_gen_completed_report+0x1678>)
 800d998:	4e93      	ldr	r6, [pc, #588]	@ (800dbe8 <pdf_gen_completed_report+0x16a0>)
 800d99a:	9305      	str	r3, [sp, #20]
 800d99c:	4b89      	ldr	r3, [pc, #548]	@ (800dbc4 <pdf_gen_completed_report+0x167c>)
 800d99e:	0592      	lsls	r2, r2, #22
        y = (int)map_value(tl2, g_temp_axis_min, temp_highest_scale_up,
 800d9a0:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d9a2:	214b      	movs	r1, #75	@ 0x4b
 800d9a4:	9303      	str	r3, [sp, #12]
 800d9a6:	9201      	str	r2, [sp, #4]
 800d9a8:	4b88      	ldr	r3, [pc, #544]	@ (800dbcc <pdf_gen_completed_report+0x1684>)
 800d9aa:	0002      	movs	r2, r0
 800d9ac:	9000      	str	r0, [sp, #0]
 800d9ae:	9604      	str	r6, [sp, #16]
 800d9b0:	0028      	movs	r0, r5
 800d9b2:	9602      	str	r6, [sp, #8]
 800d9b4:	9506      	str	r5, [sp, #24]
 800d9b6:	f00b fad5 	bl	8018f64 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", tl2);
 800d9ba:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d9bc:	f7f5 feec 	bl	8003798 <__aeabi_f2d>
 800d9c0:	900c      	str	r0, [sp, #48]	@ 0x30
 800d9c2:	910d      	str	r1, [sp, #52]	@ 0x34
 800d9c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d9c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9c8:	4881      	ldr	r0, [pc, #516]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800d9ca:	ad1a      	add	r5, sp, #104	@ 0x68
 800d9cc:	4981      	ldr	r1, [pc, #516]	@ (800dbd4 <pdf_gen_completed_report+0x168c>)
 800d9ce:	1940      	adds	r0, r0, r5
 800d9d0:	f00c fda4 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d9d4:	497b      	ldr	r1, [pc, #492]	@ (800dbc4 <pdf_gen_completed_report+0x167c>)
 800d9d6:	487e      	ldr	r0, [pc, #504]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800d9d8:	9102      	str	r1, [sp, #8]
 800d9da:	2108      	movs	r1, #8
 800d9dc:	1940      	adds	r0, r0, r5
 800d9de:	4b7e      	ldr	r3, [pc, #504]	@ (800dbd8 <pdf_gen_completed_report+0x1690>)
 800d9e0:	1ee2      	subs	r2, r4, #3
 800d9e2:	9004      	str	r0, [sp, #16]
 800d9e4:	9100      	str	r1, [sp, #0]
 800d9e6:	9806      	ldr	r0, [sp, #24]
 800d9e8:	312f      	adds	r1, #47	@ 0x2f
 800d9ea:	9603      	str	r6, [sp, #12]
 800d9ec:	9601      	str	r6, [sp, #4]
 800d9ee:	f00b fa4f 	bl	8018e90 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TL2 draw y=%d (%.1f)\r\n", y, tl2);
 800d9f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d9f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9f6:	0021      	movs	r1, r4
 800d9f8:	487c      	ldr	r0, [pc, #496]	@ (800dbec <pdf_gen_completed_report+0x16a4>)
 800d9fa:	f00c fcdf 	bl	801a3bc <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TL1) && (g_temp_axis_min < tl1)) {
 800d9fe:	4b78      	ldr	r3, [pc, #480]	@ (800dbe0 <pdf_gen_completed_report+0x1698>)
 800da00:	2280      	movs	r2, #128	@ 0x80
 800da02:	699c      	ldr	r4, [r3, #24]
 800da04:	23c0      	movs	r3, #192	@ 0xc0
 800da06:	029b      	lsls	r3, r3, #10
 800da08:	4023      	ands	r3, r4
 800da0a:	0292      	lsls	r2, r2, #10
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d100      	bne.n	800da12 <pdf_gen_completed_report+0x14ca>
 800da10:	e385      	b.n	800e11e <pdf_gen_completed_report+0x1bd6>
 800da12:	4b68      	ldr	r3, [pc, #416]	@ (800dbb4 <pdf_gen_completed_report+0x166c>)
 800da14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800da16:	681d      	ldr	r5, [r3, #0]
 800da18:	1c29      	adds	r1, r5, #0
 800da1a:	f7f2 fd7f 	bl	800051c <__aeabi_fcmpgt>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d100      	bne.n	800da24 <pdf_gen_completed_report+0x14dc>
 800da22:	e37c      	b.n	800e11e <pdf_gen_completed_report+0x1bd6>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800da24:	1c29      	adds	r1, r5, #0
 800da26:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800da28:	f7f3 fbe6 	bl	80011f8 <__aeabi_fsub>
 800da2c:	4962      	ldr	r1, [pc, #392]	@ (800dbb8 <pdf_gen_completed_report+0x1670>)
 800da2e:	f7f3 fa89 	bl	8000f44 <__aeabi_fmul>
 800da32:	1c29      	adds	r1, r5, #0
 800da34:	1c04      	adds	r4, r0, #0
 800da36:	9808      	ldr	r0, [sp, #32]
 800da38:	f7f3 fbde 	bl	80011f8 <__aeabi_fsub>
 800da3c:	1c01      	adds	r1, r0, #0
 800da3e:	1c20      	adds	r0, r4, #0
 800da40:	f7f3 f8b2 	bl	8000ba8 <__aeabi_fdiv>
 800da44:	495d      	ldr	r1, [pc, #372]	@ (800dbbc <pdf_gen_completed_report+0x1674>)
 800da46:	f7f2 febd 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(tl1, g_temp_axis_min, temp_highest_scale_up,
 800da4a:	f7f3 fe4f 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800da4e:	2304      	movs	r3, #4
 800da50:	22ff      	movs	r2, #255	@ 0xff
 800da52:	9305      	str	r3, [sp, #20]
 800da54:	23fc      	movs	r3, #252	@ 0xfc
 800da56:	4d5a      	ldr	r5, [pc, #360]	@ (800dbc0 <pdf_gen_completed_report+0x1678>)
 800da58:	4e65      	ldr	r6, [pc, #404]	@ (800dbf0 <pdf_gen_completed_report+0x16a8>)
 800da5a:	059b      	lsls	r3, r3, #22
 800da5c:	0592      	lsls	r2, r2, #22
        y = (int)map_value(tl1, g_temp_axis_min, temp_highest_scale_up,
 800da5e:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800da60:	214b      	movs	r1, #75	@ 0x4b
 800da62:	9303      	str	r3, [sp, #12]
 800da64:	9201      	str	r2, [sp, #4]
 800da66:	4b59      	ldr	r3, [pc, #356]	@ (800dbcc <pdf_gen_completed_report+0x1684>)
 800da68:	0002      	movs	r2, r0
 800da6a:	9000      	str	r0, [sp, #0]
 800da6c:	9604      	str	r6, [sp, #16]
 800da6e:	0028      	movs	r0, r5
 800da70:	9602      	str	r6, [sp, #8]
 800da72:	9506      	str	r5, [sp, #24]
 800da74:	f00b fa76 	bl	8018f64 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", tl1);
 800da78:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800da7a:	f7f5 fe8d 	bl	8003798 <__aeabi_f2d>
 800da7e:	900c      	str	r0, [sp, #48]	@ 0x30
 800da80:	910d      	str	r1, [sp, #52]	@ 0x34
 800da82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800da84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da86:	4852      	ldr	r0, [pc, #328]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800da88:	ad1a      	add	r5, sp, #104	@ 0x68
 800da8a:	4952      	ldr	r1, [pc, #328]	@ (800dbd4 <pdf_gen_completed_report+0x168c>)
 800da8c:	1940      	adds	r0, r0, r5
 800da8e:	f00c fd45 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800da92:	21fc      	movs	r1, #252	@ 0xfc
 800da94:	0589      	lsls	r1, r1, #22
 800da96:	9102      	str	r1, [sp, #8]
 800da98:	2108      	movs	r1, #8
 800da9a:	484d      	ldr	r0, [pc, #308]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800da9c:	4b4e      	ldr	r3, [pc, #312]	@ (800dbd8 <pdf_gen_completed_report+0x1690>)
 800da9e:	1940      	adds	r0, r0, r5
 800daa0:	1ee2      	subs	r2, r4, #3
 800daa2:	9004      	str	r0, [sp, #16]
 800daa4:	9100      	str	r1, [sp, #0]
 800daa6:	9806      	ldr	r0, [sp, #24]
 800daa8:	312f      	adds	r1, #47	@ 0x2f
 800daaa:	9603      	str	r6, [sp, #12]
 800daac:	9601      	str	r6, [sp, #4]
 800daae:	f00b f9ef 	bl	8018e90 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TL1 draw y=%d (%.1f)\r\n", y, tl1);
 800dab2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dab4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dab6:	0021      	movs	r1, r4
 800dab8:	484e      	ldr	r0, [pc, #312]	@ (800dbf4 <pdf_gen_completed_report+0x16ac>)
 800daba:	f00c fc7f 	bl	801a3bc <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_RH2) && (rad_highest_scale_up > rh2)) {
 800dabe:	4b48      	ldr	r3, [pc, #288]	@ (800dbe0 <pdf_gen_completed_report+0x1698>)
 800dac0:	2280      	movs	r2, #128	@ 0x80
 800dac2:	6999      	ldr	r1, [r3, #24]
 800dac4:	23c0      	movs	r3, #192	@ 0xc0
 800dac6:	011b      	lsls	r3, r3, #4
 800dac8:	400b      	ands	r3, r1
 800daca:	0112      	lsls	r2, r2, #4
 800dacc:	4293      	cmp	r3, r2
 800dace:	d100      	bne.n	800dad2 <pdf_gen_completed_report+0x158a>
 800dad0:	e32b      	b.n	800e12a <pdf_gen_completed_report+0x1be2>
 800dad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dad4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d800      	bhi.n	800dadc <pdf_gen_completed_report+0x1594>
 800dada:	e326      	b.n	800e12a <pdf_gen_completed_report+0x1be2>
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800dadc:	0010      	movs	r0, r2
 800dade:	f7f3 fe75 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800dae2:	4935      	ldr	r1, [pc, #212]	@ (800dbb8 <pdf_gen_completed_report+0x1670>)
 800dae4:	f7f3 fa2e 	bl	8000f44 <__aeabi_fmul>
 800dae8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800daea:	f7f3 f85d 	bl	8000ba8 <__aeabi_fdiv>
 800daee:	4933      	ldr	r1, [pc, #204]	@ (800dbbc <pdf_gen_completed_report+0x1674>)
 800daf0:	f7f2 fe68 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800daf4:	f7f3 fdfa 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800daf8:	2304      	movs	r3, #4
 800dafa:	26fd      	movs	r6, #253	@ 0xfd
 800dafc:	9305      	str	r3, [sp, #20]
 800dafe:	22ff      	movs	r2, #255	@ 0xff
 800db00:	23fe      	movs	r3, #254	@ 0xfe
 800db02:	4d2f      	ldr	r5, [pc, #188]	@ (800dbc0 <pdf_gen_completed_report+0x1678>)
 800db04:	059b      	lsls	r3, r3, #22
 800db06:	05b6      	lsls	r6, r6, #22
 800db08:	0592      	lsls	r2, r2, #22
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800db0a:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800db0c:	214b      	movs	r1, #75	@ 0x4b
 800db0e:	9304      	str	r3, [sp, #16]
 800db10:	9201      	str	r2, [sp, #4]
 800db12:	4b2e      	ldr	r3, [pc, #184]	@ (800dbcc <pdf_gen_completed_report+0x1684>)
 800db14:	0002      	movs	r2, r0
 800db16:	9000      	str	r0, [sp, #0]
 800db18:	9603      	str	r6, [sp, #12]
 800db1a:	0028      	movs	r0, r5
 800db1c:	9702      	str	r7, [sp, #8]
 800db1e:	f00b fa21 	bl	8018f64 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%u", rh2);
 800db22:	482b      	ldr	r0, [pc, #172]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800db24:	ab1a      	add	r3, sp, #104	@ 0x68
 800db26:	4934      	ldr	r1, [pc, #208]	@ (800dbf8 <pdf_gen_completed_report+0x16b0>)
 800db28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db2a:	18c0      	adds	r0, r0, r3
 800db2c:	f00c fcf6 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3,
 800db30:	4827      	ldr	r0, [pc, #156]	@ (800dbd0 <pdf_gen_completed_report+0x1688>)
 800db32:	a91a      	add	r1, sp, #104	@ 0x68
 800db34:	1840      	adds	r0, r0, r1
 800db36:	21fe      	movs	r1, #254	@ 0xfe
 800db38:	0589      	lsls	r1, r1, #22
 800db3a:	9103      	str	r1, [sp, #12]
 800db3c:	2108      	movs	r1, #8
 800db3e:	1ee2      	subs	r2, r4, #3
 800db40:	9004      	str	r0, [sp, #16]
 800db42:	9100      	str	r1, [sp, #0]
 800db44:	0028      	movs	r0, r5
 800db46:	492d      	ldr	r1, [pc, #180]	@ (800dbfc <pdf_gen_completed_report+0x16b4>)
 800db48:	4b23      	ldr	r3, [pc, #140]	@ (800dbd8 <pdf_gen_completed_report+0x1690>)
 800db4a:	9602      	str	r6, [sp, #8]
 800db4c:	9701      	str	r7, [sp, #4]
 800db4e:	f00b f99f 	bl	8018e90 <tpdf_draw_colored_text>
        printf("[PDF][Chart] RH2 draw y=%d (%u)\r\n", y, rh2);
 800db52:	0021      	movs	r1, r4
 800db54:	482a      	ldr	r0, [pc, #168]	@ (800dc00 <pdf_gen_completed_report+0x16b8>)
 800db56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db58:	f00c fc30 	bl	801a3bc <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_RH1) && (rad_highest_scale_up > rh1)) {
 800db5c:	4b20      	ldr	r3, [pc, #128]	@ (800dbe0 <pdf_gen_completed_report+0x1698>)
 800db5e:	2280      	movs	r2, #128	@ 0x80
 800db60:	6999      	ldr	r1, [r3, #24]
 800db62:	23c0      	movs	r3, #192	@ 0xc0
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	400b      	ands	r3, r1
 800db68:	0092      	lsls	r2, r2, #2
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d100      	bne.n	800db70 <pdf_gen_completed_report+0x1628>
 800db6e:	e2e2      	b.n	800e136 <pdf_gen_completed_report+0x1bee>
 800db70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db72:	9a07      	ldr	r2, [sp, #28]
 800db74:	4293      	cmp	r3, r2
 800db76:	d800      	bhi.n	800db7a <pdf_gen_completed_report+0x1632>
 800db78:	e2dd      	b.n	800e136 <pdf_gen_completed_report+0x1bee>
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800db7a:	0010      	movs	r0, r2
 800db7c:	f7f3 fe26 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800db80:	490d      	ldr	r1, [pc, #52]	@ (800dbb8 <pdf_gen_completed_report+0x1670>)
 800db82:	f7f3 f9df 	bl	8000f44 <__aeabi_fmul>
 800db86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db88:	f7f3 f80e 	bl	8000ba8 <__aeabi_fdiv>
 800db8c:	490b      	ldr	r1, [pc, #44]	@ (800dbbc <pdf_gen_completed_report+0x1674>)
 800db8e:	f7f2 fe19 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800db92:	f7f3 fdab 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800db96:	2304      	movs	r3, #4
 800db98:	22fc      	movs	r2, #252	@ 0xfc
 800db9a:	9305      	str	r3, [sp, #20]
 800db9c:	23fe      	movs	r3, #254	@ 0xfe
 800db9e:	4d08      	ldr	r5, [pc, #32]	@ (800dbc0 <pdf_gen_completed_report+0x1678>)
 800dba0:	4e18      	ldr	r6, [pc, #96]	@ (800dc04 <pdf_gen_completed_report+0x16bc>)
 800dba2:	059b      	lsls	r3, r3, #22
 800dba4:	0592      	lsls	r2, r2, #22
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800dba6:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800dba8:	214b      	movs	r1, #75	@ 0x4b
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	9202      	str	r2, [sp, #8]
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	0002      	movs	r2, r0
 800dbb2:	e029      	b.n	800dc08 <pdf_gen_completed_report+0x16c0>
 800dbb4:	20000200 	.word	0x20000200
 800dbb8:	437a0000 	.word	0x437a0000
 800dbbc:	42b00000 	.word	0x42b00000
 800dbc0:	20003090 	.word	0x20003090
 800dbc4:	3f666666 	.word	0x3f666666
 800dbc8:	3ecccccd 	.word	0x3ecccccd
 800dbcc:	0000020d 	.word	0x0000020d
 800dbd0:	000008e8 	.word	0x000008e8
 800dbd4:	0801ff2e 	.word	0x0801ff2e
 800dbd8:	0801f7de 	.word	0x0801f7de
 800dbdc:	0801ff4c 	.word	0x0801ff4c
 800dbe0:	20000b50 	.word	0x20000b50
 800dbe4:	0801ff93 	.word	0x0801ff93
 800dbe8:	3f19999a 	.word	0x3f19999a
 800dbec:	0801ffda 	.word	0x0801ffda
 800dbf0:	3dcccccd 	.word	0x3dcccccd
 800dbf4:	08020021 	.word	0x08020021
 800dbf8:	0801ff3c 	.word	0x0801ff3c
 800dbfc:	00000212 	.word	0x00000212
 800dc00:	08020068 	.word	0x08020068
 800dc04:	3f4ccccd 	.word	0x3f4ccccd
 800dc08:	4bfa      	ldr	r3, [pc, #1000]	@ (800dff4 <pdf_gen_completed_report+0x1aac>)
 800dc0a:	9000      	str	r0, [sp, #0]
 800dc0c:	9603      	str	r6, [sp, #12]
 800dc0e:	0028      	movs	r0, r5
 800dc10:	f00b f9a8 	bl	8018f64 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%u", rh1);
 800dc14:	48f8      	ldr	r0, [pc, #992]	@ (800dff8 <pdf_gen_completed_report+0x1ab0>)
 800dc16:	ab1a      	add	r3, sp, #104	@ 0x68
 800dc18:	49f8      	ldr	r1, [pc, #992]	@ (800dffc <pdf_gen_completed_report+0x1ab4>)
 800dc1a:	9a07      	ldr	r2, [sp, #28]
 800dc1c:	18c0      	adds	r0, r0, r3
 800dc1e:	f00c fc7d 	bl	801a51c <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3,
 800dc22:	48f5      	ldr	r0, [pc, #980]	@ (800dff8 <pdf_gen_completed_report+0x1ab0>)
 800dc24:	a91a      	add	r1, sp, #104	@ 0x68
 800dc26:	1840      	adds	r0, r0, r1
 800dc28:	21fe      	movs	r1, #254	@ 0xfe
 800dc2a:	0589      	lsls	r1, r1, #22
 800dc2c:	9103      	str	r1, [sp, #12]
 800dc2e:	21fc      	movs	r1, #252	@ 0xfc
 800dc30:	0589      	lsls	r1, r1, #22
 800dc32:	9101      	str	r1, [sp, #4]
 800dc34:	2108      	movs	r1, #8
 800dc36:	1ee2      	subs	r2, r4, #3
 800dc38:	9004      	str	r0, [sp, #16]
 800dc3a:	9100      	str	r1, [sp, #0]
 800dc3c:	0028      	movs	r0, r5
 800dc3e:	49f0      	ldr	r1, [pc, #960]	@ (800e000 <pdf_gen_completed_report+0x1ab8>)
 800dc40:	4bf0      	ldr	r3, [pc, #960]	@ (800e004 <pdf_gen_completed_report+0x1abc>)
 800dc42:	9602      	str	r6, [sp, #8]
 800dc44:	f00b f924 	bl	8018e90 <tpdf_draw_colored_text>
        printf("[PDF][Chart] RH1 draw y=%d (%u)\r\n", y, rh1);
 800dc48:	0021      	movs	r1, r4
 800dc4a:	48ef      	ldr	r0, [pc, #956]	@ (800e008 <pdf_gen_completed_report+0x1ac0>)
 800dc4c:	9a07      	ldr	r2, [sp, #28]
 800dc4e:	f00c fbb5 	bl	801a3bc <iprintf>
    for (int i = 0; i < record_nums; i++) {
 800dc52:	2300      	movs	r3, #0
    uint16_t chunk_start_index = 0;
 800dc54:	001e      	movs	r6, r3
    uint16_t buffer_count =0;
 800dc56:	001c      	movs	r4, r3
    for (int i = 0; i < record_nums; i++) {
 800dc58:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc5a:	2254      	movs	r2, #84	@ 0x54
 800dc5c:	466b      	mov	r3, sp
 800dc5e:	189b      	adds	r3, r3, r2
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	9307      	str	r3, [sp, #28]
 800dc64:	9a07      	ldr	r2, [sp, #28]
 800dc66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	da00      	bge.n	800dc6e <pdf_gen_completed_report+0x1726>
 800dc6c:	e269      	b.n	800e142 <pdf_gen_completed_report+0x1bfa>
    if (buffer_count > 0) {
 800dc6e:	2c00      	cmp	r4, #0
 800dc70:	d020      	beq.n	800dcb4 <pdf_gen_completed_report+0x176c>
        pdf_chart_plot_data(file_p, *y_pos, tmp_temper, chunk_start_index, buffer_count, record_nums, 1.0f, 0.0f, 0.0f, g_temp_axis_min , temp_highest_scale_up);
 800dc72:	25fe      	movs	r5, #254	@ 0xfe
 800dc74:	20b3      	movs	r0, #179	@ 0xb3
 800dc76:	9b08      	ldr	r3, [sp, #32]
 800dc78:	05ad      	lsls	r5, r5, #22
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	4be3      	ldr	r3, [pc, #908]	@ (800e00c <pdf_gen_completed_report+0x1ac4>)
 800dc7e:	a974      	add	r1, sp, #464	@ 0x1d0
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	0040      	lsls	r0, r0, #1
 800dc84:	9303      	str	r3, [sp, #12]
 800dc86:	9200      	str	r2, [sp, #0]
 800dc88:	0023      	movs	r3, r4
 800dc8a:	0032      	movs	r2, r6
 800dc8c:	9702      	str	r7, [sp, #8]
 800dc8e:	9501      	str	r5, [sp, #4]
 800dc90:	f7fe f9da 	bl	800c048 <pdf_chart_plot_data.constprop.0>
        pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800dc94:	49d8      	ldr	r1, [pc, #864]	@ (800dff8 <pdf_gen_completed_report+0x1ab0>)
 800dc96:	a81a      	add	r0, sp, #104	@ 0x68
 800dc98:	1809      	adds	r1, r1, r0
 800dc9a:	20b3      	movs	r0, #179	@ 0xb3
 800dc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc9e:	0032      	movs	r2, r6
 800dca0:	9304      	str	r3, [sp, #16]
 800dca2:	9b07      	ldr	r3, [sp, #28]
 800dca4:	9703      	str	r7, [sp, #12]
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	9502      	str	r5, [sp, #8]
 800dcaa:	0023      	movs	r3, r4
 800dcac:	9701      	str	r7, [sp, #4]
 800dcae:	0040      	lsls	r0, r0, #1
 800dcb0:	f7fe f9ca 	bl	800c048 <pdf_chart_plot_data.constprop.0>
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800dcb4:	2506      	movs	r5, #6
 800dcb6:	22b1      	movs	r2, #177	@ 0xb1
 800dcb8:	2196      	movs	r1, #150	@ 0x96
    const UINT total_pages = current_page +1;
 800dcba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800dcbc:	4cd1      	ldr	r4, [pc, #836]	@ (800e004 <pdf_gen_completed_report+0x1abc>)
    const UINT total_pages = current_page +1;
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	9308      	str	r3, [sp, #32]
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800dcc2:	4bd3      	ldr	r3, [pc, #844]	@ (800e010 <pdf_gen_completed_report+0x1ac8>)
 800dcc4:	9500      	str	r5, [sp, #0]
 800dcc6:	9307      	str	r3, [sp, #28]
 800dcc8:	4bd2      	ldr	r3, [pc, #840]	@ (800e014 <pdf_gen_completed_report+0x1acc>)
 800dcca:	0052      	lsls	r2, r2, #1
 800dccc:	9304      	str	r3, [sp, #16]
 800dcce:	0049      	lsls	r1, r1, #1
 800dcd0:	0023      	movs	r3, r4
 800dcd2:	9807      	ldr	r0, [sp, #28]
 800dcd4:	9703      	str	r7, [sp, #12]
 800dcd6:	9702      	str	r7, [sp, #8]
 800dcd8:	9701      	str	r7, [sp, #4]
 800dcda:	f00b f8d9 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, (CHART_X_START + CHART_WIDTH /2 + 40),  y + 18, (CHART_X_START + CHART_WIDTH /2 + 40 + 15), y + 18, 1.0, 1.0, 0, 0);
 800dcde:	23fe      	movs	r3, #254	@ 0xfe
 800dce0:	26b2      	movs	r6, #178	@ 0xb2
 800dce2:	059b      	lsls	r3, r3, #22
 800dce4:	9302      	str	r3, [sp, #8]
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	21aa      	movs	r1, #170	@ 0xaa
 800dcea:	2364      	movs	r3, #100	@ 0x64
 800dcec:	0076      	lsls	r6, r6, #1
 800dcee:	0032      	movs	r2, r6
 800dcf0:	9600      	str	r6, [sp, #0]
 800dcf2:	33ff      	adds	r3, #255	@ 0xff
 800dcf4:	0049      	lsls	r1, r1, #1
 800dcf6:	9807      	ldr	r0, [sp, #28]
 800dcf8:	9704      	str	r7, [sp, #16]
 800dcfa:	9703      	str	r7, [sp, #12]
 800dcfc:	f00b f8fe 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2), y + 8, "F2", 6, 0, 0, 0, "Rad");
 800dd00:	22ad      	movs	r2, #173	@ 0xad
 800dd02:	2196      	movs	r1, #150	@ 0x96
 800dd04:	4bc4      	ldr	r3, [pc, #784]	@ (800e018 <pdf_gen_completed_report+0x1ad0>)
 800dd06:	9500      	str	r5, [sp, #0]
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	0052      	lsls	r2, r2, #1
 800dd0c:	0023      	movs	r3, r4
 800dd0e:	0049      	lsls	r1, r1, #1
 800dd10:	9807      	ldr	r0, [sp, #28]
 800dd12:	9703      	str	r7, [sp, #12]
 800dd14:	9702      	str	r7, [sp, #8]
 800dd16:	9701      	str	r7, [sp, #4]
 800dd18:	f00b f8ba 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, (CHART_X_START + CHART_WIDTH /2 + 40),  y + 10, (CHART_X_START + CHART_WIDTH /2 + 40 + 15), y + 10, 1.0, 0, 0, 1.0);
 800dd1c:	23fe      	movs	r3, #254	@ 0xfe
 800dd1e:	22ae      	movs	r2, #174	@ 0xae
 800dd20:	059b      	lsls	r3, r3, #22
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	9301      	str	r3, [sp, #4]
 800dd26:	21aa      	movs	r1, #170	@ 0xaa
 800dd28:	2364      	movs	r3, #100	@ 0x64
 800dd2a:	0052      	lsls	r2, r2, #1
 800dd2c:	9200      	str	r2, [sp, #0]
 800dd2e:	33ff      	adds	r3, #255	@ 0xff
 800dd30:	0049      	lsls	r1, r1, #1
 800dd32:	9807      	ldr	r0, [sp, #28]
 800dd34:	9703      	str	r7, [sp, #12]
 800dd36:	9702      	str	r7, [sp, #8]
 800dd38:	f00b f8e0 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "TH2");
 800dd3c:	22b1      	movs	r2, #177	@ 0xb1
 800dd3e:	2178      	movs	r1, #120	@ 0x78
 800dd40:	4bb6      	ldr	r3, [pc, #728]	@ (800e01c <pdf_gen_completed_report+0x1ad4>)
 800dd42:	9500      	str	r5, [sp, #0]
 800dd44:	9304      	str	r3, [sp, #16]
 800dd46:	0052      	lsls	r2, r2, #1
 800dd48:	0023      	movs	r3, r4
 800dd4a:	31ff      	adds	r1, #255	@ 0xff
 800dd4c:	9807      	ldr	r0, [sp, #28]
 800dd4e:	9703      	str	r7, [sp, #12]
 800dd50:	9702      	str	r7, [sp, #8]
 800dd52:	9701      	str	r7, [sp, #4]
 800dd54:	f00b f89c 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.9, 0.4, 0.0);
 800dd58:	4bb1      	ldr	r3, [pc, #708]	@ (800e020 <pdf_gen_completed_report+0x1ad8>)
 800dd5a:	49b2      	ldr	r1, [pc, #712]	@ (800e024 <pdf_gen_completed_report+0x1adc>)
 800dd5c:	9303      	str	r3, [sp, #12]
 800dd5e:	23fe      	movs	r3, #254	@ 0xfe
 800dd60:	059b      	lsls	r3, r3, #22
 800dd62:	9102      	str	r1, [sp, #8]
 800dd64:	9301      	str	r3, [sp, #4]
 800dd66:	21c3      	movs	r1, #195	@ 0xc3
 800dd68:	2396      	movs	r3, #150	@ 0x96
 800dd6a:	0032      	movs	r2, r6
 800dd6c:	9600      	str	r6, [sp, #0]
 800dd6e:	33ff      	adds	r3, #255	@ 0xff
 800dd70:	0049      	lsls	r1, r1, #1
 800dd72:	9807      	ldr	r0, [sp, #28]
 800dd74:	9704      	str	r7, [sp, #16]
 800dd76:	f00b f8c1 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "TH1");
 800dd7a:	22ad      	movs	r2, #173	@ 0xad
 800dd7c:	2178      	movs	r1, #120	@ 0x78
 800dd7e:	4baa      	ldr	r3, [pc, #680]	@ (800e028 <pdf_gen_completed_report+0x1ae0>)
 800dd80:	9500      	str	r5, [sp, #0]
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	0052      	lsls	r2, r2, #1
 800dd86:	0023      	movs	r3, r4
 800dd88:	31ff      	adds	r1, #255	@ 0xff
 800dd8a:	9807      	ldr	r0, [sp, #28]
 800dd8c:	9703      	str	r7, [sp, #12]
 800dd8e:	9702      	str	r7, [sp, #8]
 800dd90:	9701      	str	r7, [sp, #4]
 800dd92:	f00b f87d 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 1.0, 0.75, 0.5);
 800dd96:	21fc      	movs	r1, #252	@ 0xfc
 800dd98:	23fe      	movs	r3, #254	@ 0xfe
 800dd9a:	0589      	lsls	r1, r1, #22
 800dd9c:	059b      	lsls	r3, r3, #22
 800dd9e:	20fd      	movs	r0, #253	@ 0xfd
 800dda0:	22ae      	movs	r2, #174	@ 0xae
 800dda2:	9104      	str	r1, [sp, #16]
 800dda4:	9302      	str	r3, [sp, #8]
 800dda6:	9301      	str	r3, [sp, #4]
 800dda8:	21c3      	movs	r1, #195	@ 0xc3
 800ddaa:	2396      	movs	r3, #150	@ 0x96
 800ddac:	0052      	lsls	r2, r2, #1
 800ddae:	0580      	lsls	r0, r0, #22
 800ddb0:	9003      	str	r0, [sp, #12]
 800ddb2:	9200      	str	r2, [sp, #0]
 800ddb4:	33ff      	adds	r3, #255	@ 0xff
 800ddb6:	0049      	lsls	r1, r1, #1
 800ddb8:	9807      	ldr	r0, [sp, #28]
 800ddba:	f00b f89f 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "TL2");
 800ddbe:	22b1      	movs	r2, #177	@ 0xb1
 800ddc0:	21aa      	movs	r1, #170	@ 0xaa
 800ddc2:	4b9a      	ldr	r3, [pc, #616]	@ (800e02c <pdf_gen_completed_report+0x1ae4>)
 800ddc4:	9500      	str	r5, [sp, #0]
 800ddc6:	9304      	str	r3, [sp, #16]
 800ddc8:	0052      	lsls	r2, r2, #1
 800ddca:	0023      	movs	r3, r4
 800ddcc:	31ff      	adds	r1, #255	@ 0xff
 800ddce:	9807      	ldr	r0, [sp, #28]
 800ddd0:	9703      	str	r7, [sp, #12]
 800ddd2:	9702      	str	r7, [sp, #8]
 800ddd4:	9701      	str	r7, [sp, #4]
 800ddd6:	f00b f85b 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.6,0.9,0.6);
 800ddda:	4b95      	ldr	r3, [pc, #596]	@ (800e030 <pdf_gen_completed_report+0x1ae8>)
 800dddc:	21dc      	movs	r1, #220	@ 0xdc
 800ddde:	9304      	str	r3, [sp, #16]
 800dde0:	9302      	str	r3, [sp, #8]
 800dde2:	23fe      	movs	r3, #254	@ 0xfe
 800dde4:	059b      	lsls	r3, r3, #22
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	23c8      	movs	r3, #200	@ 0xc8
 800ddea:	488e      	ldr	r0, [pc, #568]	@ (800e024 <pdf_gen_completed_report+0x1adc>)
 800ddec:	0032      	movs	r2, r6
 800ddee:	9003      	str	r0, [sp, #12]
 800ddf0:	9600      	str	r6, [sp, #0]
 800ddf2:	33ff      	adds	r3, #255	@ 0xff
 800ddf4:	0049      	lsls	r1, r1, #1
 800ddf6:	9807      	ldr	r0, [sp, #28]
 800ddf8:	f00b f880 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "TL1");
 800ddfc:	22ad      	movs	r2, #173	@ 0xad
 800ddfe:	21aa      	movs	r1, #170	@ 0xaa
 800de00:	4b8c      	ldr	r3, [pc, #560]	@ (800e034 <pdf_gen_completed_report+0x1aec>)
 800de02:	9500      	str	r5, [sp, #0]
 800de04:	9304      	str	r3, [sp, #16]
 800de06:	0052      	lsls	r2, r2, #1
 800de08:	0023      	movs	r3, r4
 800de0a:	31ff      	adds	r1, #255	@ 0xff
 800de0c:	9807      	ldr	r0, [sp, #28]
 800de0e:	9703      	str	r7, [sp, #12]
 800de10:	9702      	str	r7, [sp, #8]
 800de12:	9701      	str	r7, [sp, #4]
 800de14:	f00b f83c 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 0.1,0.5,0.1);
 800de18:	4b87      	ldr	r3, [pc, #540]	@ (800e038 <pdf_gen_completed_report+0x1af0>)
 800de1a:	21fc      	movs	r1, #252	@ 0xfc
 800de1c:	9304      	str	r3, [sp, #16]
 800de1e:	9302      	str	r3, [sp, #8]
 800de20:	23fe      	movs	r3, #254	@ 0xfe
 800de22:	0589      	lsls	r1, r1, #22
 800de24:	059b      	lsls	r3, r3, #22
 800de26:	22ae      	movs	r2, #174	@ 0xae
 800de28:	9103      	str	r1, [sp, #12]
 800de2a:	9301      	str	r3, [sp, #4]
 800de2c:	21dc      	movs	r1, #220	@ 0xdc
 800de2e:	23c8      	movs	r3, #200	@ 0xc8
 800de30:	0052      	lsls	r2, r2, #1
 800de32:	9200      	str	r2, [sp, #0]
 800de34:	33ff      	adds	r3, #255	@ 0xff
 800de36:	0049      	lsls	r1, r1, #1
 800de38:	9807      	ldr	r0, [sp, #28]
 800de3a:	f00b f85f 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "RH2");
 800de3e:	22b1      	movs	r2, #177	@ 0xb1
 800de40:	21dc      	movs	r1, #220	@ 0xdc
 800de42:	4b7e      	ldr	r3, [pc, #504]	@ (800e03c <pdf_gen_completed_report+0x1af4>)
 800de44:	9500      	str	r5, [sp, #0]
 800de46:	9304      	str	r3, [sp, #16]
 800de48:	0052      	lsls	r2, r2, #1
 800de4a:	0023      	movs	r3, r4
 800de4c:	31ff      	adds	r1, #255	@ 0xff
 800de4e:	9807      	ldr	r0, [sp, #28]
 800de50:	9703      	str	r7, [sp, #12]
 800de52:	9702      	str	r7, [sp, #8]
 800de54:	9701      	str	r7, [sp, #4]
 800de56:	f00b f81b 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.0,0.75,1.0);
 800de5a:	23fe      	movs	r3, #254	@ 0xfe
 800de5c:	20fd      	movs	r0, #253	@ 0xfd
 800de5e:	059b      	lsls	r3, r3, #22
 800de60:	9304      	str	r3, [sp, #16]
 800de62:	9301      	str	r3, [sp, #4]
 800de64:	21f5      	movs	r1, #245	@ 0xf5
 800de66:	23fa      	movs	r3, #250	@ 0xfa
 800de68:	0580      	lsls	r0, r0, #22
 800de6a:	0032      	movs	r2, r6
 800de6c:	9003      	str	r0, [sp, #12]
 800de6e:	9600      	str	r6, [sp, #0]
 800de70:	33ff      	adds	r3, #255	@ 0xff
 800de72:	0049      	lsls	r1, r1, #1
 800de74:	9807      	ldr	r0, [sp, #28]
 800de76:	9702      	str	r7, [sp, #8]
 800de78:	f00b f840 	bl	8018efc <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "RH1");
 800de7c:	22ad      	movs	r2, #173	@ 0xad
 800de7e:	21dc      	movs	r1, #220	@ 0xdc
 800de80:	4b6f      	ldr	r3, [pc, #444]	@ (800e040 <pdf_gen_completed_report+0x1af8>)
 800de82:	9500      	str	r5, [sp, #0]
 800de84:	9304      	str	r3, [sp, #16]
 800de86:	0052      	lsls	r2, r2, #1
 800de88:	0023      	movs	r3, r4
 800de8a:	31ff      	adds	r1, #255	@ 0xff
 800de8c:	9807      	ldr	r0, [sp, #28]
 800de8e:	9703      	str	r7, [sp, #12]
 800de90:	9702      	str	r7, [sp, #8]
 800de92:	9701      	str	r7, [sp, #4]
 800de94:	f00a fffc 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 0.5,0.8,1.0);
 800de98:	21fc      	movs	r1, #252	@ 0xfc
 800de9a:	4b6a      	ldr	r3, [pc, #424]	@ (800e044 <pdf_gen_completed_report+0x1afc>)
 800de9c:	0589      	lsls	r1, r1, #22
 800de9e:	26fe      	movs	r6, #254	@ 0xfe
 800dea0:	22ae      	movs	r2, #174	@ 0xae
 800dea2:	9303      	str	r3, [sp, #12]
 800dea4:	9102      	str	r1, [sp, #8]
 800dea6:	23fa      	movs	r3, #250	@ 0xfa
 800dea8:	21f5      	movs	r1, #245	@ 0xf5
 800deaa:	05b6      	lsls	r6, r6, #22
 800deac:	0052      	lsls	r2, r2, #1
 800deae:	9604      	str	r6, [sp, #16]
 800deb0:	9601      	str	r6, [sp, #4]
 800deb2:	9200      	str	r2, [sp, #0]
 800deb4:	33ff      	adds	r3, #255	@ 0xff
 800deb6:	0049      	lsls	r1, r1, #1
 800deb8:	9807      	ldr	r0, [sp, #28]
 800deba:	f00b f81f 	bl	8018efc <tpdf_draw_line>
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800debe:	23ff      	movs	r3, #255	@ 0xff
 800dec0:	352c      	adds	r5, #44	@ 0x2c
 800dec2:	059b      	lsls	r3, r3, #22
 800dec4:	002a      	movs	r2, r5
 800dec6:	0029      	movs	r1, r5
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	9500      	str	r5, [sp, #0]
 800decc:	4b5e      	ldr	r3, [pc, #376]	@ (800e048 <pdf_gen_completed_report+0x1b00>)
 800dece:	9807      	ldr	r0, [sp, #28]
 800ded0:	9704      	str	r7, [sp, #16]
 800ded2:	9703      	str	r7, [sp, #12]
 800ded4:	9702      	str	r7, [sp, #8]
 800ded6:	f00b f811 	bl	8018efc <tpdf_draw_line>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800deda:	9603      	str	r6, [sp, #12]
 800dedc:	2609      	movs	r6, #9
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800dede:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800dee0:	4c5a      	ldr	r4, [pc, #360]	@ (800e04c <pdf_gen_completed_report+0x1b04>)
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800dee2:	181b      	adds	r3, r3, r0
 800dee4:	9309      	str	r3, [sp, #36]	@ 0x24
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800dee6:	4b5a      	ldr	r3, [pc, #360]	@ (800e050 <pdf_gen_completed_report+0x1b08>)
 800dee8:	0029      	movs	r1, r5
 800deea:	2228      	movs	r2, #40	@ 0x28
 800deec:	9304      	str	r3, [sp, #16]
 800deee:	9600      	str	r6, [sp, #0]
 800def0:	0023      	movs	r3, r4
 800def2:	9807      	ldr	r0, [sp, #28]
 800def4:	9702      	str	r7, [sp, #8]
 800def6:	9701      	str	r7, [sp, #4]
 800def8:	f00a ffca 	bl	8018e90 <tpdf_draw_colored_text>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800defc:	4b55      	ldr	r3, [pc, #340]	@ (800e054 <pdf_gen_completed_report+0x1b0c>)
 800defe:	21fa      	movs	r1, #250	@ 0xfa
 800df00:	9304      	str	r3, [sp, #16]
 800df02:	23fe      	movs	r3, #254	@ 0xfe
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800df04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800df06:	059b      	lsls	r3, r3, #22
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800df08:	1815      	adds	r5, r2, r0
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800df0a:	9303      	str	r3, [sp, #12]
 800df0c:	2228      	movs	r2, #40	@ 0x28
 800df0e:	0023      	movs	r3, r4
 800df10:	9600      	str	r6, [sp, #0]
 800df12:	31ff      	adds	r1, #255	@ 0xff
 800df14:	9807      	ldr	r0, [sp, #28]
 800df16:	9702      	str	r7, [sp, #8]
 800df18:	9701      	str	r7, [sp, #4]
 800df1a:	f00a ffb9 	bl	8018e90 <tpdf_draw_colored_text>
    tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,stream_len,&pdf_monitor);
 800df1e:	4c4e      	ldr	r4, [pc, #312]	@ (800e058 <pdf_gen_completed_report+0x1b10>)
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800df20:	182a      	adds	r2, r5, r0
    tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,stream_len,&pdf_monitor);
 800df22:	0023      	movs	r3, r4
 800df24:	210d      	movs	r1, #13
 800df26:	9807      	ldr	r0, [sp, #28]
 800df28:	f00b f894 	bl	8019054 <tpdf_end_new_stream_obj>
    sprintf(content_buffer, "<<\n/Type /Pages\n/Count %d\n/Kids [ %d 0 R", total_pages +1 ,TPDF_OBJ_NUM_PAGE_1ST);
 800df2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df2e:	4832      	ldr	r0, [pc, #200]	@ (800dff8 <pdf_gen_completed_report+0x1ab0>)
 800df30:	ad1a      	add	r5, sp, #104	@ 0x68
 800df32:	1c9a      	adds	r2, r3, #2
 800df34:	1940      	adds	r0, r0, r5
 800df36:	230a      	movs	r3, #10
 800df38:	4948      	ldr	r1, [pc, #288]	@ (800e05c <pdf_gen_completed_report+0x1b14>)
 800df3a:	f00c faef 	bl	801a51c <siprintf>
    for (int i = 0; i < total_pages; i++) {
 800df3e:	2500      	movs	r5, #0
        sprintf(temp_ref, " %d 0 R", page_obj);
 800df40:	3601      	adds	r6, #1
 800df42:	0032      	movs	r2, r6
 800df44:	436a      	muls	r2, r5
 800df46:	4946      	ldr	r1, [pc, #280]	@ (800e060 <pdf_gen_completed_report+0x1b18>)
 800df48:	3214      	adds	r2, #20
 800df4a:	a834      	add	r0, sp, #208	@ 0xd0
 800df4c:	f00c fae6 	bl	801a51c <siprintf>
        strcat(content_buffer, temp_ref);
 800df50:	4b29      	ldr	r3, [pc, #164]	@ (800dff8 <pdf_gen_completed_report+0x1ab0>)
 800df52:	aa1a      	add	r2, sp, #104	@ 0x68
 800df54:	189b      	adds	r3, r3, r2
 800df56:	0018      	movs	r0, r3
 800df58:	a934      	add	r1, sp, #208	@ 0xd0
 800df5a:	f00c fc03 	bl	801a764 <strcat>
    for (int i = 0; i < total_pages; i++) {
 800df5e:	9b08      	ldr	r3, [sp, #32]
 800df60:	3501      	adds	r5, #1
 800df62:	42ab      	cmp	r3, r5
 800df64:	d8ed      	bhi.n	800df42 <pdf_gen_completed_report+0x19fa>
    sprintf(temp_ref,"]\n/MediaBox [0 0 %d %d]\n>>",PDF_PAGE_WIDTH_A4,PDF_PAGE_HEIGHT_A4);
 800df66:	493f      	ldr	r1, [pc, #252]	@ (800e064 <pdf_gen_completed_report+0x1b1c>)
 800df68:	4b3f      	ldr	r3, [pc, #252]	@ (800e068 <pdf_gen_completed_report+0x1b20>)
 800df6a:	4a40      	ldr	r2, [pc, #256]	@ (800e06c <pdf_gen_completed_report+0x1b24>)
 800df6c:	a834      	add	r0, sp, #208	@ 0xd0
 800df6e:	f00c fad5 	bl	801a51c <siprintf>
    strcat(content_buffer, temp_ref);
 800df72:	4b21      	ldr	r3, [pc, #132]	@ (800dff8 <pdf_gen_completed_report+0x1ab0>)
 800df74:	aa1a      	add	r2, sp, #104	@ 0x68
 800df76:	189b      	adds	r3, r3, r2
 800df78:	0018      	movs	r0, r3
 800df7a:	a934      	add	r1, sp, #208	@ 0xd0
 800df7c:	f00c fbf2 	bl	801a764 <strcat>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_PAGES_KID, content_buffer, &pdf_monitor);
 800df80:	4a1d      	ldr	r2, [pc, #116]	@ (800dff8 <pdf_gen_completed_report+0x1ab0>)
 800df82:	a91a      	add	r1, sp, #104	@ 0x68
 800df84:	1852      	adds	r2, r2, r1
 800df86:	0023      	movs	r3, r4
 800df88:	2103      	movs	r1, #3
 800df8a:	9807      	ldr	r0, [sp, #28]
 800df8c:	f00b f820 	bl	8018fd0 <tpdf_add_new_obj>
    ULONG xref_offset = f_size(&pdf_file);
 800df90:	9b07      	ldr	r3, [sp, #28]
    sprintf(work_buffer, "0 %u\n", (unsigned)(pdf_monitor.num_objs + 1));
 800df92:	4d37      	ldr	r5, [pc, #220]	@ (800e070 <pdf_gen_completed_report+0x1b28>)
    fatfs_write_string(&pdf_file, "xref\n");
 800df94:	0019      	movs	r1, r3
 800df96:	4837      	ldr	r0, [pc, #220]	@ (800e074 <pdf_gen_completed_report+0x1b2c>)
    ULONG xref_offset = f_size(&pdf_file);
 800df98:	68df      	ldr	r7, [r3, #12]
    fatfs_write_string(&pdf_file, "xref\n");
 800df9a:	f007 fead 	bl	8015cf8 <f_puts>
    sprintf(work_buffer, "0 %u\n", (unsigned)(pdf_monitor.num_objs + 1));
 800df9e:	5962      	ldr	r2, [r4, r5]
 800dfa0:	4935      	ldr	r1, [pc, #212]	@ (800e078 <pdf_gen_completed_report+0x1b30>)
 800dfa2:	3201      	adds	r2, #1
 800dfa4:	a874      	add	r0, sp, #464	@ 0x1d0
 800dfa6:	f00c fab9 	bl	801a51c <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800dfaa:	9907      	ldr	r1, [sp, #28]
 800dfac:	a874      	add	r0, sp, #464	@ 0x1d0
 800dfae:	f007 fea3 	bl	8015cf8 <f_puts>
    fatfs_write_string(&pdf_file, "0000000000 65535 f \n");
 800dfb2:	4832      	ldr	r0, [pc, #200]	@ (800e07c <pdf_gen_completed_report+0x1b34>)
 800dfb4:	9907      	ldr	r1, [sp, #28]
 800dfb6:	f007 fe9f 	bl	8015cf8 <f_puts>
    for (unsigned i = 0; i < (unsigned)pdf_monitor.num_objs; i++) {
 800dfba:	2600      	movs	r6, #0
 800dfbc:	5963      	ldr	r3, [r4, r5]
 800dfbe:	429e      	cmp	r6, r3
 800dfc0:	d200      	bcs.n	800dfc4 <pdf_gen_completed_report+0x1a7c>
 800dfc2:	e1a6      	b.n	800e312 <pdf_gen_completed_report+0x1dca>
    fatfs_write_string(&pdf_file, "trailer\n");
 800dfc4:	9907      	ldr	r1, [sp, #28]
 800dfc6:	482e      	ldr	r0, [pc, #184]	@ (800e080 <pdf_gen_completed_report+0x1b38>)
 800dfc8:	f007 fe96 	bl	8015cf8 <f_puts>
    sprintf(work_buffer, "<< /Size %u /Root %u 0 R >>\n",
 800dfcc:	5962      	ldr	r2, [r4, r5]
 800dfce:	2302      	movs	r3, #2
 800dfd0:	3201      	adds	r2, #1
 800dfd2:	492c      	ldr	r1, [pc, #176]	@ (800e084 <pdf_gen_completed_report+0x1b3c>)
 800dfd4:	a874      	add	r0, sp, #464	@ 0x1d0
 800dfd6:	f00c faa1 	bl	801a51c <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800dfda:	9907      	ldr	r1, [sp, #28]
 800dfdc:	a874      	add	r0, sp, #464	@ 0x1d0
 800dfde:	f007 fe8b 	bl	8015cf8 <f_puts>
    sprintf(work_buffer, "startxref\n%lu\n%%EOF\n", (unsigned long)xref_offset);
 800dfe2:	003a      	movs	r2, r7
 800dfe4:	4928      	ldr	r1, [pc, #160]	@ (800e088 <pdf_gen_completed_report+0x1b40>)
 800dfe6:	a874      	add	r0, sp, #464	@ 0x1d0
 800dfe8:	f00c fa98 	bl	801a51c <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800dfec:	9907      	ldr	r1, [sp, #28]
 800dfee:	a874      	add	r0, sp, #464	@ 0x1d0
 800dff0:	e04c      	b.n	800e08c <pdf_gen_completed_report+0x1b44>
 800dff2:	46c0      	nop			@ (mov r8, r8)
 800dff4:	0000020d 	.word	0x0000020d
 800dff8:	000008e8 	.word	0x000008e8
 800dffc:	0801ff3c 	.word	0x0801ff3c
 800e000:	00000212 	.word	0x00000212
 800e004:	0801f7de 	.word	0x0801f7de
 800e008:	080200ad 	.word	0x080200ad
 800e00c:	20000200 	.word	0x20000200
 800e010:	20003090 	.word	0x20003090
 800e014:	080200f2 	.word	0x080200f2
 800e018:	080200fe 	.word	0x080200fe
 800e01c:	08020102 	.word	0x08020102
 800e020:	3ecccccd 	.word	0x3ecccccd
 800e024:	3f666666 	.word	0x3f666666
 800e028:	08020106 	.word	0x08020106
 800e02c:	0802010a 	.word	0x0802010a
 800e030:	3f19999a 	.word	0x3f19999a
 800e034:	0802010e 	.word	0x0802010e
 800e038:	3dcccccd 	.word	0x3dcccccd
 800e03c:	08020112 	.word	0x08020112
 800e040:	08020116 	.word	0x08020116
 800e044:	3f4ccccd 	.word	0x3f4ccccd
 800e048:	00000221 	.word	0x00000221
 800e04c:	0801f75e 	.word	0x0801f75e
 800e050:	0801f761 	.word	0x0801f761
 800e054:	0801f777 	.word	0x0801f777
 800e058:	20002c88 	.word	0x20002c88
 800e05c:	0802011a 	.word	0x0802011a
 800e060:	0802013b 	.word	0x0802013b
 800e064:	08020143 	.word	0x08020143
 800e068:	0000034a 	.word	0x0000034a
 800e06c:	00000253 	.word	0x00000253
 800e070:	00000404 	.word	0x00000404
 800e074:	0802015e 	.word	0x0802015e
 800e078:	08020164 	.word	0x08020164
 800e07c:	0802016a 	.word	0x0802016a
 800e080:	08020194 	.word	0x08020194
 800e084:	0802019d 	.word	0x0802019d
 800e088:	080201ba 	.word	0x080201ba
 800e08c:	f007 fe34 	bl	8015cf8 <f_puts>
    if (f_chmod(pdf_file_name,AM_RDO,AM_RDO) != FR_OK)
 800e090:	2201      	movs	r2, #1
 800e092:	4ea3      	ldr	r6, [pc, #652]	@ (800e320 <pdf_gen_completed_report+0x1dd8>)
 800e094:	0011      	movs	r1, r2
 800e096:	6830      	ldr	r0, [r6, #0]
 800e098:	f007 fa06 	bl	80154a8 <f_chmod>
 800e09c:	4ca1      	ldr	r4, [pc, #644]	@ (800e324 <pdf_gen_completed_report+0x1ddc>)
 800e09e:	4da2      	ldr	r5, [pc, #648]	@ (800e328 <pdf_gen_completed_report+0x1de0>)
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d006      	beq.n	800e0b2 <pdf_gen_completed_report+0x1b6a>
        LOG_APP("f_chmod %s failed\r\n",pdf_file_name);
 800e0a4:	6828      	ldr	r0, [r5, #0]
 800e0a6:	0022      	movs	r2, r4
 800e0a8:	49a0      	ldr	r1, [pc, #640]	@ (800e32c <pdf_gen_completed_report+0x1de4>)
 800e0aa:	6833      	ldr	r3, [r6, #0]
 800e0ac:	68c0      	ldr	r0, [r0, #12]
 800e0ae:	f00c f959 	bl	801a364 <fiprintf>
    f_close(&pdf_file);
 800e0b2:	9807      	ldr	r0, [sp, #28]
 800e0b4:	f007 f936 	bl	8015324 <f_close>
    LOG_APP("Close PDF log file\r\n");
 800e0b8:	0022      	movs	r2, r4
 800e0ba:	499d      	ldr	r1, [pc, #628]	@ (800e330 <pdf_gen_completed_report+0x1de8>)
 800e0bc:	682b      	ldr	r3, [r5, #0]
 800e0be:	f7fe fa6c 	bl	800c59a <pdf_gen_completed_report+0x52>
        elapsed_sec = (86400 - start_sec) + stop_sec;
 800e0c2:	4a9c      	ldr	r2, [pc, #624]	@ (800e334 <pdf_gen_completed_report+0x1dec>)
 800e0c4:	189b      	adds	r3, r3, r2
 800e0c6:	f7ff f882 	bl	800d1ce <pdf_gen_completed_report+0xc86>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START + (i*grid_size), chart_y_start , CHART_X_START + (i*grid_size), chart_y_start - CHART_HEIGHT, line_size, light_gray, light_gray, light_gray,4);
 800e0ca:	2304      	movs	r3, #4
 800e0cc:	9305      	str	r3, [sp, #20]
 800e0ce:	23fc      	movs	r3, #252	@ 0xfc
 800e0d0:	059b      	lsls	r3, r3, #22
 800e0d2:	9301      	str	r3, [sp, #4]
 800e0d4:	22a9      	movs	r2, #169	@ 0xa9
 800e0d6:	2358      	movs	r3, #88	@ 0x58
 800e0d8:	0029      	movs	r1, r5
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	4896      	ldr	r0, [pc, #600]	@ (800e338 <pdf_gen_completed_report+0x1df0>)
 800e0de:	002b      	movs	r3, r5
 800e0e0:	9604      	str	r6, [sp, #16]
 800e0e2:	9603      	str	r6, [sp, #12]
 800e0e4:	9602      	str	r6, [sp, #8]
 800e0e6:	0052      	lsls	r2, r2, #1
 800e0e8:	f00a ff3c 	bl	8018f64 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= num_grid_col_lines; i++)
 800e0ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0ee:	192d      	adds	r5, r5, r4
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0f4:	f7ff fac8 	bl	800d688 <pdf_gen_completed_report+0x1140>
        printf("[PDF][Chart] TH2 skip (state=%d)\r\n",
 800e0f8:	0421      	lsls	r1, r4, #16
 800e0fa:	0f89      	lsrs	r1, r1, #30
 800e0fc:	488f      	ldr	r0, [pc, #572]	@ (800e33c <pdf_gen_completed_report+0x1df4>)
 800e0fe:	f00c f95d 	bl	801a3bc <iprintf>
 800e102:	f7ff fbb6 	bl	800d872 <pdf_gen_completed_report+0x132a>
        printf("[PDF][Chart] TH1 skip (state=%d)\r\n",
 800e106:	04a1      	lsls	r1, r4, #18
 800e108:	0f89      	lsrs	r1, r1, #30
 800e10a:	488d      	ldr	r0, [pc, #564]	@ (800e340 <pdf_gen_completed_report+0x1df8>)
 800e10c:	f00c f956 	bl	801a3bc <iprintf>
 800e110:	e417      	b.n	800d942 <pdf_gen_completed_report+0x13fa>
        printf("[PDF][Chart] TL2 skip (state=%d)\r\n",
 800e112:	0321      	lsls	r1, r4, #12
 800e114:	0f89      	lsrs	r1, r1, #30
 800e116:	488b      	ldr	r0, [pc, #556]	@ (800e344 <pdf_gen_completed_report+0x1dfc>)
 800e118:	f00c f950 	bl	801a3bc <iprintf>
 800e11c:	e46f      	b.n	800d9fe <pdf_gen_completed_report+0x14b6>
        printf("[PDF][Chart] TL1 skip (state=%d)\r\n",
 800e11e:	03a1      	lsls	r1, r4, #14
 800e120:	0f89      	lsrs	r1, r1, #30
 800e122:	4889      	ldr	r0, [pc, #548]	@ (800e348 <pdf_gen_completed_report+0x1e00>)
 800e124:	f00c f94a 	bl	801a3bc <iprintf>
 800e128:	e4c9      	b.n	800dabe <pdf_gen_completed_report+0x1576>
        printf("[PDF][Chart] RH2 skip (state=%d)\r\n",
 800e12a:	0509      	lsls	r1, r1, #20
 800e12c:	0f89      	lsrs	r1, r1, #30
 800e12e:	4887      	ldr	r0, [pc, #540]	@ (800e34c <pdf_gen_completed_report+0x1e04>)
 800e130:	f00c f944 	bl	801a3bc <iprintf>
 800e134:	e512      	b.n	800db5c <pdf_gen_completed_report+0x1614>
        printf("[PDF][Chart] RH1 skip (state=%d)\r\n",
 800e136:	0589      	lsls	r1, r1, #22
 800e138:	0f89      	lsrs	r1, r1, #30
 800e13a:	4885      	ldr	r0, [pc, #532]	@ (800e350 <pdf_gen_completed_report+0x1e08>)
 800e13c:	f00c f93e 	bl	801a3bc <iprintf>
 800e140:	e587      	b.n	800dc52 <pdf_gen_completed_report+0x170a>
        meas_data_log_read_entry(i, &entry);
 800e142:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e144:	a926      	add	r1, sp, #152	@ 0x98
 800e146:	f7fa fbe3 	bl	8008910 <meas_data_log_read_entry>
        if (chunk_start_index > 0 && buffer_count == 0) {
 800e14a:	2e00      	cmp	r6, #0
 800e14c:	d100      	bne.n	800e150 <pdf_gen_completed_report+0x1c08>
 800e14e:	e092      	b.n	800e276 <pdf_gen_completed_report+0x1d2e>
 800e150:	2c00      	cmp	r4, #0
 800e152:	d000      	beq.n	800e156 <pdf_gen_completed_report+0x1c0e>
 800e154:	e08f      	b.n	800e276 <pdf_gen_completed_report+0x1d2e>
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800e156:	9b07      	ldr	r3, [sp, #28]
 800e158:	1e58      	subs	r0, r3, #1
 800e15a:	f7f3 fae7 	bl	800172c <__aeabi_i2f>
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e15e:	4b7d      	ldr	r3, [pc, #500]	@ (800e354 <pdf_gen_completed_report+0x1e0c>)
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800e160:	1c05      	adds	r5, r0, #0
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e162:	681b      	ldr	r3, [r3, #0]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e164:	9808      	ldr	r0, [sp, #32]
 800e166:	1c19      	adds	r1, r3, #0
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e168:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e16a:	f7f3 f845 	bl	80011f8 <__aeabi_fsub>
 800e16e:	9010      	str	r0, [sp, #64]	@ 0x40
            float prev_dose_y = map_value(last_entry_of_chunk.dose, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e170:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800e172:	f7f3 fb2b 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e176:	4978      	ldr	r1, [pc, #480]	@ (800e358 <pdf_gen_completed_report+0x1e10>)
 800e178:	f7f2 fee4 	bl	8000f44 <__aeabi_fmul>
 800e17c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e17e:	f7f2 fd13 	bl	8000ba8 <__aeabi_fdiv>
 800e182:	4976      	ldr	r1, [pc, #472]	@ (800e35c <pdf_gen_completed_report+0x1e14>)
 800e184:	f7f2 fb1e 	bl	80007c4 <__aeabi_fadd>
 800e188:	9012      	str	r0, [sp, #72]	@ 0x48
            float curr_dose_y = map_value(entry.dose, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e18a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800e18c:	f7f3 fb1e 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e190:	4971      	ldr	r1, [pc, #452]	@ (800e358 <pdf_gen_completed_report+0x1e10>)
 800e192:	f7f2 fed7 	bl	8000f44 <__aeabi_fmul>
 800e196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e198:	f7f2 fd06 	bl	8000ba8 <__aeabi_fdiv>
 800e19c:	496f      	ldr	r1, [pc, #444]	@ (800e35c <pdf_gen_completed_report+0x1e14>)
 800e19e:	f7f2 fb11 	bl	80007c4 <__aeabi_fadd>
 800e1a2:	9016      	str	r0, [sp, #88]	@ 0x58
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800e1a4:	1e70      	subs	r0, r6, #1
 800e1a6:	f7f3 fac1 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e1aa:	496d      	ldr	r1, [pc, #436]	@ (800e360 <pdf_gen_completed_report+0x1e18>)
 800e1ac:	f7f2 feca 	bl	8000f44 <__aeabi_fmul>
 800e1b0:	1c29      	adds	r1, r5, #0
 800e1b2:	f7f2 fcf9 	bl	8000ba8 <__aeabi_fdiv>
 800e1b6:	496b      	ldr	r1, [pc, #428]	@ (800e364 <pdf_gen_completed_report+0x1e1c>)
 800e1b8:	f7f2 fb04 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e1bc:	f7f3 fa96 	bl	80016ec <__aeabi_f2iz>
 800e1c0:	900c      	str	r0, [sp, #48]	@ 0x30
            float curr_x = map_value((float)chunk_start_index, 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800e1c2:	0030      	movs	r0, r6
 800e1c4:	f7f3 fb02 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e1c8:	4965      	ldr	r1, [pc, #404]	@ (800e360 <pdf_gen_completed_report+0x1e18>)
 800e1ca:	f7f2 febb 	bl	8000f44 <__aeabi_fmul>
 800e1ce:	1c29      	adds	r1, r5, #0
 800e1d0:	f7f2 fcea 	bl	8000ba8 <__aeabi_fdiv>
 800e1d4:	4963      	ldr	r1, [pc, #396]	@ (800e364 <pdf_gen_completed_report+0x1e1c>)
 800e1d6:	f7f2 faf5 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e1da:	f7f3 fa87 	bl	80016ec <__aeabi_f2iz>
 800e1de:	900f      	str	r0, [sp, #60]	@ 0x3c
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e1e0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e1e2:	f7f3 faa3 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e1e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1e8:	f7f3 f806 	bl	80011f8 <__aeabi_fsub>
 800e1ec:	495a      	ldr	r1, [pc, #360]	@ (800e358 <pdf_gen_completed_report+0x1e10>)
 800e1ee:	f7f2 fea9 	bl	8000f44 <__aeabi_fmul>
 800e1f2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e1f4:	f7f2 fcd8 	bl	8000ba8 <__aeabi_fdiv>
 800e1f8:	4958      	ldr	r1, [pc, #352]	@ (800e35c <pdf_gen_completed_report+0x1e14>)
 800e1fa:	f7f2 fae3 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e1fe:	f7f3 fa75 	bl	80016ec <__aeabi_f2iz>
 800e202:	23fe      	movs	r3, #254	@ 0xfe
 800e204:	22fd      	movs	r2, #253	@ 0xfd
 800e206:	059b      	lsls	r3, r3, #22
 800e208:	0592      	lsls	r2, r2, #22
 800e20a:	9302      	str	r3, [sp, #8]
 800e20c:	9201      	str	r2, [sp, #4]
            float curr_temp_y = map_value(entry.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e20e:	a91a      	add	r1, sp, #104	@ 0x68
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e210:	9017      	str	r0, [sp, #92]	@ 0x5c
 800e212:	9704      	str	r7, [sp, #16]
 800e214:	9703      	str	r7, [sp, #12]
            float curr_temp_y = map_value(entry.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e216:	203a      	movs	r0, #58	@ 0x3a
 800e218:	5e08      	ldrsh	r0, [r1, r0]
 800e21a:	f7f3 fa87 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e21e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e220:	f7f2 ffea 	bl	80011f8 <__aeabi_fsub>
 800e224:	494c      	ldr	r1, [pc, #304]	@ (800e358 <pdf_gen_completed_report+0x1e10>)
 800e226:	f7f2 fe8d 	bl	8000f44 <__aeabi_fmul>
 800e22a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e22c:	f7f2 fcbc 	bl	8000ba8 <__aeabi_fdiv>
 800e230:	494a      	ldr	r1, [pc, #296]	@ (800e35c <pdf_gen_completed_report+0x1e14>)
 800e232:	f7f2 fac7 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e236:	f7f3 fa59 	bl	80016ec <__aeabi_f2iz>
 800e23a:	4d3f      	ldr	r5, [pc, #252]	@ (800e338 <pdf_gen_completed_report+0x1df0>)
 800e23c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e23e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e240:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e242:	9000      	str	r0, [sp, #0]
 800e244:	0028      	movs	r0, r5
 800e246:	f00a fe59 	bl	8018efc <tpdf_draw_line>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_dose_y, (int)curr_x, (int)curr_dose_y, 0.75, 0.0f, 0.0f, 1.0f);
 800e24a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e24c:	f7f3 fa4e 	bl	80016ec <__aeabi_f2iz>
 800e250:	23fe      	movs	r3, #254	@ 0xfe
 800e252:	22fd      	movs	r2, #253	@ 0xfd
 800e254:	059b      	lsls	r3, r3, #22
 800e256:	0592      	lsls	r2, r2, #22
 800e258:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e25a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e25c:	9304      	str	r3, [sp, #16]
 800e25e:	9201      	str	r2, [sp, #4]
 800e260:	9703      	str	r7, [sp, #12]
 800e262:	9702      	str	r7, [sp, #8]
 800e264:	f7f3 fa42 	bl	80016ec <__aeabi_f2iz>
 800e268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e26a:	9000      	str	r0, [sp, #0]
 800e26c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e26e:	0028      	movs	r0, r5
 800e270:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e272:	f00a fe43 	bl	8018efc <tpdf_draw_line>
        tmp_temper[buffer_count] = (float)entry.temperature/ 10.0f;
 800e276:	ab1a      	add	r3, sp, #104	@ 0x68
 800e278:	203a      	movs	r0, #58	@ 0x3a
 800e27a:	5e18      	ldrsh	r0, [r3, r0]
 800e27c:	f7f3 fa56 	bl	800172c <__aeabi_i2f>
 800e280:	4939      	ldr	r1, [pc, #228]	@ (800e368 <pdf_gen_completed_report+0x1e20>)
 800e282:	f7f2 fc91 	bl	8000ba8 <__aeabi_fdiv>
 800e286:	22b4      	movs	r2, #180	@ 0xb4
 800e288:	ab1a      	add	r3, sp, #104	@ 0x68
 800e28a:	0052      	lsls	r2, r2, #1
 800e28c:	189b      	adds	r3, r3, r2
 800e28e:	00a5      	lsls	r5, r4, #2
 800e290:	5158      	str	r0, [r3, r5]
        tmp_dose[buffer_count] = (float)entry.dose/ 100.0f;
 800e292:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800e294:	f7f3 fa9a 	bl	80017cc <__aeabi_ui2f>
 800e298:	4934      	ldr	r1, [pc, #208]	@ (800e36c <pdf_gen_completed_report+0x1e24>)
 800e29a:	f7f2 fc85 	bl	8000ba8 <__aeabi_fdiv>
 800e29e:	4a34      	ldr	r2, [pc, #208]	@ (800e370 <pdf_gen_completed_report+0x1e28>)
 800e2a0:	ab1a      	add	r3, sp, #104	@ 0x68
 800e2a2:	189b      	adds	r3, r3, r2
 800e2a4:	5158      	str	r0, [r3, r5]
        if (buffer_count == DATAPOINTS_PER_PAGE) {
 800e2a6:	23f0      	movs	r3, #240	@ 0xf0
        buffer_count++;
 800e2a8:	3401      	adds	r4, #1
 800e2aa:	b2a4      	uxth	r4, r4
        if (buffer_count == DATAPOINTS_PER_PAGE) {
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	429c      	cmp	r4, r3
 800e2b0:	d12b      	bne.n	800e30a <pdf_gen_completed_report+0x1dc2>
            pdf_chart_plot_data(file_p, *y_pos, tmp_temper, chunk_start_index, buffer_count, record_nums, 1.0f, 0.0f, 0.0f, g_temp_axis_min , temp_highest_scale_up);
 800e2b2:	25fe      	movs	r5, #254	@ 0xfe
 800e2b4:	20b3      	movs	r0, #179	@ 0xb3
 800e2b6:	9b08      	ldr	r3, [sp, #32]
 800e2b8:	05ad      	lsls	r5, r5, #22
 800e2ba:	9304      	str	r3, [sp, #16]
 800e2bc:	4b25      	ldr	r3, [pc, #148]	@ (800e354 <pdf_gen_completed_report+0x1e0c>)
 800e2be:	0032      	movs	r2, r6
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	a974      	add	r1, sp, #464	@ 0x1d0
 800e2c4:	9303      	str	r3, [sp, #12]
 800e2c6:	9b07      	ldr	r3, [sp, #28]
 800e2c8:	0040      	lsls	r0, r0, #1
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	9702      	str	r7, [sp, #8]
 800e2ce:	0023      	movs	r3, r4
 800e2d0:	9501      	str	r5, [sp, #4]
 800e2d2:	f7fd feb9 	bl	800c048 <pdf_chart_plot_data.constprop.0>
            pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800e2d6:	4926      	ldr	r1, [pc, #152]	@ (800e370 <pdf_gen_completed_report+0x1e28>)
 800e2d8:	a81a      	add	r0, sp, #104	@ 0x68
 800e2da:	1809      	adds	r1, r1, r0
 800e2dc:	20b3      	movs	r0, #179	@ 0xb3
 800e2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e0:	0032      	movs	r2, r6
 800e2e2:	9304      	str	r3, [sp, #16]
 800e2e4:	9b07      	ldr	r3, [sp, #28]
 800e2e6:	9703      	str	r7, [sp, #12]
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	0023      	movs	r3, r4
            buffer_count = 0;
 800e2ec:	2400      	movs	r4, #0
            pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800e2ee:	9502      	str	r5, [sp, #8]
 800e2f0:	9701      	str	r7, [sp, #4]
 800e2f2:	0040      	lsls	r0, r0, #1
 800e2f4:	f7fd fea8 	bl	800c048 <pdf_chart_plot_data.constprop.0>
            last_entry_of_chunk = entry; // Save the last point
 800e2f8:	ab1a      	add	r3, sp, #104	@ 0x68
 800e2fa:	223a      	movs	r2, #58	@ 0x3a
 800e2fc:	5e9b      	ldrsh	r3, [r3, r2]
            chunk_start_index += buffer_count;
 800e2fe:	36e1      	adds	r6, #225	@ 0xe1
            last_entry_of_chunk = entry; // Save the last point
 800e300:	9311      	str	r3, [sp, #68]	@ 0x44
 800e302:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
            chunk_start_index += buffer_count;
 800e304:	36ff      	adds	r6, #255	@ 0xff
            last_entry_of_chunk = entry; // Save the last point
 800e306:	931e      	str	r3, [sp, #120]	@ 0x78
            chunk_start_index += buffer_count;
 800e308:	b2b6      	uxth	r6, r6
    for (int i = 0; i < record_nums; i++) {
 800e30a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e30c:	3301      	adds	r3, #1
 800e30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e310:	e4a3      	b.n	800dc5a <pdf_gen_completed_report+0x1712>
        fatfs_write_string(&pdf_file, "0000000000 00000 n \n");
 800e312:	4818      	ldr	r0, [pc, #96]	@ (800e374 <pdf_gen_completed_report+0x1e2c>)
 800e314:	9907      	ldr	r1, [sp, #28]
 800e316:	f007 fcef 	bl	8015cf8 <f_puts>
    for (unsigned i = 0; i < (unsigned)pdf_monitor.num_objs; i++) {
 800e31a:	3601      	adds	r6, #1
 800e31c:	e64e      	b.n	800dfbc <pdf_gen_completed_report+0x1a74>
 800e31e:	46c0      	nop			@ (mov r8, r8)
 800e320:	200001fc 	.word	0x200001fc
 800e324:	0801eafb 	.word	0x0801eafb
 800e328:	200002cc 	.word	0x200002cc
 800e32c:	080201cf 	.word	0x080201cf
 800e330:	080201e8 	.word	0x080201e8
 800e334:	00015180 	.word	0x00015180
 800e338:	20003090 	.word	0x20003090
 800e33c:	0801ff70 	.word	0x0801ff70
 800e340:	0801ffb7 	.word	0x0801ffb7
 800e344:	0801fffe 	.word	0x0801fffe
 800e348:	08020045 	.word	0x08020045
 800e34c:	0802008a 	.word	0x0802008a
 800e350:	080200cf 	.word	0x080200cf
 800e354:	20000200 	.word	0x20000200
 800e358:	437a0000 	.word	0x437a0000
 800e35c:	42b00000 	.word	0x42b00000
 800e360:	43e10000 	.word	0x43e10000
 800e364:	42960000 	.word	0x42960000
 800e368:	41200000 	.word	0x41200000
 800e36c:	42c80000 	.word	0x42c80000
 800e370:	000008e8 	.word	0x000008e8
 800e374:	0802017f 	.word	0x0802017f

0800e378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e378:	480d      	ldr	r0, [pc, #52]	@ (800e3b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e37a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e37c:	f7fc fb9a 	bl	800aab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e380:	480c      	ldr	r0, [pc, #48]	@ (800e3b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800e382:	490d      	ldr	r1, [pc, #52]	@ (800e3b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e384:	4a0d      	ldr	r2, [pc, #52]	@ (800e3bc <LoopForever+0xe>)
  movs r3, #0
 800e386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e388:	e002      	b.n	800e390 <LoopCopyDataInit>

0800e38a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e38a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e38c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e38e:	3304      	adds	r3, #4

0800e390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e394:	d3f9      	bcc.n	800e38a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e396:	4a0a      	ldr	r2, [pc, #40]	@ (800e3c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e398:	4c0a      	ldr	r4, [pc, #40]	@ (800e3c4 <LoopForever+0x16>)
  movs r3, #0
 800e39a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e39c:	e001      	b.n	800e3a2 <LoopFillZerobss>

0800e39e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e39e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e3a0:	3204      	adds	r2, #4

0800e3a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e3a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e3a4:	d3fb      	bcc.n	800e39e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e3a6:	f00c fa65 	bl	801a874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e3aa:	f7f9 f97d 	bl	80076a8 <main>

0800e3ae <LoopForever>:

LoopForever:
  b LoopForever
 800e3ae:	e7fe      	b.n	800e3ae <LoopForever>
  ldr   r0, =_estack
 800e3b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800e3b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e3b8:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 800e3bc:	080209cc 	.word	0x080209cc
  ldr r2, =_sbss
 800e3c0:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 800e3c4:	200067fc 	.word	0x200067fc

0800e3c8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e3c8:	e7fe      	b.n	800e3c8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>
	...

0800e3cc <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800e3cc:	4b10      	ldr	r3, [pc, #64]	@ (800e410 <HAL_InitTick+0x44>)
{
 800e3ce:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 800e3d0:	6819      	ldr	r1, [r3, #0]
{
 800e3d2:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 800e3d4:	2900      	cmp	r1, #0
 800e3d6:	d101      	bne.n	800e3dc <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800e3d8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800e3dc:	20fa      	movs	r0, #250	@ 0xfa
 800e3de:	0080      	lsls	r0, r0, #2
 800e3e0:	f7f1 fec2 	bl	8000168 <__udivsi3>
 800e3e4:	4c0b      	ldr	r4, [pc, #44]	@ (800e414 <HAL_InitTick+0x48>)
 800e3e6:	0001      	movs	r1, r0
 800e3e8:	6820      	ldr	r0, [r4, #0]
 800e3ea:	f7f1 febd 	bl	8000168 <__udivsi3>
 800e3ee:	f000 ff37 	bl	800f260 <HAL_SYSTICK_Config>
 800e3f2:	1e04      	subs	r4, r0, #0
 800e3f4:	d1f0      	bne.n	800e3d8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e3f6:	2d03      	cmp	r5, #3
 800e3f8:	d8ee      	bhi.n	800e3d8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e3fa:	0002      	movs	r2, r0
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	0029      	movs	r1, r5
 800e400:	4240      	negs	r0, r0
 800e402:	f000 fef7 	bl	800f1f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e406:	4b04      	ldr	r3, [pc, #16]	@ (800e418 <HAL_InitTick+0x4c>)
 800e408:	0020      	movs	r0, r4
 800e40a:	601d      	str	r5, [r3, #0]
  return status;
 800e40c:	e7e5      	b.n	800e3da <HAL_InitTick+0xe>
 800e40e:	46c0      	nop			@ (mov r8, r8)
 800e410:	20000204 	.word	0x20000204
 800e414:	20000050 	.word	0x20000050
 800e418:	20000208 	.word	0x20000208

0800e41c <HAL_Init>:
{
 800e41c:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e41e:	2003      	movs	r0, #3
 800e420:	f7ff ffd4 	bl	800e3cc <HAL_InitTick>
 800e424:	1e04      	subs	r4, r0, #0
 800e426:	d103      	bne.n	800e430 <HAL_Init+0x14>
    HAL_MspInit();
 800e428:	f7fb ffb0 	bl	800a38c <HAL_MspInit>
}
 800e42c:	0020      	movs	r0, r4
 800e42e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800e430:	2401      	movs	r4, #1
 800e432:	e7fb      	b.n	800e42c <HAL_Init+0x10>

0800e434 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800e434:	4a03      	ldr	r2, [pc, #12]	@ (800e444 <HAL_IncTick+0x10>)
 800e436:	4904      	ldr	r1, [pc, #16]	@ (800e448 <HAL_IncTick+0x14>)
 800e438:	6813      	ldr	r3, [r2, #0]
 800e43a:	6809      	ldr	r1, [r1, #0]
 800e43c:	185b      	adds	r3, r3, r1
 800e43e:	6013      	str	r3, [r2, #0]
}
 800e440:	4770      	bx	lr
 800e442:	46c0      	nop			@ (mov r8, r8)
 800e444:	200030b8 	.word	0x200030b8
 800e448:	20000204 	.word	0x20000204

0800e44c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800e44c:	4b01      	ldr	r3, [pc, #4]	@ (800e454 <HAL_GetTick+0x8>)
 800e44e:	6818      	ldr	r0, [r3, #0]
}
 800e450:	4770      	bx	lr
 800e452:	46c0      	nop			@ (mov r8, r8)
 800e454:	200030b8 	.word	0x200030b8

0800e458 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800e458:	2102      	movs	r1, #2
 800e45a:	4a02      	ldr	r2, [pc, #8]	@ (800e464 <HAL_SuspendTick+0xc>)
 800e45c:	6813      	ldr	r3, [r2, #0]
 800e45e:	438b      	bics	r3, r1
 800e460:	6013      	str	r3, [r2, #0]
}
 800e462:	4770      	bx	lr
 800e464:	e000e010 	.word	0xe000e010

0800e468 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800e468:	2302      	movs	r3, #2
 800e46a:	4a02      	ldr	r2, [pc, #8]	@ (800e474 <HAL_ResumeTick+0xc>)
 800e46c:	6811      	ldr	r1, [r2, #0]
 800e46e:	430b      	orrs	r3, r1
 800e470:	6013      	str	r3, [r2, #0]
}
 800e472:	4770      	bx	lr
 800e474:	e000e010 	.word	0xe000e010

0800e478 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e478:	6880      	ldr	r0, [r0, #8]
 800e47a:	0740      	lsls	r0, r0, #29
 800e47c:	0fc0      	lsrs	r0, r0, #31
}
 800e47e:	4770      	bx	lr

0800e480 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800e480:	2300      	movs	r3, #0
{
 800e482:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e484:	b085      	sub	sp, #20
 800e486:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800e488:	9303      	str	r3, [sp, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800e48a:	4298      	cmp	r0, r3
 800e48c:	d100      	bne.n	800e490 <HAL_ADC_Init+0x10>
 800e48e:	e0f0      	b.n	800e672 <HAL_ADC_Init+0x1f2>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e490:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800e492:	429d      	cmp	r5, r3
 800e494:	d105      	bne.n	800e4a2 <HAL_ADC_Init+0x22>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e496:	f7fb ff97 	bl	800a3c8 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800e49a:	0023      	movs	r3, r4
 800e49c:	3354      	adds	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800e49e:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800e4a0:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800e4a2:	2380      	movs	r3, #128	@ 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800e4a4:	6825      	ldr	r5, [r4, #0]
 800e4a6:	055b      	lsls	r3, r3, #21
 800e4a8:	68aa      	ldr	r2, [r5, #8]
 800e4aa:	421a      	tst	r2, r3
 800e4ac:	d100      	bne.n	800e4b0 <HAL_ADC_Init+0x30>
 800e4ae:	e0a7      	b.n	800e600 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	68ab      	ldr	r3, [r5, #8]
 800e4b4:	9201      	str	r2, [sp, #4]
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	d408      	bmi.n	800e4cc <HAL_ADC_Init+0x4c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4ba:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e4bc:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4be:	6da2      	ldr	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800e4c0:	9601      	str	r6, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e4c6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e4c8:	4333      	orrs	r3, r6
 800e4ca:	65e3      	str	r3, [r4, #92]	@ 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e4cc:	0028      	movs	r0, r5
 800e4ce:	f7ff ffd3 	bl	800e478 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e4d2:	2210      	movs	r2, #16
 800e4d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	4303      	orrs	r3, r0
 800e4da:	d000      	beq.n	800e4de <HAL_ADC_Init+0x5e>
 800e4dc:	e0cc      	b.n	800e678 <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e4de:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e4e0:	4b67      	ldr	r3, [pc, #412]	@ (800e680 <HAL_ADC_Init+0x200>)
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e4e2:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 800e4e4:	401a      	ands	r2, r3
 800e4e6:	3306      	adds	r3, #6
 800e4e8:	33ff      	adds	r3, #255	@ 0xff
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e4ee:	68ab      	ldr	r3, [r5, #8]
 800e4f0:	07db      	lsls	r3, r3, #31
 800e4f2:	d461      	bmi.n	800e5b8 <HAL_ADC_Init+0x138>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e4f4:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800e4f6:	68e1      	ldr	r1, [r4, #12]
 800e4f8:	1e7b      	subs	r3, r7, #1
 800e4fa:	419f      	sbcs	r7, r3
 800e4fc:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e4fe:	7ea2      	ldrb	r2, [r4, #26]
 800e500:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e502:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e504:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e506:	0389      	lsls	r1, r1, #14
 800e508:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800e50a:	7e61      	ldrb	r1, [r4, #25]
 800e50c:	03c9      	lsls	r1, r1, #15
 800e50e:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e510:	0351      	lsls	r1, r2, #13
 800e512:	430b      	orrs	r3, r1
 800e514:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e516:	2800      	cmp	r0, #0
 800e518:	db00      	blt.n	800e51c <HAL_ADC_Init+0x9c>
 800e51a:	e086      	b.n	800e62a <HAL_ADC_Init+0x1aa>
 800e51c:	0041      	lsls	r1, r0, #1
 800e51e:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e520:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e522:	4666      	mov	r6, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e524:	332c      	adds	r3, #44	@ 0x2c
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e52a:	4333      	orrs	r3, r6
 800e52c:	433b      	orrs	r3, r7
 800e52e:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e530:	1c61      	adds	r1, r4, #1
 800e532:	7fc9      	ldrb	r1, [r1, #31]
 800e534:	2901      	cmp	r1, #1
 800e536:	d105      	bne.n	800e544 <HAL_ADC_Init+0xc4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800e538:	2a00      	cmp	r2, #0
 800e53a:	d000      	beq.n	800e53e <HAL_ADC_Init+0xbe>
 800e53c:	e078      	b.n	800e630 <HAL_ADC_Init+0x1b0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800e53e:	2280      	movs	r2, #128	@ 0x80
 800e540:	0252      	lsls	r2, r2, #9
 800e542:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e544:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e546:	2a00      	cmp	r2, #0
 800e548:	d005      	beq.n	800e556 <HAL_ADC_Init+0xd6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800e54a:	21e0      	movs	r1, #224	@ 0xe0
 800e54c:	0049      	lsls	r1, r1, #1
 800e54e:	400a      	ands	r2, r1
 800e550:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e552:	430a      	orrs	r2, r1
 800e554:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800e556:	68ea      	ldr	r2, [r5, #12]
 800e558:	494a      	ldr	r1, [pc, #296]	@ (800e684 <HAL_ADC_Init+0x204>)
 800e55a:	400a      	ands	r2, r1
 800e55c:	4313      	orrs	r3, r2
 800e55e:	60eb      	str	r3, [r5, #12]

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800e560:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e562:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 800e564:	333c      	adds	r3, #60	@ 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e566:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800e568:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e56a:	0f97      	lsrs	r7, r2, #30
 800e56c:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 800e56e:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e570:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 800e572:	2b01      	cmp	r3, #1
 800e574:	d108      	bne.n	800e588 <HAL_ADC_Init+0x108>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800e576:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e578:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800e57a:	4333      	orrs	r3, r6
 800e57c:	430b      	orrs	r3, r1
 800e57e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e580:	430b      	orrs	r3, r1
 800e582:	4661      	mov	r1, ip
 800e584:	433b      	orrs	r3, r7
 800e586:	4319      	orrs	r1, r3
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800e588:	692b      	ldr	r3, [r5, #16]
 800e58a:	4f3f      	ldr	r7, [pc, #252]	@ (800e688 <HAL_ADC_Init+0x208>)
 800e58c:	403b      	ands	r3, r7
 800e58e:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800e590:	2180      	movs	r1, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 800e592:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800e594:	0053      	lsls	r3, r2, #1
 800e596:	085b      	lsrs	r3, r3, #1
 800e598:	05c9      	lsls	r1, r1, #23
 800e59a:	428b      	cmp	r3, r1
 800e59c:	d00c      	beq.n	800e5b8 <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800e59e:	2380      	movs	r3, #128	@ 0x80
 800e5a0:	061b      	lsls	r3, r3, #24
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d008      	beq.n	800e5b8 <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800e5a6:	4939      	ldr	r1, [pc, #228]	@ (800e68c <HAL_ADC_Init+0x20c>)
 800e5a8:	4f39      	ldr	r7, [pc, #228]	@ (800e690 <HAL_ADC_Init+0x210>)
 800e5aa:	680b      	ldr	r3, [r1, #0]
 800e5ac:	403b      	ands	r3, r7
 800e5ae:	27f0      	movs	r7, #240	@ 0xf0
 800e5b0:	03bf      	lsls	r7, r7, #14
 800e5b2:	403a      	ands	r2, r7
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 800e5b8:	2107      	movs	r1, #7
 800e5ba:	2770      	movs	r7, #112	@ 0x70
 800e5bc:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800e5be:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e5c0:	438b      	bics	r3, r1
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	616b      	str	r3, [r5, #20]
 800e5c6:	6969      	ldr	r1, [r5, #20]
 800e5c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e5ca:	43b9      	bics	r1, r7
 800e5cc:	011b      	lsls	r3, r3, #4
 800e5ce:	430b      	orrs	r3, r1
 800e5d0:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	d134      	bne.n	800e640 <HAL_ADC_Init+0x1c0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800e5d6:	2310      	movs	r3, #16
 800e5d8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800e5da:	425b      	negs	r3, r3
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800e5dc:	430b      	orrs	r3, r1
 800e5de:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800e5e0:	2107      	movs	r1, #7
 800e5e2:	696b      	ldr	r3, [r5, #20]
 800e5e4:	400b      	ands	r3, r1
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d139      	bne.n	800e65e <HAL_ADC_Init+0x1de>
        == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800e5ee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e5f0:	3303      	adds	r3, #3
 800e5f2:	439a      	bics	r2, r3
 800e5f4:	3b02      	subs	r3, #2
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 800e5fa:	9801      	ldr	r0, [sp, #4]
 800e5fc:	b005      	add	sp, #20
 800e5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 800e600:	68aa      	ldr	r2, [r5, #8]
 800e602:	4924      	ldr	r1, [pc, #144]	@ (800e694 <HAL_ADC_Init+0x214>)
 800e604:	400a      	ands	r2, r1
 800e606:	4313      	orrs	r3, r2
 800e608:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e60a:	4b23      	ldr	r3, [pc, #140]	@ (800e698 <HAL_ADC_Init+0x218>)
 800e60c:	4923      	ldr	r1, [pc, #140]	@ (800e69c <HAL_ADC_Init+0x21c>)
 800e60e:	6818      	ldr	r0, [r3, #0]
 800e610:	f7f1 fdaa 	bl	8000168 <__udivsi3>
 800e614:	3001      	adds	r0, #1
 800e616:	0040      	lsls	r0, r0, #1
 800e618:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 800e61a:	9b03      	ldr	r3, [sp, #12]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d100      	bne.n	800e622 <HAL_ADC_Init+0x1a2>
 800e620:	e746      	b.n	800e4b0 <HAL_ADC_Init+0x30>
      wait_loop_index--;
 800e622:	9b03      	ldr	r3, [sp, #12]
 800e624:	3b01      	subs	r3, #1
 800e626:	9303      	str	r3, [sp, #12]
 800e628:	e7f7      	b.n	800e61a <HAL_ADC_Init+0x19a>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e62a:	2180      	movs	r1, #128	@ 0x80
 800e62c:	0389      	lsls	r1, r1, #14
 800e62e:	e777      	b.n	800e520 <HAL_ADC_Init+0xa0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e630:	2220      	movs	r2, #32
 800e632:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800e634:	433a      	orrs	r2, r7
 800e636:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e638:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e63a:	4311      	orrs	r1, r2
 800e63c:	65e1      	str	r1, [r4, #92]	@ 0x5c
 800e63e:	e781      	b.n	800e544 <HAL_ADC_Init+0xc4>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800e640:	2380      	movs	r3, #128	@ 0x80
 800e642:	039b      	lsls	r3, r3, #14
 800e644:	4298      	cmp	r0, r3
 800e646:	d1cb      	bne.n	800e5e0 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 800e648:	211c      	movs	r1, #28
 800e64a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800e64c:	69e3      	ldr	r3, [r4, #28]
 800e64e:	3b01      	subs	r3, #1
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	400b      	ands	r3, r1
 800e654:	392c      	subs	r1, #44	@ 0x2c
 800e656:	4099      	lsls	r1, r3
 800e658:	000b      	movs	r3, r1
 800e65a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800e65c:	e7be      	b.n	800e5dc <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 800e65e:	2312      	movs	r3, #18
 800e660:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e662:	439a      	bics	r2, r3
 800e664:	3b02      	subs	r3, #2
 800e666:	4313      	orrs	r3, r2
 800e668:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e66a:	2301      	movs	r3, #1
 800e66c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e66e:	4313      	orrs	r3, r2
 800e670:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800e672:	2301      	movs	r3, #1
 800e674:	9301      	str	r3, [sp, #4]
 800e676:	e7c0      	b.n	800e5fa <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e678:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e67a:	431a      	orrs	r2, r3
 800e67c:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800e67e:	e7f8      	b.n	800e672 <HAL_ADC_Init+0x1f2>
 800e680:	fffffefd 	.word	0xfffffefd
 800e684:	ffde0201 	.word	0xffde0201
 800e688:	1ffffc02 	.word	0x1ffffc02
 800e68c:	40012708 	.word	0x40012708
 800e690:	ffc3ffff 	.word	0xffc3ffff
 800e694:	6fffffe8 	.word	0x6fffffe8
 800e698:	20000050 	.word	0x20000050
 800e69c:	00030d40 	.word	0x00030d40

0800e6a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e6a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e6a2:	6946      	ldr	r6, [r0, #20]
{
 800e6a4:	0004      	movs	r4, r0
 800e6a6:	000f      	movs	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e6a8:	2e08      	cmp	r6, #8
 800e6aa:	d00a      	beq.n	800e6c2 <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800e6ac:	6803      	ldr	r3, [r0, #0]
 800e6ae:	2001      	movs	r0, #1
 800e6b0:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800e6b2:	2604      	movs	r6, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800e6b4:	4203      	tst	r3, r0
 800e6b6:	d004      	beq.n	800e6c2 <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e6b8:	2320      	movs	r3, #32
 800e6ba:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
}
 800e6c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800e6c2:	f7ff fec3 	bl	800e44c <HAL_GetTick>
 800e6c6:	9001      	str	r0, [sp, #4]
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e6c8:	6825      	ldr	r5, [r4, #0]
 800e6ca:	682b      	ldr	r3, [r5, #0]
 800e6cc:	421e      	tst	r6, r3
 800e6ce:	d024      	beq.n	800e71a <HAL_ADC_PollForConversion+0x7a>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e6d0:	2380      	movs	r3, #128	@ 0x80
 800e6d2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800e6da:	23c0      	movs	r3, #192	@ 0xc0
 800e6dc:	68ea      	ldr	r2, [r5, #12]
 800e6de:	011b      	lsls	r3, r3, #4
 800e6e0:	421a      	tst	r2, r3
 800e6e2:	d115      	bne.n	800e710 <HAL_ADC_PollForConversion+0x70>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800e6e4:	7ea3      	ldrb	r3, [r4, #26]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d112      	bne.n	800e710 <HAL_ADC_PollForConversion+0x70>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e6ea:	682b      	ldr	r3, [r5, #0]
 800e6ec:	071b      	lsls	r3, r3, #28
 800e6ee:	d50f      	bpl.n	800e710 <HAL_ADC_PollForConversion+0x70>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e6f0:	0028      	movs	r0, r5
 800e6f2:	f7ff fec1 	bl	800e478 <LL_ADC_REG_IsConversionOngoing>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d127      	bne.n	800e74a <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e6fa:	220c      	movs	r2, #12
 800e6fc:	686b      	ldr	r3, [r5, #4]
 800e6fe:	4393      	bics	r3, r2
 800e700:	606b      	str	r3, [r5, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800e702:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e704:	4b17      	ldr	r3, [pc, #92]	@ (800e764 <HAL_ADC_PollForConversion+0xc4>)
 800e706:	401a      	ands	r2, r3
 800e708:	3304      	adds	r3, #4
 800e70a:	33ff      	adds	r3, #255	@ 0xff
 800e70c:	4313      	orrs	r3, r2
 800e70e:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e710:	7e23      	ldrb	r3, [r4, #24]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d022      	beq.n	800e75c <HAL_ADC_PollForConversion+0xbc>
  return HAL_OK;
 800e716:	2000      	movs	r0, #0
 800e718:	e7d2      	b.n	800e6c0 <HAL_ADC_PollForConversion+0x20>
    if (Timeout != HAL_MAX_DELAY)
 800e71a:	1c7b      	adds	r3, r7, #1
 800e71c:	d0d5      	beq.n	800e6ca <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800e71e:	f7ff fe95 	bl	800e44c <HAL_GetTick>
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	1ac0      	subs	r0, r0, r3
 800e726:	42b8      	cmp	r0, r7
 800e728:	d801      	bhi.n	800e72e <HAL_ADC_PollForConversion+0x8e>
 800e72a:	2f00      	cmp	r7, #0
 800e72c:	d1cc      	bne.n	800e6c8 <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e72e:	0032      	movs	r2, r6
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	401a      	ands	r2, r3
 800e736:	421e      	tst	r6, r3
 800e738:	d1c6      	bne.n	800e6c8 <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e73a:	2304      	movs	r3, #4
 800e73c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800e73e:	3454      	adds	r4, #84	@ 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e740:	430b      	orrs	r3, r1
 800e742:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 800e744:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800e746:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 800e748:	e7ba      	b.n	800e6c0 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e74a:	2320      	movs	r3, #32
 800e74c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e74e:	4313      	orrs	r3, r2
 800e750:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e752:	2301      	movs	r3, #1
 800e754:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e756:	4313      	orrs	r3, r2
 800e758:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e75a:	e7d9      	b.n	800e710 <HAL_ADC_PollForConversion+0x70>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e75c:	230c      	movs	r3, #12
 800e75e:	602b      	str	r3, [r5, #0]
 800e760:	e7d9      	b.n	800e716 <HAL_ADC_PollForConversion+0x76>
 800e762:	46c0      	nop			@ (mov r8, r8)
 800e764:	fffffefe 	.word	0xfffffefe

0800e768 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e768:	6803      	ldr	r3, [r0, #0]
 800e76a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800e76c:	4770      	bx	lr

0800e76e <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 800e76e:	4770      	bx	lr

0800e770 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 800e770:	4770      	bx	lr

0800e772 <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800e772:	4770      	bx	lr

0800e774 <HAL_ADC_CalibrationCpltCallback>:
/**
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
 800e774:	4770      	bx	lr

0800e776 <HAL_ADC_ADCReadyCallback>:
/**
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
 800e776:	4770      	bx	lr

0800e778 <HAL_ADC_IRQHandler>:
{
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800e77a:	6803      	ldr	r3, [r0, #0]
{
 800e77c:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800e77e:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800e780:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800e782:	2302      	movs	r3, #2
 800e784:	421e      	tst	r6, r3
 800e786:	d00f      	beq.n	800e7a8 <HAL_ADC_IRQHandler+0x30>
 800e788:	421d      	tst	r5, r3
 800e78a:	d00d      	beq.n	800e7a8 <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e78c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800e78e:	06db      	lsls	r3, r3, #27
 800e790:	d404      	bmi.n	800e79c <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800e792:	2380      	movs	r3, #128	@ 0x80
 800e794:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800e796:	011b      	lsls	r3, r3, #4
 800e798:	4313      	orrs	r3, r2
 800e79a:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800e79c:	0020      	movs	r0, r4
 800e79e:	f000 fbe7 	bl	800ef70 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800e7a8:	2304      	movs	r3, #4
 800e7aa:	421e      	tst	r6, r3
 800e7ac:	d001      	beq.n	800e7b2 <HAL_ADC_IRQHandler+0x3a>
 800e7ae:	421d      	tst	r5, r3
 800e7b0:	d104      	bne.n	800e7bc <HAL_ADC_IRQHandler+0x44>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800e7b2:	2308      	movs	r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800e7b4:	421e      	tst	r6, r3
 800e7b6:	d02c      	beq.n	800e812 <HAL_ADC_IRQHandler+0x9a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800e7b8:	421d      	tst	r5, r3
 800e7ba:	d02a      	beq.n	800e812 <HAL_ADC_IRQHandler+0x9a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e7bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e7be:	06db      	lsls	r3, r3, #27
 800e7c0:	d404      	bmi.n	800e7cc <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e7c2:	2380      	movs	r3, #128	@ 0x80
 800e7c4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e7cc:	23c0      	movs	r3, #192	@ 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800e7ce:	6827      	ldr	r7, [r4, #0]
 800e7d0:	011b      	lsls	r3, r3, #4
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	421a      	tst	r2, r3
 800e7d6:	d116      	bne.n	800e806 <HAL_ADC_IRQHandler+0x8e>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800e7d8:	7ea3      	ldrb	r3, [r4, #26]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d113      	bne.n	800e806 <HAL_ADC_IRQHandler+0x8e>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	071b      	lsls	r3, r3, #28
 800e7e2:	d510      	bpl.n	800e806 <HAL_ADC_IRQHandler+0x8e>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e7e4:	0038      	movs	r0, r7
 800e7e6:	f7ff fe47 	bl	800e478 <LL_ADC_REG_IsConversionOngoing>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d000      	beq.n	800e7f0 <HAL_ADC_IRQHandler+0x78>
 800e7ee:	e084      	b.n	800e8fa <HAL_ADC_IRQHandler+0x182>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e7f0:	220c      	movs	r2, #12
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4393      	bics	r3, r2
 800e7f6:	607b      	str	r3, [r7, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800e7f8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e7fa:	4b44      	ldr	r3, [pc, #272]	@ (800e90c <HAL_ADC_IRQHandler+0x194>)
 800e7fc:	401a      	ands	r2, r3
 800e7fe:	3304      	adds	r3, #4
 800e800:	33ff      	adds	r3, #255	@ 0xff
 800e802:	4313      	orrs	r3, r2
 800e804:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800e806:	0020      	movs	r0, r4
 800e808:	f7ff ffb1 	bl	800e76e <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e80c:	220c      	movs	r2, #12
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800e812:	2780      	movs	r7, #128	@ 0x80
 800e814:	423e      	tst	r6, r7
 800e816:	d00b      	beq.n	800e830 <HAL_ADC_IRQHandler+0xb8>
 800e818:	423d      	tst	r5, r7
 800e81a:	d009      	beq.n	800e830 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800e81c:	2380      	movs	r3, #128	@ 0x80
 800e81e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e820:	025b      	lsls	r3, r3, #9
 800e822:	4313      	orrs	r3, r2
 800e824:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800e826:	0020      	movs	r0, r4
 800e828:	f7ff ffa2 	bl	800e770 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800e830:	2780      	movs	r7, #128	@ 0x80
 800e832:	007f      	lsls	r7, r7, #1
 800e834:	423e      	tst	r6, r7
 800e836:	d00b      	beq.n	800e850 <HAL_ADC_IRQHandler+0xd8>
 800e838:	423d      	tst	r5, r7
 800e83a:	d009      	beq.n	800e850 <HAL_ADC_IRQHandler+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800e83c:	2380      	movs	r3, #128	@ 0x80
 800e83e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e840:	029b      	lsls	r3, r3, #10
 800e842:	4313      	orrs	r3, r2
 800e844:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800e846:	0020      	movs	r0, r4
 800e848:	f000 fb90 	bl	800ef6c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800e850:	2780      	movs	r7, #128	@ 0x80
 800e852:	00bf      	lsls	r7, r7, #2
 800e854:	423e      	tst	r6, r7
 800e856:	d00b      	beq.n	800e870 <HAL_ADC_IRQHandler+0xf8>
 800e858:	423d      	tst	r5, r7
 800e85a:	d009      	beq.n	800e870 <HAL_ADC_IRQHandler+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800e85c:	2380      	movs	r3, #128	@ 0x80
 800e85e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e860:	02db      	lsls	r3, r3, #11
 800e862:	4313      	orrs	r3, r2
 800e864:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800e866:	0020      	movs	r0, r4
 800e868:	f000 fb81 	bl	800ef6e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800e86c:	6823      	ldr	r3, [r4, #0]
 800e86e:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800e870:	2310      	movs	r3, #16
 800e872:	421e      	tst	r6, r3
 800e874:	d017      	beq.n	800e8a6 <HAL_ADC_IRQHandler+0x12e>
 800e876:	421d      	tst	r5, r3
 800e878:	d015      	beq.n	800e8a6 <HAL_ADC_IRQHandler+0x12e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800e87a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d003      	beq.n	800e888 <HAL_ADC_IRQHandler+0x110>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800e880:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	079b      	lsls	r3, r3, #30
 800e886:	d00b      	beq.n	800e8a0 <HAL_ADC_IRQHandler+0x128>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800e888:	2380      	movs	r3, #128	@ 0x80
 800e88a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e88c:	00db      	lsls	r3, r3, #3
 800e88e:	4313      	orrs	r3, r2
 800e890:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e892:	2302      	movs	r3, #2
 800e894:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800e896:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e898:	4313      	orrs	r3, r2
 800e89a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800e89c:	f7ff ff69 	bl	800e772 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800e8a0:	2210      	movs	r2, #16
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	421e      	tst	r6, r3
 800e8aa:	d00f      	beq.n	800e8cc <HAL_ADC_IRQHandler+0x154>
 800e8ac:	421d      	tst	r5, r3
 800e8ae:	d00d      	beq.n	800e8cc <HAL_ADC_IRQHandler+0x154>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e8b0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e8b2:	06d2      	lsls	r2, r2, #27
 800e8b4:	d402      	bmi.n	800e8bc <HAL_ADC_IRQHandler+0x144>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e8b6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ADCReadyCallback(hadc);
 800e8bc:	0020      	movs	r0, r4
 800e8be:	f7ff ff5a 	bl	800e776 <HAL_ADC_ADCReadyCallback>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800e8c2:	2101      	movs	r1, #1
 800e8c4:	6822      	ldr	r2, [r4, #0]
 800e8c6:	6853      	ldr	r3, [r2, #4]
 800e8c8:	438b      	bics	r3, r1
 800e8ca:	6053      	str	r3, [r2, #4]
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 800e8cc:	2780      	movs	r7, #128	@ 0x80
 800e8ce:	013f      	lsls	r7, r7, #4
 800e8d0:	423e      	tst	r6, r7
 800e8d2:	d006      	beq.n	800e8e2 <HAL_ADC_IRQHandler+0x16a>
 800e8d4:	423d      	tst	r5, r7
 800e8d6:	d004      	beq.n	800e8e2 <HAL_ADC_IRQHandler+0x16a>
    HAL_ADC_CalibrationCpltCallback(hadc);
 800e8d8:	0020      	movs	r0, r4
 800e8da:	f7ff ff4b 	bl	800e774 <HAL_ADC_CalibrationCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800e8e2:	2780      	movs	r7, #128	@ 0x80
 800e8e4:	01bf      	lsls	r7, r7, #6
 800e8e6:	423e      	tst	r6, r7
 800e8e8:	d006      	beq.n	800e8f8 <HAL_ADC_IRQHandler+0x180>
 800e8ea:	423d      	tst	r5, r7
 800e8ec:	d004      	beq.n	800e8f8 <HAL_ADC_IRQHandler+0x180>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800e8ee:	0020      	movs	r0, r4
 800e8f0:	f000 fb3f 	bl	800ef72 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800e8f4:	6823      	ldr	r3, [r4, #0]
 800e8f6:	601f      	str	r7, [r3, #0]
}
 800e8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8fa:	2320      	movs	r3, #32
 800e8fc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e8fe:	4313      	orrs	r3, r2
 800e900:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e902:	2301      	movs	r3, #1
 800e904:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e906:	4313      	orrs	r3, r2
 800e908:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e90a:	e77c      	b.n	800e806 <HAL_ADC_IRQHandler+0x8e>
 800e90c:	fffffefe 	.word	0xfffffefe

0800e910 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800e910:	2300      	movs	r3, #0
{
 800e912:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e914:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 800e916:	9305      	str	r3, [sp, #20]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800e918:	0003      	movs	r3, r0
{
 800e91a:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hadc);
 800e91c:	3354      	adds	r3, #84	@ 0x54
 800e91e:	781a      	ldrb	r2, [r3, #0]
{
 800e920:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800e922:	2002      	movs	r0, #2
 800e924:	2a01      	cmp	r2, #1
 800e926:	d04b      	beq.n	800e9c0 <HAL_ADC_ConfigChannel+0xb0>
 800e928:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e92a:	692f      	ldr	r7, [r5, #16]
  __HAL_LOCK(hadc);
 800e92c:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e92e:	682e      	ldr	r6, [r5, #0]
 800e930:	0030      	movs	r0, r6
 800e932:	f7ff fda1 	bl	800e478 <LL_ADC_REG_IsConversionOngoing>
 800e936:	2800      	cmp	r0, #0
 800e938:	d000      	beq.n	800e93c <HAL_ADC_ConfigChannel+0x2c>
 800e93a:	e0b6      	b.n	800eaaa <HAL_ADC_ConfigChannel+0x19a>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800e93c:	9b01      	ldr	r3, [sp, #4]
 800e93e:	2280      	movs	r2, #128	@ 0x80
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	0612      	lsls	r2, r2, #24
 800e944:	9300      	str	r3, [sp, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800e946:	9b01      	ldr	r3, [sp, #4]
 800e948:	681c      	ldr	r4, [r3, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e94a:	2304      	movs	r3, #4
 800e94c:	439f      	bics	r7, r3
    if (pConfig->Rank != ADC_RANK_NONE)
 800e94e:	9b00      	ldr	r3, [sp, #0]
 800e950:	2b02      	cmp	r3, #2
 800e952:	d100      	bne.n	800e956 <HAL_ADC_ConfigChannel+0x46>
 800e954:	e081      	b.n	800ea5a <HAL_ADC_ConfigChannel+0x14a>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e956:	0263      	lsls	r3, r4, #9
 800e958:	0a5b      	lsrs	r3, r3, #9
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e95a:	4297      	cmp	r7, r2
 800e95c:	d132      	bne.n	800e9c4 <HAL_ADC_ConfigChannel+0xb4>
 800e95e:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
  MODIFY_REG(ADCx->CHSELR,
 800e960:	4313      	orrs	r3, r2
 800e962:	62b3      	str	r3, [r6, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 800e964:	9b01      	ldr	r3, [sp, #4]
 800e966:	6971      	ldr	r1, [r6, #20]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	0222      	lsls	r2, r4, #8
 800e96c:	4852      	ldr	r0, [pc, #328]	@ (800eab8 <HAL_ADC_ConfigChannel+0x1a8>)
 800e96e:	4013      	ands	r3, r2
 800e970:	4003      	ands	r3, r0
 800e972:	4391      	bics	r1, r2
 800e974:	430b      	orrs	r3, r1
 800e976:	6173      	str	r3, [r6, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e978:	2c00      	cmp	r4, #0
 800e97a:	da1d      	bge.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e97c:	21e0      	movs	r1, #224	@ 0xe0
 800e97e:	4b4f      	ldr	r3, [pc, #316]	@ (800eabc <HAL_ADC_ConfigChannel+0x1ac>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e980:	484f      	ldr	r0, [pc, #316]	@ (800eac0 <HAL_ADC_ConfigChannel+0x1b0>)
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	0449      	lsls	r1, r1, #17
 800e986:	4011      	ands	r1, r2
 800e988:	4284      	cmp	r4, r0
 800e98a:	d152      	bne.n	800ea32 <HAL_ADC_ConfigChannel+0x122>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800e98c:	2080      	movs	r0, #128	@ 0x80
 800e98e:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e990:	4202      	tst	r2, r0
 800e992:	d111      	bne.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	4c4b      	ldr	r4, [pc, #300]	@ (800eac4 <HAL_ADC_ConfigChannel+0x1b4>)
 800e998:	4022      	ands	r2, r4
 800e99a:	430a      	orrs	r2, r1
 800e99c:	4310      	orrs	r0, r2
 800e99e:	6018      	str	r0, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e9a0:	4b49      	ldr	r3, [pc, #292]	@ (800eac8 <HAL_ADC_ConfigChannel+0x1b8>)
 800e9a2:	494a      	ldr	r1, [pc, #296]	@ (800eacc <HAL_ADC_ConfigChannel+0x1bc>)
 800e9a4:	6818      	ldr	r0, [r3, #0]
 800e9a6:	f7f1 fbdf 	bl	8000168 <__udivsi3>
 800e9aa:	1c43      	adds	r3, r0, #1
 800e9ac:	200c      	movs	r0, #12
 800e9ae:	4358      	muls	r0, r3
 800e9b0:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 800e9b2:	9b05      	ldr	r3, [sp, #20]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d138      	bne.n	800ea2a <HAL_ADC_ConfigChannel+0x11a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e9b8:	2000      	movs	r0, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	3554      	adds	r5, #84	@ 0x54
 800e9be:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 800e9c0:	b007      	add	sp, #28
 800e9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800e9c4:	221f      	movs	r2, #31
 800e9c6:	210f      	movs	r1, #15
 800e9c8:	9f00      	ldr	r7, [sp, #0]
 800e9ca:	4017      	ands	r7, r2
 800e9cc:	40b9      	lsls	r1, r7
 800e9ce:	43c8      	mvns	r0, r1
 800e9d0:	9002      	str	r0, [sp, #8]
 800e9d2:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 800e9d4:	4388      	bics	r0, r1
 800e9d6:	9003      	str	r0, [sp, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d112      	bne.n	800ea02 <HAL_ADC_ConfigChannel+0xf2>
 800e9dc:	0ea3      	lsrs	r3, r4, #26
 800e9de:	4013      	ands	r3, r2
 800e9e0:	40bb      	lsls	r3, r7
 800e9e2:	9a03      	ldr	r2, [sp, #12]
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	662b      	str	r3, [r5, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800e9e8:	9b00      	ldr	r3, [sp, #0]
 800e9ea:	69ea      	ldr	r2, [r5, #28]
 800e9ec:	089b      	lsrs	r3, r3, #2
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d8b7      	bhi.n	800e964 <HAL_ADC_ConfigChannel+0x54>
  MODIFY_REG(ADCx->CHSELR,
 800e9f4:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800e9f6:	9902      	ldr	r1, [sp, #8]
 800e9f8:	00a3      	lsls	r3, r4, #2
 800e9fa:	0f1b      	lsrs	r3, r3, #28
 800e9fc:	40bb      	lsls	r3, r7
 800e9fe:	400a      	ands	r2, r1
 800ea00:	e7ae      	b.n	800e960 <HAL_ADC_ConfigChannel+0x50>
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800ea02:	0020      	movs	r0, r4
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800ea04:	0013      	movs	r3, r2
  for (value >>= 1U; value != 0U; value >>= 1U)
 800ea06:	0861      	lsrs	r1, r4, #1
 800ea08:	2900      	cmp	r1, #0
 800ea0a:	d107      	bne.n	800ea1c <HAL_ADC_ConfigChannel+0x10c>
  result <<= s;                        /* shift when v's highest bits are zero */
 800ea0c:	4098      	lsls	r0, r3
    return 32U;
 800ea0e:	2320      	movs	r3, #32
  if (value == 0U)
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d0e5      	beq.n	800e9e0 <HAL_ADC_ConfigChannel+0xd0>
  return __builtin_clz(value);
 800ea14:	f7f1 fd96 	bl	8000544 <__clzsi2>
 800ea18:	b2c3      	uxtb	r3, r0
 800ea1a:	e7e1      	b.n	800e9e0 <HAL_ADC_ConfigChannel+0xd0>
    result |= value & 1U;
 800ea1c:	2201      	movs	r2, #1
    result <<= 1U;
 800ea1e:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 800ea20:	400a      	ands	r2, r1
 800ea22:	4310      	orrs	r0, r2
    s--;
 800ea24:	3b01      	subs	r3, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 800ea26:	0849      	lsrs	r1, r1, #1
 800ea28:	e7ee      	b.n	800ea08 <HAL_ADC_ConfigChannel+0xf8>
            wait_loop_index--;
 800ea2a:	9b05      	ldr	r3, [sp, #20]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	e7bf      	b.n	800e9b2 <HAL_ADC_ConfigChannel+0xa2>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800ea32:	4827      	ldr	r0, [pc, #156]	@ (800ead0 <HAL_ADC_ConfigChannel+0x1c0>)
 800ea34:	4284      	cmp	r4, r0
 800ea36:	d10a      	bne.n	800ea4e <HAL_ADC_ConfigChannel+0x13e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ea38:	2080      	movs	r0, #128	@ 0x80
 800ea3a:	0440      	lsls	r0, r0, #17
 800ea3c:	4202      	tst	r2, r0
 800ea3e:	d1bb      	bne.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	4c20      	ldr	r4, [pc, #128]	@ (800eac4 <HAL_ADC_ConfigChannel+0x1b4>)
 800ea44:	4022      	ands	r2, r4
 800ea46:	430a      	orrs	r2, r1
 800ea48:	4310      	orrs	r0, r2
 800ea4a:	6018      	str	r0, [r3, #0]
}
 800ea4c:	e7b4      	b.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800ea4e:	4821      	ldr	r0, [pc, #132]	@ (800ead4 <HAL_ADC_ConfigChannel+0x1c4>)
 800ea50:	4284      	cmp	r4, r0
 800ea52:	d1b1      	bne.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ea54:	2080      	movs	r0, #128	@ 0x80
 800ea56:	03c0      	lsls	r0, r0, #15
 800ea58:	e7f0      	b.n	800ea3c <HAL_ADC_ConfigChannel+0x12c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800ea5a:	4297      	cmp	r7, r2
 800ea5c:	d104      	bne.n	800ea68 <HAL_ADC_ConfigChannel+0x158>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800ea5e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800ea60:	0262      	lsls	r2, r4, #9
 800ea62:	0a52      	lsrs	r2, r2, #9
 800ea64:	4393      	bics	r3, r2
 800ea66:	62b3      	str	r3, [r6, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800ea68:	2c00      	cmp	r4, #0
 800ea6a:	daa5      	bge.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ea6c:	4b13      	ldr	r3, [pc, #76]	@ (800eabc <HAL_ADC_ConfigChannel+0x1ac>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ea6e:	4914      	ldr	r1, [pc, #80]	@ (800eac0 <HAL_ADC_ConfigChannel+0x1b0>)
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	428c      	cmp	r4, r1
 800ea74:	d108      	bne.n	800ea88 <HAL_ADC_ConfigChannel+0x178>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ea76:	21a0      	movs	r1, #160	@ 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ea78:	6818      	ldr	r0, [r3, #0]
 800ea7a:	0449      	lsls	r1, r1, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ea7c:	400a      	ands	r2, r1
 800ea7e:	4911      	ldr	r1, [pc, #68]	@ (800eac4 <HAL_ADC_ConfigChannel+0x1b4>)
 800ea80:	4001      	ands	r1, r0
 800ea82:	430a      	orrs	r2, r1
 800ea84:	601a      	str	r2, [r3, #0]
}
 800ea86:	e797      	b.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800ea88:	4911      	ldr	r1, [pc, #68]	@ (800ead0 <HAL_ADC_ConfigChannel+0x1c0>)
 800ea8a:	428c      	cmp	r4, r1
 800ea8c:	d103      	bne.n	800ea96 <HAL_ADC_ConfigChannel+0x186>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ea8e:	21c0      	movs	r1, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ea90:	6818      	ldr	r0, [r3, #0]
 800ea92:	0409      	lsls	r1, r1, #16
 800ea94:	e7f2      	b.n	800ea7c <HAL_ADC_ConfigChannel+0x16c>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ea96:	490f      	ldr	r1, [pc, #60]	@ (800ead4 <HAL_ADC_ConfigChannel+0x1c4>)
 800ea98:	428c      	cmp	r4, r1
 800ea9a:	d000      	beq.n	800ea9e <HAL_ADC_ConfigChannel+0x18e>
 800ea9c:	e78c      	b.n	800e9b8 <HAL_ADC_ConfigChannel+0xa8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ea9e:	20c0      	movs	r0, #192	@ 0xc0
 800eaa0:	0440      	lsls	r0, r0, #17
 800eaa2:	4002      	ands	r2, r0
 800eaa4:	6819      	ldr	r1, [r3, #0]
 800eaa6:	4807      	ldr	r0, [pc, #28]	@ (800eac4 <HAL_ADC_ConfigChannel+0x1b4>)
 800eaa8:	e7ea      	b.n	800ea80 <HAL_ADC_ConfigChannel+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800eaaa:	2320      	movs	r3, #32
 800eaac:	6daa      	ldr	r2, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800eaae:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800eab0:	4313      	orrs	r3, r2
 800eab2:	65ab      	str	r3, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800eab4:	e781      	b.n	800e9ba <HAL_ADC_ConfigChannel+0xaa>
 800eab6:	46c0      	nop			@ (mov r8, r8)
 800eab8:	7fffff00 	.word	0x7fffff00
 800eabc:	40012708 	.word	0x40012708
 800eac0:	ac000800 	.word	0xac000800
 800eac4:	fe3fffff 	.word	0xfe3fffff
 800eac8:	20000050 	.word	0x20000050
 800eacc:	00030d40 	.word	0x00030d40
 800ead0:	b4002000 	.word	0xb4002000
 800ead4:	b0001000 	.word	0xb0001000

0800ead8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800ead8:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800eada:	6805      	ldr	r5, [r0, #0]
{
 800eadc:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800eade:	0028      	movs	r0, r5
 800eae0:	f7ff fcca 	bl	800e478 <LL_ADC_REG_IsConversionOngoing>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d101      	bne.n	800eaec <ADC_ConversionStop+0x14>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800eae8:	2000      	movs	r0, #0
}
 800eaea:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800eaec:	68ab      	ldr	r3, [r5, #8]
 800eaee:	079b      	lsls	r3, r3, #30
 800eaf0:	d405      	bmi.n	800eafe <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800eaf2:	68aa      	ldr	r2, [r5, #8]
 800eaf4:	4b0f      	ldr	r3, [pc, #60]	@ (800eb34 <ADC_ConversionStop+0x5c>)
 800eaf6:	401a      	ands	r2, r3
 800eaf8:	2310      	movs	r3, #16
 800eafa:	4313      	orrs	r3, r2
 800eafc:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800eafe:	f7ff fca5 	bl	800e44c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800eb02:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800eb04:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	4233      	tst	r3, r6
 800eb0c:	d0ec      	beq.n	800eae8 <ADC_ConversionStop+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800eb0e:	f7ff fc9d 	bl	800e44c <HAL_GetTick>
 800eb12:	1b40      	subs	r0, r0, r5
 800eb14:	2802      	cmp	r0, #2
 800eb16:	d9f6      	bls.n	800eb06 <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	4233      	tst	r3, r6
 800eb1e:	d0f2      	beq.n	800eb06 <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eb20:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eb22:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eb24:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800eb26:	4313      	orrs	r3, r2
 800eb28:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eb2a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800eb2c:	4303      	orrs	r3, r0
 800eb2e:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800eb30:	e7db      	b.n	800eaea <ADC_ConversionStop+0x12>
 800eb32:	46c0      	nop			@ (mov r8, r8)
 800eb34:	7fffffe8 	.word	0x7fffffe8

0800eb38 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800eb38:	2300      	movs	r3, #0
{
 800eb3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800eb3c:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800eb3e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800eb40:	6891      	ldr	r1, [r2, #8]
 800eb42:	3301      	adds	r3, #1
{
 800eb44:	0004      	movs	r4, r0
 800eb46:	4219      	tst	r1, r3
 800eb48:	d001      	beq.n	800eb4e <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800eb4a:	2000      	movs	r0, #0
}
 800eb4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800eb4e:	6890      	ldr	r0, [r2, #8]
 800eb50:	4922      	ldr	r1, [pc, #136]	@ (800ebdc <ADC_Enable+0xa4>)
 800eb52:	4208      	tst	r0, r1
 800eb54:	d008      	beq.n	800eb68 <ADC_Enable+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eb56:	2210      	movs	r2, #16
 800eb58:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800eb5a:	430a      	orrs	r2, r1
 800eb5c:	65a2      	str	r2, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eb5e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800eb60:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800eb62:	2001      	movs	r0, #1
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eb64:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 800eb66:	e7f1      	b.n	800eb4c <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 800eb68:	6891      	ldr	r1, [r2, #8]
 800eb6a:	4f1d      	ldr	r7, [pc, #116]	@ (800ebe0 <ADC_Enable+0xa8>)
 800eb6c:	4039      	ands	r1, r7
 800eb6e:	430b      	orrs	r3, r1
 800eb70:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800eb72:	4b1c      	ldr	r3, [pc, #112]	@ (800ebe4 <ADC_Enable+0xac>)
 800eb74:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800eb76:	021b      	lsls	r3, r3, #8
 800eb78:	d421      	bmi.n	800ebbe <ADC_Enable+0x86>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800eb7a:	7e63      	ldrb	r3, [r4, #25]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d0e4      	beq.n	800eb4a <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 800eb80:	f7ff fc64 	bl	800e44c <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800eb84:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 800eb86:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800eb88:	6822      	ldr	r2, [r4, #0]
 800eb8a:	6813      	ldr	r3, [r2, #0]
 800eb8c:	422b      	tst	r3, r5
 800eb8e:	d1dc      	bne.n	800eb4a <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800eb90:	6893      	ldr	r3, [r2, #8]
 800eb92:	422b      	tst	r3, r5
 800eb94:	d103      	bne.n	800eb9e <ADC_Enable+0x66>
  MODIFY_REG(ADCx->CR,
 800eb96:	6893      	ldr	r3, [r2, #8]
 800eb98:	403b      	ands	r3, r7
 800eb9a:	432b      	orrs	r3, r5
 800eb9c:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800eb9e:	f7ff fc55 	bl	800e44c <HAL_GetTick>
 800eba2:	1b80      	subs	r0, r0, r6
 800eba4:	2802      	cmp	r0, #2
 800eba6:	d9ef      	bls.n	800eb88 <ADC_Enable+0x50>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800eba8:	6823      	ldr	r3, [r4, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	422b      	tst	r3, r5
 800ebae:	d1eb      	bne.n	800eb88 <ADC_Enable+0x50>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ebb0:	2310      	movs	r3, #16
 800ebb2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ebb8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800ebba:	432b      	orrs	r3, r5
 800ebbc:	e7d1      	b.n	800eb62 <ADC_Enable+0x2a>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ebbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe8 <ADC_Enable+0xb0>)
 800ebc0:	490a      	ldr	r1, [pc, #40]	@ (800ebec <ADC_Enable+0xb4>)
 800ebc2:	6818      	ldr	r0, [r3, #0]
 800ebc4:	f7f1 fad0 	bl	8000168 <__udivsi3>
 800ebc8:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800ebca:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800ebcc:	9b01      	ldr	r3, [sp, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0d3      	beq.n	800eb7a <ADC_Enable+0x42>
        wait_loop_index--;
 800ebd2:	9b01      	ldr	r3, [sp, #4]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	9301      	str	r3, [sp, #4]
 800ebd8:	e7f8      	b.n	800ebcc <ADC_Enable+0x94>
 800ebda:	46c0      	nop			@ (mov r8, r8)
 800ebdc:	80000017 	.word	0x80000017
 800ebe0:	7fffffe8 	.word	0x7fffffe8
 800ebe4:	40012708 	.word	0x40012708
 800ebe8:	20000050 	.word	0x20000050
 800ebec:	00030d40 	.word	0x00030d40

0800ebf0 <HAL_ADC_Start>:
{
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ebf4:	6800      	ldr	r0, [r0, #0]
 800ebf6:	f7ff fc3f 	bl	800e478 <LL_ADC_REG_IsConversionOngoing>
 800ebfa:	0006      	movs	r6, r0
    __HAL_LOCK(hadc);
 800ebfc:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ebfe:	2e00      	cmp	r6, #0
 800ec00:	d11d      	bne.n	800ec3e <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 800ec02:	0025      	movs	r5, r4
 800ec04:	3554      	adds	r5, #84	@ 0x54
 800ec06:	782b      	ldrb	r3, [r5, #0]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d018      	beq.n	800ec3e <HAL_ADC_Start+0x4e>
 800ec0c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800ec0e:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 800ec10:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 800ec12:	f7ff ff91 	bl	800eb38 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d112      	bne.n	800ec40 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 800ec1a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ec1c:	4b09      	ldr	r3, [pc, #36]	@ (800ec44 <HAL_ADC_Start+0x54>)
 800ec1e:	401a      	ands	r2, r3
 800ec20:	2380      	movs	r3, #128	@ 0x80
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ec26:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800ec28:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ec2a:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800ec2c:	65e0      	str	r0, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ec2e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800ec30:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(ADCx->CR,
 800ec32:	6899      	ldr	r1, [r3, #8]
 800ec34:	4a04      	ldr	r2, [pc, #16]	@ (800ec48 <HAL_ADC_Start+0x58>)
 800ec36:	4011      	ands	r1, r2
 800ec38:	2204      	movs	r2, #4
 800ec3a:	430a      	orrs	r2, r1
 800ec3c:	609a      	str	r2, [r3, #8]
}
 800ec3e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800ec40:	702e      	strb	r6, [r5, #0]
 800ec42:	e7fc      	b.n	800ec3e <HAL_ADC_Start+0x4e>
 800ec44:	fffff0fe 	.word	0xfffff0fe
 800ec48:	7fffffe8 	.word	0x7fffffe8

0800ec4c <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ec4c:	2201      	movs	r2, #1
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ec4e:	6803      	ldr	r3, [r0, #0]
{
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ec54:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ec56:	6899      	ldr	r1, [r3, #8]
 800ec58:	4211      	tst	r1, r2
 800ec5a:	d101      	bne.n	800ec60 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ec5c:	2000      	movs	r0, #0
}
 800ec5e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ec60:	2102      	movs	r1, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 800ec62:	4208      	tst	r0, r1
 800ec64:	d1fa      	bne.n	800ec5c <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ec66:	2005      	movs	r0, #5
 800ec68:	689d      	ldr	r5, [r3, #8]
 800ec6a:	4005      	ands	r5, r0
 800ec6c:	2d01      	cmp	r5, #1
 800ec6e:	d11e      	bne.n	800ecae <ADC_Disable+0x62>
  MODIFY_REG(ADCx->CR,
 800ec70:	689a      	ldr	r2, [r3, #8]
 800ec72:	4813      	ldr	r0, [pc, #76]	@ (800ecc0 <ADC_Disable+0x74>)
 800ec74:	4002      	ands	r2, r0
 800ec76:	4311      	orrs	r1, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ec78:	2203      	movs	r2, #3
 800ec7a:	6099      	str	r1, [r3, #8]
 800ec7c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ec7e:	f7ff fbe5 	bl	800e44c <HAL_GetTick>
 800ec82:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	422b      	tst	r3, r5
 800ec8a:	d0e7      	beq.n	800ec5c <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ec8c:	f7ff fbde 	bl	800e44c <HAL_GetTick>
 800ec90:	1b80      	subs	r0, r0, r6
 800ec92:	2802      	cmp	r0, #2
 800ec94:	d9f6      	bls.n	800ec84 <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	422b      	tst	r3, r5
 800ec9c:	d0f2      	beq.n	800ec84 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ec9e:	2310      	movs	r3, #16
 800eca0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800eca2:	4313      	orrs	r3, r2
 800eca4:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eca6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800eca8:	432b      	orrs	r3, r5
 800ecaa:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800ecac:	e006      	b.n	800ecbc <ADC_Disable+0x70>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ecae:	2310      	movs	r3, #16
 800ecb0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ecb2:	430b      	orrs	r3, r1
 800ecb4:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ecb6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800ecb8:	431a      	orrs	r2, r3
 800ecba:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800ecbc:	2001      	movs	r0, #1
 800ecbe:	e7ce      	b.n	800ec5e <ADC_Disable+0x12>
 800ecc0:	7fffffe8 	.word	0x7fffffe8

0800ecc4 <HAL_ADC_DeInit>:
{
 800ecc4:	b570      	push	{r4, r5, r6, lr}
 800ecc6:	0004      	movs	r4, r0
    return HAL_ERROR;
 800ecc8:	2501      	movs	r5, #1
  if (hadc == NULL)
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d040      	beq.n	800ed50 <HAL_ADC_DeInit+0x8c>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800ecce:	2302      	movs	r3, #2
 800ecd0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ecd6:	f7ff feff 	bl	800ead8 <ADC_ConversionStop>
 800ecda:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800ecdc:	d10b      	bne.n	800ecf6 <HAL_ADC_DeInit+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800ecde:	0020      	movs	r0, r4
 800ece0:	f7ff ffb4 	bl	800ec4c <ADC_Disable>
 800ece4:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 800ece6:	d101      	bne.n	800ecec <HAL_ADC_DeInit+0x28>
      hadc->State = HAL_ADC_STATE_READY;
 800ece8:	2301      	movs	r3, #1
 800ecea:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800ecec:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800ecee:	4919      	ldr	r1, [pc, #100]	@ (800ed54 <HAL_ADC_DeInit+0x90>)
 800ecf0:	6893      	ldr	r3, [r2, #8]
 800ecf2:	400b      	ands	r3, r1
 800ecf4:	6093      	str	r3, [r2, #8]
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	4917      	ldr	r1, [pc, #92]	@ (800ed58 <HAL_ADC_DeInit+0x94>)
 800ecfa:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800ecfc:	2600      	movs	r6, #0
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800ecfe:	400a      	ands	r2, r1
 800ed00:	605a      	str	r2, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800ed02:	4a16      	ldr	r2, [pc, #88]	@ (800ed5c <HAL_ADC_DeInit+0x98>)
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800ed04:	4916      	ldr	r1, [pc, #88]	@ (800ed60 <HAL_ADC_DeInit+0x9c>)
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800ed06:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800ed08:	68da      	ldr	r2, [r3, #12]
  HAL_ADC_MspDeInit(hadc);
 800ed0a:	0020      	movs	r0, r4
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800ed0c:	400a      	ands	r2, r1
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800ed0e:	2107      	movs	r1, #7
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800ed10:	60da      	str	r2, [r3, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800ed12:	695a      	ldr	r2, [r3, #20]
  __HAL_UNLOCK(hadc);
 800ed14:	3454      	adds	r4, #84	@ 0x54
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800ed16:	438a      	bics	r2, r1
 800ed18:	615a      	str	r2, [r3, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800ed1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ed1c:	629e      	str	r6, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800ed1e:	6a1a      	ldr	r2, [r3, #32]
 800ed20:	4910      	ldr	r1, [pc, #64]	@ (800ed64 <HAL_ADC_DeInit+0xa0>)
 800ed22:	400a      	ands	r2, r1
 800ed24:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800ed26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed28:	400a      	ands	r2, r1
 800ed2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800ed2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed2e:	400a      	ands	r2, r1
 800ed30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800ed32:	691a      	ldr	r2, [r3, #16]
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800ed34:	490c      	ldr	r1, [pc, #48]	@ (800ed68 <HAL_ADC_DeInit+0xa4>)
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800ed36:	0092      	lsls	r2, r2, #2
 800ed38:	0892      	lsrs	r2, r2, #2
 800ed3a:	611a      	str	r2, [r3, #16]
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800ed3c:	4a0b      	ldr	r2, [pc, #44]	@ (800ed6c <HAL_ADC_DeInit+0xa8>)
 800ed3e:	6813      	ldr	r3, [r2, #0]
 800ed40:	400b      	ands	r3, r1
 800ed42:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 800ed44:	f7fb fb88 	bl	800a458 <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 800ed48:	60a6      	str	r6, [r4, #8]
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800ed4a:	60e6      	str	r6, [r4, #12]
  hadc->State = HAL_ADC_STATE_RESET;
 800ed4c:	6066      	str	r6, [r4, #4]
  __HAL_UNLOCK(hadc);
 800ed4e:	7026      	strb	r6, [r4, #0]
}
 800ed50:	0028      	movs	r0, r5
 800ed52:	bd70      	pop	{r4, r5, r6, pc}
 800ed54:	6fffffe8 	.word	0x6fffffe8
 800ed58:	fffff460 	.word	0xfffff460
 800ed5c:	00000b9f 	.word	0x00000b9f
 800ed60:	831e0200 	.word	0x831e0200
 800ed64:	f000f000 	.word	0xf000f000
 800ed68:	fe03ffff 	.word	0xfe03ffff
 800ed6c:	40012708 	.word	0x40012708

0800ed70 <HAL_ADC_Stop>:
{
 800ed70:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800ed72:	0006      	movs	r6, r0
 800ed74:	3654      	adds	r6, #84	@ 0x54
 800ed76:	7833      	ldrb	r3, [r6, #0]
{
 800ed78:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800ed7a:	2002      	movs	r0, #2
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d012      	beq.n	800eda6 <HAL_ADC_Stop+0x36>
 800ed80:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ed82:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 800ed84:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ed86:	f7ff fea7 	bl	800ead8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d109      	bne.n	800eda2 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800ed8e:	0020      	movs	r0, r4
 800ed90:	f7ff ff5c 	bl	800ec4c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d104      	bne.n	800eda2 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800ed98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed9a:	4a03      	ldr	r2, [pc, #12]	@ (800eda8 <HAL_ADC_Stop+0x38>)
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	431d      	orrs	r5, r3
 800eda0:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800eda2:	2300      	movs	r3, #0
 800eda4:	7033      	strb	r3, [r6, #0]
}
 800eda6:	bd70      	pop	{r4, r5, r6, pc}
 800eda8:	fffffefe 	.word	0xfffffefe

0800edac <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800edac:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800edae:	2300      	movs	r3, #0
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800edb0:	0005      	movs	r5, r0
 800edb2:	2202      	movs	r2, #2
{
 800edb4:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800edb6:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hadc);
 800edb8:	3554      	adds	r5, #84	@ 0x54
 800edba:	782b      	ldrb	r3, [r5, #0]
{
 800edbc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800edbe:	9200      	str	r2, [sp, #0]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d03e      	beq.n	800ee42 <HAL_ADCEx_Calibration_Start+0x96>
 800edc4:	2601      	movs	r6, #1
 800edc6:	702e      	strb	r6, [r5, #0]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800edc8:	f7ff ff40 	bl	800ec4c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800edcc:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 800edce:	9000      	str	r0, [sp, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800edd0:	6899      	ldr	r1, [r3, #8]
 800edd2:	000a      	movs	r2, r1
 800edd4:	4032      	ands	r2, r6
 800edd6:	4231      	tst	r1, r6
 800edd8:	d006      	beq.n	800ede8 <HAL_ADCEx_Calibration_Start+0x3c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edda:	2310      	movs	r3, #16
 800eddc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800edde:	4313      	orrs	r3, r2
    ADC_STATE_CLR_SET(hadc->State,
 800ede0:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800ede2:	2300      	movs	r3, #0
 800ede4:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
 800ede6:	e02c      	b.n	800ee42 <HAL_ADCEx_Calibration_Start+0x96>
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ede8:	26ae      	movs	r6, #174	@ 0xae
    ADC_STATE_CLR_SET(hadc->State,
 800edea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edec:	4942      	ldr	r1, [pc, #264]	@ (800eef8 <HAL_ADCEx_Calibration_Start+0x14c>)
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800edee:	02b6      	lsls	r6, r6, #10
    ADC_STATE_CLR_SET(hadc->State,
 800edf0:	4008      	ands	r0, r1
 800edf2:	3106      	adds	r1, #6
 800edf4:	31ff      	adds	r1, #255	@ 0xff
 800edf6:	4301      	orrs	r1, r0
 800edf8:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800edfa:	68d8      	ldr	r0, [r3, #12]
 800edfc:	493f      	ldr	r1, [pc, #252]	@ (800eefc <HAL_ADCEx_Calibration_Start+0x150>)
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800edfe:	46b4      	mov	ip, r6
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800ee00:	4008      	ands	r0, r1
 800ee02:	9001      	str	r0, [sp, #4]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800ee04:	68d9      	ldr	r1, [r3, #12]
 800ee06:	483e      	ldr	r0, [pc, #248]	@ (800ef00 <HAL_ADCEx_Calibration_Start+0x154>)
 800ee08:	4001      	ands	r1, r0
 800ee0a:	2008      	movs	r0, #8
 800ee0c:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->CR,
 800ee0e:	493d      	ldr	r1, [pc, #244]	@ (800ef04 <HAL_ADCEx_Calibration_Start+0x158>)
 800ee10:	2780      	movs	r7, #128	@ 0x80
 800ee12:	689e      	ldr	r6, [r3, #8]
 800ee14:	063f      	lsls	r7, r7, #24
 800ee16:	400e      	ands	r6, r1
 800ee18:	433e      	orrs	r6, r7
 800ee1a:	609e      	str	r6, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ee1c:	689e      	ldr	r6, [r3, #8]
 800ee1e:	2e00      	cmp	r6, #0
 800ee20:	da12      	bge.n	800ee48 <HAL_ADCEx_Calibration_Start+0x9c>
        wait_loop_index++;
 800ee22:	9e02      	ldr	r6, [sp, #8]
 800ee24:	3601      	adds	r6, #1
 800ee26:	9602      	str	r6, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ee28:	9e02      	ldr	r6, [sp, #8]
 800ee2a:	4566      	cmp	r6, ip
 800ee2c:	d3f6      	bcc.n	800ee1c <HAL_ADCEx_Calibration_Start+0x70>
          ADC_STATE_CLR_SET(hadc->State,
 800ee2e:	2312      	movs	r3, #18
 800ee30:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ee32:	439a      	bics	r2, r3
 800ee34:	3b02      	subs	r3, #2
 800ee36:	4313      	orrs	r3, r2
 800ee38:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	702b      	strb	r3, [r5, #0]
          return HAL_ERROR;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	9300      	str	r3, [sp, #0]
}
 800ee42:	9800      	ldr	r0, [sp, #0]
 800ee44:	b005      	add	sp, #20
 800ee46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800ee48:	001e      	movs	r6, r3
 800ee4a:	277f      	movs	r7, #127	@ 0x7f
 800ee4c:	36b4      	adds	r6, #180	@ 0xb4
 800ee4e:	6836      	ldr	r6, [r6, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ee50:	3801      	subs	r0, #1
 800ee52:	403e      	ands	r6, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800ee54:	1992      	adds	r2, r2, r6
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d1da      	bne.n	800ee10 <HAL_ADCEx_Calibration_Start+0x64>
  MODIFY_REG(ADCx->CR,
 800ee5a:	2601      	movs	r6, #1
 800ee5c:	6898      	ldr	r0, [r3, #8]
    calibration_factor_accumulated /= calibration_index;
 800ee5e:	08d2      	lsrs	r2, r2, #3
 800ee60:	4008      	ands	r0, r1
 800ee62:	4330      	orrs	r0, r6
 800ee64:	6098      	str	r0, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800ee66:	2080      	movs	r0, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800ee68:	691f      	ldr	r7, [r3, #16]
 800ee6a:	05c0      	lsls	r0, r0, #23
 800ee6c:	4287      	cmp	r7, r0
 800ee6e:	d31c      	bcc.n	800eeaa <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 800ee70:	001e      	movs	r6, r3
 800ee72:	277f      	movs	r7, #127	@ 0x7f
 800ee74:	36b4      	adds	r6, #180	@ 0xb4
 800ee76:	6830      	ldr	r0, [r6, #0]
 800ee78:	43b8      	bics	r0, r7
 800ee7a:	4310      	orrs	r0, r2
 800ee7c:	6030      	str	r0, [r6, #0]
  MODIFY_REG(ADCx->CR,
 800ee7e:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ee80:	2601      	movs	r6, #1
  MODIFY_REG(ADCx->CR,
 800ee82:	4011      	ands	r1, r2
 800ee84:	2202      	movs	r2, #2
 800ee86:	430a      	orrs	r2, r1
 800ee88:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800ee8a:	f7ff fadf 	bl	800e44c <HAL_GetTick>
 800ee8e:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ee90:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ee92:	689a      	ldr	r2, [r3, #8]
 800ee94:	4232      	tst	r2, r6
 800ee96:	d11e      	bne.n	800eed6 <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800ee98:	68da      	ldr	r2, [r3, #12]
 800ee9a:	9901      	ldr	r1, [sp, #4]
 800ee9c:	430a      	orrs	r2, r1
 800ee9e:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800eea0:	2203      	movs	r2, #3
 800eea2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eea4:	4393      	bics	r3, r2
 800eea6:	4333      	orrs	r3, r6
 800eea8:	e79a      	b.n	800ede0 <HAL_ADCEx_Calibration_Start+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800eeaa:	4817      	ldr	r0, [pc, #92]	@ (800ef08 <HAL_ADCEx_Calibration_Start+0x15c>)
 800eeac:	6807      	ldr	r7, [r0, #0]
 800eeae:	20f0      	movs	r0, #240	@ 0xf0
 800eeb0:	0380      	lsls	r0, r0, #14
 800eeb2:	4038      	ands	r0, r7
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800eeb4:	27e0      	movs	r7, #224	@ 0xe0
 800eeb6:	037f      	lsls	r7, r7, #13
 800eeb8:	42b8      	cmp	r0, r7
 800eeba:	d3d9      	bcc.n	800ee70 <HAL_ADCEx_Calibration_Start+0xc4>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800eebc:	0c80      	lsrs	r0, r0, #18
 800eebe:	3803      	subs	r0, #3
 800eec0:	4086      	lsls	r6, r0
 800eec2:	9603      	str	r6, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 800eec4:	9803      	ldr	r0, [sp, #12]
 800eec6:	0840      	lsrs	r0, r0, #1
          delay_cpu_cycles--;
 800eec8:	9003      	str	r0, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 800eeca:	9803      	ldr	r0, [sp, #12]
 800eecc:	2800      	cmp	r0, #0
 800eece:	d0cf      	beq.n	800ee70 <HAL_ADCEx_Calibration_Start+0xc4>
          delay_cpu_cycles--;
 800eed0:	9803      	ldr	r0, [sp, #12]
 800eed2:	3801      	subs	r0, #1
 800eed4:	e7f8      	b.n	800eec8 <HAL_ADCEx_Calibration_Start+0x11c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800eed6:	f7ff fab9 	bl	800e44c <HAL_GetTick>
 800eeda:	1bc0      	subs	r0, r0, r7
 800eedc:	2802      	cmp	r0, #2
 800eede:	d9d7      	bls.n	800ee90 <HAL_ADCEx_Calibration_Start+0xe4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800eee0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	4233      	tst	r3, r6
 800eee6:	d0d3      	beq.n	800ee90 <HAL_ADCEx_Calibration_Start+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eee8:	2310      	movs	r3, #16
 800eeea:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800eeec:	4313      	orrs	r3, r2
 800eeee:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eef0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800eef2:	4333      	orrs	r3, r6
 800eef4:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800eef6:	e7a2      	b.n	800ee3e <HAL_ADCEx_Calibration_Start+0x92>
 800eef8:	fffffefd 	.word	0xfffffefd
 800eefc:	00008003 	.word	0x00008003
 800ef00:	ffff7ffc 	.word	0xffff7ffc
 800ef04:	7fffffe8 	.word	0x7fffffe8
 800ef08:	40012708 	.word	0x40012708

0800ef0c <HAL_ADCEx_Calibration_GetValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return the selected ADC calibration value */
  return ((hadc->Instance->CALFACT) & 0x0000007FU);
 800ef0c:	6803      	ldr	r3, [r0, #0]
 800ef0e:	33b4      	adds	r3, #180	@ 0xb4
 800ef10:	6818      	ldr	r0, [r3, #0]
 800ef12:	237f      	movs	r3, #127	@ 0x7f
 800ef14:	4018      	ands	r0, r3
}
 800ef16:	4770      	bx	lr

0800ef18 <HAL_ADCEx_Calibration_SetValue>:
  * @param hadc ADC handle
  * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t CalibrationFactor)
{
 800ef18:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  __HAL_LOCK(hadc);
 800ef1a:	0004      	movs	r4, r0
 800ef1c:	3454      	adds	r4, #84	@ 0x54
 800ef1e:	7822      	ldrb	r2, [r4, #0]
{
 800ef20:	0003      	movs	r3, r0
 800ef22:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800ef24:	2002      	movs	r0, #2
 800ef26:	2a01      	cmp	r2, #1
 800ef28:	d016      	beq.n	800ef58 <HAL_ADCEx_Calibration_SetValue+0x40>
 800ef2a:	2101      	movs	r1, #1
 800ef2c:	7021      	strb	r1, [r4, #0]

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ef2e:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ef30:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ef32:	6890      	ldr	r0, [r2, #8]
 800ef34:	4208      	tst	r0, r1
 800ef36:	d010      	beq.n	800ef5a <HAL_ADCEx_Calibration_SetValue+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ef38:	0030      	movs	r0, r6
 800ef3a:	3103      	adds	r1, #3
 800ef3c:	4008      	ands	r0, r1

  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800ef3e:	420e      	tst	r6, r1
 800ef40:	d10b      	bne.n	800ef5a <HAL_ADCEx_Calibration_SetValue+0x42>
     )
  {
    hadc->Instance->CALFACT &= ~ADC_CALFACT_CALFACT;
 800ef42:	0013      	movs	r3, r2
 800ef44:	33b4      	adds	r3, #180	@ 0xb4
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	317b      	adds	r1, #123	@ 0x7b
 800ef4a:	438a      	bics	r2, r1
 800ef4c:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT |= CalibrationFactor;
 800ef4e:	6819      	ldr	r1, [r3, #0]
 800ef50:	4329      	orrs	r1, r5
 800ef52:	6019      	str	r1, [r3, #0]

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800ef54:	2300      	movs	r3, #0
 800ef56:	7023      	strb	r3, [r4, #0]

  return tmp_hal_status;
}
 800ef58:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ef5a:	2220      	movs	r2, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef5c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ef5e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800ef60:	430a      	orrs	r2, r1
 800ef62:	659a      	str	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ef66:	4302      	orrs	r2, r0
 800ef68:	65da      	str	r2, [r3, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
 800ef6a:	e7f3      	b.n	800ef54 <HAL_ADCEx_Calibration_SetValue+0x3c>

0800ef6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800ef6c:	4770      	bx	lr

0800ef6e <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 800ef6e:	4770      	bx	lr

0800ef70 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 800ef70:	4770      	bx	lr

0800ef72 <HAL_ADCEx_ChannelConfigReadyCallback>:
/**
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
 800ef72:	4770      	bx	lr

0800ef74 <HAL_COMP_Init>:
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800ef74:	2300      	movs	r3, #0
{
 800ef76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef78:	b085      	sub	sp, #20
 800ef7a:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800ef7c:	9303      	str	r3, [sp, #12]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800ef7e:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800ef80:	429c      	cmp	r4, r3
 800ef82:	d100      	bne.n	800ef86 <HAL_COMP_Init+0x12>
 800ef84:	e0a8      	b.n	800f0d8 <HAL_COMP_Init+0x164>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800ef86:	6823      	ldr	r3, [r4, #0]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	da00      	bge.n	800ef90 <HAL_COMP_Init+0x1c>
 800ef8e:	e0a3      	b.n	800f0d8 <HAL_COMP_Init+0x164>
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800ef90:	0025      	movs	r5, r4
 800ef92:	3529      	adds	r5, #41	@ 0x29
 800ef94:	782a      	ldrb	r2, [r5, #0]
 800ef96:	b2d3      	uxtb	r3, r2
 800ef98:	2a00      	cmp	r2, #0
 800ef9a:	d106      	bne.n	800efaa <HAL_COMP_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800ef9c:	0022      	movs	r2, r4
 800ef9e:	3228      	adds	r2, #40	@ 0x28
 800efa0:	7013      	strb	r3, [r2, #0]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800efa2:	0020      	movs	r0, r4
      COMP_CLEAR_ERRORCODE(hcomp);
 800efa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_COMP_MspInit(hcomp);
 800efa6:	f7fb fa6f 	bl	800a488 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800efaa:	6826      	ldr	r6, [r4, #0]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800efac:	6920      	ldr	r0, [r4, #16]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800efae:	6833      	ldr	r3, [r6, #0]
               | hcomp->Init.Mode
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800efb0:	6831      	ldr	r1, [r6, #0]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800efb2:	9301      	str	r3, [sp, #4]
               | hcomp->Init.InputPlus
 800efb4:	6963      	ldr	r3, [r4, #20]
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */

#if defined(COMP2)
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800efb6:	6867      	ldr	r7, [r4, #4]
               | hcomp->Init.InputPlus
 800efb8:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 800efba:	6a20      	ldr	r0, [r4, #32]
 800efbc:	4303      	orrs	r3, r0
               | hcomp->Init.Hysteresis
 800efbe:	69a0      	ldr	r0, [r4, #24]
 800efc0:	4303      	orrs	r3, r0
               | hcomp->Init.OutputPol
 800efc2:	69e0      	ldr	r0, [r4, #28]
 800efc4:	4303      	orrs	r3, r0
    tmp_csr = (hcomp->Init.InputMinus
 800efc6:	68e0      	ldr	r0, [r4, #12]
 800efc8:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 800efca:	484a      	ldr	r0, [pc, #296]	@ (800f0f4 <HAL_COMP_Init+0x180>)
 800efcc:	4001      	ands	r1, r0
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800efce:	2080      	movs	r0, #128	@ 0x80
    MODIFY_REG(hcomp->Instance->CSR,
 800efd0:	430b      	orrs	r3, r1
 800efd2:	6033      	str	r3, [r6, #0]
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800efd4:	4948      	ldr	r1, [pc, #288]	@ (800f0f8 <HAL_COMP_Init+0x184>)
 800efd6:	4b49      	ldr	r3, [pc, #292]	@ (800f0fc <HAL_COMP_Init+0x188>)
 800efd8:	0100      	lsls	r0, r0, #4
 800efda:	4287      	cmp	r7, r0
 800efdc:	d116      	bne.n	800f00c <HAL_COMP_Init+0x98>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	4001      	ands	r1, r0
 800efe2:	6019      	str	r1, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800efe4:	6859      	ldr	r1, [r3, #4]
 800efe6:	4339      	orrs	r1, r7
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800efe8:	6059      	str	r1, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800efea:	2180      	movs	r1, #128	@ 0x80
 800efec:	68a0      	ldr	r0, [r4, #8]
 800efee:	01c9      	lsls	r1, r1, #7
 800eff0:	4288      	cmp	r0, r1
 800eff2:	d018      	beq.n	800f026 <HAL_COMP_Init+0xb2>
 800eff4:	27a0      	movs	r7, #160	@ 0xa0
 800eff6:	01ff      	lsls	r7, r7, #7
 800eff8:	42b8      	cmp	r0, r7
 800effa:	d01b      	beq.n	800f034 <HAL_COMP_Init+0xc0>
 800effc:	2801      	cmp	r0, #1
 800effe:	d03a      	beq.n	800f076 <HAL_COMP_Init+0x102>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
        break;

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800f000:	6819      	ldr	r1, [r3, #0]
 800f002:	483f      	ldr	r0, [pc, #252]	@ (800f100 <HAL_COMP_Init+0x18c>)
 800f004:	4001      	ands	r1, r0
 800f006:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800f008:	6859      	ldr	r1, [r3, #4]
 800f00a:	e011      	b.n	800f030 <HAL_COMP_Init+0xbc>
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800f00c:	22c0      	movs	r2, #192	@ 0xc0
 800f00e:	0152      	lsls	r2, r2, #5
 800f010:	4297      	cmp	r7, r2
 800f012:	d105      	bne.n	800f020 <HAL_COMP_Init+0xac>
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800f014:	681f      	ldr	r7, [r3, #0]
 800f016:	4338      	orrs	r0, r7
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800f018:	6018      	str	r0, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800f01a:	6858      	ldr	r0, [r3, #4]
 800f01c:	4001      	ands	r1, r0
 800f01e:	e7e3      	b.n	800efe8 <HAL_COMP_Init+0x74>
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	4008      	ands	r0, r1
 800f024:	e7f8      	b.n	800f018 <HAL_COMP_Init+0xa4>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800f026:	6819      	ldr	r1, [r3, #0]
 800f028:	4308      	orrs	r0, r1
 800f02a:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800f02c:	6859      	ldr	r1, [r3, #4]
 800f02e:	4834      	ldr	r0, [pc, #208]	@ (800f100 <HAL_COMP_Init+0x18c>)
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800f030:	4001      	ands	r1, r0
 800f032:	e005      	b.n	800f040 <HAL_COMP_Init+0xcc>
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	4f32      	ldr	r7, [pc, #200]	@ (800f100 <HAL_COMP_Init+0x18c>)
 800f038:	4038      	ands	r0, r7
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800f03a:	6018      	str	r0, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800f03c:	6858      	ldr	r0, [r3, #4]
 800f03e:	4301      	orrs	r1, r0
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800f040:	6059      	str	r1, [r3, #4]
    }


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800f042:	2330      	movs	r3, #48	@ 0x30
 800f044:	6831      	ldr	r1, [r6, #0]
 800f046:	4219      	tst	r1, r3
 800f048:	d118      	bne.n	800f07c <HAL_COMP_Init+0x108>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800f04a:	4b2e      	ldr	r3, [pc, #184]	@ (800f104 <HAL_COMP_Init+0x190>)

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800f04c:	6a64      	ldr	r4, [r4, #36]	@ 0x24
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800f04e:	18f3      	adds	r3, r6, r3
 800f050:	425a      	negs	r2, r3
 800f052:	4153      	adcs	r3, r2
 800f054:	2280      	movs	r2, #128	@ 0x80
 800f056:	425b      	negs	r3, r3
 800f058:	0c5b      	lsrs	r3, r3, #17
 800f05a:	045b      	lsls	r3, r3, #17
 800f05c:	02d2      	lsls	r2, r2, #11
 800f05e:	482a      	ldr	r0, [pc, #168]	@ (800f108 <HAL_COMP_Init+0x194>)
 800f060:	492a      	ldr	r1, [pc, #168]	@ (800f10c <HAL_COMP_Init+0x198>)
 800f062:	189b      	adds	r3, r3, r2
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800f064:	07a2      	lsls	r2, r4, #30
 800f066:	d11c      	bne.n	800f0a2 <HAL_COMP_Init+0x12e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800f068:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800f06a:	439a      	bics	r2, r3
 800f06c:	67c2      	str	r2, [r0, #124]	@ 0x7c
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800f06e:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 800f070:	439a      	bics	r2, r3
 800f072:	67ca      	str	r2, [r1, #124]	@ 0x7c
}
 800f074:	e02c      	b.n	800f0d0 <HAL_COMP_Init+0x15c>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800f076:	6818      	ldr	r0, [r3, #0]
 800f078:	4308      	orrs	r0, r1
 800f07a:	e7de      	b.n	800f03a <HAL_COMP_Init+0xc6>
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800f07c:	9a01      	ldr	r2, [sp, #4]
 800f07e:	421a      	tst	r2, r3
 800f080:	d1e3      	bne.n	800f04a <HAL_COMP_Init+0xd6>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800f082:	4b23      	ldr	r3, [pc, #140]	@ (800f110 <HAL_COMP_Init+0x19c>)
 800f084:	4923      	ldr	r1, [pc, #140]	@ (800f114 <HAL_COMP_Init+0x1a0>)
 800f086:	6818      	ldr	r0, [r3, #0]
 800f088:	f7f1 f86e 	bl	8000168 <__udivsi3>
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	2014      	movs	r0, #20
 800f090:	4358      	muls	r0, r3
 800f092:	9003      	str	r0, [sp, #12]
      while (wait_loop_index != 0UL)
 800f094:	9b03      	ldr	r3, [sp, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d0d7      	beq.n	800f04a <HAL_COMP_Init+0xd6>
        wait_loop_index--;
 800f09a:	9b03      	ldr	r3, [sp, #12]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	9303      	str	r3, [sp, #12]
 800f0a0:	e7f8      	b.n	800f094 <HAL_COMP_Init+0x120>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800f0a2:	4a1d      	ldr	r2, [pc, #116]	@ (800f118 <HAL_COMP_Init+0x1a4>)
 800f0a4:	06e6      	lsls	r6, r4, #27
 800f0a6:	d519      	bpl.n	800f0dc <HAL_COMP_Init+0x168>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800f0a8:	6816      	ldr	r6, [r2, #0]
 800f0aa:	431e      	orrs	r6, r3
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800f0ac:	6016      	str	r6, [r2, #0]
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800f0ae:	06a6      	lsls	r6, r4, #26
 800f0b0:	d517      	bpl.n	800f0e2 <HAL_COMP_Init+0x16e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800f0b2:	6856      	ldr	r6, [r2, #4]
 800f0b4:	431e      	orrs	r6, r3
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800f0b6:	6056      	str	r6, [r2, #4]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800f0b8:	60d3      	str	r3, [r2, #12]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800f0ba:	6113      	str	r3, [r2, #16]
      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
      LL_EXTI_ClearFallingFlag_0_31(exti_line);

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800f0bc:	07a2      	lsls	r2, r4, #30
 800f0be:	d513      	bpl.n	800f0e8 <HAL_COMP_Init+0x174>
  SET_BIT(EXTI->EMR1, ExtiLine);
 800f0c0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800f0c2:	431a      	orrs	r2, r3
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800f0c4:	67c2      	str	r2, [r0, #124]	@ 0x7c
  SET_BIT(EXTI->IMR1, ExtiLine);
 800f0c6:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800f0c8:	07e4      	lsls	r4, r4, #31
 800f0ca:	d5d1      	bpl.n	800f070 <HAL_COMP_Init+0xfc>
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	67cb      	str	r3, [r1, #124]	@ 0x7c
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800f0d0:	782b      	ldrb	r3, [r5, #0]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <HAL_COMP_Init+0x17a>
  HAL_StatusTypeDef status = HAL_OK;
 800f0d6:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800f0d8:	b005      	add	sp, #20
 800f0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800f0dc:	6816      	ldr	r6, [r2, #0]
 800f0de:	439e      	bics	r6, r3
 800f0e0:	e7e4      	b.n	800f0ac <HAL_COMP_Init+0x138>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800f0e2:	6856      	ldr	r6, [r2, #4]
 800f0e4:	439e      	bics	r6, r3
 800f0e6:	e7e6      	b.n	800f0b6 <HAL_COMP_Init+0x142>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800f0e8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800f0ea:	439a      	bics	r2, r3
 800f0ec:	e7ea      	b.n	800f0c4 <HAL_COMP_Init+0x150>
      hcomp->State = HAL_COMP_STATE_READY;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	702b      	strb	r3, [r5, #0]
 800f0f2:	e7f0      	b.n	800f0d6 <HAL_COMP_Init+0x162>
 800f0f4:	fe00700f 	.word	0xfe00700f
 800f0f8:	fffff7ff 	.word	0xfffff7ff
 800f0fc:	40010200 	.word	0x40010200
 800f100:	ffffbfff 	.word	0xffffbfff
 800f104:	bffefe00 	.word	0xbffefe00
 800f108:	40021808 	.word	0x40021808
 800f10c:	40021804 	.word	0x40021804
 800f110:	20000050 	.word	0x20000050
 800f114:	00030d40 	.word	0x00030d40
 800f118:	40021800 	.word	0x40021800

0800f11c <HAL_COMP_DeInit>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_DeInit(COMP_HandleTypeDef *hcomp)
{
 800f11c:	b570      	push	{r4, r5, r6, lr}
 800f11e:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800f120:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800f122:	2c00      	cmp	r4, #0
 800f124:	d00e      	beq.n	800f144 <HAL_COMP_DeInit+0x28>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	2a00      	cmp	r2, #0
 800f12c:	db0a      	blt.n	800f144 <HAL_COMP_DeInit+0x28>
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Set COMP_CSR register to reset value */
    WRITE_REG(hcomp->Instance->CSR, 0x00000000UL);
 800f12e:	2500      	movs	r5, #0

    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    hcomp->MspDeInitCallback(hcomp);
#else
    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    HAL_COMP_MspDeInit(hcomp);
 800f130:	0020      	movs	r0, r4
    WRITE_REG(hcomp->Instance->CSR, 0x00000000UL);
 800f132:	601d      	str	r5, [r3, #0]
    HAL_COMP_MspDeInit(hcomp);
 800f134:	f7fb f9f0 	bl	800a518 <HAL_COMP_MspDeInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Set HAL COMP handle state */
    hcomp->State = HAL_COMP_STATE_RESET;
 800f138:	0023      	movs	r3, r4
  HAL_StatusTypeDef status = HAL_OK;
 800f13a:	0028      	movs	r0, r5
    hcomp->State = HAL_COMP_STATE_RESET;
 800f13c:	3329      	adds	r3, #41	@ 0x29

    /* Release Lock */
    __HAL_UNLOCK(hcomp);
 800f13e:	3428      	adds	r4, #40	@ 0x28
    hcomp->State = HAL_COMP_STATE_RESET;
 800f140:	701d      	strb	r5, [r3, #0]
    __HAL_UNLOCK(hcomp);
 800f142:	7025      	strb	r5, [r4, #0]
  }

  return status;
}
 800f144:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f148 <HAL_COMP_Start>:
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
  __IO uint32_t wait_loop_index = 0UL;
 800f148:	2200      	movs	r2, #0
{
 800f14a:	b513      	push	{r0, r1, r4, lr}
 800f14c:	0003      	movs	r3, r0
  __IO uint32_t wait_loop_index = 0UL;
 800f14e:	9201      	str	r2, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800f150:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800f152:	4293      	cmp	r3, r2
 800f154:	d018      	beq.n	800f188 <HAL_COMP_Start+0x40>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	6811      	ldr	r1, [r2, #0]
 800f15a:	2900      	cmp	r1, #0
 800f15c:	db14      	blt.n	800f188 <HAL_COMP_Start+0x40>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800f15e:	3329      	adds	r3, #41	@ 0x29
 800f160:	781c      	ldrb	r4, [r3, #0]
 800f162:	b2e1      	uxtb	r1, r4
 800f164:	4284      	cmp	r4, r0
 800f166:	d10f      	bne.n	800f188 <HAL_COMP_Start+0x40>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800f168:	6810      	ldr	r0, [r2, #0]
 800f16a:	4301      	orrs	r1, r0
 800f16c:	6011      	str	r1, [r2, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800f16e:	2202      	movs	r2, #2
 800f170:	701a      	strb	r2, [r3, #0]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800f172:	4b08      	ldr	r3, [pc, #32]	@ (800f194 <HAL_COMP_Start+0x4c>)
 800f174:	4908      	ldr	r1, [pc, #32]	@ (800f198 <HAL_COMP_Start+0x50>)
 800f176:	6818      	ldr	r0, [r3, #0]
 800f178:	f7f0 fff6 	bl	8000168 <__udivsi3>
 800f17c:	3001      	adds	r0, #1
 800f17e:	00c0      	lsls	r0, r0, #3
 800f180:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800f182:	9801      	ldr	r0, [sp, #4]
 800f184:	2800      	cmp	r0, #0
 800f186:	d100      	bne.n	800f18a <HAL_COMP_Start+0x42>
      status = HAL_ERROR;
    }
  }

  return status;
}
 800f188:	bd16      	pop	{r1, r2, r4, pc}
        wait_loop_index--;
 800f18a:	9b01      	ldr	r3, [sp, #4]
 800f18c:	3b01      	subs	r3, #1
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	e7f7      	b.n	800f182 <HAL_COMP_Start+0x3a>
 800f192:	46c0      	nop			@ (mov r8, r8)
 800f194:	20000050 	.word	0x20000050
 800f198:	00030d40 	.word	0x00030d40

0800f19c <HAL_COMP_IRQHandler>:
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800f19c:	4a13      	ldr	r2, [pc, #76]	@ (800f1ec <HAL_COMP_IRQHandler+0x50>)
 800f19e:	6803      	ldr	r3, [r0, #0]
{
 800f1a0:	b510      	push	{r4, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d112      	bne.n	800f1cc <HAL_COMP_IRQHandler+0x30>
 800f1a6:	2380      	movs	r3, #128	@ 0x80
 800f1a8:	029b      	lsls	r3, r3, #10
#if defined(COMP2)
  uint32_t comparator_window_mode;
  uint32_t comparator_window_exti_lines;

  comparator_window_mode = READ_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800f1aa:	6811      	ldr	r1, [r2, #0]
  comparator_window_mode |= READ_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800f1ac:	6852      	ldr	r2, [r2, #4]
 800f1ae:	4311      	orrs	r1, r2
 800f1b0:	2280      	movs	r2, #128	@ 0x80
 800f1b2:	0112      	lsls	r2, r2, #4
 800f1b4:	4011      	ands	r1, r2
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800f1b6:	4a0e      	ldr	r2, [pc, #56]	@ (800f1f0 <HAL_COMP_IRQHandler+0x54>)
 800f1b8:	68d4      	ldr	r4, [r2, #12]
 800f1ba:	401c      	ands	r4, r3
 800f1bc:	42a3      	cmp	r3, r4
 800f1be:	d108      	bne.n	800f1d2 <HAL_COMP_IRQHandler+0x36>
  /* Check COMP EXTI flag */
  if (LL_EXTI_IsActiveRisingFlag_0_31(exti_line) != 0UL)
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if (comparator_window_mode != 0UL)
 800f1c0:	2900      	cmp	r1, #0
 800f1c2:	d110      	bne.n	800f1e6 <HAL_COMP_IRQHandler+0x4a>
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800f1c4:	60d3      	str	r3, [r2, #12]

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800f1c6:	f7f9 fa8d 	bl	80086e4 <HAL_COMP_TriggerCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 800f1ca:	bd10      	pop	{r4, pc}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800f1cc:	2380      	movs	r3, #128	@ 0x80
 800f1ce:	02db      	lsls	r3, r3, #11
 800f1d0:	e7eb      	b.n	800f1aa <HAL_COMP_IRQHandler+0xe>
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800f1d2:	6914      	ldr	r4, [r2, #16]
 800f1d4:	401c      	ands	r4, r3
 800f1d6:	42a3      	cmp	r3, r4
 800f1d8:	d1f7      	bne.n	800f1ca <HAL_COMP_IRQHandler+0x2e>
    if (comparator_window_mode != 0UL)
 800f1da:	2900      	cmp	r1, #0
 800f1dc:	d001      	beq.n	800f1e2 <HAL_COMP_IRQHandler+0x46>
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800f1de:	23c0      	movs	r3, #192	@ 0xc0
 800f1e0:	02db      	lsls	r3, r3, #11
 800f1e2:	6113      	str	r3, [r2, #16]
}
 800f1e4:	e7ef      	b.n	800f1c6 <HAL_COMP_IRQHandler+0x2a>
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800f1e6:	23c0      	movs	r3, #192	@ 0xc0
 800f1e8:	02db      	lsls	r3, r3, #11
 800f1ea:	e7eb      	b.n	800f1c4 <HAL_COMP_IRQHandler+0x28>
 800f1ec:	40010200 	.word	0x40010200
 800f1f0:	40021800 	.word	0x40021800

0800f1f4 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f1f4:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f1f6:	24ff      	movs	r4, #255	@ 0xff
 800f1f8:	2203      	movs	r2, #3
 800f1fa:	000b      	movs	r3, r1
 800f1fc:	0021      	movs	r1, r4
 800f1fe:	4002      	ands	r2, r0
 800f200:	00d2      	lsls	r2, r2, #3
 800f202:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f204:	019b      	lsls	r3, r3, #6
 800f206:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f208:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f20a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800f20c:	2800      	cmp	r0, #0
 800f20e:	db0a      	blt.n	800f226 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f210:	24c0      	movs	r4, #192	@ 0xc0
 800f212:	4a0b      	ldr	r2, [pc, #44]	@ (800f240 <HAL_NVIC_SetPriority+0x4c>)
 800f214:	0880      	lsrs	r0, r0, #2
 800f216:	0080      	lsls	r0, r0, #2
 800f218:	1880      	adds	r0, r0, r2
 800f21a:	00a4      	lsls	r4, r4, #2
 800f21c:	5902      	ldr	r2, [r0, r4]
 800f21e:	400a      	ands	r2, r1
 800f220:	4313      	orrs	r3, r2
 800f222:	5103      	str	r3, [r0, r4]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800f224:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f226:	220f      	movs	r2, #15
 800f228:	4010      	ands	r0, r2
 800f22a:	3808      	subs	r0, #8
 800f22c:	4a05      	ldr	r2, [pc, #20]	@ (800f244 <HAL_NVIC_SetPriority+0x50>)
 800f22e:	0880      	lsrs	r0, r0, #2
 800f230:	0080      	lsls	r0, r0, #2
 800f232:	1880      	adds	r0, r0, r2
 800f234:	69c2      	ldr	r2, [r0, #28]
 800f236:	4011      	ands	r1, r2
 800f238:	4319      	orrs	r1, r3
 800f23a:	61c1      	str	r1, [r0, #28]
 800f23c:	e7f2      	b.n	800f224 <HAL_NVIC_SetPriority+0x30>
 800f23e:	46c0      	nop			@ (mov r8, r8)
 800f240:	e000e100 	.word	0xe000e100
 800f244:	e000ed00 	.word	0xe000ed00

0800f248 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f248:	2800      	cmp	r0, #0
 800f24a:	db05      	blt.n	800f258 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f24c:	231f      	movs	r3, #31
 800f24e:	4018      	ands	r0, r3
 800f250:	3b1e      	subs	r3, #30
 800f252:	4083      	lsls	r3, r0
 800f254:	4a01      	ldr	r2, [pc, #4]	@ (800f25c <HAL_NVIC_EnableIRQ+0x14>)
 800f256:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f258:	4770      	bx	lr
 800f25a:	46c0      	nop			@ (mov r8, r8)
 800f25c:	e000e100 	.word	0xe000e100

0800f260 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f260:	2280      	movs	r2, #128	@ 0x80
 800f262:	1e43      	subs	r3, r0, #1
 800f264:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800f266:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d20d      	bcs.n	800f288 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f26c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f26e:	4a07      	ldr	r2, [pc, #28]	@ (800f28c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f270:	4807      	ldr	r0, [pc, #28]	@ (800f290 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f272:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f274:	6a03      	ldr	r3, [r0, #32]
 800f276:	0609      	lsls	r1, r1, #24
 800f278:	021b      	lsls	r3, r3, #8
 800f27a:	0a1b      	lsrs	r3, r3, #8
 800f27c:	430b      	orrs	r3, r1
 800f27e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f280:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f282:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f284:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f286:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800f288:	4770      	bx	lr
 800f28a:	46c0      	nop			@ (mov r8, r8)
 800f28c:	e000e010 	.word	0xe000e010
 800f290:	e000ed00 	.word	0xe000ed00

0800f294 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f294:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f296:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800f298:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800f29a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800f29c:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800f29e:	2c00      	cmp	r4, #0
 800f2a0:	d002      	beq.n	800f2a8 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f2a2:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 800f2a4:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 800f2a6:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f2a8:	241c      	movs	r4, #28
 800f2aa:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f2ac:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 800f2ae:	4025      	ands	r5, r4
 800f2b0:	3c1b      	subs	r4, #27
 800f2b2:	40ac      	lsls	r4, r5
 800f2b4:	6074      	str	r4, [r6, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f2b6:	6804      	ldr	r4, [r0, #0]
 800f2b8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f2ba:	6883      	ldr	r3, [r0, #8]
 800f2bc:	2b10      	cmp	r3, #16
 800f2be:	d102      	bne.n	800f2c6 <DMA_SetConfig+0x32>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f2c0:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f2c2:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f2c4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = SrcAddress;
 800f2c6:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800f2c8:	60e2      	str	r2, [r4, #12]
}
 800f2ca:	e7fb      	b.n	800f2c4 <DMA_SetConfig+0x30>

0800f2cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f2cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f2ce:	6806      	ldr	r6, [r0, #0]
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f2d0:	6c44      	ldr	r4, [r0, #68]	@ 0x44
{
 800f2d2:	0005      	movs	r5, r0

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800f2d4:	b2f0      	uxtb	r0, r6
 800f2d6:	2114      	movs	r1, #20
 800f2d8:	3808      	subs	r0, #8
 800f2da:	f7f0 ff45 	bl	8000168 <__udivsi3>
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f2de:	4b0a      	ldr	r3, [pc, #40]	@ (800f308 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f2e0:	08a4      	lsrs	r4, r4, #2
 800f2e2:	00a4      	lsls	r4, r4, #2
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f2e4:	429e      	cmp	r6, r3
 800f2e6:	d80a      	bhi.n	800f2fe <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f2e8:	4b08      	ldr	r3, [pc, #32]	@ (800f30c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 800f2ea:	18e4      	adds	r4, r4, r3
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f2ec:	4b08      	ldr	r3, [pc, #32]	@ (800f310 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800f2ee:	64ac      	str	r4, [r5, #72]	@ 0x48
 800f2f0:	64eb      	str	r3, [r5, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800f2f2:	231f      	movs	r3, #31
 800f2f4:	4018      	ands	r0, r3
 800f2f6:	3b1e      	subs	r3, #30
 800f2f8:	4083      	lsls	r3, r0
 800f2fa:	652b      	str	r3, [r5, #80]	@ 0x50
}
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800f2fe:	4b05      	ldr	r3, [pc, #20]	@ (800f314 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800f300:	3007      	adds	r0, #7
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800f302:	18e4      	adds	r4, r4, r3
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800f304:	e7f2      	b.n	800f2ec <DMA_CalcDMAMUXChannelBaseAndMask+0x20>
 800f306:	46c0      	nop			@ (mov r8, r8)
 800f308:	40020407 	.word	0x40020407
 800f30c:	40020800 	.word	0x40020800
 800f310:	40020880 	.word	0x40020880
 800f314:	4002081c 	.word	0x4002081c

0800f318 <HAL_DMA_Init>:
{
 800f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800f31c:	2001      	movs	r0, #1
  if (hdma == NULL)
 800f31e:	2c00      	cmp	r4, #0
 800f320:	d04a      	beq.n	800f3b8 <HAL_DMA_Init+0xa0>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f322:	6825      	ldr	r5, [r4, #0]
 800f324:	4b2b      	ldr	r3, [pc, #172]	@ (800f3d4 <HAL_DMA_Init+0xbc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f326:	2114      	movs	r1, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f328:	429d      	cmp	r5, r3
 800f32a:	d846      	bhi.n	800f3ba <HAL_DMA_Init+0xa2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f32c:	4b2a      	ldr	r3, [pc, #168]	@ (800f3d8 <HAL_DMA_Init+0xc0>)
 800f32e:	18e8      	adds	r0, r5, r3
 800f330:	f7f0 ff1a 	bl	8000168 <__udivsi3>
 800f334:	4b29      	ldr	r3, [pc, #164]	@ (800f3dc <HAL_DMA_Init+0xc4>)
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800f336:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA1;
 800f338:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800f33a:	2302      	movs	r3, #2
 800f33c:	1da6      	adds	r6, r4, #6
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f33e:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800f340:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f342:	682b      	ldr	r3, [r5, #0]
 800f344:	4a26      	ldr	r2, [pc, #152]	@ (800f3e0 <HAL_DMA_Init+0xc8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800f346:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f348:	4013      	ands	r3, r2
 800f34a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800f34c:	68e3      	ldr	r3, [r4, #12]
 800f34e:	6921      	ldr	r1, [r4, #16]
 800f350:	433b      	orrs	r3, r7
 800f352:	430b      	orrs	r3, r1
 800f354:	6961      	ldr	r1, [r4, #20]
 800f356:	682a      	ldr	r2, [r5, #0]
 800f358:	430b      	orrs	r3, r1
 800f35a:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f35c:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800f35e:	430b      	orrs	r3, r1
 800f360:	69e1      	ldr	r1, [r4, #28]
 800f362:	430b      	orrs	r3, r1
 800f364:	6a21      	ldr	r1, [r4, #32]
 800f366:	430b      	orrs	r3, r1
 800f368:	4313      	orrs	r3, r2
 800f36a:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f36c:	f7ff ffae 	bl	800f2cc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800f370:	2380      	movs	r3, #128	@ 0x80
 800f372:	01db      	lsls	r3, r3, #7
 800f374:	429f      	cmp	r7, r3
 800f376:	d101      	bne.n	800f37c <HAL_DMA_Init+0x64>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800f378:	2300      	movs	r3, #0
 800f37a:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800f37c:	6862      	ldr	r2, [r4, #4]
 800f37e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f380:	b2d3      	uxtb	r3, r2
 800f382:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f384:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800f386:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f388:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f38a:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f38c:	2a03      	cmp	r2, #3
 800f38e:	d81b      	bhi.n	800f3c8 <HAL_DMA_Init+0xb0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800f390:	4a14      	ldr	r2, [pc, #80]	@ (800f3e4 <HAL_DMA_Init+0xcc>)
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f392:	4815      	ldr	r0, [pc, #84]	@ (800f3e8 <HAL_DMA_Init+0xd0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800f394:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800f396:	2201      	movs	r2, #1
 800f398:	3b01      	subs	r3, #1
 800f39a:	409a      	lsls	r2, r3
 800f39c:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800f39e:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f3a0:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800f3a2:	0089      	lsls	r1, r1, #2
 800f3a4:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f3a6:	65a0      	str	r0, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f3a8:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f3aa:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f3ac:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800f3ae:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f3b0:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 800f3b2:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800f3b4:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800f3b6:	77e0      	strb	r0, [r4, #31]
}
 800f3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800f3ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f3ec <HAL_DMA_Init+0xd4>)
 800f3bc:	18e8      	adds	r0, r5, r3
 800f3be:	f7f0 fed3 	bl	8000168 <__udivsi3>
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800f3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f3f0 <HAL_DMA_Init+0xd8>)
 800f3c4:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA2;
 800f3c6:	e7b7      	b.n	800f338 <HAL_DMA_Init+0x20>
    hdma->DMAmuxRequestGen = 0U;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800f3cc:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800f3ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800f3d0:	e7ec      	b.n	800f3ac <HAL_DMA_Init+0x94>
 800f3d2:	46c0      	nop			@ (mov r8, r8)
 800f3d4:	40020407 	.word	0x40020407
 800f3d8:	bffdfff8 	.word	0xbffdfff8
 800f3dc:	40020000 	.word	0x40020000
 800f3e0:	ffff800f 	.word	0xffff800f
 800f3e4:	1000823f 	.word	0x1000823f
 800f3e8:	40020940 	.word	0x40020940
 800f3ec:	bffdfbf8 	.word	0xbffdfbf8
 800f3f0:	40020400 	.word	0x40020400

0800f3f4 <HAL_DMA_Start_IT>:
{
 800f3f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800f3f6:	1d45      	adds	r5, r0, #5
{
 800f3f8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800f3fa:	7fee      	ldrb	r6, [r5, #31]
{
 800f3fc:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800f3fe:	2002      	movs	r0, #2
 800f400:	2e01      	cmp	r6, #1
 800f402:	d033      	beq.n	800f46c <HAL_DMA_Start_IT+0x78>
 800f404:	3801      	subs	r0, #1
 800f406:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 800f408:	1da7      	adds	r7, r4, #6
 800f40a:	7ffe      	ldrb	r6, [r7, #31]
 800f40c:	46b4      	mov	ip, r6
 800f40e:	4663      	mov	r3, ip
 800f410:	b2f6      	uxtb	r6, r6
 800f412:	9600      	str	r6, [sp, #0]
 800f414:	2600      	movs	r6, #0
 800f416:	4283      	cmp	r3, r0
 800f418:	d130      	bne.n	800f47c <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 800f41a:	3001      	adds	r0, #1
 800f41c:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 800f41e:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f420:	63e6      	str	r6, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800f422:	6828      	ldr	r0, [r5, #0]
 800f424:	9b00      	ldr	r3, [sp, #0]
 800f426:	4398      	bics	r0, r3
 800f428:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f42a:	9b01      	ldr	r3, [sp, #4]
 800f42c:	0020      	movs	r0, r4
 800f42e:	f7ff ff31 	bl	800f294 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800f432:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f434:	42b3      	cmp	r3, r6
 800f436:	d01a      	beq.n	800f46e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f438:	230e      	movs	r3, #14
 800f43a:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f43c:	4313      	orrs	r3, r2
 800f43e:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800f440:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	03d2      	lsls	r2, r2, #15
 800f446:	d504      	bpl.n	800f452 <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800f448:	2280      	movs	r2, #128	@ 0x80
 800f44a:	6819      	ldr	r1, [r3, #0]
 800f44c:	0052      	lsls	r2, r2, #1
 800f44e:	430a      	orrs	r2, r1
 800f450:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800f452:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f454:	2b00      	cmp	r3, #0
 800f456:	d004      	beq.n	800f462 <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800f458:	2280      	movs	r2, #128	@ 0x80
 800f45a:	6819      	ldr	r1, [r3, #0]
 800f45c:	0052      	lsls	r2, r2, #1
 800f45e:	430a      	orrs	r2, r1
 800f460:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800f462:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800f464:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800f466:	682a      	ldr	r2, [r5, #0]
 800f468:	4313      	orrs	r3, r2
 800f46a:	602b      	str	r3, [r5, #0]
}
 800f46c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f46e:	2204      	movs	r2, #4
 800f470:	682b      	ldr	r3, [r5, #0]
 800f472:	4393      	bics	r3, r2
 800f474:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f476:	682a      	ldr	r2, [r5, #0]
 800f478:	230a      	movs	r3, #10
 800f47a:	e7df      	b.n	800f43c <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800f47c:	2380      	movs	r3, #128	@ 0x80
 800f47e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800f480:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 800f482:	e7f3      	b.n	800f46c <HAL_DMA_Start_IT+0x78>

0800f484 <HAL_DMA_IRQHandler>:
{
 800f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f486:	261c      	movs	r6, #28
 800f488:	2704      	movs	r7, #4
 800f48a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f48c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f48e:	4032      	ands	r2, r6
 800f490:	003e      	movs	r6, r7
 800f492:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f494:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800f496:	6803      	ldr	r3, [r0, #0]
 800f498:	681c      	ldr	r4, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f49a:	4235      	tst	r5, r6
 800f49c:	d00d      	beq.n	800f4ba <HAL_DMA_IRQHandler+0x36>
 800f49e:	423c      	tst	r4, r7
 800f4a0:	d00b      	beq.n	800f4ba <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	0692      	lsls	r2, r2, #26
 800f4a6:	d402      	bmi.n	800f4ae <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	43ba      	bics	r2, r7
 800f4ac:	601a      	str	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800f4ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800f4b0:	604e      	str	r6, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d01d      	beq.n	800f4f2 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800f4b6:	4798      	blx	r3
  return;
 800f4b8:	e01b      	b.n	800f4f2 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800f4ba:	2702      	movs	r7, #2
 800f4bc:	003e      	movs	r6, r7
 800f4be:	4096      	lsls	r6, r2
 800f4c0:	4235      	tst	r5, r6
 800f4c2:	d019      	beq.n	800f4f8 <HAL_DMA_IRQHandler+0x74>
 800f4c4:	423c      	tst	r4, r7
 800f4c6:	d017      	beq.n	800f4f8 <HAL_DMA_IRQHandler+0x74>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	0692      	lsls	r2, r2, #26
 800f4cc:	d406      	bmi.n	800f4dc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f4ce:	210a      	movs	r1, #10
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	438a      	bics	r2, r1
 800f4d4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800f4d6:	3909      	subs	r1, #9
 800f4d8:	1d82      	adds	r2, r0, #6
 800f4da:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f4dc:	4a12      	ldr	r2, [pc, #72]	@ (800f528 <HAL_DMA_IRQHandler+0xa4>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d908      	bls.n	800f4f4 <HAL_DMA_IRQHandler+0x70>
 800f4e2:	4b12      	ldr	r3, [pc, #72]	@ (800f52c <HAL_DMA_IRQHandler+0xa8>)
    __HAL_UNLOCK(hdma);
 800f4e4:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f4e6:	605e      	str	r6, [r3, #4]
    __HAL_UNLOCK(hdma);
 800f4e8:	1d43      	adds	r3, r0, #5
 800f4ea:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800f4ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d1e1      	bne.n	800f4b6 <HAL_DMA_IRQHandler+0x32>
}
 800f4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800f530 <HAL_DMA_IRQHandler+0xac>)
 800f4f6:	e7f5      	b.n	800f4e4 <HAL_DMA_IRQHandler+0x60>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800f4f8:	2608      	movs	r6, #8
 800f4fa:	0037      	movs	r7, r6
 800f4fc:	4097      	lsls	r7, r2
 800f4fe:	423d      	tst	r5, r7
 800f500:	d0f7      	beq.n	800f4f2 <HAL_DMA_IRQHandler+0x6e>
 800f502:	4234      	tst	r4, r6
 800f504:	d0f5      	beq.n	800f4f2 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f506:	250e      	movs	r5, #14
 800f508:	681c      	ldr	r4, [r3, #0]
 800f50a:	43ac      	bics	r4, r5
 800f50c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f50e:	2301      	movs	r3, #1
 800f510:	001c      	movs	r4, r3
 800f512:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800f514:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f516:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f518:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800f51a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800f51c:	2200      	movs	r2, #0
 800f51e:	1d43      	adds	r3, r0, #5
 800f520:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800f522:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f524:	e7e3      	b.n	800f4ee <HAL_DMA_IRQHandler+0x6a>
 800f526:	46c0      	nop			@ (mov r8, r8)
 800f528:	40020080 	.word	0x40020080
 800f52c:	40020400 	.word	0x40020400
 800f530:	40020000 	.word	0x40020000

0800f534 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;
 800f534:	2000      	movs	r0, #0

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800f536:	4b05      	ldr	r3, [pc, #20]	@ (800f54c <HAL_FLASH_Unlock+0x18>)
 800f538:	695a      	ldr	r2, [r3, #20]
 800f53a:	4282      	cmp	r2, r0
 800f53c:	da05      	bge.n	800f54a <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f53e:	4a04      	ldr	r2, [pc, #16]	@ (800f550 <HAL_FLASH_Unlock+0x1c>)
 800f540:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f542:	4a04      	ldr	r2, [pc, #16]	@ (800f554 <HAL_FLASH_Unlock+0x20>)
 800f544:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800f546:	6958      	ldr	r0, [r3, #20]
 800f548:	0fc0      	lsrs	r0, r0, #31
      status = HAL_ERROR;
    }
  }

  return status;
}
 800f54a:	4770      	bx	lr
 800f54c:	40022000 	.word	0x40022000
 800f550:	45670123 	.word	0x45670123
 800f554:	cdef89ab 	.word	0xcdef89ab

0800f558 <HAL_FLASH_Lock>:
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800f558:	2280      	movs	r2, #128	@ 0x80
 800f55a:	4b04      	ldr	r3, [pc, #16]	@ (800f56c <HAL_FLASH_Lock+0x14>)
 800f55c:	0612      	lsls	r2, r2, #24
 800f55e:	6959      	ldr	r1, [r3, #20]
 800f560:	430a      	orrs	r2, r1
 800f562:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800f564:	6958      	ldr	r0, [r3, #20]
 800f566:	43c0      	mvns	r0, r0
  {
    status = HAL_OK;
  }

  return status;
 800f568:	0fc0      	lsrs	r0, r0, #31
}
 800f56a:	4770      	bx	lr
 800f56c:	40022000 	.word	0x40022000

0800f570 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800f570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f572:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
  error = FLASH_SR_BSY1;
  while ((FLASH->SR & error) != 0x00U)
 800f574:	2780      	movs	r7, #128	@ 0x80
  uint32_t timeout = HAL_GetTick() + Timeout;
 800f576:	f7fe ff69 	bl	800e44c <HAL_GetTick>
  while ((FLASH->SR & error) != 0x00U)
 800f57a:	027f      	lsls	r7, r7, #9
  uint32_t timeout = HAL_GetTick() + Timeout;
 800f57c:	1946      	adds	r6, r0, r5
  while ((FLASH->SR & error) != 0x00U)
 800f57e:	4c12      	ldr	r4, [pc, #72]	@ (800f5c8 <FLASH_WaitForLastOperation+0x58>)
 800f580:	6923      	ldr	r3, [r4, #16]
 800f582:	423b      	tst	r3, r7
 800f584:	d10b      	bne.n	800f59e <FLASH_WaitForLastOperation+0x2e>
      return HAL_TIMEOUT;
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800f586:	6922      	ldr	r2, [r4, #16]
 800f588:	4b10      	ldr	r3, [pc, #64]	@ (800f5cc <FLASH_WaitForLastOperation+0x5c>)
 800f58a:	0011      	movs	r1, r2

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800f58c:	4810      	ldr	r0, [pc, #64]	@ (800f5d0 <FLASH_WaitForLastOperation+0x60>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800f58e:	4019      	ands	r1, r3
  FLASH->SR = FLASH_SR_CLEAR;
 800f590:	6120      	str	r0, [r4, #16]

  if (error != 0x00U)
 800f592:	421a      	tst	r2, r3
 800f594:	d009      	beq.n	800f5aa <FLASH_WaitForLastOperation+0x3a>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800f596:	4b0f      	ldr	r3, [pc, #60]	@ (800f5d4 <FLASH_WaitForLastOperation+0x64>)
    return HAL_ERROR;
 800f598:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800f59a:	6059      	str	r1, [r3, #4]
    return HAL_ERROR;
 800f59c:	e004      	b.n	800f5a8 <FLASH_WaitForLastOperation+0x38>
    if (HAL_GetTick() >= timeout)
 800f59e:	f7fe ff55 	bl	800e44c <HAL_GetTick>
 800f5a2:	42b0      	cmp	r0, r6
 800f5a4:	d3eb      	bcc.n	800f57e <FLASH_WaitForLastOperation+0xe>
      return HAL_TIMEOUT;
 800f5a6:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800f5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  timeout = HAL_GetTick() + Timeout;
 800f5aa:	f7fe ff4f 	bl	800e44c <HAL_GetTick>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800f5ae:	2680      	movs	r6, #128	@ 0x80
  timeout = HAL_GetTick() + Timeout;
 800f5b0:	1945      	adds	r5, r0, r5
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800f5b2:	02f6      	lsls	r6, r6, #11
 800f5b4:	6923      	ldr	r3, [r4, #16]
 800f5b6:	0018      	movs	r0, r3
 800f5b8:	4030      	ands	r0, r6
 800f5ba:	4233      	tst	r3, r6
 800f5bc:	d0f4      	beq.n	800f5a8 <FLASH_WaitForLastOperation+0x38>
    if (HAL_GetTick() >= timeout)
 800f5be:	f7fe ff45 	bl	800e44c <HAL_GetTick>
 800f5c2:	42a8      	cmp	r0, r5
 800f5c4:	d3f6      	bcc.n	800f5b4 <FLASH_WaitForLastOperation+0x44>
 800f5c6:	e7ee      	b.n	800f5a6 <FLASH_WaitForLastOperation+0x36>
 800f5c8:	40022000 	.word	0x40022000
 800f5cc:	000083fa 	.word	0x000083fa
 800f5d0:	000083fb 	.word	0x000083fb
 800f5d4:	200030bc 	.word	0x200030bc

0800f5d8 <HAL_FLASH_Program>:
{
 800f5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800f5da:	4e17      	ldr	r6, [pc, #92]	@ (800f638 <HAL_FLASH_Program+0x60>)
{
 800f5dc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 800f5de:	7833      	ldrb	r3, [r6, #0]
{
 800f5e0:	0004      	movs	r4, r0
 800f5e2:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 800f5e4:	2002      	movs	r0, #2
{
 800f5e6:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(&pFlash);
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d01e      	beq.n	800f62a <HAL_FLASH_Program+0x52>
 800f5ec:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f5ee:	20fa      	movs	r0, #250	@ 0xfa
  __HAL_LOCK(&pFlash);
 800f5f0:	7033      	strb	r3, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f5f2:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f5f4:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f5f6:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f5f8:	f7ff ffba 	bl	800f570 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d112      	bne.n	800f626 <HAL_FLASH_Program+0x4e>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800f600:	4f0e      	ldr	r7, [pc, #56]	@ (800f63c <HAL_FLASH_Program+0x64>)
 800f602:	2c01      	cmp	r4, #1
 800f604:	d112      	bne.n	800f62c <HAL_FLASH_Program+0x54>
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	4323      	orrs	r3, r4
 800f60a:	617b      	str	r3, [r7, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800f60c:	9b00      	ldr	r3, [sp, #0]
 800f60e:	602b      	str	r3, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800f610:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800f614:	9b01      	ldr	r3, [sp, #4]
 800f616:	606b      	str	r3, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f618:	20fa      	movs	r0, #250	@ 0xfa
 800f61a:	0080      	lsls	r0, r0, #2
 800f61c:	f7ff ffa8 	bl	800f570 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	43a3      	bics	r3, r4
 800f624:	617b      	str	r3, [r7, #20]
  __HAL_UNLOCK(&pFlash);
 800f626:	2300      	movs	r3, #0
 800f628:	7033      	strb	r3, [r6, #0]
}
 800f62a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800f62c:	0028      	movs	r0, r5
 800f62e:	9900      	ldr	r1, [sp, #0]
 800f630:	f00d fb1a 	bl	801cc68 <__FLASH_Program_Fast_veneer>
 800f634:	e7f0      	b.n	800f618 <HAL_FLASH_Program+0x40>
 800f636:	46c0      	nop			@ (mov r8, r8)
 800f638:	200030bc 	.word	0x200030bc
 800f63c:	40022000 	.word	0x40022000

0800f640 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800f640:	4a04      	ldr	r2, [pc, #16]	@ (800f654 <FLASH_PageErase+0x14>)
 800f642:	4905      	ldr	r1, [pc, #20]	@ (800f658 <FLASH_PageErase+0x18>)
 800f644:	6953      	ldr	r3, [r2, #20]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800f646:	00c0      	lsls	r0, r0, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800f648:	400b      	ands	r3, r1
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800f64a:	4318      	orrs	r0, r3
 800f64c:	4b03      	ldr	r3, [pc, #12]	@ (800f65c <FLASH_PageErase+0x1c>)
 800f64e:	4303      	orrs	r3, r0
 800f650:	6153      	str	r3, [r2, #20]
}
 800f652:	4770      	bx	lr
 800f654:	40022000 	.word	0x40022000
 800f658:	fffffc07 	.word	0xfffffc07
 800f65c:	00010002 	.word	0x00010002

0800f660 <HAL_FLASHEx_Erase>:
{
 800f660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800f662:	4f20      	ldr	r7, [pc, #128]	@ (800f6e4 <HAL_FLASHEx_Erase+0x84>)
{
 800f664:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 800f666:	783b      	ldrb	r3, [r7, #0]
 800f668:	2402      	movs	r4, #2
{
 800f66a:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d019      	beq.n	800f6a4 <HAL_FLASHEx_Erase+0x44>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f670:	20fa      	movs	r0, #250	@ 0xfa
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f672:	2300      	movs	r3, #0
  __HAL_LOCK(&pFlash);
 800f674:	2601      	movs	r6, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f676:	0080      	lsls	r0, r0, #2
  __HAL_LOCK(&pFlash);
 800f678:	703e      	strb	r6, [r7, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f67a:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f67c:	f7ff ff78 	bl	800f570 <FLASH_WaitForLastOperation>
 800f680:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 800f682:	d10d      	bne.n	800f6a0 <HAL_FLASHEx_Erase+0x40>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800f684:	682b      	ldr	r3, [r5, #0]
    pEraseInit->Banks = FLASH_BANK_1;
 800f686:	606e      	str	r6, [r5, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800f688:	2b04      	cmp	r3, #4
 800f68a:	d10d      	bne.n	800f6a8 <HAL_FLASHEx_Erase+0x48>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f68c:	20fa      	movs	r0, #250	@ 0xfa
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 800f68e:	4a16      	ldr	r2, [pc, #88]	@ (800f6e8 <HAL_FLASHEx_Erase+0x88>)
 800f690:	4b16      	ldr	r3, [pc, #88]	@ (800f6ec <HAL_FLASHEx_Erase+0x8c>)
 800f692:	6951      	ldr	r1, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f694:	0080      	lsls	r0, r0, #2
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 800f696:	430b      	orrs	r3, r1
 800f698:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f69a:	f7ff ff69 	bl	800f570 <FLASH_WaitForLastOperation>
 800f69e:	0004      	movs	r4, r0
  __HAL_UNLOCK(&pFlash);
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	703b      	strb	r3, [r7, #0]
}
 800f6a4:	0020      	movs	r0, r4
 800f6a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      *PageError = 0xFFFFFFFFU;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	9a01      	ldr	r2, [sp, #4]
 800f6ac:	425b      	negs	r3, r3
 800f6ae:	6013      	str	r3, [r2, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f6b0:	68ae      	ldr	r6, [r5, #8]
 800f6b2:	68ab      	ldr	r3, [r5, #8]
 800f6b4:	68ea      	ldr	r2, [r5, #12]
 800f6b6:	189b      	adds	r3, r3, r2
 800f6b8:	42b3      	cmp	r3, r6
 800f6ba:	d90b      	bls.n	800f6d4 <HAL_FLASHEx_Erase+0x74>
        FLASH_PageErase(index);
 800f6bc:	0030      	movs	r0, r6
 800f6be:	f7ff ffbf 	bl	800f640 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f6c2:	20fa      	movs	r0, #250	@ 0xfa
 800f6c4:	0080      	lsls	r0, r0, #2
 800f6c6:	f7ff ff53 	bl	800f570 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d008      	beq.n	800f6e0 <HAL_FLASHEx_Erase+0x80>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f6ce:	0004      	movs	r4, r0
          *PageError = index;
 800f6d0:	9b01      	ldr	r3, [sp, #4]
 800f6d2:	601e      	str	r6, [r3, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800f6d4:	2102      	movs	r1, #2
 800f6d6:	4a04      	ldr	r2, [pc, #16]	@ (800f6e8 <HAL_FLASHEx_Erase+0x88>)
 800f6d8:	6953      	ldr	r3, [r2, #20]
 800f6da:	438b      	bics	r3, r1
 800f6dc:	6153      	str	r3, [r2, #20]
 800f6de:	e7df      	b.n	800f6a0 <HAL_FLASHEx_Erase+0x40>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f6e0:	3601      	adds	r6, #1
 800f6e2:	e7e6      	b.n	800f6b2 <HAL_FLASHEx_Erase+0x52>
 800f6e4:	200030bc 	.word	0x200030bc
 800f6e8:	40022000 	.word	0x40022000
 800f6ec:	00010004 	.word	0x00010004

0800f6f0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800f6f0:	2300      	movs	r3, #0
{
 800f6f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6f4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f6f6:	680a      	ldr	r2, [r1, #0]
 800f6f8:	0014      	movs	r4, r2
 800f6fa:	40dc      	lsrs	r4, r3
 800f6fc:	d101      	bne.n	800f702 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800f6fe:	b005      	add	sp, #20
 800f700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f702:	2501      	movs	r5, #1
 800f704:	0014      	movs	r4, r2
 800f706:	409d      	lsls	r5, r3
 800f708:	402c      	ands	r4, r5
 800f70a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 800f70c:	422a      	tst	r2, r5
 800f70e:	d100      	bne.n	800f712 <HAL_GPIO_Init+0x22>
 800f710:	e099      	b.n	800f846 <HAL_GPIO_Init+0x156>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f712:	684a      	ldr	r2, [r1, #4]
 800f714:	005f      	lsls	r7, r3, #1
 800f716:	4694      	mov	ip, r2
 800f718:	2203      	movs	r2, #3
 800f71a:	4664      	mov	r4, ip
 800f71c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f71e:	2403      	movs	r4, #3
 800f720:	40bc      	lsls	r4, r7
 800f722:	43e4      	mvns	r4, r4
 800f724:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f726:	1e54      	subs	r4, r2, #1
 800f728:	2c01      	cmp	r4, #1
 800f72a:	d82e      	bhi.n	800f78a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 800f72c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f72e:	9c01      	ldr	r4, [sp, #4]
 800f730:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f732:	68cc      	ldr	r4, [r1, #12]
 800f734:	40bc      	lsls	r4, r7
 800f736:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800f738:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800f73a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800f73c:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f73e:	43ac      	bics	r4, r5
 800f740:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800f742:	4664      	mov	r4, ip
 800f744:	0924      	lsrs	r4, r4, #4
 800f746:	4034      	ands	r4, r6
 800f748:	409c      	lsls	r4, r3
 800f74a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800f74c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800f74e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800f750:	9c01      	ldr	r4, [sp, #4]
 800f752:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800f754:	688c      	ldr	r4, [r1, #8]
 800f756:	40bc      	lsls	r4, r7
 800f758:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800f75a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f75c:	2a02      	cmp	r2, #2
 800f75e:	d116      	bne.n	800f78e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f760:	2507      	movs	r5, #7
 800f762:	260f      	movs	r6, #15
 800f764:	401d      	ands	r5, r3
 800f766:	00ad      	lsls	r5, r5, #2
 800f768:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800f76a:	08dc      	lsrs	r4, r3, #3
 800f76c:	00a4      	lsls	r4, r4, #2
 800f76e:	1904      	adds	r4, r0, r4
 800f770:	9402      	str	r4, [sp, #8]
 800f772:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f774:	9603      	str	r6, [sp, #12]
 800f776:	0026      	movs	r6, r4
 800f778:	9c03      	ldr	r4, [sp, #12]
 800f77a:	43a6      	bics	r6, r4
 800f77c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f77e:	690e      	ldr	r6, [r1, #16]
 800f780:	40ae      	lsls	r6, r5
 800f782:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 800f784:	9c02      	ldr	r4, [sp, #8]
 800f786:	6226      	str	r6, [r4, #32]
 800f788:	e001      	b.n	800f78e <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f78a:	2a03      	cmp	r2, #3
 800f78c:	d1df      	bne.n	800f74e <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800f78e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800f790:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f792:	9d01      	ldr	r5, [sp, #4]
 800f794:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800f796:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f798:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800f79a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f79c:	4662      	mov	r2, ip
 800f79e:	02a4      	lsls	r4, r4, #10
 800f7a0:	4222      	tst	r2, r4
 800f7a2:	d050      	beq.n	800f846 <HAL_GPIO_Init+0x156>
        temp = EXTI->EXTICR[position >> 2u];
 800f7a4:	4a29      	ldr	r2, [pc, #164]	@ (800f84c <HAL_GPIO_Init+0x15c>)
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f7a6:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 800f7a8:	089c      	lsrs	r4, r3, #2
 800f7aa:	00a4      	lsls	r4, r4, #2
 800f7ac:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f7ae:	220f      	movs	r2, #15
 800f7b0:	401d      	ands	r5, r3
 800f7b2:	00ed      	lsls	r5, r5, #3
 800f7b4:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f7b6:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800f7b8:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f7ba:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f7bc:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f7be:	2200      	movs	r2, #0
 800f7c0:	42b8      	cmp	r0, r7
 800f7c2:	d014      	beq.n	800f7ee <HAL_GPIO_Init+0xfe>
 800f7c4:	4f22      	ldr	r7, [pc, #136]	@ (800f850 <HAL_GPIO_Init+0x160>)
 800f7c6:	3201      	adds	r2, #1
 800f7c8:	42b8      	cmp	r0, r7
 800f7ca:	d010      	beq.n	800f7ee <HAL_GPIO_Init+0xfe>
 800f7cc:	4f21      	ldr	r7, [pc, #132]	@ (800f854 <HAL_GPIO_Init+0x164>)
 800f7ce:	3201      	adds	r2, #1
 800f7d0:	42b8      	cmp	r0, r7
 800f7d2:	d00c      	beq.n	800f7ee <HAL_GPIO_Init+0xfe>
 800f7d4:	4f20      	ldr	r7, [pc, #128]	@ (800f858 <HAL_GPIO_Init+0x168>)
 800f7d6:	3201      	adds	r2, #1
 800f7d8:	42b8      	cmp	r0, r7
 800f7da:	d008      	beq.n	800f7ee <HAL_GPIO_Init+0xfe>
 800f7dc:	4f1f      	ldr	r7, [pc, #124]	@ (800f85c <HAL_GPIO_Init+0x16c>)
 800f7de:	3201      	adds	r2, #1
 800f7e0:	42b8      	cmp	r0, r7
 800f7e2:	d004      	beq.n	800f7ee <HAL_GPIO_Init+0xfe>
 800f7e4:	4a1e      	ldr	r2, [pc, #120]	@ (800f860 <HAL_GPIO_Init+0x170>)
 800f7e6:	1882      	adds	r2, r0, r2
 800f7e8:	1e57      	subs	r7, r2, #1
 800f7ea:	41ba      	sbcs	r2, r7
 800f7ec:	3205      	adds	r2, #5
 800f7ee:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f7f0:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f7f2:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 800f7f4:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800f7f6:	4c15      	ldr	r4, [pc, #84]	@ (800f84c <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 800f7f8:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800f7fa:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 800f7fc:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800f7fe:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 800f800:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f802:	02ff      	lsls	r7, r7, #11
 800f804:	d401      	bmi.n	800f80a <HAL_GPIO_Init+0x11a>
        temp &= ~(iocurrent);
 800f806:	0035      	movs	r5, r6
 800f808:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f80a:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 800f80c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800f80e:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800f810:	9d00      	ldr	r5, [sp, #0]
 800f812:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f814:	02bf      	lsls	r7, r7, #10
 800f816:	d401      	bmi.n	800f81c <HAL_GPIO_Init+0x12c>
        temp &= ~(iocurrent);
 800f818:	0035      	movs	r5, r6
 800f81a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f81c:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 800f81e:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 800f820:	4c10      	ldr	r4, [pc, #64]	@ (800f864 <HAL_GPIO_Init+0x174>)
          temp |= iocurrent;
 800f822:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 800f824:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800f826:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f828:	03bf      	lsls	r7, r7, #14
 800f82a:	d401      	bmi.n	800f830 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 800f82c:	0035      	movs	r5, r6
 800f82e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f830:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 800f832:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 800f834:	4c0c      	ldr	r4, [pc, #48]	@ (800f868 <HAL_GPIO_Init+0x178>)
          temp |= iocurrent;
 800f836:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 800f838:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800f83a:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f83c:	03ff      	lsls	r7, r7, #15
 800f83e:	d401      	bmi.n	800f844 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800f840:	4015      	ands	r5, r2
 800f842:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 800f844:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800f846:	3301      	adds	r3, #1
 800f848:	e755      	b.n	800f6f6 <HAL_GPIO_Init+0x6>
 800f84a:	46c0      	nop			@ (mov r8, r8)
 800f84c:	40021800 	.word	0x40021800
 800f850:	50000400 	.word	0x50000400
 800f854:	50000800 	.word	0x50000800
 800f858:	50000c00 	.word	0x50000c00
 800f85c:	50001000 	.word	0x50001000
 800f860:	afffec00 	.word	0xafffec00
 800f864:	40021808 	.word	0x40021808
 800f868:	40021804 	.word	0x40021804

0800f86c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f86c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800f86e:	2200      	movs	r2, #0
{
 800f870:	000f      	movs	r7, r1
 800f872:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800f874:	003b      	movs	r3, r7
 800f876:	40d3      	lsrs	r3, r2
 800f878:	d101      	bne.n	800f87e <HAL_GPIO_DeInit+0x12>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
  }
}
 800f87a:	b005      	add	sp, #20
 800f87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f87e:	2301      	movs	r3, #1
 800f880:	4093      	lsls	r3, r2
 800f882:	001c      	movs	r4, r3
 800f884:	9301      	str	r3, [sp, #4]
 800f886:	403c      	ands	r4, r7
    if (iocurrent != 0x00u)
 800f888:	421f      	tst	r7, r3
 800f88a:	d05c      	beq.n	800f946 <HAL_GPIO_DeInit+0xda>
      tmp = EXTI->EXTICR[position >> 2u];
 800f88c:	4b2f      	ldr	r3, [pc, #188]	@ (800f94c <HAL_GPIO_DeInit+0xe0>)
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f88e:	2503      	movs	r5, #3
      tmp = EXTI->EXTICR[position >> 2u];
 800f890:	0891      	lsrs	r1, r2, #2
 800f892:	0089      	lsls	r1, r1, #2
 800f894:	18c9      	adds	r1, r1, r3
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f896:	230f      	movs	r3, #15
 800f898:	4015      	ands	r5, r2
 800f89a:	00ed      	lsls	r5, r5, #3
 800f89c:	40ab      	lsls	r3, r5
      tmp = EXTI->EXTICR[position >> 2u];
 800f89e:	6e0e      	ldr	r6, [r1, #96]	@ 0x60
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f8a0:	9302      	str	r3, [sp, #8]
 800f8a2:	401e      	ands	r6, r3
 800f8a4:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 800f8a6:	26a0      	movs	r6, #160	@ 0xa0
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	05f6      	lsls	r6, r6, #23
 800f8ac:	42b0      	cmp	r0, r6
 800f8ae:	d018      	beq.n	800f8e2 <HAL_GPIO_DeInit+0x76>
 800f8b0:	4b27      	ldr	r3, [pc, #156]	@ (800f950 <HAL_GPIO_DeInit+0xe4>)
 800f8b2:	469c      	mov	ip, r3
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	4560      	cmp	r0, ip
 800f8b8:	d013      	beq.n	800f8e2 <HAL_GPIO_DeInit+0x76>
 800f8ba:	4b26      	ldr	r3, [pc, #152]	@ (800f954 <HAL_GPIO_DeInit+0xe8>)
 800f8bc:	469c      	mov	ip, r3
 800f8be:	2302      	movs	r3, #2
 800f8c0:	4560      	cmp	r0, ip
 800f8c2:	d00e      	beq.n	800f8e2 <HAL_GPIO_DeInit+0x76>
 800f8c4:	4b24      	ldr	r3, [pc, #144]	@ (800f958 <HAL_GPIO_DeInit+0xec>)
 800f8c6:	469c      	mov	ip, r3
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	4560      	cmp	r0, ip
 800f8cc:	d009      	beq.n	800f8e2 <HAL_GPIO_DeInit+0x76>
 800f8ce:	4b23      	ldr	r3, [pc, #140]	@ (800f95c <HAL_GPIO_DeInit+0xf0>)
 800f8d0:	469c      	mov	ip, r3
 800f8d2:	2304      	movs	r3, #4
 800f8d4:	4560      	cmp	r0, ip
 800f8d6:	d004      	beq.n	800f8e2 <HAL_GPIO_DeInit+0x76>
 800f8d8:	4b21      	ldr	r3, [pc, #132]	@ (800f960 <HAL_GPIO_DeInit+0xf4>)
 800f8da:	18c3      	adds	r3, r0, r3
 800f8dc:	1e5e      	subs	r6, r3, #1
 800f8de:	41b3      	sbcs	r3, r6
 800f8e0:	3305      	adds	r3, #5
 800f8e2:	40ab      	lsls	r3, r5
 800f8e4:	9d03      	ldr	r5, [sp, #12]
 800f8e6:	42ab      	cmp	r3, r5
 800f8e8:	d112      	bne.n	800f910 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 800f8ea:	4e1e      	ldr	r6, [pc, #120]	@ (800f964 <HAL_GPIO_DeInit+0xf8>)
 800f8ec:	4b17      	ldr	r3, [pc, #92]	@ (800f94c <HAL_GPIO_DeInit+0xe0>)
 800f8ee:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 800f8f0:	43a5      	bics	r5, r4
 800f8f2:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 800f8f4:	4e1c      	ldr	r6, [pc, #112]	@ (800f968 <HAL_GPIO_DeInit+0xfc>)
 800f8f6:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 800f8f8:	43a5      	bics	r5, r4
 800f8fa:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->FTSR1 &= ~(iocurrent);
 800f8fc:	685d      	ldr	r5, [r3, #4]
 800f8fe:	43a5      	bics	r5, r4
 800f900:	605d      	str	r5, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800f902:	681d      	ldr	r5, [r3, #0]
 800f904:	43a5      	bics	r5, r4
 800f906:	601d      	str	r5, [r3, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800f908:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
 800f90a:	9c02      	ldr	r4, [sp, #8]
 800f90c:	43a3      	bics	r3, r4
 800f90e:	660b      	str	r3, [r1, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f910:	2403      	movs	r4, #3
 800f912:	0051      	lsls	r1, r2, #1
 800f914:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 800f916:	2107      	movs	r1, #7
 800f918:	260f      	movs	r6, #15
 800f91a:	4011      	ands	r1, r2
 800f91c:	0089      	lsls	r1, r1, #2
 800f91e:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f920:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f922:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f924:	4323      	orrs	r3, r4
 800f926:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 800f928:	08d3      	lsrs	r3, r2, #3
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	18c3      	adds	r3, r0, r3
 800f92e:	6a1d      	ldr	r5, [r3, #32]
 800f930:	43b5      	bics	r5, r6
 800f932:	621d      	str	r5, [r3, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f934:	6883      	ldr	r3, [r0, #8]
 800f936:	43a3      	bics	r3, r4
 800f938:	6083      	str	r3, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f93a:	6843      	ldr	r3, [r0, #4]
 800f93c:	438b      	bics	r3, r1
 800f93e:	6043      	str	r3, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800f940:	68c3      	ldr	r3, [r0, #12]
 800f942:	43a3      	bics	r3, r4
 800f944:	60c3      	str	r3, [r0, #12]
    position++;
 800f946:	3201      	adds	r2, #1
 800f948:	e794      	b.n	800f874 <HAL_GPIO_DeInit+0x8>
 800f94a:	46c0      	nop			@ (mov r8, r8)
 800f94c:	40021800 	.word	0x40021800
 800f950:	50000400 	.word	0x50000400
 800f954:	50000800 	.word	0x50000800
 800f958:	50000c00 	.word	0x50000c00
 800f95c:	50001000 	.word	0x50001000
 800f960:	afffec00 	.word	0xafffec00
 800f964:	40021804 	.word	0x40021804
 800f968:	40021808 	.word	0x40021808

0800f96c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f96c:	6900      	ldr	r0, [r0, #16]
 800f96e:	4008      	ands	r0, r1
 800f970:	1e43      	subs	r3, r0, #1
 800f972:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800f974:	b2c0      	uxtb	r0, r0
}
 800f976:	4770      	bx	lr

0800f978 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f978:	2a00      	cmp	r2, #0
 800f97a:	d001      	beq.n	800f980 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f97c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f97e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f980:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800f982:	e7fc      	b.n	800f97e <HAL_GPIO_WritePin+0x6>

0800f984 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800f984:	4770      	bx	lr
	...

0800f988 <HAL_GPIO_EXTI_IRQHandler>:
{
 800f988:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f98a:	4d08      	ldr	r5, [pc, #32]	@ (800f9ac <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 800f98c:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f98e:	68eb      	ldr	r3, [r5, #12]
 800f990:	4218      	tst	r0, r3
 800f992:	d002      	beq.n	800f99a <HAL_GPIO_EXTI_IRQHandler+0x12>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800f994:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800f996:	f7ff fff5 	bl	800f984 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800f99a:	692b      	ldr	r3, [r5, #16]
 800f99c:	4223      	tst	r3, r4
 800f99e:	d003      	beq.n	800f9a8 <HAL_GPIO_EXTI_IRQHandler+0x20>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800f9a0:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800f9a2:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800f9a4:	f7f8 feb2 	bl	800870c <HAL_GPIO_EXTI_Falling_Callback>
}
 800f9a8:	bd70      	pop	{r4, r5, r6, pc}
 800f9aa:	46c0      	nop			@ (mov r8, r8)
 800f9ac:	40021800 	.word	0x40021800

0800f9b0 <HAL_LCD_DeInit>:
  * @brief  DeInitialize the LCD peripheral.
  * @param hlcd LCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LCD_DeInit(LCD_HandleTypeDef *hlcd)
{
 800f9b0:	b570      	push	{r4, r5, r6, lr}
 800f9b2:	0004      	movs	r4, r0
  /* Check the LCD handle allocation */
  if (hlcd == NULL)
  {
    return HAL_ERROR;
 800f9b4:	2001      	movs	r0, #1
  if (hlcd == NULL)
 800f9b6:	2c00      	cmp	r4, #0
 800f9b8:	d00b      	beq.n	800f9d2 <HAL_LCD_DeInit+0x22>
  }

  /* Check the parameters */
  assert_param(IS_LCD_ALL_INSTANCE(hlcd->Instance));

  hlcd->State = HAL_LCD_STATE_BUSY;
 800f9ba:	0025      	movs	r5, r4
 800f9bc:	2302      	movs	r3, #2
 800f9be:	3535      	adds	r5, #53	@ 0x35

  /* DeInit the low level hardware */
  HAL_LCD_MspDeInit(hlcd);
 800f9c0:	0020      	movs	r0, r4
  hlcd->State = HAL_LCD_STATE_BUSY;
 800f9c2:	702b      	strb	r3, [r5, #0]
  HAL_LCD_MspDeInit(hlcd);
 800f9c4:	f7fa fe36 	bl	800a634 <HAL_LCD_MspDeInit>

  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800f9c8:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hlcd);
 800f9ca:	3434      	adds	r4, #52	@ 0x34
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800f9cc:	6060      	str	r0, [r4, #4]
  hlcd->State = HAL_LCD_STATE_RESET;
 800f9ce:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hlcd);
 800f9d0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800f9d2:	bd70      	pop	{r4, r5, r6, pc}

0800f9d4 <HAL_LCD_Write>:
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask,
                                uint32_t Data)
{
 800f9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	9303      	str	r3, [sp, #12]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f9da:	0003      	movs	r3, r0
{
 800f9dc:	0004      	movs	r4, r0

    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 800f9de:	2001      	movs	r0, #1
{
 800f9e0:	9101      	str	r1, [sp, #4]
 800f9e2:	9202      	str	r2, [sp, #8]
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f9e4:	3335      	adds	r3, #53	@ 0x35
 800f9e6:	781a      	ldrb	r2, [r3, #0]
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800f9e8:	3a01      	subs	r2, #1
 800f9ea:	4282      	cmp	r2, r0
 800f9ec:	d80f      	bhi.n	800fa0e <HAL_LCD_Write+0x3a>
    if (hlcd->State == HAL_LCD_STATE_READY)
 800f9ee:	781a      	ldrb	r2, [r3, #0]
 800f9f0:	b2d1      	uxtb	r1, r2
 800f9f2:	4282      	cmp	r2, r0
 800f9f4:	d00d      	beq.n	800fa12 <HAL_LCD_Write+0x3e>
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 800f9f6:	9b01      	ldr	r3, [sp, #4]
 800f9f8:	6822      	ldr	r2, [r4, #0]
 800f9fa:	009b      	lsls	r3, r3, #2
 800f9fc:	18d2      	adds	r2, r2, r3
 800f9fe:	6953      	ldr	r3, [r2, #20]
 800fa00:	9902      	ldr	r1, [sp, #8]
    return HAL_OK;
 800fa02:	2000      	movs	r0, #0
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 800fa04:	4019      	ands	r1, r3
 800fa06:	000b      	movs	r3, r1
 800fa08:	9903      	ldr	r1, [sp, #12]
 800fa0a:	430b      	orrs	r3, r1
 800fa0c:	6153      	str	r3, [r2, #20]
  }
}
 800fa0e:	b005      	add	sp, #20
 800fa10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_LOCK(hlcd);
 800fa12:	0026      	movs	r6, r4
 800fa14:	2202      	movs	r2, #2
 800fa16:	3634      	adds	r6, #52	@ 0x34
 800fa18:	7835      	ldrb	r5, [r6, #0]
 800fa1a:	0010      	movs	r0, r2
 800fa1c:	2d01      	cmp	r5, #1
 800fa1e:	d0f6      	beq.n	800fa0e <HAL_LCD_Write+0x3a>
 800fa20:	7031      	strb	r1, [r6, #0]
      hlcd->State = HAL_LCD_STATE_BUSY;
 800fa22:	701a      	strb	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800fa24:	f7fe fd12 	bl	800e44c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa28:	27fa      	movs	r7, #250	@ 0xfa
      tickstart = HAL_GetTick();
 800fa2a:	0005      	movs	r5, r0
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa2c:	00bf      	lsls	r7, r7, #2
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800fa2e:	2204      	movs	r2, #4
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	4213      	tst	r3, r2
 800fa36:	d0de      	beq.n	800f9f6 <HAL_LCD_Write+0x22>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa38:	f7fe fd08 	bl	800e44c <HAL_GetTick>
 800fa3c:	1b40      	subs	r0, r0, r5
 800fa3e:	42b8      	cmp	r0, r7
 800fa40:	d9f5      	bls.n	800fa2e <HAL_LCD_Write+0x5a>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800fa42:	2302      	movs	r3, #2
 800fa44:	63a3      	str	r3, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hlcd);
 800fa46:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800fa48:	2003      	movs	r0, #3
          __HAL_UNLOCK(hlcd);
 800fa4a:	7033      	strb	r3, [r6, #0]
          return HAL_TIMEOUT;
 800fa4c:	e7df      	b.n	800fa0e <HAL_LCD_Write+0x3a>

0800fa4e <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 800fa4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800fa50:	2608      	movs	r6, #8

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800fa52:	2204      	movs	r2, #4
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800fa54:	6803      	ldr	r3, [r0, #0]
{
 800fa56:	0004      	movs	r4, r0
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800fa58:	60de      	str	r6, [r3, #12]
  hlcd->Instance->SR |= LCD_SR_UDR;
 800fa5a:	6899      	ldr	r1, [r3, #8]
  tickstart = HAL_GetTick();

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa5c:	27fa      	movs	r7, #250	@ 0xfa
  hlcd->Instance->SR |= LCD_SR_UDR;
 800fa5e:	430a      	orrs	r2, r1
 800fa60:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 800fa62:	f7fe fcf3 	bl	800e44c <HAL_GetTick>
 800fa66:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa68:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800fa6a:	6823      	ldr	r3, [r4, #0]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	4233      	tst	r3, r6
 800fa70:	d005      	beq.n	800fa7e <HAL_LCD_UpdateDisplayRequest+0x30>

      return HAL_TIMEOUT;
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 800fa72:	0023      	movs	r3, r4
 800fa74:	2201      	movs	r2, #1
 800fa76:	3335      	adds	r3, #53	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);

  return HAL_OK;
 800fa78:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 800fa7a:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 800fa7c:	e007      	b.n	800fa8e <HAL_LCD_UpdateDisplayRequest+0x40>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa7e:	f7fe fce5 	bl	800e44c <HAL_GetTick>
 800fa82:	1b40      	subs	r0, r0, r5
 800fa84:	42b8      	cmp	r0, r7
 800fa86:	d9f0      	bls.n	800fa6a <HAL_LCD_UpdateDisplayRequest+0x1c>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800fa88:	2304      	movs	r3, #4
      return HAL_TIMEOUT;
 800fa8a:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800fa8c:	63a3      	str	r3, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hlcd);
 800fa8e:	2300      	movs	r3, #0
 800fa90:	3434      	adds	r4, #52	@ 0x34
 800fa92:	7023      	strb	r3, [r4, #0]
}
 800fa94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa96 <HAL_LCD_Clear>:
{
 800fa96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_LCD_StateTypeDef state = hlcd->State;
 800fa98:	0002      	movs	r2, r0
{
 800fa9a:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800fa9c:	2001      	movs	r0, #1
  HAL_LCD_StateTypeDef state = hlcd->State;
 800fa9e:	3235      	adds	r2, #53	@ 0x35
 800faa0:	7813      	ldrb	r3, [r2, #0]
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800faa2:	3b01      	subs	r3, #1
 800faa4:	4283      	cmp	r3, r0
 800faa6:	d82a      	bhi.n	800fafe <HAL_LCD_Clear+0x68>
    __HAL_LOCK(hlcd);
 800faa8:	0025      	movs	r5, r4
 800faaa:	3534      	adds	r5, #52	@ 0x34
 800faac:	7829      	ldrb	r1, [r5, #0]
 800faae:	2302      	movs	r3, #2
 800fab0:	4281      	cmp	r1, r0
 800fab2:	d025      	beq.n	800fb00 <HAL_LCD_Clear+0x6a>
 800fab4:	7028      	strb	r0, [r5, #0]
    hlcd->State = HAL_LCD_STATE_BUSY;
 800fab6:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fab8:	f7fe fcc8 	bl	800e44c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fabc:	27fa      	movs	r7, #250	@ 0xfa
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800fabe:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800fac0:	9001      	str	r0, [sp, #4]
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fac2:	00bf      	lsls	r7, r7, #2
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800fac4:	6821      	ldr	r1, [r4, #0]
 800fac6:	688a      	ldr	r2, [r1, #8]
 800fac8:	0013      	movs	r3, r2
 800faca:	4033      	ands	r3, r6
 800facc:	4232      	tst	r2, r6
 800face:	d10b      	bne.n	800fae8 <HAL_LCD_Clear+0x52>
      hlcd->Instance->RAM[counter] = 0;
 800fad0:	0018      	movs	r0, r3
 800fad2:	1d1a      	adds	r2, r3, #4
 800fad4:	0092      	lsls	r2, r2, #2
 800fad6:	188a      	adds	r2, r1, r2
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800fad8:	3301      	adds	r3, #1
      hlcd->Instance->RAM[counter] = 0;
 800fada:	6050      	str	r0, [r2, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800fadc:	2b10      	cmp	r3, #16
 800fade:	d1f8      	bne.n	800fad2 <HAL_LCD_Clear+0x3c>
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 800fae0:	0020      	movs	r0, r4
 800fae2:	f7ff ffb4 	bl	800fa4e <HAL_LCD_UpdateDisplayRequest>
 800fae6:	e00a      	b.n	800fafe <HAL_LCD_Clear+0x68>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fae8:	f7fe fcb0 	bl	800e44c <HAL_GetTick>
 800faec:	9b01      	ldr	r3, [sp, #4]
 800faee:	1ac0      	subs	r0, r0, r3
 800faf0:	42b8      	cmp	r0, r7
 800faf2:	d9e7      	bls.n	800fac4 <HAL_LCD_Clear+0x2e>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800faf4:	2302      	movs	r3, #2
 800faf6:	63a3      	str	r3, [r4, #56]	@ 0x38
        __HAL_UNLOCK(hlcd);
 800faf8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800fafa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hlcd);
 800fafc:	702b      	strb	r3, [r5, #0]
}
 800fafe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hlcd);
 800fb00:	0018      	movs	r0, r3
 800fb02:	e7fc      	b.n	800fafe <HAL_LCD_Clear+0x68>

0800fb04 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800fb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb06:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800fb08:	f7fe fca0 	bl	800e44c <HAL_GetTick>

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fb0c:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 800fb0e:	0005      	movs	r5, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800fb10:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fb12:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800fb14:	6823      	ldr	r3, [r4, #0]
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	4233      	tst	r3, r6
 800fb1a:	d001      	beq.n	800fb20 <LCD_WaitForSynchro+0x1c>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	e007      	b.n	800fb30 <LCD_WaitForSynchro+0x2c>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fb20:	f7fe fc94 	bl	800e44c <HAL_GetTick>
 800fb24:	1b40      	subs	r0, r0, r5
 800fb26:	42b8      	cmp	r0, r7
 800fb28:	d9f4      	bls.n	800fb14 <LCD_WaitForSynchro+0x10>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800fb2a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800fb2c:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800fb2e:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800fb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb34 <HAL_LCD_Init>:
{
 800fb34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb36:	0004      	movs	r4, r0
    return HAL_ERROR;
 800fb38:	2501      	movs	r5, #1
  if (hlcd == NULL)
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d062      	beq.n	800fc04 <HAL_LCD_Init+0xd0>
  if (hlcd->State == HAL_LCD_STATE_RESET)
 800fb3e:	0006      	movs	r6, r0
 800fb40:	3635      	adds	r6, #53	@ 0x35
 800fb42:	7833      	ldrb	r3, [r6, #0]
 800fb44:	b2da      	uxtb	r2, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d104      	bne.n	800fb54 <HAL_LCD_Init+0x20>
    hlcd->Lock = HAL_UNLOCKED;
 800fb4a:	0003      	movs	r3, r0
 800fb4c:	3334      	adds	r3, #52	@ 0x34
 800fb4e:	701a      	strb	r2, [r3, #0]
    HAL_LCD_MspInit(hlcd);
 800fb50:	f7fa fcfe 	bl	800a550 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 800fb54:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 800fb56:	2701      	movs	r7, #1
  hlcd->State = HAL_LCD_STATE_BUSY;
 800fb58:	7033      	strb	r3, [r6, #0]
  __HAL_LCD_DISABLE(hlcd);
 800fb5a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hlcd->Instance->FCR, \
 800fb5c:	68a0      	ldr	r0, [r4, #8]
  __HAL_LCD_DISABLE(hlcd);
 800fb5e:	6813      	ldr	r3, [r2, #0]
 800fb60:	43bb      	bics	r3, r7
 800fb62:	6013      	str	r3, [r2, #0]
    hlcd->Instance->RAM[counter] = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	6153      	str	r3, [r2, #20]
 800fb68:	6193      	str	r3, [r2, #24]
 800fb6a:	61d3      	str	r3, [r2, #28]
 800fb6c:	6213      	str	r3, [r2, #32]
 800fb6e:	6253      	str	r3, [r2, #36]	@ 0x24
 800fb70:	6293      	str	r3, [r2, #40]	@ 0x28
 800fb72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fb74:	6313      	str	r3, [r2, #48]	@ 0x30
  MODIFY_REG(hlcd->Instance->FCR, \
 800fb76:	6863      	ldr	r3, [r4, #4]
 800fb78:	6851      	ldr	r1, [r2, #4]
 800fb7a:	4303      	orrs	r3, r0
 800fb7c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800fb7e:	4303      	orrs	r3, r0
 800fb80:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fb82:	4303      	orrs	r3, r0
 800fb84:	69e0      	ldr	r0, [r4, #28]
 800fb86:	4303      	orrs	r3, r0
 800fb88:	6a20      	ldr	r0, [r4, #32]
 800fb8a:	4303      	orrs	r3, r0
 800fb8c:	69a0      	ldr	r0, [r4, #24]
 800fb8e:	4303      	orrs	r3, r0
 800fb90:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fb92:	4303      	orrs	r3, r0
 800fb94:	4821      	ldr	r0, [pc, #132]	@ (800fc1c <HAL_LCD_Init+0xe8>)
 800fb96:	4001      	ands	r1, r0
 800fb98:	430b      	orrs	r3, r1
  status = LCD_WaitForSynchro(hlcd);
 800fb9a:	0020      	movs	r0, r4
  MODIFY_REG(hlcd->Instance->FCR, \
 800fb9c:	6053      	str	r3, [r2, #4]
  status = LCD_WaitForSynchro(hlcd);
 800fb9e:	f7ff ffb1 	bl	800fb04 <LCD_WaitForSynchro>
 800fba2:	1e05      	subs	r5, r0, #0
  if (status != HAL_OK)
 800fba4:	d12e      	bne.n	800fc04 <HAL_LCD_Init+0xd0>
  MODIFY_REG(hlcd->Instance->CR, \
 800fba6:	6920      	ldr	r0, [r4, #16]
 800fba8:	68e3      	ldr	r3, [r4, #12]
 800fbaa:	6822      	ldr	r2, [r4, #0]
 800fbac:	4303      	orrs	r3, r0
 800fbae:	6960      	ldr	r0, [r4, #20]
 800fbb0:	6811      	ldr	r1, [r2, #0]
 800fbb2:	4303      	orrs	r3, r0
 800fbb4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800fbb6:	4303      	orrs	r3, r0
 800fbb8:	20fe      	movs	r0, #254	@ 0xfe
 800fbba:	4381      	bics	r1, r0
 800fbbc:	430b      	orrs	r3, r1
 800fbbe:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 800fbc0:	6813      	ldr	r3, [r2, #0]
 800fbc2:	433b      	orrs	r3, r7
 800fbc4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800fbc6:	f7fe fc41 	bl	800e44c <HAL_GetTick>
 800fbca:	9001      	str	r0, [sp, #4]
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	423b      	tst	r3, r7
 800fbd2:	d00c      	beq.n	800fbee <HAL_LCD_Init+0xba>
  tickstart = HAL_GetTick();
 800fbd4:	f7fe fc3a 	bl	800e44c <HAL_GetTick>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800fbd8:	2710      	movs	r7, #16
  tickstart = HAL_GetTick();
 800fbda:	9001      	str	r0, [sp, #4]
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	689b      	ldr	r3, [r3, #8]
 800fbe0:	423b      	tst	r3, r7
 800fbe2:	d011      	beq.n	800fc08 <HAL_LCD_Init+0xd4>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	63a3      	str	r3, [r4, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800fbe8:	3301      	adds	r3, #1
 800fbea:	7033      	strb	r3, [r6, #0]
  return status;
 800fbec:	e00a      	b.n	800fc04 <HAL_LCD_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fbee:	f7fe fc2d 	bl	800e44c <HAL_GetTick>
 800fbf2:	9b01      	ldr	r3, [sp, #4]
 800fbf4:	1ac0      	subs	r0, r0, r3
 800fbf6:	23fa      	movs	r3, #250	@ 0xfa
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	4298      	cmp	r0, r3
 800fbfc:	d9e6      	bls.n	800fbcc <HAL_LCD_Init+0x98>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800fbfe:	2308      	movs	r3, #8
 800fc00:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800fc02:	2503      	movs	r5, #3
}
 800fc04:	0028      	movs	r0, r5
 800fc06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fc08:	f7fe fc20 	bl	800e44c <HAL_GetTick>
 800fc0c:	9b01      	ldr	r3, [sp, #4]
 800fc0e:	1ac0      	subs	r0, r0, r3
 800fc10:	23fa      	movs	r3, #250	@ 0xfa
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	4298      	cmp	r0, r3
 800fc16:	d9e1      	bls.n	800fbdc <HAL_LCD_Init+0xa8>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800fc18:	63a7      	str	r7, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800fc1a:	e7f2      	b.n	800fc02 <HAL_LCD_Init+0xce>
 800fc1c:	fc00000e 	.word	0xfc00000e

0800fc20 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800fc20:	4b0c      	ldr	r3, [pc, #48]	@ (800fc54 <LPTIM_WaitForFlag+0x34>)
{
 800fc22:	b570      	push	{r4, r5, r6, lr}
 800fc24:	0005      	movs	r5, r0
 800fc26:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	490b      	ldr	r1, [pc, #44]	@ (800fc58 <LPTIM_WaitForFlag+0x38>)
 800fc2c:	f7f0 fa9c 	bl	8000168 <__udivsi3>
 800fc30:	23fa      	movs	r3, #250	@ 0xfa
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800fc36:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800fc38:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 800fc3a:	2503      	movs	r5, #3
    count--;
 800fc3c:	3b01      	subs	r3, #1
    if (count == 0UL)
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d100      	bne.n	800fc44 <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 800fc42:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800fc44:	680a      	ldr	r2, [r1, #0]
 800fc46:	4022      	ands	r2, r4
 800fc48:	42a2      	cmp	r2, r4
 800fc4a:	d001      	beq.n	800fc50 <LPTIM_WaitForFlag+0x30>
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1f5      	bne.n	800fc3c <LPTIM_WaitForFlag+0x1c>

  return result;
}
 800fc50:	bd70      	pop	{r4, r5, r6, pc}
 800fc52:	46c0      	nop			@ (mov r8, r8)
 800fc54:	20000050 	.word	0x20000050
 800fc58:	00004e20 	.word	0x00004e20

0800fc5c <HAL_LPTIM_Init>:
{
 800fc5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc5e:	0004      	movs	r4, r0
    return HAL_ERROR;
 800fc60:	2001      	movs	r0, #1
  if (hlptim == NULL)
 800fc62:	2c00      	cmp	r4, #0
 800fc64:	d01f      	beq.n	800fca6 <HAL_LPTIM_Init+0x4a>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800fc66:	0023      	movs	r3, r4
 800fc68:	3352      	adds	r3, #82	@ 0x52
 800fc6a:	9301      	str	r3, [sp, #4]
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	b2da      	uxtb	r2, r3
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d105      	bne.n	800fc80 <HAL_LPTIM_Init+0x24>
    hlptim->Lock = HAL_UNLOCKED;
 800fc74:	0023      	movs	r3, r4
 800fc76:	3351      	adds	r3, #81	@ 0x51
    HAL_LPTIM_MspInit(hlptim);
 800fc78:	0020      	movs	r0, r4
    hlptim->Lock = HAL_UNLOCKED;
 800fc7a:	701a      	strb	r2, [r3, #0]
    HAL_LPTIM_MspInit(hlptim);
 800fc7c:	f7fa fd02 	bl	800a684 <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fc80:	2702      	movs	r7, #2
  __HAL_LPTIM_ENABLE(hlptim);
 800fc82:	2601      	movs	r6, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fc84:	2180      	movs	r1, #128	@ 0x80
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fc86:	9b01      	ldr	r3, [sp, #4]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fc88:	0049      	lsls	r1, r1, #1
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fc8a:	701f      	strb	r7, [r3, #0]
  __HAL_LPTIM_ENABLE(hlptim);
 800fc8c:	6825      	ldr	r5, [r4, #0]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800fc8e:	0020      	movs	r0, r4
  __HAL_LPTIM_ENABLE(hlptim);
 800fc90:	692b      	ldr	r3, [r5, #16]
 800fc92:	4333      	orrs	r3, r6
 800fc94:	612b      	str	r3, [r5, #16]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800fc96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fc98:	6069      	str	r1, [r5, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800fc9a:	62ab      	str	r3, [r5, #40]	@ 0x28
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800fc9c:	f7ff ffc0 	bl	800fc20 <LPTIM_WaitForFlag>
 800fca0:	2803      	cmp	r0, #3
 800fca2:	d101      	bne.n	800fca8 <HAL_LPTIM_Init+0x4c>
    return HAL_TIMEOUT;
 800fca4:	2003      	movs	r0, #3
}
 800fca6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800fca8:	2110      	movs	r1, #16
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800fcaa:	6a23      	ldr	r3, [r4, #32]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800fcac:	6069      	str	r1, [r5, #4]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800fcae:	0020      	movs	r0, r4
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800fcb0:	61ab      	str	r3, [r5, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800fcb2:	f7ff ffb5 	bl	800fc20 <LPTIM_WaitForFlag>
 800fcb6:	2803      	cmp	r0, #3
 800fcb8:	d0f4      	beq.n	800fca4 <HAL_LPTIM_Init+0x48>
  __HAL_LPTIM_DISABLE(hlptim);
 800fcba:	4b3a      	ldr	r3, [pc, #232]	@ (800fda4 <HAL_LPTIM_Init+0x148>)
 800fcbc:	429d      	cmp	r5, r3
 800fcbe:	d002      	beq.n	800fcc6 <HAL_LPTIM_Init+0x6a>
 800fcc0:	4b39      	ldr	r3, [pc, #228]	@ (800fda8 <HAL_LPTIM_Init+0x14c>)
 800fcc2:	429d      	cmp	r5, r3
 800fcc4:	d113      	bne.n	800fcee <HAL_LPTIM_Init+0x92>
 800fcc6:	2202      	movs	r2, #2
 800fcc8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcca:	4213      	tst	r3, r2
 800fccc:	d11b      	bne.n	800fd06 <HAL_LPTIM_Init+0xaa>
 800fcce:	2380      	movs	r3, #128	@ 0x80
 800fcd0:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800fcd2:	029b      	lsls	r3, r3, #10
 800fcd4:	4219      	tst	r1, r3
 800fcd6:	d116      	bne.n	800fd06 <HAL_LPTIM_Init+0xaa>
 800fcd8:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 800fcda:	4211      	tst	r1, r2
 800fcdc:	d113      	bne.n	800fd06 <HAL_LPTIM_Init+0xaa>
 800fcde:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800fce0:	421a      	tst	r2, r3
 800fce2:	d110      	bne.n	800fd06 <HAL_LPTIM_Init+0xaa>
 800fce4:	2201      	movs	r2, #1
 800fce6:	692b      	ldr	r3, [r5, #16]
 800fce8:	4393      	bics	r3, r2
 800fcea:	612b      	str	r3, [r5, #16]
 800fcec:	e00b      	b.n	800fd06 <HAL_LPTIM_Init+0xaa>
 800fcee:	4b2f      	ldr	r3, [pc, #188]	@ (800fdac <HAL_LPTIM_Init+0x150>)
 800fcf0:	429d      	cmp	r5, r3
 800fcf2:	d002      	beq.n	800fcfa <HAL_LPTIM_Init+0x9e>
 800fcf4:	692b      	ldr	r3, [r5, #16]
 800fcf6:	43b3      	bics	r3, r6
 800fcf8:	e7f7      	b.n	800fcea <HAL_LPTIM_Init+0x8e>
 800fcfa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fcfc:	423b      	tst	r3, r7
 800fcfe:	d102      	bne.n	800fd06 <HAL_LPTIM_Init+0xaa>
 800fd00:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fd02:	039b      	lsls	r3, r3, #14
 800fd04:	d5f6      	bpl.n	800fcf4 <HAL_LPTIM_Init+0x98>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fd06:	6860      	ldr	r0, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 800fd08:	68e9      	ldr	r1, [r5, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fd0a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fd0c:	2801      	cmp	r0, #1
 800fd0e:	d003      	beq.n	800fd18 <HAL_LPTIM_Init+0xbc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fd10:	2380      	movs	r3, #128	@ 0x80
 800fd12:	041b      	lsls	r3, r3, #16
 800fd14:	429e      	cmp	r6, r3
 800fd16:	d101      	bne.n	800fd1c <HAL_LPTIM_Init+0xc0>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800fd18:	231e      	movs	r3, #30
 800fd1a:	4399      	bics	r1, r3
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800fd1c:	4b24      	ldr	r3, [pc, #144]	@ (800fdb0 <HAL_LPTIM_Init+0x154>)
 800fd1e:	6962      	ldr	r2, [r4, #20]
 800fd20:	469c      	mov	ip, r3
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d001      	beq.n	800fd2a <HAL_LPTIM_Init+0xce>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800fd26:	4b23      	ldr	r3, [pc, #140]	@ (800fdb4 <HAL_LPTIM_Init+0x158>)
 800fd28:	4019      	ands	r1, r3
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800fd2a:	4b23      	ldr	r3, [pc, #140]	@ (800fdb8 <HAL_LPTIM_Init+0x15c>)
              hlptim->Init.UpdateMode      |
 800fd2c:	68a7      	ldr	r7, [r4, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800fd2e:	4019      	ands	r1, r3
              hlptim->Init.UpdateMode      |
 800fd30:	0003      	movs	r3, r0
 800fd32:	4333      	orrs	r3, r6
 800fd34:	433b      	orrs	r3, r7
 800fd36:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800fd38:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800fd3a:	430b      	orrs	r3, r1
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	d125      	bne.n	800fd8c <HAL_LPTIM_Init+0x130>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800fd40:	69e1      	ldr	r1, [r4, #28]
 800fd42:	6920      	ldr	r0, [r4, #16]
 800fd44:	4301      	orrs	r1, r0
 800fd46:	430b      	orrs	r3, r1
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fd48:	2180      	movs	r1, #128	@ 0x80
 800fd4a:	0409      	lsls	r1, r1, #16
 800fd4c:	428e      	cmp	r6, r1
 800fd4e:	d01f      	beq.n	800fd90 <HAL_LPTIM_Init+0x134>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800fd50:	4562      	cmp	r2, ip
 800fd52:	d004      	beq.n	800fd5e <HAL_LPTIM_Init+0x102>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800fd54:	69a1      	ldr	r1, [r4, #24]
 800fd56:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 800fd58:	69e1      	ldr	r1, [r4, #28]
 800fd5a:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800fd5c:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800fd5e:	60eb      	str	r3, [r5, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
 800fd60:	4b10      	ldr	r3, [pc, #64]	@ (800fda4 <HAL_LPTIM_Init+0x148>)
 800fd62:	429d      	cmp	r5, r3
 800fd64:	d002      	beq.n	800fd6c <HAL_LPTIM_Init+0x110>
 800fd66:	4b10      	ldr	r3, [pc, #64]	@ (800fda8 <HAL_LPTIM_Init+0x14c>)
 800fd68:	429d      	cmp	r5, r3
 800fd6a:	d116      	bne.n	800fd9a <HAL_LPTIM_Init+0x13e>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800fd6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fd6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fd70:	4313      	orrs	r3, r2
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800fd72:	626b      	str	r3, [r5, #36]	@ 0x24
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800fd74:	0022      	movs	r2, r4
 800fd76:	2301      	movs	r3, #1
 800fd78:	3253      	adds	r2, #83	@ 0x53
 800fd7a:	7013      	strb	r3, [r2, #0]
 800fd7c:	7053      	strb	r3, [r2, #1]
 800fd7e:	7093      	strb	r3, [r2, #2]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800fd80:	9a01      	ldr	r2, [sp, #4]
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800fd82:	3456      	adds	r4, #86	@ 0x56
 800fd84:	7023      	strb	r3, [r4, #0]
  return HAL_OK;
 800fd86:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800fd88:	7013      	strb	r3, [r2, #0]
  return HAL_OK;
 800fd8a:	e78c      	b.n	800fca6 <HAL_LPTIM_Init+0x4a>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fd8c:	2801      	cmp	r0, #1
 800fd8e:	d1db      	bne.n	800fd48 <HAL_LPTIM_Init+0xec>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800fd90:	68e1      	ldr	r1, [r4, #12]
 800fd92:	6920      	ldr	r0, [r4, #16]
 800fd94:	4301      	orrs	r1, r0
 800fd96:	430b      	orrs	r3, r1
 800fd98:	e7da      	b.n	800fd50 <HAL_LPTIM_Init+0xf4>
    if (hlptim->Instance == LPTIM2)
 800fd9a:	4b04      	ldr	r3, [pc, #16]	@ (800fdac <HAL_LPTIM_Init+0x150>)
 800fd9c:	429d      	cmp	r5, r3
 800fd9e:	d1e9      	bne.n	800fd74 <HAL_LPTIM_Init+0x118>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800fda0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fda2:	e7e6      	b.n	800fd72 <HAL_LPTIM_Init+0x116>
 800fda4:	40007c00 	.word	0x40007c00
 800fda8:	40009000 	.word	0x40009000
 800fdac:	40009400 	.word	0x40009400
 800fdb0:	0000ffff 	.word	0x0000ffff
 800fdb4:	ffff1f3f 	.word	0xffff1f3f
 800fdb8:	ff39f1fe 	.word	0xff39f1fe

0800fdbc <HAL_LPTIM_CompareMatchCallback>:
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
 800fdbc:	4770      	bx	lr

0800fdbe <HAL_LPTIM_AutoReloadMatchCallback>:
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
 800fdbe:	4770      	bx	lr

0800fdc0 <HAL_LPTIM_TriggerCallback>:
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
 800fdc0:	4770      	bx	lr

0800fdc2 <HAL_LPTIM_CompareWriteCallback>:
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800fdc2:	4770      	bx	lr

0800fdc4 <HAL_LPTIM_AutoReloadWriteCallback>:
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800fdc4:	4770      	bx	lr

0800fdc6 <HAL_LPTIM_DirectionUpCallback>:
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
 800fdc6:	4770      	bx	lr

0800fdc8 <HAL_LPTIM_DirectionDownCallback>:
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
 800fdc8:	4770      	bx	lr

0800fdca <HAL_LPTIM_UpdateEventCallback>:
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
 800fdca:	4770      	bx	lr

0800fdcc <HAL_LPTIM_RepCounterWriteCallback>:
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800fdcc:	4770      	bx	lr

0800fdce <HAL_LPTIM_IC_CaptureCallback>:
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
 800fdce:	4770      	bx	lr

0800fdd0 <HAL_LPTIM_IC_OverCaptureCallback>:
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
 800fdd0:	4770      	bx	lr

0800fdd2 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	6802      	ldr	r2, [r0, #0]
{
 800fdd6:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fdd8:	6811      	ldr	r1, [r2, #0]
{
 800fdda:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fddc:	4219      	tst	r1, r3
 800fdde:	d00e      	beq.n	800fdfe <HAL_LPTIM_IRQHandler+0x2c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fde0:	6891      	ldr	r1, [r2, #8]
 800fde2:	4219      	tst	r1, r3
 800fde4:	d00b      	beq.n	800fdfe <HAL_LPTIM_IRQHandler+0x2c>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fde6:	0005      	movs	r5, r0
 800fde8:	3538      	adds	r5, #56	@ 0x38
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 800fdea:	6053      	str	r3, [r2, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fdec:	702b      	strb	r3, [r5, #0]
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 800fdee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fdf0:	421a      	tst	r2, r3
 800fdf2:	d100      	bne.n	800fdf6 <HAL_LPTIM_IRQHandler+0x24>
 800fdf4:	e10c      	b.n	8010010 <HAL_LPTIM_IRQHandler+0x23e>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fdf6:	f7ff ffea 	bl	800fdce <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800fdfe:	2280      	movs	r2, #128	@ 0x80
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	0092      	lsls	r2, r2, #2
 800fe04:	6819      	ldr	r1, [r3, #0]
 800fe06:	4211      	tst	r1, r2
 800fe08:	d011      	beq.n	800fe2e <HAL_LPTIM_IRQHandler+0x5c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800fe0a:	6899      	ldr	r1, [r3, #8]
 800fe0c:	4211      	tst	r1, r2
 800fe0e:	d00e      	beq.n	800fe2e <HAL_LPTIM_IRQHandler+0x5c>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fe10:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800fe12:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fe14:	3aff      	subs	r2, #255	@ 0xff
 800fe16:	3538      	adds	r5, #56	@ 0x38
 800fe18:	3aff      	subs	r2, #255	@ 0xff
 800fe1a:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800fe1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fe1e:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800fe20:	03db      	lsls	r3, r3, #15
 800fe22:	d400      	bmi.n	800fe26 <HAL_LPTIM_IRQHandler+0x54>
 800fe24:	e0f7      	b.n	8010016 <HAL_LPTIM_IRQHandler+0x244>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fe26:	f7ff ffd2 	bl	800fdce <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 800fe2e:	2280      	movs	r2, #128	@ 0x80
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	00d2      	lsls	r2, r2, #3
 800fe34:	6819      	ldr	r1, [r3, #0]
 800fe36:	4211      	tst	r1, r2
 800fe38:	d010      	beq.n	800fe5c <HAL_LPTIM_IRQHandler+0x8a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 800fe3a:	6899      	ldr	r1, [r3, #8]
 800fe3c:	4211      	tst	r1, r2
 800fe3e:	d00d      	beq.n	800fe5c <HAL_LPTIM_IRQHandler+0x8a>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800fe40:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 800fe42:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800fe44:	2204      	movs	r2, #4
 800fe46:	3538      	adds	r5, #56	@ 0x38
 800fe48:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 800fe4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fe4c:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 800fe4e:	07db      	lsls	r3, r3, #31
 800fe50:	d400      	bmi.n	800fe54 <HAL_LPTIM_IRQHandler+0x82>
 800fe52:	e0e3      	b.n	801001c <HAL_LPTIM_IRQHandler+0x24a>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fe54:	f7ff ffbb 	bl	800fdce <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 800fe5c:	2280      	movs	r2, #128	@ 0x80
 800fe5e:	6823      	ldr	r3, [r4, #0]
 800fe60:	0112      	lsls	r2, r2, #4
 800fe62:	6819      	ldr	r1, [r3, #0]
 800fe64:	4211      	tst	r1, r2
 800fe66:	d010      	beq.n	800fe8a <HAL_LPTIM_IRQHandler+0xb8>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 800fe68:	6899      	ldr	r1, [r3, #8]
 800fe6a:	4211      	tst	r1, r2
 800fe6c:	d00d      	beq.n	800fe8a <HAL_LPTIM_IRQHandler+0xb8>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800fe6e:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 800fe70:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800fe72:	2208      	movs	r2, #8
 800fe74:	3538      	adds	r5, #56	@ 0x38
 800fe76:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 800fe78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fe7a:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 800fe7c:	03db      	lsls	r3, r3, #15
 800fe7e:	d400      	bmi.n	800fe82 <HAL_LPTIM_IRQHandler+0xb0>
 800fe80:	e0cf      	b.n	8010022 <HAL_LPTIM_IRQHandler+0x250>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fe82:	f7ff ffa4 	bl	800fdce <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fe86:	2300      	movs	r3, #0
 800fe88:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800fe8a:	2280      	movs	r2, #128	@ 0x80
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	0152      	lsls	r2, r2, #5
 800fe90:	6819      	ldr	r1, [r3, #0]
 800fe92:	4211      	tst	r1, r2
 800fe94:	d00c      	beq.n	800feb0 <HAL_LPTIM_IRQHandler+0xde>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800fe96:	6899      	ldr	r1, [r3, #8]
 800fe98:	4211      	tst	r1, r2
 800fe9a:	d009      	beq.n	800feb0 <HAL_LPTIM_IRQHandler+0xde>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fe9c:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800fe9e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fea0:	2301      	movs	r3, #1
 800fea2:	3538      	adds	r5, #56	@ 0x38
 800fea4:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800fea6:	0020      	movs	r0, r4
 800fea8:	f7ff ff92 	bl	800fdd0 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800feac:	2300      	movs	r3, #0
 800feae:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800feb0:	2280      	movs	r2, #128	@ 0x80
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	0192      	lsls	r2, r2, #6
 800feb6:	6819      	ldr	r1, [r3, #0]
 800feb8:	4211      	tst	r1, r2
 800feba:	d00c      	beq.n	800fed6 <HAL_LPTIM_IRQHandler+0x104>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800febc:	6899      	ldr	r1, [r3, #8]
 800febe:	4211      	tst	r1, r2
 800fec0:	d009      	beq.n	800fed6 <HAL_LPTIM_IRQHandler+0x104>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fec2:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800fec4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fec6:	2302      	movs	r3, #2
 800fec8:	3538      	adds	r5, #56	@ 0x38
 800feca:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800fecc:	0020      	movs	r0, r4
 800fece:	f7ff ff7f 	bl	800fdd0 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fed2:	2300      	movs	r3, #0
 800fed4:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800fed6:	2280      	movs	r2, #128	@ 0x80
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	01d2      	lsls	r2, r2, #7
 800fedc:	6819      	ldr	r1, [r3, #0]
 800fede:	4211      	tst	r1, r2
 800fee0:	d00c      	beq.n	800fefc <HAL_LPTIM_IRQHandler+0x12a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800fee2:	6899      	ldr	r1, [r3, #8]
 800fee4:	4211      	tst	r1, r2
 800fee6:	d009      	beq.n	800fefc <HAL_LPTIM_IRQHandler+0x12a>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800fee8:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 800feea:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800feec:	2304      	movs	r3, #4
 800feee:	3538      	adds	r5, #56	@ 0x38
 800fef0:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800fef2:	0020      	movs	r0, r4
 800fef4:	f7ff ff6c 	bl	800fdd0 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fef8:	2300      	movs	r3, #0
 800fefa:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 800fefc:	2280      	movs	r2, #128	@ 0x80
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	0212      	lsls	r2, r2, #8
 800ff02:	6819      	ldr	r1, [r3, #0]
 800ff04:	4211      	tst	r1, r2
 800ff06:	d00c      	beq.n	800ff22 <HAL_LPTIM_IRQHandler+0x150>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 800ff08:	6899      	ldr	r1, [r3, #8]
 800ff0a:	4211      	tst	r1, r2
 800ff0c:	d009      	beq.n	800ff22 <HAL_LPTIM_IRQHandler+0x150>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800ff0e:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 800ff10:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800ff12:	2308      	movs	r3, #8
 800ff14:	3538      	adds	r5, #56	@ 0x38
 800ff16:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800ff18:	0020      	movs	r0, r4
 800ff1a:	f7ff ff59 	bl	800fdd0 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800ff22:	2202      	movs	r2, #2
 800ff24:	6823      	ldr	r3, [r4, #0]
 800ff26:	6819      	ldr	r1, [r3, #0]
 800ff28:	4211      	tst	r1, r2
 800ff2a:	d006      	beq.n	800ff3a <HAL_LPTIM_IRQHandler+0x168>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800ff2c:	6899      	ldr	r1, [r3, #8]
 800ff2e:	4211      	tst	r1, r2
 800ff30:	d003      	beq.n	800ff3a <HAL_LPTIM_IRQHandler+0x168>
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800ff32:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800ff34:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800ff36:	f7ff ff42 	bl	800fdbe <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800ff3a:	2204      	movs	r2, #4
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	6819      	ldr	r1, [r3, #0]
 800ff40:	4211      	tst	r1, r2
 800ff42:	d006      	beq.n	800ff52 <HAL_LPTIM_IRQHandler+0x180>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800ff44:	6899      	ldr	r1, [r3, #8]
 800ff46:	4211      	tst	r1, r2
 800ff48:	d003      	beq.n	800ff52 <HAL_LPTIM_IRQHandler+0x180>
      HAL_LPTIM_TriggerCallback(hlptim);
 800ff4a:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800ff4c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800ff4e:	f7ff ff37 	bl	800fdc0 <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800ff52:	2208      	movs	r2, #8
 800ff54:	6823      	ldr	r3, [r4, #0]
 800ff56:	6819      	ldr	r1, [r3, #0]
 800ff58:	4211      	tst	r1, r2
 800ff5a:	d00a      	beq.n	800ff72 <HAL_LPTIM_IRQHandler+0x1a0>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800ff5c:	6899      	ldr	r1, [r3, #8]
 800ff5e:	4211      	tst	r1, r2
 800ff60:	d007      	beq.n	800ff72 <HAL_LPTIM_IRQHandler+0x1a0>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800ff62:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800ff64:	0023      	movs	r3, r4
 800ff66:	3a07      	subs	r2, #7
 800ff68:	3338      	adds	r3, #56	@ 0x38
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800ff6a:	0020      	movs	r0, r4
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800ff6c:	701a      	strb	r2, [r3, #0]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800ff6e:	f7ff ff28 	bl	800fdc2 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800ff72:	2280      	movs	r2, #128	@ 0x80
 800ff74:	6823      	ldr	r3, [r4, #0]
 800ff76:	0312      	lsls	r2, r2, #12
 800ff78:	6819      	ldr	r1, [r3, #0]
 800ff7a:	4211      	tst	r1, r2
 800ff7c:	d00a      	beq.n	800ff94 <HAL_LPTIM_IRQHandler+0x1c2>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800ff7e:	6899      	ldr	r1, [r3, #8]
 800ff80:	4211      	tst	r1, r2
 800ff82:	d007      	beq.n	800ff94 <HAL_LPTIM_IRQHandler+0x1c2>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800ff84:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800ff86:	0023      	movs	r3, r4
 800ff88:	2202      	movs	r2, #2
 800ff8a:	3338      	adds	r3, #56	@ 0x38
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800ff8c:	0020      	movs	r0, r4
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800ff8e:	701a      	strb	r2, [r3, #0]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800ff90:	f7ff ff17 	bl	800fdc2 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800ff94:	2210      	movs	r2, #16
 800ff96:	6823      	ldr	r3, [r4, #0]
 800ff98:	6819      	ldr	r1, [r3, #0]
 800ff9a:	4211      	tst	r1, r2
 800ff9c:	d006      	beq.n	800ffac <HAL_LPTIM_IRQHandler+0x1da>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800ff9e:	6899      	ldr	r1, [r3, #8]
 800ffa0:	4211      	tst	r1, r2
 800ffa2:	d003      	beq.n	800ffac <HAL_LPTIM_IRQHandler+0x1da>
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800ffa4:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800ffa6:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800ffa8:	f7ff ff0c 	bl	800fdc4 <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800ffac:	2220      	movs	r2, #32
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	6819      	ldr	r1, [r3, #0]
 800ffb2:	4211      	tst	r1, r2
 800ffb4:	d006      	beq.n	800ffc4 <HAL_LPTIM_IRQHandler+0x1f2>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800ffb6:	6899      	ldr	r1, [r3, #8]
 800ffb8:	4211      	tst	r1, r2
 800ffba:	d003      	beq.n	800ffc4 <HAL_LPTIM_IRQHandler+0x1f2>
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800ffbc:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800ffbe:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800ffc0:	f7ff ff01 	bl	800fdc6 <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800ffc4:	2240      	movs	r2, #64	@ 0x40
 800ffc6:	6823      	ldr	r3, [r4, #0]
 800ffc8:	6819      	ldr	r1, [r3, #0]
 800ffca:	4211      	tst	r1, r2
 800ffcc:	d006      	beq.n	800ffdc <HAL_LPTIM_IRQHandler+0x20a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800ffce:	6899      	ldr	r1, [r3, #8]
 800ffd0:	4211      	tst	r1, r2
 800ffd2:	d003      	beq.n	800ffdc <HAL_LPTIM_IRQHandler+0x20a>
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800ffd4:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800ffd6:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800ffd8:	f7ff fef6 	bl	800fdc8 <HAL_LPTIM_DirectionDownCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800ffdc:	2280      	movs	r2, #128	@ 0x80
 800ffde:	6823      	ldr	r3, [r4, #0]
 800ffe0:	6819      	ldr	r1, [r3, #0]
 800ffe2:	4211      	tst	r1, r2
 800ffe4:	d006      	beq.n	800fff4 <HAL_LPTIM_IRQHandler+0x222>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800ffe6:	6899      	ldr	r1, [r3, #8]
 800ffe8:	4211      	tst	r1, r2
 800ffea:	d003      	beq.n	800fff4 <HAL_LPTIM_IRQHandler+0x222>
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800ffec:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800ffee:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800fff0:	f7ff feeb 	bl	800fdca <HAL_LPTIM_UpdateEventCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800fff4:	2280      	movs	r2, #128	@ 0x80
 800fff6:	6823      	ldr	r3, [r4, #0]
 800fff8:	0052      	lsls	r2, r2, #1
 800fffa:	6819      	ldr	r1, [r3, #0]
 800fffc:	4211      	tst	r1, r2
 800fffe:	d006      	beq.n	801000e <HAL_LPTIM_IRQHandler+0x23c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8010000:	6899      	ldr	r1, [r3, #8]
 8010002:	4211      	tst	r1, r2
 8010004:	d003      	beq.n	801000e <HAL_LPTIM_IRQHandler+0x23c>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8010006:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8010008:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801000a:	f7ff fedf 	bl	800fdcc <HAL_LPTIM_RepCounterWriteCallback>
}
 801000e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8010010:	f7ff fed4 	bl	800fdbc <HAL_LPTIM_CompareMatchCallback>
 8010014:	e6f1      	b.n	800fdfa <HAL_LPTIM_IRQHandler+0x28>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8010016:	f7ff fed1 	bl	800fdbc <HAL_LPTIM_CompareMatchCallback>
 801001a:	e706      	b.n	800fe2a <HAL_LPTIM_IRQHandler+0x58>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 801001c:	f7ff fece 	bl	800fdbc <HAL_LPTIM_CompareMatchCallback>
 8010020:	e71a      	b.n	800fe58 <HAL_LPTIM_IRQHandler+0x86>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8010022:	f7ff fecb 	bl	800fdbc <HAL_LPTIM_CompareMatchCallback>
 8010026:	e72e      	b.n	800fe86 <HAL_LPTIM_IRQHandler+0xb4>

08010028 <PCD_GET_EP_DBUF0_CNT.isra.0>:
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8010028:	230a      	movs	r3, #10
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
 801002a:	b082      	sub	sp, #8

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
  {
    count--;
 801002c:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 801002e:	9b01      	ldr	r3, [sp, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d107      	bne.n	8010044 <PCD_GET_EP_DBUF0_CNT.isra.0+0x1c>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8010034:	4b05      	ldr	r3, [pc, #20]	@ (801004c <PCD_GET_EP_DBUF0_CNT.isra.0+0x24>)
 8010036:	00c0      	lsls	r0, r0, #3
 8010038:	18c0      	adds	r0, r0, r3
 801003a:	6800      	ldr	r0, [r0, #0]
 801003c:	0180      	lsls	r0, r0, #6
 801003e:	0d80      	lsrs	r0, r0, #22
}
 8010040:	b002      	add	sp, #8
 8010042:	4770      	bx	lr
    count--;
 8010044:	9b01      	ldr	r3, [sp, #4]
 8010046:	3b01      	subs	r3, #1
 8010048:	e7f0      	b.n	801002c <PCD_GET_EP_DBUF0_CNT.isra.0+0x4>
 801004a:	46c0      	nop			@ (mov r8, r8)
 801004c:	40009800 	.word	0x40009800

08010050 <PCD_GET_EP_RX_CNT.isra.0>:
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8010050:	230a      	movs	r3, #10
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
 8010052:	b082      	sub	sp, #8
    count--;
 8010054:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8010056:	9b01      	ldr	r3, [sp, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d107      	bne.n	801006c <PCD_GET_EP_RX_CNT.isra.0+0x1c>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 801005c:	4b05      	ldr	r3, [pc, #20]	@ (8010074 <PCD_GET_EP_RX_CNT.isra.0+0x24>)
 801005e:	00c0      	lsls	r0, r0, #3
 8010060:	18c0      	adds	r0, r0, r3
 8010062:	6840      	ldr	r0, [r0, #4]
 8010064:	0180      	lsls	r0, r0, #6
 8010066:	0d80      	lsrs	r0, r0, #22
}
 8010068:	b002      	add	sp, #8
 801006a:	4770      	bx	lr
    count--;
 801006c:	9b01      	ldr	r3, [sp, #4]
 801006e:	3b01      	subs	r3, #1
 8010070:	e7f0      	b.n	8010054 <PCD_GET_EP_RX_CNT.isra.0+0x4>
 8010072:	46c0      	nop			@ (mov r8, r8)
 8010074:	40009800 	.word	0x40009800

08010078 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010078:	b570      	push	{r4, r5, r6, lr}
 801007a:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 801007c:	2001      	movs	r0, #1
  if (hpcd == NULL)
 801007e:	2c00      	cmp	r4, #0
 8010080:	d02b      	beq.n	80100da <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8010082:	4d22      	ldr	r5, [pc, #136]	@ (801010c <HAL_PCD_Init+0x94>)
 8010084:	5d63      	ldrb	r3, [r4, r5]
 8010086:	b2da      	uxtb	r2, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	d105      	bne.n	8010098 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801008c:	23a4      	movs	r3, #164	@ 0xa4
 801008e:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8010090:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8010092:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 8010094:	f7fa fc24 	bl	800a8e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010098:	2303      	movs	r3, #3
 801009a:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801009c:	6820      	ldr	r0, [r4, #0]
 801009e:	f003 fbe1 	bl	8013864 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100a2:	2300      	movs	r3, #0
 80100a4:	0022      	movs	r2, r4
 80100a6:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80100a8:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100aa:	7920      	ldrb	r0, [r4, #4]
 80100ac:	3210      	adds	r2, #16
 80100ae:	4298      	cmp	r0, r3
 80100b0:	d114      	bne.n	80100dc <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100b2:	2100      	movs	r1, #0
 80100b4:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80100b6:	0008      	movs	r0, r1
 80100b8:	3251      	adds	r2, #81	@ 0x51
 80100ba:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100bc:	428b      	cmp	r3, r1
 80100be:	d117      	bne.n	80100f0 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80100c0:	6861      	ldr	r1, [r4, #4]
 80100c2:	68a2      	ldr	r2, [r4, #8]
 80100c4:	6820      	ldr	r0, [r4, #0]
 80100c6:	f003 fbd5 	bl	8013874 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80100ca:	2300      	movs	r3, #0
 80100cc:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80100ce:	3301      	adds	r3, #1
 80100d0:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80100d2:	7aa3      	ldrb	r3, [r4, #10]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d015      	beq.n	8010104 <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80100d8:	2000      	movs	r0, #0
}
 80100da:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 80100dc:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100de:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 80100e0:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80100e2:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80100e4:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80100e6:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 80100e8:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	3228      	adds	r2, #40	@ 0x28
 80100ee:	e7de      	b.n	80100ae <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 80100f0:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100f2:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80100f4:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80100f6:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80100f8:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80100fa:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80100fc:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80100fe:	b2c9      	uxtb	r1, r1
 8010100:	3228      	adds	r2, #40	@ 0x28
 8010102:	e7db      	b.n	80100bc <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8010104:	0020      	movs	r0, r4
 8010106:	f000 fdb6 	bl	8010c76 <HAL_PCDEx_ActivateLPM>
 801010a:	e7e5      	b.n	80100d8 <HAL_PCD_Init+0x60>
 801010c:	00000291 	.word	0x00000291

08010110 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8010110:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8010112:	25a4      	movs	r5, #164	@ 0xa4
 8010114:	00ad      	lsls	r5, r5, #2
 8010116:	5d43      	ldrb	r3, [r0, r5]
{
 8010118:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 801011a:	2002      	movs	r0, #2
 801011c:	2b01      	cmp	r3, #1
 801011e:	d009      	beq.n	8010134 <HAL_PCD_Start+0x24>
 8010120:	2301      	movs	r3, #1
 8010122:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8010124:	6820      	ldr	r0, [r4, #0]
 8010126:	f003 fb95 	bl	8013854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801012a:	6820      	ldr	r0, [r4, #0]
 801012c:	f003 fe00 	bl	8013d30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8010130:	2000      	movs	r0, #0
 8010132:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8010134:	bd70      	pop	{r4, r5, r6, pc}

08010136 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8010136:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8010138:	25a4      	movs	r5, #164	@ 0xa4
 801013a:	00ad      	lsls	r5, r5, #2
 801013c:	5d43      	ldrb	r3, [r0, r5]
{
 801013e:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8010140:	2002      	movs	r0, #2
 8010142:	2b01      	cmp	r3, #1
 8010144:	d009      	beq.n	801015a <HAL_PCD_Stop+0x24>
 8010146:	2301      	movs	r3, #1
 8010148:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 801014a:	6820      	ldr	r0, [r4, #0]
 801014c:	f003 fb8a 	bl	8013864 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8010150:	6820      	ldr	r0, [r4, #0]
 8010152:	f003 fdf5 	bl	8013d40 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8010156:	2000      	movs	r0, #0
 8010158:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 801015a:	bd70      	pop	{r4, r5, r6, pc}

0801015c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801015c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 801015e:	25a4      	movs	r5, #164	@ 0xa4
 8010160:	00ad      	lsls	r5, r5, #2
 8010162:	5d43      	ldrb	r3, [r0, r5]
{
 8010164:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8010166:	2002      	movs	r0, #2
 8010168:	2b01      	cmp	r3, #1
 801016a:	d007      	beq.n	801017c <HAL_PCD_SetAddress+0x20>
 801016c:	2301      	movs	r3, #1
 801016e:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8010170:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8010172:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8010174:	f003 fdd6 	bl	8013d24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8010178:	2000      	movs	r0, #0
 801017a:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 801017c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010180 <HAL_PCD_IRQHandler>:
{
 8010180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010182:	0004      	movs	r4, r0
 8010184:	b087      	sub	sp, #28
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8010186:	6800      	ldr	r0, [r0, #0]
 8010188:	f003 fde2 	bl	8013d50 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801018c:	2580      	movs	r5, #128	@ 0x80
 801018e:	2380      	movs	r3, #128	@ 0x80
 8010190:	022d      	lsls	r5, r5, #8
 8010192:	021b      	lsls	r3, r3, #8
 8010194:	4005      	ands	r5, r0
 8010196:	4218      	tst	r0, r3
 8010198:	d100      	bne.n	801019c <HAL_PCD_IRQHandler+0x1c>
 801019a:	e3a5      	b.n	80108e8 <HAL_PCD_IRQHandler+0x768>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801019c:	2280      	movs	r2, #128	@ 0x80
 801019e:	6826      	ldr	r6, [r4, #0]
 80101a0:	0212      	lsls	r2, r2, #8
 80101a2:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80101a4:	4213      	tst	r3, r2
 80101a6:	d101      	bne.n	80101ac <HAL_PCD_IRQHandler+0x2c>
}
 80101a8:	b007      	add	sp, #28
 80101aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80101ac:	220f      	movs	r2, #15
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80101ae:	6c73      	ldr	r3, [r6, #68]	@ 0x44
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80101b0:	401a      	ands	r2, r3
 80101b2:	9200      	str	r2, [sp, #0]

    if (epindex == 0U)
 80101b4:	220f      	movs	r2, #15
 80101b6:	4213      	tst	r3, r2
 80101b8:	d000      	beq.n	80101bc <HAL_PCD_IRQHandler+0x3c>
 80101ba:	e07e      	b.n	80102ba <HAL_PCD_IRQHandler+0x13a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80101bc:	0019      	movs	r1, r3
 80101be:	3201      	adds	r2, #1
 80101c0:	4011      	ands	r1, r2
 80101c2:	4213      	tst	r3, r2
 80101c4:	d121      	bne.n	801020a <HAL_PCD_IRQHandler+0x8a>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80101c6:	6833      	ldr	r3, [r6, #0]
 80101c8:	4ad3      	ldr	r2, [pc, #844]	@ (8010518 <HAL_PCD_IRQHandler+0x398>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80101ca:	0020      	movs	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80101cc:	4013      	ands	r3, r2
 80101ce:	2280      	movs	r2, #128	@ 0x80
 80101d0:	0212      	lsls	r2, r2, #8
 80101d2:	4313      	orrs	r3, r2
 80101d4:	6033      	str	r3, [r6, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80101d6:	7c23      	ldrb	r3, [r4, #16]
 80101d8:	4ad0      	ldr	r2, [pc, #832]	@ (801051c <HAL_PCD_IRQHandler+0x39c>)
 80101da:	00db      	lsls	r3, r3, #3
 80101dc:	189b      	adds	r3, r3, r2
 80101de:	681b      	ldr	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 80101e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80101e2:	019b      	lsls	r3, r3, #6
 80101e4:	0d9b      	lsrs	r3, r3, #22
 80101e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 80101e8:	18d3      	adds	r3, r2, r3
 80101ea:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80101ec:	f008 fba8 	bl	8018940 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80101f0:	7b23      	ldrb	r3, [r4, #12]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d0d2      	beq.n	801019c <HAL_PCD_IRQHandler+0x1c>
 80101f6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80101f8:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80101fa:	2a00      	cmp	r2, #0
 80101fc:	d1ce      	bne.n	801019c <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80101fe:	2080      	movs	r0, #128	@ 0x80
 8010200:	7b23      	ldrb	r3, [r4, #12]
 8010202:	4303      	orrs	r3, r0
 8010204:	64cb      	str	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8010206:	7322      	strb	r2, [r4, #12]
 8010208:	e7c8      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801020a:	6833      	ldr	r3, [r6, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801020c:	2280      	movs	r2, #128	@ 0x80
 801020e:	001f      	movs	r7, r3
 8010210:	0112      	lsls	r2, r2, #4
 8010212:	4017      	ands	r7, r2
 8010214:	4213      	tst	r3, r2
 8010216:	d01b      	beq.n	8010250 <HAL_PCD_IRQHandler+0xd0>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010218:	23a8      	movs	r3, #168	@ 0xa8
 801021a:	005b      	lsls	r3, r3, #1
 801021c:	5ce0      	ldrb	r0, [r4, r3]
 801021e:	f7ff ff17 	bl	8010050 <PCD_GET_EP_RX_CNT.isra.0>
 8010222:	0022      	movs	r2, r4

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010224:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010226:	3251      	adds	r2, #81	@ 0x51
 8010228:	32ff      	adds	r2, #255	@ 0xff
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801022a:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801022c:	0003      	movs	r3, r0
 801022e:	61d0      	str	r0, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010230:	1861      	adds	r1, r4, r1
 8010232:	0030      	movs	r0, r6
 8010234:	88d2      	ldrh	r2, [r2, #6]
 8010236:	f003 ff2b 	bl	8014090 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801023a:	6821      	ldr	r1, [r4, #0]
 801023c:	4bb8      	ldr	r3, [pc, #736]	@ (8010520 <HAL_PCD_IRQHandler+0x3a0>)
 801023e:	680a      	ldr	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8010240:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010242:	401a      	ands	r2, r3
 8010244:	2380      	movs	r3, #128	@ 0x80
 8010246:	4313      	orrs	r3, r2
 8010248:	600b      	str	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 801024a:	f008 fb27 	bl	801889c <HAL_PCD_SetupStageCallback>
 801024e:	e7a5      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8010250:	041b      	lsls	r3, r3, #16
 8010252:	d5a3      	bpl.n	801019c <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010254:	6832      	ldr	r2, [r6, #0]
 8010256:	4bb2      	ldr	r3, [pc, #712]	@ (8010520 <HAL_PCD_IRQHandler+0x3a0>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010258:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801025a:	401a      	ands	r2, r3
 801025c:	2380      	movs	r3, #128	@ 0x80
 801025e:	4313      	orrs	r3, r2
 8010260:	6033      	str	r3, [r6, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010262:	23a8      	movs	r3, #168	@ 0xa8
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	5ce0      	ldrb	r0, [r4, r3]
 8010268:	f7ff fef2 	bl	8010050 <PCD_GET_EP_RX_CNT.isra.0>
 801026c:	3551      	adds	r5, #81	@ 0x51
 801026e:	35ff      	adds	r5, #255	@ 0xff
 8010270:	1e03      	subs	r3, r0, #0
 8010272:	61e8      	str	r0, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8010274:	d00e      	beq.n	8010294 <HAL_PCD_IRQHandler+0x114>
 8010276:	6969      	ldr	r1, [r5, #20]
 8010278:	2900      	cmp	r1, #0
 801027a:	d00b      	beq.n	8010294 <HAL_PCD_IRQHandler+0x114>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801027c:	0030      	movs	r0, r6
 801027e:	88ea      	ldrh	r2, [r5, #6]
 8010280:	f003 ff06 	bl	8014090 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8010284:	696b      	ldr	r3, [r5, #20]
 8010286:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8010288:	0039      	movs	r1, r7
            ep->xfer_buff += ep->xfer_count;
 801028a:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801028c:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 801028e:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8010290:	f008 fbc0 	bl	8018a14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8010294:	6821      	ldr	r1, [r4, #0]
 8010296:	680a      	ldr	r2, [r1, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8010298:	0513      	lsls	r3, r2, #20
 801029a:	d500      	bpl.n	801029e <HAL_PCD_IRQHandler+0x11e>
 801029c:	e77e      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
 801029e:	23c0      	movs	r3, #192	@ 0xc0
 80102a0:	019b      	lsls	r3, r3, #6
 80102a2:	401a      	ands	r2, r3
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d100      	bne.n	80102aa <HAL_PCD_IRQHandler+0x12a>
 80102a8:	e778      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80102aa:	680a      	ldr	r2, [r1, #0]
 80102ac:	489d      	ldr	r0, [pc, #628]	@ (8010524 <HAL_PCD_IRQHandler+0x3a4>)
 80102ae:	4002      	ands	r2, r0
 80102b0:	4053      	eors	r3, r2
 80102b2:	4a9d      	ldr	r2, [pc, #628]	@ (8010528 <HAL_PCD_IRQHandler+0x3a8>)
 80102b4:	4313      	orrs	r3, r2
 80102b6:	600b      	str	r3, [r1, #0]
 80102b8:	e770      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80102ba:	9b00      	ldr	r3, [sp, #0]
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	9304      	str	r3, [sp, #16]
 80102c0:	18f3      	adds	r3, r6, r3
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	9203      	str	r2, [sp, #12]
 80102c6:	466a      	mov	r2, sp
 80102c8:	8992      	ldrh	r2, [r2, #12]
 80102ca:	9201      	str	r2, [sp, #4]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80102cc:	9a03      	ldr	r2, [sp, #12]
 80102ce:	0412      	lsls	r2, r2, #16
 80102d0:	d400      	bmi.n	80102d4 <HAL_PCD_IRQHandler+0x154>
 80102d2:	e082      	b.n	80103da <HAL_PCD_IRQHandler+0x25a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80102d4:	6819      	ldr	r1, [r3, #0]
 80102d6:	4a92      	ldr	r2, [pc, #584]	@ (8010520 <HAL_PCD_IRQHandler+0x3a0>)
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80102d8:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80102da:	4011      	ands	r1, r2
 80102dc:	2280      	movs	r2, #128	@ 0x80
 80102de:	430a      	orrs	r2, r1
 80102e0:	601a      	str	r2, [r3, #0]
        if (ep->doublebuffer == 0U)
 80102e2:	9b00      	ldr	r3, [sp, #0]
 80102e4:	435d      	muls	r5, r3
 80102e6:	1965      	adds	r5, r4, r5
 80102e8:	002b      	movs	r3, r5
 80102ea:	002a      	movs	r2, r5
 80102ec:	335d      	adds	r3, #93	@ 0x5d
 80102ee:	33ff      	adds	r3, #255	@ 0xff
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	3251      	adds	r2, #81	@ 0x51
 80102f4:	32ff      	adds	r2, #255	@ 0xff
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10c      	bne.n	8010314 <HAL_PCD_IRQHandler+0x194>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80102fa:	7810      	ldrb	r0, [r2, #0]
 80102fc:	f7ff fea8 	bl	8010050 <PCD_GET_EP_RX_CNT.isra.0>
 8010300:	1e07      	subs	r7, r0, #0

          if (count != 0U)
 8010302:	d04f      	beq.n	80103a4 <HAL_PCD_IRQHandler+0x224>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8010304:	002b      	movs	r3, r5
 8010306:	3357      	adds	r3, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010308:	33ff      	adds	r3, #255	@ 0xff
 801030a:	35fc      	adds	r5, #252	@ 0xfc
 801030c:	881a      	ldrh	r2, [r3, #0]
 801030e:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8010310:	003b      	movs	r3, r7
 8010312:	e044      	b.n	801039e <HAL_PCD_IRQHandler+0x21e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010314:	7813      	ldrb	r3, [r2, #0]
 8010316:	9302      	str	r3, [sp, #8]
          if (ep->type == EP_TYPE_BULK)
 8010318:	002b      	movs	r3, r5
 801031a:	3354      	adds	r3, #84	@ 0x54
 801031c:	33ff      	adds	r3, #255	@ 0xff
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2b02      	cmp	r3, #2
 8010322:	d000      	beq.n	8010326 <HAL_PCD_IRQHandler+0x1a6>
 8010324:	e0c7      	b.n	80104b6 <HAL_PCD_IRQHandler+0x336>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010326:	2380      	movs	r3, #128	@ 0x80
 8010328:	9a01      	ldr	r2, [sp, #4]
 801032a:	01db      	lsls	r3, r3, #7
 801032c:	401a      	ands	r2, r3
 801032e:	9205      	str	r2, [sp, #20]
 8010330:	9a01      	ldr	r2, [sp, #4]
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010332:	9802      	ldr	r0, [sp, #8]
 8010334:	35fc      	adds	r5, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010336:	421a      	tst	r2, r3
 8010338:	d100      	bne.n	801033c <HAL_PCD_IRQHandler+0x1bc>
 801033a:	e08d      	b.n	8010458 <HAL_PCD_IRQHandler+0x2d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801033c:	f7ff fe74 	bl	8010028 <PCD_GET_EP_DBUF0_CNT.isra.0>

    if (ep->xfer_len >= count)
 8010340:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010342:	0003      	movs	r3, r0
 8010344:	0007      	movs	r7, r0
    if (ep->xfer_len >= count)
 8010346:	4282      	cmp	r2, r0
 8010348:	d20e      	bcs.n	8010368 <HAL_PCD_IRQHandler+0x1e8>
 801034a:	2200      	movs	r2, #0
 801034c:	66ea      	str	r2, [r5, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801034e:	9a02      	ldr	r2, [sp, #8]
 8010350:	4874      	ldr	r0, [pc, #464]	@ (8010524 <HAL_PCD_IRQHandler+0x3a4>)
 8010352:	0092      	lsls	r2, r2, #2
 8010354:	18b2      	adds	r2, r6, r2
 8010356:	6811      	ldr	r1, [r2, #0]
 8010358:	4001      	ands	r1, r0
 801035a:	2080      	movs	r0, #128	@ 0x80
 801035c:	0180      	lsls	r0, r0, #6
 801035e:	4048      	eors	r0, r1
 8010360:	4971      	ldr	r1, [pc, #452]	@ (8010528 <HAL_PCD_IRQHandler+0x3a8>)
 8010362:	4301      	orrs	r1, r0
 8010364:	6011      	str	r1, [r2, #0]
 8010366:	e002      	b.n	801036e <HAL_PCD_IRQHandler+0x1ee>
      ep->xfer_len -= count;
 8010368:	1a12      	subs	r2, r2, r0
 801036a:	66ea      	str	r2, [r5, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 801036c:	d0ef      	beq.n	801034e <HAL_PCD_IRQHandler+0x1ce>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801036e:	9a01      	ldr	r2, [sp, #4]
 8010370:	0652      	lsls	r2, r2, #25
 8010372:	d508      	bpl.n	8010386 <HAL_PCD_IRQHandler+0x206>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010374:	9a02      	ldr	r2, [sp, #8]
 8010376:	496d      	ldr	r1, [pc, #436]	@ (801052c <HAL_PCD_IRQHandler+0x3ac>)
 8010378:	0092      	lsls	r2, r2, #2
 801037a:	18b2      	adds	r2, r6, r2
 801037c:	6810      	ldr	r0, [r2, #0]
 801037e:	4008      	ands	r0, r1
 8010380:	496b      	ldr	r1, [pc, #428]	@ (8010530 <HAL_PCD_IRQHandler+0x3b0>)
 8010382:	4301      	orrs	r1, r0
 8010384:	6011      	str	r1, [r2, #0]
    }

    if (count != 0U)
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00c      	beq.n	80103a4 <HAL_PCD_IRQHandler+0x224>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801038a:	2128      	movs	r1, #40	@ 0x28
 801038c:	9a00      	ldr	r2, [sp, #0]
 801038e:	4351      	muls	r1, r2
 8010390:	1861      	adds	r1, r4, r1
 8010392:	000a      	movs	r2, r1
 8010394:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010396:	32ff      	adds	r2, #255	@ 0xff
 8010398:	31fc      	adds	r1, #252	@ 0xfc
 801039a:	8812      	ldrh	r2, [r2, #0]
 801039c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801039e:	0030      	movs	r0, r6
 80103a0:	f003 fe76 	bl	8014090 <USB_ReadPMA>
        ep->xfer_count += count;
 80103a4:	2328      	movs	r3, #40	@ 0x28
 80103a6:	9900      	ldr	r1, [sp, #0]
 80103a8:	4359      	muls	r1, r3
 80103aa:	1862      	adds	r2, r4, r1
 80103ac:	32fc      	adds	r2, #252	@ 0xfc
 80103ae:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80103b0:	19c0      	adds	r0, r0, r7
 80103b2:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 80103b4:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80103b6:	19c0      	adds	r0, r0, r7
 80103b8:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80103ba:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80103bc:	2800      	cmp	r0, #0
 80103be:	d003      	beq.n	80103c8 <HAL_PCD_IRQHandler+0x248>
 80103c0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80103c2:	4297      	cmp	r7, r2
 80103c4:	d300      	bcc.n	80103c8 <HAL_PCD_IRQHandler+0x248>
 80103c6:	e095      	b.n	80104f4 <HAL_PCD_IRQHandler+0x374>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80103c8:	9a00      	ldr	r2, [sp, #0]
 80103ca:	0020      	movs	r0, r4
 80103cc:	4353      	muls	r3, r2
 80103ce:	18e3      	adds	r3, r4, r3
 80103d0:	3351      	adds	r3, #81	@ 0x51
 80103d2:	33ff      	adds	r3, #255	@ 0xff
 80103d4:	7819      	ldrb	r1, [r3, #0]
 80103d6:	f008 fb1d 	bl	8018a14 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	9302      	str	r3, [sp, #8]
      if ((wEPVal & USB_EP_VTTX) != 0U)
 80103de:	9b03      	ldr	r3, [sp, #12]
 80103e0:	061b      	lsls	r3, r3, #24
 80103e2:	d400      	bmi.n	80103e6 <HAL_PCD_IRQHandler+0x266>
 80103e4:	e6da      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80103e6:	9a02      	ldr	r2, [sp, #8]
 80103e8:	9b04      	ldr	r3, [sp, #16]
 80103ea:	4694      	mov	ip, r2
 80103ec:	4463      	add	r3, ip
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	4949      	ldr	r1, [pc, #292]	@ (8010518 <HAL_PCD_IRQHandler+0x398>)
 80103f2:	400a      	ands	r2, r1
 80103f4:	2180      	movs	r1, #128	@ 0x80
 80103f6:	0209      	lsls	r1, r1, #8
 80103f8:	430a      	orrs	r2, r1
 80103fa:	601a      	str	r2, [r3, #0]
        if (ep->type == EP_TYPE_ISOC)
 80103fc:	2328      	movs	r3, #40	@ 0x28
 80103fe:	9900      	ldr	r1, [sp, #0]
 8010400:	4359      	muls	r1, r3
 8010402:	1866      	adds	r6, r4, r1
 8010404:	7cf2      	ldrb	r2, [r6, #19]
 8010406:	9204      	str	r2, [sp, #16]
 8010408:	2a01      	cmp	r2, #1
 801040a:	d000      	beq.n	801040e <HAL_PCD_IRQHandler+0x28e>
 801040c:	e0af      	b.n	801056e <HAL_PCD_IRQHandler+0x3ee>
          ep->xfer_len = 0U;
 801040e:	9a00      	ldr	r2, [sp, #0]
 8010410:	3201      	adds	r2, #1
 8010412:	4353      	muls	r3, r2
 8010414:	2200      	movs	r2, #0
 8010416:	511a      	str	r2, [r3, r4]
          if (ep->doublebuffer != 0U)
 8010418:	7f33      	ldrb	r3, [r6, #28]
 801041a:	4293      	cmp	r3, r2
 801041c:	d013      	beq.n	8010446 <HAL_PCD_IRQHandler+0x2c6>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801041e:	9b03      	ldr	r3, [sp, #12]
 8010420:	065b      	lsls	r3, r3, #25
 8010422:	d400      	bmi.n	8010426 <HAL_PCD_IRQHandler+0x2a6>
 8010424:	e086      	b.n	8010534 <HAL_PCD_IRQHandler+0x3b4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010426:	7c73      	ldrb	r3, [r6, #17]
 8010428:	4293      	cmp	r3, r2
 801042a:	d16a      	bne.n	8010502 <HAL_PCD_IRQHandler+0x382>
 801042c:	7c33      	ldrb	r3, [r6, #16]
 801042e:	4a3b      	ldr	r2, [pc, #236]	@ (801051c <HAL_PCD_IRQHandler+0x39c>)
 8010430:	00db      	lsls	r3, r3, #3
 8010432:	189b      	adds	r3, r3, r2
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	0192      	lsls	r2, r2, #6
 8010438:	0992      	lsrs	r2, r2, #6
 801043a:	601a      	str	r2, [r3, #0]
 801043c:	2280      	movs	r2, #128	@ 0x80
 801043e:	6819      	ldr	r1, [r3, #0]
 8010440:	0612      	lsls	r2, r2, #24
 8010442:	430a      	orrs	r2, r1
 8010444:	601a      	str	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010446:	2328      	movs	r3, #40	@ 0x28
 8010448:	9a00      	ldr	r2, [sp, #0]
 801044a:	4353      	muls	r3, r2
 801044c:	18e3      	adds	r3, r4, r3
 801044e:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010450:	0020      	movs	r0, r4
 8010452:	f008 fa75 	bl	8018940 <HAL_PCD_DataInStageCallback>
 8010456:	e6a1      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010458:	f7ff fdfa 	bl	8010050 <PCD_GET_EP_RX_CNT.isra.0>
    if (ep->xfer_len >= count)
 801045c:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801045e:	0003      	movs	r3, r0
 8010460:	0007      	movs	r7, r0
    if (ep->xfer_len >= count)
 8010462:	4282      	cmp	r2, r0
 8010464:	d20e      	bcs.n	8010484 <HAL_PCD_IRQHandler+0x304>
 8010466:	9a05      	ldr	r2, [sp, #20]
 8010468:	66ea      	str	r2, [r5, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801046a:	9a02      	ldr	r2, [sp, #8]
 801046c:	482d      	ldr	r0, [pc, #180]	@ (8010524 <HAL_PCD_IRQHandler+0x3a4>)
 801046e:	0092      	lsls	r2, r2, #2
 8010470:	18b2      	adds	r2, r6, r2
 8010472:	6811      	ldr	r1, [r2, #0]
 8010474:	4001      	ands	r1, r0
 8010476:	2080      	movs	r0, #128	@ 0x80
 8010478:	0180      	lsls	r0, r0, #6
 801047a:	4048      	eors	r0, r1
 801047c:	492a      	ldr	r1, [pc, #168]	@ (8010528 <HAL_PCD_IRQHandler+0x3a8>)
 801047e:	4301      	orrs	r1, r0
 8010480:	6011      	str	r1, [r2, #0]
 8010482:	e002      	b.n	801048a <HAL_PCD_IRQHandler+0x30a>
      ep->xfer_len -= count;
 8010484:	1a12      	subs	r2, r2, r0
 8010486:	66ea      	str	r2, [r5, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 8010488:	d0ef      	beq.n	801046a <HAL_PCD_IRQHandler+0x2ea>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801048a:	9a01      	ldr	r2, [sp, #4]
 801048c:	0652      	lsls	r2, r2, #25
 801048e:	d408      	bmi.n	80104a2 <HAL_PCD_IRQHandler+0x322>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010490:	9a02      	ldr	r2, [sp, #8]
 8010492:	4926      	ldr	r1, [pc, #152]	@ (801052c <HAL_PCD_IRQHandler+0x3ac>)
 8010494:	0092      	lsls	r2, r2, #2
 8010496:	18b2      	adds	r2, r6, r2
 8010498:	6810      	ldr	r0, [r2, #0]
 801049a:	4008      	ands	r0, r1
 801049c:	4924      	ldr	r1, [pc, #144]	@ (8010530 <HAL_PCD_IRQHandler+0x3b0>)
 801049e:	4301      	orrs	r1, r0
 80104a0:	6011      	str	r1, [r2, #0]
    if (count != 0U)
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d100      	bne.n	80104a8 <HAL_PCD_IRQHandler+0x328>
 80104a6:	e77d      	b.n	80103a4 <HAL_PCD_IRQHandler+0x224>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80104a8:	2128      	movs	r1, #40	@ 0x28
 80104aa:	9a00      	ldr	r2, [sp, #0]
 80104ac:	4351      	muls	r1, r2
 80104ae:	1861      	adds	r1, r4, r1
 80104b0:	000a      	movs	r2, r1
 80104b2:	325b      	adds	r2, #91	@ 0x5b
 80104b4:	e76f      	b.n	8010396 <HAL_PCD_IRQHandler+0x216>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80104b6:	9b02      	ldr	r3, [sp, #8]
 80104b8:	491c      	ldr	r1, [pc, #112]	@ (801052c <HAL_PCD_IRQHandler+0x3ac>)
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	18f3      	adds	r3, r6, r3
 80104be:	6818      	ldr	r0, [r3, #0]
 80104c0:	4008      	ands	r0, r1
 80104c2:	491b      	ldr	r1, [pc, #108]	@ (8010530 <HAL_PCD_IRQHandler+0x3b0>)
 80104c4:	4301      	orrs	r1, r0
 80104c6:	6019      	str	r1, [r3, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80104c8:	7810      	ldrb	r0, [r2, #0]
 80104ca:	0083      	lsls	r3, r0, #2
 80104cc:	18f3      	adds	r3, r6, r3
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	045b      	lsls	r3, r3, #17
 80104d2:	d507      	bpl.n	80104e4 <HAL_PCD_IRQHandler+0x364>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80104d4:	f7ff fda8 	bl	8010028 <PCD_GET_EP_DBUF0_CNT.isra.0>
 80104d8:	1e07      	subs	r7, r0, #0
              if (count != 0U)
 80104da:	d100      	bne.n	80104de <HAL_PCD_IRQHandler+0x35e>
 80104dc:	e762      	b.n	80103a4 <HAL_PCD_IRQHandler+0x224>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80104de:	002b      	movs	r3, r5
 80104e0:	3359      	adds	r3, #89	@ 0x59
 80104e2:	e711      	b.n	8010308 <HAL_PCD_IRQHandler+0x188>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80104e4:	f7ff fdb4 	bl	8010050 <PCD_GET_EP_RX_CNT.isra.0>
 80104e8:	1e07      	subs	r7, r0, #0
              if (count != 0U)
 80104ea:	d100      	bne.n	80104ee <HAL_PCD_IRQHandler+0x36e>
 80104ec:	e75a      	b.n	80103a4 <HAL_PCD_IRQHandler+0x224>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80104ee:	002b      	movs	r3, r5
 80104f0:	335b      	adds	r3, #91	@ 0x5b
 80104f2:	e709      	b.n	8010308 <HAL_PCD_IRQHandler+0x188>
        ep = &hpcd->OUT_ep[epindex];
 80104f4:	3151      	adds	r1, #81	@ 0x51
 80104f6:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80104f8:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 80104fa:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80104fc:	f003 fc58 	bl	8013db0 <USB_EPStartXfer>
 8010500:	e76b      	b.n	80103da <HAL_PCD_IRQHandler+0x25a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010502:	2b01      	cmp	r3, #1
 8010504:	d19f      	bne.n	8010446 <HAL_PCD_IRQHandler+0x2c6>
 8010506:	7c33      	ldrb	r3, [r6, #16]
 8010508:	4a04      	ldr	r2, [pc, #16]	@ (801051c <HAL_PCD_IRQHandler+0x39c>)
 801050a:	00db      	lsls	r3, r3, #3
 801050c:	189b      	adds	r3, r3, r2
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	b292      	uxth	r2, r2
 8010512:	601a      	str	r2, [r3, #0]
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	e795      	b.n	8010444 <HAL_PCD_IRQHandler+0x2c4>
 8010518:	07ff8f0f 	.word	0x07ff8f0f
 801051c:	40009800 	.word	0x40009800
 8010520:	07ff0f8f 	.word	0x07ff0f8f
 8010524:	07ffbf8f 	.word	0x07ffbf8f
 8010528:	00008080 	.word	0x00008080
 801052c:	07ff8f8f 	.word	0x07ff8f8f
 8010530:	000080c0 	.word	0x000080c0
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010534:	7c73      	ldrb	r3, [r6, #17]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d10d      	bne.n	8010556 <HAL_PCD_IRQHandler+0x3d6>
 801053a:	7c33      	ldrb	r3, [r6, #16]
 801053c:	4ad5      	ldr	r2, [pc, #852]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 801053e:	00db      	lsls	r3, r3, #3
 8010540:	189b      	adds	r3, r3, r2
 8010542:	685a      	ldr	r2, [r3, #4]
 8010544:	0192      	lsls	r2, r2, #6
 8010546:	0992      	lsrs	r2, r2, #6
 8010548:	605a      	str	r2, [r3, #4]
 801054a:	2280      	movs	r2, #128	@ 0x80
 801054c:	6859      	ldr	r1, [r3, #4]
 801054e:	0612      	lsls	r2, r2, #24
 8010550:	430a      	orrs	r2, r1
 8010552:	605a      	str	r2, [r3, #4]
 8010554:	e777      	b.n	8010446 <HAL_PCD_IRQHandler+0x2c6>
 8010556:	2b01      	cmp	r3, #1
 8010558:	d000      	beq.n	801055c <HAL_PCD_IRQHandler+0x3dc>
 801055a:	e774      	b.n	8010446 <HAL_PCD_IRQHandler+0x2c6>
 801055c:	7c33      	ldrb	r3, [r6, #16]
 801055e:	4acd      	ldr	r2, [pc, #820]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 8010560:	00db      	lsls	r3, r3, #3
 8010562:	189b      	adds	r3, r3, r2
 8010564:	685a      	ldr	r2, [r3, #4]
 8010566:	b292      	uxth	r2, r2
 8010568:	605a      	str	r2, [r3, #4]
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	e7f1      	b.n	8010552 <HAL_PCD_IRQHandler+0x3d2>
          if ((wEPVal & USB_EP_KIND) == 0U)
 801056e:	2380      	movs	r3, #128	@ 0x80
 8010570:	9803      	ldr	r0, [sp, #12]
 8010572:	9a03      	ldr	r2, [sp, #12]
 8010574:	005b      	lsls	r3, r3, #1
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010576:	7c35      	ldrb	r5, [r6, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8010578:	4018      	ands	r0, r3
 801057a:	421a      	tst	r2, r3
 801057c:	d119      	bne.n	80105b2 <HAL_PCD_IRQHandler+0x432>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801057e:	4ac5      	ldr	r2, [pc, #788]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 8010580:	00eb      	lsls	r3, r5, #3
 8010582:	189b      	adds	r3, r3, r2
 8010584:	681b      	ldr	r3, [r3, #0]
            if (ep->xfer_len > TxPctSize)
 8010586:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010588:	019b      	lsls	r3, r3, #6
            if (ep->xfer_len > TxPctSize)
 801058a:	0d9b      	lsrs	r3, r3, #22
 801058c:	429a      	cmp	r2, r3
 801058e:	d802      	bhi.n	8010596 <HAL_PCD_IRQHandler+0x416>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010590:	0029      	movs	r1, r5
 8010592:	62b0      	str	r0, [r6, #40]	@ 0x28
 8010594:	e75c      	b.n	8010450 <HAL_PCD_IRQHandler+0x2d0>
              ep->xfer_len -= TxPctSize;
 8010596:	1ad2      	subs	r2, r2, r3
 8010598:	62b2      	str	r2, [r6, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 801059a:	6a72      	ldr	r2, [r6, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 801059c:	3110      	adds	r1, #16
              ep->xfer_buff += TxPctSize;
 801059e:	18d2      	adds	r2, r2, r3
 80105a0:	6272      	str	r2, [r6, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80105a2:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80105a4:	9802      	ldr	r0, [sp, #8]
              ep->xfer_count += TxPctSize;
 80105a6:	18d3      	adds	r3, r2, r3
 80105a8:	62f3      	str	r3, [r6, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 80105aa:	1861      	adds	r1, r4, r1
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80105ac:	f003 fc00 	bl	8013db0 <USB_EPStartXfer>
 80105b0:	e5f4      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80105b2:	2340      	movs	r3, #64	@ 0x40
 80105b4:	9f01      	ldr	r7, [sp, #4]
 80105b6:	9a01      	ldr	r2, [sp, #4]
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80105b8:	0028      	movs	r0, r5
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80105ba:	401f      	ands	r7, r3
 80105bc:	421a      	tst	r2, r3
 80105be:	d100      	bne.n	80105c2 <HAL_PCD_IRQHandler+0x442>
 80105c0:	e0d2      	b.n	8010768 <HAL_PCD_IRQHandler+0x5e8>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80105c2:	f7ff fd31 	bl	8010028 <PCD_GET_EP_DBUF0_CNT.isra.0>

    if (ep->xfer_len > TxPctSize)
 80105c6:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80105c8:	2300      	movs	r3, #0
    if (ep->xfer_len > TxPctSize)
 80105ca:	4282      	cmp	r2, r0
 80105cc:	d900      	bls.n	80105d0 <HAL_PCD_IRQHandler+0x450>
      ep->xfer_len -= TxPctSize;
 80105ce:	1a13      	subs	r3, r2, r0
 80105d0:	2280      	movs	r2, #128	@ 0x80
 80105d2:	9f01      	ldr	r7, [sp, #4]
 80105d4:	01d2      	lsls	r2, r2, #7
 80105d6:	62b3      	str	r3, [r6, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80105d8:	4017      	ands	r7, r2
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d14d      	bne.n	801067a <HAL_PCD_IRQHandler+0x4fa>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80105de:	9a00      	ldr	r2, [sp, #0]
 80105e0:	3328      	adds	r3, #40	@ 0x28
 80105e2:	4353      	muls	r3, r2
 80105e4:	18e3      	adds	r3, r4, r3
 80105e6:	7c5b      	ldrb	r3, [r3, #17]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d136      	bne.n	801065a <HAL_PCD_IRQHandler+0x4da>
 80105ec:	2180      	movs	r1, #128	@ 0x80
 80105ee:	4aa9      	ldr	r2, [pc, #676]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 80105f0:	00eb      	lsls	r3, r5, #3
 80105f2:	189b      	adds	r3, r3, r2
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	0609      	lsls	r1, r1, #24
 80105f8:	0192      	lsls	r2, r2, #6
 80105fa:	0992      	lsrs	r2, r2, #6
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	430a      	orrs	r2, r1
 8010602:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010604:	685a      	ldr	r2, [r3, #4]
 8010606:	0192      	lsls	r2, r2, #6
 8010608:	0992      	lsrs	r2, r2, #6
 801060a:	605a      	str	r2, [r3, #4]
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	4311      	orrs	r1, r2
 8010610:	6059      	str	r1, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8010612:	9b04      	ldr	r3, [sp, #16]
 8010614:	2b02      	cmp	r3, #2
 8010616:	d10a      	bne.n	801062e <HAL_PCD_IRQHandler+0x4ae>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8010618:	9a02      	ldr	r2, [sp, #8]
 801061a:	00ab      	lsls	r3, r5, #2
 801061c:	18d3      	adds	r3, r2, r3
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	499d      	ldr	r1, [pc, #628]	@ (8010898 <HAL_PCD_IRQHandler+0x718>)
 8010622:	400a      	ands	r2, r1
 8010624:	2120      	movs	r1, #32
 8010626:	4051      	eors	r1, r2
 8010628:	4a9c      	ldr	r2, [pc, #624]	@ (801089c <HAL_PCD_IRQHandler+0x71c>)
 801062a:	430a      	orrs	r2, r1
 801062c:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801062e:	0029      	movs	r1, r5
 8010630:	0020      	movs	r0, r4
 8010632:	f008 f985 	bl	8018940 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010636:	2f00      	cmp	r7, #0
 8010638:	d100      	bne.n	801063c <HAL_PCD_IRQHandler+0x4bc>
 801063a:	e5af      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801063c:	2328      	movs	r3, #40	@ 0x28
 801063e:	9a00      	ldr	r2, [sp, #0]
 8010640:	4353      	muls	r3, r2
 8010642:	18e3      	adds	r3, r4, r3
 8010644:	7c1a      	ldrb	r2, [r3, #16]
 8010646:	6823      	ldr	r3, [r4, #0]
 8010648:	0092      	lsls	r2, r2, #2
 801064a:	189b      	adds	r3, r3, r2
 801064c:	6819      	ldr	r1, [r3, #0]
 801064e:	4a94      	ldr	r2, [pc, #592]	@ (80108a0 <HAL_PCD_IRQHandler+0x720>)
 8010650:	4011      	ands	r1, r2
 8010652:	4a94      	ldr	r2, [pc, #592]	@ (80108a4 <HAL_PCD_IRQHandler+0x724>)
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8010654:	430a      	orrs	r2, r1
 8010656:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010658:	e5a0      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801065a:	2b01      	cmp	r3, #1
 801065c:	d1d9      	bne.n	8010612 <HAL_PCD_IRQHandler+0x492>
 801065e:	4a8d      	ldr	r2, [pc, #564]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 8010660:	00eb      	lsls	r3, r5, #3
 8010662:	189b      	adds	r3, r3, r2
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	b292      	uxth	r2, r2
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801066e:	685a      	ldr	r2, [r3, #4]
 8010670:	b292      	uxth	r2, r2
 8010672:	605a      	str	r2, [r3, #4]
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	605a      	str	r2, [r3, #4]
 8010678:	e7cb      	b.n	8010612 <HAL_PCD_IRQHandler+0x492>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801067a:	2f00      	cmp	r7, #0
 801067c:	d008      	beq.n	8010690 <HAL_PCD_IRQHandler+0x510>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801067e:	9a02      	ldr	r2, [sp, #8]
 8010680:	00ab      	lsls	r3, r5, #2
 8010682:	18d3      	adds	r3, r2, r3
 8010684:	6819      	ldr	r1, [r3, #0]
 8010686:	4a86      	ldr	r2, [pc, #536]	@ (80108a0 <HAL_PCD_IRQHandler+0x720>)
 8010688:	4011      	ands	r1, r2
 801068a:	4a86      	ldr	r2, [pc, #536]	@ (80108a4 <HAL_PCD_IRQHandler+0x724>)
 801068c:	430a      	orrs	r2, r1
 801068e:	601a      	str	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 8010690:	2228      	movs	r2, #40	@ 0x28
 8010692:	9b00      	ldr	r3, [sp, #0]
 8010694:	435a      	muls	r2, r3
 8010696:	18a2      	adds	r2, r4, r2
 8010698:	0017      	movs	r7, r2
 801069a:	3734      	adds	r7, #52	@ 0x34
 801069c:	783b      	ldrb	r3, [r7, #0]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d129      	bne.n	80106f6 <HAL_PCD_IRQHandler+0x576>
        ep->xfer_buff += TxPctSize;
 80106a2:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80106a4:	1809      	adds	r1, r1, r0
 80106a6:	6251      	str	r1, [r2, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80106a8:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80106aa:	181b      	adds	r3, r3, r0
 80106ac:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80106ae:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80106b0:	6a13      	ldr	r3, [r2, #32]
 80106b2:	429e      	cmp	r6, r3
 80106b4:	d32e      	bcc.n	8010714 <HAL_PCD_IRQHandler+0x594>
          ep->xfer_len_db -= len;
 80106b6:	1af6      	subs	r6, r6, r3
 80106b8:	6316      	str	r6, [r2, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80106ba:	2228      	movs	r2, #40	@ 0x28
 80106bc:	9800      	ldr	r0, [sp, #0]
 80106be:	4342      	muls	r2, r0
 80106c0:	18a2      	adds	r2, r4, r2
 80106c2:	7c52      	ldrb	r2, [r2, #17]
 80106c4:	2a00      	cmp	r2, #0
 80106c6:	d144      	bne.n	8010752 <HAL_PCD_IRQHandler+0x5d2>
 80106c8:	4a72      	ldr	r2, [pc, #456]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 80106ca:	00ed      	lsls	r5, r5, #3
 80106cc:	18ad      	adds	r5, r5, r2
 80106ce:	682a      	ldr	r2, [r5, #0]
 80106d0:	0192      	lsls	r2, r2, #6
 80106d2:	0992      	lsrs	r2, r2, #6
 80106d4:	602a      	str	r2, [r5, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d126      	bne.n	8010728 <HAL_PCD_IRQHandler+0x5a8>
 80106da:	2280      	movs	r2, #128	@ 0x80
 80106dc:	6828      	ldr	r0, [r5, #0]
 80106de:	0612      	lsls	r2, r2, #24
 80106e0:	4302      	orrs	r2, r0
 80106e2:	602a      	str	r2, [r5, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80106e4:	2228      	movs	r2, #40	@ 0x28
 80106e6:	9800      	ldr	r0, [sp, #0]
 80106e8:	b29b      	uxth	r3, r3
 80106ea:	4342      	muls	r2, r0
 80106ec:	18a2      	adds	r2, r4, r2
 80106ee:	8b12      	ldrh	r2, [r2, #24]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80106f0:	9802      	ldr	r0, [sp, #8]
 80106f2:	f003 fb2f 	bl	8013d54 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80106f6:	2328      	movs	r3, #40	@ 0x28
 80106f8:	9a00      	ldr	r2, [sp, #0]
 80106fa:	4967      	ldr	r1, [pc, #412]	@ (8010898 <HAL_PCD_IRQHandler+0x718>)
 80106fc:	4353      	muls	r3, r2
 80106fe:	18e3      	adds	r3, r4, r3
 8010700:	7c1a      	ldrb	r2, [r3, #16]
 8010702:	6823      	ldr	r3, [r4, #0]
 8010704:	0092      	lsls	r2, r2, #2
 8010706:	189b      	adds	r3, r3, r2
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	400a      	ands	r2, r1
 801070c:	2130      	movs	r1, #48	@ 0x30
 801070e:	4051      	eors	r1, r2
 8010710:	4a62      	ldr	r2, [pc, #392]	@ (801089c <HAL_PCD_IRQHandler+0x71c>)
 8010712:	e79f      	b.n	8010654 <HAL_PCD_IRQHandler+0x4d4>
        else if (ep->xfer_len_db == 0U)
 8010714:	2e00      	cmp	r6, #0
 8010716:	d102      	bne.n	801071e <HAL_PCD_IRQHandler+0x59e>
          len = TxPctSize;
 8010718:	0003      	movs	r3, r0
          ep->xfer_fill_db = 0U;
 801071a:	703e      	strb	r6, [r7, #0]
 801071c:	e7cd      	b.n	80106ba <HAL_PCD_IRQHandler+0x53a>
          ep->xfer_fill_db = 0U;
 801071e:	2300      	movs	r3, #0
 8010720:	703b      	strb	r3, [r7, #0]
          ep->xfer_len_db = 0U;
 8010722:	6313      	str	r3, [r2, #48]	@ 0x30
          len = ep->xfer_len_db;
 8010724:	0033      	movs	r3, r6
 8010726:	e7c8      	b.n	80106ba <HAL_PCD_IRQHandler+0x53a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010728:	2b3e      	cmp	r3, #62	@ 0x3e
 801072a:	d806      	bhi.n	801073a <HAL_PCD_IRQHandler+0x5ba>
 801072c:	2001      	movs	r0, #1
 801072e:	085a      	lsrs	r2, r3, #1
 8010730:	4018      	ands	r0, r3
 8010732:	1812      	adds	r2, r2, r0
 8010734:	0692      	lsls	r2, r2, #26
 8010736:	6828      	ldr	r0, [r5, #0]
 8010738:	e7d2      	b.n	80106e0 <HAL_PCD_IRQHandler+0x560>
 801073a:	201f      	movs	r0, #31
 801073c:	4018      	ands	r0, r3
 801073e:	4246      	negs	r6, r0
 8010740:	4170      	adcs	r0, r6
 8010742:	095a      	lsrs	r2, r3, #5
 8010744:	1a12      	subs	r2, r2, r0
 8010746:	6828      	ldr	r0, [r5, #0]
 8010748:	0692      	lsls	r2, r2, #26
 801074a:	4302      	orrs	r2, r0
 801074c:	2080      	movs	r0, #128	@ 0x80
 801074e:	0600      	lsls	r0, r0, #24
 8010750:	e7c6      	b.n	80106e0 <HAL_PCD_IRQHandler+0x560>
 8010752:	2a01      	cmp	r2, #1
 8010754:	d1c6      	bne.n	80106e4 <HAL_PCD_IRQHandler+0x564>
 8010756:	4a4f      	ldr	r2, [pc, #316]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 8010758:	00ed      	lsls	r5, r5, #3
 801075a:	18ad      	adds	r5, r5, r2
 801075c:	682a      	ldr	r2, [r5, #0]
 801075e:	b292      	uxth	r2, r2
 8010760:	602a      	str	r2, [r5, #0]
 8010762:	6828      	ldr	r0, [r5, #0]
 8010764:	041a      	lsls	r2, r3, #16
 8010766:	e7bb      	b.n	80106e0 <HAL_PCD_IRQHandler+0x560>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010768:	f7ff fc72 	bl	8010050 <PCD_GET_EP_RX_CNT.isra.0>
    if (ep->xfer_len >= TxPctSize)
 801076c:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
      ep->xfer_len = 0U;
 801076e:	003b      	movs	r3, r7
    if (ep->xfer_len >= TxPctSize)
 8010770:	4282      	cmp	r2, r0
 8010772:	d300      	bcc.n	8010776 <HAL_PCD_IRQHandler+0x5f6>
      ep->xfer_len -= TxPctSize;
 8010774:	1a13      	subs	r3, r2, r0
 8010776:	2280      	movs	r2, #128	@ 0x80
 8010778:	9f01      	ldr	r7, [sp, #4]
 801077a:	01d2      	lsls	r2, r2, #7
 801077c:	62b3      	str	r3, [r6, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 801077e:	4017      	ands	r7, r2
 8010780:	2b00      	cmp	r3, #0
 8010782:	d13f      	bne.n	8010804 <HAL_PCD_IRQHandler+0x684>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010784:	9a00      	ldr	r2, [sp, #0]
 8010786:	3328      	adds	r3, #40	@ 0x28
 8010788:	4353      	muls	r3, r2
 801078a:	18e3      	adds	r3, r4, r3
 801078c:	7c5b      	ldrb	r3, [r3, #17]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d128      	bne.n	80107e4 <HAL_PCD_IRQHandler+0x664>
 8010792:	2180      	movs	r1, #128	@ 0x80
 8010794:	4a3f      	ldr	r2, [pc, #252]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 8010796:	00eb      	lsls	r3, r5, #3
 8010798:	189b      	adds	r3, r3, r2
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	0609      	lsls	r1, r1, #24
 801079e:	0192      	lsls	r2, r2, #6
 80107a0:	0992      	lsrs	r2, r2, #6
 80107a2:	601a      	str	r2, [r3, #0]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	430a      	orrs	r2, r1
 80107a8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	0192      	lsls	r2, r2, #6
 80107ae:	0992      	lsrs	r2, r2, #6
 80107b0:	605a      	str	r2, [r3, #4]
 80107b2:	685a      	ldr	r2, [r3, #4]
 80107b4:	4311      	orrs	r1, r2
 80107b6:	6059      	str	r1, [r3, #4]
      if (ep->type == EP_TYPE_BULK)
 80107b8:	9b04      	ldr	r3, [sp, #16]
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d10a      	bne.n	80107d4 <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80107be:	9a02      	ldr	r2, [sp, #8]
 80107c0:	00ab      	lsls	r3, r5, #2
 80107c2:	18d3      	adds	r3, r2, r3
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	4934      	ldr	r1, [pc, #208]	@ (8010898 <HAL_PCD_IRQHandler+0x718>)
 80107c8:	400a      	ands	r2, r1
 80107ca:	2120      	movs	r1, #32
 80107cc:	4051      	eors	r1, r2
 80107ce:	4a33      	ldr	r2, [pc, #204]	@ (801089c <HAL_PCD_IRQHandler+0x71c>)
 80107d0:	430a      	orrs	r2, r1
 80107d2:	601a      	str	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80107d4:	0029      	movs	r1, r5
 80107d6:	0020      	movs	r0, r4
 80107d8:	f008 f8b2 	bl	8018940 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80107dc:	2f00      	cmp	r7, #0
 80107de:	d000      	beq.n	80107e2 <HAL_PCD_IRQHandler+0x662>
 80107e0:	e4dc      	b.n	801019c <HAL_PCD_IRQHandler+0x1c>
 80107e2:	e72b      	b.n	801063c <HAL_PCD_IRQHandler+0x4bc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d1e7      	bne.n	80107b8 <HAL_PCD_IRQHandler+0x638>
 80107e8:	4a2a      	ldr	r2, [pc, #168]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 80107ea:	00eb      	lsls	r3, r5, #3
 80107ec:	189b      	adds	r3, r3, r2
 80107ee:	681a      	ldr	r2, [r3, #0]
 80107f0:	b292      	uxth	r2, r2
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	b292      	uxth	r2, r2
 80107fc:	605a      	str	r2, [r3, #4]
 80107fe:	685a      	ldr	r2, [r3, #4]
 8010800:	605a      	str	r2, [r3, #4]
 8010802:	e7d9      	b.n	80107b8 <HAL_PCD_IRQHandler+0x638>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8010804:	2f00      	cmp	r7, #0
 8010806:	d108      	bne.n	801081a <HAL_PCD_IRQHandler+0x69a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010808:	9a02      	ldr	r2, [sp, #8]
 801080a:	00ab      	lsls	r3, r5, #2
 801080c:	18d3      	adds	r3, r2, r3
 801080e:	6819      	ldr	r1, [r3, #0]
 8010810:	4a23      	ldr	r2, [pc, #140]	@ (80108a0 <HAL_PCD_IRQHandler+0x720>)
 8010812:	4011      	ands	r1, r2
 8010814:	4a23      	ldr	r2, [pc, #140]	@ (80108a4 <HAL_PCD_IRQHandler+0x724>)
 8010816:	430a      	orrs	r2, r1
 8010818:	601a      	str	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 801081a:	2228      	movs	r2, #40	@ 0x28
 801081c:	9b00      	ldr	r3, [sp, #0]
 801081e:	435a      	muls	r2, r3
 8010820:	18a2      	adds	r2, r4, r2
 8010822:	0017      	movs	r7, r2
 8010824:	3734      	adds	r7, #52	@ 0x34
 8010826:	783b      	ldrb	r3, [r7, #0]
 8010828:	2b01      	cmp	r3, #1
 801082a:	d000      	beq.n	801082e <HAL_PCD_IRQHandler+0x6ae>
 801082c:	e763      	b.n	80106f6 <HAL_PCD_IRQHandler+0x576>
        ep->xfer_buff += TxPctSize;
 801082e:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8010830:	1809      	adds	r1, r1, r0
 8010832:	6251      	str	r1, [r2, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8010834:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8010836:	181b      	adds	r3, r3, r0
 8010838:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 801083a:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 801083c:	6a13      	ldr	r3, [r2, #32]
 801083e:	429e      	cmp	r6, r3
 8010840:	d31d      	bcc.n	801087e <HAL_PCD_IRQHandler+0x6fe>
          ep->xfer_len_db -= len;
 8010842:	1af6      	subs	r6, r6, r3
 8010844:	6316      	str	r6, [r2, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010846:	2228      	movs	r2, #40	@ 0x28
 8010848:	9800      	ldr	r0, [sp, #0]
 801084a:	4342      	muls	r2, r0
 801084c:	18a2      	adds	r2, r4, r2
 801084e:	7c52      	ldrb	r2, [r2, #17]
 8010850:	2a00      	cmp	r2, #0
 8010852:	d13e      	bne.n	80108d2 <HAL_PCD_IRQHandler+0x752>
 8010854:	4a0f      	ldr	r2, [pc, #60]	@ (8010894 <HAL_PCD_IRQHandler+0x714>)
 8010856:	00ed      	lsls	r5, r5, #3
 8010858:	18ad      	adds	r5, r5, r2
 801085a:	686a      	ldr	r2, [r5, #4]
 801085c:	0192      	lsls	r2, r2, #6
 801085e:	0992      	lsrs	r2, r2, #6
 8010860:	606a      	str	r2, [r5, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d120      	bne.n	80108a8 <HAL_PCD_IRQHandler+0x728>
 8010866:	2280      	movs	r2, #128	@ 0x80
 8010868:	6868      	ldr	r0, [r5, #4]
 801086a:	0612      	lsls	r2, r2, #24
 801086c:	4302      	orrs	r2, r0
 801086e:	606a      	str	r2, [r5, #4]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8010870:	2228      	movs	r2, #40	@ 0x28
 8010872:	9800      	ldr	r0, [sp, #0]
 8010874:	b29b      	uxth	r3, r3
 8010876:	4342      	muls	r2, r0
 8010878:	18a2      	adds	r2, r4, r2
 801087a:	8b52      	ldrh	r2, [r2, #26]
 801087c:	e738      	b.n	80106f0 <HAL_PCD_IRQHandler+0x570>
        else if (ep->xfer_len_db == 0U)
 801087e:	2e00      	cmp	r6, #0
 8010880:	d102      	bne.n	8010888 <HAL_PCD_IRQHandler+0x708>
          len = TxPctSize;
 8010882:	0003      	movs	r3, r0
          ep->xfer_fill_db = 0U;
 8010884:	703e      	strb	r6, [r7, #0]
 8010886:	e7de      	b.n	8010846 <HAL_PCD_IRQHandler+0x6c6>
          ep->xfer_len_db = 0U;
 8010888:	2300      	movs	r3, #0
 801088a:	6313      	str	r3, [r2, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 801088c:	703b      	strb	r3, [r7, #0]
          len = ep->xfer_len_db;
 801088e:	0033      	movs	r3, r6
 8010890:	e7d9      	b.n	8010846 <HAL_PCD_IRQHandler+0x6c6>
 8010892:	46c0      	nop			@ (mov r8, r8)
 8010894:	40009800 	.word	0x40009800
 8010898:	07ff8fbf 	.word	0x07ff8fbf
 801089c:	00008080 	.word	0x00008080
 80108a0:	07ff8f8f 	.word	0x07ff8f8f
 80108a4:	0000c080 	.word	0x0000c080
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80108a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80108aa:	d806      	bhi.n	80108ba <HAL_PCD_IRQHandler+0x73a>
 80108ac:	2001      	movs	r0, #1
 80108ae:	085a      	lsrs	r2, r3, #1
 80108b0:	4018      	ands	r0, r3
 80108b2:	1812      	adds	r2, r2, r0
 80108b4:	0692      	lsls	r2, r2, #26
 80108b6:	6868      	ldr	r0, [r5, #4]
 80108b8:	e7d8      	b.n	801086c <HAL_PCD_IRQHandler+0x6ec>
 80108ba:	201f      	movs	r0, #31
 80108bc:	4018      	ands	r0, r3
 80108be:	4246      	negs	r6, r0
 80108c0:	4170      	adcs	r0, r6
 80108c2:	095a      	lsrs	r2, r3, #5
 80108c4:	1a12      	subs	r2, r2, r0
 80108c6:	6868      	ldr	r0, [r5, #4]
 80108c8:	0692      	lsls	r2, r2, #26
 80108ca:	4302      	orrs	r2, r0
 80108cc:	2080      	movs	r0, #128	@ 0x80
 80108ce:	0600      	lsls	r0, r0, #24
 80108d0:	e7cc      	b.n	801086c <HAL_PCD_IRQHandler+0x6ec>
 80108d2:	2a01      	cmp	r2, #1
 80108d4:	d1cc      	bne.n	8010870 <HAL_PCD_IRQHandler+0x6f0>
 80108d6:	4a47      	ldr	r2, [pc, #284]	@ (80109f4 <HAL_PCD_IRQHandler+0x874>)
 80108d8:	00ed      	lsls	r5, r5, #3
 80108da:	18ad      	adds	r5, r5, r2
 80108dc:	686a      	ldr	r2, [r5, #4]
 80108de:	b292      	uxth	r2, r2
 80108e0:	606a      	str	r2, [r5, #4]
 80108e2:	6868      	ldr	r0, [r5, #4]
 80108e4:	041a      	lsls	r2, r3, #16
 80108e6:	e7c1      	b.n	801086c <HAL_PCD_IRQHandler+0x6ec>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80108e8:	0543      	lsls	r3, r0, #21
 80108ea:	d50c      	bpl.n	8010906 <HAL_PCD_IRQHandler+0x786>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80108ec:	6822      	ldr	r2, [r4, #0]
 80108ee:	4942      	ldr	r1, [pc, #264]	@ (80109f8 <HAL_PCD_IRQHandler+0x878>)
 80108f0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80108f2:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80108f4:	400b      	ands	r3, r1
 80108f6:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80108f8:	f008 f8d2 	bl	8018aa0 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80108fc:	0029      	movs	r1, r5
 80108fe:	0020      	movs	r0, r4
 8010900:	f7ff fc2c 	bl	801015c <HAL_PCD_SetAddress>
    return;
 8010904:	e450      	b.n	80101a8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8010906:	0443      	lsls	r3, r0, #17
 8010908:	d505      	bpl.n	8010916 <HAL_PCD_IRQHandler+0x796>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	493b      	ldr	r1, [pc, #236]	@ (80109fc <HAL_PCD_IRQHandler+0x87c>)
 801090e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8010910:	400b      	ands	r3, r1
 8010912:	6453      	str	r3, [r2, #68]	@ 0x44
    return;
 8010914:	e448      	b.n	80101a8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8010916:	2380      	movs	r3, #128	@ 0x80
 8010918:	0001      	movs	r1, r0
 801091a:	019b      	lsls	r3, r3, #6
 801091c:	4019      	ands	r1, r3
 801091e:	4218      	tst	r0, r3
 8010920:	d003      	beq.n	801092a <HAL_PCD_IRQHandler+0x7aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8010922:	6822      	ldr	r2, [r4, #0]
 8010924:	4936      	ldr	r1, [pc, #216]	@ (8010a00 <HAL_PCD_IRQHandler+0x880>)
 8010926:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8010928:	e7f2      	b.n	8010910 <HAL_PCD_IRQHandler+0x790>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801092a:	04c3      	lsls	r3, r0, #19
 801092c:	d518      	bpl.n	8010960 <HAL_PCD_IRQHandler+0x7e0>
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 801092e:	2004      	movs	r0, #4
 8010930:	6823      	ldr	r3, [r4, #0]
 8010932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010934:	4382      	bics	r2, r0
 8010936:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8010938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801093a:	1800      	adds	r0, r0, r0
 801093c:	4382      	bics	r2, r0
 801093e:	641a      	str	r2, [r3, #64]	@ 0x40
    if (hpcd->LPM_State == LPM_L1)
 8010940:	23b2      	movs	r3, #178	@ 0xb2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	5ce2      	ldrb	r2, [r4, r3]
 8010946:	2a01      	cmp	r2, #1
 8010948:	d103      	bne.n	8010952 <HAL_PCD_IRQHandler+0x7d2>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801094a:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 801094c:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801094e:	f000 f9a5 	bl	8010c9c <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8010952:	0020      	movs	r0, r4
 8010954:	f008 f8c4 	bl	8018ae0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8010958:	6822      	ldr	r2, [r4, #0]
 801095a:	492a      	ldr	r1, [pc, #168]	@ (8010a04 <HAL_PCD_IRQHandler+0x884>)
 801095c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 801095e:	e7d7      	b.n	8010910 <HAL_PCD_IRQHandler+0x790>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8010960:	0503      	lsls	r3, r0, #20
 8010962:	d511      	bpl.n	8010988 <HAL_PCD_IRQHandler+0x808>
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8010964:	2208      	movs	r2, #8
 8010966:	6823      	ldr	r3, [r4, #0]
 8010968:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801096a:	430a      	orrs	r2, r1
 801096c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801096e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010970:	4925      	ldr	r1, [pc, #148]	@ (8010a08 <HAL_PCD_IRQHandler+0x888>)
 8010972:	400a      	ands	r2, r1
 8010974:	645a      	str	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8010976:	2204      	movs	r2, #4
 8010978:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801097a:	430a      	orrs	r2, r1
 801097c:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_PCD_SuspendCallback(hpcd);
 801097e:	0020      	movs	r0, r4
 8010980:	f008 f8a2 	bl	8018ac8 <HAL_PCD_SuspendCallback>
 8010984:	f7ff fc10 	bl	80101a8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8010988:	0603      	lsls	r3, r0, #24
 801098a:	d51f      	bpl.n	80109cc <HAL_PCD_IRQHandler+0x84c>
    if (hpcd->LPM_State == LPM_L0)
 801098c:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 801098e:	6823      	ldr	r3, [r4, #0]
 8010990:	491e      	ldr	r1, [pc, #120]	@ (8010a0c <HAL_PCD_IRQHandler+0x88c>)
 8010992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8010994:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8010996:	400a      	ands	r2, r1
 8010998:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 801099a:	5c22      	ldrb	r2, [r4, r0]
 801099c:	2a00      	cmp	r2, #0
 801099e:	d1ee      	bne.n	801097e <HAL_PCD_IRQHandler+0x7fe>
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80109a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80109a2:	3204      	adds	r2, #4
 80109a4:	430a      	orrs	r2, r1
 80109a6:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80109a8:	2208      	movs	r2, #8
 80109aa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80109ac:	430a      	orrs	r2, r1
      hpcd->LPM_State = LPM_L1;
 80109ae:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80109b0:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80109b2:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 80109b4:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80109b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80109b8:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80109ba:	089b      	lsrs	r3, r3, #2
 80109bc:	4013      	ands	r3, r2
 80109be:	22b3      	movs	r2, #179	@ 0xb3
 80109c0:	0092      	lsls	r2, r2, #2
 80109c2:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80109c4:	f000 f96a 	bl	8010c9c <HAL_PCDEx_LPM_Callback>
 80109c8:	f7ff fbee 	bl	80101a8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80109cc:	0583      	lsls	r3, r0, #22
 80109ce:	d509      	bpl.n	80109e4 <HAL_PCD_IRQHandler+0x864>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80109d0:	6822      	ldr	r2, [r4, #0]
 80109d2:	490f      	ldr	r1, [pc, #60]	@ (8010a10 <HAL_PCD_IRQHandler+0x890>)
 80109d4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80109d6:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80109d8:	400b      	ands	r3, r1
 80109da:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80109dc:	f008 f88c 	bl	8018af8 <HAL_PCD_SOFCallback>
    return;
 80109e0:	f7ff fbe2 	bl	80101a8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80109e4:	05c0      	lsls	r0, r0, #23
 80109e6:	d401      	bmi.n	80109ec <HAL_PCD_IRQHandler+0x86c>
 80109e8:	f7ff fbde 	bl	80101a8 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80109ec:	6822      	ldr	r2, [r4, #0]
 80109ee:	4909      	ldr	r1, [pc, #36]	@ (8010a14 <HAL_PCD_IRQHandler+0x894>)
 80109f0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80109f2:	e78d      	b.n	8010910 <HAL_PCD_IRQHandler+0x790>
 80109f4:	40009800 	.word	0x40009800
 80109f8:	0000fbff 	.word	0x0000fbff
 80109fc:	0000bfff 	.word	0x0000bfff
 8010a00:	0000dfff 	.word	0x0000dfff
 8010a04:	0000efff 	.word	0x0000efff
 8010a08:	0000f7ff 	.word	0x0000f7ff
 8010a0c:	0000ff7f 	.word	0x0000ff7f
 8010a10:	0000fdff 	.word	0x0000fdff
 8010a14:	0000feff 	.word	0x0000feff

08010a18 <HAL_PCD_EP_Open>:
{
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	0004      	movs	r4, r0
 8010a1c:	2007      	movs	r0, #7
 8010a1e:	000d      	movs	r5, r1
 8010a20:	4008      	ands	r0, r1
 8010a22:	2128      	movs	r1, #40	@ 0x28
 8010a24:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8010a26:	b26d      	sxtb	r5, r5
 8010a28:	1866      	adds	r6, r4, r1
 8010a2a:	2d00      	cmp	r5, #0
 8010a2c:	da1a      	bge.n	8010a64 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8010a2e:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010a30:	3110      	adds	r1, #16
 8010a32:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8010a34:	7475      	strb	r5, [r6, #17]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8010a36:	0552      	lsls	r2, r2, #21
 8010a38:	0d52      	lsrs	r2, r2, #21
  ep->num = ep_addr & EP_ADDR_MSK;
 8010a3a:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8010a3c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8010a3e:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8010a40:	2b02      	cmp	r3, #2
 8010a42:	d101      	bne.n	8010a48 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 8010a44:	2300      	movs	r3, #0
 8010a46:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8010a48:	25a4      	movs	r5, #164	@ 0xa4
 8010a4a:	00ad      	lsls	r5, r5, #2
 8010a4c:	5d63      	ldrb	r3, [r4, r5]
 8010a4e:	2002      	movs	r0, #2
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d006      	beq.n	8010a62 <HAL_PCD_EP_Open+0x4a>
 8010a54:	2301      	movs	r3, #1
 8010a56:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8010a58:	6820      	ldr	r0, [r4, #0]
 8010a5a:	f002 ff21 	bl	80138a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010a5e:	2000      	movs	r0, #0
 8010a60:	5560      	strb	r0, [r4, r5]
}
 8010a62:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8010a64:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a66:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010a68:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a6a:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8010a6c:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a6e:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8010a70:	7035      	strb	r5, [r6, #0]
 8010a72:	e7e0      	b.n	8010a36 <HAL_PCD_EP_Open+0x1e>

08010a74 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8010a74:	2207      	movs	r2, #7
{
 8010a76:	000b      	movs	r3, r1
 8010a78:	400a      	ands	r2, r1
 8010a7a:	2128      	movs	r1, #40	@ 0x28
 8010a7c:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 8010a7e:	b25b      	sxtb	r3, r3
{
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	0004      	movs	r4, r0
 8010a84:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	da12      	bge.n	8010ab0 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 8010a8a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010a8c:	3110      	adds	r1, #16
 8010a8e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8010a90:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 8010a92:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8010a94:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8010a96:	00ad      	lsls	r5, r5, #2
 8010a98:	5d63      	ldrb	r3, [r4, r5]
 8010a9a:	2002      	movs	r0, #2
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d006      	beq.n	8010aae <HAL_PCD_EP_Close+0x3a>
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8010aa4:	6820      	ldr	r0, [r4, #0]
 8010aa6:	f003 f843 	bl	8013b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010aaa:	2000      	movs	r0, #0
 8010aac:	5560      	strb	r0, [r4, r5]
}
 8010aae:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8010ab0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010ab2:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010ab4:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010ab6:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8010ab8:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010aba:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8010abc:	7003      	strb	r3, [r0, #0]
 8010abe:	e7e8      	b.n	8010a92 <HAL_PCD_EP_Close+0x1e>

08010ac0 <HAL_PCD_EP_Receive>:
{
 8010ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ac2:	2407      	movs	r4, #7
}
 8010ac4:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8010ac6:	3421      	adds	r4, #33	@ 0x21
 8010ac8:	434c      	muls	r4, r1
 8010aca:	1906      	adds	r6, r0, r4
 8010acc:	0037      	movs	r7, r6
 8010ace:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8010ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8010ad2:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8010ad4:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8010ad6:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8010ad8:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010ada:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8010adc:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8010ade:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010ae0:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8010ae2:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8010ae4:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8010ae6:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010ae8:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010aea:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010aec:	6800      	ldr	r0, [r0, #0]
 8010aee:	f003 f95f 	bl	8013db0 <USB_EPStartXfer>
}
 8010af2:	0028      	movs	r0, r5
 8010af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010af6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8010af6:	2307      	movs	r3, #7
 8010af8:	400b      	ands	r3, r1
 8010afa:	2128      	movs	r1, #40	@ 0x28
 8010afc:	4359      	muls	r1, r3
 8010afe:	1840      	adds	r0, r0, r1
 8010b00:	30fc      	adds	r0, #252	@ 0xfc
 8010b02:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8010b04:	4770      	bx	lr

08010b06 <HAL_PCD_EP_Transmit>:
{
 8010b06:	b570      	push	{r4, r5, r6, lr}
 8010b08:	2407      	movs	r4, #7
}
 8010b0a:	4021      	ands	r1, r4
 8010b0c:	3421      	adds	r4, #33	@ 0x21
 8010b0e:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8010b10:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8010b12:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8010b14:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8010b16:	2201      	movs	r2, #1
 8010b18:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 8010b1a:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8010b1c:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8010b1e:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010b20:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8010b22:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8010b24:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 8010b26:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 8010b28:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010b2a:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010b2c:	6800      	ldr	r0, [r0, #0]
 8010b2e:	f003 f93f 	bl	8013db0 <USB_EPStartXfer>
}
 8010b32:	0028      	movs	r0, r5
 8010b34:	bd70      	pop	{r4, r5, r6, pc}

08010b36 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010b36:	2207      	movs	r2, #7
{
 8010b38:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010b3a:	7903      	ldrb	r3, [r0, #4]
{
 8010b3c:	0004      	movs	r4, r0
 8010b3e:	400a      	ands	r2, r1
    return HAL_ERROR;
 8010b40:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d319      	bcc.n	8010b7a <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8010b46:	b248      	sxtb	r0, r1
 8010b48:	2328      	movs	r3, #40	@ 0x28
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	da16      	bge.n	8010b7c <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010b4e:	4353      	muls	r3, r2
 8010b50:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8010b52:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010b54:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8010b56:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010b58:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8010b5a:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 8010b5c:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8010b5e:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8010b60:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010b62:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8010b64:	00ad      	lsls	r5, r5, #2
 8010b66:	5d62      	ldrb	r2, [r4, r5]
 8010b68:	2002      	movs	r0, #2
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d005      	beq.n	8010b7a <HAL_PCD_EP_SetStall+0x44>
 8010b6e:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8010b70:	6820      	ldr	r0, [r4, #0]
 8010b72:	f003 f84d 	bl	8013c10 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8010b76:	2000      	movs	r0, #0
 8010b78:	5560      	strb	r0, [r4, r5]
}
 8010b7a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8010b7c:	434b      	muls	r3, r1
 8010b7e:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8010b80:	2000      	movs	r0, #0
 8010b82:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8010b84:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010b86:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8010b88:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8010b8a:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8010b8c:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8010b8e:	7018      	strb	r0, [r3, #0]
 8010b90:	e7e4      	b.n	8010b5c <HAL_PCD_EP_SetStall+0x26>

08010b92 <HAL_PCD_EP_ClrStall>:
{
 8010b92:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010b94:	220f      	movs	r2, #15
{
 8010b96:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010b98:	7901      	ldrb	r1, [r0, #4]
{
 8010b9a:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010b9c:	401a      	ands	r2, r3
    return HAL_ERROR;
 8010b9e:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010ba0:	4291      	cmp	r1, r2
 8010ba2:	d31b      	bcc.n	8010bdc <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8010ba4:	2207      	movs	r2, #7
 8010ba6:	2128      	movs	r1, #40	@ 0x28
 8010ba8:	401a      	ands	r2, r3
 8010baa:	4351      	muls	r1, r2
 8010bac:	b25b      	sxtb	r3, r3
 8010bae:	1860      	adds	r0, r4, r1
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	da14      	bge.n	8010bde <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8010bb4:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010bb6:	3110      	adds	r1, #16
 8010bb8:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8010bba:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8010bbc:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8010bbe:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 8010bc0:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010bc2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8010bc4:	00b6      	lsls	r6, r6, #2
 8010bc6:	5da3      	ldrb	r3, [r4, r6]
 8010bc8:	2002      	movs	r0, #2
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d006      	beq.n	8010bdc <HAL_PCD_EP_ClrStall+0x4a>
 8010bce:	2301      	movs	r3, #1
 8010bd0:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010bd2:	6820      	ldr	r0, [r4, #0]
 8010bd4:	f003 f83c 	bl	8013c50 <USB_EPClearStall>
  return HAL_OK;
 8010bd8:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8010bda:	55a5      	strb	r5, [r4, r6]
}
 8010bdc:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8010bde:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010be0:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010be2:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010be4:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8010be6:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010be8:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8010bea:	7003      	strb	r3, [r0, #0]
 8010bec:	e7e6      	b.n	8010bbc <HAL_PCD_EP_ClrStall+0x2a>

08010bee <HAL_PCD_EP_Abort>:
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010bee:	2207      	movs	r2, #7
{
 8010bf0:	000b      	movs	r3, r1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010bf2:	400a      	ands	r2, r1
 8010bf4:	2128      	movs	r1, #40	@ 0x28
  if ((0x80U & ep_addr) == 0x80U)
 8010bf6:	b25b      	sxtb	r3, r3
{
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	4351      	muls	r1, r2
  if ((0x80U & ep_addr) == 0x80U)
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	da05      	bge.n	8010c0c <HAL_PCD_EP_Abort+0x1e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010c00:	3110      	adds	r1, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010c02:	1841      	adds	r1, r0, r1
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8010c04:	6800      	ldr	r0, [r0, #0]
 8010c06:	f003 f859 	bl	8013cbc <USB_EPStopXfer>
}
 8010c0a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010c0c:	3151      	adds	r1, #81	@ 0x51
 8010c0e:	31ff      	adds	r1, #255	@ 0xff
 8010c10:	e7f7      	b.n	8010c02 <HAL_PCD_EP_Abort+0x14>

08010c12 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8010c12:	23a4      	movs	r3, #164	@ 0xa4
{
 8010c14:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	5cc2      	ldrb	r2, [r0, r3]
{
 8010c1a:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8010c1c:	2002      	movs	r0, #2
 8010c1e:	2a01      	cmp	r2, #1
 8010c20:	d00d      	beq.n	8010c3e <HAL_PCD_EP_Flush+0x2c>
 8010c22:	2201      	movs	r2, #1
 8010c24:	54e2      	strb	r2, [r4, r3]
  if ((ep_addr & 0x80U) == 0x80U)
 8010c26:	b24b      	sxtb	r3, r1
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8010c28:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x80U) == 0x80U)
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	da08      	bge.n	8010c40 <HAL_PCD_EP_Flush+0x2e>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8010c2e:	2307      	movs	r3, #7
 8010c30:	4019      	ands	r1, r3
 8010c32:	f002 fe30 	bl	8013896 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 8010c36:	23a4      	movs	r3, #164	@ 0xa4
 8010c38:	2000      	movs	r0, #0
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	54e0      	strb	r0, [r4, r3]
}
 8010c3e:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 8010c40:	f002 fe2b 	bl	801389a <USB_FlushRxFifo>
 8010c44:	e7f7      	b.n	8010c36 <HAL_PCD_EP_Flush+0x24>

08010c46 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8010c46:	b530      	push	{r4, r5, lr}
 8010c48:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8010c4a:	060d      	lsls	r5, r1, #24
 8010c4c:	d50b      	bpl.n	8010c66 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010c4e:	2507      	movs	r5, #7
 8010c50:	4029      	ands	r1, r5
 8010c52:	434c      	muls	r4, r1
 8010c54:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010c56:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8010c58:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8010c5a:	2a00      	cmp	r2, #0
 8010c5c:	d107      	bne.n	8010c6e <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8010c5e:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8010c60:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8010c62:	2000      	movs	r0, #0
 8010c64:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8010c66:	434c      	muls	r4, r1
 8010c68:	3451      	adds	r4, #81	@ 0x51
 8010c6a:	34ff      	adds	r4, #255	@ 0xff
 8010c6c:	e7f3      	b.n	8010c56 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8010c6e:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8010c70:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8010c72:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8010c74:	e7f5      	b.n	8010c62 <HAL_PCDEx_PMAConfig+0x1c>

08010c76 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8010c76:	6802      	ldr	r2, [r0, #0]
{
 8010c78:	0003      	movs	r3, r0
  hpcd->lpm_active = 1U;
 8010c7a:	20b4      	movs	r0, #180	@ 0xb4
 8010c7c:	2101      	movs	r1, #1
{
 8010c7e:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8010c80:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8010c82:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8010c84:	5019      	str	r1, [r3, r0]
  hpcd->LPM_State = LPM_L0;
 8010c86:	2000      	movs	r0, #0
 8010c88:	00a4      	lsls	r4, r4, #2
 8010c8a:	5518      	strb	r0, [r3, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010c8c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8010c8e:	4319      	orrs	r1, r3
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010c90:	2302      	movs	r3, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010c92:	6551      	str	r1, [r2, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010c94:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8010c96:	430b      	orrs	r3, r1
 8010c98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8010c9a:	bd10      	pop	{r4, pc}

08010c9c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8010c9c:	4770      	bx	lr
	...

08010ca0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010ca0:	2380      	movs	r3, #128	@ 0x80
 8010ca2:	4a03      	ldr	r2, [pc, #12]	@ (8010cb0 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	6811      	ldr	r1, [r2, #0]
 8010ca8:	430b      	orrs	r3, r1
 8010caa:	6013      	str	r3, [r2, #0]
}
 8010cac:	4770      	bx	lr
 8010cae:	46c0      	nop			@ (mov r8, r8)
 8010cb0:	40007000 	.word	0x40007000

08010cb4 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8010cb4:	210e      	movs	r1, #14
 8010cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8010d24 <HAL_PWR_ConfigPVD+0x70>)
{
 8010cb8:	b530      	push	{r4, r5, lr}
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8010cba:	6853      	ldr	r3, [r2, #4]
 8010cbc:	438b      	bics	r3, r1
 8010cbe:	6801      	ldr	r1, [r0, #0]
 8010cc0:	430b      	orrs	r3, r1

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8010cc2:	4919      	ldr	r1, [pc, #100]	@ (8010d28 <HAL_PWR_ConfigPVD+0x74>)
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8010cc4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8010cc6:	6fcc      	ldr	r4, [r1, #124]	@ 0x7c
 8010cc8:	4a18      	ldr	r2, [pc, #96]	@ (8010d2c <HAL_PWR_ConfigPVD+0x78>)
 8010cca:	4b19      	ldr	r3, [pc, #100]	@ (8010d30 <HAL_PWR_ConfigPVD+0x7c>)
 8010ccc:	4014      	ands	r4, r2
 8010cce:	67cc      	str	r4, [r1, #124]	@ 0x7c
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8010cd0:	4c18      	ldr	r4, [pc, #96]	@ (8010d34 <HAL_PWR_ConfigPVD+0x80>)
 8010cd2:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 8010cd4:	4015      	ands	r5, r2
 8010cd6:	67e5      	str	r5, [r4, #124]	@ 0x7c
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8010cd8:	685d      	ldr	r5, [r3, #4]
 8010cda:	4015      	ands	r5, r2
 8010cdc:	605d      	str	r5, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8010cde:	681d      	ldr	r5, [r3, #0]
 8010ce0:	402a      	ands	r2, r5
 8010ce2:	601a      	str	r2, [r3, #0]

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8010ce4:	6842      	ldr	r2, [r0, #4]
 8010ce6:	2080      	movs	r0, #128	@ 0x80
 8010ce8:	0240      	lsls	r0, r0, #9
 8010cea:	4202      	tst	r2, r0
 8010cec:	d002      	beq.n	8010cf4 <HAL_PWR_ConfigPVD+0x40>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8010cee:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 8010cf0:	4328      	orrs	r0, r5
 8010cf2:	67e0      	str	r0, [r4, #124]	@ 0x7c
  }

  /* Configure event mode */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8010cf4:	0390      	lsls	r0, r2, #14
 8010cf6:	d504      	bpl.n	8010d02 <HAL_PWR_ConfigPVD+0x4e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8010cf8:	2080      	movs	r0, #128	@ 0x80
 8010cfa:	6fcc      	ldr	r4, [r1, #124]	@ 0x7c
 8010cfc:	0240      	lsls	r0, r0, #9
 8010cfe:	4320      	orrs	r0, r4
 8010d00:	67c8      	str	r0, [r1, #124]	@ 0x7c
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8010d02:	07d1      	lsls	r1, r2, #31
 8010d04:	d504      	bpl.n	8010d10 <HAL_PWR_ConfigPVD+0x5c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8010d06:	2180      	movs	r1, #128	@ 0x80
 8010d08:	6818      	ldr	r0, [r3, #0]
 8010d0a:	0249      	lsls	r1, r1, #9
 8010d0c:	4301      	orrs	r1, r0
 8010d0e:	6019      	str	r1, [r3, #0]
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8010d10:	0792      	lsls	r2, r2, #30
 8010d12:	d504      	bpl.n	8010d1e <HAL_PWR_ConfigPVD+0x6a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8010d14:	2280      	movs	r2, #128	@ 0x80
 8010d16:	6859      	ldr	r1, [r3, #4]
 8010d18:	0252      	lsls	r2, r2, #9
 8010d1a:	430a      	orrs	r2, r1
 8010d1c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
}
 8010d1e:	2000      	movs	r0, #0
 8010d20:	bd30      	pop	{r4, r5, pc}
 8010d22:	46c0      	nop			@ (mov r8, r8)
 8010d24:	40007000 	.word	0x40007000
 8010d28:	40021808 	.word	0x40021808
 8010d2c:	fffeffff 	.word	0xfffeffff
 8010d30:	40021800 	.word	0x40021800
 8010d34:	40021804 	.word	0x40021804

08010d38 <HAL_PWR_EnablePVD>:
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8010d38:	2301      	movs	r3, #1
 8010d3a:	4a02      	ldr	r2, [pc, #8]	@ (8010d44 <HAL_PWR_EnablePVD+0xc>)
 8010d3c:	6851      	ldr	r1, [r2, #4]
 8010d3e:	430b      	orrs	r3, r1
 8010d40:	6053      	str	r3, [r2, #4]
}
 8010d42:	4770      	bx	lr
 8010d44:	40007000 	.word	0x40007000

08010d48 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_EWUP_Msk & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8010d48:	235f      	movs	r3, #95	@ 0x5f
 8010d4a:	4905      	ldr	r1, [pc, #20]	@ (8010d60 <HAL_PWR_EnableWakeUpPin+0x18>)
 8010d4c:	4003      	ands	r3, r0
 8010d4e:	68ca      	ldr	r2, [r1, #12]
 8010d50:	09c0      	lsrs	r0, r0, #7
 8010d52:	439a      	bics	r2, r3
 8010d54:	4302      	orrs	r2, r0
 8010d56:	60ca      	str	r2, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_EWUP_Msk & WakeUpPinPolarity));
 8010d58:	688a      	ldr	r2, [r1, #8]
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	608b      	str	r3, [r1, #8]
}
 8010d5e:	4770      	bx	lr
 8010d60:	40007000 	.word	0x40007000

08010d64 <HAL_PWR_EnterSHUTDOWNMode>:
  */
void HAL_PWR_EnterSHUTDOWNMode(void)
{

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_2);
 8010d64:	2207      	movs	r2, #7
 8010d66:	4906      	ldr	r1, [pc, #24]	@ (8010d80 <HAL_PWR_EnterSHUTDOWNMode+0x1c>)
 8010d68:	680b      	ldr	r3, [r1, #0]
 8010d6a:	4393      	bics	r3, r2
 8010d6c:	3a03      	subs	r2, #3
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	600b      	str	r3, [r1, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010d72:	4b04      	ldr	r3, [pc, #16]	@ (8010d84 <HAL_PWR_EnterSHUTDOWNMode+0x20>)
 8010d74:	6919      	ldr	r1, [r3, #16]
 8010d76:	430a      	orrs	r2, r1
 8010d78:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */
  /* Request Wait For Interrupt */
  __WFI();
 8010d7a:	bf30      	wfi
}
 8010d7c:	4770      	bx	lr
 8010d7e:	46c0      	nop			@ (mov r8, r8)
 8010d80:	40007000 	.word	0x40007000
 8010d84:	e000ed00 	.word	0xe000ed00

08010d88 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010d88:	2380      	movs	r3, #128	@ 0x80
 8010d8a:	21c0      	movs	r1, #192	@ 0xc0
{
 8010d8c:	b510      	push	{r4, lr}
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	4c18      	ldr	r4, [pc, #96]	@ (8010df4 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8010d92:	00c9      	lsls	r1, r1, #3
 8010d94:	4298      	cmp	r0, r3
 8010d96:	d11e      	bne.n	8010dd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8010d98:	6823      	ldr	r3, [r4, #0]
 8010d9a:	400b      	ands	r3, r1
 8010d9c:	4283      	cmp	r3, r0
 8010d9e:	d020      	beq.n	8010de2 <HAL_PWREx_ControlVoltageScaling+0x5a>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010da0:	6823      	ldr	r3, [r4, #0]
 8010da2:	4a15      	ldr	r2, [pc, #84]	@ (8010df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010da4:	4915      	ldr	r1, [pc, #84]	@ (8010dfc <HAL_PWREx_ControlVoltageScaling+0x74>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010da6:	4013      	ands	r3, r2
 8010da8:	4318      	orrs	r0, r3
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010daa:	4b15      	ldr	r3, [pc, #84]	@ (8010e00 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010dac:	6020      	str	r0, [r4, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010dae:	6818      	ldr	r0, [r3, #0]
 8010db0:	2332      	movs	r3, #50	@ 0x32
 8010db2:	4358      	muls	r0, r3
 8010db4:	f7ef f9d8 	bl	8000168 <__udivsi3>
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010db8:	2380      	movs	r3, #128	@ 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010dba:	3001      	adds	r0, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	6962      	ldr	r2, [r4, #20]
 8010dc0:	421a      	tst	r2, r3
 8010dc2:	d001      	beq.n	8010dc8 <HAL_PWREx_ControlVoltageScaling+0x40>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d104      	bne.n	8010dd2 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010dc8:	6962      	ldr	r2, [r4, #20]
      {
        return HAL_TIMEOUT;
 8010dca:	2003      	movs	r0, #3
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010dcc:	421a      	tst	r2, r3
 8010dce:	d008      	beq.n	8010de2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
}
 8010dd0:	bd10      	pop	{r4, pc}
        wait_loop_index--;
 8010dd2:	3801      	subs	r0, #1
 8010dd4:	e7f3      	b.n	8010dbe <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8010dd6:	2380      	movs	r3, #128	@ 0x80
 8010dd8:	6822      	ldr	r2, [r4, #0]
 8010dda:	00db      	lsls	r3, r3, #3
 8010ddc:	400a      	ands	r2, r1
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d101      	bne.n	8010de6 <HAL_PWREx_ControlVoltageScaling+0x5e>
  return HAL_OK;
 8010de2:	2000      	movs	r0, #0
 8010de4:	e7f4      	b.n	8010dd0 <HAL_PWREx_ControlVoltageScaling+0x48>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010de6:	6822      	ldr	r2, [r4, #0]
 8010de8:	4903      	ldr	r1, [pc, #12]	@ (8010df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010dea:	400a      	ands	r2, r1
 8010dec:	4313      	orrs	r3, r2
 8010dee:	6023      	str	r3, [r4, #0]
 8010df0:	e7f7      	b.n	8010de2 <HAL_PWREx_ControlVoltageScaling+0x5a>
 8010df2:	46c0      	nop			@ (mov r8, r8)
 8010df4:	40007000 	.word	0x40007000
 8010df8:	fffff9ff 	.word	0xfffff9ff
 8010dfc:	000f4240 	.word	0x000f4240
 8010e00:	20000050 	.word	0x20000050

08010e04 <HAL_PWREx_GetVoltageRange>:
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8010e04:	4b02      	ldr	r3, [pc, #8]	@ (8010e10 <HAL_PWREx_GetVoltageRange+0xc>)
 8010e06:	6818      	ldr	r0, [r3, #0]
 8010e08:	23c0      	movs	r3, #192	@ 0xc0
 8010e0a:	00db      	lsls	r3, r3, #3
 8010e0c:	4018      	ands	r0, r3
}
 8010e0e:	4770      	bx	lr
 8010e10:	40007000 	.word	0x40007000

08010e14 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8010e14:	2380      	movs	r3, #128	@ 0x80
 8010e16:	4a03      	ldr	r2, [pc, #12]	@ (8010e24 <HAL_PWREx_EnableVddUSB+0x10>)
 8010e18:	00db      	lsls	r3, r3, #3
 8010e1a:	6851      	ldr	r1, [r2, #4]
 8010e1c:	430b      	orrs	r3, r1
 8010e1e:	6053      	str	r3, [r2, #4]
}
 8010e20:	4770      	bx	lr
 8010e22:	46c0      	nop			@ (mov r8, r8)
 8010e24:	40007000 	.word	0x40007000

08010e28 <HAL_PWREx_EnableUltraLowPowerMode>:
  * @note  All the other modes are not affected by this bit.
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPowerMode(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_ENULP);
 8010e28:	2380      	movs	r3, #128	@ 0x80
 8010e2a:	4a03      	ldr	r2, [pc, #12]	@ (8010e38 <HAL_PWREx_EnableUltraLowPowerMode+0x10>)
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	6891      	ldr	r1, [r2, #8]
 8010e30:	430b      	orrs	r3, r1
 8010e32:	6093      	str	r3, [r2, #8]
}
 8010e34:	4770      	bx	lr
 8010e36:	46c0      	nop			@ (mov r8, r8)
 8010e38:	40007000 	.word	0x40007000

08010e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010e3e:	2280      	movs	r2, #128	@ 0x80
 8010e40:	4d1b      	ldr	r5, [pc, #108]	@ (8010eb0 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8010e42:	0552      	lsls	r2, r2, #21
 8010e44:	6dab      	ldr	r3, [r5, #88]	@ 0x58
{
 8010e46:	0004      	movs	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010e48:	4213      	tst	r3, r2
 8010e4a:	d01c      	beq.n	8010e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010e4c:	f7ff ffda 	bl	8010e04 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010e50:	2380      	movs	r3, #128	@ 0x80
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4298      	cmp	r0, r3
 8010e56:	d124      	bne.n	8010ea2 <RCC_SetFlashLatencyFromMSIRange+0x66>
      latency = FLASH_LATENCY_1; /* 1WS */
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8010e58:	2300      	movs	r3, #0
    if (msirange > RCC_MSIRANGE_8)
 8010e5a:	2c80      	cmp	r4, #128	@ 0x80
 8010e5c:	d906      	bls.n	8010e6c <RCC_SetFlashLatencyFromMSIRange+0x30>
        latency = FLASH_LATENCY_2; /* 2WS */
 8010e5e:	3302      	adds	r3, #2
      if (msirange > RCC_MSIRANGE_11)
 8010e60:	2cb0      	cmp	r4, #176	@ 0xb0
 8010e62:	d803      	bhi.n	8010e6c <RCC_SetFlashLatencyFromMSIRange+0x30>
      else if (msirange > RCC_MSIRANGE_9)
 8010e64:	338e      	adds	r3, #142	@ 0x8e
 8010e66:	42a3      	cmp	r3, r4
 8010e68:	419b      	sbcs	r3, r3
 8010e6a:	425b      	negs	r3, r3
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010e6c:	2407      	movs	r4, #7
 8010e6e:	4911      	ldr	r1, [pc, #68]	@ (8010eb4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8010e70:	680a      	ldr	r2, [r1, #0]
 8010e72:	43a2      	bics	r2, r4
 8010e74:	431a      	orrs	r2, r3
 8010e76:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8010e78:	6808      	ldr	r0, [r1, #0]
 8010e7a:	4020      	ands	r0, r4
 8010e7c:	1ac0      	subs	r0, r0, r3
 8010e7e:	1e43      	subs	r3, r0, #1
 8010e80:	4198      	sbcs	r0, r3
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8010e82:	b2c0      	uxtb	r0, r0
 8010e84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8010e86:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010e88:	4313      	orrs	r3, r2
 8010e8a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8010e8c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010e8e:	4013      	ands	r3, r2
 8010e90:	9301      	str	r3, [sp, #4]
 8010e92:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8010e94:	f7ff ffb6 	bl	8010e04 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8010e98:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010e9a:	4a07      	ldr	r2, [pc, #28]	@ (8010eb8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8010ea0:	e7d6      	b.n	8010e50 <RCC_SetFlashLatencyFromMSIRange+0x14>
        latency = FLASH_LATENCY_2; /* 2WS */
 8010ea2:	2302      	movs	r3, #2
    if (msirange >= RCC_MSIRANGE_8)
 8010ea4:	2c7f      	cmp	r4, #127	@ 0x7f
 8010ea6:	d8e1      	bhi.n	8010e6c <RCC_SetFlashLatencyFromMSIRange+0x30>
    else if (msirange == RCC_MSIRANGE_7)
 8010ea8:	3c70      	subs	r4, #112	@ 0x70
 8010eaa:	4263      	negs	r3, r4
 8010eac:	4163      	adcs	r3, r4
 8010eae:	e7dd      	b.n	8010e6c <RCC_SetFlashLatencyFromMSIRange+0x30>
 8010eb0:	40021000 	.word	0x40021000
 8010eb4:	40022000 	.word	0x40022000
 8010eb8:	efffffff 	.word	0xefffffff

08010ebc <HAL_RCC_GetSysClockFreq>:
{
 8010ebc:	b510      	push	{r4, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010ebe:	4c29      	ldr	r4, [pc, #164]	@ (8010f64 <HAL_RCC_GetSysClockFreq+0xa8>)
 8010ec0:	2138      	movs	r1, #56	@ 0x38
 8010ec2:	68a0      	ldr	r0, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010ec4:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010ec6:	0003      	movs	r3, r0
 8010ec8:	400b      	ands	r3, r1
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010eca:	4208      	tst	r0, r1
 8010ecc:	d006      	beq.n	8010edc <HAL_RCC_GetSysClockFreq+0x20>
 8010ece:	2b18      	cmp	r3, #24
 8010ed0:	d12e      	bne.n	8010f30 <HAL_RCC_GetSysClockFreq+0x74>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010ed2:	3935      	subs	r1, #53	@ 0x35
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	400a      	ands	r2, r1
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010ed8:	2a01      	cmp	r2, #1
 8010eda:	d10f      	bne.n	8010efc <HAL_RCC_GetSysClockFreq+0x40>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010edc:	6821      	ldr	r1, [r4, #0]
 8010ede:	220f      	movs	r2, #15
 8010ee0:	0709      	lsls	r1, r1, #28
 8010ee2:	d422      	bmi.n	8010f2a <HAL_RCC_GetSysClockFreq+0x6e>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8010ee4:	4920      	ldr	r1, [pc, #128]	@ (8010f68 <HAL_RCC_GetSysClockFreq+0xac>)
 8010ee6:	6809      	ldr	r1, [r1, #0]
 8010ee8:	0a09      	lsrs	r1, r1, #8
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010eea:	400a      	ands	r2, r1
    if (msirange > 11U)
 8010eec:	2a0b      	cmp	r2, #11
 8010eee:	d900      	bls.n	8010ef2 <HAL_RCC_GetSysClockFreq+0x36>
      msirange = 0U;
 8010ef0:	2200      	movs	r2, #0
    msirange = MSIRangeTable[msirange];
 8010ef2:	491e      	ldr	r1, [pc, #120]	@ (8010f6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8010ef4:	0092      	lsls	r2, r2, #2
 8010ef6:	5850      	ldr	r0, [r2, r1]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d024      	beq.n	8010f46 <HAL_RCC_GetSysClockFreq+0x8a>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010efc:	2203      	movs	r2, #3
 8010efe:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010f00:	68e1      	ldr	r1, [r4, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010f02:	4013      	ands	r3, r2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010f04:	0649      	lsls	r1, r1, #25
 8010f06:	0f49      	lsrs	r1, r1, #29
 8010f08:	3101      	adds	r1, #1
    switch (pllsource)
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	d021      	beq.n	8010f52 <HAL_RCC_GetSysClockFreq+0x96>
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d021      	beq.n	8010f56 <HAL_RCC_GetSysClockFreq+0x9a>
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8010f12:	68e3      	ldr	r3, [r4, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8010f14:	68e4      	ldr	r4, [r4, #12]
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8010f16:	045b      	lsls	r3, r3, #17
 8010f18:	0e5b      	lsrs	r3, r3, #25
 8010f1a:	4358      	muls	r0, r3
 8010f1c:	f7ef f924 	bl	8000168 <__udivsi3>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8010f20:	0f61      	lsrs	r1, r4, #29
 8010f22:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8010f24:	f7ef f920 	bl	8000168 <__udivsi3>
 8010f28:	e00d      	b.n	8010f46 <HAL_RCC_GetSysClockFreq+0x8a>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010f2a:	6821      	ldr	r1, [r4, #0]
 8010f2c:	0909      	lsrs	r1, r1, #4
 8010f2e:	e7dc      	b.n	8010eea <HAL_RCC_GetSysClockFreq+0x2e>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010f30:	2b20      	cmp	r3, #32
 8010f32:	d012      	beq.n	8010f5a <HAL_RCC_GetSysClockFreq+0x9e>
 8010f34:	d808      	bhi.n	8010f48 <HAL_RCC_GetSysClockFreq+0x8c>
 8010f36:	2b08      	cmp	r3, #8
 8010f38:	d012      	beq.n	8010f60 <HAL_RCC_GetSysClockFreq+0xa4>
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010f3a:	3b10      	subs	r3, #16
 8010f3c:	425a      	negs	r2, r3
 8010f3e:	4153      	adcs	r3, r2
 8010f40:	480b      	ldr	r0, [pc, #44]	@ (8010f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8010f42:	425b      	negs	r3, r3
 8010f44:	4018      	ands	r0, r3
}
 8010f46:	bd10      	pop	{r4, pc}
 8010f48:	3b28      	subs	r3, #40	@ 0x28
 8010f4a:	425a      	negs	r2, r3
 8010f4c:	4153      	adcs	r3, r2
 8010f4e:	03d8      	lsls	r0, r3, #15
 8010f50:	e7f9      	b.n	8010f46 <HAL_RCC_GetSysClockFreq+0x8a>
        pllsourcefreq = HSI_VALUE;
 8010f52:	4808      	ldr	r0, [pc, #32]	@ (8010f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8010f54:	e7dd      	b.n	8010f12 <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 8010f56:	4806      	ldr	r0, [pc, #24]	@ (8010f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8010f58:	e7db      	b.n	8010f12 <HAL_RCC_GetSysClockFreq+0x56>
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010f5a:	20fa      	movs	r0, #250	@ 0xfa
 8010f5c:	01c0      	lsls	r0, r0, #7
 8010f5e:	e7f2      	b.n	8010f46 <HAL_RCC_GetSysClockFreq+0x8a>
 8010f60:	4804      	ldr	r0, [pc, #16]	@ (8010f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8010f62:	e7f0      	b.n	8010f46 <HAL_RCC_GetSysClockFreq+0x8a>
 8010f64:	40021000 	.word	0x40021000
 8010f68:	40021094 	.word	0x40021094
 8010f6c:	08020648 	.word	0x08020648
 8010f70:	003d0900 	.word	0x003d0900
 8010f74:	00f42400 	.word	0x00f42400

08010f78 <HAL_RCC_OscConfig>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f78:	2338      	movs	r3, #56	@ 0x38
{
 8010f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f7c:	4cb1      	ldr	r4, [pc, #708]	@ (8011244 <HAL_RCC_OscConfig+0x2cc>)
{
 8010f7e:	0005      	movs	r5, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f80:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010f82:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f84:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010f86:	3b35      	subs	r3, #53	@ 0x35
 8010f88:	401f      	ands	r7, r3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010f8a:	6803      	ldr	r3, [r0, #0]
{
 8010f8c:	b085      	sub	sp, #20
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010f8e:	06db      	lsls	r3, r3, #27
 8010f90:	d400      	bmi.n	8010f94 <HAL_RCC_OscConfig+0x1c>
 8010f92:	e078      	b.n	8011086 <HAL_RCC_OscConfig+0x10e>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010f94:	2e00      	cmp	r6, #0
 8010f96:	d003      	beq.n	8010fa0 <HAL_RCC_OscConfig+0x28>
 8010f98:	2e18      	cmp	r6, #24
 8010f9a:	d155      	bne.n	8011048 <HAL_RCC_OscConfig+0xd0>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010f9c:	2f01      	cmp	r7, #1
 8010f9e:	d153      	bne.n	8011048 <HAL_RCC_OscConfig+0xd0>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010fa0:	6823      	ldr	r3, [r4, #0]
 8010fa2:	079b      	lsls	r3, r3, #30
 8010fa4:	d502      	bpl.n	8010fac <HAL_RCC_OscConfig+0x34>
 8010fa6:	69eb      	ldr	r3, [r5, #28]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d04b      	beq.n	8011044 <HAL_RCC_OscConfig+0xcc>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010fac:	6822      	ldr	r2, [r4, #0]
 8010fae:	23f0      	movs	r3, #240	@ 0xf0
 8010fb0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8010fb2:	0712      	lsls	r2, r2, #28
 8010fb4:	d52c      	bpl.n	8011010 <HAL_RCC_OscConfig+0x98>
 8010fb6:	6822      	ldr	r2, [r4, #0]
 8010fb8:	4013      	ands	r3, r2
 8010fba:	4298      	cmp	r0, r3
 8010fbc:	d92c      	bls.n	8011018 <HAL_RCC_OscConfig+0xa0>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010fbe:	f7ff ff3d 	bl	8010e3c <RCC_SetFlashLatencyFromMSIRange>
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	d13e      	bne.n	8011044 <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010fc6:	2308      	movs	r3, #8
 8010fc8:	6822      	ldr	r2, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010fca:	499f      	ldr	r1, [pc, #636]	@ (8011248 <HAL_RCC_OscConfig+0x2d0>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	22f0      	movs	r2, #240	@ 0xf0
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	6823      	ldr	r3, [r4, #0]
 8010fd4:	4393      	bics	r3, r2
 8010fd6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010fdc:	6862      	ldr	r2, [r4, #4]
 8010fde:	6a2b      	ldr	r3, [r5, #32]
 8010fe0:	400a      	ands	r2, r1
 8010fe2:	021b      	lsls	r3, r3, #8
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8010fe8:	f7ff ff68 	bl	8010ebc <HAL_RCC_GetSysClockFreq>
 8010fec:	68a3      	ldr	r3, [r4, #8]
 8010fee:	4a97      	ldr	r2, [pc, #604]	@ (801124c <HAL_RCC_OscConfig+0x2d4>)
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010ff0:	051b      	lsls	r3, r3, #20
 8010ff2:	0f1b      	lsrs	r3, r3, #28
 8010ff4:	5cd3      	ldrb	r3, [r2, r3]
 8010ff6:	221f      	movs	r2, #31
 8010ff8:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8010ffa:	40d8      	lsrs	r0, r3
 8010ffc:	4994      	ldr	r1, [pc, #592]	@ (8011250 <HAL_RCC_OscConfig+0x2d8>)
        status = HAL_InitTick(uwTickPrio);
 8010ffe:	4b95      	ldr	r3, [pc, #596]	@ (8011254 <HAL_RCC_OscConfig+0x2dc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8011000:	6008      	str	r0, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 8011002:	6818      	ldr	r0, [r3, #0]
 8011004:	f7fd f9e2 	bl	800e3cc <HAL_InitTick>
        if (status != HAL_OK)
 8011008:	2800      	cmp	r0, #0
 801100a:	d03c      	beq.n	8011086 <HAL_RCC_OscConfig+0x10e>
}
 801100c:	b005      	add	sp, #20
 801100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011010:	4a91      	ldr	r2, [pc, #580]	@ (8011258 <HAL_RCC_OscConfig+0x2e0>)
 8011012:	6812      	ldr	r2, [r2, #0]
 8011014:	0912      	lsrs	r2, r2, #4
 8011016:	e7cf      	b.n	8010fb8 <HAL_RCC_OscConfig+0x40>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011018:	2308      	movs	r3, #8
 801101a:	6822      	ldr	r2, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801101c:	498a      	ldr	r1, [pc, #552]	@ (8011248 <HAL_RCC_OscConfig+0x2d0>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801101e:	4313      	orrs	r3, r2
 8011020:	22f0      	movs	r2, #240	@ 0xf0
 8011022:	6023      	str	r3, [r4, #0]
 8011024:	6823      	ldr	r3, [r4, #0]
 8011026:	4393      	bics	r3, r2
 8011028:	4303      	orrs	r3, r0
 801102a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801102c:	6862      	ldr	r2, [r4, #4]
 801102e:	6a2b      	ldr	r3, [r5, #32]
 8011030:	400a      	ands	r2, r1
 8011032:	021b      	lsls	r3, r3, #8
 8011034:	4313      	orrs	r3, r2
 8011036:	6063      	str	r3, [r4, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8011038:	2e00      	cmp	r6, #0
 801103a:	d1d5      	bne.n	8010fe8 <HAL_RCC_OscConfig+0x70>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801103c:	f7ff fefe 	bl	8010e3c <RCC_SetFlashLatencyFromMSIRange>
 8011040:	2800      	cmp	r0, #0
 8011042:	d0d1      	beq.n	8010fe8 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8011044:	2001      	movs	r0, #1
 8011046:	e7e1      	b.n	801100c <HAL_RCC_OscConfig+0x94>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011048:	69ea      	ldr	r2, [r5, #28]
 801104a:	2301      	movs	r3, #1
 801104c:	2a00      	cmp	r2, #0
 801104e:	d03a      	beq.n	80110c6 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_MSI_ENABLE();
 8011050:	6822      	ldr	r2, [r4, #0]
 8011052:	4313      	orrs	r3, r2
 8011054:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8011056:	f7fd f9f9 	bl	800e44c <HAL_GetTick>
 801105a:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801105c:	2202      	movs	r2, #2
 801105e:	6823      	ldr	r3, [r4, #0]
 8011060:	4213      	tst	r3, r2
 8011062:	d028      	beq.n	80110b6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011064:	2308      	movs	r3, #8
 8011066:	6822      	ldr	r2, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011068:	4977      	ldr	r1, [pc, #476]	@ (8011248 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801106a:	4313      	orrs	r3, r2
 801106c:	22f0      	movs	r2, #240	@ 0xf0
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	4393      	bics	r3, r2
 8011074:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011076:	4313      	orrs	r3, r2
 8011078:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801107a:	6862      	ldr	r2, [r4, #4]
 801107c:	6a2b      	ldr	r3, [r5, #32]
 801107e:	400a      	ands	r2, r1
 8011080:	021b      	lsls	r3, r3, #8
 8011082:	4313      	orrs	r3, r2
 8011084:	6063      	str	r3, [r4, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011086:	682b      	ldr	r3, [r5, #0]
 8011088:	07db      	lsls	r3, r3, #31
 801108a:	d42d      	bmi.n	80110e8 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801108c:	682b      	ldr	r3, [r5, #0]
 801108e:	079b      	lsls	r3, r3, #30
 8011090:	d467      	bmi.n	8011162 <HAL_RCC_OscConfig+0x1ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011092:	682b      	ldr	r3, [r5, #0]
 8011094:	071b      	lsls	r3, r3, #28
 8011096:	d500      	bpl.n	801109a <HAL_RCC_OscConfig+0x122>
 8011098:	e0a1      	b.n	80111de <HAL_RCC_OscConfig+0x266>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801109a:	682b      	ldr	r3, [r5, #0]
 801109c:	075b      	lsls	r3, r3, #29
 801109e:	d500      	bpl.n	80110a2 <HAL_RCC_OscConfig+0x12a>
 80110a0:	e0e2      	b.n	8011268 <HAL_RCC_OscConfig+0x2f0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80110a2:	682b      	ldr	r3, [r5, #0]
 80110a4:	069b      	lsls	r3, r3, #26
 80110a6:	d500      	bpl.n	80110aa <HAL_RCC_OscConfig+0x132>
 80110a8:	e175      	b.n	8011396 <HAL_RCC_OscConfig+0x41e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80110aa:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80110ac:	2900      	cmp	r1, #0
 80110ae:	d000      	beq.n	80110b2 <HAL_RCC_OscConfig+0x13a>
 80110b0:	e198      	b.n	80113e4 <HAL_RCC_OscConfig+0x46c>
  return HAL_OK;
 80110b2:	2000      	movs	r0, #0
 80110b4:	e7aa      	b.n	801100c <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80110b6:	f7fd f9c9 	bl	800e44c <HAL_GetTick>
 80110ba:	9b00      	ldr	r3, [sp, #0]
 80110bc:	1ac0      	subs	r0, r0, r3
 80110be:	2802      	cmp	r0, #2
 80110c0:	d9cc      	bls.n	801105c <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 80110c2:	2003      	movs	r0, #3
 80110c4:	e7a2      	b.n	801100c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 80110c6:	6822      	ldr	r2, [r4, #0]
 80110c8:	439a      	bics	r2, r3
 80110ca:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80110cc:	f7fd f9be 	bl	800e44c <HAL_GetTick>
 80110d0:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80110d2:	2202      	movs	r2, #2
 80110d4:	6823      	ldr	r3, [r4, #0]
 80110d6:	4213      	tst	r3, r2
 80110d8:	d0d5      	beq.n	8011086 <HAL_RCC_OscConfig+0x10e>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80110da:	f7fd f9b7 	bl	800e44c <HAL_GetTick>
 80110de:	9b00      	ldr	r3, [sp, #0]
 80110e0:	1ac0      	subs	r0, r0, r3
 80110e2:	2802      	cmp	r0, #2
 80110e4:	d9f5      	bls.n	80110d2 <HAL_RCC_OscConfig+0x15a>
 80110e6:	e7ec      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80110e8:	2e10      	cmp	r6, #16
 80110ea:	d003      	beq.n	80110f4 <HAL_RCC_OscConfig+0x17c>
 80110ec:	2e18      	cmp	r6, #24
 80110ee:	d108      	bne.n	8011102 <HAL_RCC_OscConfig+0x18a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80110f0:	2f03      	cmp	r7, #3
 80110f2:	d106      	bne.n	8011102 <HAL_RCC_OscConfig+0x18a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80110f4:	6823      	ldr	r3, [r4, #0]
 80110f6:	039b      	lsls	r3, r3, #14
 80110f8:	d5c8      	bpl.n	801108c <HAL_RCC_OscConfig+0x114>
 80110fa:	686b      	ldr	r3, [r5, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d1c5      	bne.n	801108c <HAL_RCC_OscConfig+0x114>
 8011100:	e7a0      	b.n	8011044 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011102:	2280      	movs	r2, #128	@ 0x80
 8011104:	686b      	ldr	r3, [r5, #4]
 8011106:	0252      	lsls	r2, r2, #9
 8011108:	4293      	cmp	r3, r2
 801110a:	d111      	bne.n	8011130 <HAL_RCC_OscConfig+0x1b8>
 801110c:	6822      	ldr	r2, [r4, #0]
 801110e:	4313      	orrs	r3, r2
 8011110:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8011112:	f7fd f99b 	bl	800e44c <HAL_GetTick>
 8011116:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011118:	2280      	movs	r2, #128	@ 0x80
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	0292      	lsls	r2, r2, #10
 801111e:	4213      	tst	r3, r2
 8011120:	d1b4      	bne.n	801108c <HAL_RCC_OscConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8011122:	f7fd f993 	bl	800e44c <HAL_GetTick>
 8011126:	9b00      	ldr	r3, [sp, #0]
 8011128:	1ac0      	subs	r0, r0, r3
 801112a:	2864      	cmp	r0, #100	@ 0x64
 801112c:	d9f4      	bls.n	8011118 <HAL_RCC_OscConfig+0x1a0>
 801112e:	e7c8      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011130:	22a0      	movs	r2, #160	@ 0xa0
 8011132:	02d2      	lsls	r2, r2, #11
 8011134:	4293      	cmp	r3, r2
 8011136:	d0e9      	beq.n	801110c <HAL_RCC_OscConfig+0x194>
 8011138:	6822      	ldr	r2, [r4, #0]
 801113a:	4948      	ldr	r1, [pc, #288]	@ (801125c <HAL_RCC_OscConfig+0x2e4>)
 801113c:	400a      	ands	r2, r1
 801113e:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1e6      	bne.n	8011112 <HAL_RCC_OscConfig+0x19a>
        tickstart = HAL_GetTick();
 8011144:	f7fd f982 	bl	800e44c <HAL_GetTick>
 8011148:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801114a:	2280      	movs	r2, #128	@ 0x80
 801114c:	6823      	ldr	r3, [r4, #0]
 801114e:	0292      	lsls	r2, r2, #10
 8011150:	4213      	tst	r3, r2
 8011152:	d09b      	beq.n	801108c <HAL_RCC_OscConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8011154:	f7fd f97a 	bl	800e44c <HAL_GetTick>
 8011158:	9b00      	ldr	r3, [sp, #0]
 801115a:	1ac0      	subs	r0, r0, r3
 801115c:	2864      	cmp	r0, #100	@ 0x64
 801115e:	d9f4      	bls.n	801114a <HAL_RCC_OscConfig+0x1d2>
 8011160:	e7af      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8011162:	2e08      	cmp	r6, #8
 8011164:	d003      	beq.n	801116e <HAL_RCC_OscConfig+0x1f6>
 8011166:	2e18      	cmp	r6, #24
 8011168:	d110      	bne.n	801118c <HAL_RCC_OscConfig+0x214>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801116a:	2f02      	cmp	r7, #2
 801116c:	d10e      	bne.n	801118c <HAL_RCC_OscConfig+0x214>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	055b      	lsls	r3, r3, #21
 8011172:	d503      	bpl.n	801117c <HAL_RCC_OscConfig+0x204>
 8011174:	68eb      	ldr	r3, [r5, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d100      	bne.n	801117c <HAL_RCC_OscConfig+0x204>
 801117a:	e763      	b.n	8011044 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801117c:	6862      	ldr	r2, [r4, #4]
 801117e:	692b      	ldr	r3, [r5, #16]
 8011180:	4937      	ldr	r1, [pc, #220]	@ (8011260 <HAL_RCC_OscConfig+0x2e8>)
 8011182:	061b      	lsls	r3, r3, #24
 8011184:	400a      	ands	r2, r1
 8011186:	4313      	orrs	r3, r2
 8011188:	6063      	str	r3, [r4, #4]
 801118a:	e782      	b.n	8011092 <HAL_RCC_OscConfig+0x11a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801118c:	68eb      	ldr	r3, [r5, #12]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d012      	beq.n	80111b8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8011192:	2380      	movs	r3, #128	@ 0x80
 8011194:	6822      	ldr	r2, [r4, #0]
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	4313      	orrs	r3, r2
 801119a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801119c:	f7fd f956 	bl	800e44c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80111a0:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80111a2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80111a4:	00ff      	lsls	r7, r7, #3
 80111a6:	6823      	ldr	r3, [r4, #0]
 80111a8:	423b      	tst	r3, r7
 80111aa:	d1e7      	bne.n	801117c <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80111ac:	f7fd f94e 	bl	800e44c <HAL_GetTick>
 80111b0:	1b80      	subs	r0, r0, r6
 80111b2:	2802      	cmp	r0, #2
 80111b4:	d9f7      	bls.n	80111a6 <HAL_RCC_OscConfig+0x22e>
 80111b6:	e784      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 80111b8:	6823      	ldr	r3, [r4, #0]
 80111ba:	4a2a      	ldr	r2, [pc, #168]	@ (8011264 <HAL_RCC_OscConfig+0x2ec>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80111bc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80111be:	4013      	ands	r3, r2
 80111c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80111c2:	f7fd f943 	bl	800e44c <HAL_GetTick>
 80111c6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80111c8:	00ff      	lsls	r7, r7, #3
 80111ca:	6823      	ldr	r3, [r4, #0]
 80111cc:	423b      	tst	r3, r7
 80111ce:	d100      	bne.n	80111d2 <HAL_RCC_OscConfig+0x25a>
 80111d0:	e75f      	b.n	8011092 <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80111d2:	f7fd f93b 	bl	800e44c <HAL_GetTick>
 80111d6:	1b80      	subs	r0, r0, r6
 80111d8:	2802      	cmp	r0, #2
 80111da:	d9f6      	bls.n	80111ca <HAL_RCC_OscConfig+0x252>
 80111dc:	e771      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80111de:	696b      	ldr	r3, [r5, #20]
 80111e0:	4e1d      	ldr	r6, [pc, #116]	@ (8011258 <HAL_RCC_OscConfig+0x2e0>)
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d01c      	beq.n	8011220 <HAL_RCC_OscConfig+0x2a8>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80111e6:	69aa      	ldr	r2, [r5, #24]
 80111e8:	2304      	movs	r3, #4
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	d114      	bne.n	8011218 <HAL_RCC_OscConfig+0x2a0>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80111ee:	6832      	ldr	r2, [r6, #0]
 80111f0:	439a      	bics	r2, r3
 80111f2:	6032      	str	r2, [r6, #0]
      __HAL_RCC_LSI_ENABLE();
 80111f4:	2301      	movs	r3, #1
 80111f6:	6832      	ldr	r2, [r6, #0]
 80111f8:	4313      	orrs	r3, r2
 80111fa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80111fc:	f7fd f926 	bl	800e44c <HAL_GetTick>
 8011200:	0007      	movs	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011202:	2202      	movs	r2, #2
 8011204:	6833      	ldr	r3, [r6, #0]
 8011206:	4213      	tst	r3, r2
 8011208:	d000      	beq.n	801120c <HAL_RCC_OscConfig+0x294>
 801120a:	e746      	b.n	801109a <HAL_RCC_OscConfig+0x122>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801120c:	f7fd f91e 	bl	800e44c <HAL_GetTick>
 8011210:	1bc0      	subs	r0, r0, r7
 8011212:	2811      	cmp	r0, #17
 8011214:	d9f5      	bls.n	8011202 <HAL_RCC_OscConfig+0x28a>
 8011216:	e754      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8011218:	6832      	ldr	r2, [r6, #0]
 801121a:	4313      	orrs	r3, r2
 801121c:	6033      	str	r3, [r6, #0]
 801121e:	e7e9      	b.n	80111f4 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_LSI_DISABLE();
 8011220:	2201      	movs	r2, #1
 8011222:	6833      	ldr	r3, [r6, #0]
 8011224:	4393      	bics	r3, r2
 8011226:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8011228:	f7fd f910 	bl	800e44c <HAL_GetTick>
 801122c:	0007      	movs	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801122e:	2202      	movs	r2, #2
 8011230:	6833      	ldr	r3, [r6, #0]
 8011232:	4213      	tst	r3, r2
 8011234:	d100      	bne.n	8011238 <HAL_RCC_OscConfig+0x2c0>
 8011236:	e730      	b.n	801109a <HAL_RCC_OscConfig+0x122>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011238:	f7fd f908 	bl	800e44c <HAL_GetTick>
 801123c:	1bc0      	subs	r0, r0, r7
 801123e:	2811      	cmp	r0, #17
 8011240:	d9f5      	bls.n	801122e <HAL_RCC_OscConfig+0x2b6>
 8011242:	e73e      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
 8011244:	40021000 	.word	0x40021000
 8011248:	ffff00ff 	.word	0xffff00ff
 801124c:	08020680 	.word	0x08020680
 8011250:	20000050 	.word	0x20000050
 8011254:	20000208 	.word	0x20000208
 8011258:	40021094 	.word	0x40021094
 801125c:	fffaffff 	.word	0xfffaffff
 8011260:	80ffffff 	.word	0x80ffffff
 8011264:	fffffeff 	.word	0xfffffeff
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8011268:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 801126a:	2100      	movs	r1, #0
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 801126c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801126e:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8011270:	9100      	str	r1, [sp, #0]
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8011272:	4213      	tst	r3, r2
 8011274:	d108      	bne.n	8011288 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_PWR_CLK_ENABLE();
 8011276:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011278:	4313      	orrs	r3, r2
 801127a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801127c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801127e:	4013      	ands	r3, r2
 8011280:	9303      	str	r3, [sp, #12]
 8011282:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8011284:	2301      	movs	r3, #1
 8011286:	9300      	str	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011288:	2780      	movs	r7, #128	@ 0x80
 801128a:	4e80      	ldr	r6, [pc, #512]	@ (801148c <HAL_RCC_OscConfig+0x514>)
 801128c:	007f      	lsls	r7, r7, #1
 801128e:	6833      	ldr	r3, [r6, #0]
 8011290:	423b      	tst	r3, r7
 8011292:	d027      	beq.n	80112e4 <HAL_RCC_OscConfig+0x36c>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8011294:	2301      	movs	r3, #1
 8011296:	68a9      	ldr	r1, [r5, #8]
 8011298:	4e7d      	ldr	r6, [pc, #500]	@ (8011490 <HAL_RCC_OscConfig+0x518>)
 801129a:	4219      	tst	r1, r3
 801129c:	d132      	bne.n	8011304 <HAL_RCC_OscConfig+0x38c>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801129e:	6832      	ldr	r2, [r6, #0]
 80112a0:	439a      	bics	r2, r3
 80112a2:	6032      	str	r2, [r6, #0]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80112a4:	2204      	movs	r2, #4
 80112a6:	6833      	ldr	r3, [r6, #0]
 80112a8:	4393      	bics	r3, r2
 80112aa:	6033      	str	r3, [r6, #0]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80112ac:	2900      	cmp	r1, #0
 80112ae:	d132      	bne.n	8011316 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 80112b0:	f7fd f8cc 	bl	800e44c <HAL_GetTick>
 80112b4:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80112b6:	2202      	movs	r2, #2
 80112b8:	6833      	ldr	r3, [r6, #0]
 80112ba:	4213      	tst	r3, r2
 80112bc:	d164      	bne.n	8011388 <HAL_RCC_OscConfig+0x410>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80112be:	6833      	ldr	r3, [r6, #0]
 80112c0:	327e      	adds	r2, #126	@ 0x7e
 80112c2:	4213      	tst	r3, r2
 80112c4:	d03a      	beq.n	801133c <HAL_RCC_OscConfig+0x3c4>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80112c6:	6833      	ldr	r3, [r6, #0]
 80112c8:	4393      	bics	r3, r2
 80112ca:	6033      	str	r3, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80112cc:	2280      	movs	r2, #128	@ 0x80
 80112ce:	6833      	ldr	r3, [r6, #0]
 80112d0:	0112      	lsls	r2, r2, #4
 80112d2:	4213      	tst	r3, r2
 80112d4:	d032      	beq.n	801133c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80112d6:	f7fd f8b9 	bl	800e44c <HAL_GetTick>
 80112da:	4b6e      	ldr	r3, [pc, #440]	@ (8011494 <HAL_RCC_OscConfig+0x51c>)
 80112dc:	1bc0      	subs	r0, r0, r7
 80112de:	4298      	cmp	r0, r3
 80112e0:	d9f4      	bls.n	80112cc <HAL_RCC_OscConfig+0x354>
 80112e2:	e6ee      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80112e4:	6833      	ldr	r3, [r6, #0]
 80112e6:	433b      	orrs	r3, r7
 80112e8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80112ea:	f7fd f8af 	bl	800e44c <HAL_GetTick>
 80112ee:	9001      	str	r0, [sp, #4]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80112f0:	6833      	ldr	r3, [r6, #0]
 80112f2:	423b      	tst	r3, r7
 80112f4:	d1ce      	bne.n	8011294 <HAL_RCC_OscConfig+0x31c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80112f6:	f7fd f8a9 	bl	800e44c <HAL_GetTick>
 80112fa:	9b01      	ldr	r3, [sp, #4]
 80112fc:	1ac0      	subs	r0, r0, r3
 80112fe:	2802      	cmp	r0, #2
 8011300:	d9f6      	bls.n	80112f0 <HAL_RCC_OscConfig+0x378>
 8011302:	e6de      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8011304:	2204      	movs	r2, #4
 8011306:	4211      	tst	r1, r2
 8011308:	d002      	beq.n	8011310 <HAL_RCC_OscConfig+0x398>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801130a:	6831      	ldr	r1, [r6, #0]
 801130c:	430a      	orrs	r2, r1
 801130e:	6032      	str	r2, [r6, #0]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011310:	6832      	ldr	r2, [r6, #0]
 8011312:	4313      	orrs	r3, r2
 8011314:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8011316:	f7fd f899 	bl	800e44c <HAL_GetTick>
 801131a:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801131c:	2202      	movs	r2, #2
 801131e:	6833      	ldr	r3, [r6, #0]
 8011320:	4213      	tst	r3, r2
 8011322:	d014      	beq.n	801134e <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8011324:	2380      	movs	r3, #128	@ 0x80
 8011326:	68aa      	ldr	r2, [r5, #8]
 8011328:	421a      	tst	r2, r3
 801132a:	d01e      	beq.n	801136a <HAL_RCC_OscConfig+0x3f2>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801132c:	6832      	ldr	r2, [r6, #0]
 801132e:	4313      	orrs	r3, r2
 8011330:	6033      	str	r3, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8011332:	2280      	movs	r2, #128	@ 0x80
 8011334:	6833      	ldr	r3, [r6, #0]
 8011336:	0112      	lsls	r2, r2, #4
 8011338:	4213      	tst	r3, r2
 801133a:	d00f      	beq.n	801135c <HAL_RCC_OscConfig+0x3e4>
    if (pwrclkchanged == SET)
 801133c:	9b00      	ldr	r3, [sp, #0]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d000      	beq.n	8011344 <HAL_RCC_OscConfig+0x3cc>
 8011342:	e6ae      	b.n	80110a2 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011346:	4a54      	ldr	r2, [pc, #336]	@ (8011498 <HAL_RCC_OscConfig+0x520>)
 8011348:	4013      	ands	r3, r2
 801134a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801134c:	e6a9      	b.n	80110a2 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801134e:	f7fd f87d 	bl	800e44c <HAL_GetTick>
 8011352:	4b50      	ldr	r3, [pc, #320]	@ (8011494 <HAL_RCC_OscConfig+0x51c>)
 8011354:	1bc0      	subs	r0, r0, r7
 8011356:	4298      	cmp	r0, r3
 8011358:	d9e0      	bls.n	801131c <HAL_RCC_OscConfig+0x3a4>
 801135a:	e6b2      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801135c:	f7fd f876 	bl	800e44c <HAL_GetTick>
 8011360:	4b4c      	ldr	r3, [pc, #304]	@ (8011494 <HAL_RCC_OscConfig+0x51c>)
 8011362:	1bc0      	subs	r0, r0, r7
 8011364:	4298      	cmp	r0, r3
 8011366:	d9e4      	bls.n	8011332 <HAL_RCC_OscConfig+0x3ba>
 8011368:	e6ab      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801136a:	6832      	ldr	r2, [r6, #0]
 801136c:	439a      	bics	r2, r3
 801136e:	6032      	str	r2, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8011370:	2280      	movs	r2, #128	@ 0x80
 8011372:	6833      	ldr	r3, [r6, #0]
 8011374:	0112      	lsls	r2, r2, #4
 8011376:	4213      	tst	r3, r2
 8011378:	d0e0      	beq.n	801133c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801137a:	f7fd f867 	bl	800e44c <HAL_GetTick>
 801137e:	4b45      	ldr	r3, [pc, #276]	@ (8011494 <HAL_RCC_OscConfig+0x51c>)
 8011380:	1bc0      	subs	r0, r0, r7
 8011382:	4298      	cmp	r0, r3
 8011384:	d9f4      	bls.n	8011370 <HAL_RCC_OscConfig+0x3f8>
 8011386:	e69c      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011388:	f7fd f860 	bl	800e44c <HAL_GetTick>
 801138c:	4b41      	ldr	r3, [pc, #260]	@ (8011494 <HAL_RCC_OscConfig+0x51c>)
 801138e:	1bc0      	subs	r0, r0, r7
 8011390:	4298      	cmp	r0, r3
 8011392:	d990      	bls.n	80112b6 <HAL_RCC_OscConfig+0x33e>
 8011394:	e695      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011396:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8011398:	2301      	movs	r3, #1
 801139a:	4e40      	ldr	r6, [pc, #256]	@ (801149c <HAL_RCC_OscConfig+0x524>)
 801139c:	2a00      	cmp	r2, #0
 801139e:	d010      	beq.n	80113c2 <HAL_RCC_OscConfig+0x44a>
      __HAL_RCC_HSI48_ENABLE();
 80113a0:	6832      	ldr	r2, [r6, #0]
 80113a2:	4313      	orrs	r3, r2
 80113a4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80113a6:	f7fd f851 	bl	800e44c <HAL_GetTick>
 80113aa:	0007      	movs	r7, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80113ac:	2202      	movs	r2, #2
 80113ae:	6833      	ldr	r3, [r6, #0]
 80113b0:	4213      	tst	r3, r2
 80113b2:	d000      	beq.n	80113b6 <HAL_RCC_OscConfig+0x43e>
 80113b4:	e679      	b.n	80110aa <HAL_RCC_OscConfig+0x132>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80113b6:	f7fd f849 	bl	800e44c <HAL_GetTick>
 80113ba:	1bc0      	subs	r0, r0, r7
 80113bc:	2802      	cmp	r0, #2
 80113be:	d9f5      	bls.n	80113ac <HAL_RCC_OscConfig+0x434>
 80113c0:	e67f      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSI48_DISABLE();
 80113c2:	6832      	ldr	r2, [r6, #0]
 80113c4:	439a      	bics	r2, r3
 80113c6:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 80113c8:	f7fd f840 	bl	800e44c <HAL_GetTick>
 80113cc:	0007      	movs	r7, r0
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80113ce:	2202      	movs	r2, #2
 80113d0:	6833      	ldr	r3, [r6, #0]
 80113d2:	4213      	tst	r3, r2
 80113d4:	d100      	bne.n	80113d8 <HAL_RCC_OscConfig+0x460>
 80113d6:	e668      	b.n	80110aa <HAL_RCC_OscConfig+0x132>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80113d8:	f7fd f838 	bl	800e44c <HAL_GetTick>
 80113dc:	1bc0      	subs	r0, r0, r7
 80113de:	2802      	cmp	r0, #2
 80113e0:	d9f5      	bls.n	80113ce <HAL_RCC_OscConfig+0x456>
 80113e2:	e66e      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80113e4:	2238      	movs	r2, #56	@ 0x38
 80113e6:	68a3      	ldr	r3, [r4, #8]
 80113e8:	4013      	ands	r3, r2
 80113ea:	2b18      	cmp	r3, #24
 80113ec:	d100      	bne.n	80113f0 <HAL_RCC_OscConfig+0x478>
 80113ee:	e629      	b.n	8011044 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_PLL_DISABLE();
 80113f0:	6823      	ldr	r3, [r4, #0]
 80113f2:	4a2b      	ldr	r2, [pc, #172]	@ (80114a0 <HAL_RCC_OscConfig+0x528>)
 80113f4:	4013      	ands	r3, r2
 80113f6:	6023      	str	r3, [r4, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80113f8:	2902      	cmp	r1, #2
 80113fa:	d137      	bne.n	801146c <HAL_RCC_OscConfig+0x4f4>
        tickstart = HAL_GetTick();
 80113fc:	f7fd f826 	bl	800e44c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011400:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8011402:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011404:	04bf      	lsls	r7, r7, #18
 8011406:	6823      	ldr	r3, [r4, #0]
 8011408:	423b      	tst	r3, r7
 801140a:	d129      	bne.n	8011460 <HAL_RCC_OscConfig+0x4e8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801140c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801140e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011410:	68e2      	ldr	r2, [r4, #12]
 8011412:	430b      	orrs	r3, r1
 8011414:	4923      	ldr	r1, [pc, #140]	@ (80114a4 <HAL_RCC_OscConfig+0x52c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011416:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011418:	400a      	ands	r2, r1
 801141a:	4313      	orrs	r3, r2
 801141c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801141e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011420:	4313      	orrs	r3, r2
 8011422:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8011424:	4313      	orrs	r3, r2
 8011426:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8011428:	4313      	orrs	r3, r2
 801142a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 801142c:	0212      	lsls	r2, r2, #8
 801142e:	4313      	orrs	r3, r2
 8011430:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8011432:	2380      	movs	r3, #128	@ 0x80
 8011434:	68e2      	ldr	r2, [r4, #12]
 8011436:	055b      	lsls	r3, r3, #21
 8011438:	4313      	orrs	r3, r2
 801143a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 801143c:	2380      	movs	r3, #128	@ 0x80
 801143e:	6822      	ldr	r2, [r4, #0]
 8011440:	045b      	lsls	r3, r3, #17
 8011442:	4313      	orrs	r3, r2
 8011444:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8011446:	f7fd f801 	bl	800e44c <HAL_GetTick>
 801144a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801144c:	6823      	ldr	r3, [r4, #0]
 801144e:	4233      	tst	r3, r6
 8011450:	d000      	beq.n	8011454 <HAL_RCC_OscConfig+0x4dc>
 8011452:	e62e      	b.n	80110b2 <HAL_RCC_OscConfig+0x13a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011454:	f7fc fffa 	bl	800e44c <HAL_GetTick>
 8011458:	1b40      	subs	r0, r0, r5
 801145a:	2802      	cmp	r0, #2
 801145c:	d9f6      	bls.n	801144c <HAL_RCC_OscConfig+0x4d4>
 801145e:	e630      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011460:	f7fc fff4 	bl	800e44c <HAL_GetTick>
 8011464:	1b80      	subs	r0, r0, r6
 8011466:	2802      	cmp	r0, #2
 8011468:	d9cd      	bls.n	8011406 <HAL_RCC_OscConfig+0x48e>
 801146a:	e62a      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 801146c:	f7fc ffee 	bl	800e44c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011470:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8011472:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011474:	04b6      	lsls	r6, r6, #18
 8011476:	6823      	ldr	r3, [r4, #0]
 8011478:	4233      	tst	r3, r6
 801147a:	d100      	bne.n	801147e <HAL_RCC_OscConfig+0x506>
 801147c:	e619      	b.n	80110b2 <HAL_RCC_OscConfig+0x13a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801147e:	f7fc ffe5 	bl	800e44c <HAL_GetTick>
 8011482:	1b40      	subs	r0, r0, r5
 8011484:	2802      	cmp	r0, #2
 8011486:	d9f6      	bls.n	8011476 <HAL_RCC_OscConfig+0x4fe>
 8011488:	e61b      	b.n	80110c2 <HAL_RCC_OscConfig+0x14a>
 801148a:	46c0      	nop			@ (mov r8, r8)
 801148c:	40007000 	.word	0x40007000
 8011490:	40021090 	.word	0x40021090
 8011494:	00001388 	.word	0x00001388
 8011498:	efffffff 	.word	0xefffffff
 801149c:	40021098 	.word	0x40021098
 80114a0:	feffffff 	.word	0xfeffffff
 80114a4:	11c1808c 	.word	0x11c1808c

080114a8 <HAL_RCC_ClockConfig>:
{
 80114a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80114aa:	2207      	movs	r2, #7
 80114ac:	4e3f      	ldr	r6, [pc, #252]	@ (80115ac <HAL_RCC_ClockConfig+0x104>)
{
 80114ae:	0004      	movs	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80114b0:	6833      	ldr	r3, [r6, #0]
{
 80114b2:	000d      	movs	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80114b4:	4013      	ands	r3, r2
 80114b6:	428b      	cmp	r3, r1
 80114b8:	d31d      	bcc.n	80114f6 <HAL_RCC_ClockConfig+0x4e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80114ba:	6823      	ldr	r3, [r4, #0]
 80114bc:	07db      	lsls	r3, r3, #31
 80114be:	d424      	bmi.n	801150a <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80114c0:	6822      	ldr	r2, [r4, #0]
 80114c2:	0793      	lsls	r3, r2, #30
 80114c4:	d459      	bmi.n	801157a <HAL_RCC_ClockConfig+0xd2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80114c6:	2107      	movs	r1, #7
 80114c8:	6833      	ldr	r3, [r6, #0]
 80114ca:	400b      	ands	r3, r1
 80114cc:	42ab      	cmp	r3, r5
 80114ce:	d85c      	bhi.n	801158a <HAL_RCC_ClockConfig+0xe2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80114d0:	4d37      	ldr	r5, [pc, #220]	@ (80115b0 <HAL_RCC_ClockConfig+0x108>)
 80114d2:	0752      	lsls	r2, r2, #29
 80114d4:	d462      	bmi.n	801159c <HAL_RCC_ClockConfig+0xf4>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80114d6:	f7ff fcf1 	bl	8010ebc <HAL_RCC_GetSysClockFreq>
 80114da:	68ab      	ldr	r3, [r5, #8]
 80114dc:	4a35      	ldr	r2, [pc, #212]	@ (80115b4 <HAL_RCC_ClockConfig+0x10c>)
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80114de:	051b      	lsls	r3, r3, #20
 80114e0:	0f1b      	lsrs	r3, r3, #28
 80114e2:	5cd3      	ldrb	r3, [r2, r3]
 80114e4:	221f      	movs	r2, #31
 80114e6:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80114e8:	40d8      	lsrs	r0, r3
 80114ea:	4933      	ldr	r1, [pc, #204]	@ (80115b8 <HAL_RCC_ClockConfig+0x110>)
 80114ec:	6008      	str	r0, [r1, #0]
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80114ee:	2003      	movs	r0, #3
 80114f0:	f7fc ff6c 	bl	800e3cc <HAL_InitTick>
  return halstatus;
 80114f4:	e008      	b.n	8011508 <HAL_RCC_ClockConfig+0x60>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80114f6:	6833      	ldr	r3, [r6, #0]
 80114f8:	4393      	bics	r3, r2
 80114fa:	430b      	orrs	r3, r1
 80114fc:	6033      	str	r3, [r6, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80114fe:	6833      	ldr	r3, [r6, #0]
 8011500:	4013      	ands	r3, r2
 8011502:	428b      	cmp	r3, r1
 8011504:	d0d9      	beq.n	80114ba <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8011506:	2001      	movs	r0, #1
}
 8011508:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801150a:	6860      	ldr	r0, [r4, #4]
 801150c:	2804      	cmp	r0, #4
 801150e:	d832      	bhi.n	8011576 <HAL_RCC_ClockConfig+0xce>
 8011510:	f7ee fe0c 	bl	800012c <__gnu_thumb1_case_uqi>
 8011514:	03202a25 	.word	0x03202a25
 8011518:	2f          	.byte	0x2f
 8011519:	00          	.byte	0x00
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801151a:	4b25      	ldr	r3, [pc, #148]	@ (80115b0 <HAL_RCC_ClockConfig+0x108>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	019b      	lsls	r3, r3, #6
 8011520:	d5f1      	bpl.n	8011506 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011522:	2207      	movs	r2, #7
 8011524:	4f22      	ldr	r7, [pc, #136]	@ (80115b0 <HAL_RCC_ClockConfig+0x108>)
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	4393      	bics	r3, r2
 801152a:	4303      	orrs	r3, r0
 801152c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 801152e:	f7fc ff8d 	bl	800e44c <HAL_GetTick>
 8011532:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011534:	2338      	movs	r3, #56	@ 0x38
 8011536:	68ba      	ldr	r2, [r7, #8]
 8011538:	401a      	ands	r2, r3
 801153a:	6863      	ldr	r3, [r4, #4]
 801153c:	00db      	lsls	r3, r3, #3
 801153e:	429a      	cmp	r2, r3
 8011540:	d0be      	beq.n	80114c0 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011542:	f7fc ff83 	bl	800e44c <HAL_GetTick>
 8011546:	9b01      	ldr	r3, [sp, #4]
 8011548:	1ac0      	subs	r0, r0, r3
 801154a:	4b1c      	ldr	r3, [pc, #112]	@ (80115bc <HAL_RCC_ClockConfig+0x114>)
 801154c:	4298      	cmp	r0, r3
 801154e:	d9f1      	bls.n	8011534 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8011550:	2003      	movs	r0, #3
 8011552:	e7d9      	b.n	8011508 <HAL_RCC_ClockConfig+0x60>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011554:	4b16      	ldr	r3, [pc, #88]	@ (80115b0 <HAL_RCC_ClockConfig+0x108>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	039b      	lsls	r3, r3, #14
 801155a:	d4e2      	bmi.n	8011522 <HAL_RCC_ClockConfig+0x7a>
 801155c:	e7d3      	b.n	8011506 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801155e:	4b14      	ldr	r3, [pc, #80]	@ (80115b0 <HAL_RCC_ClockConfig+0x108>)
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	079b      	lsls	r3, r3, #30
 8011564:	d4dd      	bmi.n	8011522 <HAL_RCC_ClockConfig+0x7a>
 8011566:	e7ce      	b.n	8011506 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011568:	4b11      	ldr	r3, [pc, #68]	@ (80115b0 <HAL_RCC_ClockConfig+0x108>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	055b      	lsls	r3, r3, #21
 801156e:	d4d8      	bmi.n	8011522 <HAL_RCC_ClockConfig+0x7a>
 8011570:	e7c9      	b.n	8011506 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011572:	4b13      	ldr	r3, [pc, #76]	@ (80115c0 <HAL_RCC_ClockConfig+0x118>)
 8011574:	e7f4      	b.n	8011560 <HAL_RCC_ClockConfig+0xb8>
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011576:	4b13      	ldr	r3, [pc, #76]	@ (80115c4 <HAL_RCC_ClockConfig+0x11c>)
 8011578:	e7f2      	b.n	8011560 <HAL_RCC_ClockConfig+0xb8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801157a:	490d      	ldr	r1, [pc, #52]	@ (80115b0 <HAL_RCC_ClockConfig+0x108>)
 801157c:	4812      	ldr	r0, [pc, #72]	@ (80115c8 <HAL_RCC_ClockConfig+0x120>)
 801157e:	688b      	ldr	r3, [r1, #8]
 8011580:	4003      	ands	r3, r0
 8011582:	68a0      	ldr	r0, [r4, #8]
 8011584:	4303      	orrs	r3, r0
 8011586:	608b      	str	r3, [r1, #8]
 8011588:	e79d      	b.n	80114c6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801158a:	6833      	ldr	r3, [r6, #0]
 801158c:	438b      	bics	r3, r1
 801158e:	432b      	orrs	r3, r5
 8011590:	6033      	str	r3, [r6, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011592:	6833      	ldr	r3, [r6, #0]
 8011594:	400b      	ands	r3, r1
 8011596:	42ab      	cmp	r3, r5
 8011598:	d1b5      	bne.n	8011506 <HAL_RCC_ClockConfig+0x5e>
 801159a:	e799      	b.n	80114d0 <HAL_RCC_ClockConfig+0x28>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801159c:	68ab      	ldr	r3, [r5, #8]
 801159e:	4a0b      	ldr	r2, [pc, #44]	@ (80115cc <HAL_RCC_ClockConfig+0x124>)
 80115a0:	4013      	ands	r3, r2
 80115a2:	68e2      	ldr	r2, [r4, #12]
 80115a4:	4313      	orrs	r3, r2
 80115a6:	60ab      	str	r3, [r5, #8]
 80115a8:	e795      	b.n	80114d6 <HAL_RCC_ClockConfig+0x2e>
 80115aa:	46c0      	nop			@ (mov r8, r8)
 80115ac:	40022000 	.word	0x40022000
 80115b0:	40021000 	.word	0x40021000
 80115b4:	08020680 	.word	0x08020680
 80115b8:	20000050 	.word	0x20000050
 80115bc:	00001388 	.word	0x00001388
 80115c0:	40021094 	.word	0x40021094
 80115c4:	40021090 	.word	0x40021090
 80115c8:	fffff0ff 	.word	0xfffff0ff
 80115cc:	ffff8fff 	.word	0xffff8fff

080115d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80115d0:	4b05      	ldr	r3, [pc, #20]	@ (80115e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80115d2:	4906      	ldr	r1, [pc, #24]	@ (80115ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80115d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80115d6:	4a06      	ldr	r2, [pc, #24]	@ (80115f0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80115d8:	045b      	lsls	r3, r3, #17
 80115da:	0f5b      	lsrs	r3, r3, #29
 80115dc:	5ccb      	ldrb	r3, [r1, r3]
 80115de:	211f      	movs	r1, #31
 80115e0:	6810      	ldr	r0, [r2, #0]
 80115e2:	400b      	ands	r3, r1
 80115e4:	40d8      	lsrs	r0, r3
}
 80115e6:	4770      	bx	lr
 80115e8:	40021000 	.word	0x40021000
 80115ec:	08020678 	.word	0x08020678
 80115f0:	20000050 	.word	0x20000050

080115f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80115f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80115f6:	6803      	ldr	r3, [r0, #0]
{
 80115f8:	0004      	movs	r4, r0
 80115fa:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80115fc:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80115fe:	041b      	lsls	r3, r3, #16
 8011600:	d553      	bpl.n	80116aa <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011602:	2280      	movs	r2, #128	@ 0x80
 8011604:	4e8a      	ldr	r6, [pc, #552]	@ (8011830 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011606:	0552      	lsls	r2, r2, #21
 8011608:	6db3      	ldr	r3, [r6, #88]	@ 0x58
    FlagStatus       pwrclkchanged = RESET;
 801160a:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801160c:	4213      	tst	r3, r2
 801160e:	d108      	bne.n	8011622 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011610:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8011612:	4313      	orrs	r3, r2
 8011614:	65b3      	str	r3, [r6, #88]	@ 0x58
 8011616:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8011618:	4013      	ands	r3, r2
 801161a:	9303      	str	r3, [sp, #12]
 801161c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 801161e:	2301      	movs	r3, #1
 8011620:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011622:	2780      	movs	r7, #128	@ 0x80
 8011624:	4d83      	ldr	r5, [pc, #524]	@ (8011834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8011626:	007f      	lsls	r7, r7, #1
 8011628:	682b      	ldr	r3, [r5, #0]
 801162a:	433b      	orrs	r3, r7
 801162c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801162e:	f7fc ff0d 	bl	800e44c <HAL_GetTick>
 8011632:	9001      	str	r0, [sp, #4]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011634:	682b      	ldr	r3, [r5, #0]
 8011636:	423b      	tst	r3, r7
 8011638:	d029      	beq.n	801168e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801163a:	4d7f      	ldr	r5, [pc, #508]	@ (8011838 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 801163c:	23c0      	movs	r3, #192	@ 0xc0
 801163e:	682a      	ldr	r2, [r5, #0]
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	0010      	movs	r0, r2

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011644:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8011646:	4f7d      	ldr	r7, [pc, #500]	@ (801183c <HAL_RCCEx_PeriphCLKConfig+0x248>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8011648:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801164a:	421a      	tst	r2, r3
 801164c:	d018      	beq.n	8011680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 801164e:	4281      	cmp	r1, r0
 8011650:	d016      	beq.n	8011680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011652:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011654:	682b      	ldr	r3, [r5, #0]
        __HAL_RCC_BACKUPRESET_FORCE();
 8011656:	6828      	ldr	r0, [r5, #0]
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011658:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 801165a:	0252      	lsls	r2, r2, #9
 801165c:	4302      	orrs	r2, r0
 801165e:	602a      	str	r2, [r5, #0]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011660:	682a      	ldr	r2, [r5, #0]
 8011662:	4877      	ldr	r0, [pc, #476]	@ (8011840 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011664:	4039      	ands	r1, r7
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011666:	4002      	ands	r2, r0
 8011668:	602a      	str	r2, [r5, #0]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801166a:	6029      	str	r1, [r5, #0]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801166c:	07db      	lsls	r3, r3, #31
 801166e:	d507      	bpl.n	8011680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011670:	f7fc feec 	bl	800e44c <HAL_GetTick>
 8011674:	9001      	str	r0, [sp, #4]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011676:	2202      	movs	r2, #2
 8011678:	682b      	ldr	r3, [r5, #0]
 801167a:	4213      	tst	r3, r2
 801167c:	d100      	bne.n	8011680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 801167e:	e0ce      	b.n	801181e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011684:	403b      	ands	r3, r7
 8011686:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011688:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801168a:	602b      	str	r3, [r5, #0]
 801168c:	e006      	b.n	801169c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801168e:	f7fc fedd 	bl	800e44c <HAL_GetTick>
 8011692:	9b01      	ldr	r3, [sp, #4]
 8011694:	1ac0      	subs	r0, r0, r3
 8011696:	2802      	cmp	r0, #2
 8011698:	d9cc      	bls.n	8011634 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801169a:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801169c:	9b00      	ldr	r3, [sp, #0]
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d103      	bne.n	80116aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80116a2:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80116a4:	4a67      	ldr	r2, [pc, #412]	@ (8011844 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80116a6:	4013      	ands	r3, r2
 80116a8:	65b3      	str	r3, [r6, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80116aa:	6823      	ldr	r3, [r4, #0]
 80116ac:	07da      	lsls	r2, r3, #31
 80116ae:	d506      	bpl.n	80116be <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80116b0:	2503      	movs	r5, #3
 80116b2:	4965      	ldr	r1, [pc, #404]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80116b4:	680a      	ldr	r2, [r1, #0]
 80116b6:	43aa      	bics	r2, r5
 80116b8:	6865      	ldr	r5, [r4, #4]
 80116ba:	432a      	orrs	r2, r5
 80116bc:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80116be:	079a      	lsls	r2, r3, #30
 80116c0:	d506      	bpl.n	80116d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80116c2:	250c      	movs	r5, #12
 80116c4:	4960      	ldr	r1, [pc, #384]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80116c6:	680a      	ldr	r2, [r1, #0]
 80116c8:	43aa      	bics	r2, r5
 80116ca:	68a5      	ldr	r5, [r4, #8]
 80116cc:	432a      	orrs	r2, r5
 80116ce:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80116d0:	06da      	lsls	r2, r3, #27
 80116d2:	d506      	bpl.n	80116e2 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80116d4:	495c      	ldr	r1, [pc, #368]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80116d6:	4d5d      	ldr	r5, [pc, #372]	@ (801184c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80116d8:	680a      	ldr	r2, [r1, #0]
 80116da:	402a      	ands	r2, r5
 80116dc:	6965      	ldr	r5, [r4, #20]
 80116de:	432a      	orrs	r2, r5
 80116e0:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80116e2:	071a      	lsls	r2, r3, #28
 80116e4:	d506      	bpl.n	80116f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80116e6:	4958      	ldr	r1, [pc, #352]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80116e8:	4d54      	ldr	r5, [pc, #336]	@ (801183c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80116ea:	680a      	ldr	r2, [r1, #0]
 80116ec:	402a      	ands	r2, r5
 80116ee:	6925      	ldr	r5, [r4, #16]
 80116f0:	432a      	orrs	r2, r5
 80116f2:	600a      	str	r2, [r1, #0]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 80116f4:	075a      	lsls	r2, r3, #29
 80116f6:	d506      	bpl.n	8011706 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 80116f8:	25c0      	movs	r5, #192	@ 0xc0
 80116fa:	4953      	ldr	r1, [pc, #332]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80116fc:	680a      	ldr	r2, [r1, #0]
 80116fe:	43aa      	bics	r2, r5
 8011700:	68e5      	ldr	r5, [r4, #12]
 8011702:	432a      	orrs	r2, r5
 8011704:	600a      	str	r2, [r1, #0]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011706:	069a      	lsls	r2, r3, #26
 8011708:	d506      	bpl.n	8011718 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801170a:	494f      	ldr	r1, [pc, #316]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801170c:	4d50      	ldr	r5, [pc, #320]	@ (8011850 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 801170e:	680a      	ldr	r2, [r1, #0]
 8011710:	402a      	ands	r2, r5
 8011712:	69a5      	ldr	r5, [r4, #24]
 8011714:	432a      	orrs	r2, r5
 8011716:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011718:	065a      	lsls	r2, r3, #25
 801171a:	d506      	bpl.n	801172a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801171c:	494a      	ldr	r1, [pc, #296]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801171e:	4d4d      	ldr	r5, [pc, #308]	@ (8011854 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011720:	680a      	ldr	r2, [r1, #0]
 8011722:	402a      	ands	r2, r5
 8011724:	69e5      	ldr	r5, [r4, #28]
 8011726:	432a      	orrs	r2, r5
 8011728:	600a      	str	r2, [r1, #0]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801172a:	061a      	lsls	r2, r3, #24
 801172c:	d506      	bpl.n	801173c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801172e:	4946      	ldr	r1, [pc, #280]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011730:	4d49      	ldr	r5, [pc, #292]	@ (8011858 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8011732:	680a      	ldr	r2, [r1, #0]
 8011734:	402a      	ands	r2, r5
 8011736:	6a25      	ldr	r5, [r4, #32]
 8011738:	432a      	orrs	r2, r5
 801173a:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801173c:	05da      	lsls	r2, r3, #23
 801173e:	d506      	bpl.n	801174e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011740:	4941      	ldr	r1, [pc, #260]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011742:	4d46      	ldr	r5, [pc, #280]	@ (801185c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011744:	680a      	ldr	r2, [r1, #0]
 8011746:	402a      	ands	r2, r5
 8011748:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801174a:	432a      	orrs	r2, r5
 801174c:	600a      	str	r2, [r1, #0]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 801174e:	059a      	lsls	r2, r3, #22
 8011750:	d506      	bpl.n	8011760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8011752:	493d      	ldr	r1, [pc, #244]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011754:	4d42      	ldr	r5, [pc, #264]	@ (8011860 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011756:	680a      	ldr	r2, [r1, #0]
 8011758:	402a      	ands	r2, r5
 801175a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 801175c:	432a      	orrs	r2, r5
 801175e:	600a      	str	r2, [r1, #0]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011760:	045a      	lsls	r2, r3, #17
 8011762:	d510      	bpl.n	8011786 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8011764:	2280      	movs	r2, #128	@ 0x80
 8011766:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8011768:	0552      	lsls	r2, r2, #21
 801176a:	4295      	cmp	r5, r2
 801176c:	d105      	bne.n	801177a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 801176e:	2280      	movs	r2, #128	@ 0x80
 8011770:	492f      	ldr	r1, [pc, #188]	@ (8011830 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011772:	0252      	lsls	r2, r2, #9
 8011774:	68ce      	ldr	r6, [r1, #12]
 8011776:	4332      	orrs	r2, r6
 8011778:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801177a:	4933      	ldr	r1, [pc, #204]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801177c:	4e39      	ldr	r6, [pc, #228]	@ (8011864 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 801177e:	680a      	ldr	r2, [r1, #0]
 8011780:	4032      	ands	r2, r6
 8011782:	432a      	orrs	r2, r5
 8011784:	600a      	str	r2, [r1, #0]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011786:	04da      	lsls	r2, r3, #19
 8011788:	d510      	bpl.n	80117ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 801178a:	2280      	movs	r2, #128	@ 0x80
 801178c:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801178e:	0512      	lsls	r2, r2, #20
 8011790:	4295      	cmp	r5, r2
 8011792:	d105      	bne.n	80117a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8011794:	2280      	movs	r2, #128	@ 0x80
 8011796:	4926      	ldr	r1, [pc, #152]	@ (8011830 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011798:	0452      	lsls	r2, r2, #17
 801179a:	68ce      	ldr	r6, [r1, #12]
 801179c:	4332      	orrs	r2, r6
 801179e:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80117a0:	4929      	ldr	r1, [pc, #164]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80117a2:	4e31      	ldr	r6, [pc, #196]	@ (8011868 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80117a4:	680a      	ldr	r2, [r1, #0]
 80117a6:	4032      	ands	r2, r6
 80117a8:	432a      	orrs	r2, r5
 80117aa:	600a      	str	r2, [r1, #0]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80117ac:	049a      	lsls	r2, r3, #18
 80117ae:	d510      	bpl.n	80117d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80117b0:	2280      	movs	r2, #128	@ 0x80
 80117b2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80117b4:	0512      	lsls	r2, r2, #20
 80117b6:	4295      	cmp	r5, r2
 80117b8:	d105      	bne.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80117ba:	2280      	movs	r2, #128	@ 0x80
 80117bc:	491c      	ldr	r1, [pc, #112]	@ (8011830 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80117be:	0452      	lsls	r2, r2, #17
 80117c0:	68ce      	ldr	r6, [r1, #12]
 80117c2:	4332      	orrs	r2, r6
 80117c4:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80117c6:	4920      	ldr	r1, [pc, #128]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80117c8:	4e27      	ldr	r6, [pc, #156]	@ (8011868 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80117ca:	680a      	ldr	r2, [r1, #0]
 80117cc:	4032      	ands	r2, r6
 80117ce:	432a      	orrs	r2, r5
 80117d0:	600a      	str	r2, [r1, #0]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80117d2:	055a      	lsls	r2, r3, #21
 80117d4:	d50e      	bpl.n	80117f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 80117d6:	2280      	movs	r2, #128	@ 0x80
 80117d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80117da:	0452      	lsls	r2, r2, #17
 80117dc:	4291      	cmp	r1, r2
 80117de:	d103      	bne.n	80117e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80117e0:	4d13      	ldr	r5, [pc, #76]	@ (8011830 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80117e2:	68ea      	ldr	r2, [r5, #12]
 80117e4:	430a      	orrs	r2, r1
 80117e6:	60ea      	str	r2, [r5, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80117e8:	4d17      	ldr	r5, [pc, #92]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80117ea:	4e20      	ldr	r6, [pc, #128]	@ (801186c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80117ec:	682a      	ldr	r2, [r5, #0]
 80117ee:	4032      	ands	r2, r6
 80117f0:	430a      	orrs	r2, r1
 80117f2:	602a      	str	r2, [r5, #0]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80117f4:	051b      	lsls	r3, r3, #20
 80117f6:	d510      	bpl.n	801181a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80117f8:	2380      	movs	r3, #128	@ 0x80
 80117fa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80117fc:	049b      	lsls	r3, r3, #18
 80117fe:	4299      	cmp	r1, r3
 8011800:	d105      	bne.n	801180e <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8011802:	2380      	movs	r3, #128	@ 0x80
 8011804:	4a0a      	ldr	r2, [pc, #40]	@ (8011830 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011806:	045b      	lsls	r3, r3, #17
 8011808:	68d4      	ldr	r4, [r2, #12]
 801180a:	4323      	orrs	r3, r4
 801180c:	60d3      	str	r3, [r2, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 801180e:	4a0e      	ldr	r2, [pc, #56]	@ (8011848 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011810:	4c16      	ldr	r4, [pc, #88]	@ (801186c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8011812:	6813      	ldr	r3, [r2, #0]
 8011814:	4023      	ands	r3, r4
 8011816:	430b      	orrs	r3, r1
 8011818:	6013      	str	r3, [r2, #0]

  }

  return status;
}
 801181a:	b005      	add	sp, #20
 801181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801181e:	f7fc fe15 	bl	800e44c <HAL_GetTick>
 8011822:	9b01      	ldr	r3, [sp, #4]
 8011824:	1ac0      	subs	r0, r0, r3
 8011826:	4b12      	ldr	r3, [pc, #72]	@ (8011870 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8011828:	4298      	cmp	r0, r3
 801182a:	d800      	bhi.n	801182e <HAL_RCCEx_PeriphCLKConfig+0x23a>
 801182c:	e723      	b.n	8011676 <HAL_RCCEx_PeriphCLKConfig+0x82>
 801182e:	e734      	b.n	801169a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8011830:	40021000 	.word	0x40021000
 8011834:	40007000 	.word	0x40007000
 8011838:	40021090 	.word	0x40021090
 801183c:	fffffcff 	.word	0xfffffcff
 8011840:	fffeffff 	.word	0xfffeffff
 8011844:	efffffff 	.word	0xefffffff
 8011848:	40021088 	.word	0x40021088
 801184c:	fffff3ff 	.word	0xfffff3ff
 8011850:	ffffcfff 	.word	0xffffcfff
 8011854:	fffcffff 	.word	0xfffcffff
 8011858:	fff3ffff 	.word	0xfff3ffff
 801185c:	ffcfffff 	.word	0xffcfffff
 8011860:	ff3fffff 	.word	0xff3fffff
 8011864:	cfffffff 	.word	0xcfffffff
 8011868:	f3ffffff 	.word	0xf3ffffff
 801186c:	feffffff 	.word	0xfeffffff
 8011870:	00001388 	.word	0x00001388

08011874 <HAL_RCCEx_GetPLLClockFreq>:
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011874:	2303      	movs	r3, #3
{
 8011876:	b5e0      	push	{r5, r6, r7, lr}
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011878:	4d29      	ldr	r5, [pc, #164]	@ (8011920 <HAL_RCCEx_GetPLLClockFreq+0xac>)
{
 801187a:	0006      	movs	r6, r0
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801187c:	68ef      	ldr	r7, [r5, #12]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801187e:	68ea      	ldr	r2, [r5, #12]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011880:	68e9      	ldr	r1, [r5, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011882:	6828      	ldr	r0, [r5, #0]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011884:	0649      	lsls	r1, r1, #25
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011886:	047f      	lsls	r7, r7, #17
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011888:	0f49      	lsrs	r1, r1, #29
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801188a:	401a      	ands	r2, r3
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801188c:	0e7f      	lsrs	r7, r7, #25
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 801188e:	3101      	adds	r1, #1
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011890:	330c      	adds	r3, #12
 8011892:	0700      	lsls	r0, r0, #28
 8011894:	d508      	bpl.n	80118a8 <HAL_RCCEx_GetPLLClockFreq+0x34>
 8011896:	6828      	ldr	r0, [r5, #0]
 8011898:	0900      	lsrs	r0, r0, #4
 801189a:	4003      	ands	r3, r0
  if (msirange > 11U)
  {
    msirange = 11U;
  }
  switch (pllsource)
 801189c:	2a02      	cmp	r2, #2
 801189e:	d007      	beq.n	80118b0 <HAL_RCCEx_GetPLLClockFreq+0x3c>
 80118a0:	2a03      	cmp	r2, #3
 80118a2:	d136      	bne.n	8011912 <HAL_RCCEx_GetPLLClockFreq+0x9e>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80118a4:	481f      	ldr	r0, [pc, #124]	@ (8011924 <HAL_RCCEx_GetPLLClockFreq+0xb0>)
 80118a6:	e004      	b.n	80118b2 <HAL_RCCEx_GetPLLClockFreq+0x3e>
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80118a8:	481f      	ldr	r0, [pc, #124]	@ (8011928 <HAL_RCCEx_GetPLLClockFreq+0xb4>)
 80118aa:	6800      	ldr	r0, [r0, #0]
 80118ac:	0a00      	lsrs	r0, r0, #8
 80118ae:	e7f4      	b.n	801189a <HAL_RCCEx_GetPLLClockFreq+0x26>
      pllvco = (HSI_VALUE / pllm) * plln;
 80118b0:	481e      	ldr	r0, [pc, #120]	@ (801192c <HAL_RCCEx_GetPLLClockFreq+0xb8>)
      break;

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80118b2:	f7ee fc59 	bl	8000168 <__udivsi3>
      break;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80118b6:	68ea      	ldr	r2, [r5, #12]
 80118b8:	2380      	movs	r3, #128	@ 0x80
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80118ba:	4347      	muls	r7, r0
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80118bc:	0010      	movs	r0, r2
 80118be:	025b      	lsls	r3, r3, #9
 80118c0:	4018      	ands	r0, r3
 80118c2:	421a      	tst	r2, r3
 80118c4:	d006      	beq.n	80118d4 <HAL_RCCEx_GetPLLClockFreq+0x60>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80118c6:	68e9      	ldr	r1, [r5, #12]
 80118c8:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80118ca:	0289      	lsls	r1, r1, #10
 80118cc:	0ec9      	lsrs	r1, r1, #27
 80118ce:	3101      	adds	r1, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80118d0:	f7ee fc4a 	bl	8000168 <__udivsi3>
 80118d4:	6030      	str	r0, [r6, #0]
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80118d6:	68ea      	ldr	r2, [r5, #12]
 80118d8:	2380      	movs	r3, #128	@ 0x80
 80118da:	0010      	movs	r0, r2
 80118dc:	045b      	lsls	r3, r3, #17
 80118de:	4018      	ands	r0, r3
 80118e0:	421a      	tst	r2, r3
 80118e2:	d006      	beq.n	80118f2 <HAL_RCCEx_GetPLLClockFreq+0x7e>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80118e4:	68e9      	ldr	r1, [r5, #12]
 80118e6:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80118e8:	0109      	lsls	r1, r1, #4
 80118ea:	0f49      	lsrs	r1, r1, #29
 80118ec:	3101      	adds	r1, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80118ee:	f7ee fc3b 	bl	8000168 <__udivsi3>
 80118f2:	6070      	str	r0, [r6, #4]
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80118f4:	68ea      	ldr	r2, [r5, #12]
 80118f6:	2380      	movs	r3, #128	@ 0x80
 80118f8:	0010      	movs	r0, r2
 80118fa:	055b      	lsls	r3, r3, #21
 80118fc:	4018      	ands	r0, r3
 80118fe:	421a      	tst	r2, r3
 8011900:	d005      	beq.n	801190e <HAL_RCCEx_GetPLLClockFreq+0x9a>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8011902:	68e9      	ldr	r1, [r5, #12]
 8011904:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8011906:	0f49      	lsrs	r1, r1, #29
 8011908:	3101      	adds	r1, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 801190a:	f7ee fc2d 	bl	8000168 <__udivsi3>
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 801190e:	60b0      	str	r0, [r6, #8]
 8011910:	bde0      	pop	{r5, r6, r7, pc}
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8011912:	4a07      	ldr	r2, [pc, #28]	@ (8011930 <HAL_RCCEx_GetPLLClockFreq+0xbc>)
  if (msirange > 11U)
 8011914:	2b0b      	cmp	r3, #11
 8011916:	d900      	bls.n	801191a <HAL_RCCEx_GetPLLClockFreq+0xa6>
 8011918:	230b      	movs	r3, #11
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	5898      	ldr	r0, [r3, r2]
 801191e:	e7c8      	b.n	80118b2 <HAL_RCCEx_GetPLLClockFreq+0x3e>
 8011920:	40021000 	.word	0x40021000
 8011924:	003d0900 	.word	0x003d0900
 8011928:	40021094 	.word	0x40021094
 801192c:	00f42400 	.word	0x00f42400
 8011930:	08020648 	.word	0x08020648

08011934 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8011934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8011936:	2380      	movs	r3, #128	@ 0x80
 8011938:	021b      	lsls	r3, r3, #8
 801193a:	4298      	cmp	r0, r3
 801193c:	d11d      	bne.n	801197a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801193e:	21c0      	movs	r1, #192	@ 0xc0
    switch (srcclk)
 8011940:	2080      	movs	r0, #128	@ 0x80
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8011942:	4a9d      	ldr	r2, [pc, #628]	@ (8011bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8011944:	0089      	lsls	r1, r1, #2
 8011946:	6813      	ldr	r3, [r2, #0]
    switch (srcclk)
 8011948:	0080      	lsls	r0, r0, #2
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801194a:	400b      	ands	r3, r1
    switch (srcclk)
 801194c:	4283      	cmp	r3, r0
 801194e:	d100      	bne.n	8011952 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8011950:	e0fc      	b.n	8011b4c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8011952:	428b      	cmp	r3, r1
 8011954:	d00a      	beq.n	801196c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8011956:	2180      	movs	r1, #128	@ 0x80
 8011958:	2000      	movs	r0, #0
 801195a:	0049      	lsls	r1, r1, #1
 801195c:	428b      	cmp	r3, r1
 801195e:	d000      	beq.n	8011962 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8011960:	e07d      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011962:	6810      	ldr	r0, [r2, #0]
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011964:	0780      	lsls	r0, r0, #30
 8011966:	0fc0      	lsrs	r0, r0, #31
 8011968:	03c0      	lsls	r0, r0, #15
 801196a:	e078      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801196c:	4b93      	ldr	r3, [pc, #588]	@ (8011bbc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801196e:	6818      	ldr	r0, [r3, #0]
 8011970:	4b93      	ldr	r3, [pc, #588]	@ (8011bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8011972:	0380      	lsls	r0, r0, #14
 8011974:	17c0      	asrs	r0, r0, #31
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011976:	4018      	ands	r0, r3
 8011978:	e071      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    switch (PeriphClk)
 801197a:	2380      	movs	r3, #128	@ 0x80
 801197c:	005b      	lsls	r3, r3, #1
 801197e:	4298      	cmp	r0, r3
 8011980:	d100      	bne.n	8011984 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8011982:	e0f2      	b.n	8011b6a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8011984:	d819      	bhi.n	80119ba <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8011986:	2810      	cmp	r0, #16
 8011988:	d100      	bne.n	801198c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 801198a:	e080      	b.n	8011a8e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 801198c:	d80a      	bhi.n	80119a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
 801198e:	1e43      	subs	r3, r0, #1
 8011990:	2000      	movs	r0, #0
 8011992:	2b07      	cmp	r3, #7
 8011994:	d863      	bhi.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011996:	0018      	movs	r0, r3
 8011998:	f7ee fbc8 	bl	800012c <__gnu_thumb1_case_uqi>
 801199c:	8e0d6955 	.word	0x8e0d6955
 80119a0:	860d0d0d 	.word	0x860d0d0d
 80119a4:	2840      	cmp	r0, #64	@ 0x40
 80119a6:	d100      	bne.n	80119aa <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80119a8:	e0b6      	b.n	8011b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 80119aa:	2880      	cmp	r0, #128	@ 0x80
 80119ac:	d100      	bne.n	80119b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80119ae:	e0c0      	b.n	8011b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 80119b0:	2820      	cmp	r0, #32
 80119b2:	d100      	bne.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 80119b4:	e09f      	b.n	8011af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80119b6:	2000      	movs	r0, #0
 80119b8:	e051      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80119ba:	2380      	movs	r3, #128	@ 0x80
 80119bc:	015b      	lsls	r3, r3, #5
 80119be:	4298      	cmp	r0, r3
 80119c0:	d100      	bne.n	80119c4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80119c2:	e10b      	b.n	8011bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 80119c4:	d81a      	bhi.n	80119fc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80119c6:	2180      	movs	r1, #128	@ 0x80
 80119c8:	00c9      	lsls	r1, r1, #3
 80119ca:	4288      	cmp	r0, r1
 80119cc:	d100      	bne.n	80119d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80119ce:	e0db      	b.n	8011b88 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80119d0:	2380      	movs	r3, #128	@ 0x80
 80119d2:	011b      	lsls	r3, r3, #4
 80119d4:	4298      	cmp	r0, r3
 80119d6:	d100      	bne.n	80119da <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80119d8:	e0e5      	b.n	8011ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80119da:	2380      	movs	r3, #128	@ 0x80
 80119dc:	009b      	lsls	r3, r3, #2
 80119de:	4298      	cmp	r0, r3
 80119e0:	d1e9      	bne.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80119e2:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 80119e4:	2080      	movs	r0, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80119e6:	4b77      	ldr	r3, [pc, #476]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80119e8:	0412      	lsls	r2, r2, #16
 80119ea:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 80119ec:	0400      	lsls	r0, r0, #16
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80119ee:	4013      	ands	r3, r2
        switch (srcclk)
 80119f0:	4283      	cmp	r3, r0
 80119f2:	d100      	bne.n	80119f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 80119f4:	e0c1      	b.n	8011b7a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80119f6:	d800      	bhi.n	80119fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80119f8:	e0a5      	b.n	8011b46 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 80119fa:	e052      	b.n	8011aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    switch (PeriphClk)
 80119fc:	2380      	movs	r3, #128	@ 0x80
 80119fe:	01db      	lsls	r3, r3, #7
 8011a00:	4298      	cmp	r0, r3
 8011a02:	d063      	beq.n	8011acc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8011a04:	d817      	bhi.n	8011a36 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 8011a06:	2380      	movs	r3, #128	@ 0x80
 8011a08:	019b      	lsls	r3, r3, #6
 8011a0a:	4298      	cmp	r0, r3
 8011a0c:	d1d3      	bne.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8011a0e:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011a10:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8011a12:	4b6c      	ldr	r3, [pc, #432]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011a14:	0512      	lsls	r2, r2, #20
 8011a16:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011a18:	0509      	lsls	r1, r1, #20
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8011a1a:	4013      	ands	r3, r2
        switch (srcclk)
 8011a1c:	428b      	cmp	r3, r1
 8011a1e:	d100      	bne.n	8011a22 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8011a20:	e0c5      	b.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d100      	bne.n	8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8011a26:	e101      	b.n	8011c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 8011a28:	2280      	movs	r2, #128	@ 0x80
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	04d2      	lsls	r2, r2, #19
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d115      	bne.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8011a32:	4a62      	ldr	r2, [pc, #392]	@ (8011bbc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011a34:	e0e4      	b.n	8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
    switch (PeriphClk)
 8011a36:	4b64      	ldr	r3, [pc, #400]	@ (8011bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011a38:	18c0      	adds	r0, r0, r3
 8011a3a:	4b64      	ldr	r3, [pc, #400]	@ (8011bcc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011a3c:	4218      	tst	r0, r3
 8011a3e:	d1ba      	bne.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
              frequency = HAL_RCC_GetPCLK1Freq();
 8011a40:	f7ff fdc6 	bl	80115d0 <HAL_RCC_GetPCLK1Freq>
 8011a44:	e00b      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8011a46:	2203      	movs	r2, #3
 8011a48:	4b5e      	ldr	r3, [pc, #376]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	4013      	ands	r3, r2
        switch (srcclk)
 8011a4e:	2b02      	cmp	r3, #2
 8011a50:	d007      	beq.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d018      	beq.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	d1f2      	bne.n	8011a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
            frequency = HAL_RCC_GetSysClockFreq();
 8011a5a:	f7ff fa2f 	bl	8010ebc <HAL_RCC_GetSysClockFreq>
}
 8011a5e:	b005      	add	sp, #20
 8011a60:	bd00      	pop	{pc}
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011a62:	4b56      	ldr	r3, [pc, #344]	@ (8011bbc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011a64:	6818      	ldr	r0, [r3, #0]
 8011a66:	0540      	lsls	r0, r0, #21
 8011a68:	17c0      	asrs	r0, r0, #31
 8011a6a:	4b59      	ldr	r3, [pc, #356]	@ (8011bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011a6c:	e783      	b.n	8011976 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8011a6e:	220c      	movs	r2, #12
 8011a70:	4b54      	ldr	r3, [pc, #336]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4013      	ands	r3, r2
        switch (srcclk)
 8011a76:	2b08      	cmp	r3, #8
 8011a78:	d0f3      	beq.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011a7a:	d802      	bhi.n	8011a82 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        switch (srcclk)
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d1ec      	bne.n	8011a5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8011a80:	e7de      	b.n	8011a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        switch (srcclk)
 8011a82:	2b0c      	cmp	r3, #12
 8011a84:	d000      	beq.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011a86:	e796      	b.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011a88:	4b4b      	ldr	r3, [pc, #300]	@ (8011bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8011a8a:	6818      	ldr	r0, [r3, #0]
 8011a8c:	e76a      	b.n	8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8011a8e:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011a90:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8011a92:	4b4c      	ldr	r3, [pc, #304]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011a94:	0112      	lsls	r2, r2, #4
 8011a96:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011a98:	0109      	lsls	r1, r1, #4
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8011a9a:	4013      	ands	r3, r2
        switch (srcclk)
 8011a9c:	428b      	cmp	r3, r1
 8011a9e:	d0e0      	beq.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011aa0:	d9ec      	bls.n	8011a7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
        switch (srcclk)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d0f0      	beq.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011aa6:	e786      	b.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8011aa8:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011aaa:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8011aac:	4b45      	ldr	r3, [pc, #276]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011aae:	0092      	lsls	r2, r2, #2
 8011ab0:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011ab2:	0089      	lsls	r1, r1, #2
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8011ab4:	4013      	ands	r3, r2
        switch (srcclk)
 8011ab6:	e7f1      	b.n	8011a9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8011ab8:	22c0      	movs	r2, #192	@ 0xc0
 8011aba:	4b42      	ldr	r3, [pc, #264]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	4013      	ands	r3, r2
        switch (srcclk)
 8011ac0:	2b80      	cmp	r3, #128	@ 0x80
 8011ac2:	d0ce      	beq.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011ac4:	d9da      	bls.n	8011a7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8011ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8011ac8:	d0de      	beq.n	8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011aca:	e774      	b.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011acc:	22c0      	movs	r2, #192	@ 0xc0
 8011ace:	4b3d      	ldr	r3, [pc, #244]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011ad0:	0592      	lsls	r2, r2, #22
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4013      	ands	r3, r2
        switch (srcclk)
 8011ad6:	2280      	movs	r2, #128	@ 0x80
 8011ad8:	0552      	lsls	r2, r2, #21
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d006      	beq.n	8011aec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8011ade:	2280      	movs	r2, #128	@ 0x80
 8011ae0:	0592      	lsls	r2, r2, #22
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d0bd      	beq.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0b7      	beq.n	8011a5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8011aea:	e764      	b.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8011aec:	a801      	add	r0, sp, #4
 8011aee:	f7ff fec1 	bl	8011874 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8011af2:	9801      	ldr	r0, [sp, #4]
            break;
 8011af4:	e7b3      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8011af6:	22c0      	movs	r2, #192	@ 0xc0
 8011af8:	4b32      	ldr	r3, [pc, #200]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011afa:	0192      	lsls	r2, r2, #6
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	4013      	ands	r3, r2
        switch (srcclk)
 8011b00:	2280      	movs	r2, #128	@ 0x80
 8011b02:	0152      	lsls	r2, r2, #5
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d0a8      	beq.n	8011a5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8011b08:	2280      	movs	r2, #128	@ 0x80
 8011b0a:	0192      	lsls	r2, r2, #6
        switch (srcclk)
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	d0a8      	beq.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d100      	bne.n	8011b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8011b14:	e794      	b.n	8011a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8011b16:	e74e      	b.n	80119b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8011b18:	22c0      	movs	r2, #192	@ 0xc0
 8011b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011b1c:	0292      	lsls	r2, r2, #10
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4013      	ands	r3, r2
        switch (srcclk)
 8011b22:	2280      	movs	r2, #128	@ 0x80
 8011b24:	0252      	lsls	r2, r2, #9
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d100      	bne.n	8011b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8011b2a:	e796      	b.n	8011a5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8011b2c:	2280      	movs	r2, #128	@ 0x80
 8011b2e:	0292      	lsls	r2, r2, #10
 8011b30:	e7ec      	b.n	8011b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8011b32:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011b34:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8011b36:	4b23      	ldr	r3, [pc, #140]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011b38:	0312      	lsls	r2, r2, #12
 8011b3a:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011b3c:	0309      	lsls	r1, r1, #12
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8011b3e:	4013      	ands	r3, r2
        switch (srcclk)
 8011b40:	428b      	cmp	r3, r1
 8011b42:	d08e      	beq.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011b44:	d8ad      	bhi.n	8011aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        switch (srcclk)
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d100      	bne.n	8011b4c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8011b4a:	e779      	b.n	8011a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011b4c:	4b21      	ldr	r3, [pc, #132]	@ (8011bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011b4e:	2000      	movs	r0, #0
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	0792      	lsls	r2, r2, #30
 8011b54:	d400      	bmi.n	8011b58 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8011b56:	e782      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8011b58:	6818      	ldr	r0, [r3, #0]
            frequency = LSI_VALUE;
 8011b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8011bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8011b5c:	0740      	lsls	r0, r0, #29
            frequency = LSI_VALUE;
 8011b5e:	17c0      	asrs	r0, r0, #31
 8011b60:	4018      	ands	r0, r3
 8011b62:	23fa      	movs	r3, #250	@ 0xfa
 8011b64:	01db      	lsls	r3, r3, #7
 8011b66:	18c0      	adds	r0, r0, r3
 8011b68:	e779      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011b6a:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011b6c:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011b6e:	4b15      	ldr	r3, [pc, #84]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011b70:	0392      	lsls	r2, r2, #14
 8011b72:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011b74:	0389      	lsls	r1, r1, #14
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011b76:	4013      	ands	r3, r2
        switch (srcclk)
 8011b78:	e7e2      	b.n	8011b40 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011b7a:	4b10      	ldr	r3, [pc, #64]	@ (8011bbc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011b7c:	6818      	ldr	r0, [r3, #0]
 8011b7e:	4008      	ands	r0, r1
 8011b80:	1e43      	subs	r3, r0, #1
 8011b82:	4198      	sbcs	r0, r3
 8011b84:	4240      	negs	r0, r0
 8011b86:	e770      	b.n	8011a6a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8011b88:	4b0e      	ldr	r3, [pc, #56]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011b8c:	01db      	lsls	r3, r3, #7
 8011b8e:	d40e      	bmi.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8011b90:	4b0a      	ldr	r3, [pc, #40]	@ (8011bbc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011b92:	689a      	ldr	r2, [r3, #8]
 8011b94:	23e0      	movs	r3, #224	@ 0xe0
 8011b96:	01db      	lsls	r3, r3, #7
 8011b98:	421a      	tst	r2, r3
 8011b9a:	d100      	bne.n	8011b9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8011b9c:	e750      	b.n	8011a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8011b9e:	f7ff fd17 	bl	80115d0 <HAL_RCC_GetPCLK1Freq>
 8011ba2:	0040      	lsls	r0, r0, #1
 8011ba4:	e75b      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8011ba6:	4b07      	ldr	r3, [pc, #28]	@ (8011bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011baa:	019b      	lsls	r3, r3, #6
 8011bac:	d5f0      	bpl.n	8011b90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8011bae:	a801      	add	r0, sp, #4
 8011bb0:	f7ff fe60 	bl	8011874 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8011bb4:	9802      	ldr	r0, [sp, #8]
            break;
 8011bb6:	e752      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011bb8:	40021090 	.word	0x40021090
 8011bbc:	40021000 	.word	0x40021000
 8011bc0:	0001e848 	.word	0x0001e848
 8011bc4:	40021088 	.word	0x40021088
 8011bc8:	ffff0000 	.word	0xffff0000
 8011bcc:	fffeffff 	.word	0xfffeffff
 8011bd0:	00f42400 	.word	0x00f42400
 8011bd4:	40021094 	.word	0x40021094
 8011bd8:	ffff83fa 	.word	0xffff83fa
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8011bdc:	21c0      	movs	r1, #192	@ 0xc0
        switch (srcclk)
 8011bde:	2080      	movs	r0, #128	@ 0x80
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8011be0:	4b13      	ldr	r3, [pc, #76]	@ (8011c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8011be2:	0509      	lsls	r1, r1, #20
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4a13      	ldr	r2, [pc, #76]	@ (8011c34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8011be8:	400b      	ands	r3, r1
        switch (srcclk)
 8011bea:	0500      	lsls	r0, r0, #20
 8011bec:	4283      	cmp	r3, r0
 8011bee:	d0de      	beq.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8011bf0:	428b      	cmp	r3, r1
 8011bf2:	d01b      	beq.n	8011c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 8011bf4:	2180      	movs	r1, #128	@ 0x80
 8011bf6:	2000      	movs	r0, #0
 8011bf8:	04c9      	lsls	r1, r1, #19
 8011bfa:	428b      	cmp	r3, r1
 8011bfc:	d000      	beq.n	8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8011bfe:	e72e      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8011c00:	6813      	ldr	r3, [r2, #0]
 8011c02:	079b      	lsls	r3, r3, #30
 8011c04:	d400      	bmi.n	8011c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8011c06:	e72a      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011c08:	6811      	ldr	r1, [r2, #0]
 8011c0a:	230f      	movs	r3, #15
 8011c0c:	0709      	lsls	r1, r1, #28
 8011c0e:	d509      	bpl.n	8011c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8011c10:	6812      	ldr	r2, [r2, #0]
 8011c12:	0912      	lsrs	r2, r2, #4
 8011c14:	4013      	ands	r3, r2
              frequency = MSIRangeTable[msirange];
 8011c16:	4a08      	ldr	r2, [pc, #32]	@ (8011c38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
              if (msirange > 11U)
 8011c18:	2b0b      	cmp	r3, #11
 8011c1a:	d900      	bls.n	8011c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8011c1c:	230b      	movs	r3, #11
              frequency = MSIRangeTable[msirange];
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	5898      	ldr	r0, [r3, r2]
 8011c22:	e71c      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011c24:	4a05      	ldr	r2, [pc, #20]	@ (8011c3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8011c26:	6812      	ldr	r2, [r2, #0]
 8011c28:	0a12      	lsrs	r2, r2, #8
 8011c2a:	e7f3      	b.n	8011c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
            frequency = HSI48_VALUE;
 8011c2c:	4804      	ldr	r0, [pc, #16]	@ (8011c40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8011c2e:	e716      	b.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011c30:	40021088 	.word	0x40021088
 8011c34:	40021000 	.word	0x40021000
 8011c38:	08020648 	.word	0x08020648
 8011c3c:	40021094 	.word	0x40021094
 8011c40:	02dc6c00 	.word	0x02dc6c00

08011c44 <HAL_RCCEx_CRSConfig>:
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8011c44:	2280      	movs	r2, #128	@ 0x80
 8011c46:	4b10      	ldr	r3, [pc, #64]	@ (8011c88 <HAL_RCCEx_CRSConfig+0x44>)
 8011c48:	0252      	lsls	r2, r2, #9
 8011c4a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011c4c:	430a      	orrs	r2, r1
 8011c4e:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8011c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c52:	490e      	ldr	r1, [pc, #56]	@ (8011c8c <HAL_RCCEx_CRSConfig+0x48>)
 8011c54:	400a      	ands	r2, r1
 8011c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8011c58:	6842      	ldr	r2, [r0, #4]
 8011c5a:	6803      	ldr	r3, [r0, #0]
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	6882      	ldr	r2, [r0, #8]
 8011c60:	4313      	orrs	r3, r2
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8011c62:	68c2      	ldr	r2, [r0, #12]
 8011c64:	4313      	orrs	r3, r2
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8011c66:	6902      	ldr	r2, [r0, #16]
 8011c68:	0412      	lsls	r2, r2, #16
 8011c6a:	431a      	orrs	r2, r3
  WRITE_REG(CRS->CFGR, value);
 8011c6c:	4b08      	ldr	r3, [pc, #32]	@ (8011c90 <HAL_RCCEx_CRSConfig+0x4c>)
 8011c6e:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8011c70:	6819      	ldr	r1, [r3, #0]
 8011c72:	6942      	ldr	r2, [r0, #20]
 8011c74:	4807      	ldr	r0, [pc, #28]	@ (8011c94 <HAL_RCCEx_CRSConfig+0x50>)
 8011c76:	0212      	lsls	r2, r2, #8
 8011c78:	4001      	ands	r1, r0
 8011c7a:	430a      	orrs	r2, r1
 8011c7c:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8011c7e:	2260      	movs	r2, #96	@ 0x60
 8011c80:	6819      	ldr	r1, [r3, #0]
 8011c82:	430a      	orrs	r2, r1
 8011c84:	601a      	str	r2, [r3, #0]
}
 8011c86:	4770      	bx	lr
 8011c88:	40021000 	.word	0x40021000
 8011c8c:	fffeffff 	.word	0xfffeffff
 8011c90:	40006c00 	.word	0x40006c00
 8011c94:	ffffc0ff 	.word	0xffffc0ff

08011c98 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8011c98:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011c9a:	0004      	movs	r4, r0
 8011c9c:	2202      	movs	r2, #2
 8011c9e:	342c      	adds	r4, #44	@ 0x2c
 8011ca0:	7825      	ldrb	r5, [r4, #0]
{
 8011ca2:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8011ca4:	0010      	movs	r0, r2
 8011ca6:	2d01      	cmp	r5, #1
 8011ca8:	d014      	beq.n	8011cd4 <HAL_RTC_DeactivateAlarm+0x3c>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011caa:	332d      	adds	r3, #45	@ 0x2d
  __HAL_LOCK(hrtc);
 8011cac:	3801      	subs	r0, #1
 8011cae:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011cb0:	701a      	strb	r2, [r3, #0]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 8011cb2:	32fe      	adds	r2, #254	@ 0xfe
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011cb4:	0018      	movs	r0, r3
 8011cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ce8 <HAL_RTC_DeactivateAlarm+0x50>)
  if (Alarm == RTC_ALARM_A)
 8011cb8:	4291      	cmp	r1, r2
 8011cba:	d10c      	bne.n	8011cd6 <HAL_RTC_DeactivateAlarm+0x3e>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8011cbc:	699a      	ldr	r2, [r3, #24]
 8011cbe:	490b      	ldr	r1, [pc, #44]	@ (8011cec <HAL_RTC_DeactivateAlarm+0x54>)
 8011cc0:	400a      	ands	r2, r1
 8011cc2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8011cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011cc6:	0052      	lsls	r2, r2, #1
 8011cc8:	0852      	lsrs	r2, r2, #1
 8011cca:	645a      	str	r2, [r3, #68]	@ 0x44
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
  }

  hrtc->State = HAL_RTC_STATE_READY;
 8011ccc:	2301      	movs	r3, #1
 8011cce:	7003      	strb	r3, [r0, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8011cd4:	bd30      	pop	{r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011cd6:	699a      	ldr	r2, [r3, #24]
 8011cd8:	4905      	ldr	r1, [pc, #20]	@ (8011cf0 <HAL_RTC_DeactivateAlarm+0x58>)
 8011cda:	400a      	ands	r2, r1
 8011cdc:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8011cde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011ce0:	0052      	lsls	r2, r2, #1
 8011ce2:	0852      	lsrs	r2, r2, #1
 8011ce4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011ce6:	e7f1      	b.n	8011ccc <HAL_RTC_DeactivateAlarm+0x34>
 8011ce8:	40002800 	.word	0x40002800
 8011cec:	ffffeeff 	.word	0xffffeeff
 8011cf0:	ffffddff 	.word	0xffffddff

08011cf4 <HAL_RTC_AlarmIRQHandler>:
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8011cf4:	2301      	movs	r3, #1
{
 8011cf6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = READ_REG(RTC->MISR);
 8011cf8:	4d09      	ldr	r5, [pc, #36]	@ (8011d20 <HAL_RTC_AlarmIRQHandler+0x2c>)
{
 8011cfa:	0004      	movs	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR);
 8011cfc:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8011cfe:	421e      	tst	r6, r3
 8011d00:	d002      	beq.n	8011d08 <HAL_RTC_AlarmIRQHandler+0x14>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8011d02:	65eb      	str	r3, [r5, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8011d04:	f7f6 fd54 	bl	80087b0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8011d08:	2302      	movs	r3, #2
 8011d0a:	421e      	tst	r6, r3
 8011d0c:	d003      	beq.n	8011d16 <HAL_RTC_AlarmIRQHandler+0x22>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8011d0e:	0020      	movs	r0, r4
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8011d10:	65eb      	str	r3, [r5, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8011d12:	f000 fae1 	bl	80122d8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011d16:	2301      	movs	r3, #1
 8011d18:	342d      	adds	r4, #45	@ 0x2d
 8011d1a:	7023      	strb	r3, [r4, #0]
}
 8011d1c:	bd70      	pop	{r4, r5, r6, pc}
 8011d1e:	46c0      	nop			@ (mov r8, r8)
 8011d20:	40002800 	.word	0x40002800

08011d24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8011d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011d26:	2620      	movs	r6, #32
 8011d28:	4c0a      	ldr	r4, [pc, #40]	@ (8011d54 <HAL_RTC_WaitForSynchro+0x30>)
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011d2a:	27fa      	movs	r7, #250	@ 0xfa
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011d2c:	68e3      	ldr	r3, [r4, #12]
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011d2e:	00bf      	lsls	r7, r7, #2
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011d30:	43b3      	bics	r3, r6
 8011d32:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick();
 8011d34:	f7fc fb8a 	bl	800e44c <HAL_GetTick>
 8011d38:	0005      	movs	r5, r0
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011d3a:	68e3      	ldr	r3, [r4, #12]
 8011d3c:	4233      	tst	r3, r6
 8011d3e:	d001      	beq.n	8011d44 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8011d40:	2000      	movs	r0, #0
}
 8011d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011d44:	f7fc fb82 	bl	800e44c <HAL_GetTick>
 8011d48:	1b40      	subs	r0, r0, r5
 8011d4a:	42b8      	cmp	r0, r7
 8011d4c:	d9f5      	bls.n	8011d3a <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8011d4e:	2003      	movs	r0, #3
 8011d50:	e7f7      	b.n	8011d42 <HAL_RTC_WaitForSynchro+0x1e>
 8011d52:	46c0      	nop			@ (mov r8, r8)
 8011d54:	40002800 	.word	0x40002800

08011d58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8011d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011d5a:	2640      	movs	r6, #64	@ 0x40
 8011d5c:	4c0c      	ldr	r4, [pc, #48]	@ (8011d90 <RTC_EnterInitMode+0x38>)
 8011d5e:	68e3      	ldr	r3, [r4, #12]
 8011d60:	4233      	tst	r3, r6
 8011d62:	d001      	beq.n	8011d68 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8011d64:	2000      	movs	r0, #0
}
 8011d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011d68:	2380      	movs	r3, #128	@ 0x80
 8011d6a:	68e2      	ldr	r2, [r4, #12]
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011d6c:	27fa      	movs	r7, #250	@ 0xfa
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011d6e:	4313      	orrs	r3, r2
 8011d70:	60e3      	str	r3, [r4, #12]
    tickstart = HAL_GetTick();
 8011d72:	f7fc fb6b 	bl	800e44c <HAL_GetTick>
 8011d76:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011d78:	00bf      	lsls	r7, r7, #2
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011d7a:	68e3      	ldr	r3, [r4, #12]
 8011d7c:	4233      	tst	r3, r6
 8011d7e:	d1f1      	bne.n	8011d64 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011d80:	f7fc fb64 	bl	800e44c <HAL_GetTick>
 8011d84:	1b40      	subs	r0, r0, r5
 8011d86:	42b8      	cmp	r0, r7
 8011d88:	d9f7      	bls.n	8011d7a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011d8a:	2003      	movs	r0, #3
 8011d8c:	e7eb      	b.n	8011d66 <RTC_EnterInitMode+0xe>
 8011d8e:	46c0      	nop			@ (mov r8, r8)
 8011d90:	40002800 	.word	0x40002800

08011d94 <HAL_RTC_Init>:
{
 8011d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d96:	1e04      	subs	r4, r0, #0
  if (hrtc != NULL)
 8011d98:	d01a      	beq.n	8011dd0 <HAL_RTC_Init+0x3c>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011d9a:	0007      	movs	r7, r0
 8011d9c:	372d      	adds	r7, #45	@ 0x2d
 8011d9e:	783b      	ldrb	r3, [r7, #0]
 8011da0:	b2da      	uxtb	r2, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d104      	bne.n	8011db0 <HAL_RTC_Init+0x1c>
      hrtc->Lock = HAL_UNLOCKED;
 8011da6:	0003      	movs	r3, r0
 8011da8:	332c      	adds	r3, #44	@ 0x2c
 8011daa:	701a      	strb	r2, [r3, #0]
      HAL_RTC_MspInit(hrtc);
 8011dac:	f7f8 fc9c 	bl	800a6e8 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011db0:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011db2:	4d23      	ldr	r5, [pc, #140]	@ (8011e40 <HAL_RTC_Init+0xac>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011db4:	703b      	strb	r3, [r7, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011db6:	33c8      	adds	r3, #200	@ 0xc8
 8011db8:	626b      	str	r3, [r5, #36]	@ 0x24
 8011dba:	3b77      	subs	r3, #119	@ 0x77
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011dbc:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011dbe:	626b      	str	r3, [r5, #36]	@ 0x24
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011dc0:	f7ff ffca 	bl	8011d58 <RTC_EnterInitMode>
 8011dc4:	1e06      	subs	r6, r0, #0
 8011dc6:	d006      	beq.n	8011dd6 <HAL_RTC_Init+0x42>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011dc8:	23ff      	movs	r3, #255	@ 0xff
 8011dca:	626b      	str	r3, [r5, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 8011dcc:	3bfb      	subs	r3, #251	@ 0xfb
 8011dce:	703b      	strb	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011dd0:	2601      	movs	r6, #1
}
 8011dd2:	0030      	movs	r0, r6
 8011dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8011dd6:	69ab      	ldr	r3, [r5, #24]
 8011dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8011e44 <HAL_RTC_Init+0xb0>)
 8011dda:	4013      	ands	r3, r2
 8011ddc:	61ab      	str	r3, [r5, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8011dde:	6921      	ldr	r1, [r4, #16]
 8011de0:	6863      	ldr	r3, [r4, #4]
 8011de2:	69aa      	ldr	r2, [r5, #24]
 8011de4:	430b      	orrs	r3, r1
 8011de6:	4313      	orrs	r3, r2
 8011de8:	69a2      	ldr	r2, [r4, #24]
 8011dea:	4313      	orrs	r3, r2
 8011dec:	61ab      	str	r3, [r5, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	68e2      	ldr	r2, [r4, #12]
 8011df2:	041b      	lsls	r3, r3, #16
 8011df4:	4313      	orrs	r3, r2
 8011df6:	612b      	str	r3, [r5, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8011df8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011dfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011dfc:	68ea      	ldr	r2, [r5, #12]
 8011dfe:	430b      	orrs	r3, r1
 8011e00:	4911      	ldr	r1, [pc, #68]	@ (8011e48 <HAL_RTC_Init+0xb4>)
 8011e02:	400a      	ands	r2, r1
 8011e04:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011e06:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8011e08:	60eb      	str	r3, [r5, #12]
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011e0a:	68eb      	ldr	r3, [r5, #12]
 8011e0c:	4393      	bics	r3, r2
 8011e0e:	60eb      	str	r3, [r5, #12]
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011e10:	69ab      	ldr	r3, [r5, #24]
 8011e12:	069b      	lsls	r3, r3, #26
 8011e14:	d404      	bmi.n	8011e20 <HAL_RTC_Init+0x8c>
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e16:	0020      	movs	r0, r4
 8011e18:	f7ff ff84 	bl	8011d24 <HAL_RTC_WaitForSynchro>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	d1d3      	bne.n	8011dc8 <HAL_RTC_Init+0x34>
        MODIFY_REG(RTC->CR, \
 8011e20:	69aa      	ldr	r2, [r5, #24]
 8011e22:	6a23      	ldr	r3, [r4, #32]
 8011e24:	69e1      	ldr	r1, [r4, #28]
 8011e26:	00d2      	lsls	r2, r2, #3
 8011e28:	08d2      	lsrs	r2, r2, #3
 8011e2a:	430b      	orrs	r3, r1
 8011e2c:	4313      	orrs	r3, r2
 8011e2e:	6962      	ldr	r2, [r4, #20]
 8011e30:	4313      	orrs	r3, r2
 8011e32:	61ab      	str	r3, [r5, #24]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011e34:	23ff      	movs	r3, #255	@ 0xff
 8011e36:	626b      	str	r3, [r5, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8011e38:	3bfe      	subs	r3, #254	@ 0xfe
 8011e3a:	703b      	strb	r3, [r7, #0]
 8011e3c:	e7c9      	b.n	8011dd2 <HAL_RTC_Init+0x3e>
 8011e3e:	46c0      	nop			@ (mov r8, r8)
 8011e40:	40002800 	.word	0x40002800
 8011e44:	fb8fffbf 	.word	0xfb8fffbf
 8011e48:	ffffe0ff 	.word	0xffffe0ff

08011e4c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8011e4c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8011e4e:	2809      	cmp	r0, #9
 8011e50:	d803      	bhi.n	8011e5a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    tmp_Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8011e52:	011b      	lsls	r3, r3, #4
 8011e54:	4318      	orrs	r0, r3
 8011e56:	b2c0      	uxtb	r0, r0
}
 8011e58:	4770      	bx	lr
    tmp_Value -= 10U;
 8011e5a:	380a      	subs	r0, #10
    bcdhigh++;
 8011e5c:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8011e5e:	b2c0      	uxtb	r0, r0
 8011e60:	e7f5      	b.n	8011e4e <RTC_ByteToBcd2+0x2>
	...

08011e64 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8011e64:	0003      	movs	r3, r0
{
 8011e66:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011e68:	332c      	adds	r3, #44	@ 0x2c
{
 8011e6a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8011e6c:	9300      	str	r3, [sp, #0]
{
 8011e6e:	9001      	str	r0, [sp, #4]
 8011e70:	0017      	movs	r7, r2
  __HAL_LOCK(hrtc);
 8011e72:	781a      	ldrb	r2, [r3, #0]
 8011e74:	2302      	movs	r3, #2
{
 8011e76:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011e78:	001e      	movs	r6, r3
 8011e7a:	2a01      	cmp	r2, #1
 8011e7c:	d019      	beq.n	8011eb2 <HAL_RTC_SetTime+0x4e>
 8011e7e:	2201      	movs	r2, #1
 8011e80:	9900      	ldr	r1, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e82:	4c3c      	ldr	r4, [pc, #240]	@ (8011f74 <HAL_RTC_SetTime+0x110>)
  __HAL_LOCK(hrtc);
 8011e84:	700a      	strb	r2, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011e86:	0002      	movs	r2, r0
 8011e88:	322d      	adds	r2, #45	@ 0x2d
 8011e8a:	7013      	strb	r3, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e8c:	33c8      	adds	r3, #200	@ 0xc8
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011e8e:	9202      	str	r2, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8011e92:	3b77      	subs	r3, #119	@ 0x77
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011e94:	9801      	ldr	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e96:	6263      	str	r3, [r4, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011e98:	f7ff ff5e 	bl	8011d58 <RTC_EnterInitMode>
 8011e9c:	1e06      	subs	r6, r0, #0
 8011e9e:	d00b      	beq.n	8011eb8 <HAL_RTC_SetTime+0x54>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011ea0:	23ff      	movs	r3, #255	@ 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ea2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011ea4:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ea6:	3bfb      	subs	r3, #251	@ 0xfb
 8011ea8:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hrtc);
 8011eaa:	2300      	movs	r3, #0
 8011eac:	9a00      	ldr	r2, [sp, #0]
 8011eae:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8011eb0:	2601      	movs	r6, #1
}
 8011eb2:	0030      	movs	r0, r6
 8011eb4:	b005      	add	sp, #20
 8011eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011eb8:	22c0      	movs	r2, #192	@ 0xc0
 8011eba:	68e3      	ldr	r3, [r4, #12]
 8011ebc:	0092      	lsls	r2, r2, #2
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	2280      	movs	r2, #128	@ 0x80
 8011ec2:	0052      	lsls	r2, r2, #1
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d028      	beq.n	8011f1a <HAL_RTC_SetTime+0xb6>
      if (Format == RTC_FORMAT_BIN)
 8011ec8:	786a      	ldrb	r2, [r5, #1]
 8011eca:	2340      	movs	r3, #64	@ 0x40
 8011ecc:	9203      	str	r2, [sp, #12]
 8011ece:	7828      	ldrb	r0, [r5, #0]
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011ed0:	69a2      	ldr	r2, [r4, #24]
      if (Format == RTC_FORMAT_BIN)
 8011ed2:	2f00      	cmp	r7, #0
 8011ed4:	d138      	bne.n	8011f48 <HAL_RTC_SetTime+0xe4>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011ed6:	421a      	tst	r2, r3
 8011ed8:	d100      	bne.n	8011edc <HAL_RTC_SetTime+0x78>
          sTime->TimeFormat = 0x00U;
 8011eda:	70ee      	strb	r6, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011edc:	f7ff ffb6 	bl	8011e4c <RTC_ByteToBcd2>
 8011ee0:	0007      	movs	r7, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011ee2:	9803      	ldr	r0, [sp, #12]
 8011ee4:	f7ff ffb2 	bl	8011e4c <RTC_ByteToBcd2>
 8011ee8:	9003      	str	r0, [sp, #12]
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011eea:	78a8      	ldrb	r0, [r5, #2]
 8011eec:	f7ff ffae 	bl	8011e4c <RTC_ByteToBcd2>
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011ef0:	78ea      	ldrb	r2, [r5, #3]
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011ef2:	9b03      	ldr	r3, [sp, #12]
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011ef4:	0592      	lsls	r2, r2, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011ef6:	4310      	orrs	r0, r2
 8011ef8:	043f      	lsls	r7, r7, #16
 8011efa:	4338      	orrs	r0, r7
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011efc:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011efe:	4318      	orrs	r0, r3
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8011f00:	4b1d      	ldr	r3, [pc, #116]	@ (8011f78 <HAL_RTC_SetTime+0x114>)
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8011f02:	4a1e      	ldr	r2, [pc, #120]	@ (8011f7c <HAL_RTC_SetTime+0x118>)
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8011f04:	4018      	ands	r0, r3
 8011f06:	6020      	str	r0, [r4, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8011f08:	69a3      	ldr	r3, [r4, #24]
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	61a3      	str	r3, [r4, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8011f0e:	68eb      	ldr	r3, [r5, #12]
 8011f10:	6929      	ldr	r1, [r5, #16]
 8011f12:	69a2      	ldr	r2, [r4, #24]
 8011f14:	430b      	orrs	r3, r1
 8011f16:	4313      	orrs	r3, r2
 8011f18:	61a3      	str	r3, [r4, #24]
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011f1a:	2280      	movs	r2, #128	@ 0x80
 8011f1c:	68e3      	ldr	r3, [r4, #12]
 8011f1e:	4393      	bics	r3, r2
 8011f20:	60e3      	str	r3, [r4, #12]
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011f22:	69a2      	ldr	r2, [r4, #24]
 8011f24:	2320      	movs	r3, #32
 8011f26:	0015      	movs	r5, r2
 8011f28:	401d      	ands	r5, r3
 8011f2a:	421a      	tst	r2, r3
 8011f2c:	d118      	bne.n	8011f60 <HAL_RTC_SetTime+0xfc>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011f2e:	9801      	ldr	r0, [sp, #4]
 8011f30:	f7ff fef8 	bl	8011d24 <HAL_RTC_WaitForSynchro>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d013      	beq.n	8011f60 <HAL_RTC_SetTime+0xfc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011f38:	23ff      	movs	r3, #255	@ 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011f3a:	9a02      	ldr	r2, [sp, #8]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011f3c:	6263      	str	r3, [r4, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011f3e:	3bfb      	subs	r3, #251	@ 0xfb
 8011f40:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hrtc);
 8011f42:	9b00      	ldr	r3, [sp, #0]
 8011f44:	701d      	strb	r5, [r3, #0]
        return HAL_ERROR;
 8011f46:	e7b3      	b.n	8011eb0 <HAL_RTC_SetTime+0x4c>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011f48:	421a      	tst	r2, r3
 8011f4a:	d100      	bne.n	8011f4e <HAL_RTC_SetTime+0xea>
          sTime->TimeFormat = 0x00U;
 8011f4c:	70ee      	strb	r6, [r5, #3]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011f4e:	9b03      	ldr	r3, [sp, #12]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011f50:	0400      	lsls	r0, r0, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011f52:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011f54:	4318      	orrs	r0, r3
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011f56:	78ab      	ldrb	r3, [r5, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011f58:	4318      	orrs	r0, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011f5a:	78eb      	ldrb	r3, [r5, #3]
 8011f5c:	059b      	lsls	r3, r3, #22
 8011f5e:	e7ce      	b.n	8011efe <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011f60:	23ff      	movs	r3, #255	@ 0xff
    hrtc->State = HAL_RTC_STATE_READY;
 8011f62:	9a02      	ldr	r2, [sp, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011f64:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011f66:	3bfe      	subs	r3, #254	@ 0xfe
 8011f68:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hrtc);
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	9a00      	ldr	r2, [sp, #0]
 8011f6e:	7013      	strb	r3, [r2, #0]
    return HAL_OK;
 8011f70:	e79f      	b.n	8011eb2 <HAL_RTC_SetTime+0x4e>
 8011f72:	46c0      	nop			@ (mov r8, r8)
 8011f74:	40002800 	.word	0x40002800
 8011f78:	007f7f7f 	.word	0x007f7f7f
 8011f7c:	fffbffff 	.word	0xfffbffff

08011f80 <HAL_RTC_SetDate>:
{
 8011f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011f82:	0007      	movs	r7, r0
 8011f84:	2302      	movs	r3, #2
{
 8011f86:	b085      	sub	sp, #20
 8011f88:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hrtc);
 8011f8a:	372c      	adds	r7, #44	@ 0x2c
{
 8011f8c:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8011f8e:	7839      	ldrb	r1, [r7, #0]
 8011f90:	001d      	movs	r5, r3
 8011f92:	2901      	cmp	r1, #1
 8011f94:	d023      	beq.n	8011fde <HAL_RTC_SetDate+0x5e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f96:	0006      	movs	r6, r0
  __HAL_LOCK(hrtc);
 8011f98:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f9a:	362d      	adds	r6, #45	@ 0x2d
  __HAL_LOCK(hrtc);
 8011f9c:	7039      	strb	r1, [r7, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f9e:	7033      	strb	r3, [r6, #0]
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011fa0:	78a1      	ldrb	r1, [r4, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011fa2:	7825      	ldrb	r5, [r4, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011fa4:	78e0      	ldrb	r0, [r4, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011fa6:	7863      	ldrb	r3, [r4, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011fa8:	036d      	lsls	r5, r5, #13
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011faa:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011fac:	2a00      	cmp	r2, #0
 8011fae:	d019      	beq.n	8011fe4 <HAL_RTC_SetDate+0x64>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011fb0:	0400      	lsls	r0, r0, #16
 8011fb2:	4328      	orrs	r0, r5
 8011fb4:	4308      	orrs	r0, r1
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011fb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011fb8:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011fba:	23ca      	movs	r3, #202	@ 0xca
 8011fbc:	4c25      	ldr	r4, [pc, #148]	@ (8012054 <HAL_RTC_SetDate+0xd4>)
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011fbe:	9002      	str	r0, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011fc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8011fc2:	3b77      	subs	r3, #119	@ 0x77
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011fc4:	9801      	ldr	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011fc6:	6263      	str	r3, [r4, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011fc8:	f7ff fec6 	bl	8011d58 <RTC_EnterInitMode>
 8011fcc:	1e05      	subs	r5, r0, #0
 8011fce:	d020      	beq.n	8012012 <HAL_RTC_SetDate+0x92>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011fd0:	23ff      	movs	r3, #255	@ 0xff
 8011fd2:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011fd4:	3bfb      	subs	r3, #251	@ 0xfb
 8011fd6:	7033      	strb	r3, [r6, #0]
    __HAL_UNLOCK(hrtc);
 8011fd8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011fda:	2501      	movs	r5, #1
        __HAL_UNLOCK(hrtc);
 8011fdc:	703b      	strb	r3, [r7, #0]
}
 8011fde:	0028      	movs	r0, r5
 8011fe0:	b005      	add	sp, #20
 8011fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011fe4:	2210      	movs	r2, #16
 8011fe6:	4213      	tst	r3, r2
 8011fe8:	d002      	beq.n	8011ff0 <HAL_RTC_SetDate+0x70>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011fea:	4393      	bics	r3, r2
 8011fec:	330a      	adds	r3, #10
 8011fee:	7063      	strb	r3, [r4, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011ff0:	f7ff ff2c 	bl	8011e4c <RTC_ByteToBcd2>
 8011ff4:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011ff6:	7860      	ldrb	r0, [r4, #1]
 8011ff8:	f7ff ff28 	bl	8011e4c <RTC_ByteToBcd2>
 8011ffc:	0004      	movs	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8011ffe:	9802      	ldr	r0, [sp, #8]
 8012000:	f7ff ff24 	bl	8011e4c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012004:	9b03      	ldr	r3, [sp, #12]
 8012006:	4328      	orrs	r0, r5
 8012008:	041b      	lsls	r3, r3, #16
 801200a:	4318      	orrs	r0, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801200c:	0224      	lsls	r4, r4, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801200e:	4320      	orrs	r0, r4
 8012010:	e7d3      	b.n	8011fba <HAL_RTC_SetDate+0x3a>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8012012:	9a02      	ldr	r2, [sp, #8]
 8012014:	4b10      	ldr	r3, [pc, #64]	@ (8012058 <HAL_RTC_SetDate+0xd8>)
 8012016:	401a      	ands	r2, r3
 8012018:	6062      	str	r2, [r4, #4]
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801201a:	2280      	movs	r2, #128	@ 0x80
 801201c:	68e3      	ldr	r3, [r4, #12]
 801201e:	4393      	bics	r3, r2
 8012020:	60e3      	str	r3, [r4, #12]
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8012022:	69a2      	ldr	r2, [r4, #24]
 8012024:	2320      	movs	r3, #32
 8012026:	0011      	movs	r1, r2
 8012028:	4019      	ands	r1, r3
 801202a:	9102      	str	r1, [sp, #8]
 801202c:	421a      	tst	r2, r3
 801202e:	d10a      	bne.n	8012046 <HAL_RTC_SetDate+0xc6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012030:	9801      	ldr	r0, [sp, #4]
 8012032:	f7ff fe77 	bl	8011d24 <HAL_RTC_WaitForSynchro>
 8012036:	2800      	cmp	r0, #0
 8012038:	d005      	beq.n	8012046 <HAL_RTC_SetDate+0xc6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801203a:	23ff      	movs	r3, #255	@ 0xff
 801203c:	6263      	str	r3, [r4, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801203e:	3bfb      	subs	r3, #251	@ 0xfb
 8012040:	7033      	strb	r3, [r6, #0]
        __HAL_UNLOCK(hrtc);
 8012042:	9b02      	ldr	r3, [sp, #8]
 8012044:	e7c9      	b.n	8011fda <HAL_RTC_SetDate+0x5a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012046:	23ff      	movs	r3, #255	@ 0xff
 8012048:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801204a:	3bfe      	subs	r3, #254	@ 0xfe
 801204c:	7033      	strb	r3, [r6, #0]
    __HAL_UNLOCK(hrtc);
 801204e:	2300      	movs	r3, #0
 8012050:	703b      	strb	r3, [r7, #0]
    return HAL_OK;
 8012052:	e7c4      	b.n	8011fde <HAL_RTC_SetDate+0x5e>
 8012054:	40002800 	.word	0x40002800
 8012058:	00ffff3f 	.word	0x00ffff3f

0801205c <HAL_RTC_SetAlarm_IT>:
{
 801205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801205e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8012060:	0001      	movs	r1, r0
 8012062:	2302      	movs	r3, #2
 8012064:	312c      	adds	r1, #44	@ 0x2c
 8012066:	780c      	ldrb	r4, [r1, #0]
{
 8012068:	0007      	movs	r7, r0
 801206a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 801206c:	0018      	movs	r0, r3
 801206e:	2c01      	cmp	r4, #1
 8012070:	d060      	beq.n	8012134 <HAL_RTC_SetAlarm_IT+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012072:	704b      	strb	r3, [r1, #1]
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8012074:	23c0      	movs	r3, #192	@ 0xc0
  __HAL_LOCK(hrtc);
 8012076:	3801      	subs	r0, #1
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8012078:	4c4d      	ldr	r4, [pc, #308]	@ (80121b0 <HAL_RTC_SetAlarm_IT+0x154>)
  __HAL_LOCK(hrtc);
 801207a:	7008      	strb	r0, [r1, #0]
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 801207c:	68e1      	ldr	r1, [r4, #12]
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	4019      	ands	r1, r3
  if (binaryMode != RTC_BINARY_ONLY)
 8012082:	2380      	movs	r3, #128	@ 0x80
  uint32_t tmpreg = 0;
 8012084:	2000      	movs	r0, #0
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8012086:	9100      	str	r1, [sp, #0]
  if (binaryMode != RTC_BINARY_ONLY)
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	4299      	cmp	r1, r3
 801208c:	d02a      	beq.n	80120e4 <HAL_RTC_SetAlarm_IT+0x88>
    if (Format == RTC_FORMAT_BIN)
 801208e:	78a9      	ldrb	r1, [r5, #2]
 8012090:	786e      	ldrb	r6, [r5, #1]
 8012092:	7828      	ldrb	r0, [r5, #0]
 8012094:	3bc0      	subs	r3, #192	@ 0xc0
 8012096:	9101      	str	r1, [sp, #4]
 8012098:	2a00      	cmp	r2, #0
 801209a:	d14d      	bne.n	8012138 <HAL_RTC_SetAlarm_IT+0xdc>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 801209c:	69a2      	ldr	r2, [r4, #24]
 801209e:	0011      	movs	r1, r2
 80120a0:	4019      	ands	r1, r3
 80120a2:	421a      	tst	r2, r3
 80120a4:	d100      	bne.n	80120a8 <HAL_RTC_SetAlarm_IT+0x4c>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80120a6:	70e9      	strb	r1, [r5, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80120a8:	f7ff fed0 	bl	8011e4c <RTC_ByteToBcd2>
 80120ac:	9002      	str	r0, [sp, #8]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80120ae:	0030      	movs	r0, r6
 80120b0:	f7ff fecc 	bl	8011e4c <RTC_ByteToBcd2>
 80120b4:	9003      	str	r0, [sp, #12]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80120b6:	9801      	ldr	r0, [sp, #4]
 80120b8:	f7ff fec8 	bl	8011e4c <RTC_ByteToBcd2>
 80120bc:	0006      	movs	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80120be:	1d6b      	adds	r3, r5, #5
 80120c0:	7fd8      	ldrb	r0, [r3, #31]
 80120c2:	f7ff fec3 	bl	8011e4c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80120c6:	696a      	ldr	r2, [r5, #20]
 80120c8:	6a2b      	ldr	r3, [r5, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80120ca:	0600      	lsls	r0, r0, #24
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80120cc:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80120ce:	78ea      	ldrb	r2, [r5, #3]
 80120d0:	0592      	lsls	r2, r2, #22
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80120d2:	4313      	orrs	r3, r2
 80120d4:	9a02      	ldr	r2, [sp, #8]
 80120d6:	4333      	orrs	r3, r6
 80120d8:	0412      	lsls	r2, r2, #16
 80120da:	4313      	orrs	r3, r2
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80120dc:	9a03      	ldr	r2, [sp, #12]
 80120de:	0212      	lsls	r2, r2, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80120e0:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80120e2:	4318      	orrs	r0, r3
  if (sAlarm->Alarm == RTC_ALARM_A)
 80120e4:	2180      	movs	r1, #128	@ 0x80
 80120e6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80120e8:	69ab      	ldr	r3, [r5, #24]
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80120ea:	69a2      	ldr	r2, [r4, #24]
  if (sAlarm->Alarm == RTC_ALARM_A)
 80120ec:	0049      	lsls	r1, r1, #1
 80120ee:	428e      	cmp	r6, r1
 80120f0:	d13e      	bne.n	8012170 <HAL_RTC_SetAlarm_IT+0x114>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80120f2:	4930      	ldr	r1, [pc, #192]	@ (80121b4 <HAL_RTC_SetAlarm_IT+0x158>)
 80120f4:	400a      	ands	r2, r1
 80120f6:	61a2      	str	r2, [r4, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80120f8:	2201      	movs	r2, #1
 80120fa:	65e2      	str	r2, [r4, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80120fc:	9a00      	ldr	r2, [sp, #0]
 80120fe:	42b2      	cmp	r2, r6
 8012100:	d130      	bne.n	8012164 <HAL_RTC_SetAlarm_IT+0x108>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8012102:	69ea      	ldr	r2, [r5, #28]
 8012104:	4313      	orrs	r3, r2
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8012106:	6463      	str	r3, [r4, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8012108:	686b      	ldr	r3, [r5, #4]
 801210a:	6723      	str	r3, [r4, #112]	@ 0x70
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 801210c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801210e:	2b01      	cmp	r3, #1
 8012110:	d12a      	bne.n	8012168 <HAL_RTC_SetAlarm_IT+0x10c>
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8012112:	2380      	movs	r3, #128	@ 0x80
 8012114:	69a2      	ldr	r2, [r4, #24]
 8012116:	051b      	lsls	r3, r3, #20
 8012118:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 801211a:	61a3      	str	r3, [r4, #24]
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 801211c:	2388      	movs	r3, #136	@ 0x88
 801211e:	69a2      	ldr	r2, [r4, #24]
 8012120:	015b      	lsls	r3, r3, #5
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8012122:	4313      	orrs	r3, r2
 8012124:	61a3      	str	r3, [r4, #24]
  hrtc->State = HAL_RTC_STATE_READY;
 8012126:	003b      	movs	r3, r7
 8012128:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 801212a:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 801212c:	332d      	adds	r3, #45	@ 0x2d
 801212e:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8012130:	3b01      	subs	r3, #1
 8012132:	7018      	strb	r0, [r3, #0]
}
 8012134:	b005      	add	sp, #20
 8012136:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8012138:	69a2      	ldr	r2, [r4, #24]
 801213a:	0011      	movs	r1, r2
 801213c:	4019      	ands	r1, r3
 801213e:	421a      	tst	r2, r3
 8012140:	d100      	bne.n	8012144 <HAL_RTC_SetAlarm_IT+0xe8>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8012142:	70e9      	strb	r1, [r5, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012144:	696a      	ldr	r2, [r5, #20]
 8012146:	6a2b      	ldr	r3, [r5, #32]
 8012148:	0400      	lsls	r0, r0, #16
 801214a:	4313      	orrs	r3, r2
 801214c:	9a01      	ldr	r2, [sp, #4]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801214e:	0236      	lsls	r6, r6, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012150:	4313      	orrs	r3, r2
 8012152:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012154:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012156:	4330      	orrs	r0, r6
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012158:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801215a:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801215c:	1d6b      	adds	r3, r5, #5
 801215e:	7fdb      	ldrb	r3, [r3, #31]
 8012160:	061b      	lsls	r3, r3, #24
 8012162:	e7be      	b.n	80120e2 <HAL_RTC_SetAlarm_IT+0x86>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8012164:	6420      	str	r0, [r4, #64]	@ 0x40
 8012166:	e7ce      	b.n	8012106 <HAL_RTC_SetAlarm_IT+0xaa>
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8012168:	69a3      	ldr	r3, [r4, #24]
 801216a:	4a13      	ldr	r2, [pc, #76]	@ (80121b8 <HAL_RTC_SetAlarm_IT+0x15c>)
 801216c:	4013      	ands	r3, r2
 801216e:	e7d4      	b.n	801211a <HAL_RTC_SetAlarm_IT+0xbe>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8012170:	4e12      	ldr	r6, [pc, #72]	@ (80121bc <HAL_RTC_SetAlarm_IT+0x160>)
 8012172:	4032      	ands	r2, r6
 8012174:	61a2      	str	r2, [r4, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8012176:	2202      	movs	r2, #2
 8012178:	65e2      	str	r2, [r4, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 801217a:	9a00      	ldr	r2, [sp, #0]
 801217c:	428a      	cmp	r2, r1
 801217e:	d110      	bne.n	80121a2 <HAL_RTC_SetAlarm_IT+0x146>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8012180:	69ea      	ldr	r2, [r5, #28]
 8012182:	4313      	orrs	r3, r2
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8012184:	64e3      	str	r3, [r4, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8012186:	686b      	ldr	r3, [r5, #4]
 8012188:	6763      	str	r3, [r4, #116]	@ 0x74
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 801218a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801218c:	2b01      	cmp	r3, #1
 801218e:	d10a      	bne.n	80121a6 <HAL_RTC_SetAlarm_IT+0x14a>
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8012190:	2380      	movs	r3, #128	@ 0x80
 8012192:	69a2      	ldr	r2, [r4, #24]
 8012194:	055b      	lsls	r3, r3, #21
 8012196:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8012198:	61a3      	str	r3, [r4, #24]
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 801219a:	2388      	movs	r3, #136	@ 0x88
 801219c:	69a2      	ldr	r2, [r4, #24]
 801219e:	019b      	lsls	r3, r3, #6
 80121a0:	e7bf      	b.n	8012122 <HAL_RTC_SetAlarm_IT+0xc6>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80121a2:	64a0      	str	r0, [r4, #72]	@ 0x48
 80121a4:	e7ee      	b.n	8012184 <HAL_RTC_SetAlarm_IT+0x128>
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80121a6:	69a3      	ldr	r3, [r4, #24]
 80121a8:	4a05      	ldr	r2, [pc, #20]	@ (80121c0 <HAL_RTC_SetAlarm_IT+0x164>)
 80121aa:	4013      	ands	r3, r2
 80121ac:	e7f4      	b.n	8012198 <HAL_RTC_SetAlarm_IT+0x13c>
 80121ae:	46c0      	nop			@ (mov r8, r8)
 80121b0:	40002800 	.word	0x40002800
 80121b4:	ffffeeff 	.word	0xffffeeff
 80121b8:	f7ffffff 	.word	0xf7ffffff
 80121bc:	ffffddff 	.word	0xffffddff
 80121c0:	efffffff 	.word	0xefffffff

080121c4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80121c4:	0903      	lsrs	r3, r0, #4
{
 80121c6:	0002      	movs	r2, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80121c8:	200a      	movs	r0, #10
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80121ca:	210f      	movs	r1, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80121cc:	4358      	muls	r0, r3
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80121ce:	400a      	ands	r2, r1
 80121d0:	1880      	adds	r0, r0, r2
 80121d2:	b2c0      	uxtb	r0, r0
}
 80121d4:	4770      	bx	lr
	...

080121d8 <HAL_RTC_GetTime>:
{
 80121d8:	b570      	push	{r4, r5, r6, lr}
 80121da:	000c      	movs	r4, r1
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80121dc:	20c0      	movs	r0, #192	@ 0xc0
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80121de:	4915      	ldr	r1, [pc, #84]	@ (8012234 <HAL_RTC_GetTime+0x5c>)
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80121e0:	0080      	lsls	r0, r0, #2
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80121e2:	688b      	ldr	r3, [r1, #8]
 80121e4:	6063      	str	r3, [r4, #4]
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80121e6:	68cb      	ldr	r3, [r1, #12]
 80121e8:	4003      	ands	r3, r0
 80121ea:	2080      	movs	r0, #128	@ 0x80
 80121ec:	0040      	lsls	r0, r0, #1
 80121ee:	4283      	cmp	r3, r0
 80121f0:	d01d      	beq.n	801222e <HAL_RTC_GetTime+0x56>
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80121f2:	690b      	ldr	r3, [r1, #16]
 80121f4:	045b      	lsls	r3, r3, #17
 80121f6:	0c5b      	lsrs	r3, r3, #17
 80121f8:	60a3      	str	r3, [r4, #8]
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80121fa:	680b      	ldr	r3, [r1, #0]
 80121fc:	490e      	ldr	r1, [pc, #56]	@ (8012238 <HAL_RTC_GetTime+0x60>)
 80121fe:	400b      	ands	r3, r1
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8012200:	0298      	lsls	r0, r3, #10
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012202:	0a1d      	lsrs	r5, r3, #8
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8012204:	b2de      	uxtb	r6, r3
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8012206:	0e80      	lsrs	r0, r0, #26
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012208:	b2ed      	uxtb	r5, r5
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 801220a:	0d9b      	lsrs	r3, r3, #22
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 801220c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801220e:	7065      	strb	r5, [r4, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8012210:	70a6      	strb	r6, [r4, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8012212:	70e3      	strb	r3, [r4, #3]
    if (Format == RTC_FORMAT_BIN)
 8012214:	2a00      	cmp	r2, #0
 8012216:	d10a      	bne.n	801222e <HAL_RTC_GetTime+0x56>
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012218:	f7ff ffd4 	bl	80121c4 <RTC_Bcd2ToByte>
 801221c:	7020      	strb	r0, [r4, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801221e:	0028      	movs	r0, r5
 8012220:	f7ff ffd0 	bl	80121c4 <RTC_Bcd2ToByte>
 8012224:	7060      	strb	r0, [r4, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012226:	0030      	movs	r0, r6
 8012228:	f7ff ffcc 	bl	80121c4 <RTC_Bcd2ToByte>
 801222c:	70a0      	strb	r0, [r4, #2]
}
 801222e:	2000      	movs	r0, #0
 8012230:	bd70      	pop	{r4, r5, r6, pc}
 8012232:	46c0      	nop			@ (mov r8, r8)
 8012234:	40002800 	.word	0x40002800
 8012238:	007f7f7f 	.word	0x007f7f7f

0801223c <HAL_RTC_GetDate>:
{
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8012240:	4b0e      	ldr	r3, [pc, #56]	@ (801227c <HAL_RTC_GetDate+0x40>)
 8012242:	490f      	ldr	r1, [pc, #60]	@ (8012280 <HAL_RTC_GetDate+0x44>)
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012248:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801224a:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801224c:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 801224e:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012250:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8012252:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012254:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012256:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012258:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 801225a:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 801225c:	2a00      	cmp	r2, #0
 801225e:	d10a      	bne.n	8012276 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012260:	f7ff ffb0 	bl	80121c4 <RTC_Bcd2ToByte>
 8012264:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012266:	0028      	movs	r0, r5
 8012268:	f7ff ffac 	bl	80121c4 <RTC_Bcd2ToByte>
 801226c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801226e:	0030      	movs	r0, r6
 8012270:	f7ff ffa8 	bl	80121c4 <RTC_Bcd2ToByte>
 8012274:	70a0      	strb	r0, [r4, #2]
}
 8012276:	2000      	movs	r0, #0
 8012278:	bd70      	pop	{r4, r5, r6, pc}
 801227a:	46c0      	nop			@ (mov r8, r8)
 801227c:	40002800 	.word	0x40002800
 8012280:	00ffff3f 	.word	0x00ffff3f

08012284 <HAL_RTCEx_DeactivateWakeUpTimer>:
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012284:	0001      	movs	r1, r0
 8012286:	2202      	movs	r2, #2
{
 8012288:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 801228a:	312c      	adds	r1, #44	@ 0x2c
 801228c:	780c      	ldrb	r4, [r1, #0]
{
 801228e:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8012290:	0010      	movs	r0, r2
 8012292:	2c01      	cmp	r4, #1
 8012294:	d00a      	beq.n	80122ac <HAL_RTCEx_DeactivateWakeUpTimer+0x28>
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8012296:	4806      	ldr	r0, [pc, #24]	@ (80122b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x2c>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012298:	332d      	adds	r3, #45	@ 0x2d
 801229a:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 801229c:	6982      	ldr	r2, [r0, #24]
 801229e:	4c05      	ldr	r4, [pc, #20]	@ (80122b4 <HAL_RTCEx_DeactivateWakeUpTimer+0x30>)
 80122a0:	4022      	ands	r2, r4
 80122a2:	6182      	str	r2, [r0, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80122a4:	2201      	movs	r2, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80122a6:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 80122a8:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80122aa:	7008      	strb	r0, [r1, #0]

  return HAL_OK;
}
 80122ac:	bd10      	pop	{r4, pc}
 80122ae:	46c0      	nop			@ (mov r8, r8)
 80122b0:	40002800 	.word	0x40002800
 80122b4:	ffffbbff 	.word	0xffffbbff

080122b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80122b8:	2204      	movs	r2, #4
 80122ba:	4b06      	ldr	r3, [pc, #24]	@ (80122d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>)
{
 80122bc:	b510      	push	{r4, lr}
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80122be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
{
 80122c0:	0004      	movs	r4, r0
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80122c2:	4211      	tst	r1, r2
 80122c4:	d002      	beq.n	80122cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x14>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80122c6:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80122c8:	f7f6 fa50 	bl	800876c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80122cc:	2301      	movs	r3, #1
 80122ce:	342d      	adds	r4, #45	@ 0x2d
 80122d0:	7023      	strb	r3, [r4, #0]
}
 80122d2:	bd10      	pop	{r4, pc}
 80122d4:	40002800 	.word	0x40002800

080122d8 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 80122d8:	4770      	bx	lr

080122da <HAL_RTCEx_Tamper1EventCallback>:
/**
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
 80122da:	4770      	bx	lr

080122dc <HAL_RTCEx_Tamper2EventCallback>:
/**
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
 80122dc:	4770      	bx	lr

080122de <HAL_RTCEx_Tamper3EventCallback>:
/**
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
 80122de:	4770      	bx	lr

080122e0 <HAL_RTCEx_Tamper4EventCallback>:
/**
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
 80122e0:	4770      	bx	lr

080122e2 <HAL_RTCEx_Tamper5EventCallback>:
/**
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
 80122e2:	4770      	bx	lr

080122e4 <HAL_RTCEx_InternalTamper3EventCallback>:
/**
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
 80122e4:	4770      	bx	lr

080122e6 <HAL_RTCEx_InternalTamper4EventCallback>:
/**
  * @brief  Internal Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper4EventCallback(RTC_HandleTypeDef *hrtc)
 80122e6:	4770      	bx	lr

080122e8 <HAL_RTCEx_InternalTamper5EventCallback>:
/**
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
 80122e8:	4770      	bx	lr

080122ea <HAL_RTCEx_InternalTamper6EventCallback>:
/**
  * @brief  Internal Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc)
 80122ea:	4770      	bx	lr

080122ec <HAL_RTCEx_TamperIRQHandler>:
  uint32_t tmp = READ_REG(TAMP->MISR);
 80122ec:	4b18      	ldr	r3, [pc, #96]	@ (8012350 <HAL_RTCEx_TamperIRQHandler+0x64>)
{
 80122ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = READ_REG(TAMP->MISR);
 80122f0:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
{
 80122f2:	0004      	movs	r4, r0
  WRITE_REG(TAMP->SCR, tmp);
 80122f4:	63dd      	str	r5, [r3, #60]	@ 0x3c
  if ((tmp & RTC_TAMPER_1) == RTC_TAMPER_1)
 80122f6:	07eb      	lsls	r3, r5, #31
 80122f8:	d501      	bpl.n	80122fe <HAL_RTCEx_TamperIRQHandler+0x12>
    HAL_RTCEx_Tamper1EventCallback(hrtc);
 80122fa:	f7ff ffee 	bl	80122da <HAL_RTCEx_Tamper1EventCallback>
  if ((tmp & RTC_TAMPER_2) == RTC_TAMPER_2)
 80122fe:	07ab      	lsls	r3, r5, #30
 8012300:	d502      	bpl.n	8012308 <HAL_RTCEx_TamperIRQHandler+0x1c>
    HAL_RTCEx_Tamper2EventCallback(hrtc);
 8012302:	0020      	movs	r0, r4
 8012304:	f7ff ffea 	bl	80122dc <HAL_RTCEx_Tamper2EventCallback>
  if ((tmp & RTC_TAMPER_3) == RTC_TAMPER_3)
 8012308:	076b      	lsls	r3, r5, #29
 801230a:	d502      	bpl.n	8012312 <HAL_RTCEx_TamperIRQHandler+0x26>
    HAL_RTCEx_Tamper3EventCallback(hrtc);
 801230c:	0020      	movs	r0, r4
 801230e:	f7ff ffe6 	bl	80122de <HAL_RTCEx_Tamper3EventCallback>
  if ((tmp & RTC_TAMPER_4) == RTC_TAMPER_4)
 8012312:	072b      	lsls	r3, r5, #28
 8012314:	d502      	bpl.n	801231c <HAL_RTCEx_TamperIRQHandler+0x30>
    HAL_RTCEx_Tamper4EventCallback(hrtc);
 8012316:	0020      	movs	r0, r4
 8012318:	f7ff ffe2 	bl	80122e0 <HAL_RTCEx_Tamper4EventCallback>
  if ((tmp & RTC_TAMPER_5) == RTC_TAMPER_5)
 801231c:	06eb      	lsls	r3, r5, #27
 801231e:	d502      	bpl.n	8012326 <HAL_RTCEx_TamperIRQHandler+0x3a>
    HAL_RTCEx_Tamper5EventCallback(hrtc);
 8012320:	0020      	movs	r0, r4
 8012322:	f7ff ffde 	bl	80122e2 <HAL_RTCEx_Tamper5EventCallback>
  if ((tmp & RTC_INT_TAMPER_3) == RTC_INT_TAMPER_3)
 8012326:	036b      	lsls	r3, r5, #13
 8012328:	d502      	bpl.n	8012330 <HAL_RTCEx_TamperIRQHandler+0x44>
    HAL_RTCEx_InternalTamper3EventCallback(hrtc);
 801232a:	0020      	movs	r0, r4
 801232c:	f7ff ffda 	bl	80122e4 <HAL_RTCEx_InternalTamper3EventCallback>
  if ((tmp & RTC_INT_TAMPER_4) == RTC_INT_TAMPER_4)
 8012330:	032b      	lsls	r3, r5, #12
 8012332:	d502      	bpl.n	801233a <HAL_RTCEx_TamperIRQHandler+0x4e>
    HAL_RTCEx_InternalTamper4EventCallback(hrtc);
 8012334:	0020      	movs	r0, r4
 8012336:	f7ff ffd6 	bl	80122e6 <HAL_RTCEx_InternalTamper4EventCallback>
  if ((tmp & RTC_INT_TAMPER_5) == RTC_INT_TAMPER_5)
 801233a:	02eb      	lsls	r3, r5, #11
 801233c:	d502      	bpl.n	8012344 <HAL_RTCEx_TamperIRQHandler+0x58>
    HAL_RTCEx_InternalTamper5EventCallback(hrtc);
 801233e:	0020      	movs	r0, r4
 8012340:	f7ff ffd2 	bl	80122e8 <HAL_RTCEx_InternalTamper5EventCallback>
  if ((tmp & RTC_INT_TAMPER_6) == RTC_INT_TAMPER_6)
 8012344:	02ad      	lsls	r5, r5, #10
 8012346:	d502      	bpl.n	801234e <HAL_RTCEx_TamperIRQHandler+0x62>
    HAL_RTCEx_InternalTamper6EventCallback(hrtc);
 8012348:	0020      	movs	r0, r4
 801234a:	f7ff ffce 	bl	80122ea <HAL_RTCEx_InternalTamper6EventCallback>
}
 801234e:	bd70      	pop	{r4, r5, r6, pc}
 8012350:	4000b000 	.word	0x4000b000

08012354 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8012354:	4b02      	ldr	r3, [pc, #8]	@ (8012360 <HAL_RTCEx_BKUPWrite+0xc>)
 8012356:	0089      	lsls	r1, r1, #2
 8012358:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801235a:	600a      	str	r2, [r1, #0]
}
 801235c:	4770      	bx	lr
 801235e:	46c0      	nop			@ (mov r8, r8)
 8012360:	4000b100 	.word	0x4000b100

08012364 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8012364:	4b02      	ldr	r3, [pc, #8]	@ (8012370 <HAL_RTCEx_BKUPRead+0xc>)
 8012366:	0089      	lsls	r1, r1, #2
 8012368:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801236a:	6808      	ldr	r0, [r1, #0]
}
 801236c:	4770      	bx	lr
 801236e:	46c0      	nop			@ (mov r8, r8)
 8012370:	4000b100 	.word	0x4000b100

08012374 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8012374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012376:	000e      	movs	r6, r1
 8012378:	b085      	sub	sp, #20
 801237a:	0015      	movs	r5, r2
 801237c:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801237e:	f7fc f865 	bl	800e44c <HAL_GetTick>
 8012382:	19ad      	adds	r5, r5, r6
 8012384:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8012386:	f7fc f861 	bl	800e44c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801238a:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801238c:	4b25      	ldr	r3, [pc, #148]	@ (8012424 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 801238e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	015b      	lsls	r3, r3, #5
 8012394:	0d1b      	lsrs	r3, r3, #20
 8012396:	436b      	muls	r3, r5
 8012398:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801239a:	6822      	ldr	r2, [r4, #0]
 801239c:	6893      	ldr	r3, [r2, #8]
 801239e:	0018      	movs	r0, r3
 80123a0:	4038      	ands	r0, r7
 80123a2:	423b      	tst	r3, r7
 80123a4:	d032      	beq.n	801240c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 80123a6:	1c73      	adds	r3, r6, #1
 80123a8:	d0f8      	beq.n	801239c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80123aa:	f7fc f84f 	bl	800e44c <HAL_GetTick>
 80123ae:	9b01      	ldr	r3, [sp, #4]
 80123b0:	1ac0      	subs	r0, r0, r3
 80123b2:	42a8      	cmp	r0, r5
 80123b4:	d32c      	bcc.n	8012410 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80123b6:	21e0      	movs	r1, #224	@ 0xe0
 80123b8:	6823      	ldr	r3, [r4, #0]
 80123ba:	685a      	ldr	r2, [r3, #4]
 80123bc:	438a      	bics	r2, r1
 80123be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80123c0:	2282      	movs	r2, #130	@ 0x82
 80123c2:	6861      	ldr	r1, [r4, #4]
 80123c4:	0052      	lsls	r2, r2, #1
 80123c6:	4291      	cmp	r1, r2
 80123c8:	d10c      	bne.n	80123e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 80123ca:	2180      	movs	r1, #128	@ 0x80
 80123cc:	68a2      	ldr	r2, [r4, #8]
 80123ce:	0209      	lsls	r1, r1, #8
 80123d0:	428a      	cmp	r2, r1
 80123d2:	d003      	beq.n	80123dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80123d4:	2180      	movs	r1, #128	@ 0x80
 80123d6:	00c9      	lsls	r1, r1, #3
 80123d8:	428a      	cmp	r2, r1
 80123da:	d103      	bne.n	80123e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80123dc:	2140      	movs	r1, #64	@ 0x40
 80123de:	681a      	ldr	r2, [r3, #0]
 80123e0:	438a      	bics	r2, r1
 80123e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80123e4:	2180      	movs	r1, #128	@ 0x80
 80123e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80123e8:	0189      	lsls	r1, r1, #6
 80123ea:	428a      	cmp	r2, r1
 80123ec:	d106      	bne.n	80123fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 80123ee:	6819      	ldr	r1, [r3, #0]
 80123f0:	480d      	ldr	r0, [pc, #52]	@ (8012428 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80123f2:	4001      	ands	r1, r0
 80123f4:	6019      	str	r1, [r3, #0]
 80123f6:	6819      	ldr	r1, [r3, #0]
 80123f8:	430a      	orrs	r2, r1
 80123fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80123fc:	0023      	movs	r3, r4
 80123fe:	2201      	movs	r2, #1
 8012400:	335d      	adds	r3, #93	@ 0x5d
 8012402:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012404:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8012406:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8012408:	345c      	adds	r4, #92	@ 0x5c
 801240a:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 801240c:	b005      	add	sp, #20
 801240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8012410:	9b03      	ldr	r3, [sp, #12]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d000      	beq.n	8012418 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 8012416:	002b      	movs	r3, r5
      count--;
 8012418:	9a03      	ldr	r2, [sp, #12]
 801241a:	001d      	movs	r5, r3
 801241c:	3a01      	subs	r2, #1
 801241e:	9203      	str	r2, [sp, #12]
 8012420:	e7bb      	b.n	801239a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8012422:	46c0      	nop			@ (mov r8, r8)
 8012424:	20000050 	.word	0x20000050
 8012428:	ffffdfff 	.word	0xffffdfff

0801242c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 801242c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801242e:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8012430:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8012432:	b085      	sub	sp, #20
 8012434:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8012436:	ab02      	add	r3, sp, #8
 8012438:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 801243a:	0004      	movs	r4, r0
 801243c:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801243e:	f7fc f805 	bl	800e44c <HAL_GetTick>
 8012442:	19ed      	adds	r5, r5, r7
 8012444:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8012446:	f7fc f801 	bl	800e44c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801244a:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801244c:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 801244e:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8012450:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8012452:	4b2a      	ldr	r3, [pc, #168]	@ (80124fc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4353      	muls	r3, r2
 8012458:	0d1b      	lsrs	r3, r3, #20
 801245a:	436b      	muls	r3, r5
 801245c:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801245e:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8012460:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8012462:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8012464:	688b      	ldr	r3, [r1, #8]
 8012466:	0018      	movs	r0, r3
 8012468:	4030      	ands	r0, r6
 801246a:	4233      	tst	r3, r6
 801246c:	d03b      	beq.n	80124e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801246e:	23c0      	movs	r3, #192	@ 0xc0
 8012470:	00db      	lsls	r3, r3, #3
 8012472:	429e      	cmp	r6, r3
 8012474:	d104      	bne.n	8012480 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8012476:	9b01      	ldr	r3, [sp, #4]
 8012478:	7b1b      	ldrb	r3, [r3, #12]
 801247a:	b2db      	uxtb	r3, r3
 801247c:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801247e:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012480:	1c7b      	adds	r3, r7, #1
 8012482:	d0ef      	beq.n	8012464 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012484:	f7fb ffe2 	bl	800e44c <HAL_GetTick>
 8012488:	9b00      	ldr	r3, [sp, #0]
 801248a:	1ac0      	subs	r0, r0, r3
 801248c:	42a8      	cmp	r0, r5
 801248e:	d32c      	bcc.n	80124ea <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012490:	21e0      	movs	r1, #224	@ 0xe0
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	685a      	ldr	r2, [r3, #4]
 8012496:	438a      	bics	r2, r1
 8012498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801249a:	2282      	movs	r2, #130	@ 0x82
 801249c:	6861      	ldr	r1, [r4, #4]
 801249e:	0052      	lsls	r2, r2, #1
 80124a0:	4291      	cmp	r1, r2
 80124a2:	d10c      	bne.n	80124be <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 80124a4:	2180      	movs	r1, #128	@ 0x80
 80124a6:	68a2      	ldr	r2, [r4, #8]
 80124a8:	0209      	lsls	r1, r1, #8
 80124aa:	428a      	cmp	r2, r1
 80124ac:	d003      	beq.n	80124b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80124ae:	2180      	movs	r1, #128	@ 0x80
 80124b0:	00c9      	lsls	r1, r1, #3
 80124b2:	428a      	cmp	r2, r1
 80124b4:	d103      	bne.n	80124be <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80124b6:	2140      	movs	r1, #64	@ 0x40
 80124b8:	681a      	ldr	r2, [r3, #0]
 80124ba:	438a      	bics	r2, r1
 80124bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80124be:	2180      	movs	r1, #128	@ 0x80
 80124c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80124c2:	0189      	lsls	r1, r1, #6
 80124c4:	428a      	cmp	r2, r1
 80124c6:	d106      	bne.n	80124d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 80124c8:	6819      	ldr	r1, [r3, #0]
 80124ca:	480d      	ldr	r0, [pc, #52]	@ (8012500 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 80124cc:	4001      	ands	r1, r0
 80124ce:	6019      	str	r1, [r3, #0]
 80124d0:	6819      	ldr	r1, [r3, #0]
 80124d2:	430a      	orrs	r2, r1
 80124d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80124d6:	0023      	movs	r3, r4
 80124d8:	2201      	movs	r2, #1
 80124da:	335d      	adds	r3, #93	@ 0x5d
 80124dc:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80124de:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 80124e0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80124e2:	345c      	adds	r4, #92	@ 0x5c
 80124e4:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 80124e6:	b005      	add	sp, #20
 80124e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80124ea:	9b03      	ldr	r3, [sp, #12]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d000      	beq.n	80124f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 80124f0:	002b      	movs	r3, r5
      count--;
 80124f2:	9a03      	ldr	r2, [sp, #12]
 80124f4:	001d      	movs	r5, r3
 80124f6:	3a01      	subs	r2, #1
 80124f8:	9203      	str	r2, [sp, #12]
 80124fa:	e7b0      	b.n	801245e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 80124fc:	20000050 	.word	0x20000050
 8012500:	ffffdfff 	.word	0xffffdfff

08012504 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012506:	2382      	movs	r3, #130	@ 0x82
{
 8012508:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801250a:	6842      	ldr	r2, [r0, #4]
{
 801250c:	0004      	movs	r4, r0
 801250e:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012510:	005b      	lsls	r3, r3, #1
 8012512:	429a      	cmp	r2, r3
 8012514:	d10d      	bne.n	8012532 <SPI_EndRxTransaction+0x2e>
 8012516:	2280      	movs	r2, #128	@ 0x80
 8012518:	6883      	ldr	r3, [r0, #8]
 801251a:	0212      	lsls	r2, r2, #8
 801251c:	4293      	cmp	r3, r2
 801251e:	d003      	beq.n	8012528 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012520:	2280      	movs	r2, #128	@ 0x80
 8012522:	00d2      	lsls	r2, r2, #3
 8012524:	4293      	cmp	r3, r2
 8012526:	d104      	bne.n	8012532 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012528:	2140      	movs	r1, #64	@ 0x40
 801252a:	6822      	ldr	r2, [r4, #0]
 801252c:	6813      	ldr	r3, [r2, #0]
 801252e:	438b      	bics	r3, r1
 8012530:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012532:	003a      	movs	r2, r7
 8012534:	0031      	movs	r1, r6
 8012536:	0020      	movs	r0, r4
 8012538:	f7ff ff1c 	bl	8012374 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 801253c:	1e05      	subs	r5, r0, #0
 801253e:	d005      	beq.n	801254c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012540:	2320      	movs	r3, #32
 8012542:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012544:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012546:	4313      	orrs	r3, r2
 8012548:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 801254a:	e016      	b.n	801257a <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801254c:	2382      	movs	r3, #130	@ 0x82
 801254e:	6862      	ldr	r2, [r4, #4]
 8012550:	005b      	lsls	r3, r3, #1
 8012552:	429a      	cmp	r2, r3
 8012554:	d111      	bne.n	801257a <SPI_EndRxTransaction+0x76>
 8012556:	2280      	movs	r2, #128	@ 0x80
 8012558:	68a3      	ldr	r3, [r4, #8]
 801255a:	0212      	lsls	r2, r2, #8
 801255c:	4293      	cmp	r3, r2
 801255e:	d003      	beq.n	8012568 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012560:	2280      	movs	r2, #128	@ 0x80
 8012562:	00d2      	lsls	r2, r2, #3
 8012564:	4293      	cmp	r3, r2
 8012566:	d108      	bne.n	801257a <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012568:	21c0      	movs	r1, #192	@ 0xc0
 801256a:	003b      	movs	r3, r7
 801256c:	0032      	movs	r2, r6
 801256e:	0020      	movs	r0, r4
 8012570:	00c9      	lsls	r1, r1, #3
 8012572:	f7ff ff5b 	bl	801242c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8012576:	2800      	cmp	r0, #0
 8012578:	d1e2      	bne.n	8012540 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 801257a:	0028      	movs	r0, r5
 801257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801257e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801257e:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012580:	0013      	movs	r3, r2
{
 8012582:	000d      	movs	r5, r1
 8012584:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012586:	000a      	movs	r2, r1
 8012588:	21c0      	movs	r1, #192	@ 0xc0
 801258a:	0149      	lsls	r1, r1, #5
{
 801258c:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801258e:	f7ff ff4d 	bl	801242c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8012592:	2800      	cmp	r0, #0
 8012594:	d005      	beq.n	80125a2 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012596:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8012598:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801259a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801259c:	4313      	orrs	r3, r2
 801259e:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80125a0:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80125a2:	0032      	movs	r2, r6
 80125a4:	0029      	movs	r1, r5
 80125a6:	0020      	movs	r0, r4
 80125a8:	f7ff fee4 	bl	8012374 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d1f2      	bne.n	8012596 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80125b0:	21c0      	movs	r1, #192	@ 0xc0
 80125b2:	0033      	movs	r3, r6
 80125b4:	002a      	movs	r2, r5
 80125b6:	0020      	movs	r0, r4
 80125b8:	00c9      	lsls	r1, r1, #3
 80125ba:	f7ff ff37 	bl	801242c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80125be:	2800      	cmp	r0, #0
 80125c0:	d0ee      	beq.n	80125a0 <SPI_EndRxTxTransaction+0x22>
 80125c2:	e7e8      	b.n	8012596 <SPI_EndRxTxTransaction+0x18>

080125c4 <HAL_SPI_Init>:
{
 80125c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80125c8:	2001      	movs	r0, #1
  if (hspi == NULL)
 80125ca:	2c00      	cmp	r4, #0
 80125cc:	d063      	beq.n	8012696 <HAL_SPI_Init+0xd2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80125ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d161      	bne.n	8012698 <HAL_SPI_Init+0xd4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80125d4:	2282      	movs	r2, #130	@ 0x82
 80125d6:	6861      	ldr	r1, [r4, #4]
 80125d8:	0052      	lsls	r2, r2, #1
 80125da:	4291      	cmp	r1, r2
 80125dc:	d000      	beq.n	80125e0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80125de:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80125e0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80125e2:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80125e4:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80125e6:	355d      	adds	r5, #93	@ 0x5d
 80125e8:	782b      	ldrb	r3, [r5, #0]
 80125ea:	b2da      	uxtb	r2, r3
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d105      	bne.n	80125fc <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80125f0:	0023      	movs	r3, r4
 80125f2:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80125f4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80125f6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80125f8:	f7f8 f8ae 	bl	800a758 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80125fc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80125fe:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8012600:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8012602:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012604:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8012606:	680b      	ldr	r3, [r1, #0]
 8012608:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801260a:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 801260c:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801260e:	00d2      	lsls	r2, r2, #3
 8012610:	2300      	movs	r3, #0
 8012612:	4296      	cmp	r6, r2
 8012614:	d944      	bls.n	80126a0 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012616:	22f0      	movs	r2, #240	@ 0xf0
 8012618:	0018      	movs	r0, r3
 801261a:	0112      	lsls	r2, r2, #4
 801261c:	4296      	cmp	r6, r2
 801261e:	d000      	beq.n	8012622 <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012620:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012622:	2282      	movs	r2, #130	@ 0x82
 8012624:	2784      	movs	r7, #132	@ 0x84
 8012626:	6863      	ldr	r3, [r4, #4]
 8012628:	0052      	lsls	r2, r2, #1
 801262a:	4013      	ands	r3, r2
 801262c:	68a2      	ldr	r2, [r4, #8]
 801262e:	023f      	lsls	r7, r7, #8
 8012630:	403a      	ands	r2, r7
 8012632:	2702      	movs	r7, #2
 8012634:	4313      	orrs	r3, r2
 8012636:	6922      	ldr	r2, [r4, #16]
 8012638:	69a5      	ldr	r5, [r4, #24]
 801263a:	403a      	ands	r2, r7
 801263c:	4313      	orrs	r3, r2
 801263e:	2201      	movs	r2, #1
 8012640:	6967      	ldr	r7, [r4, #20]
 8012642:	4017      	ands	r7, r2
 8012644:	433b      	orrs	r3, r7
 8012646:	2780      	movs	r7, #128	@ 0x80
 8012648:	00bf      	lsls	r7, r7, #2
 801264a:	402f      	ands	r7, r5
 801264c:	433b      	orrs	r3, r7
 801264e:	69e7      	ldr	r7, [r4, #28]
 8012650:	3237      	adds	r2, #55	@ 0x37
 8012652:	4017      	ands	r7, r2
 8012654:	433b      	orrs	r3, r7
 8012656:	6a27      	ldr	r7, [r4, #32]
 8012658:	3248      	adds	r2, #72	@ 0x48
 801265a:	4017      	ands	r7, r2
 801265c:	2280      	movs	r2, #128	@ 0x80
 801265e:	433b      	orrs	r3, r7
 8012660:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8012662:	0192      	lsls	r2, r2, #6
 8012664:	4017      	ands	r7, r2
 8012666:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012668:	2710      	movs	r7, #16
 801266a:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801266c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801266e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012670:	0c2d      	lsrs	r5, r5, #16
 8012672:	403b      	ands	r3, r7
 8012674:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8012676:	4017      	ands	r7, r2
 8012678:	433b      	orrs	r3, r7
 801267a:	27f0      	movs	r7, #240	@ 0xf0
 801267c:	013f      	lsls	r7, r7, #4
 801267e:	403e      	ands	r6, r7
 8012680:	4333      	orrs	r3, r6
 8012682:	2604      	movs	r6, #4
 8012684:	4035      	ands	r5, r6
 8012686:	432b      	orrs	r3, r5
 8012688:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801268a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801268c:	604b      	str	r3, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 801268e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012690:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012692:	345d      	adds	r4, #93	@ 0x5d
 8012694:	7023      	strb	r3, [r4, #0]
}
 8012696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012698:	2300      	movs	r3, #0
 801269a:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801269c:	6163      	str	r3, [r4, #20]
 801269e:	e79f      	b.n	80125e0 <HAL_SPI_Init+0x1c>
 80126a0:	2080      	movs	r0, #128	@ 0x80
 80126a2:	0140      	lsls	r0, r0, #5
 80126a4:	e7ba      	b.n	801261c <HAL_SPI_Init+0x58>

080126a6 <HAL_SPI_Transmit>:
{
 80126a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126a8:	b085      	sub	sp, #20
 80126aa:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 80126ac:	0003      	movs	r3, r0
 80126ae:	335c      	adds	r3, #92	@ 0x5c
{
 80126b0:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 80126b2:	781a      	ldrb	r2, [r3, #0]
{
 80126b4:	0004      	movs	r4, r0
 80126b6:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80126b8:	2702      	movs	r7, #2
 80126ba:	2a01      	cmp	r2, #1
 80126bc:	d100      	bne.n	80126c0 <HAL_SPI_Transmit+0x1a>
 80126be:	e082      	b.n	80127c6 <HAL_SPI_Transmit+0x120>
 80126c0:	2201      	movs	r2, #1
 80126c2:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80126c4:	f7fb fec2 	bl	800e44c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80126c8:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80126ca:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 80126cc:	335d      	adds	r3, #93	@ 0x5d
 80126ce:	781a      	ldrb	r2, [r3, #0]
 80126d0:	b2d7      	uxtb	r7, r2
 80126d2:	2a01      	cmp	r2, #1
 80126d4:	d000      	beq.n	80126d8 <HAL_SPI_Transmit+0x32>
 80126d6:	e0a6      	b.n	8012826 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 80126d8:	2d00      	cmp	r5, #0
 80126da:	d071      	beq.n	80127c0 <HAL_SPI_Transmit+0x11a>
 80126dc:	2e00      	cmp	r6, #0
 80126de:	d06f      	beq.n	80127c0 <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80126e0:	3202      	adds	r2, #2
 80126e2:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80126e4:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80126e6:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80126e8:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80126ea:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80126ec:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80126ee:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80126f0:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 80126f2:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80126f4:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80126f6:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126f8:	2280      	movs	r2, #128	@ 0x80
 80126fa:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 80126fc:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80126fe:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012700:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8012702:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012704:	4291      	cmp	r1, r2
 8012706:	d108      	bne.n	801271a <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8012708:	2140      	movs	r1, #64	@ 0x40
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	438a      	bics	r2, r1
 801270e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012710:	2280      	movs	r2, #128	@ 0x80
 8012712:	6819      	ldr	r1, [r3, #0]
 8012714:	01d2      	lsls	r2, r2, #7
 8012716:	430a      	orrs	r2, r1
 8012718:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801271a:	2240      	movs	r2, #64	@ 0x40
 801271c:	6819      	ldr	r1, [r3, #0]
 801271e:	4211      	tst	r1, r2
 8012720:	d102      	bne.n	8012728 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8012722:	6819      	ldr	r1, [r3, #0]
 8012724:	430a      	orrs	r2, r1
 8012726:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012728:	21e0      	movs	r1, #224	@ 0xe0
 801272a:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801272c:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801272e:	00c9      	lsls	r1, r1, #3
 8012730:	4288      	cmp	r0, r1
 8012732:	d94b      	bls.n	80127cc <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012734:	2a00      	cmp	r2, #0
 8012736:	d001      	beq.n	801273c <HAL_SPI_Transmit+0x96>
 8012738:	2e01      	cmp	r6, #1
 801273a:	d107      	bne.n	801274c <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801273c:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801273e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012740:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8012742:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012744:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8012746:	3b01      	subs	r3, #1
 8012748:	b29b      	uxth	r3, r3
 801274a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801274c:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 801274e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012750:	2b00      	cmp	r3, #0
 8012752:	d119      	bne.n	8012788 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012754:	0020      	movs	r0, r4
 8012756:	9a01      	ldr	r2, [sp, #4]
 8012758:	9900      	ldr	r1, [sp, #0]
 801275a:	f7ff ff10 	bl	801257e <SPI_EndRxTxTransaction>
 801275e:	2800      	cmp	r0, #0
 8012760:	d15e      	bne.n	8012820 <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012762:	68a3      	ldr	r3, [r4, #8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d106      	bne.n	8012776 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012768:	9303      	str	r3, [sp, #12]
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	68da      	ldr	r2, [r3, #12]
 801276e:	9203      	str	r2, [sp, #12]
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	9303      	str	r3, [sp, #12]
 8012774:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012776:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012778:	2a00      	cmp	r2, #0
 801277a:	d121      	bne.n	80127c0 <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 801277c:	0023      	movs	r3, r4
 801277e:	2101      	movs	r1, #1
 8012780:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012782:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8012784:	7019      	strb	r1, [r3, #0]
 8012786:	e01b      	b.n	80127c0 <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012788:	6822      	ldr	r2, [r4, #0]
 801278a:	6893      	ldr	r3, [r2, #8]
 801278c:	422b      	tst	r3, r5
 801278e:	d009      	beq.n	80127a4 <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012790:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012792:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012794:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012796:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012798:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 801279a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801279c:	3b01      	subs	r3, #1
 801279e:	b29b      	uxth	r3, r3
 80127a0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80127a2:	e7d4      	b.n	801274e <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80127a4:	f7fb fe52 	bl	800e44c <HAL_GetTick>
 80127a8:	9b01      	ldr	r3, [sp, #4]
 80127aa:	1ac0      	subs	r0, r0, r3
 80127ac:	9b00      	ldr	r3, [sp, #0]
 80127ae:	4298      	cmp	r0, r3
 80127b0:	d3cd      	bcc.n	801274e <HAL_SPI_Transmit+0xa8>
 80127b2:	3301      	adds	r3, #1
 80127b4:	d0cb      	beq.n	801274e <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 80127b6:	0023      	movs	r3, r4
 80127b8:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 80127ba:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 80127bc:	335d      	adds	r3, #93	@ 0x5d
 80127be:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80127c0:	2300      	movs	r3, #0
 80127c2:	345c      	adds	r4, #92	@ 0x5c
 80127c4:	7023      	strb	r3, [r4, #0]
}
 80127c6:	0038      	movs	r0, r7
 80127c8:	b005      	add	sp, #20
 80127ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	d001      	beq.n	80127d4 <HAL_SPI_Transmit+0x12e>
 80127d0:	2e01      	cmp	r6, #1
 80127d2:	d108      	bne.n	80127e6 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80127d4:	782a      	ldrb	r2, [r5, #0]
 80127d6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80127d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80127da:	3301      	adds	r3, #1
 80127dc:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80127de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80127e0:	3b01      	subs	r3, #1
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80127e6:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80127e8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d0b2      	beq.n	8012754 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	689a      	ldr	r2, [r3, #8]
 80127f2:	422a      	tst	r2, r5
 80127f4:	d00a      	beq.n	801280c <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80127f6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80127f8:	7812      	ldrb	r2, [r2, #0]
 80127fa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80127fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80127fe:	3301      	adds	r3, #1
 8012800:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8012802:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012804:	3b01      	subs	r3, #1
 8012806:	b29b      	uxth	r3, r3
 8012808:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 801280a:	e7ed      	b.n	80127e8 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801280c:	f7fb fe1e 	bl	800e44c <HAL_GetTick>
 8012810:	9b01      	ldr	r3, [sp, #4]
 8012812:	1ac0      	subs	r0, r0, r3
 8012814:	9b00      	ldr	r3, [sp, #0]
 8012816:	4298      	cmp	r0, r3
 8012818:	d3e6      	bcc.n	80127e8 <HAL_SPI_Transmit+0x142>
 801281a:	3301      	adds	r3, #1
 801281c:	d0e4      	beq.n	80127e8 <HAL_SPI_Transmit+0x142>
 801281e:	e7ca      	b.n	80127b6 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012820:	2320      	movs	r3, #32
 8012822:	6623      	str	r3, [r4, #96]	@ 0x60
 8012824:	e79d      	b.n	8012762 <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 8012826:	2702      	movs	r7, #2
 8012828:	e7ca      	b.n	80127c0 <HAL_SPI_Transmit+0x11a>
	...

0801282c <HAL_SPI_TransmitReceive>:
{
 801282c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801282e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8012830:	0003      	movs	r3, r0
 8012832:	335c      	adds	r3, #92	@ 0x5c
{
 8012834:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8012836:	781a      	ldrb	r2, [r3, #0]
{
 8012838:	0004      	movs	r4, r0
 801283a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 801283c:	2002      	movs	r0, #2
 801283e:	2a01      	cmp	r2, #1
 8012840:	d01b      	beq.n	801287a <HAL_SPI_TransmitReceive+0x4e>
 8012842:	2201      	movs	r2, #1
 8012844:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8012846:	f7fb fe01 	bl	800e44c <HAL_GetTick>
  tmp_state           = hspi->State;
 801284a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 801284c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 801284e:	335d      	adds	r3, #93	@ 0x5d
 8012850:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8012852:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8012854:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012856:	2b01      	cmp	r3, #1
 8012858:	d009      	beq.n	801286e <HAL_SPI_TransmitReceive+0x42>
 801285a:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 801285c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801285e:	005b      	lsls	r3, r3, #1
 8012860:	4299      	cmp	r1, r3
 8012862:	d107      	bne.n	8012874 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012864:	68a3      	ldr	r3, [r4, #8]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d104      	bne.n	8012874 <HAL_SPI_TransmitReceive+0x48>
 801286a:	2a04      	cmp	r2, #4
 801286c:	d102      	bne.n	8012874 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801286e:	2d00      	cmp	r5, #0
 8012870:	d104      	bne.n	801287c <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8012872:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8012874:	2300      	movs	r3, #0
 8012876:	345c      	adds	r4, #92	@ 0x5c
 8012878:	7023      	strb	r3, [r4, #0]
}
 801287a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801287c:	2f00      	cmp	r7, #0
 801287e:	d0f8      	beq.n	8012872 <HAL_SPI_TransmitReceive+0x46>
 8012880:	2e00      	cmp	r6, #0
 8012882:	d0f6      	beq.n	8012872 <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012884:	0023      	movs	r3, r4
 8012886:	335d      	adds	r3, #93	@ 0x5d
 8012888:	781a      	ldrb	r2, [r3, #0]
 801288a:	2a04      	cmp	r2, #4
 801288c:	d001      	beq.n	8012892 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801288e:	2205      	movs	r2, #5
 8012890:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8012892:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012894:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8012896:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012898:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801289a:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801289c:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801289e:	1da2      	adds	r2, r4, #6
 80128a0:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80128a2:	22e0      	movs	r2, #224	@ 0xe0
 80128a4:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80128a6:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80128a8:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80128aa:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80128ac:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 80128ae:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80128b0:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80128b2:	00d2      	lsls	r2, r2, #3
 80128b4:	4290      	cmp	r0, r2
 80128b6:	d935      	bls.n	8012924 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80128b8:	685a      	ldr	r2, [r3, #4]
 80128ba:	4f60      	ldr	r7, [pc, #384]	@ (8012a3c <HAL_SPI_TransmitReceive+0x210>)
 80128bc:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80128be:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80128c0:	2240      	movs	r2, #64	@ 0x40
 80128c2:	681f      	ldr	r7, [r3, #0]
 80128c4:	4217      	tst	r7, r2
 80128c6:	d102      	bne.n	80128ce <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80128c8:	681f      	ldr	r7, [r3, #0]
 80128ca:	433a      	orrs	r2, r7
 80128cc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80128ce:	22e0      	movs	r2, #224	@ 0xe0
 80128d0:	00d2      	lsls	r2, r2, #3
 80128d2:	4290      	cmp	r0, r2
 80128d4:	d961      	bls.n	801299a <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80128d6:	2900      	cmp	r1, #0
 80128d8:	d001      	beq.n	80128de <HAL_SPI_TransmitReceive+0xb2>
 80128da:	2e01      	cmp	r6, #1
 80128dc:	d107      	bne.n	80128ee <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80128de:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80128e0:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80128e2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80128e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80128e6:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80128e8:	3b01      	subs	r3, #1
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80128ee:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80128f0:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80128f2:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80128f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d119      	bne.n	801292e <HAL_SPI_TransmitReceive+0x102>
 80128fa:	0023      	movs	r3, r4
 80128fc:	3308      	adds	r3, #8
 80128fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012900:	2b00      	cmp	r3, #0
 8012902:	d114      	bne.n	801292e <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012904:	0020      	movs	r0, r4
 8012906:	9a01      	ldr	r2, [sp, #4]
 8012908:	9908      	ldr	r1, [sp, #32]
 801290a:	f7ff fe38 	bl	801257e <SPI_EndRxTxTransaction>
 801290e:	2800      	cmp	r0, #0
 8012910:	d000      	beq.n	8012914 <HAL_SPI_TransmitReceive+0xe8>
 8012912:	e08e      	b.n	8012a32 <HAL_SPI_TransmitReceive+0x206>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012914:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012916:	2b00      	cmp	r3, #0
 8012918:	d1ab      	bne.n	8012872 <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 801291a:	0023      	movs	r3, r4
 801291c:	2201      	movs	r2, #1
 801291e:	335d      	adds	r3, #93	@ 0x5d
 8012920:	701a      	strb	r2, [r3, #0]
 8012922:	e7a7      	b.n	8012874 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012924:	2280      	movs	r2, #128	@ 0x80
 8012926:	685f      	ldr	r7, [r3, #4]
 8012928:	0152      	lsls	r2, r2, #5
 801292a:	433a      	orrs	r2, r7
 801292c:	e7c7      	b.n	80128be <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801292e:	6820      	ldr	r0, [r4, #0]
 8012930:	6883      	ldr	r3, [r0, #8]
 8012932:	423b      	tst	r3, r7
 8012934:	d00e      	beq.n	8012954 <HAL_SPI_TransmitReceive+0x128>
 8012936:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00b      	beq.n	8012954 <HAL_SPI_TransmitReceive+0x128>
 801293c:	2d01      	cmp	r5, #1
 801293e:	d108      	bne.n	8012952 <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012940:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012942:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012944:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012946:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012948:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 801294a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801294c:	3b01      	subs	r3, #1
 801294e:	b29b      	uxth	r3, r3
 8012950:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 8012952:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012954:	6883      	ldr	r3, [r0, #8]
 8012956:	0019      	movs	r1, r3
 8012958:	4031      	ands	r1, r6
 801295a:	4233      	tst	r3, r6
 801295c:	d00e      	beq.n	801297c <HAL_SPI_TransmitReceive+0x150>
 801295e:	0022      	movs	r2, r4
 8012960:	3208      	adds	r2, #8
 8012962:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012964:	2b00      	cmp	r3, #0
 8012966:	d009      	beq.n	801297c <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8012968:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801296a:	68c0      	ldr	r0, [r0, #12]
 801296c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801296e:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012970:	3302      	adds	r3, #2
 8012972:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012974:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012976:	3b01      	subs	r3, #1
 8012978:	b29b      	uxth	r3, r3
 801297a:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801297c:	f7fb fd66 	bl	800e44c <HAL_GetTick>
 8012980:	9b01      	ldr	r3, [sp, #4]
 8012982:	1ac0      	subs	r0, r0, r3
 8012984:	9b08      	ldr	r3, [sp, #32]
 8012986:	4298      	cmp	r0, r3
 8012988:	d3b4      	bcc.n	80128f4 <HAL_SPI_TransmitReceive+0xc8>
 801298a:	3301      	adds	r3, #1
 801298c:	d0b2      	beq.n	80128f4 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 801298e:	0023      	movs	r3, r4
 8012990:	2201      	movs	r2, #1
 8012992:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8012994:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8012996:	701a      	strb	r2, [r3, #0]
        goto error;
 8012998:	e76c      	b.n	8012874 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801299a:	2900      	cmp	r1, #0
 801299c:	d001      	beq.n	80129a2 <HAL_SPI_TransmitReceive+0x176>
 801299e:	2e01      	cmp	r6, #1
 80129a0:	d108      	bne.n	80129b4 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80129a2:	782a      	ldrb	r2, [r5, #0]
 80129a4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80129a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80129a8:	3301      	adds	r3, #1
 80129aa:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80129ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80129ae:	3b01      	subs	r3, #1
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80129b4:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80129b6:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80129b8:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80129ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d104      	bne.n	80129ca <HAL_SPI_TransmitReceive+0x19e>
 80129c0:	0023      	movs	r3, r4
 80129c2:	3308      	adds	r3, #8
 80129c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d09c      	beq.n	8012904 <HAL_SPI_TransmitReceive+0xd8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80129ca:	6823      	ldr	r3, [r4, #0]
 80129cc:	689a      	ldr	r2, [r3, #8]
 80129ce:	423a      	tst	r2, r7
 80129d0:	d00f      	beq.n	80129f2 <HAL_SPI_TransmitReceive+0x1c6>
 80129d2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80129d4:	2a00      	cmp	r2, #0
 80129d6:	d00c      	beq.n	80129f2 <HAL_SPI_TransmitReceive+0x1c6>
 80129d8:	2d01      	cmp	r5, #1
 80129da:	d109      	bne.n	80129f0 <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80129dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80129de:	7812      	ldrb	r2, [r2, #0]
 80129e0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80129e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80129e4:	3301      	adds	r3, #1
 80129e6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80129e8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80129ea:	3b01      	subs	r3, #1
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80129f0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80129f2:	6823      	ldr	r3, [r4, #0]
 80129f4:	689a      	ldr	r2, [r3, #8]
 80129f6:	0011      	movs	r1, r2
 80129f8:	4031      	ands	r1, r6
 80129fa:	4232      	tst	r2, r6
 80129fc:	d00f      	beq.n	8012a1e <HAL_SPI_TransmitReceive+0x1f2>
 80129fe:	0022      	movs	r2, r4
 8012a00:	3208      	adds	r2, #8
 8012a02:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 8012a04:	2800      	cmp	r0, #0
 8012a06:	d00a      	beq.n	8012a1e <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 8012a08:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012a0a:	7b1b      	ldrb	r3, [r3, #12]
 8012a0c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8012a0e:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8012a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012a12:	3301      	adds	r3, #1
 8012a14:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012a16:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012a18:	3b01      	subs	r3, #1
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012a1e:	f7fb fd15 	bl	800e44c <HAL_GetTick>
 8012a22:	9b01      	ldr	r3, [sp, #4]
 8012a24:	1ac0      	subs	r0, r0, r3
 8012a26:	9b08      	ldr	r3, [sp, #32]
 8012a28:	4298      	cmp	r0, r3
 8012a2a:	d3c6      	bcc.n	80129ba <HAL_SPI_TransmitReceive+0x18e>
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	d0c4      	beq.n	80129ba <HAL_SPI_TransmitReceive+0x18e>
 8012a30:	e7ad      	b.n	801298e <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012a32:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8012a34:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012a36:	6623      	str	r3, [r4, #96]	@ 0x60
 8012a38:	e76c      	b.n	8012914 <HAL_SPI_TransmitReceive+0xe8>
 8012a3a:	46c0      	nop			@ (mov r8, r8)
 8012a3c:	ffffefff 	.word	0xffffefff

08012a40 <HAL_SPI_Receive>:
{
 8012a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8012a42:	0006      	movs	r6, r0
{
 8012a44:	b087      	sub	sp, #28
 8012a46:	9104      	str	r1, [sp, #16]
 8012a48:	9303      	str	r3, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8012a4a:	365d      	adds	r6, #93	@ 0x5d
 8012a4c:	7833      	ldrb	r3, [r6, #0]
{
 8012a4e:	0004      	movs	r4, r0
 8012a50:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8012a52:	b2dd      	uxtb	r5, r3
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d000      	beq.n	8012a5a <HAL_SPI_Receive+0x1a>
 8012a58:	e0aa      	b.n	8012bb0 <HAL_SPI_Receive+0x170>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012a5a:	3304      	adds	r3, #4
 8012a5c:	6842      	ldr	r2, [r0, #4]
 8012a5e:	33ff      	adds	r3, #255	@ 0xff
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d10e      	bne.n	8012a82 <HAL_SPI_Receive+0x42>
 8012a64:	6883      	ldr	r3, [r0, #8]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d10b      	bne.n	8012a82 <HAL_SPI_Receive+0x42>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012a6e:	9b03      	ldr	r3, [sp, #12]
 8012a70:	000a      	movs	r2, r1
 8012a72:	9300      	str	r3, [sp, #0]
 8012a74:	003b      	movs	r3, r7
 8012a76:	f7ff fed9 	bl	801282c <HAL_SPI_TransmitReceive>
 8012a7a:	0005      	movs	r5, r0
}
 8012a7c:	0028      	movs	r0, r5
 8012a7e:	b007      	add	sp, #28
 8012a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8012a82:	0023      	movs	r3, r4
 8012a84:	335c      	adds	r3, #92	@ 0x5c
 8012a86:	781a      	ldrb	r2, [r3, #0]
 8012a88:	2a01      	cmp	r2, #1
 8012a8a:	d100      	bne.n	8012a8e <HAL_SPI_Receive+0x4e>
 8012a8c:	e092      	b.n	8012bb4 <HAL_SPI_Receive+0x174>
 8012a8e:	2201      	movs	r2, #1
 8012a90:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8012a92:	f7fb fcdb 	bl	800e44c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8012a96:	9b04      	ldr	r3, [sp, #16]
  tickstart = HAL_GetTick();
 8012a98:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d077      	beq.n	8012b8e <HAL_SPI_Receive+0x14e>
 8012a9e:	2f00      	cmp	r7, #0
 8012aa0:	d075      	beq.n	8012b8e <HAL_SPI_Receive+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012aa2:	2304      	movs	r3, #4
 8012aa4:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012aa6:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012aa8:	9a04      	ldr	r2, [sp, #16]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012aaa:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012aac:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8012aae:	1da2      	adds	r2, r4, #6
 8012ab0:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 8012ab2:	3202      	adds	r2, #2
 8012ab4:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012ab6:	22e0      	movs	r2, #224	@ 0xe0
 8012ab8:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012aba:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8012abc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8012abe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8012ac0:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012ac2:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012ac4:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012ac6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012ac8:	4291      	cmp	r1, r2
 8012aca:	d92f      	bls.n	8012b2c <HAL_SPI_Receive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012acc:	685a      	ldr	r2, [r3, #4]
 8012ace:	483a      	ldr	r0, [pc, #232]	@ (8012bb8 <HAL_SPI_Receive+0x178>)
 8012ad0:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012ad2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012ad4:	2280      	movs	r2, #128	@ 0x80
 8012ad6:	68a0      	ldr	r0, [r4, #8]
 8012ad8:	0212      	lsls	r2, r2, #8
 8012ada:	4290      	cmp	r0, r2
 8012adc:	d107      	bne.n	8012aee <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8012ade:	2040      	movs	r0, #64	@ 0x40
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	4382      	bics	r2, r0
 8012ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012ae6:	681a      	ldr	r2, [r3, #0]
 8012ae8:	4834      	ldr	r0, [pc, #208]	@ (8012bbc <HAL_SPI_Receive+0x17c>)
 8012aea:	4002      	ands	r2, r0
 8012aec:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012aee:	2240      	movs	r2, #64	@ 0x40
 8012af0:	6818      	ldr	r0, [r3, #0]
 8012af2:	4210      	tst	r0, r2
 8012af4:	d102      	bne.n	8012afc <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8012af6:	6818      	ldr	r0, [r3, #0]
 8012af8:	4302      	orrs	r2, r0
 8012afa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012afc:	23e0      	movs	r3, #224	@ 0xe0
 8012afe:	0027      	movs	r7, r4
 8012b00:	00db      	lsls	r3, r3, #3
 8012b02:	3708      	adds	r7, #8
 8012b04:	4299      	cmp	r1, r3
 8012b06:	d925      	bls.n	8012b54 <HAL_SPI_Receive+0x114>
    while (hspi->RxXferCount > 0U)
 8012b08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d025      	beq.n	8012b5a <HAL_SPI_Receive+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012b0e:	2101      	movs	r1, #1
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	689a      	ldr	r2, [r3, #8]
 8012b14:	420a      	tst	r2, r1
 8012b16:	d03e      	beq.n	8012b96 <HAL_SPI_Receive+0x156>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012b18:	68da      	ldr	r2, [r3, #12]
 8012b1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012b1e:	3302      	adds	r3, #2
 8012b20:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012b22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b24:	3b01      	subs	r3, #1
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012b2a:	e7ed      	b.n	8012b08 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012b2c:	2280      	movs	r2, #128	@ 0x80
 8012b2e:	6858      	ldr	r0, [r3, #4]
 8012b30:	0152      	lsls	r2, r2, #5
 8012b32:	4302      	orrs	r2, r0
 8012b34:	e7cd      	b.n	8012ad2 <HAL_SPI_Receive+0x92>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012b36:	2101      	movs	r1, #1
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	689a      	ldr	r2, [r3, #8]
 8012b3c:	420a      	tst	r2, r1
 8012b3e:	d01a      	beq.n	8012b76 <HAL_SPI_Receive+0x136>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012b40:	7b1b      	ldrb	r3, [r3, #12]
 8012b42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012b44:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012b46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b48:	185b      	adds	r3, r3, r1
 8012b4a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012b4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8012b54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d1ed      	bne.n	8012b36 <HAL_SPI_Receive+0xf6>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012b5a:	0020      	movs	r0, r4
 8012b5c:	9a05      	ldr	r2, [sp, #20]
 8012b5e:	9903      	ldr	r1, [sp, #12]
 8012b60:	f7ff fcd0 	bl	8012504 <SPI_EndRxTransaction>
 8012b64:	2800      	cmp	r0, #0
 8012b66:	d120      	bne.n	8012baa <HAL_SPI_Receive+0x16a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012b68:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d10f      	bne.n	8012b8e <HAL_SPI_Receive+0x14e>
    hspi->State = HAL_SPI_STATE_READY;
 8012b6e:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012b70:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 8012b72:	7032      	strb	r2, [r6, #0]
 8012b74:	e00b      	b.n	8012b8e <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012b76:	f7fb fc69 	bl	800e44c <HAL_GetTick>
 8012b7a:	9b05      	ldr	r3, [sp, #20]
 8012b7c:	1ac0      	subs	r0, r0, r3
 8012b7e:	9b03      	ldr	r3, [sp, #12]
 8012b80:	4298      	cmp	r0, r3
 8012b82:	d3e7      	bcc.n	8012b54 <HAL_SPI_Receive+0x114>
 8012b84:	3301      	adds	r3, #1
 8012b86:	d0e5      	beq.n	8012b54 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8012b88:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8012b8a:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8012b8c:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 8012b8e:	2300      	movs	r3, #0
 8012b90:	345c      	adds	r4, #92	@ 0x5c
 8012b92:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8012b94:	e772      	b.n	8012a7c <HAL_SPI_Receive+0x3c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012b96:	f7fb fc59 	bl	800e44c <HAL_GetTick>
 8012b9a:	9b05      	ldr	r3, [sp, #20]
 8012b9c:	1ac0      	subs	r0, r0, r3
 8012b9e:	9b03      	ldr	r3, [sp, #12]
 8012ba0:	4298      	cmp	r0, r3
 8012ba2:	d3b1      	bcc.n	8012b08 <HAL_SPI_Receive+0xc8>
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	d0af      	beq.n	8012b08 <HAL_SPI_Receive+0xc8>
 8012ba8:	e7ee      	b.n	8012b88 <HAL_SPI_Receive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012baa:	2320      	movs	r3, #32
 8012bac:	6623      	str	r3, [r4, #96]	@ 0x60
 8012bae:	e7db      	b.n	8012b68 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 8012bb0:	2502      	movs	r5, #2
 8012bb2:	e7ec      	b.n	8012b8e <HAL_SPI_Receive+0x14e>
  __HAL_LOCK(hspi);
 8012bb4:	2502      	movs	r5, #2
 8012bb6:	e761      	b.n	8012a7c <HAL_SPI_Receive+0x3c>
 8012bb8:	ffffefff 	.word	0xffffefff
 8012bbc:	ffffbfff 	.word	0xffffbfff

08012bc0 <HAL_SPI_Transmit_DMA>:
{
 8012bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8012bc2:	0006      	movs	r6, r0
 8012bc4:	365c      	adds	r6, #92	@ 0x5c
 8012bc6:	7833      	ldrb	r3, [r6, #0]
{
 8012bc8:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8012bca:	2502      	movs	r5, #2
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d057      	beq.n	8012c80 <HAL_SPI_Transmit_DMA+0xc0>
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8012bd4:	0003      	movs	r3, r0
 8012bd6:	335d      	adds	r3, #93	@ 0x5d
 8012bd8:	7818      	ldrb	r0, [r3, #0]
 8012bda:	b2c5      	uxtb	r5, r0
 8012bdc:	2801      	cmp	r0, #1
 8012bde:	d000      	beq.n	8012be2 <HAL_SPI_Transmit_DMA+0x22>
 8012be0:	e06b      	b.n	8012cba <HAL_SPI_Transmit_DMA+0xfa>
  if ((pData == NULL) || (Size == 0U))
 8012be2:	2900      	cmp	r1, #0
 8012be4:	d04a      	beq.n	8012c7c <HAL_SPI_Transmit_DMA+0xbc>
 8012be6:	2a00      	cmp	r2, #0
 8012be8:	d048      	beq.n	8012c7c <HAL_SPI_Transmit_DMA+0xbc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012bea:	3002      	adds	r0, #2
 8012bec:	7018      	strb	r0, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012bee:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8012bf0:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012bf2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8012bf4:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 8012bf6:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012bf8:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8012bfa:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8012bfc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012bfe:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 8012c00:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8012c02:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8012c04:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c06:	2380      	movs	r3, #128	@ 0x80
 8012c08:	68a0      	ldr	r0, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8012c0a:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c0c:	021b      	lsls	r3, r3, #8
 8012c0e:	4298      	cmp	r0, r3
 8012c10:	d108      	bne.n	8012c24 <HAL_SPI_Transmit_DMA+0x64>
    __HAL_SPI_DISABLE(hspi);
 8012c12:	2040      	movs	r0, #64	@ 0x40
 8012c14:	6813      	ldr	r3, [r2, #0]
 8012c16:	4383      	bics	r3, r0
 8012c18:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8012c1a:	2380      	movs	r3, #128	@ 0x80
 8012c1c:	6810      	ldr	r0, [r2, #0]
 8012c1e:	01db      	lsls	r3, r3, #7
 8012c20:	4303      	orrs	r3, r0
 8012c22:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8012c24:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8012c26:	4b26      	ldr	r3, [pc, #152]	@ (8012cc0 <HAL_SPI_Transmit_DMA+0x100>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012c28:	4f26      	ldr	r7, [pc, #152]	@ (8012cc4 <HAL_SPI_Transmit_DMA+0x104>)
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8012c2a:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8012c2c:	4b26      	ldr	r3, [pc, #152]	@ (8012cc8 <HAL_SPI_Transmit_DMA+0x108>)
 8012c2e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8012c30:	4b26      	ldr	r3, [pc, #152]	@ (8012ccc <HAL_SPI_Transmit_DMA+0x10c>)
 8012c32:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8012c34:	2300      	movs	r3, #0
 8012c36:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012c38:	6853      	ldr	r3, [r2, #4]
 8012c3a:	403b      	ands	r3, r7
 8012c3c:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8012c3e:	23e0      	movs	r3, #224	@ 0xe0
 8012c40:	68e7      	ldr	r7, [r4, #12]
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	429f      	cmp	r7, r3
 8012c46:	d80e      	bhi.n	8012c66 <HAL_SPI_Transmit_DMA+0xa6>
 8012c48:	2380      	movs	r3, #128	@ 0x80
 8012c4a:	6987      	ldr	r7, [r0, #24]
 8012c4c:	00db      	lsls	r3, r3, #3
 8012c4e:	429f      	cmp	r7, r3
 8012c50:	d109      	bne.n	8012c66 <HAL_SPI_Transmit_DMA+0xa6>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8012c52:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012c54:	07db      	lsls	r3, r3, #31
 8012c56:	d415      	bmi.n	8012c84 <HAL_SPI_Transmit_DMA+0xc4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012c58:	6853      	ldr	r3, [r2, #4]
 8012c5a:	4f1a      	ldr	r7, [pc, #104]	@ (8012cc4 <HAL_SPI_Transmit_DMA+0x104>)
 8012c5c:	403b      	ands	r3, r7
 8012c5e:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8012c60:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012c62:	085b      	lsrs	r3, r3, #1
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012c64:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 8012c66:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012c68:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 8012c6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012c6c:	f7fc fbc2 	bl	800f3f4 <HAL_DMA_Start_IT>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d010      	beq.n	8012c96 <HAL_SPI_Transmit_DMA+0xd6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012c74:	2310      	movs	r3, #16
 8012c76:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012c78:	4313      	orrs	r3, r2
 8012c7a:	6623      	str	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	7033      	strb	r3, [r6, #0]
}
 8012c80:	0028      	movs	r0, r5
 8012c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012c84:	2380      	movs	r3, #128	@ 0x80
 8012c86:	6857      	ldr	r7, [r2, #4]
 8012c88:	01db      	lsls	r3, r3, #7
 8012c8a:	433b      	orrs	r3, r7
 8012c8c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012c8e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012c90:	085b      	lsrs	r3, r3, #1
 8012c92:	3301      	adds	r3, #1
 8012c94:	e7e6      	b.n	8012c64 <HAL_SPI_Transmit_DMA+0xa4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012c96:	2240      	movs	r2, #64	@ 0x40
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	6819      	ldr	r1, [r3, #0]
 8012c9c:	4211      	tst	r1, r2
 8012c9e:	d102      	bne.n	8012ca6 <HAL_SPI_Transmit_DMA+0xe6>
    __HAL_SPI_ENABLE(hspi);
 8012ca0:	6819      	ldr	r1, [r3, #0]
 8012ca2:	430a      	orrs	r2, r1
 8012ca4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012ca6:	2220      	movs	r2, #32
 8012ca8:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012caa:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012cac:	430a      	orrs	r2, r1
 8012cae:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	6859      	ldr	r1, [r3, #4]
 8012cb4:	430a      	orrs	r2, r1
 8012cb6:	605a      	str	r2, [r3, #4]
 8012cb8:	e7e0      	b.n	8012c7c <HAL_SPI_Transmit_DMA+0xbc>
    errorcode = HAL_BUSY;
 8012cba:	2502      	movs	r5, #2
 8012cbc:	e7de      	b.n	8012c7c <HAL_SPI_Transmit_DMA+0xbc>
 8012cbe:	46c0      	nop			@ (mov r8, r8)
 8012cc0:	08012fe9 	.word	0x08012fe9
 8012cc4:	ffffbfff 	.word	0xffffbfff
 8012cc8:	0801302f 	.word	0x0801302f
 8012ccc:	0801300b 	.word	0x0801300b

08012cd0 <HAL_SPI_TransmitReceive_DMA>:
{
 8012cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8012cd2:	0005      	movs	r5, r0
{
 8012cd4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8012cd6:	355c      	adds	r5, #92	@ 0x5c
 8012cd8:	782e      	ldrb	r6, [r5, #0]
{
 8012cda:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8012cdc:	2002      	movs	r0, #2
 8012cde:	2e01      	cmp	r6, #1
 8012ce0:	d057      	beq.n	8012d92 <HAL_SPI_TransmitReceive_DMA+0xc2>
  tmp_state           = hspi->State;
 8012ce2:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 8012ce4:	3801      	subs	r0, #1
 8012ce6:	7028      	strb	r0, [r5, #0]
  tmp_state           = hspi->State;
 8012ce8:	365d      	adds	r6, #93	@ 0x5d
 8012cea:	7830      	ldrb	r0, [r6, #0]
 8012cec:	b2c7      	uxtb	r7, r0
 8012cee:	003a      	movs	r2, r7
  tmp_mode            = hspi->Init.Mode;
 8012cf0:	6867      	ldr	r7, [r4, #4]
 8012cf2:	46bc      	mov	ip, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8012cf4:	2801      	cmp	r0, #1
 8012cf6:	d009      	beq.n	8012d0c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8012cf8:	2782      	movs	r7, #130	@ 0x82
    errorcode = HAL_BUSY;
 8012cfa:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8012cfc:	007f      	lsls	r7, r7, #1
 8012cfe:	45bc      	cmp	ip, r7
 8012d00:	d145      	bne.n	8012d8e <HAL_SPI_TransmitReceive_DMA+0xbe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012d02:	68a7      	ldr	r7, [r4, #8]
 8012d04:	2f00      	cmp	r7, #0
 8012d06:	d142      	bne.n	8012d8e <HAL_SPI_TransmitReceive_DMA+0xbe>
 8012d08:	2a04      	cmp	r2, #4
 8012d0a:	d140      	bne.n	8012d8e <HAL_SPI_TransmitReceive_DMA+0xbe>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012d0c:	2900      	cmp	r1, #0
 8012d0e:	d03d      	beq.n	8012d8c <HAL_SPI_TransmitReceive_DMA+0xbc>
 8012d10:	9a01      	ldr	r2, [sp, #4]
 8012d12:	2a00      	cmp	r2, #0
 8012d14:	d03a      	beq.n	8012d8c <HAL_SPI_TransmitReceive_DMA+0xbc>
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d038      	beq.n	8012d8c <HAL_SPI_TransmitReceive_DMA+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012d1a:	7830      	ldrb	r0, [r6, #0]
 8012d1c:	2804      	cmp	r0, #4
 8012d1e:	d001      	beq.n	8012d24 <HAL_SPI_TransmitReceive_DMA+0x54>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012d20:	2005      	movs	r0, #5
 8012d22:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d24:	2000      	movs	r0, #0
  hspi->RxXferCount = Size;
 8012d26:	0027      	movs	r7, r4
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012d28:	9a01      	ldr	r2, [sp, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012d2a:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012d2c:	1da1      	adds	r1, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d2e:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012d30:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8012d32:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8012d34:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012d36:	3708      	adds	r7, #8
  hspi->RxXferSize  = Size;
 8012d38:	87cb      	strh	r3, [r1, #62]	@ 0x3e
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012d3a:	6821      	ldr	r1, [r4, #0]
  hspi->RxXferCount = Size;
 8012d3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012d3e:	4a46      	ldr	r2, [pc, #280]	@ (8012e58 <HAL_SPI_TransmitReceive_DMA+0x188>)
  hspi->RxISR       = NULL;
 8012d40:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012d42:	6520      	str	r0, [r4, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012d44:	6848      	ldr	r0, [r1, #4]
 8012d46:	4010      	ands	r0, r2
 8012d48:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012d4a:	20e0      	movs	r0, #224	@ 0xe0
 8012d4c:	68e2      	ldr	r2, [r4, #12]
 8012d4e:	00c0      	lsls	r0, r0, #3
 8012d50:	4282      	cmp	r2, r0
 8012d52:	d91f      	bls.n	8012d94 <HAL_SPI_TransmitReceive_DMA+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012d54:	684b      	ldr	r3, [r1, #4]
 8012d56:	4841      	ldr	r0, [pc, #260]	@ (8012e5c <HAL_SPI_TransmitReceive_DMA+0x18c>)
 8012d58:	4003      	ands	r3, r0
 8012d5a:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8012d5c:	7833      	ldrb	r3, [r6, #0]
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012d5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8012d60:	2b04      	cmp	r3, #4
 8012d62:	d052      	beq.n	8012e0a <HAL_SPI_TransmitReceive_DMA+0x13a>
 8012d64:	4e3e      	ldr	r6, [pc, #248]	@ (8012e60 <HAL_SPI_TransmitReceive_DMA+0x190>)
 8012d66:	4b3f      	ldr	r3, [pc, #252]	@ (8012e64 <HAL_SPI_TransmitReceive_DMA+0x194>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8012d68:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8012e68 <HAL_SPI_TransmitReceive_DMA+0x198>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012d6c:	6306      	str	r6, [r0, #48]	@ 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012d6e:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8012d70:	2300      	movs	r3, #0
 8012d72:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 8012d74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012d76:	9a01      	ldr	r2, [sp, #4]
                                 hspi->RxXferCount))
 8012d78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012d7a:	310c      	adds	r1, #12
 8012d7c:	f7fc fb3a 	bl	800f3f4 <HAL_DMA_Start_IT>
 8012d80:	1e03      	subs	r3, r0, #0
 8012d82:	d045      	beq.n	8012e10 <HAL_SPI_TransmitReceive_DMA+0x140>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012d84:	2310      	movs	r3, #16
 8012d86:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8012d8c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8012d8e:	2300      	movs	r3, #0
 8012d90:	702b      	strb	r3, [r5, #0]
}
 8012d92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012d94:	2080      	movs	r0, #128	@ 0x80
 8012d96:	684a      	ldr	r2, [r1, #4]
 8012d98:	0140      	lsls	r0, r0, #5
 8012d9a:	4310      	orrs	r0, r2
 8012d9c:	6048      	str	r0, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012d9e:	2080      	movs	r0, #128	@ 0x80
 8012da0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012da2:	00c0      	lsls	r0, r0, #3
 8012da4:	6992      	ldr	r2, [r2, #24]
 8012da6:	4282      	cmp	r2, r0
 8012da8:	d108      	bne.n	8012dbc <HAL_SPI_TransmitReceive_DMA+0xec>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8012daa:	07db      	lsls	r3, r3, #31
 8012dac:	d41b      	bmi.n	8012de6 <HAL_SPI_TransmitReceive_DMA+0x116>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012dae:	684b      	ldr	r3, [r1, #4]
 8012db0:	482e      	ldr	r0, [pc, #184]	@ (8012e6c <HAL_SPI_TransmitReceive_DMA+0x19c>)
 8012db2:	4003      	ands	r3, r0
 8012db4:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8012db6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012db8:	085b      	lsrs	r3, r3, #1
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012dba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012dbc:	2380      	movs	r3, #128	@ 0x80
 8012dbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dc0:	00db      	lsls	r3, r3, #3
 8012dc2:	6980      	ldr	r0, [r0, #24]
 8012dc4:	4298      	cmp	r0, r3
 8012dc6:	d1c9      	bne.n	8012d5c <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012dc8:	684b      	ldr	r3, [r1, #4]
 8012dca:	4824      	ldr	r0, [pc, #144]	@ (8012e5c <HAL_SPI_TransmitReceive_DMA+0x18c>)
 8012dcc:	4003      	ands	r3, r0
 8012dce:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8012dd0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012dd2:	07db      	lsls	r3, r3, #31
 8012dd4:	d410      	bmi.n	8012df8 <HAL_SPI_TransmitReceive_DMA+0x128>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012dd6:	684b      	ldr	r3, [r1, #4]
 8012dd8:	4825      	ldr	r0, [pc, #148]	@ (8012e70 <HAL_SPI_TransmitReceive_DMA+0x1a0>)
 8012dda:	4003      	ands	r3, r0
 8012ddc:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8012dde:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012de0:	085b      	lsrs	r3, r3, #1
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012de2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012de4:	e7ba      	b.n	8012d5c <HAL_SPI_TransmitReceive_DMA+0x8c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012de6:	2380      	movs	r3, #128	@ 0x80
 8012de8:	6848      	ldr	r0, [r1, #4]
 8012dea:	01db      	lsls	r3, r3, #7
 8012dec:	4303      	orrs	r3, r0
 8012dee:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012df0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012df2:	085b      	lsrs	r3, r3, #1
 8012df4:	3301      	adds	r3, #1
 8012df6:	e7e0      	b.n	8012dba <HAL_SPI_TransmitReceive_DMA+0xea>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012df8:	2380      	movs	r3, #128	@ 0x80
 8012dfa:	6848      	ldr	r0, [r1, #4]
 8012dfc:	019b      	lsls	r3, r3, #6
 8012dfe:	4303      	orrs	r3, r0
 8012e00:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012e02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012e04:	085b      	lsrs	r3, r3, #1
 8012e06:	3301      	adds	r3, #1
 8012e08:	e7eb      	b.n	8012de2 <HAL_SPI_TransmitReceive_DMA+0x112>
 8012e0a:	4e1a      	ldr	r6, [pc, #104]	@ (8012e74 <HAL_SPI_TransmitReceive_DMA+0x1a4>)
 8012e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8012e78 <HAL_SPI_TransmitReceive_DMA+0x1a8>)
 8012e0e:	e7ab      	b.n	8012d68 <HAL_SPI_TransmitReceive_DMA+0x98>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012e10:	2101      	movs	r1, #1
 8012e12:	6822      	ldr	r2, [r4, #0]
 8012e14:	6850      	ldr	r0, [r2, #4]
 8012e16:	4301      	orrs	r1, r0
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012e18:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012e1a:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012e1c:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8012e1e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8012e20:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8012e22:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->TxXferCount))
 8012e24:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012e26:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                 hspi->TxXferCount))
 8012e28:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012e2a:	320c      	adds	r2, #12
 8012e2c:	f7fc fae2 	bl	800f3f4 <HAL_DMA_Start_IT>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	d1a7      	bne.n	8012d84 <HAL_SPI_TransmitReceive_DMA+0xb4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012e34:	2240      	movs	r2, #64	@ 0x40
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	6819      	ldr	r1, [r3, #0]
 8012e3a:	4211      	tst	r1, r2
 8012e3c:	d102      	bne.n	8012e44 <HAL_SPI_TransmitReceive_DMA+0x174>
    __HAL_SPI_ENABLE(hspi);
 8012e3e:	6819      	ldr	r1, [r3, #0]
 8012e40:	430a      	orrs	r2, r1
 8012e42:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012e44:	2220      	movs	r2, #32
 8012e46:	6859      	ldr	r1, [r3, #4]
 8012e48:	430a      	orrs	r2, r1
 8012e4a:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012e4c:	2202      	movs	r2, #2
 8012e4e:	6859      	ldr	r1, [r3, #4]
 8012e50:	430a      	orrs	r2, r1
 8012e52:	605a      	str	r2, [r3, #4]
 8012e54:	e79b      	b.n	8012d8e <HAL_SPI_TransmitReceive_DMA+0xbe>
 8012e56:	46c0      	nop			@ (mov r8, r8)
 8012e58:	ffff9fff 	.word	0xffff9fff
 8012e5c:	ffffefff 	.word	0xffffefff
 8012e60:	08013001 	.word	0x08013001
 8012e64:	0801310d 	.word	0x0801310d
 8012e68:	0801300b 	.word	0x0801300b
 8012e6c:	ffffbfff 	.word	0xffffbfff
 8012e70:	ffffdfff 	.word	0xffffdfff
 8012e74:	08012ff5 	.word	0x08012ff5
 8012e78:	0801309d 	.word	0x0801309d

08012e7c <HAL_SPI_Receive_DMA>:
{
 8012e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e7e:	0013      	movs	r3, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8012e80:	0002      	movs	r2, r0
 8012e82:	325d      	adds	r2, #93	@ 0x5d
{
 8012e84:	0004      	movs	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8012e86:	7810      	ldrb	r0, [r2, #0]
 8012e88:	b2c6      	uxtb	r6, r0
 8012e8a:	2801      	cmp	r0, #1
 8012e8c:	d000      	beq.n	8012e90 <HAL_SPI_Receive_DMA+0x14>
 8012e8e:	e099      	b.n	8012fc4 <HAL_SPI_Receive_DMA+0x148>
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012e90:	68a0      	ldr	r0, [r4, #8]
 8012e92:	2800      	cmp	r0, #0
 8012e94:	d10d      	bne.n	8012eb2 <HAL_SPI_Receive_DMA+0x36>
 8012e96:	2582      	movs	r5, #130	@ 0x82
 8012e98:	6867      	ldr	r7, [r4, #4]
 8012e9a:	006d      	lsls	r5, r5, #1
 8012e9c:	42af      	cmp	r7, r5
 8012e9e:	d108      	bne.n	8012eb2 <HAL_SPI_Receive_DMA+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012ea0:	3004      	adds	r0, #4
 8012ea2:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8012ea4:	000a      	movs	r2, r1
 8012ea6:	0020      	movs	r0, r4
 8012ea8:	f7ff ff12 	bl	8012cd0 <HAL_SPI_TransmitReceive_DMA>
 8012eac:	0006      	movs	r6, r0
}
 8012eae:	0030      	movs	r0, r6
 8012eb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8012eb2:	0025      	movs	r5, r4
 8012eb4:	355c      	adds	r5, #92	@ 0x5c
 8012eb6:	782f      	ldrb	r7, [r5, #0]
 8012eb8:	2f01      	cmp	r7, #1
 8012eba:	d100      	bne.n	8012ebe <HAL_SPI_Receive_DMA+0x42>
 8012ebc:	e084      	b.n	8012fc8 <HAL_SPI_Receive_DMA+0x14c>
 8012ebe:	2701      	movs	r7, #1
 8012ec0:	702f      	strb	r7, [r5, #0]
  if ((pData == NULL) || (Size == 0U))
 8012ec2:	2900      	cmp	r1, #0
 8012ec4:	d042      	beq.n	8012f4c <HAL_SPI_Receive_DMA+0xd0>
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d040      	beq.n	8012f4c <HAL_SPI_Receive_DMA+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012eca:	2504      	movs	r5, #4
  hspi->RxXferCount = Size;
 8012ecc:	0027      	movs	r7, r4
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012ece:	7015      	strb	r5, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ed0:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 8012ed2:	1da5      	adds	r5, r4, #6
  hspi->RxXferCount = Size;
 8012ed4:	3708      	adds	r7, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ed6:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012ed8:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8012eda:	87eb      	strh	r3, [r5, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 8012edc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012ede:	2380      	movs	r3, #128	@ 0x80
    __HAL_SPI_DISABLE(hspi);
 8012ee0:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferCount = Size;
 8012ee2:	9701      	str	r7, [sp, #4]
  hspi->RxISR       = NULL;
 8012ee4:	64e2      	str	r2, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012ee6:	6522      	str	r2, [r4, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8012ee8:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8012eea:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012eec:	021b      	lsls	r3, r3, #8
 8012eee:	4298      	cmp	r0, r3
 8012ef0:	d107      	bne.n	8012f02 <HAL_SPI_Receive_DMA+0x86>
    __HAL_SPI_DISABLE(hspi);
 8012ef2:	682b      	ldr	r3, [r5, #0]
 8012ef4:	3240      	adds	r2, #64	@ 0x40
 8012ef6:	4393      	bics	r3, r2
 8012ef8:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8012efa:	682b      	ldr	r3, [r5, #0]
 8012efc:	4a33      	ldr	r2, [pc, #204]	@ (8012fcc <HAL_SPI_Receive_DMA+0x150>)
 8012efe:	4013      	ands	r3, r2
 8012f00:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012f02:	4a33      	ldr	r2, [pc, #204]	@ (8012fd0 <HAL_SPI_Receive_DMA+0x154>)
 8012f04:	686b      	ldr	r3, [r5, #4]
 8012f06:	4694      	mov	ip, r2
 8012f08:	4013      	ands	r3, r2
 8012f0a:	606b      	str	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012f0c:	23e0      	movs	r3, #224	@ 0xe0
 8012f0e:	68e2      	ldr	r2, [r4, #12]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012f12:	00db      	lsls	r3, r3, #3
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d91d      	bls.n	8012f54 <HAL_SPI_Receive_DMA+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012f18:	686b      	ldr	r3, [r5, #4]
 8012f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8012fd4 <HAL_SPI_Receive_DMA+0x158>)
 8012f1c:	4013      	ands	r3, r2
 8012f1e:	606b      	str	r3, [r5, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012f20:	4b2d      	ldr	r3, [pc, #180]	@ (8012fd8 <HAL_SPI_Receive_DMA+0x15c>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012f22:	350c      	adds	r5, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012f24:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012f26:	4b2d      	ldr	r3, [pc, #180]	@ (8012fdc <HAL_SPI_Receive_DMA+0x160>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012f28:	000a      	movs	r2, r1
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012f2a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8012fe0 <HAL_SPI_Receive_DMA+0x164>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012f2e:	0029      	movs	r1, r5
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012f30:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 8012f36:	9b01      	ldr	r3, [sp, #4]
 8012f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012f3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012f3c:	f7fc fa5a 	bl	800f3f4 <HAL_DMA_Start_IT>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d02d      	beq.n	8012fa0 <HAL_SPI_Receive_DMA+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012f44:	2310      	movs	r3, #16
 8012f46:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012f48:	4313      	orrs	r3, r2
 8012f4a:	6623      	str	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	345c      	adds	r4, #92	@ 0x5c
 8012f50:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8012f52:	e7ac      	b.n	8012eae <HAL_SPI_Receive_DMA+0x32>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012f54:	2380      	movs	r3, #128	@ 0x80
 8012f56:	686a      	ldr	r2, [r5, #4]
 8012f58:	015b      	lsls	r3, r3, #5
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	606b      	str	r3, [r5, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012f5e:	2380      	movs	r3, #128	@ 0x80
 8012f60:	6982      	ldr	r2, [r0, #24]
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d1db      	bne.n	8012f20 <HAL_SPI_Receive_DMA+0xa4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012f68:	686b      	ldr	r3, [r5, #4]
 8012f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8012fd4 <HAL_SPI_Receive_DMA+0x158>)
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	606b      	str	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8012f70:	0023      	movs	r3, r4
 8012f72:	3308      	adds	r3, #8
 8012f74:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012f76:	07d2      	lsls	r2, r2, #31
 8012f78:	d407      	bmi.n	8012f8a <HAL_SPI_Receive_DMA+0x10e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012f7a:	4667      	mov	r7, ip
 8012f7c:	686a      	ldr	r2, [r5, #4]
 8012f7e:	403a      	ands	r2, r7
 8012f80:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8012f82:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012f84:	0852      	lsrs	r2, r2, #1
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012f88:	e7ca      	b.n	8012f20 <HAL_SPI_Receive_DMA+0xa4>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012f8a:	686a      	ldr	r2, [r5, #4]
 8012f8c:	4694      	mov	ip, r2
 8012f8e:	2280      	movs	r2, #128	@ 0x80
 8012f90:	4667      	mov	r7, ip
 8012f92:	0192      	lsls	r2, r2, #6
 8012f94:	433a      	orrs	r2, r7
 8012f96:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012f98:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012f9a:	0852      	lsrs	r2, r2, #1
 8012f9c:	3201      	adds	r2, #1
 8012f9e:	e7f2      	b.n	8012f86 <HAL_SPI_Receive_DMA+0x10a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012fa0:	2240      	movs	r2, #64	@ 0x40
 8012fa2:	6823      	ldr	r3, [r4, #0]
 8012fa4:	6819      	ldr	r1, [r3, #0]
 8012fa6:	4211      	tst	r1, r2
 8012fa8:	d102      	bne.n	8012fb0 <HAL_SPI_Receive_DMA+0x134>
    __HAL_SPI_ENABLE(hspi);
 8012faa:	6819      	ldr	r1, [r3, #0]
 8012fac:	430a      	orrs	r2, r1
 8012fae:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012fb0:	2220      	movs	r2, #32
 8012fb2:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012fb4:	2600      	movs	r6, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012fb6:	430a      	orrs	r2, r1
 8012fb8:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012fba:	2201      	movs	r2, #1
 8012fbc:	6859      	ldr	r1, [r3, #4]
 8012fbe:	430a      	orrs	r2, r1
 8012fc0:	605a      	str	r2, [r3, #4]
 8012fc2:	e7c3      	b.n	8012f4c <HAL_SPI_Receive_DMA+0xd0>
    errorcode = HAL_BUSY;
 8012fc4:	2602      	movs	r6, #2
 8012fc6:	e7c1      	b.n	8012f4c <HAL_SPI_Receive_DMA+0xd0>
  __HAL_LOCK(hspi);
 8012fc8:	2602      	movs	r6, #2
 8012fca:	e770      	b.n	8012eae <HAL_SPI_Receive_DMA+0x32>
 8012fcc:	ffffbfff 	.word	0xffffbfff
 8012fd0:	ffffdfff 	.word	0xffffdfff
 8012fd4:	ffffefff 	.word	0xffffefff
 8012fd8:	08012ff5 	.word	0x08012ff5
 8012fdc:	0801309d 	.word	0x0801309d
 8012fe0:	0801300b 	.word	0x0801300b

08012fe4 <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
 8012fe4:	4770      	bx	lr

08012fe6 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8012fe6:	4770      	bx	lr

08012fe8 <SPI_DMAHalfTransmitCplt>:
{
 8012fe8:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012fea:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012fec:	f7ff fffb 	bl	8012fe6 <HAL_SPI_TxHalfCpltCallback>
}
 8012ff0:	bd10      	pop	{r4, pc}

08012ff2 <HAL_SPI_RxHalfCpltCallback>:
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8012ff2:	4770      	bx	lr

08012ff4 <SPI_DMAHalfReceiveCplt>:
{
 8012ff4:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012ff6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012ff8:	f7ff fffb 	bl	8012ff2 <HAL_SPI_RxHalfCpltCallback>
}
 8012ffc:	bd10      	pop	{r4, pc}

08012ffe <HAL_SPI_TxRxHalfCpltCallback>:
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8012ffe:	4770      	bx	lr

08013000 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8013000:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8013002:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013004:	f7ff fffb 	bl	8012ffe <HAL_SPI_TxRxHalfCpltCallback>
}
 8013008:	bd10      	pop	{r4, pc}

0801300a <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801300a:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801300c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 801300e:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013010:	6802      	ldr	r2, [r0, #0]
 8013012:	6853      	ldr	r3, [r2, #4]
 8013014:	438b      	bics	r3, r1
 8013016:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013018:	2310      	movs	r3, #16
 801301a:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 801301c:	4313      	orrs	r3, r2
 801301e:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8013020:	0003      	movs	r3, r0
 8013022:	2201      	movs	r2, #1
 8013024:	335d      	adds	r3, #93	@ 0x5d
 8013026:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8013028:	f7f7 f9ac 	bl	800a384 <HAL_SPI_ErrorCallback>
}
 801302c:	bd10      	pop	{r4, pc}

0801302e <SPI_DMATransmitCplt>:
{
 801302e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013030:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013032:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8013034:	f7fb fa0a 	bl	800e44c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	2520      	movs	r5, #32
 801303c:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 801303e:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8013040:	422b      	tst	r3, r5
 8013042:	d127      	bne.n	8013094 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013044:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013046:	6823      	ldr	r3, [r4, #0]
 8013048:	6859      	ldr	r1, [r3, #4]
 801304a:	43a9      	bics	r1, r5
 801304c:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801304e:	6859      	ldr	r1, [r3, #4]
 8013050:	4381      	bics	r1, r0
 8013052:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013054:	0020      	movs	r0, r4
 8013056:	2164      	movs	r1, #100	@ 0x64
 8013058:	f7ff fa91 	bl	801257e <SPI_EndRxTxTransaction>
 801305c:	2800      	cmp	r0, #0
 801305e:	d002      	beq.n	8013066 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013060:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8013062:	431d      	orrs	r5, r3
 8013064:	6625      	str	r5, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013066:	68a3      	ldr	r3, [r4, #8]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d106      	bne.n	801307a <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801306c:	9301      	str	r3, [sp, #4]
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	68da      	ldr	r2, [r3, #12]
 8013072:	9201      	str	r2, [sp, #4]
 8013074:	689b      	ldr	r3, [r3, #8]
 8013076:	9301      	str	r3, [sp, #4]
 8013078:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 801307a:	2300      	movs	r3, #0
 801307c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801307e:	0023      	movs	r3, r4
 8013080:	2201      	movs	r2, #1
 8013082:	335d      	adds	r3, #93	@ 0x5d
 8013084:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013086:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8013088:	2b00      	cmp	r3, #0
 801308a:	d003      	beq.n	8013094 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 801308c:	0020      	movs	r0, r4
 801308e:	f7f7 f979 	bl	800a384 <HAL_SPI_ErrorCallback>
}
 8013092:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8013094:	0020      	movs	r0, r4
 8013096:	f7f7 f965 	bl	800a364 <HAL_SPI_TxCpltCallback>
 801309a:	e7fa      	b.n	8013092 <SPI_DMATransmitCplt+0x64>

0801309c <SPI_DMAReceiveCplt>:
{
 801309c:	b570      	push	{r4, r5, r6, lr}
 801309e:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80130a0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80130a2:	f7fb f9d3 	bl	800e44c <HAL_GetTick>
 80130a6:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80130a8:	2020      	movs	r0, #32
 80130aa:	682b      	ldr	r3, [r5, #0]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	4203      	tst	r3, r0
 80130b0:	d128      	bne.n	8013104 <SPI_DMAReceiveCplt+0x68>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	6859      	ldr	r1, [r3, #4]
 80130b6:	4381      	bics	r1, r0
 80130b8:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80130ba:	68a1      	ldr	r1, [r4, #8]
 80130bc:	2900      	cmp	r1, #0
 80130be:	d11e      	bne.n	80130fe <SPI_DMAReceiveCplt+0x62>
 80130c0:	3105      	adds	r1, #5
 80130c2:	6860      	ldr	r0, [r4, #4]
 80130c4:	31ff      	adds	r1, #255	@ 0xff
 80130c6:	4288      	cmp	r0, r1
 80130c8:	d119      	bne.n	80130fe <SPI_DMAReceiveCplt+0x62>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80130ca:	2003      	movs	r0, #3
 80130cc:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80130ce:	4381      	bics	r1, r0
 80130d0:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80130d2:	0020      	movs	r0, r4
 80130d4:	2164      	movs	r1, #100	@ 0x64
 80130d6:	f7ff fa15 	bl	8012504 <SPI_EndRxTransaction>
 80130da:	2800      	cmp	r0, #0
 80130dc:	d001      	beq.n	80130e2 <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80130de:	2320      	movs	r3, #32
 80130e0:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->RxXferCount = 0U;
 80130e2:	0023      	movs	r3, r4
 80130e4:	2200      	movs	r2, #0
 80130e6:	3308      	adds	r3, #8
 80130e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80130ea:	3355      	adds	r3, #85	@ 0x55
 80130ec:	3201      	adds	r2, #1
 80130ee:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80130f0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d006      	beq.n	8013104 <SPI_DMAReceiveCplt+0x68>
      HAL_SPI_ErrorCallback(hspi);
 80130f6:	0020      	movs	r0, r4
 80130f8:	f7f7 f944 	bl	800a384 <HAL_SPI_ErrorCallback>
}
 80130fc:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80130fe:	2001      	movs	r0, #1
 8013100:	6859      	ldr	r1, [r3, #4]
 8013102:	e7e4      	b.n	80130ce <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 8013104:	0020      	movs	r0, r4
 8013106:	f7f7 f939 	bl	800a37c <HAL_SPI_RxCpltCallback>
 801310a:	e7f7      	b.n	80130fc <SPI_DMAReceiveCplt+0x60>

0801310c <SPI_DMATransmitReceiveCplt>:
{
 801310c:	b570      	push	{r4, r5, r6, lr}
 801310e:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013110:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8013112:	f7fb f99b 	bl	800e44c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8013116:	682b      	ldr	r3, [r5, #0]
 8013118:	2520      	movs	r5, #32
 801311a:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 801311c:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801311e:	422b      	tst	r3, r5
 8013120:	d121      	bne.n	8013166 <SPI_DMATransmitReceiveCplt+0x5a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013122:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013124:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013126:	684b      	ldr	r3, [r1, #4]
 8013128:	43ab      	bics	r3, r5
 801312a:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801312c:	2164      	movs	r1, #100	@ 0x64
 801312e:	f7ff fa26 	bl	801257e <SPI_EndRxTxTransaction>
 8013132:	2800      	cmp	r0, #0
 8013134:	d002      	beq.n	801313c <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013136:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8013138:	431d      	orrs	r5, r3
 801313a:	6625      	str	r5, [r4, #96]	@ 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801313c:	2103      	movs	r1, #3
 801313e:	6822      	ldr	r2, [r4, #0]
 8013140:	6853      	ldr	r3, [r2, #4]
 8013142:	438b      	bics	r3, r1
 8013144:	6053      	str	r3, [r2, #4]
    hspi->RxXferCount = 0U;
 8013146:	0022      	movs	r2, r4
    hspi->TxXferCount = 0U;
 8013148:	2300      	movs	r3, #0
    hspi->RxXferCount = 0U;
 801314a:	3208      	adds	r2, #8
    hspi->TxXferCount = 0U;
 801314c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 801314e:	87d3      	strh	r3, [r2, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8013150:	0023      	movs	r3, r4
 8013152:	2201      	movs	r2, #1
 8013154:	335d      	adds	r3, #93	@ 0x5d
 8013156:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013158:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801315a:	2b00      	cmp	r3, #0
 801315c:	d003      	beq.n	8013166 <SPI_DMATransmitReceiveCplt+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 801315e:	0020      	movs	r0, r4
 8013160:	f7f7 f910 	bl	800a384 <HAL_SPI_ErrorCallback>
}
 8013164:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8013166:	0020      	movs	r0, r4
 8013168:	f7ff ff3c 	bl	8012fe4 <HAL_SPI_TxRxCpltCallback>
 801316c:	e7fa      	b.n	8013164 <SPI_DMATransmitReceiveCplt+0x58>
	...

08013170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013170:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013172:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013176:	2201      	movs	r2, #1
 8013178:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801317c:	6801      	ldr	r1, [r0, #0]
 801317e:	4d13      	ldr	r5, [pc, #76]	@ (80131cc <UART_EndRxTransfer+0x5c>)
 8013180:	680b      	ldr	r3, [r1, #0]
 8013182:	402b      	ands	r3, r5
 8013184:	600b      	str	r3, [r1, #0]
 8013186:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801318a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801318e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013192:	6802      	ldr	r2, [r0, #0]
 8013194:	4c0e      	ldr	r4, [pc, #56]	@ (80131d0 <UART_EndRxTransfer+0x60>)
 8013196:	6893      	ldr	r3, [r2, #8]
 8013198:	4023      	ands	r3, r4
 801319a:	6093      	str	r3, [r2, #8]
 801319c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80131a0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d10a      	bne.n	80131bc <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80131a6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131aa:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80131ae:	2410      	movs	r4, #16
 80131b0:	6802      	ldr	r2, [r0, #0]
 80131b2:	6813      	ldr	r3, [r2, #0]
 80131b4:	43a3      	bics	r3, r4
 80131b6:	6013      	str	r3, [r2, #0]
 80131b8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80131bc:	0003      	movs	r3, r0
 80131be:	2220      	movs	r2, #32
 80131c0:	338c      	adds	r3, #140	@ 0x8c
 80131c2:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131c4:	2300      	movs	r3, #0
 80131c6:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80131c8:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80131ca:	bd30      	pop	{r4, r5, pc}
 80131cc:	fffffedf 	.word	0xfffffedf
 80131d0:	effffffe 	.word	0xeffffffe

080131d4 <HAL_UART_DeInit>:
{
 80131d4:	b570      	push	{r4, r5, r6, lr}
 80131d6:	0005      	movs	r5, r0
    return HAL_ERROR;
 80131d8:	2001      	movs	r0, #1
  if (huart == NULL)
 80131da:	2d00      	cmp	r5, #0
 80131dc:	d019      	beq.n	8013212 <HAL_UART_DeInit+0x3e>
  huart->gState = HAL_UART_STATE_BUSY;
 80131de:	002e      	movs	r6, r5
 80131e0:	2324      	movs	r3, #36	@ 0x24
  huart->Instance->CR1 = 0x0U;
 80131e2:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 80131e4:	3688      	adds	r6, #136	@ 0x88
 80131e6:	6033      	str	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 80131e8:	682b      	ldr	r3, [r5, #0]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	4382      	bics	r2, r0
 80131ee:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 80131f0:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 80131f2:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80131f4:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80131f6:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80131f8:	f7f7 fb5a 	bl	800a8b0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131fc:	002b      	movs	r3, r5
  return HAL_OK;
 80131fe:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013200:	3390      	adds	r3, #144	@ 0x90
 8013202:	601c      	str	r4, [r3, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 8013204:	3b04      	subs	r3, #4
  huart->gState = HAL_UART_STATE_RESET;
 8013206:	6034      	str	r4, [r6, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 8013208:	601c      	str	r4, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801320a:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801320c:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 801320e:	3584      	adds	r5, #132	@ 0x84
 8013210:	702c      	strb	r4, [r5, #0]
}
 8013212:	bd70      	pop	{r4, r5, r6, pc}

08013214 <UART_SetConfig>:
{
 8013214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013216:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013218:	6925      	ldr	r5, [r4, #16]
 801321a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 801321c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801321e:	432a      	orrs	r2, r5
 8013220:	6965      	ldr	r5, [r4, #20]
 8013222:	69c1      	ldr	r1, [r0, #28]
 8013224:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013226:	6818      	ldr	r0, [r3, #0]
 8013228:	4d5b      	ldr	r5, [pc, #364]	@ (8013398 <UART_SetConfig+0x184>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801322a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801322c:	4028      	ands	r0, r5
 801322e:	4302      	orrs	r2, r0
 8013230:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013232:	685a      	ldr	r2, [r3, #4]
 8013234:	4859      	ldr	r0, [pc, #356]	@ (801339c <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013236:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013238:	4002      	ands	r2, r0
 801323a:	68e0      	ldr	r0, [r4, #12]
 801323c:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801323e:	4858      	ldr	r0, [pc, #352]	@ (80133a0 <UART_SetConfig+0x18c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013240:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013242:	4283      	cmp	r3, r0
 8013244:	d007      	beq.n	8013256 <UART_SetConfig+0x42>
 8013246:	4a57      	ldr	r2, [pc, #348]	@ (80133a4 <UART_SetConfig+0x190>)
 8013248:	4293      	cmp	r3, r2
 801324a:	d004      	beq.n	8013256 <UART_SetConfig+0x42>
 801324c:	4a56      	ldr	r2, [pc, #344]	@ (80133a8 <UART_SetConfig+0x194>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d001      	beq.n	8013256 <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 8013252:	6a22      	ldr	r2, [r4, #32]
 8013254:	4315      	orrs	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013256:	689a      	ldr	r2, [r3, #8]
 8013258:	4e54      	ldr	r6, [pc, #336]	@ (80133ac <UART_SetConfig+0x198>)
 801325a:	4032      	ands	r2, r6
 801325c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801325e:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013260:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013264:	43aa      	bics	r2, r5
 8013266:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8013268:	432a      	orrs	r2, r5
 801326a:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 801326c:	4a50      	ldr	r2, [pc, #320]	@ (80133b0 <UART_SetConfig+0x19c>)
 801326e:	4293      	cmp	r3, r2
 8013270:	d100      	bne.n	8013274 <UART_SetConfig+0x60>
 8013272:	e087      	b.n	8013384 <UART_SetConfig+0x170>
 8013274:	4a4f      	ldr	r2, [pc, #316]	@ (80133b4 <UART_SetConfig+0x1a0>)
 8013276:	4293      	cmp	r3, r2
 8013278:	d100      	bne.n	801327c <UART_SetConfig+0x68>
 801327a:	e085      	b.n	8013388 <UART_SetConfig+0x174>
 801327c:	4a4e      	ldr	r2, [pc, #312]	@ (80133b8 <UART_SetConfig+0x1a4>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d100      	bne.n	8013284 <UART_SetConfig+0x70>
 8013282:	e083      	b.n	801338c <UART_SetConfig+0x178>
 8013284:	4a4d      	ldr	r2, [pc, #308]	@ (80133bc <UART_SetConfig+0x1a8>)
 8013286:	4293      	cmp	r3, r2
 8013288:	d100      	bne.n	801328c <UART_SetConfig+0x78>
 801328a:	e082      	b.n	8013392 <UART_SetConfig+0x17e>
 801328c:	4283      	cmp	r3, r0
 801328e:	d02c      	beq.n	80132ea <UART_SetConfig+0xd6>
 8013290:	4a44      	ldr	r2, [pc, #272]	@ (80133a4 <UART_SetConfig+0x190>)
 8013292:	4293      	cmp	r3, r2
 8013294:	d041      	beq.n	801331a <UART_SetConfig+0x106>
  if (UART_INSTANCE_LOWPOWER(huart))
 8013296:	4a44      	ldr	r2, [pc, #272]	@ (80133a8 <UART_SetConfig+0x194>)
 8013298:	2004      	movs	r0, #4
 801329a:	4293      	cmp	r3, r2
 801329c:	d026      	beq.n	80132ec <UART_SetConfig+0xd8>
 801329e:	2000      	movs	r0, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132a0:	2380      	movs	r3, #128	@ 0x80
 80132a2:	021b      	lsls	r3, r3, #8
 80132a4:	4299      	cmp	r1, r3
 80132a6:	d159      	bne.n	801335c <UART_SetConfig+0x148>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80132a8:	f7fe fb44 	bl	8011934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80132ac:	2800      	cmp	r0, #0
 80132ae:	d01a      	beq.n	80132e6 <UART_SetConfig+0xd2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80132b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80132b2:	4b43      	ldr	r3, [pc, #268]	@ (80133c0 <UART_SetConfig+0x1ac>)
 80132b4:	0052      	lsls	r2, r2, #1
 80132b6:	5ad1      	ldrh	r1, [r2, r3]
 80132b8:	f7ec ff56 	bl	8000168 <__udivsi3>
 80132bc:	6865      	ldr	r5, [r4, #4]
 80132be:	0040      	lsls	r0, r0, #1
 80132c0:	086b      	lsrs	r3, r5, #1
 80132c2:	18c0      	adds	r0, r0, r3
 80132c4:	0029      	movs	r1, r5
 80132c6:	f7ec ff4f 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80132ca:	0002      	movs	r2, r0
 80132cc:	4b3d      	ldr	r3, [pc, #244]	@ (80133c4 <UART_SetConfig+0x1b0>)
 80132ce:	3a10      	subs	r2, #16
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d81b      	bhi.n	801330c <UART_SetConfig+0xf8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80132d4:	230f      	movs	r3, #15
 80132d6:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80132d8:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80132da:	439a      	bics	r2, r3
 80132dc:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80132de:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80132e0:	6822      	ldr	r2, [r4, #0]
 80132e2:	4303      	orrs	r3, r0
 80132e4:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80132e6:	2000      	movs	r0, #0
 80132e8:	e011      	b.n	801330e <UART_SetConfig+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80132ea:	2010      	movs	r0, #16
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80132ec:	f7fe fb22 	bl	8011934 <HAL_RCCEx_GetPeriphCLKFreq>
 80132f0:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 80132f2:	d0f8      	beq.n	80132e6 <UART_SetConfig+0xd2>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80132f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80132f6:	4b32      	ldr	r3, [pc, #200]	@ (80133c0 <UART_SetConfig+0x1ac>)
 80132f8:	0052      	lsls	r2, r2, #1
 80132fa:	5ad7      	ldrh	r7, [r2, r3]
 80132fc:	0039      	movs	r1, r7
 80132fe:	f7ec ff33 	bl	8000168 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013302:	2303      	movs	r3, #3
 8013304:	6865      	ldr	r5, [r4, #4]
 8013306:	436b      	muls	r3, r5
 8013308:	4283      	cmp	r3, r0
 801330a:	d908      	bls.n	801331e <UART_SetConfig+0x10a>
        ret = HAL_ERROR;
 801330c:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 801330e:	4b2e      	ldr	r3, [pc, #184]	@ (80133c8 <UART_SetConfig+0x1b4>)
 8013310:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8013312:	2300      	movs	r3, #0
 8013314:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8013316:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8013318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 801331a:	2008      	movs	r0, #8
 801331c:	e7e6      	b.n	80132ec <UART_SetConfig+0xd8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801331e:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013320:	4283      	cmp	r3, r0
 8013322:	d3f3      	bcc.n	801330c <UART_SetConfig+0xf8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013324:	2300      	movs	r3, #0
 8013326:	003a      	movs	r2, r7
 8013328:	0030      	movs	r0, r6
 801332a:	0019      	movs	r1, r3
 801332c:	f7ed f928 	bl	8000580 <__aeabi_uldivmod>
 8013330:	2700      	movs	r7, #0
 8013332:	0e06      	lsrs	r6, r0, #24
 8013334:	020b      	lsls	r3, r1, #8
 8013336:	4333      	orrs	r3, r6
 8013338:	0202      	lsls	r2, r0, #8
 801333a:	086e      	lsrs	r6, r5, #1
 801333c:	1992      	adds	r2, r2, r6
 801333e:	417b      	adcs	r3, r7
 8013340:	0010      	movs	r0, r2
 8013342:	0019      	movs	r1, r3
 8013344:	002a      	movs	r2, r5
 8013346:	003b      	movs	r3, r7
 8013348:	f7ed f91a 	bl	8000580 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801334c:	4b1f      	ldr	r3, [pc, #124]	@ (80133cc <UART_SetConfig+0x1b8>)
 801334e:	18c2      	adds	r2, r0, r3
 8013350:	4b1f      	ldr	r3, [pc, #124]	@ (80133d0 <UART_SetConfig+0x1bc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013352:	429a      	cmp	r2, r3
 8013354:	d8da      	bhi.n	801330c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013356:	6823      	ldr	r3, [r4, #0]
 8013358:	60d8      	str	r0, [r3, #12]
 801335a:	e7c4      	b.n	80132e6 <UART_SetConfig+0xd2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801335c:	f7fe faea 	bl	8011934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8013360:	2800      	cmp	r0, #0
 8013362:	d0c0      	beq.n	80132e6 <UART_SetConfig+0xd2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013364:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013366:	4b16      	ldr	r3, [pc, #88]	@ (80133c0 <UART_SetConfig+0x1ac>)
 8013368:	0052      	lsls	r2, r2, #1
 801336a:	5ad1      	ldrh	r1, [r2, r3]
 801336c:	f7ec fefc 	bl	8000168 <__udivsi3>
 8013370:	6865      	ldr	r5, [r4, #4]
 8013372:	086b      	lsrs	r3, r5, #1
 8013374:	18c0      	adds	r0, r0, r3
 8013376:	0029      	movs	r1, r5
 8013378:	f7ec fef6 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801337c:	0002      	movs	r2, r0
 801337e:	4b11      	ldr	r3, [pc, #68]	@ (80133c4 <UART_SetConfig+0x1b0>)
 8013380:	3a10      	subs	r2, #16
 8013382:	e7e6      	b.n	8013352 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013384:	2001      	movs	r0, #1
 8013386:	e78b      	b.n	80132a0 <UART_SetConfig+0x8c>
 8013388:	2002      	movs	r0, #2
 801338a:	e789      	b.n	80132a0 <UART_SetConfig+0x8c>
 801338c:	2080      	movs	r0, #128	@ 0x80
 801338e:	0240      	lsls	r0, r0, #9
 8013390:	e786      	b.n	80132a0 <UART_SetConfig+0x8c>
 8013392:	2080      	movs	r0, #128	@ 0x80
 8013394:	0280      	lsls	r0, r0, #10
 8013396:	e783      	b.n	80132a0 <UART_SetConfig+0x8c>
 8013398:	cfff69f3 	.word	0xcfff69f3
 801339c:	ffffcfff 	.word	0xffffcfff
 80133a0:	40008000 	.word	0x40008000
 80133a4:	40008400 	.word	0x40008400
 80133a8:	40008c00 	.word	0x40008c00
 80133ac:	11fff4ff 	.word	0x11fff4ff
 80133b0:	40013800 	.word	0x40013800
 80133b4:	40004400 	.word	0x40004400
 80133b8:	40004800 	.word	0x40004800
 80133bc:	40004c00 	.word	0x40004c00
 80133c0:	080206d0 	.word	0x080206d0
 80133c4:	0000ffef 	.word	0x0000ffef
 80133c8:	00010001 	.word	0x00010001
 80133cc:	fffffd00 	.word	0xfffffd00
 80133d0:	000ffcff 	.word	0x000ffcff

080133d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80133d4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 80133d6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80133d8:	071a      	lsls	r2, r3, #28
 80133da:	d506      	bpl.n	80133ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80133dc:	6801      	ldr	r1, [r0, #0]
 80133de:	4c28      	ldr	r4, [pc, #160]	@ (8013480 <UART_AdvFeatureConfig+0xac>)
 80133e0:	684a      	ldr	r2, [r1, #4]
 80133e2:	4022      	ands	r2, r4
 80133e4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80133e6:	4322      	orrs	r2, r4
 80133e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80133ea:	07da      	lsls	r2, r3, #31
 80133ec:	d506      	bpl.n	80133fc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80133ee:	6801      	ldr	r1, [r0, #0]
 80133f0:	4c24      	ldr	r4, [pc, #144]	@ (8013484 <UART_AdvFeatureConfig+0xb0>)
 80133f2:	684a      	ldr	r2, [r1, #4]
 80133f4:	4022      	ands	r2, r4
 80133f6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80133f8:	4322      	orrs	r2, r4
 80133fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80133fc:	079a      	lsls	r2, r3, #30
 80133fe:	d506      	bpl.n	801340e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013400:	6801      	ldr	r1, [r0, #0]
 8013402:	4c21      	ldr	r4, [pc, #132]	@ (8013488 <UART_AdvFeatureConfig+0xb4>)
 8013404:	684a      	ldr	r2, [r1, #4]
 8013406:	4022      	ands	r2, r4
 8013408:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801340a:	4322      	orrs	r2, r4
 801340c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801340e:	075a      	lsls	r2, r3, #29
 8013410:	d506      	bpl.n	8013420 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013412:	6801      	ldr	r1, [r0, #0]
 8013414:	4c1d      	ldr	r4, [pc, #116]	@ (801348c <UART_AdvFeatureConfig+0xb8>)
 8013416:	684a      	ldr	r2, [r1, #4]
 8013418:	4022      	ands	r2, r4
 801341a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 801341c:	4322      	orrs	r2, r4
 801341e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013420:	06da      	lsls	r2, r3, #27
 8013422:	d506      	bpl.n	8013432 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013424:	6801      	ldr	r1, [r0, #0]
 8013426:	4c1a      	ldr	r4, [pc, #104]	@ (8013490 <UART_AdvFeatureConfig+0xbc>)
 8013428:	688a      	ldr	r2, [r1, #8]
 801342a:	4022      	ands	r2, r4
 801342c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 801342e:	4322      	orrs	r2, r4
 8013430:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013432:	069a      	lsls	r2, r3, #26
 8013434:	d506      	bpl.n	8013444 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013436:	6801      	ldr	r1, [r0, #0]
 8013438:	4c16      	ldr	r4, [pc, #88]	@ (8013494 <UART_AdvFeatureConfig+0xc0>)
 801343a:	688a      	ldr	r2, [r1, #8]
 801343c:	4022      	ands	r2, r4
 801343e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8013440:	4322      	orrs	r2, r4
 8013442:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013444:	065a      	lsls	r2, r3, #25
 8013446:	d510      	bpl.n	801346a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013448:	6801      	ldr	r1, [r0, #0]
 801344a:	4d13      	ldr	r5, [pc, #76]	@ (8013498 <UART_AdvFeatureConfig+0xc4>)
 801344c:	684a      	ldr	r2, [r1, #4]
 801344e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8013450:	402a      	ands	r2, r5
 8013452:	4322      	orrs	r2, r4
 8013454:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013456:	2280      	movs	r2, #128	@ 0x80
 8013458:	0352      	lsls	r2, r2, #13
 801345a:	4294      	cmp	r4, r2
 801345c:	d105      	bne.n	801346a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801345e:	684a      	ldr	r2, [r1, #4]
 8013460:	4c0e      	ldr	r4, [pc, #56]	@ (801349c <UART_AdvFeatureConfig+0xc8>)
 8013462:	4022      	ands	r2, r4
 8013464:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8013466:	4322      	orrs	r2, r4
 8013468:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801346a:	061b      	lsls	r3, r3, #24
 801346c:	d506      	bpl.n	801347c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801346e:	6802      	ldr	r2, [r0, #0]
 8013470:	490b      	ldr	r1, [pc, #44]	@ (80134a0 <UART_AdvFeatureConfig+0xcc>)
 8013472:	6853      	ldr	r3, [r2, #4]
 8013474:	400b      	ands	r3, r1
 8013476:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013478:	430b      	orrs	r3, r1
 801347a:	6053      	str	r3, [r2, #4]
}
 801347c:	bd30      	pop	{r4, r5, pc}
 801347e:	46c0      	nop			@ (mov r8, r8)
 8013480:	ffff7fff 	.word	0xffff7fff
 8013484:	fffdffff 	.word	0xfffdffff
 8013488:	fffeffff 	.word	0xfffeffff
 801348c:	fffbffff 	.word	0xfffbffff
 8013490:	ffffefff 	.word	0xffffefff
 8013494:	ffffdfff 	.word	0xffffdfff
 8013498:	ffefffff 	.word	0xffefffff
 801349c:	ff9fffff 	.word	0xff9fffff
 80134a0:	fff7ffff 	.word	0xfff7ffff

080134a4 <UART_WaitOnFlagUntilTimeout>:
{
 80134a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134a6:	0004      	movs	r4, r0
 80134a8:	000d      	movs	r5, r1
 80134aa:	0017      	movs	r7, r2
 80134ac:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80134ae:	6822      	ldr	r2, [r4, #0]
 80134b0:	69d3      	ldr	r3, [r2, #28]
 80134b2:	402b      	ands	r3, r5
 80134b4:	1b5b      	subs	r3, r3, r5
 80134b6:	4259      	negs	r1, r3
 80134b8:	414b      	adcs	r3, r1
 80134ba:	42bb      	cmp	r3, r7
 80134bc:	d001      	beq.n	80134c2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80134be:	2000      	movs	r0, #0
 80134c0:	e026      	b.n	8013510 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80134c2:	9b08      	ldr	r3, [sp, #32]
 80134c4:	3301      	adds	r3, #1
 80134c6:	d0f3      	beq.n	80134b0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80134c8:	f7fa ffc0 	bl	800e44c <HAL_GetTick>
 80134cc:	9b00      	ldr	r3, [sp, #0]
 80134ce:	1ac0      	subs	r0, r0, r3
 80134d0:	9b08      	ldr	r3, [sp, #32]
 80134d2:	4298      	cmp	r0, r3
 80134d4:	d82d      	bhi.n	8013532 <UART_WaitOnFlagUntilTimeout+0x8e>
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d02b      	beq.n	8013532 <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80134da:	6823      	ldr	r3, [r4, #0]
 80134dc:	681a      	ldr	r2, [r3, #0]
 80134de:	0752      	lsls	r2, r2, #29
 80134e0:	d5e5      	bpl.n	80134ae <UART_WaitOnFlagUntilTimeout+0xa>
 80134e2:	002a      	movs	r2, r5
 80134e4:	2140      	movs	r1, #64	@ 0x40
 80134e6:	3a40      	subs	r2, #64	@ 0x40
 80134e8:	438a      	bics	r2, r1
 80134ea:	d0e0      	beq.n	80134ae <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80134ec:	69da      	ldr	r2, [r3, #28]
 80134ee:	2608      	movs	r6, #8
 80134f0:	0011      	movs	r1, r2
 80134f2:	4031      	ands	r1, r6
 80134f4:	9101      	str	r1, [sp, #4]
 80134f6:	4232      	tst	r2, r6
 80134f8:	d00b      	beq.n	8013512 <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 80134fa:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80134fc:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80134fe:	f7ff fe37 	bl	8013170 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013502:	0023      	movs	r3, r4
 8013504:	3390      	adds	r3, #144	@ 0x90
 8013506:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8013508:	2300      	movs	r3, #0
          return HAL_ERROR;
 801350a:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 801350c:	3484      	adds	r4, #132	@ 0x84
 801350e:	7023      	strb	r3, [r4, #0]
}
 8013510:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013512:	2280      	movs	r2, #128	@ 0x80
 8013514:	69d9      	ldr	r1, [r3, #28]
 8013516:	0112      	lsls	r2, r2, #4
 8013518:	4211      	tst	r1, r2
 801351a:	d0c8      	beq.n	80134ae <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801351c:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 801351e:	0020      	movs	r0, r4
 8013520:	f7ff fe26 	bl	8013170 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013524:	0023      	movs	r3, r4
 8013526:	2220      	movs	r2, #32
 8013528:	3390      	adds	r3, #144	@ 0x90
 801352a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 801352c:	9b01      	ldr	r3, [sp, #4]
 801352e:	3484      	adds	r4, #132	@ 0x84
 8013530:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8013532:	2003      	movs	r0, #3
 8013534:	e7ec      	b.n	8013510 <UART_WaitOnFlagUntilTimeout+0x6c>

08013536 <HAL_UART_Transmit>:
{
 8013536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013538:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 801353a:	0002      	movs	r2, r0
{
 801353c:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 801353e:	3288      	adds	r2, #136	@ 0x88
{
 8013540:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8013542:	6813      	ldr	r3, [r2, #0]
{
 8013544:	0004      	movs	r4, r0
 8013546:	000d      	movs	r5, r1
    return HAL_BUSY;
 8013548:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 801354a:	2b20      	cmp	r3, #32
 801354c:	d139      	bne.n	80135c2 <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 801354e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8013550:	2900      	cmp	r1, #0
 8013552:	d036      	beq.n	80135c2 <HAL_UART_Transmit+0x8c>
 8013554:	2f00      	cmp	r7, #0
 8013556:	d034      	beq.n	80135c2 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013558:	2380      	movs	r3, #128	@ 0x80
 801355a:	68a1      	ldr	r1, [r4, #8]
 801355c:	015b      	lsls	r3, r3, #5
 801355e:	4299      	cmp	r1, r3
 8013560:	d104      	bne.n	801356c <HAL_UART_Transmit+0x36>
 8013562:	6923      	ldr	r3, [r4, #16]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d101      	bne.n	801356c <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8013568:	4205      	tst	r5, r0
 801356a:	d12a      	bne.n	80135c2 <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801356c:	0023      	movs	r3, r4
 801356e:	2600      	movs	r6, #0
 8013570:	3390      	adds	r3, #144	@ 0x90
 8013572:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013574:	2321      	movs	r3, #33	@ 0x21
 8013576:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8013578:	f7fa ff68 	bl	800e44c <HAL_GetTick>
    huart->TxXferSize  = Size;
 801357c:	0023      	movs	r3, r4
 801357e:	3354      	adds	r3, #84	@ 0x54
 8013580:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8013582:	3302      	adds	r3, #2
 8013584:	9303      	str	r3, [sp, #12]
 8013586:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013588:	2380      	movs	r3, #128	@ 0x80
 801358a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 801358c:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801358e:	015b      	lsls	r3, r3, #5
 8013590:	429a      	cmp	r2, r3
 8013592:	d104      	bne.n	801359e <HAL_UART_Transmit+0x68>
 8013594:	6923      	ldr	r3, [r4, #16]
 8013596:	42b3      	cmp	r3, r6
 8013598:	d101      	bne.n	801359e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 801359a:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 801359c:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 801359e:	0023      	movs	r3, r4
 80135a0:	3356      	adds	r3, #86	@ 0x56
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d10d      	bne.n	80135c6 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80135aa:	9b05      	ldr	r3, [sp, #20]
 80135ac:	0020      	movs	r0, r4
 80135ae:	9300      	str	r3, [sp, #0]
 80135b0:	2140      	movs	r1, #64	@ 0x40
 80135b2:	9b04      	ldr	r3, [sp, #16]
 80135b4:	f7ff ff76 	bl	80134a4 <UART_WaitOnFlagUntilTimeout>
 80135b8:	2320      	movs	r3, #32
 80135ba:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 80135bc:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80135be:	2800      	cmp	r0, #0
 80135c0:	d10e      	bne.n	80135e0 <HAL_UART_Transmit+0xaa>
}
 80135c2:	b007      	add	sp, #28
 80135c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80135c6:	9b05      	ldr	r3, [sp, #20]
 80135c8:	2200      	movs	r2, #0
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	2180      	movs	r1, #128	@ 0x80
 80135ce:	0020      	movs	r0, r4
 80135d0:	9b04      	ldr	r3, [sp, #16]
 80135d2:	f7ff ff67 	bl	80134a4 <UART_WaitOnFlagUntilTimeout>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	d004      	beq.n	80135e4 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 80135da:	2320      	movs	r3, #32
 80135dc:	3488      	adds	r4, #136	@ 0x88
 80135de:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 80135e0:	2003      	movs	r0, #3
 80135e2:	e7ee      	b.n	80135c2 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80135e4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80135e6:	2d00      	cmp	r5, #0
 80135e8:	d10b      	bne.n	8013602 <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80135ea:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80135ec:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80135ee:	05db      	lsls	r3, r3, #23
 80135f0:	0ddb      	lsrs	r3, r3, #23
 80135f2:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80135f4:	9b03      	ldr	r3, [sp, #12]
 80135f6:	9a03      	ldr	r2, [sp, #12]
 80135f8:	881b      	ldrh	r3, [r3, #0]
 80135fa:	3b01      	subs	r3, #1
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	8013      	strh	r3, [r2, #0]
 8013600:	e7cd      	b.n	801359e <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013602:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8013604:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013606:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8013608:	e7f4      	b.n	80135f4 <HAL_UART_Transmit+0xbe>
	...

0801360c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801360c:	0003      	movs	r3, r0
{
 801360e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013610:	2600      	movs	r6, #0
{
 8013612:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013614:	3390      	adds	r3, #144	@ 0x90
 8013616:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8013618:	f7fa ff18 	bl	800e44c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801361c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801361e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	071b      	lsls	r3, r3, #28
 8013624:	d51f      	bpl.n	8013666 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013626:	2180      	movs	r1, #128	@ 0x80
 8013628:	4b28      	ldr	r3, [pc, #160]	@ (80136cc <UART_CheckIdleState+0xc0>)
 801362a:	0032      	movs	r2, r6
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	0389      	lsls	r1, r1, #14
 8013630:	0003      	movs	r3, r0
 8013632:	0020      	movs	r0, r4
 8013634:	f7ff ff36 	bl	80134a4 <UART_WaitOnFlagUntilTimeout>
 8013638:	42b0      	cmp	r0, r6
 801363a:	d014      	beq.n	8013666 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801363c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013640:	2301      	movs	r3, #1
 8013642:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013646:	2080      	movs	r0, #128	@ 0x80
 8013648:	6822      	ldr	r2, [r4, #0]
 801364a:	6813      	ldr	r3, [r2, #0]
 801364c:	4383      	bics	r3, r0
 801364e:	6013      	str	r3, [r2, #0]
 8013650:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8013654:	0023      	movs	r3, r4
 8013656:	2220      	movs	r2, #32
 8013658:	3388      	adds	r3, #136	@ 0x88
 801365a:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 801365c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 801365e:	2300      	movs	r3, #0
 8013660:	3484      	adds	r4, #132	@ 0x84
 8013662:	7023      	strb	r3, [r4, #0]
}
 8013664:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013666:	0026      	movs	r6, r4
 8013668:	6823      	ldr	r3, [r4, #0]
 801366a:	368c      	adds	r6, #140	@ 0x8c
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	075b      	lsls	r3, r3, #29
 8013670:	d523      	bpl.n	80136ba <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013672:	2180      	movs	r1, #128	@ 0x80
 8013674:	4b15      	ldr	r3, [pc, #84]	@ (80136cc <UART_CheckIdleState+0xc0>)
 8013676:	2200      	movs	r2, #0
 8013678:	9300      	str	r3, [sp, #0]
 801367a:	0020      	movs	r0, r4
 801367c:	002b      	movs	r3, r5
 801367e:	03c9      	lsls	r1, r1, #15
 8013680:	f7ff ff10 	bl	80134a4 <UART_WaitOnFlagUntilTimeout>
 8013684:	2800      	cmp	r0, #0
 8013686:	d018      	beq.n	80136ba <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013688:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801368c:	2201      	movs	r2, #1
 801368e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013692:	6821      	ldr	r1, [r4, #0]
 8013694:	4d0e      	ldr	r5, [pc, #56]	@ (80136d0 <UART_CheckIdleState+0xc4>)
 8013696:	680b      	ldr	r3, [r1, #0]
 8013698:	402b      	ands	r3, r5
 801369a:	600b      	str	r3, [r1, #0]
 801369c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80136a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136a4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136a8:	6821      	ldr	r1, [r4, #0]
 80136aa:	688b      	ldr	r3, [r1, #8]
 80136ac:	4393      	bics	r3, r2
 80136ae:	608b      	str	r3, [r1, #8]
 80136b0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80136b4:	2320      	movs	r3, #32
 80136b6:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 80136b8:	e7d0      	b.n	801365c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80136ba:	0023      	movs	r3, r4
 80136bc:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80136be:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80136c0:	3388      	adds	r3, #136	@ 0x88
 80136c2:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80136c4:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80136c6:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80136c8:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80136ca:	e7c8      	b.n	801365e <UART_CheckIdleState+0x52>
 80136cc:	01ffffff 	.word	0x01ffffff
 80136d0:	fffffedf 	.word	0xfffffedf

080136d4 <HAL_HalfDuplex_Init>:
{
 80136d4:	b570      	push	{r4, r5, r6, lr}
 80136d6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80136d8:	d101      	bne.n	80136de <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 80136da:	2001      	movs	r0, #1
}
 80136dc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80136de:	0005      	movs	r5, r0
 80136e0:	3588      	adds	r5, #136	@ 0x88
 80136e2:	682b      	ldr	r3, [r5, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d104      	bne.n	80136f2 <HAL_HalfDuplex_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 80136e8:	0002      	movs	r2, r0
 80136ea:	3284      	adds	r2, #132	@ 0x84
 80136ec:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80136ee:	f7f7 f89b 	bl	800a828 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80136f2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80136f4:	2101      	movs	r1, #1
 80136f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80136f8:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80136fa:	6813      	ldr	r3, [r2, #0]
 80136fc:	438b      	bics	r3, r1
 80136fe:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013700:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013702:	2b00      	cmp	r3, #0
 8013704:	d002      	beq.n	801370c <HAL_HalfDuplex_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8013706:	0020      	movs	r0, r4
 8013708:	f7ff fe64 	bl	80133d4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 801370c:	0020      	movs	r0, r4
 801370e:	f7ff fd81 	bl	8013214 <UART_SetConfig>
 8013712:	2801      	cmp	r0, #1
 8013714:	d0e1      	beq.n	80136da <HAL_HalfDuplex_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	4909      	ldr	r1, [pc, #36]	@ (8013740 <HAL_HalfDuplex_Init+0x6c>)
 801371a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 801371c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801371e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8013720:	2122      	movs	r1, #34	@ 0x22
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8013724:	689a      	ldr	r2, [r3, #8]
 8013726:	438a      	bics	r2, r1
 8013728:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 801372a:	2208      	movs	r2, #8
 801372c:	6899      	ldr	r1, [r3, #8]
 801372e:	430a      	orrs	r2, r1
 8013730:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8013732:	2201      	movs	r2, #1
 8013734:	6819      	ldr	r1, [r3, #0]
 8013736:	430a      	orrs	r2, r1
 8013738:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801373a:	f7ff ff67 	bl	801360c <UART_CheckIdleState>
 801373e:	e7cd      	b.n	80136dc <HAL_HalfDuplex_Init+0x8>
 8013740:	ffffb7ff 	.word	0xffffb7ff

08013744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013746:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013748:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 801374a:	0004      	movs	r4, r0
 801374c:	376a      	adds	r7, #106	@ 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801374e:	2b00      	cmp	r3, #0
 8013750:	d104      	bne.n	801375c <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8013752:	2001      	movs	r0, #1
 8013754:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8013756:	3468      	adds	r4, #104	@ 0x68
 8013758:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801375a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801375c:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801375e:	4e0b      	ldr	r6, [pc, #44]	@ (801378c <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013760:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013762:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8013764:	4d0a      	ldr	r5, [pc, #40]	@ (8013790 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013766:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013768:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 801376a:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801376c:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801376e:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013770:	f7ec fd84 	bl	800027c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013774:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013776:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013778:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801377a:	0f5b      	lsrs	r3, r3, #29
 801377c:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 801377e:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013780:	00c0      	lsls	r0, r0, #3
 8013782:	f7ec fd7b 	bl	800027c <__divsi3>
 8013786:	b280      	uxth	r0, r0
}
 8013788:	e7e5      	b.n	8013756 <UARTEx_SetNbDataToProcess+0x12>
 801378a:	46c0      	nop			@ (mov r8, r8)
 801378c:	080206f0 	.word	0x080206f0
 8013790:	080206e8 	.word	0x080206e8

08013794 <HAL_UARTEx_DisableFifoMode>:
{
 8013794:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8013796:	0004      	movs	r4, r0
 8013798:	3484      	adds	r4, #132	@ 0x84
 801379a:	7822      	ldrb	r2, [r4, #0]
{
 801379c:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 801379e:	2002      	movs	r0, #2
 80137a0:	2a01      	cmp	r2, #1
 80137a2:	d011      	beq.n	80137c8 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80137a4:	001d      	movs	r5, r3
 80137a6:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80137a8:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80137aa:	3588      	adds	r5, #136	@ 0x88
 80137ac:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80137b2:	6810      	ldr	r0, [r2, #0]
 80137b4:	43b0      	bics	r0, r6
 80137b6:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80137b8:	4804      	ldr	r0, [pc, #16]	@ (80137cc <HAL_UARTEx_DisableFifoMode+0x38>)
 80137ba:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80137bc:	2000      	movs	r0, #0
 80137be:	6658      	str	r0, [r3, #100]	@ 0x64
  huart->gState = HAL_UART_STATE_READY;
 80137c0:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80137c2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80137c4:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 80137c6:	7020      	strb	r0, [r4, #0]
}
 80137c8:	bd70      	pop	{r4, r5, r6, pc}
 80137ca:	46c0      	nop			@ (mov r8, r8)
 80137cc:	dfffffff 	.word	0xdfffffff

080137d0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80137d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80137d2:	0005      	movs	r5, r0
 80137d4:	3584      	adds	r5, #132	@ 0x84
{
 80137d6:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80137d8:	7829      	ldrb	r1, [r5, #0]
 80137da:	2202      	movs	r2, #2
 80137dc:	2901      	cmp	r1, #1
 80137de:	d015      	beq.n	801380c <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 80137e0:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 80137e2:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80137e4:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80137e6:	3688      	adds	r6, #136	@ 0x88
 80137e8:	3222      	adds	r2, #34	@ 0x22
 80137ea:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80137ec:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 80137ee:	6822      	ldr	r2, [r4, #0]
 80137f0:	438a      	bics	r2, r1
 80137f2:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80137f4:	68a1      	ldr	r1, [r4, #8]
 80137f6:	00c9      	lsls	r1, r1, #3
 80137f8:	08c9      	lsrs	r1, r1, #3
 80137fa:	4319      	orrs	r1, r3
 80137fc:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 80137fe:	f7ff ffa1 	bl	8013744 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8013802:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8013804:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013806:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8013808:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 801380a:	702a      	strb	r2, [r5, #0]
}
 801380c:	0010      	movs	r0, r2
 801380e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013810 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8013810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8013812:	0005      	movs	r5, r0
 8013814:	3584      	adds	r5, #132	@ 0x84
{
 8013816:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8013818:	7829      	ldrb	r1, [r5, #0]
 801381a:	2302      	movs	r3, #2
 801381c:	2901      	cmp	r1, #1
 801381e:	d015      	beq.n	801384c <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8013820:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8013822:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013824:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013826:	3688      	adds	r6, #136	@ 0x88
 8013828:	3322      	adds	r3, #34	@ 0x22
 801382a:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801382c:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 801382e:	6823      	ldr	r3, [r4, #0]
 8013830:	438b      	bics	r3, r1
 8013832:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013834:	68a1      	ldr	r1, [r4, #8]
 8013836:	4b06      	ldr	r3, [pc, #24]	@ (8013850 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8013838:	4019      	ands	r1, r3
 801383a:	4311      	orrs	r1, r2
 801383c:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 801383e:	f7ff ff81 	bl	8013744 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8013842:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013844:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8013846:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8013848:	2300      	movs	r3, #0
 801384a:	702b      	strb	r3, [r5, #0]
}
 801384c:	0018      	movs	r0, r3
 801384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013850:	f1ffffff 	.word	0xf1ffffff

08013854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8013854:	0003      	movs	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013856:	2000      	movs	r0, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8013858:	4a01      	ldr	r2, [pc, #4]	@ (8013860 <USB_EnableGlobalInt+0xc>)
  USBx->ISTR = 0U;
 801385a:	6458      	str	r0, [r3, #68]	@ 0x44
  USBx->CNTR = winterruptmask;
 801385c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 801385e:	4770      	bx	lr
 8013860:	0000bf80 	.word	0x0000bf80

08013864 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8013864:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8013866:	4a02      	ldr	r2, [pc, #8]	@ (8013870 <USB_DisableGlobalInt+0xc>)
 8013868:	4013      	ands	r3, r2
 801386a:	6403      	str	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 801386c:	2000      	movs	r0, #0
 801386e:	4770      	bx	lr
 8013870:	ffff407f 	.word	0xffff407f

08013874 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8013874:	b082      	sub	sp, #8
 8013876:	9100      	str	r1, [sp, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8013878:	2101      	movs	r1, #1
 801387a:	6401      	str	r1, [r0, #64]	@ 0x40
{
 801387c:	9201      	str	r2, [sp, #4]

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 801387e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8013880:	0003      	movs	r3, r0
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8013882:	438a      	bics	r2, r1
 8013884:	6402      	str	r2, [r0, #64]	@ 0x40
    USBx->CNTR &= ~USB_CNTR_HOST;
 8013886:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8013888:	408a      	lsls	r2, r1
 801388a:	40ca      	lsrs	r2, r1
 801388c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801388e:	2000      	movs	r0, #0
 8013890:	6458      	str	r0, [r3, #68]	@ 0x44

  return ret;
}
 8013892:	b002      	add	sp, #8
 8013894:	4770      	bx	lr

08013896 <USB_FlushTxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8013896:	2000      	movs	r0, #0
 8013898:	4770      	bx	lr

0801389a <USB_FlushRxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 801389a:	2000      	movs	r0, #0
 801389c:	4770      	bx	lr
	...

080138a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80138a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80138a2:	2401      	movs	r4, #1
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80138a4:	780e      	ldrb	r6, [r1, #0]
 80138a6:	00b3      	lsls	r3, r6, #2
 80138a8:	18c3      	adds	r3, r0, r3
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	4896      	ldr	r0, [pc, #600]	@ (8013b08 <USB_ActivateEndpoint+0x268>)
 80138ae:	4002      	ands	r2, r0
  switch (ep->type)
 80138b0:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 80138b2:	9400      	str	r4, [sp, #0]
  switch (ep->type)
 80138b4:	2803      	cmp	r0, #3
 80138b6:	d807      	bhi.n	80138c8 <USB_ActivateEndpoint+0x28>
 80138b8:	f7ec fc38 	bl	800012c <__gnu_thumb1_case_uqi>
 80138bc:	34373a02 	.word	0x34373a02
      wEpRegVal |= USB_EP_CONTROL;
 80138c0:	2480      	movs	r4, #128	@ 0x80
 80138c2:	00a4      	lsls	r4, r4, #2
 80138c4:	4322      	orrs	r2, r4
  HAL_StatusTypeDef ret = HAL_OK;
 80138c6:	9000      	str	r0, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 80138c8:	4c90      	ldr	r4, [pc, #576]	@ (8013b0c <USB_ActivateEndpoint+0x26c>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80138ca:	4d91      	ldr	r5, [pc, #580]	@ (8013b10 <USB_ActivateEndpoint+0x270>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 80138cc:	4322      	orrs	r2, r4
 80138ce:	601a      	str	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80138d0:	681a      	ldr	r2, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80138d2:	4f90      	ldr	r7, [pc, #576]	@ (8013b14 <USB_ActivateEndpoint+0x274>)
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80138d4:	402a      	ands	r2, r5
 80138d6:	4332      	orrs	r2, r6
 80138d8:	4322      	orrs	r2, r4
 80138da:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80138dc:	00f2      	lsls	r2, r6, #3
 80138de:	19d2      	adds	r2, r2, r7
  if (ep->doublebuffer == 0U)
 80138e0:	7b0f      	ldrb	r7, [r1, #12]
 80138e2:	2f00      	cmp	r7, #0
 80138e4:	d166      	bne.n	80139b4 <USB_ActivateEndpoint+0x114>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80138e6:	88cf      	ldrh	r7, [r1, #6]
 80138e8:	08bf      	lsrs	r7, r7, #2
 80138ea:	00bf      	lsls	r7, r7, #2
 80138ec:	9701      	str	r7, [sp, #4]
    if (ep->is_in != 0U)
 80138ee:	784f      	ldrb	r7, [r1, #1]
 80138f0:	2f00      	cmp	r7, #0
 80138f2:	d025      	beq.n	8013940 <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80138f4:	6811      	ldr	r1, [r2, #0]
 80138f6:	9e01      	ldr	r6, [sp, #4]
 80138f8:	0c09      	lsrs	r1, r1, #16
 80138fa:	0409      	lsls	r1, r1, #16
 80138fc:	6011      	str	r1, [r2, #0]
 80138fe:	6811      	ldr	r1, [r2, #0]
 8013900:	4331      	orrs	r1, r6
 8013902:	6011      	str	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	0652      	lsls	r2, r2, #25
 8013908:	d504      	bpl.n	8013914 <USB_ActivateEndpoint+0x74>
 801390a:	6819      	ldr	r1, [r3, #0]
 801390c:	4a82      	ldr	r2, [pc, #520]	@ (8013b18 <USB_ActivateEndpoint+0x278>)
 801390e:	4029      	ands	r1, r5
 8013910:	430a      	orrs	r2, r1
 8013912:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013914:	4d81      	ldr	r5, [pc, #516]	@ (8013b1c <USB_ActivateEndpoint+0x27c>)
 8013916:	2801      	cmp	r0, #1
 8013918:	d00c      	beq.n	8013934 <USB_ActivateEndpoint+0x94>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801391a:	2220      	movs	r2, #32
 801391c:	6819      	ldr	r1, [r3, #0]
 801391e:	4029      	ands	r1, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013920:	404a      	eors	r2, r1
 8013922:	e009      	b.n	8013938 <USB_ActivateEndpoint+0x98>
      wEpRegVal |= USB_EP_INTERRUPT;
 8013924:	24c0      	movs	r4, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8013926:	00e4      	lsls	r4, r4, #3
 8013928:	4322      	orrs	r2, r4
  switch (ep->type)
 801392a:	2400      	movs	r4, #0
 801392c:	9400      	str	r4, [sp, #0]
 801392e:	e7cb      	b.n	80138c8 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8013930:	2480      	movs	r4, #128	@ 0x80
 8013932:	e7f8      	b.n	8013926 <USB_ActivateEndpoint+0x86>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	402a      	ands	r2, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013938:	4322      	orrs	r2, r4
 801393a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 801393c:	9800      	ldr	r0, [sp, #0]
 801393e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013940:	6850      	ldr	r0, [r2, #4]
 8013942:	9f01      	ldr	r7, [sp, #4]
 8013944:	0c00      	lsrs	r0, r0, #16
 8013946:	0400      	lsls	r0, r0, #16
 8013948:	6050      	str	r0, [r2, #4]
 801394a:	6850      	ldr	r0, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801394c:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801394e:	4338      	orrs	r0, r7
 8013950:	6050      	str	r0, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8013952:	6850      	ldr	r0, [r2, #4]
 8013954:	0180      	lsls	r0, r0, #6
 8013956:	0980      	lsrs	r0, r0, #6
 8013958:	6050      	str	r0, [r2, #4]
 801395a:	2900      	cmp	r1, #0
 801395c:	d105      	bne.n	801396a <USB_ActivateEndpoint+0xca>
 801395e:	6850      	ldr	r0, [r2, #4]
 8013960:	2180      	movs	r1, #128	@ 0x80
 8013962:	0609      	lsls	r1, r1, #24
 8013964:	4301      	orrs	r1, r0
 8013966:	6051      	str	r1, [r2, #4]
 8013968:	e009      	b.n	801397e <USB_ActivateEndpoint+0xde>
 801396a:	293e      	cmp	r1, #62	@ 0x3e
 801396c:	d818      	bhi.n	80139a0 <USB_ActivateEndpoint+0x100>
 801396e:	2701      	movs	r7, #1
 8013970:	0848      	lsrs	r0, r1, #1
 8013972:	4039      	ands	r1, r7
 8013974:	1840      	adds	r0, r0, r1
 8013976:	6851      	ldr	r1, [r2, #4]
 8013978:	0680      	lsls	r0, r0, #26
 801397a:	4308      	orrs	r0, r1
 801397c:	6050      	str	r0, [r2, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	0452      	lsls	r2, r2, #17
 8013982:	d504      	bpl.n	801398e <USB_ActivateEndpoint+0xee>
 8013984:	6819      	ldr	r1, [r3, #0]
 8013986:	4a66      	ldr	r2, [pc, #408]	@ (8013b20 <USB_ActivateEndpoint+0x280>)
 8013988:	4029      	ands	r1, r5
 801398a:	430a      	orrs	r2, r1
 801398c:	601a      	str	r2, [r3, #0]
      if (ep->num == 0U)
 801398e:	4a65      	ldr	r2, [pc, #404]	@ (8013b24 <USB_ActivateEndpoint+0x284>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013990:	6819      	ldr	r1, [r3, #0]
 8013992:	4011      	ands	r1, r2
 8013994:	22c0      	movs	r2, #192	@ 0xc0
      if (ep->num == 0U)
 8013996:	2e00      	cmp	r6, #0
 8013998:	d000      	beq.n	801399c <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801399a:	2280      	movs	r2, #128	@ 0x80
 801399c:	0192      	lsls	r2, r2, #6
 801399e:	e7bf      	b.n	8013920 <USB_ActivateEndpoint+0x80>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80139a0:	271f      	movs	r7, #31
 80139a2:	0948      	lsrs	r0, r1, #5
 80139a4:	4039      	ands	r1, r7
 80139a6:	424f      	negs	r7, r1
 80139a8:	4179      	adcs	r1, r7
 80139aa:	1a40      	subs	r0, r0, r1
 80139ac:	6851      	ldr	r1, [r2, #4]
 80139ae:	0680      	lsls	r0, r0, #26
 80139b0:	4308      	orrs	r0, r1
 80139b2:	e7d5      	b.n	8013960 <USB_ActivateEndpoint+0xc0>
    if (ep->type == EP_TYPE_BULK)
 80139b4:	2802      	cmp	r0, #2
 80139b6:	d14a      	bne.n	8013a4e <USB_ActivateEndpoint+0x1ae>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80139b8:	681f      	ldr	r7, [r3, #0]
 80139ba:	4e5b      	ldr	r6, [pc, #364]	@ (8013b28 <USB_ActivateEndpoint+0x288>)
 80139bc:	402f      	ands	r7, r5
 80139be:	433e      	orrs	r6, r7
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80139c0:	601e      	str	r6, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80139c2:	6816      	ldr	r6, [r2, #0]
 80139c4:	0c36      	lsrs	r6, r6, #16
 80139c6:	0436      	lsls	r6, r6, #16
 80139c8:	6016      	str	r6, [r2, #0]
 80139ca:	890e      	ldrh	r6, [r1, #8]
 80139cc:	6817      	ldr	r7, [r2, #0]
 80139ce:	08b6      	lsrs	r6, r6, #2
 80139d0:	00b6      	lsls	r6, r6, #2
 80139d2:	433e      	orrs	r6, r7
 80139d4:	6016      	str	r6, [r2, #0]
 80139d6:	6856      	ldr	r6, [r2, #4]
 80139d8:	0c36      	lsrs	r6, r6, #16
 80139da:	0436      	lsls	r6, r6, #16
 80139dc:	6056      	str	r6, [r2, #4]
 80139de:	894e      	ldrh	r6, [r1, #10]
 80139e0:	6857      	ldr	r7, [r2, #4]
 80139e2:	08b6      	lsrs	r6, r6, #2
 80139e4:	00b6      	lsls	r6, r6, #2
 80139e6:	433e      	orrs	r6, r7
 80139e8:	6056      	str	r6, [r2, #4]
    if (ep->is_in == 0U)
 80139ea:	784e      	ldrb	r6, [r1, #1]
 80139ec:	4f4d      	ldr	r7, [pc, #308]	@ (8013b24 <USB_ActivateEndpoint+0x284>)
 80139ee:	9601      	str	r6, [sp, #4]
 80139f0:	4e4a      	ldr	r6, [pc, #296]	@ (8013b1c <USB_ActivateEndpoint+0x27c>)
 80139f2:	46b4      	mov	ip, r6
 80139f4:	9e01      	ldr	r6, [sp, #4]
 80139f6:	2e00      	cmp	r6, #0
 80139f8:	d162      	bne.n	8013ac0 <USB_ActivateEndpoint+0x220>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80139fa:	2680      	movs	r6, #128	@ 0x80
 80139fc:	6818      	ldr	r0, [r3, #0]
 80139fe:	01f6      	lsls	r6, r6, #7
 8013a00:	4230      	tst	r0, r6
 8013a02:	d004      	beq.n	8013a0e <USB_ActivateEndpoint+0x16e>
 8013a04:	681e      	ldr	r6, [r3, #0]
 8013a06:	4846      	ldr	r0, [pc, #280]	@ (8013b20 <USB_ActivateEndpoint+0x280>)
 8013a08:	402e      	ands	r6, r5
 8013a0a:	4330      	orrs	r0, r6
 8013a0c:	6018      	str	r0, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013a0e:	6818      	ldr	r0, [r3, #0]
 8013a10:	0640      	lsls	r0, r0, #25
 8013a12:	d504      	bpl.n	8013a1e <USB_ActivateEndpoint+0x17e>
 8013a14:	6818      	ldr	r0, [r3, #0]
 8013a16:	4005      	ands	r5, r0
 8013a18:	483f      	ldr	r0, [pc, #252]	@ (8013b18 <USB_ActivateEndpoint+0x278>)
 8013a1a:	4328      	orrs	r0, r5
 8013a1c:	6018      	str	r0, [r3, #0]
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013a1e:	6810      	ldr	r0, [r2, #0]
 8013a20:	6909      	ldr	r1, [r1, #16]
 8013a22:	0180      	lsls	r0, r0, #6
 8013a24:	0980      	lsrs	r0, r0, #6
 8013a26:	6010      	str	r0, [r2, #0]
 8013a28:	2900      	cmp	r1, #0
 8013a2a:	d115      	bne.n	8013a58 <USB_ActivateEndpoint+0x1b8>
 8013a2c:	2080      	movs	r0, #128	@ 0x80
 8013a2e:	6815      	ldr	r5, [r2, #0]
 8013a30:	0600      	lsls	r0, r0, #24
 8013a32:	4328      	orrs	r0, r5
 8013a34:	6010      	str	r0, [r2, #0]
 8013a36:	6850      	ldr	r0, [r2, #4]
 8013a38:	0180      	lsls	r0, r0, #6
 8013a3a:	0980      	lsrs	r0, r0, #6
 8013a3c:	6050      	str	r0, [r2, #4]
 8013a3e:	2900      	cmp	r1, #0
 8013a40:	d11f      	bne.n	8013a82 <USB_ActivateEndpoint+0x1e2>
 8013a42:	6850      	ldr	r0, [r2, #4]
 8013a44:	2180      	movs	r1, #128	@ 0x80
 8013a46:	0609      	lsls	r1, r1, #24
 8013a48:	4301      	orrs	r1, r0
 8013a4a:	6051      	str	r1, [r2, #4]
 8013a4c:	e023      	b.n	8013a96 <USB_ActivateEndpoint+0x1f6>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013a4e:	681e      	ldr	r6, [r3, #0]
 8013a50:	4f36      	ldr	r7, [pc, #216]	@ (8013b2c <USB_ActivateEndpoint+0x28c>)
 8013a52:	403e      	ands	r6, r7
 8013a54:	4326      	orrs	r6, r4
 8013a56:	e7b3      	b.n	80139c0 <USB_ActivateEndpoint+0x120>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013a58:	293e      	cmp	r1, #62	@ 0x3e
 8013a5a:	d806      	bhi.n	8013a6a <USB_ActivateEndpoint+0x1ca>
 8013a5c:	2501      	movs	r5, #1
 8013a5e:	0848      	lsrs	r0, r1, #1
 8013a60:	400d      	ands	r5, r1
 8013a62:	1940      	adds	r0, r0, r5
 8013a64:	0680      	lsls	r0, r0, #26
 8013a66:	6815      	ldr	r5, [r2, #0]
 8013a68:	e7e3      	b.n	8013a32 <USB_ActivateEndpoint+0x192>
 8013a6a:	251f      	movs	r5, #31
 8013a6c:	400d      	ands	r5, r1
 8013a6e:	426e      	negs	r6, r5
 8013a70:	4175      	adcs	r5, r6
 8013a72:	0948      	lsrs	r0, r1, #5
 8013a74:	1b40      	subs	r0, r0, r5
 8013a76:	6815      	ldr	r5, [r2, #0]
 8013a78:	0680      	lsls	r0, r0, #26
 8013a7a:	4328      	orrs	r0, r5
 8013a7c:	2580      	movs	r5, #128	@ 0x80
 8013a7e:	062d      	lsls	r5, r5, #24
 8013a80:	e7d7      	b.n	8013a32 <USB_ActivateEndpoint+0x192>
 8013a82:	293e      	cmp	r1, #62	@ 0x3e
 8013a84:	d812      	bhi.n	8013aac <USB_ActivateEndpoint+0x20c>
 8013a86:	2501      	movs	r5, #1
 8013a88:	0848      	lsrs	r0, r1, #1
 8013a8a:	4029      	ands	r1, r5
 8013a8c:	1840      	adds	r0, r0, r1
 8013a8e:	6851      	ldr	r1, [r2, #4]
 8013a90:	0680      	lsls	r0, r0, #26
 8013a92:	4308      	orrs	r0, r1
 8013a94:	6050      	str	r0, [r2, #4]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013a96:	22c0      	movs	r2, #192	@ 0xc0
 8013a98:	6819      	ldr	r1, [r3, #0]
 8013a9a:	0192      	lsls	r2, r2, #6
 8013a9c:	4039      	ands	r1, r7
 8013a9e:	404a      	eors	r2, r1
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013aa0:	4661      	mov	r1, ip
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013aa2:	4322      	orrs	r2, r4
 8013aa4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013aa6:	681a      	ldr	r2, [r3, #0]
 8013aa8:	400a      	ands	r2, r1
 8013aaa:	e745      	b.n	8013938 <USB_ActivateEndpoint+0x98>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013aac:	251f      	movs	r5, #31
 8013aae:	0948      	lsrs	r0, r1, #5
 8013ab0:	4029      	ands	r1, r5
 8013ab2:	424d      	negs	r5, r1
 8013ab4:	4169      	adcs	r1, r5
 8013ab6:	1a40      	subs	r0, r0, r1
 8013ab8:	6851      	ldr	r1, [r2, #4]
 8013aba:	0680      	lsls	r0, r0, #26
 8013abc:	4308      	orrs	r0, r1
 8013abe:	e7c1      	b.n	8013a44 <USB_ActivateEndpoint+0x1a4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013ac0:	2180      	movs	r1, #128	@ 0x80
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	01c9      	lsls	r1, r1, #7
 8013ac6:	420a      	tst	r2, r1
 8013ac8:	d004      	beq.n	8013ad4 <USB_ActivateEndpoint+0x234>
 8013aca:	6819      	ldr	r1, [r3, #0]
 8013acc:	4a14      	ldr	r2, [pc, #80]	@ (8013b20 <USB_ActivateEndpoint+0x280>)
 8013ace:	4029      	ands	r1, r5
 8013ad0:	430a      	orrs	r2, r1
 8013ad2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	0652      	lsls	r2, r2, #25
 8013ad8:	d504      	bpl.n	8013ae4 <USB_ActivateEndpoint+0x244>
 8013ada:	6819      	ldr	r1, [r3, #0]
 8013adc:	4a0e      	ldr	r2, [pc, #56]	@ (8013b18 <USB_ActivateEndpoint+0x278>)
 8013ade:	4029      	ands	r1, r5
 8013ae0:	430a      	orrs	r2, r1
 8013ae2:	601a      	str	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8013ae4:	2801      	cmp	r0, #1
 8013ae6:	d00b      	beq.n	8013b00 <USB_ActivateEndpoint+0x260>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013ae8:	4662      	mov	r2, ip
 8013aea:	6819      	ldr	r1, [r3, #0]
 8013aec:	4011      	ands	r1, r2
 8013aee:	2220      	movs	r2, #32
 8013af0:	404a      	eors	r2, r1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013af2:	4322      	orrs	r2, r4
 8013af4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	403a      	ands	r2, r7
 8013afa:	4314      	orrs	r4, r2
 8013afc:	601c      	str	r4, [r3, #0]
 8013afe:	e71d      	b.n	801393c <USB_ActivateEndpoint+0x9c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013b00:	4661      	mov	r1, ip
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	400a      	ands	r2, r1
 8013b06:	e7f4      	b.n	8013af2 <USB_ActivateEndpoint+0x252>
 8013b08:	07ff898f 	.word	0x07ff898f
 8013b0c:	00008080 	.word	0x00008080
 8013b10:	07ff8f8f 	.word	0x07ff8f8f
 8013b14:	40009800 	.word	0x40009800
 8013b18:	000080c0 	.word	0x000080c0
 8013b1c:	07ff8fbf 	.word	0x07ff8fbf
 8013b20:	0000c080 	.word	0x0000c080
 8013b24:	07ffbf8f 	.word	0x07ffbf8f
 8013b28:	00008180 	.word	0x00008180
 8013b2c:	07ff8e8f 	.word	0x07ff8e8f

08013b30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8013b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013b32:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8013b34:	7b0a      	ldrb	r2, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8013b3a:	784e      	ldrb	r6, [r1, #1]
 8013b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8013bf8 <USB_DeactivateEndpoint+0xc8>)
  if (ep->doublebuffer == 0U)
 8013b3e:	2a00      	cmp	r2, #0
 8013b40:	d11c      	bne.n	8013b7c <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013b42:	6802      	ldr	r2, [r0, #0]
    if (ep->is_in != 0U)
 8013b44:	2e00      	cmp	r6, #0
 8013b46:	d00e      	beq.n	8013b66 <USB_DeactivateEndpoint+0x36>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013b48:	0652      	lsls	r2, r2, #25
 8013b4a:	d505      	bpl.n	8013b58 <USB_DeactivateEndpoint+0x28>
 8013b4c:	6801      	ldr	r1, [r0, #0]
 8013b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8013bfc <USB_DeactivateEndpoint+0xcc>)
 8013b50:	4011      	ands	r1, r2
 8013b52:	4a2b      	ldr	r2, [pc, #172]	@ (8013c00 <USB_DeactivateEndpoint+0xd0>)
 8013b54:	430a      	orrs	r2, r1
 8013b56:	6002      	str	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013b58:	6802      	ldr	r2, [r0, #0]
 8013b5a:	492a      	ldr	r1, [pc, #168]	@ (8013c04 <USB_DeactivateEndpoint+0xd4>)
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013b5c:	400a      	ands	r2, r1
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8013b62:	2000      	movs	r0, #0
 8013b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013b66:	0452      	lsls	r2, r2, #17
 8013b68:	d505      	bpl.n	8013b76 <USB_DeactivateEndpoint+0x46>
 8013b6a:	6801      	ldr	r1, [r0, #0]
 8013b6c:	4a23      	ldr	r2, [pc, #140]	@ (8013bfc <USB_DeactivateEndpoint+0xcc>)
 8013b6e:	4011      	ands	r1, r2
 8013b70:	4a25      	ldr	r2, [pc, #148]	@ (8013c08 <USB_DeactivateEndpoint+0xd8>)
 8013b72:	430a      	orrs	r2, r1
 8013b74:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013b76:	6802      	ldr	r2, [r0, #0]
 8013b78:	4924      	ldr	r1, [pc, #144]	@ (8013c0c <USB_DeactivateEndpoint+0xdc>)
 8013b7a:	e7ef      	b.n	8013b5c <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8013b7c:	2180      	movs	r1, #128	@ 0x80
 8013b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8013bfc <USB_DeactivateEndpoint+0xcc>)
 8013b80:	4d20      	ldr	r5, [pc, #128]	@ (8013c04 <USB_DeactivateEndpoint+0xd4>)
 8013b82:	4c22      	ldr	r4, [pc, #136]	@ (8013c0c <USB_DeactivateEndpoint+0xdc>)
 8013b84:	01c9      	lsls	r1, r1, #7
 8013b86:	2e00      	cmp	r6, #0
 8013b88:	d11a      	bne.n	8013bc0 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013b8a:	6806      	ldr	r6, [r0, #0]
 8013b8c:	420e      	tst	r6, r1
 8013b8e:	d004      	beq.n	8013b9a <USB_DeactivateEndpoint+0x6a>
 8013b90:	6806      	ldr	r6, [r0, #0]
 8013b92:	491d      	ldr	r1, [pc, #116]	@ (8013c08 <USB_DeactivateEndpoint+0xd8>)
 8013b94:	4016      	ands	r6, r2
 8013b96:	4331      	orrs	r1, r6
 8013b98:	6001      	str	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013b9a:	6801      	ldr	r1, [r0, #0]
 8013b9c:	4e18      	ldr	r6, [pc, #96]	@ (8013c00 <USB_DeactivateEndpoint+0xd0>)
 8013b9e:	0649      	lsls	r1, r1, #25
 8013ba0:	d503      	bpl.n	8013baa <USB_DeactivateEndpoint+0x7a>
 8013ba2:	6801      	ldr	r1, [r0, #0]
 8013ba4:	4011      	ands	r1, r2
 8013ba6:	4331      	orrs	r1, r6
 8013ba8:	6001      	str	r1, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8013baa:	6801      	ldr	r1, [r0, #0]
 8013bac:	400a      	ands	r2, r1
 8013bae:	4316      	orrs	r6, r2
 8013bb0:	6006      	str	r6, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013bb2:	6802      	ldr	r2, [r0, #0]
 8013bb4:	4022      	ands	r2, r4
 8013bb6:	431a      	orrs	r2, r3
 8013bb8:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013bba:	6802      	ldr	r2, [r0, #0]
 8013bbc:	402a      	ands	r2, r5
 8013bbe:	e7ce      	b.n	8013b5e <USB_DeactivateEndpoint+0x2e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013bc0:	6807      	ldr	r7, [r0, #0]
 8013bc2:	4e11      	ldr	r6, [pc, #68]	@ (8013c08 <USB_DeactivateEndpoint+0xd8>)
 8013bc4:	420f      	tst	r7, r1
 8013bc6:	d003      	beq.n	8013bd0 <USB_DeactivateEndpoint+0xa0>
 8013bc8:	6801      	ldr	r1, [r0, #0]
 8013bca:	4011      	ands	r1, r2
 8013bcc:	4331      	orrs	r1, r6
 8013bce:	6001      	str	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013bd0:	6801      	ldr	r1, [r0, #0]
 8013bd2:	0649      	lsls	r1, r1, #25
 8013bd4:	d504      	bpl.n	8013be0 <USB_DeactivateEndpoint+0xb0>
 8013bd6:	6807      	ldr	r7, [r0, #0]
 8013bd8:	4909      	ldr	r1, [pc, #36]	@ (8013c00 <USB_DeactivateEndpoint+0xd0>)
 8013bda:	4017      	ands	r7, r2
 8013bdc:	4339      	orrs	r1, r7
 8013bde:	6001      	str	r1, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013be0:	6801      	ldr	r1, [r0, #0]
 8013be2:	400a      	ands	r2, r1
 8013be4:	4316      	orrs	r6, r2
 8013be6:	6006      	str	r6, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013be8:	6802      	ldr	r2, [r0, #0]
 8013bea:	402a      	ands	r2, r5
 8013bec:	431a      	orrs	r2, r3
 8013bee:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013bf0:	6802      	ldr	r2, [r0, #0]
 8013bf2:	4022      	ands	r2, r4
 8013bf4:	e7b3      	b.n	8013b5e <USB_DeactivateEndpoint+0x2e>
 8013bf6:	46c0      	nop			@ (mov r8, r8)
 8013bf8:	00008080 	.word	0x00008080
 8013bfc:	07ff8f8f 	.word	0x07ff8f8f
 8013c00:	000080c0 	.word	0x000080c0
 8013c04:	07ff8fbf 	.word	0x07ff8fbf
 8013c08:	0000c080 	.word	0x0000c080
 8013c0c:	07ffbf8f 	.word	0x07ffbf8f

08013c10 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013c10:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 8013c12:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4a0b      	ldr	r2, [pc, #44]	@ (8013c44 <USB_EPSetStall+0x34>)
 8013c18:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8013c1a:	2900      	cmp	r1, #0
 8013c1c:	d008      	beq.n	8013c30 <USB_EPSetStall+0x20>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013c1e:	6801      	ldr	r1, [r0, #0]
 8013c20:	4b09      	ldr	r3, [pc, #36]	@ (8013c48 <USB_EPSetStall+0x38>)
 8013c22:	4019      	ands	r1, r3
 8013c24:	2310      	movs	r3, #16
 8013c26:	404b      	eors	r3, r1
 8013c28:	4313      	orrs	r3, r2
 8013c2a:	6003      	str	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013c30:	6801      	ldr	r1, [r0, #0]
 8013c32:	4b06      	ldr	r3, [pc, #24]	@ (8013c4c <USB_EPSetStall+0x3c>)
 8013c34:	4019      	ands	r1, r3
 8013c36:	2380      	movs	r3, #128	@ 0x80
 8013c38:	015b      	lsls	r3, r3, #5
 8013c3a:	404b      	eors	r3, r1
 8013c3c:	431a      	orrs	r2, r3
 8013c3e:	6002      	str	r2, [r0, #0]
 8013c40:	e7f4      	b.n	8013c2c <USB_EPSetStall+0x1c>
 8013c42:	46c0      	nop			@ (mov r8, r8)
 8013c44:	00008080 	.word	0x00008080
 8013c48:	07ff8fbf 	.word	0x07ff8fbf
 8013c4c:	07ffbf8f 	.word	0x07ffbf8f

08013c50 <USB_EPClearStall>:
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013c50:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 8013c52:	784a      	ldrb	r2, [r1, #1]
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013c54:	009b      	lsls	r3, r3, #2
 8013c56:	18c0      	adds	r0, r0, r3
 8013c58:	6803      	ldr	r3, [r0, #0]
  if (ep->is_in != 0U)
 8013c5a:	2a00      	cmp	r2, #0
 8013c5c:	d014      	beq.n	8013c88 <USB_EPClearStall+0x38>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013c5e:	065b      	lsls	r3, r3, #25
 8013c60:	d505      	bpl.n	8013c6e <USB_EPClearStall+0x1e>
 8013c62:	6802      	ldr	r2, [r0, #0]
 8013c64:	4b0f      	ldr	r3, [pc, #60]	@ (8013ca4 <USB_EPClearStall+0x54>)
 8013c66:	401a      	ands	r2, r3
 8013c68:	4b0f      	ldr	r3, [pc, #60]	@ (8013ca8 <USB_EPClearStall+0x58>)
 8013c6a:	4313      	orrs	r3, r2
 8013c6c:	6003      	str	r3, [r0, #0]

    if (ep->type != EP_TYPE_ISOC)
 8013c6e:	78cb      	ldrb	r3, [r1, #3]
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d007      	beq.n	8013c84 <USB_EPClearStall+0x34>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013c74:	4a0d      	ldr	r2, [pc, #52]	@ (8013cac <USB_EPClearStall+0x5c>)
 8013c76:	6803      	ldr	r3, [r0, #0]
 8013c78:	4013      	ands	r3, r2
 8013c7a:	2220      	movs	r2, #32
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013c7c:	405a      	eors	r2, r3
 8013c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8013cb0 <USB_EPClearStall+0x60>)
 8013c80:	4313      	orrs	r3, r2
 8013c82:	6003      	str	r3, [r0, #0]
  }

  return HAL_OK;
}
 8013c84:	2000      	movs	r0, #0
 8013c86:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013c88:	045b      	lsls	r3, r3, #17
 8013c8a:	d505      	bpl.n	8013c98 <USB_EPClearStall+0x48>
 8013c8c:	6802      	ldr	r2, [r0, #0]
 8013c8e:	4b05      	ldr	r3, [pc, #20]	@ (8013ca4 <USB_EPClearStall+0x54>)
 8013c90:	401a      	ands	r2, r3
 8013c92:	4b08      	ldr	r3, [pc, #32]	@ (8013cb4 <USB_EPClearStall+0x64>)
 8013c94:	4313      	orrs	r3, r2
 8013c96:	6003      	str	r3, [r0, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013c98:	4a07      	ldr	r2, [pc, #28]	@ (8013cb8 <USB_EPClearStall+0x68>)
 8013c9a:	6803      	ldr	r3, [r0, #0]
 8013c9c:	4013      	ands	r3, r2
 8013c9e:	22c0      	movs	r2, #192	@ 0xc0
 8013ca0:	0192      	lsls	r2, r2, #6
 8013ca2:	e7eb      	b.n	8013c7c <USB_EPClearStall+0x2c>
 8013ca4:	07ff8f8f 	.word	0x07ff8f8f
 8013ca8:	000080c0 	.word	0x000080c0
 8013cac:	07ff8fbf 	.word	0x07ff8fbf
 8013cb0:	00008080 	.word	0x00008080
 8013cb4:	0000c080 	.word	0x0000c080
 8013cb8:	07ffbf8f 	.word	0x07ffbf8f

08013cbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8013cbc:	b510      	push	{r4, lr}
  /* IN endpoint */
  if (ep->is_in == 1U)
 8013cbe:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->doublebuffer == 0U)
 8013cc0:	7b0b      	ldrb	r3, [r1, #12]
  if (ep->is_in == 1U)
 8013cc2:	2a01      	cmp	r2, #1
 8013cc4:	d116      	bne.n	8013cf4 <USB_EPStopXfer+0x38>
    if (ep->doublebuffer == 0U)
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d112      	bne.n	8013cf0 <USB_EPStopXfer+0x34>
    {
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013cca:	780b      	ldrb	r3, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8013ccc:	78c9      	ldrb	r1, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013cce:	009b      	lsls	r3, r3, #2
 8013cd0:	4c11      	ldr	r4, [pc, #68]	@ (8013d18 <USB_EPStopXfer+0x5c>)
 8013cd2:	4a12      	ldr	r2, [pc, #72]	@ (8013d1c <USB_EPStopXfer+0x60>)
 8013cd4:	18c0      	adds	r0, r0, r3
      if (ep->type != EP_TYPE_ISOC)
 8013cd6:	2901      	cmp	r1, #1
 8013cd8:	d006      	beq.n	8013ce8 <USB_EPStopXfer+0x2c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013cda:	2320      	movs	r3, #32
 8013cdc:	6801      	ldr	r1, [r0, #0]
 8013cde:	4021      	ands	r1, r4
    if (ep->doublebuffer == 0U)
    {
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013ce0:	404b      	eors	r3, r1
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013ce2:	4313      	orrs	r3, r2
 8013ce4:	6003      	str	r3, [r0, #0]
 8013ce6:	e003      	b.n	8013cf0 <USB_EPStopXfer+0x34>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013ce8:	6803      	ldr	r3, [r0, #0]
 8013cea:	4023      	ands	r3, r4
 8013cec:	431a      	orrs	r2, r3
 8013cee:	6002      	str	r2, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8013cf0:	2000      	movs	r0, #0
 8013cf2:	bd10      	pop	{r4, pc}
    if (ep->doublebuffer == 0U)
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d1fb      	bne.n	8013cf0 <USB_EPStopXfer+0x34>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013cf8:	780b      	ldrb	r3, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8013cfa:	78c9      	ldrb	r1, [r1, #3]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	4a07      	ldr	r2, [pc, #28]	@ (8013d1c <USB_EPStopXfer+0x60>)
 8013d00:	4c07      	ldr	r4, [pc, #28]	@ (8013d20 <USB_EPStopXfer+0x64>)
 8013d02:	18c0      	adds	r0, r0, r3
      if (ep->type != EP_TYPE_ISOC)
 8013d04:	2901      	cmp	r1, #1
 8013d06:	d004      	beq.n	8013d12 <USB_EPStopXfer+0x56>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013d08:	2380      	movs	r3, #128	@ 0x80
 8013d0a:	6801      	ldr	r1, [r0, #0]
 8013d0c:	019b      	lsls	r3, r3, #6
 8013d0e:	4021      	ands	r1, r4
 8013d10:	e7e6      	b.n	8013ce0 <USB_EPStopXfer+0x24>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013d12:	6803      	ldr	r3, [r0, #0]
 8013d14:	4023      	ands	r3, r4
 8013d16:	e7e4      	b.n	8013ce2 <USB_EPStopXfer+0x26>
 8013d18:	07ff8fbf 	.word	0x07ff8fbf
 8013d1c:	00008080 	.word	0x00008080
 8013d20:	07ffbf8f 	.word	0x07ffbf8f

08013d24 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8013d24:	2900      	cmp	r1, #0
 8013d26:	d101      	bne.n	8013d2c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8013d28:	2380      	movs	r3, #128	@ 0x80
 8013d2a:	64c3      	str	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	4770      	bx	lr

08013d30 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8013d30:	2380      	movs	r3, #128	@ 0x80
 8013d32:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8013d34:	021b      	lsls	r3, r3, #8
 8013d36:	4313      	orrs	r3, r2
 8013d38:	6583      	str	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8013d3a:	2000      	movs	r0, #0
 8013d3c:	4770      	bx	lr
	...

08013d40 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8013d40:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8013d42:	4a02      	ldr	r2, [pc, #8]	@ (8013d4c <USB_DevDisconnect+0xc>)
 8013d44:	4013      	ands	r3, r2
 8013d46:	6583      	str	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8013d48:	2000      	movs	r0, #0
 8013d4a:	4770      	bx	lr
 8013d4c:	ffff7fff 	.word	0xffff7fff

08013d50 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013d50:	6c40      	ldr	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8013d52:	4770      	bx	lr

08013d54 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8013d56:	2403      	movs	r4, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013d58:	1cd8      	adds	r0, r3, #3
  uint16_t remaining_bytes = wNBytes % 4U;
 8013d5a:	4023      	ands	r3, r4
  uint8_t *pBuf = pbUsrBuf;

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
  {
    NbWords--;
 8013d5c:	001c      	movs	r4, r3
 8013d5e:	1e65      	subs	r5, r4, #1
 8013d60:	41ac      	sbcs	r4, r5
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013d62:	0880      	lsrs	r0, r0, #2
    NbWords--;
 8013d64:	1b00      	subs	r0, r0, r4
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013d66:	4c11      	ldr	r4, [pc, #68]	@ (8013dac <USB_WritePMA+0x58>)
 8013d68:	0080      	lsls	r0, r0, #2
 8013d6a:	1912      	adds	r2, r2, r4
 8013d6c:	0016      	movs	r6, r2
 8013d6e:	180d      	adds	r5, r1, r0

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8013d70:	42a9      	cmp	r1, r5
 8013d72:	d10e      	bne.n	8013d92 <USB_WritePMA+0x3e>
    pBuf++;
    pBuf++;
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d00b      	beq.n	8013d90 <USB_WritePMA+0x3c>
 8013d78:	2100      	movs	r1, #0
  {
    WrVal = 0U;
 8013d7a:	000c      	movs	r4, r1

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8013d7c:	5c6e      	ldrb	r6, [r5, r1]
 8013d7e:	00cf      	lsls	r7, r1, #3
 8013d80:	40be      	lsls	r6, r7
      count++;
 8013d82:	3101      	adds	r1, #1
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8013d84:	4334      	orrs	r4, r6
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 8013d86:	b28e      	uxth	r6, r1
 8013d88:	42b3      	cmp	r3, r6
 8013d8a:	d1f7      	bne.n	8013d7c <USB_WritePMA+0x28>

    *pdwVal = WrVal;
 8013d8c:	1812      	adds	r2, r2, r0
 8013d8e:	6014      	str	r4, [r2, #0]
  }
}
 8013d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8013d92:	784c      	ldrb	r4, [r1, #1]
 8013d94:	780f      	ldrb	r7, [r1, #0]
 8013d96:	0224      	lsls	r4, r4, #8
 8013d98:	433c      	orrs	r4, r7
 8013d9a:	788f      	ldrb	r7, [r1, #2]
 8013d9c:	043f      	lsls	r7, r7, #16
 8013d9e:	4327      	orrs	r7, r4
 8013da0:	78cc      	ldrb	r4, [r1, #3]
    pBuf++;
 8013da2:	3104      	adds	r1, #4
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8013da4:	0624      	lsls	r4, r4, #24
 8013da6:	433c      	orrs	r4, r7
 8013da8:	c610      	stmia	r6!, {r4}
  for (count = NbWords; count != 0U; count--)
 8013daa:	e7e1      	b.n	8013d70 <USB_WritePMA+0x1c>
 8013dac:	40009800 	.word	0x40009800

08013db0 <USB_EPStartXfer>:
{
 8013db0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8013db2:	784a      	ldrb	r2, [r1, #1]
{
 8013db4:	0006      	movs	r6, r0
 8013db6:	000c      	movs	r4, r1
    if (ep->doublebuffer == 0U)
 8013db8:	7b0b      	ldrb	r3, [r1, #12]
{
 8013dba:	b085      	sub	sp, #20
  if (ep->is_in == 1U)
 8013dbc:	2a01      	cmp	r2, #1
 8013dbe:	d000      	beq.n	8013dc2 <USB_EPStartXfer+0x12>
 8013dc0:	e10d      	b.n	8013fde <USB_EPStartXfer+0x22e>
    if (ep->xfer_len > ep->maxpacket)
 8013dc2:	690f      	ldr	r7, [r1, #16]
 8013dc4:	698d      	ldr	r5, [r1, #24]
 8013dc6:	42bd      	cmp	r5, r7
 8013dc8:	d900      	bls.n	8013dcc <USB_EPStartXfer+0x1c>
 8013dca:	003d      	movs	r5, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013dcc:	6962      	ldr	r2, [r4, #20]
 8013dce:	9201      	str	r2, [sp, #4]
    if (ep->doublebuffer == 0U)
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d11e      	bne.n	8013e12 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013dd4:	b2ab      	uxth	r3, r5
 8013dd6:	88e2      	ldrh	r2, [r4, #6]
 8013dd8:	0030      	movs	r0, r6
 8013dda:	9901      	ldr	r1, [sp, #4]
 8013ddc:	f7ff ffba 	bl	8013d54 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013de0:	7823      	ldrb	r3, [r4, #0]
 8013de2:	4aa2      	ldr	r2, [pc, #648]	@ (801406c <USB_EPStartXfer+0x2bc>)
 8013de4:	00db      	lsls	r3, r3, #3
 8013de6:	189b      	adds	r3, r3, r2
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	042d      	lsls	r5, r5, #16
 8013dec:	b292      	uxth	r2, r2
 8013dee:	601a      	str	r2, [r3, #0]
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	4315      	orrs	r5, r2
 8013df4:	601d      	str	r5, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8013df6:	7823      	ldrb	r3, [r4, #0]
 8013df8:	4a9d      	ldr	r2, [pc, #628]	@ (8014070 <USB_EPStartXfer+0x2c0>)
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	18f3      	adds	r3, r6, r3
 8013dfe:	6819      	ldr	r1, [r3, #0]
 8013e00:	4011      	ands	r1, r2
 8013e02:	2230      	movs	r2, #48	@ 0x30
 8013e04:	404a      	eors	r2, r1
 8013e06:	499b      	ldr	r1, [pc, #620]	@ (8014074 <USB_EPStartXfer+0x2c4>)
 8013e08:	430a      	orrs	r2, r1
 8013e0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8013e0c:	2000      	movs	r0, #0
}
 8013e0e:	b005      	add	sp, #20
 8013e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013e12:	7820      	ldrb	r0, [r4, #0]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013e14:	4995      	ldr	r1, [pc, #596]	@ (801406c <USB_EPStartXfer+0x2bc>)
 8013e16:	00c2      	lsls	r2, r0, #3
 8013e18:	1852      	adds	r2, r2, r1
      if (ep->type == EP_TYPE_BULK)
 8013e1a:	78e1      	ldrb	r1, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013e1c:	0080      	lsls	r0, r0, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8013e1e:	6a23      	ldr	r3, [r4, #32]
 8013e20:	1830      	adds	r0, r6, r0
      if (ep->type == EP_TYPE_BULK)
 8013e22:	2902      	cmp	r1, #2
 8013e24:	d000      	beq.n	8013e28 <USB_EPStartXfer+0x78>
 8013e26:	e0c3      	b.n	8013fb0 <USB_EPStartXfer+0x200>
        if (ep->xfer_len_db > ep->maxpacket)
 8013e28:	429f      	cmp	r7, r3
 8013e2a:	d300      	bcc.n	8013e2e <USB_EPStartXfer+0x7e>
 8013e2c:	e0b0      	b.n	8013f90 <USB_EPStartXfer+0x1e0>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013e2e:	6807      	ldr	r7, [r0, #0]
 8013e30:	4b91      	ldr	r3, [pc, #580]	@ (8014078 <USB_EPStartXfer+0x2c8>)
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013e32:	0429      	lsls	r1, r5, #16
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013e34:	401f      	ands	r7, r3
 8013e36:	4b91      	ldr	r3, [pc, #580]	@ (801407c <USB_EPStartXfer+0x2cc>)
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013e38:	9103      	str	r1, [sp, #12]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013e3a:	433b      	orrs	r3, r7
 8013e3c:	6003      	str	r3, [r0, #0]
          ep->xfer_len_db -= len;
 8013e3e:	6a23      	ldr	r3, [r4, #32]
 8013e40:	1b5b      	subs	r3, r3, r5
 8013e42:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013e44:	6803      	ldr	r3, [r0, #0]
 8013e46:	2040      	movs	r0, #64	@ 0x40
 8013e48:	469c      	mov	ip, r3
 8013e4a:	4661      	mov	r1, ip
 8013e4c:	4003      	ands	r3, r0
 8013e4e:	9302      	str	r3, [sp, #8]
            ep->xfer_buff += len;
 8013e50:	9b01      	ldr	r3, [sp, #4]
 8013e52:	195f      	adds	r7, r3, r5
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013e54:	b2ab      	uxth	r3, r5
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013e56:	4201      	tst	r1, r0
 8013e58:	d04e      	beq.n	8013ef8 <USB_EPStartXfer+0x148>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013e5a:	6850      	ldr	r0, [r2, #4]
 8013e5c:	0429      	lsls	r1, r5, #16
 8013e5e:	b280      	uxth	r0, r0
 8013e60:	6050      	str	r0, [r2, #4]
 8013e62:	6850      	ldr	r0, [r2, #4]
 8013e64:	4308      	orrs	r0, r1
 8013e66:	6050      	str	r0, [r2, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013e68:	8962      	ldrh	r2, [r4, #10]
 8013e6a:	9901      	ldr	r1, [sp, #4]
 8013e6c:	0030      	movs	r0, r6
 8013e6e:	f7ff ff71 	bl	8013d54 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8013e72:	6a23      	ldr	r3, [r4, #32]
 8013e74:	6921      	ldr	r1, [r4, #16]
              ep->xfer_len_db = 0U;
 8013e76:	2200      	movs	r2, #0
            ep->xfer_buff += len;
 8013e78:	6167      	str	r7, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8013e7a:	428b      	cmp	r3, r1
 8013e7c:	d901      	bls.n	8013e82 <USB_EPStartXfer+0xd2>
              ep->xfer_len_db -= len;
 8013e7e:	1b5a      	subs	r2, r3, r5
 8013e80:	002b      	movs	r3, r5
 8013e82:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013e84:	7862      	ldrb	r2, [r4, #1]
 8013e86:	2a00      	cmp	r2, #0
 8013e88:	d12a      	bne.n	8013ee0 <USB_EPStartXfer+0x130>
 8013e8a:	7822      	ldrb	r2, [r4, #0]
 8013e8c:	4977      	ldr	r1, [pc, #476]	@ (801406c <USB_EPStartXfer+0x2bc>)
 8013e8e:	00d2      	lsls	r2, r2, #3
 8013e90:	1852      	adds	r2, r2, r1
 8013e92:	6811      	ldr	r1, [r2, #0]
 8013e94:	0189      	lsls	r1, r1, #6
 8013e96:	0989      	lsrs	r1, r1, #6
 8013e98:	6011      	str	r1, [r2, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d10b      	bne.n	8013eb6 <USB_EPStartXfer+0x106>
 8013e9e:	2180      	movs	r1, #128	@ 0x80
 8013ea0:	6810      	ldr	r0, [r2, #0]
 8013ea2:	0609      	lsls	r1, r1, #24
 8013ea4:	4301      	orrs	r1, r0
 8013ea6:	6011      	str	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ea8:	8922      	ldrh	r2, [r4, #8]
 8013eaa:	b29b      	uxth	r3, r3
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013eac:	0039      	movs	r1, r7
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013eae:	0030      	movs	r0, r6
 8013eb0:	f7ff ff50 	bl	8013d54 <USB_WritePMA>
 8013eb4:	e79f      	b.n	8013df6 <USB_EPStartXfer+0x46>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013eb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8013eb8:	d806      	bhi.n	8013ec8 <USB_EPStartXfer+0x118>
 8013eba:	2001      	movs	r0, #1
 8013ebc:	0859      	lsrs	r1, r3, #1
 8013ebe:	4018      	ands	r0, r3
 8013ec0:	1809      	adds	r1, r1, r0
 8013ec2:	0689      	lsls	r1, r1, #26
 8013ec4:	6810      	ldr	r0, [r2, #0]
 8013ec6:	e7ed      	b.n	8013ea4 <USB_EPStartXfer+0xf4>
 8013ec8:	201f      	movs	r0, #31
 8013eca:	4018      	ands	r0, r3
 8013ecc:	4245      	negs	r5, r0
 8013ece:	4168      	adcs	r0, r5
 8013ed0:	0959      	lsrs	r1, r3, #5
 8013ed2:	1a09      	subs	r1, r1, r0
 8013ed4:	6810      	ldr	r0, [r2, #0]
 8013ed6:	0689      	lsls	r1, r1, #26
 8013ed8:	4301      	orrs	r1, r0
 8013eda:	2080      	movs	r0, #128	@ 0x80
 8013edc:	0600      	lsls	r0, r0, #24
 8013ede:	e7e1      	b.n	8013ea4 <USB_EPStartXfer+0xf4>
 8013ee0:	2a01      	cmp	r2, #1
 8013ee2:	d1e1      	bne.n	8013ea8 <USB_EPStartXfer+0xf8>
 8013ee4:	7822      	ldrb	r2, [r4, #0]
 8013ee6:	4961      	ldr	r1, [pc, #388]	@ (801406c <USB_EPStartXfer+0x2bc>)
 8013ee8:	00d2      	lsls	r2, r2, #3
 8013eea:	1852      	adds	r2, r2, r1
 8013eec:	6811      	ldr	r1, [r2, #0]
 8013eee:	b289      	uxth	r1, r1
 8013ef0:	6011      	str	r1, [r2, #0]
 8013ef2:	6810      	ldr	r0, [r2, #0]
 8013ef4:	0419      	lsls	r1, r3, #16
 8013ef6:	e7d5      	b.n	8013ea4 <USB_EPStartXfer+0xf4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013ef8:	6810      	ldr	r0, [r2, #0]
 8013efa:	0429      	lsls	r1, r5, #16
 8013efc:	b280      	uxth	r0, r0
 8013efe:	6010      	str	r0, [r2, #0]
 8013f00:	6810      	ldr	r0, [r2, #0]
 8013f02:	4308      	orrs	r0, r1
 8013f04:	6010      	str	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f06:	8922      	ldrh	r2, [r4, #8]
 8013f08:	0030      	movs	r0, r6
 8013f0a:	9901      	ldr	r1, [sp, #4]
 8013f0c:	f7ff ff22 	bl	8013d54 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8013f10:	6a23      	ldr	r3, [r4, #32]
 8013f12:	6922      	ldr	r2, [r4, #16]
            ep->xfer_buff += len;
 8013f14:	6167      	str	r7, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8013f16:	4293      	cmp	r3, r2
 8013f18:	d902      	bls.n	8013f20 <USB_EPStartXfer+0x170>
              ep->xfer_len_db -= len;
 8013f1a:	1b5b      	subs	r3, r3, r5
 8013f1c:	9302      	str	r3, [sp, #8]
 8013f1e:	002b      	movs	r3, r5
 8013f20:	9a02      	ldr	r2, [sp, #8]
 8013f22:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013f24:	7862      	ldrb	r2, [r4, #1]
 8013f26:	2a00      	cmp	r2, #0
 8013f28:	d126      	bne.n	8013f78 <USB_EPStartXfer+0x1c8>
 8013f2a:	7822      	ldrb	r2, [r4, #0]
 8013f2c:	494f      	ldr	r1, [pc, #316]	@ (801406c <USB_EPStartXfer+0x2bc>)
 8013f2e:	00d2      	lsls	r2, r2, #3
 8013f30:	1852      	adds	r2, r2, r1
 8013f32:	6851      	ldr	r1, [r2, #4]
 8013f34:	0189      	lsls	r1, r1, #6
 8013f36:	0989      	lsrs	r1, r1, #6
 8013f38:	6051      	str	r1, [r2, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d107      	bne.n	8013f4e <USB_EPStartXfer+0x19e>
 8013f3e:	2180      	movs	r1, #128	@ 0x80
 8013f40:	6850      	ldr	r0, [r2, #4]
 8013f42:	0609      	lsls	r1, r1, #24
 8013f44:	4301      	orrs	r1, r0
 8013f46:	6051      	str	r1, [r2, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f48:	8962      	ldrh	r2, [r4, #10]
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	e7ae      	b.n	8013eac <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013f4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f50:	d806      	bhi.n	8013f60 <USB_EPStartXfer+0x1b0>
 8013f52:	2001      	movs	r0, #1
 8013f54:	0859      	lsrs	r1, r3, #1
 8013f56:	4018      	ands	r0, r3
 8013f58:	1809      	adds	r1, r1, r0
 8013f5a:	0689      	lsls	r1, r1, #26
 8013f5c:	6850      	ldr	r0, [r2, #4]
 8013f5e:	e7f1      	b.n	8013f44 <USB_EPStartXfer+0x194>
 8013f60:	201f      	movs	r0, #31
 8013f62:	4018      	ands	r0, r3
 8013f64:	4245      	negs	r5, r0
 8013f66:	4168      	adcs	r0, r5
 8013f68:	0959      	lsrs	r1, r3, #5
 8013f6a:	1a09      	subs	r1, r1, r0
 8013f6c:	6850      	ldr	r0, [r2, #4]
 8013f6e:	0689      	lsls	r1, r1, #26
 8013f70:	4301      	orrs	r1, r0
 8013f72:	2080      	movs	r0, #128	@ 0x80
 8013f74:	0600      	lsls	r0, r0, #24
 8013f76:	e7e5      	b.n	8013f44 <USB_EPStartXfer+0x194>
 8013f78:	2a01      	cmp	r2, #1
 8013f7a:	d1e5      	bne.n	8013f48 <USB_EPStartXfer+0x198>
 8013f7c:	7822      	ldrb	r2, [r4, #0]
 8013f7e:	493b      	ldr	r1, [pc, #236]	@ (801406c <USB_EPStartXfer+0x2bc>)
 8013f80:	00d2      	lsls	r2, r2, #3
 8013f82:	1852      	adds	r2, r2, r1
 8013f84:	6851      	ldr	r1, [r2, #4]
 8013f86:	b289      	uxth	r1, r1
 8013f88:	6051      	str	r1, [r2, #4]
 8013f8a:	6850      	ldr	r0, [r2, #4]
 8013f8c:	0419      	lsls	r1, r3, #16
 8013f8e:	e7d9      	b.n	8013f44 <USB_EPStartXfer+0x194>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013f90:	6805      	ldr	r5, [r0, #0]
 8013f92:	4f3b      	ldr	r7, [pc, #236]	@ (8014080 <USB_EPStartXfer+0x2d0>)
 8013f94:	4937      	ldr	r1, [pc, #220]	@ (8014074 <USB_EPStartXfer+0x2c4>)
 8013f96:	403d      	ands	r5, r7
 8013f98:	430d      	orrs	r5, r1
 8013f9a:	6005      	str	r5, [r0, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013f9c:	6810      	ldr	r0, [r2, #0]
 8013f9e:	b280      	uxth	r0, r0
 8013fa0:	6010      	str	r0, [r2, #0]
 8013fa2:	6815      	ldr	r5, [r2, #0]
 8013fa4:	0418      	lsls	r0, r3, #16
 8013fa6:	4328      	orrs	r0, r5
 8013fa8:	6010      	str	r0, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013faa:	b29b      	uxth	r3, r3
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013fac:	8922      	ldrh	r2, [r4, #8]
 8013fae:	e00d      	b.n	8013fcc <USB_EPStartXfer+0x21c>
        ep->xfer_len_db -= len;
 8013fb0:	1b5b      	subs	r3, r3, r5
 8013fb2:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013fb4:	6800      	ldr	r0, [r0, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013fb6:	b2ab      	uxth	r3, r5
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013fb8:	042f      	lsls	r7, r5, #16
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013fba:	0640      	lsls	r0, r0, #25
 8013fbc:	d508      	bpl.n	8013fd0 <USB_EPStartXfer+0x220>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013fbe:	6850      	ldr	r0, [r2, #4]
 8013fc0:	b280      	uxth	r0, r0
 8013fc2:	6050      	str	r0, [r2, #4]
 8013fc4:	6850      	ldr	r0, [r2, #4]
 8013fc6:	4338      	orrs	r0, r7
 8013fc8:	6050      	str	r0, [r2, #4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013fca:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013fcc:	9901      	ldr	r1, [sp, #4]
 8013fce:	e76e      	b.n	8013eae <USB_EPStartXfer+0xfe>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013fd0:	6810      	ldr	r0, [r2, #0]
 8013fd2:	b280      	uxth	r0, r0
 8013fd4:	6010      	str	r0, [r2, #0]
 8013fd6:	6815      	ldr	r5, [r2, #0]
 8013fd8:	433d      	orrs	r5, r7
 8013fda:	6015      	str	r5, [r2, #0]
 8013fdc:	e7e6      	b.n	8013fac <USB_EPStartXfer+0x1fc>
    if (ep->doublebuffer == 0U)
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d126      	bne.n	8014030 <USB_EPStartXfer+0x280>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8013fe2:	780b      	ldrb	r3, [r1, #0]
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8013fe4:	698a      	ldr	r2, [r1, #24]
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	18c3      	adds	r3, r0, r3
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8013fea:	2a00      	cmp	r2, #0
 8013fec:	d11b      	bne.n	8014026 <USB_EPStartXfer+0x276>
 8013fee:	78ca      	ldrb	r2, [r1, #3]
 8013ff0:	2a00      	cmp	r2, #0
 8013ff2:	d118      	bne.n	8014026 <USB_EPStartXfer+0x276>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8013ff4:	4a20      	ldr	r2, [pc, #128]	@ (8014078 <USB_EPStartXfer+0x2c8>)
 8013ff6:	6819      	ldr	r1, [r3, #0]
 8013ff8:	4011      	ands	r1, r2
 8013ffa:	4a20      	ldr	r2, [pc, #128]	@ (801407c <USB_EPStartXfer+0x2cc>)
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8013ffc:	430a      	orrs	r2, r1
 8013ffe:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > ep->maxpacket)
 8014000:	69a3      	ldr	r3, [r4, #24]
 8014002:	6922      	ldr	r2, [r4, #16]
 8014004:	4293      	cmp	r3, r2
 8014006:	d92e      	bls.n	8014066 <USB_EPStartXfer+0x2b6>
        ep->xfer_len -= ep->maxpacket;
 8014008:	1a9b      	subs	r3, r3, r2
        ep->xfer_len = 0U;
 801400a:	61a3      	str	r3, [r4, #24]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801400c:	7823      	ldrb	r3, [r4, #0]
 801400e:	4a1d      	ldr	r2, [pc, #116]	@ (8014084 <USB_EPStartXfer+0x2d4>)
 8014010:	009b      	lsls	r3, r3, #2
 8014012:	18f6      	adds	r6, r6, r3
 8014014:	6833      	ldr	r3, [r6, #0]
 8014016:	4013      	ands	r3, r2
 8014018:	22c0      	movs	r2, #192	@ 0xc0
 801401a:	0192      	lsls	r2, r2, #6
 801401c:	405a      	eors	r2, r3
 801401e:	4b15      	ldr	r3, [pc, #84]	@ (8014074 <USB_EPStartXfer+0x2c4>)
 8014020:	4313      	orrs	r3, r2
 8014022:	6033      	str	r3, [r6, #0]
 8014024:	e6f2      	b.n	8013e0c <USB_EPStartXfer+0x5c>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8014026:	4a16      	ldr	r2, [pc, #88]	@ (8014080 <USB_EPStartXfer+0x2d0>)
 8014028:	6819      	ldr	r1, [r3, #0]
 801402a:	4011      	ands	r1, r2
 801402c:	4a11      	ldr	r2, [pc, #68]	@ (8014074 <USB_EPStartXfer+0x2c4>)
 801402e:	e7e5      	b.n	8013ffc <USB_EPStartXfer+0x24c>
      if (ep->type == EP_TYPE_BULK)
 8014030:	78cb      	ldrb	r3, [r1, #3]
 8014032:	2b02      	cmp	r3, #2
 8014034:	d113      	bne.n	801405e <USB_EPStartXfer+0x2ae>
        if (ep->xfer_count != 0U)
 8014036:	69cb      	ldr	r3, [r1, #28]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d0e7      	beq.n	801400c <USB_EPStartXfer+0x25c>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 801403c:	780b      	ldrb	r3, [r1, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801403e:	4a12      	ldr	r2, [pc, #72]	@ (8014088 <USB_EPStartXfer+0x2d8>)
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	18c1      	adds	r1, r0, r3
 8014044:	680b      	ldr	r3, [r1, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014046:	4013      	ands	r3, r2
 8014048:	4293      	cmp	r3, r2
 801404a:	d001      	beq.n	8014050 <USB_EPStartXfer+0x2a0>
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1dd      	bne.n	801400c <USB_EPStartXfer+0x25c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014050:	680a      	ldr	r2, [r1, #0]
 8014052:	4b09      	ldr	r3, [pc, #36]	@ (8014078 <USB_EPStartXfer+0x2c8>)
 8014054:	401a      	ands	r2, r3
 8014056:	4b0d      	ldr	r3, [pc, #52]	@ (801408c <USB_EPStartXfer+0x2dc>)
 8014058:	4313      	orrs	r3, r2
 801405a:	600b      	str	r3, [r1, #0]
 801405c:	e7d6      	b.n	801400c <USB_EPStartXfer+0x25c>
        return HAL_ERROR;
 801405e:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8014060:	2b01      	cmp	r3, #1
 8014062:	d000      	beq.n	8014066 <USB_EPStartXfer+0x2b6>
 8014064:	e6d3      	b.n	8013e0e <USB_EPStartXfer+0x5e>
        ep->xfer_len = 0U;
 8014066:	2300      	movs	r3, #0
 8014068:	e7cf      	b.n	801400a <USB_EPStartXfer+0x25a>
 801406a:	46c0      	nop			@ (mov r8, r8)
 801406c:	40009800 	.word	0x40009800
 8014070:	07ff8fbf 	.word	0x07ff8fbf
 8014074:	00008080 	.word	0x00008080
 8014078:	07ff8f8f 	.word	0x07ff8f8f
 801407c:	00008180 	.word	0x00008180
 8014080:	07ff8e8f 	.word	0x07ff8e8f
 8014084:	07ffbf8f 	.word	0x07ffbf8f
 8014088:	00004040 	.word	0x00004040
 801408c:	000080c0 	.word	0x000080c0

08014090 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014090:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8014092:	2403      	movs	r4, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8014094:	1cd8      	adds	r0, r3, #3
  uint16_t remaining_bytes = wNBytes % 4U;
 8014096:	4023      	ands	r3, r4
  uint8_t *pBuf = pbUsrBuf;

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8014098:	4c11      	ldr	r4, [pc, #68]	@ (80140e0 <USB_ReadPMA+0x50>)
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 801409a:	0880      	lsrs	r0, r0, #2
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 801409c:	1912      	adds	r2, r2, r4

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
  {
    NbWords--;
 801409e:	001c      	movs	r4, r3
 80140a0:	1e65      	subs	r5, r4, #1
 80140a2:	41ac      	sbcs	r4, r5
{
 80140a4:	0016      	movs	r6, r2
    NbWords--;
 80140a6:	1b00      	subs	r0, r0, r4
 80140a8:	0084      	lsls	r4, r0, #2
 80140aa:	190d      	adds	r5, r1, r4
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80140ac:	42a9      	cmp	r1, r5
 80140ae:	d10d      	bne.n	80140cc <USB_ReadPMA+0x3c>
    pBuf++;
    pBuf++;
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d00a      	beq.n	80140ca <USB_ReadPMA+0x3a>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 80140b4:	1912      	adds	r2, r2, r4
 80140b6:	6810      	ldr	r0, [r2, #0]
 80140b8:	2200      	movs	r2, #0

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80140ba:	0004      	movs	r4, r0
 80140bc:	00d1      	lsls	r1, r2, #3
 80140be:	40cc      	lsrs	r4, r1
 80140c0:	54ac      	strb	r4, [r5, r2]
      count++;
 80140c2:	3201      	adds	r2, #1
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 80140c4:	b291      	uxth	r1, r2
 80140c6:	428b      	cmp	r3, r1
 80140c8:	d1f7      	bne.n	80140ba <USB_ReadPMA+0x2a>
  }
}
 80140ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80140cc:	ce01      	ldmia	r6!, {r0}
 80140ce:	0a07      	lsrs	r7, r0, #8
 80140d0:	7008      	strb	r0, [r1, #0]
 80140d2:	704f      	strb	r7, [r1, #1]
 80140d4:	0c07      	lsrs	r7, r0, #16
 80140d6:	0e00      	lsrs	r0, r0, #24
 80140d8:	708f      	strb	r7, [r1, #2]
 80140da:	70c8      	strb	r0, [r1, #3]
    pBuf++;
 80140dc:	3104      	adds	r1, #4
  for (count = NbWords; count != 0U; count--)
 80140de:	e7e5      	b.n	80140ac <USB_ReadPMA+0x1c>
 80140e0:	40009800 	.word	0x40009800

080140e4 <disk_status>:

	// 	return stat;
	// }
	// return STA_NOINIT;
	return 0;
}
 80140e4:	2000      	movs	r0, #0
 80140e6:	4770      	bx	lr

080140e8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80140e8:	b510      	push	{r4, lr}
 80140ea:	1e04      	subs	r4, r0, #0
	// 	// translate the reslut code here

	// 	return stat;
	// }
	// return STA_NOINIT;
	if(pdrv)
 80140ec:	d103      	bne.n	80140f6 <disk_initialize+0xe>
		return STA_NOINIT;
	else {
		SPI_FLASH_Init();
 80140ee:	f7f6 f84f 	bl	800a190 <SPI_FLASH_Init>
		return  0;
	}
}
 80140f2:	0020      	movs	r0, r4
 80140f4:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
 80140f6:	2401      	movs	r4, #1
 80140f8:	e7fb      	b.n	80140f2 <disk_initialize+0xa>

080140fa <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80140fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UNUSED(pdrv);
	int i;

	for(i=0;i<count;i++)
	{
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 80140fc:	2780      	movs	r7, #128	@ 0x80
{
 80140fe:	000d      	movs	r5, r1
 8014100:	0014      	movs	r4, r2
 8014102:	18d6      	adds	r6, r2, r3
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 8014104:	017f      	lsls	r7, r7, #5
	for(i=0;i<count;i++)
 8014106:	42b4      	cmp	r4, r6
 8014108:	d101      	bne.n	801410e <disk_read+0x14>
			return RES_ERROR;
		}
		sector ++;
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
	}
	return RES_OK;
 801410a:	2000      	movs	r0, #0
}
 801410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 801410e:	003a      	movs	r2, r7
 8014110:	0029      	movs	r1, r5
 8014112:	0320      	lsls	r0, r4, #12
 8014114:	f7f6 f8ea 	bl	800a2ec <SPI_FLASH_ReadData>
 8014118:	2800      	cmp	r0, #0
 801411a:	d104      	bne.n	8014126 <disk_read+0x2c>
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 801411c:	2380      	movs	r3, #128	@ 0x80
 801411e:	015b      	lsls	r3, r3, #5
		sector ++;
 8014120:	3401      	adds	r4, #1
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 8014122:	18ed      	adds	r5, r5, r3
	for(i=0;i<count;i++)
 8014124:	e7ef      	b.n	8014106 <disk_read+0xc>
			return RES_ERROR;
 8014126:	2001      	movs	r0, #1
 8014128:	e7f0      	b.n	801410c <disk_read+0x12>

0801412a <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 801412a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801412c:	000d      	movs	r5, r1
 801412e:	0014      	movs	r4, r2
 8014130:	18d3      	adds	r3, r2, r3
 8014132:	9301      	str	r3, [sp, #4]
    // Use a variable for the address to make it clearer
    uint32_t addr;
    // Use a temporary pointer for the buffer
    const BYTE* current_buff_pos;

	for(i = 0; i < count; i++)
 8014134:	9b01      	ldr	r3, [sp, #4]
 8014136:	429c      	cmp	r4, r3
 8014138:	d101      	bne.n	801413e <disk_write+0x14>

		sector++;
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
	}

	return RES_OK;
 801413a:	2000      	movs	r0, #0
}
 801413c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        addr = sector * MEDIA_LOGICAL_SECTOR_SIZE;
 801413e:	0327      	lsls	r7, r4, #12
		SPI_FLASH_EraseSector(addr);
 8014140:	0038      	movs	r0, r7
 8014142:	f7f6 f849 	bl	800a1d8 <SPI_FLASH_EraseSector>
        current_buff_pos = buff;
 8014146:	002e      	movs	r6, r5
			if(SPI_FLASH_PageProgram(addr, (uint8_t*)current_buff_pos, NOR_FLASH_PAGE_SIZE) != HAL_OK) {
 8014148:	2280      	movs	r2, #128	@ 0x80
 801414a:	0031      	movs	r1, r6
 801414c:	0038      	movs	r0, r7
 801414e:	0052      	lsls	r2, r2, #1
 8014150:	f7f6 f886 	bl	800a260 <SPI_FLASH_PageProgram>
 8014154:	2800      	cmp	r0, #0
 8014156:	d10b      	bne.n	8014170 <disk_write+0x46>
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8014158:	2380      	movs	r3, #128	@ 0x80
            current_buff_pos += NOR_FLASH_PAGE_SIZE;
 801415a:	3601      	adds	r6, #1
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 801415c:	015b      	lsls	r3, r3, #5
            addr += NOR_FLASH_PAGE_SIZE;
 801415e:	3701      	adds	r7, #1
            current_buff_pos += NOR_FLASH_PAGE_SIZE;
 8014160:	36ff      	adds	r6, #255	@ 0xff
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8014162:	18eb      	adds	r3, r5, r3
            addr += NOR_FLASH_PAGE_SIZE;
 8014164:	37ff      	adds	r7, #255	@ 0xff
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8014166:	429e      	cmp	r6, r3
 8014168:	d1ee      	bne.n	8014148 <disk_write+0x1e>
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 801416a:	0035      	movs	r5, r6
		sector++;
 801416c:	3401      	adds	r4, #1
	for(i = 0; i < count; i++)
 801416e:	e7e1      	b.n	8014134 <disk_write+0xa>
				return RES_ERROR;
 8014170:	2001      	movs	r0, #1
 8014172:	e7e3      	b.n	801413c <disk_write+0x12>

08014174 <disk_ioctl>:
    *(DWORD*)buff = (NOR_FLASH_BLOCK_64K_SIZE/MEDIA_LOGICAL_SECTOR_SIZE);
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8014174:	2004      	movs	r0, #4
{
 8014176:	b500      	push	{lr}
  switch (cmd)
 8014178:	2903      	cmp	r1, #3
 801417a:	d808      	bhi.n	801418e <disk_ioctl+0x1a>
 801417c:	0008      	movs	r0, r1
 801417e:	f7eb ffd5 	bl	800012c <__gnu_thumb1_case_uqi>
 8014182:	0205      	.short	0x0205
 8014184:	0b07      	.short	0x0b07
    *(DWORD*)buff = NOR_FLASH_TOTAL_SIZE / MEDIA_LOGICAL_SECTOR_SIZE;
 8014186:	2380      	movs	r3, #128	@ 0x80
 8014188:	005b      	lsls	r3, r3, #1
 801418a:	6013      	str	r3, [r2, #0]
    res = RES_OK;
 801418c:	2000      	movs	r0, #0
  }

  return res;
}
 801418e:	bd00      	pop	{pc}
    *(WORD*)buff = MEDIA_LOGICAL_SECTOR_SIZE;
 8014190:	2380      	movs	r3, #128	@ 0x80
 8014192:	015b      	lsls	r3, r3, #5
 8014194:	8013      	strh	r3, [r2, #0]
    break;
 8014196:	e7f9      	b.n	801418c <disk_ioctl+0x18>
    *(DWORD*)buff = (NOR_FLASH_BLOCK_64K_SIZE/MEDIA_LOGICAL_SECTOR_SIZE);
 8014198:	2310      	movs	r3, #16
 801419a:	e7f6      	b.n	801418a <disk_ioctl+0x16>

0801419c <get_fattime>:
         | ((DWORD)7 << 21)             /* Month = July */
         | ((DWORD)23 << 16)            /* Day = 23 */
         | ((DWORD)17 << 11)            /* Hour = 17 */
         | ((DWORD)36 << 5)             /* Minute = 36 */
         | ((DWORD)0 >> 1);             /* Second = 0 */
}
 801419c:	4800      	ldr	r0, [pc, #0]	@ (80141a0 <get_fattime+0x4>)
 801419e:	4770      	bx	lr
 80141a0:	5af78c80 	.word	0x5af78c80

080141a4 <ld_32>:
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
 80141a4:	7842      	ldrb	r2, [r0, #1]
 80141a6:	7803      	ldrb	r3, [r0, #0]
 80141a8:	0212      	lsls	r2, r2, #8
 80141aa:	431a      	orrs	r2, r3
 80141ac:	7883      	ldrb	r3, [r0, #2]
 80141ae:	78c0      	ldrb	r0, [r0, #3]
 80141b0:	041b      	lsls	r3, r3, #16
 80141b2:	4313      	orrs	r3, r2
 80141b4:	0600      	lsls	r0, r0, #24
 80141b6:	4318      	orrs	r0, r3
	return rv;
}
 80141b8:	4770      	bx	lr

080141ba <st_32>:
	*ptr++ = (BYTE)val;
}

static void st_32 (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80141ba:	0a0b      	lsrs	r3, r1, #8
 80141bc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80141be:	7043      	strb	r3, [r0, #1]
 80141c0:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80141c2:	0e09      	lsrs	r1, r1, #24
 80141c4:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80141c6:	70c1      	strb	r1, [r0, #3]
}
 80141c8:	4770      	bx	lr

080141ca <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80141ca:	6942      	ldr	r2, [r0, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
 80141cc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80141ce:	3a02      	subs	r2, #2
{
 80141d0:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80141d2:	2000      	movs	r0, #0
 80141d4:	428a      	cmp	r2, r1
 80141d6:	d903      	bls.n	80141e0 <clst2sect+0x16>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 80141d8:	895a      	ldrh	r2, [r3, #10]
 80141da:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80141dc:	4351      	muls	r1, r2
 80141de:	1808      	adds	r0, r1, r0
}
 80141e0:	4770      	bx	lr

080141e2 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 80141e2:	6803      	ldr	r3, [r0, #0]
	if (!tp) return -1;		/* Invalid path name? */
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d00f      	beq.n	8014208 <get_ldnumber+0x26>
 80141e8:	001a      	movs	r2, r3
	do {					/* Find a colon in the path */
		chr = *tt++;
 80141ea:	7811      	ldrb	r1, [r2, #0]
 80141ec:	3201      	adds	r2, #1
	} while (!IsTerminator(chr) && chr != ':');
 80141ee:	2920      	cmp	r1, #32
 80141f0:	d908      	bls.n	8014204 <get_ldnumber+0x22>
 80141f2:	293a      	cmp	r1, #58	@ 0x3a
 80141f4:	d1f9      	bne.n	80141ea <get_ldnumber+0x8>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 80141f6:	7819      	ldrb	r1, [r3, #0]
 80141f8:	2930      	cmp	r1, #48	@ 0x30
 80141fa:	d105      	bne.n	8014208 <get_ldnumber+0x26>
 80141fc:	3302      	adds	r3, #2
 80141fe:	429a      	cmp	r2, r3
 8014200:	d102      	bne.n	8014208 <get_ldnumber+0x26>
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
		*path = tt;		/* Snip the drive prefix off */
 8014202:	6002      	str	r2, [r0, #0]
		return i;		/* Return the found drive number */
 8014204:	2000      	movs	r0, #0
#if FF_FS_RPATH
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 8014206:	4770      	bx	lr
	if (!tp) return -1;		/* Invalid path name? */
 8014208:	2001      	movs	r0, #1
 801420a:	4240      	negs	r0, r0
 801420c:	e7fb      	b.n	8014206 <get_ldnumber+0x24>

0801420e <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 801420e:	b570      	push	{r4, r5, r6, lr}
 8014210:	0004      	movs	r4, r0
 8014212:	000d      	movs	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014214:	2800      	cmp	r0, #0
 8014216:	d104      	bne.n	8014222 <validate+0x14>
	FRESULT res = FR_INVALID_OBJECT;
 8014218:	2309      	movs	r3, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 801421a:	2200      	movs	r2, #0
	return res;
}
 801421c:	0018      	movs	r0, r3
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 801421e:	602a      	str	r2, [r5, #0]
}
 8014220:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014222:	6803      	ldr	r3, [r0, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d0f7      	beq.n	8014218 <validate+0xa>
 8014228:	781a      	ldrb	r2, [r3, #0]
 801422a:	2a00      	cmp	r2, #0
 801422c:	d0f4      	beq.n	8014218 <validate+0xa>
 801422e:	8881      	ldrh	r1, [r0, #4]
 8014230:	88da      	ldrh	r2, [r3, #6]
 8014232:	4291      	cmp	r1, r2
 8014234:	d1f0      	bne.n	8014218 <validate+0xa>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 8014236:	7858      	ldrb	r0, [r3, #1]
 8014238:	f7ff ff54 	bl	80140e4 <disk_status>
 801423c:	2201      	movs	r2, #1
 801423e:	0003      	movs	r3, r0
 8014240:	4013      	ands	r3, r2
 8014242:	4210      	tst	r0, r2
 8014244:	d1e8      	bne.n	8014218 <validate+0xa>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8014246:	6822      	ldr	r2, [r4, #0]
 8014248:	e7e8      	b.n	801421c <validate+0xe>

0801424a <sync_window>:
{
 801424a:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 801424c:	7903      	ldrb	r3, [r0, #4]
{
 801424e:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8014250:	2b00      	cmp	r3, #0
 8014252:	d019      	beq.n	8014288 <sync_window+0x3e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8014254:	0005      	movs	r5, r0
 8014256:	3530      	adds	r5, #48	@ 0x30
 8014258:	2301      	movs	r3, #1
 801425a:	0029      	movs	r1, r5
 801425c:	7840      	ldrb	r0, [r0, #1]
 801425e:	69e2      	ldr	r2, [r4, #28]
 8014260:	f7ff ff63 	bl	801412a <disk_write>
			res = FR_DISK_ERR;
 8014264:	2301      	movs	r3, #1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8014266:	2800      	cmp	r0, #0
 8014268:	d10f      	bne.n	801428a <sync_window+0x40>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 801426a:	69e2      	ldr	r2, [r4, #28]
 801426c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			fs->wflag = 0;	/* Clear window dirty flag */
 801426e:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8014270:	69a0      	ldr	r0, [r4, #24]
 8014272:	1a51      	subs	r1, r2, r1
 8014274:	4281      	cmp	r1, r0
 8014276:	d207      	bcs.n	8014288 <sync_window+0x3e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8014278:	78e1      	ldrb	r1, [r4, #3]
 801427a:	2902      	cmp	r1, #2
 801427c:	d104      	bne.n	8014288 <sync_window+0x3e>
 801427e:	1812      	adds	r2, r2, r0
 8014280:	0029      	movs	r1, r5
 8014282:	7860      	ldrb	r0, [r4, #1]
 8014284:	f7ff ff51 	bl	801412a <disk_write>
	FRESULT res = FR_OK;
 8014288:	2300      	movs	r3, #0
}
 801428a:	0018      	movs	r0, r3
 801428c:	bd70      	pop	{r4, r5, r6, pc}

0801428e <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 801428e:	b293      	uxth	r3, r2
 8014290:	0a1b      	lsrs	r3, r3, #8
 8014292:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8014294:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8014296:	7803      	ldrb	r3, [r0, #0]
 8014298:	2b03      	cmp	r3, #3
 801429a:	d103      	bne.n	80142a4 <st_clust+0x16>
		st_16(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801429c:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801429e:	750a      	strb	r2, [r1, #20]
 80142a0:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80142a2:	754a      	strb	r2, [r1, #21]
}
 80142a4:	4770      	bx	lr

080142a6 <move_window>:
	if (sect != fs->winsect) {	/* Window offset changed? */
 80142a6:	69c3      	ldr	r3, [r0, #28]
{
 80142a8:	b570      	push	{r4, r5, r6, lr}
 80142aa:	0004      	movs	r4, r0
 80142ac:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 80142ae:	2000      	movs	r0, #0
	if (sect != fs->winsect) {	/* Window offset changed? */
 80142b0:	428b      	cmp	r3, r1
 80142b2:	d011      	beq.n	80142d8 <move_window+0x32>
		res = sync_window(fs);		/* Flush the window */
 80142b4:	0020      	movs	r0, r4
 80142b6:	f7ff ffc8 	bl	801424a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d10c      	bne.n	80142d8 <move_window+0x32>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 80142be:	0021      	movs	r1, r4
 80142c0:	2301      	movs	r3, #1
 80142c2:	002a      	movs	r2, r5
 80142c4:	7860      	ldrb	r0, [r4, #1]
 80142c6:	3130      	adds	r1, #48	@ 0x30
 80142c8:	f7ff ff17 	bl	80140fa <disk_read>
 80142cc:	2800      	cmp	r0, #0
 80142ce:	d002      	beq.n	80142d6 <move_window+0x30>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 80142d0:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 80142d2:	2001      	movs	r0, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 80142d4:	426d      	negs	r5, r5
			fs->winsect = sect;
 80142d6:	61e5      	str	r5, [r4, #28]
}
 80142d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080142dc <check_fs>:
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80142dc:	2300      	movs	r3, #0
{
 80142de:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80142e0:	7103      	strb	r3, [r0, #4]
 80142e2:	3b01      	subs	r3, #1
 80142e4:	61c3      	str	r3, [r0, #28]
{
 80142e6:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80142e8:	f7ff ffdd 	bl	80142a6 <move_window>
 80142ec:	2304      	movs	r3, #4
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d162      	bne.n	80143b8 <check_fs+0xdc>
	sign = ld_16(fs->win + BS_55AA);
 80142f2:	4a32      	ldr	r2, [pc, #200]	@ (80143bc <check_fs+0xe0>)
 80142f4:	4b31      	ldr	r3, [pc, #196]	@ (80143bc <check_fs+0xe0>)
 80142f6:	18a2      	adds	r2, r4, r2
 80142f8:	7855      	ldrb	r5, [r2, #1]
 80142fa:	5ce3      	ldrb	r3, [r4, r3]
 80142fc:	022d      	lsls	r5, r5, #8
 80142fe:	431d      	orrs	r5, r3
	b = fs->win[BS_JmpBoot];
 8014300:	0023      	movs	r3, r4
 8014302:	3330      	adds	r3, #48	@ 0x30
 8014304:	781b      	ldrb	r3, [r3, #0]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8014306:	4a2e      	ldr	r2, [pc, #184]	@ (80143c0 <check_fs+0xe4>)
 8014308:	2beb      	cmp	r3, #235	@ 0xeb
 801430a:	d003      	beq.n	8014314 <check_fs+0x38>
 801430c:	3318      	adds	r3, #24
 801430e:	b2db      	uxtb	r3, r3
 8014310:	2b01      	cmp	r3, #1
 8014312:	d84c      	bhi.n	80143ae <check_fs+0xd2>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8014314:	4295      	cmp	r5, r2
 8014316:	d107      	bne.n	8014328 <check_fs+0x4c>
 8014318:	0020      	movs	r0, r4
 801431a:	2208      	movs	r2, #8
 801431c:	4929      	ldr	r1, [pc, #164]	@ (80143c4 <check_fs+0xe8>)
 801431e:	3082      	adds	r0, #130	@ 0x82
 8014320:	f006 fa0a 	bl	801a738 <memcmp>
			return 0;	/* It is an FAT32 VBR */
 8014324:	1e03      	subs	r3, r0, #0
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8014326:	d047      	beq.n	80143b8 <check_fs+0xdc>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8014328:	0023      	movs	r3, r4
 801432a:	2280      	movs	r2, #128	@ 0x80
 801432c:	333b      	adds	r3, #59	@ 0x3b
 801432e:	7819      	ldrb	r1, [r3, #0]
 8014330:	785b      	ldrb	r3, [r3, #1]
 8014332:	0152      	lsls	r2, r2, #5
 8014334:	021b      	lsls	r3, r3, #8
 8014336:	430b      	orrs	r3, r1
 8014338:	4293      	cmp	r3, r2
 801433a:	d138      	bne.n	80143ae <check_fs+0xd2>
		b = fs->win[BPB_SecPerClus];
 801433c:	0023      	movs	r3, r4
 801433e:	333d      	adds	r3, #61	@ 0x3d
 8014340:	781b      	ldrb	r3, [r3, #0]
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8014342:	2b00      	cmp	r3, #0
 8014344:	d033      	beq.n	80143ae <check_fs+0xd2>
 8014346:	1e5a      	subs	r2, r3, #1
 8014348:	4213      	tst	r3, r2
 801434a:	d130      	bne.n	80143ae <check_fs+0xd2>
			&& ld_16(fs->win + BPB_RsvdSecCnt) != 0		/* Properness of number of reserved sectors (MNBZ) */
 801434c:	0023      	movs	r3, r4
 801434e:	333e      	adds	r3, #62	@ 0x3e
 8014350:	781a      	ldrb	r2, [r3, #0]
 8014352:	3301      	adds	r3, #1
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	021b      	lsls	r3, r3, #8
 8014358:	4313      	orrs	r3, r2
 801435a:	d028      	beq.n	80143ae <check_fs+0xd2>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 801435c:	0023      	movs	r3, r4
 801435e:	3340      	adds	r3, #64	@ 0x40
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	3b01      	subs	r3, #1
 8014364:	2b01      	cmp	r3, #1
 8014366:	d822      	bhi.n	80143ae <check_fs+0xd2>
			&& ld_16(fs->win + BPB_RootEntCnt) != 0		/* Properness of root dir size (MNBZ) */
 8014368:	0023      	movs	r3, r4
 801436a:	3341      	adds	r3, #65	@ 0x41
 801436c:	781a      	ldrb	r2, [r3, #0]
 801436e:	3301      	adds	r3, #1
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	021b      	lsls	r3, r3, #8
 8014374:	4313      	orrs	r3, r2
 8014376:	d01a      	beq.n	80143ae <check_fs+0xd2>
			&& (ld_16(fs->win + BPB_TotSec16) >= 128 || ld_32(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 8014378:	0023      	movs	r3, r4
 801437a:	3343      	adds	r3, #67	@ 0x43
 801437c:	781a      	ldrb	r2, [r3, #0]
 801437e:	3301      	adds	r3, #1
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	021b      	lsls	r3, r3, #8
 8014384:	4313      	orrs	r3, r2
 8014386:	2b7f      	cmp	r3, #127	@ 0x7f
 8014388:	d807      	bhi.n	801439a <check_fs+0xbe>
 801438a:	0020      	movs	r0, r4
 801438c:	3050      	adds	r0, #80	@ 0x50
 801438e:	f7ff ff09 	bl	80141a4 <ld_32>
 8014392:	2380      	movs	r3, #128	@ 0x80
 8014394:	025b      	lsls	r3, r3, #9
 8014396:	4298      	cmp	r0, r3
 8014398:	d309      	bcc.n	80143ae <check_fs+0xd2>
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 801439a:	0023      	movs	r3, r4
 801439c:	3447      	adds	r4, #71	@ 0x47
 801439e:	7822      	ldrb	r2, [r4, #0]
 80143a0:	3346      	adds	r3, #70	@ 0x46
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	0212      	lsls	r2, r2, #8
 80143a6:	431a      	orrs	r2, r3
			return 0;	/* It is an FAT32 VBR */
 80143a8:	2300      	movs	r3, #0
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d104      	bne.n	80143b8 <check_fs+0xdc>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 80143ae:	4b06      	ldr	r3, [pc, #24]	@ (80143c8 <check_fs+0xec>)
 80143b0:	18eb      	adds	r3, r5, r3
 80143b2:	1e5a      	subs	r2, r3, #1
 80143b4:	4193      	sbcs	r3, r2
 80143b6:	3302      	adds	r3, #2
}
 80143b8:	0018      	movs	r0, r3
 80143ba:	bd70      	pop	{r4, r5, r6, pc}
 80143bc:	0000022e 	.word	0x0000022e
 80143c0:	0000aa55 	.word	0x0000aa55
 80143c4:	08020235 	.word	0x08020235
 80143c8:	ffff55ab 	.word	0xffff55ab

080143cc <put_fat>:
{
 80143cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ce:	0007      	movs	r7, r0
 80143d0:	000d      	movs	r5, r1
 80143d2:	0014      	movs	r4, r2
	FRESULT res = FR_INT_ERR;
 80143d4:	2602      	movs	r6, #2
{
 80143d6:	b085      	sub	sp, #20
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80143d8:	2901      	cmp	r1, #1
 80143da:	d945      	bls.n	8014468 <put_fat+0x9c>
 80143dc:	6943      	ldr	r3, [r0, #20]
 80143de:	428b      	cmp	r3, r1
 80143e0:	d942      	bls.n	8014468 <put_fat+0x9c>
		switch (fs->fs_type) {
 80143e2:	7803      	ldrb	r3, [r0, #0]
 80143e4:	9300      	str	r3, [sp, #0]
 80143e6:	42b3      	cmp	r3, r6
 80143e8:	d048      	beq.n	801447c <put_fat+0xb0>
 80143ea:	2b03      	cmp	r3, #3
 80143ec:	d058      	beq.n	80144a0 <put_fat+0xd4>
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d13a      	bne.n	8014468 <put_fat+0x9c>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80143f2:	084b      	lsrs	r3, r1, #1
 80143f4:	185b      	adds	r3, r3, r1
 80143f6:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80143f8:	0b19      	lsrs	r1, r3, #12
 80143fa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80143fc:	18c9      	adds	r1, r1, r3
 80143fe:	f7ff ff52 	bl	80142a6 <move_window>
 8014402:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8014404:	d130      	bne.n	8014468 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8014406:	003b      	movs	r3, r7
 8014408:	3330      	adds	r3, #48	@ 0x30
 801440a:	9302      	str	r3, [sp, #8]
 801440c:	9b01      	ldr	r3, [sp, #4]
 801440e:	9a02      	ldr	r2, [sp, #8]
 8014410:	3301      	adds	r3, #1
 8014412:	9303      	str	r3, [sp, #12]
 8014414:	9b01      	ldr	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8014416:	9900      	ldr	r1, [sp, #0]
			p = fs->win + bc++ % SS(fs);
 8014418:	051b      	lsls	r3, r3, #20
 801441a:	0d1b      	lsrs	r3, r3, #20
 801441c:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 801441e:	9a00      	ldr	r2, [sp, #0]
 8014420:	402a      	ands	r2, r5
 8014422:	9201      	str	r2, [sp, #4]
 8014424:	b2e2      	uxtb	r2, r4
 8014426:	420d      	tst	r5, r1
 8014428:	d005      	beq.n	8014436 <put_fat+0x6a>
 801442a:	200f      	movs	r0, #15
 801442c:	7819      	ldrb	r1, [r3, #0]
 801442e:	0112      	lsls	r2, r2, #4
 8014430:	4001      	ands	r1, r0
 8014432:	430a      	orrs	r2, r1
 8014434:	b2d2      	uxtb	r2, r2
 8014436:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8014438:	2301      	movs	r3, #1
 801443a:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801443c:	9b03      	ldr	r3, [sp, #12]
 801443e:	0038      	movs	r0, r7
 8014440:	0b19      	lsrs	r1, r3, #12
 8014442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014444:	18c9      	adds	r1, r1, r3
 8014446:	f7ff ff2e 	bl	80142a6 <move_window>
 801444a:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 801444c:	d10c      	bne.n	8014468 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 801444e:	9b03      	ldr	r3, [sp, #12]
 8014450:	9a02      	ldr	r2, [sp, #8]
 8014452:	051b      	lsls	r3, r3, #20
 8014454:	0d1b      	lsrs	r3, r3, #20
 8014456:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8014458:	9a01      	ldr	r2, [sp, #4]
 801445a:	2a00      	cmp	r2, #0
 801445c:	d007      	beq.n	801446e <put_fat+0xa2>
 801445e:	0924      	lsrs	r4, r4, #4
 8014460:	b2e4      	uxtb	r4, r4
 8014462:	701c      	strb	r4, [r3, #0]
			fs->wflag = 1;
 8014464:	2301      	movs	r3, #1
 8014466:	713b      	strb	r3, [r7, #4]
}
 8014468:	0030      	movs	r0, r6
 801446a:	b005      	add	sp, #20
 801446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 801446e:	210f      	movs	r1, #15
 8014470:	781a      	ldrb	r2, [r3, #0]
 8014472:	0a24      	lsrs	r4, r4, #8
 8014474:	438a      	bics	r2, r1
 8014476:	400c      	ands	r4, r1
 8014478:	4314      	orrs	r4, r2
 801447a:	e7f2      	b.n	8014462 <put_fat+0x96>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801447c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801447e:	0ac9      	lsrs	r1, r1, #11
 8014480:	18c9      	adds	r1, r1, r3
 8014482:	f7ff ff10 	bl	80142a6 <move_window>
 8014486:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8014488:	d1ee      	bne.n	8014468 <put_fat+0x9c>
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 801448a:	003b      	movs	r3, r7
 801448c:	4a11      	ldr	r2, [pc, #68]	@ (80144d4 <put_fat+0x108>)
 801448e:	006d      	lsls	r5, r5, #1
 8014490:	3330      	adds	r3, #48	@ 0x30
 8014492:	4015      	ands	r5, r2
 8014494:	195d      	adds	r5, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8014496:	702c      	strb	r4, [r5, #0]
 8014498:	b2a4      	uxth	r4, r4
 801449a:	0a24      	lsrs	r4, r4, #8
	*ptr++ = (BYTE)val;
 801449c:	706c      	strb	r4, [r5, #1]
			fs->wflag = 1;
 801449e:	e7e1      	b.n	8014464 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80144a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80144a2:	0a89      	lsrs	r1, r1, #10
 80144a4:	18c9      	adds	r1, r1, r3
 80144a6:	f7ff fefe 	bl	80142a6 <move_window>
 80144aa:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 80144ac:	d1dc      	bne.n	8014468 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80144ae:	003b      	movs	r3, r7
 80144b0:	4a09      	ldr	r2, [pc, #36]	@ (80144d8 <put_fat+0x10c>)
 80144b2:	00ad      	lsls	r5, r5, #2
 80144b4:	3330      	adds	r3, #48	@ 0x30
 80144b6:	4015      	ands	r5, r2
 80144b8:	195d      	adds	r5, r3, r5
 80144ba:	0028      	movs	r0, r5
 80144bc:	f7ff fe72 	bl	80141a4 <ld_32>
 80144c0:	0121      	lsls	r1, r4, #4
 80144c2:	0f00      	lsrs	r0, r0, #28
 80144c4:	0700      	lsls	r0, r0, #28
 80144c6:	0909      	lsrs	r1, r1, #4
 80144c8:	4301      	orrs	r1, r0
			st_32(fs->win + clst * 4 % SS(fs), val);
 80144ca:	0028      	movs	r0, r5
 80144cc:	f7ff fe75 	bl	80141ba <st_32>
 80144d0:	e7c8      	b.n	8014464 <put_fat+0x98>
 80144d2:	46c0      	nop			@ (mov r8, r8)
 80144d4:	00000ffe 	.word	0x00000ffe
 80144d8:	00000ffc 	.word	0x00000ffc

080144dc <dir_clear>:
{
 80144dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144de:	0005      	movs	r5, r0
 80144e0:	000e      	movs	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80144e2:	f7ff feb2 	bl	801424a <sync_window>
 80144e6:	0004      	movs	r4, r0
 80144e8:	2001      	movs	r0, #1
 80144ea:	2c00      	cmp	r4, #0
 80144ec:	d115      	bne.n	801451a <dir_clear+0x3e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80144ee:	0031      	movs	r1, r6
 80144f0:	0028      	movs	r0, r5
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80144f2:	002f      	movs	r7, r5
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80144f4:	f7ff fe69 	bl	80141ca <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80144f8:	2280      	movs	r2, #128	@ 0x80
 80144fa:	3730      	adds	r7, #48	@ 0x30
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80144fc:	0006      	movs	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 80144fe:	61e8      	str	r0, [r5, #28]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8014500:	0021      	movs	r1, r4
 8014502:	0038      	movs	r0, r7
 8014504:	0152      	lsls	r2, r2, #5
 8014506:	f006 f925 	bl	801a754 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 801450a:	896b      	ldrh	r3, [r5, #10]
 801450c:	429c      	cmp	r4, r3
 801450e:	d305      	bcc.n	801451c <dir_clear+0x40>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8014510:	8968      	ldrh	r0, [r5, #10]
 8014512:	1b00      	subs	r0, r0, r4
 8014514:	1e43      	subs	r3, r0, #1
 8014516:	4198      	sbcs	r0, r3
 8014518:	b2c0      	uxtb	r0, r0
}
 801451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 801451c:	2301      	movs	r3, #1
 801451e:	0039      	movs	r1, r7
 8014520:	7868      	ldrb	r0, [r5, #1]
 8014522:	1932      	adds	r2, r6, r4
 8014524:	f7ff fe01 	bl	801412a <disk_write>
 8014528:	2800      	cmp	r0, #0
 801452a:	d1f1      	bne.n	8014510 <dir_clear+0x34>
 801452c:	3401      	adds	r4, #1
 801452e:	e7ec      	b.n	801450a <dir_clear+0x2e>

08014530 <sync_fs>:
{
 8014530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014532:	0004      	movs	r4, r0
	res = sync_window(fs);
 8014534:	f7ff fe89 	bl	801424a <sync_window>
 8014538:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 801453a:	d149      	bne.n	80145d0 <sync_fs+0xa0>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 801453c:	7967      	ldrb	r7, [r4, #5]
 801453e:	2f01      	cmp	r7, #1
 8014540:	d13e      	bne.n	80145c0 <sync_fs+0x90>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8014542:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 8014544:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8014546:	2b03      	cmp	r3, #3
 8014548:	d13a      	bne.n	80145c0 <sync_fs+0x90>
				memset(fs->win, 0, sizeof fs->win);
 801454a:	0026      	movs	r6, r4
 801454c:	2280      	movs	r2, #128	@ 0x80
 801454e:	3630      	adds	r6, #48	@ 0x30
 8014550:	0001      	movs	r1, r0
 8014552:	0152      	lsls	r2, r2, #5
 8014554:	0030      	movs	r0, r6
 8014556:	f006 f8fd 	bl	801a754 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 801455a:	0022      	movs	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 801455c:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 801455e:	3231      	adds	r2, #49	@ 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8014560:	7033      	strb	r3, [r6, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014562:	7013      	strb	r3, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014564:	0023      	movs	r3, r4
 8014566:	2261      	movs	r2, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8014568:	2141      	movs	r1, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 801456a:	3332      	adds	r3, #50	@ 0x32
	*ptr++ = (BYTE)val; val >>= 8;
 801456c:	2085      	movs	r0, #133	@ 0x85
	*ptr++ = (BYTE)val; val >>= 8;
 801456e:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8014570:	7059      	strb	r1, [r3, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8014572:	2372      	movs	r3, #114	@ 0x72
 8014574:	0080      	lsls	r0, r0, #2
 8014576:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014578:	4816      	ldr	r0, [pc, #88]	@ (80145d4 <sync_fs+0xa4>)
 801457a:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 801457c:	4b16      	ldr	r3, [pc, #88]	@ (80145d8 <sync_fs+0xa8>)
 801457e:	54e1      	strb	r1, [r4, r3]
	*ptr++ = (BYTE)val;
 8014580:	4b16      	ldr	r3, [pc, #88]	@ (80145dc <sync_fs+0xac>)
 8014582:	54e2      	strb	r2, [r4, r3]
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8014584:	3301      	adds	r3, #1
 8014586:	18e0      	adds	r0, r4, r3
 8014588:	6921      	ldr	r1, [r4, #16]
 801458a:	f7ff fe16 	bl	80141ba <st_32>
				st_32(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 801458e:	2387      	movs	r3, #135	@ 0x87
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	18e0      	adds	r0, r4, r3
 8014594:	68e1      	ldr	r1, [r4, #12]
 8014596:	f7ff fe10 	bl	80141ba <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 801459a:	238b      	movs	r3, #139	@ 0x8b
	*ptr++ = (BYTE)val; val >>= 8;
 801459c:	2255      	movs	r2, #85	@ 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	54e5      	strb	r5, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 80145a2:	4b0f      	ldr	r3, [pc, #60]	@ (80145e0 <sync_fs+0xb0>)
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 80145a4:	0031      	movs	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 80145a6:	54e5      	strb	r5, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 80145a8:	4b0e      	ldr	r3, [pc, #56]	@ (80145e4 <sync_fs+0xb4>)
 80145aa:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 80145ac:	4b0e      	ldr	r3, [pc, #56]	@ (80145e8 <sync_fs+0xb8>)
 80145ae:	1892      	adds	r2, r2, r2
 80145b0:	54e2      	strb	r2, [r4, r3]
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 80145b2:	6a22      	ldr	r2, [r4, #32]
 80145b4:	003b      	movs	r3, r7
 80145b6:	3201      	adds	r2, #1
 80145b8:	7860      	ldrb	r0, [r4, #1]
 80145ba:	61e2      	str	r2, [r4, #28]
 80145bc:	f7ff fdb5 	bl	801412a <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80145c0:	2200      	movs	r2, #0
 80145c2:	7860      	ldrb	r0, [r4, #1]
 80145c4:	0011      	movs	r1, r2
 80145c6:	f7ff fdd5 	bl	8014174 <disk_ioctl>
 80145ca:	1e43      	subs	r3, r0, #1
 80145cc:	4198      	sbcs	r0, r3
 80145ce:	b2c0      	uxtb	r0, r0
}
 80145d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d2:	46c0      	nop			@ (mov r8, r8)
 80145d4:	00000215 	.word	0x00000215
 80145d8:	00000216 	.word	0x00000216
 80145dc:	00000217 	.word	0x00000217
 80145e0:	0000022d 	.word	0x0000022d
 80145e4:	0000022e 	.word	0x0000022e
 80145e8:	0000022f 	.word	0x0000022f

080145ec <mount_volume>:
	*rfs = 0;
 80145ec:	2300      	movs	r3, #0
{
 80145ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145f0:	b08b      	sub	sp, #44	@ 0x2c
	*rfs = 0;
 80145f2:	600b      	str	r3, [r1, #0]
{
 80145f4:	000e      	movs	r6, r1
 80145f6:	0015      	movs	r5, r2
	vol = get_ldnumber(path);
 80145f8:	f7ff fdf3 	bl	80141e2 <get_ldnumber>
 80145fc:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 80145fe:	200b      	movs	r0, #11
 8014600:	2b00      	cmp	r3, #0
 8014602:	db15      	blt.n	8014630 <mount_volume+0x44>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8014604:	4a99      	ldr	r2, [pc, #612]	@ (801486c <mount_volume+0x280>)
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	589c      	ldr	r4, [r3, r2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 801460a:	3001      	adds	r0, #1
 801460c:	2c00      	cmp	r4, #0
 801460e:	d00f      	beq.n	8014630 <mount_volume+0x44>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8014610:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014612:	2601      	movs	r6, #1
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8014614:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 8014616:	7860      	ldrb	r0, [r4, #1]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014618:	43b5      	bics	r5, r6
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 801461a:	2b00      	cmp	r3, #0
 801461c:	d00c      	beq.n	8014638 <mount_volume+0x4c>
		stat = disk_status(fs->pdrv);
 801461e:	f7ff fd61 	bl	80140e4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014622:	4230      	tst	r0, r6
 8014624:	d108      	bne.n	8014638 <mount_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014626:	2d00      	cmp	r5, #0
 8014628:	d001      	beq.n	801462e <mount_volume+0x42>
 801462a:	0740      	lsls	r0, r0, #29
 801462c:	d402      	bmi.n	8014634 <mount_volume+0x48>
			return FR_OK;				/* The filesystem object is already valid */
 801462e:	2000      	movs	r0, #0
}
 8014630:	b00b      	add	sp, #44	@ 0x2c
 8014632:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return FR_WRITE_PROTECTED;
 8014634:	200a      	movs	r0, #10
 8014636:	e7fb      	b.n	8014630 <mount_volume+0x44>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8014638:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 801463a:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 801463c:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 801463e:	f7ff fd53 	bl	80140e8 <disk_initialize>
 8014642:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014644:	2003      	movs	r0, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014646:	07da      	lsls	r2, r3, #31
 8014648:	d4f2      	bmi.n	8014630 <mount_volume+0x44>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801464a:	2d00      	cmp	r5, #0
 801464c:	d001      	beq.n	8014652 <mount_volume+0x66>
 801464e:	075b      	lsls	r3, r3, #29
 8014650:	d4f0      	bmi.n	8014634 <mount_volume+0x48>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8014652:	2100      	movs	r1, #0
 8014654:	0020      	movs	r0, r4
 8014656:	f7ff fe41 	bl	80142dc <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 801465a:	2802      	cmp	r0, #2
 801465c:	d120      	bne.n	80146a0 <mount_volume+0xb4>
 801465e:	0025      	movs	r5, r4
 8014660:	4b83      	ldr	r3, [pc, #524]	@ (8014870 <mount_volume+0x284>)
 8014662:	35f7      	adds	r5, #247	@ 0xf7
 8014664:	35ff      	adds	r5, #255	@ 0xff
 8014666:	ae06      	add	r6, sp, #24
 8014668:	18e7      	adds	r7, r4, r3
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 801466a:	0028      	movs	r0, r5
 801466c:	f7ff fd9a 	bl	80141a4 <ld_32>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8014670:	3510      	adds	r5, #16
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8014672:	c601      	stmia	r6!, {r0}
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8014674:	42bd      	cmp	r5, r7
 8014676:	d1f8      	bne.n	801466a <mount_volume+0x7e>
 8014678:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 801467a:	2603      	movs	r6, #3
 801467c:	00ab      	lsls	r3, r5, #2
 801467e:	aa06      	add	r2, sp, #24
 8014680:	58d1      	ldr	r1, [r2, r3]
 8014682:	0030      	movs	r0, r6
 8014684:	2900      	cmp	r1, #0
 8014686:	d004      	beq.n	8014692 <mount_volume+0xa6>
 8014688:	0020      	movs	r0, r4
 801468a:	f7ff fe27 	bl	80142dc <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 801468e:	2801      	cmp	r0, #1
 8014690:	d90c      	bls.n	80146ac <mount_volume+0xc0>
 8014692:	3501      	adds	r5, #1
 8014694:	2d04      	cmp	r5, #4
 8014696:	d1f1      	bne.n	801467c <mount_volume+0x90>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8014698:	2804      	cmp	r0, #4
 801469a:	d105      	bne.n	80146a8 <mount_volume+0xbc>
 801469c:	2001      	movs	r0, #1
 801469e:	e7c7      	b.n	8014630 <mount_volume+0x44>
 80146a0:	2804      	cmp	r0, #4
 80146a2:	d0fb      	beq.n	801469c <mount_volume+0xb0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80146a4:	2801      	cmp	r0, #1
 80146a6:	d901      	bls.n	80146ac <mount_volume+0xc0>
 80146a8:	200d      	movs	r0, #13
 80146aa:	e7c1      	b.n	8014630 <mount_volume+0x44>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80146ac:	69e3      	ldr	r3, [r4, #28]
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80146ae:	2280      	movs	r2, #128	@ 0x80
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80146b0:	9302      	str	r3, [sp, #8]
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80146b2:	0023      	movs	r3, r4
 80146b4:	333b      	adds	r3, #59	@ 0x3b
 80146b6:	7819      	ldrb	r1, [r3, #0]
 80146b8:	785b      	ldrb	r3, [r3, #1]
 80146ba:	0152      	lsls	r2, r2, #5
 80146bc:	021b      	lsls	r3, r3, #8
 80146be:	430b      	orrs	r3, r1
 80146c0:	4293      	cmp	r3, r2
 80146c2:	d1f1      	bne.n	80146a8 <mount_volume+0xbc>
		fasize = ld_16(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80146c4:	0023      	movs	r3, r4
 80146c6:	3346      	adds	r3, #70	@ 0x46
 80146c8:	781a      	ldrb	r2, [r3, #0]
 80146ca:	3301      	adds	r3, #1
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	021b      	lsls	r3, r3, #8
 80146d0:	4313      	orrs	r3, r2
 80146d2:	9301      	str	r3, [sp, #4]
		if (fasize == 0) fasize = ld_32(fs->win + BPB_FATSz32);
 80146d4:	d104      	bne.n	80146e0 <mount_volume+0xf4>
 80146d6:	0020      	movs	r0, r4
 80146d8:	3054      	adds	r0, #84	@ 0x54
 80146da:	f7ff fd63 	bl	80141a4 <ld_32>
 80146de:	9001      	str	r0, [sp, #4]
		fs->fsize = fasize;
 80146e0:	9b01      	ldr	r3, [sp, #4]
 80146e2:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80146e4:	0023      	movs	r3, r4
 80146e6:	3340      	adds	r3, #64	@ 0x40
 80146e8:	781d      	ldrb	r5, [r3, #0]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80146ea:	1e6b      	subs	r3, r5, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80146ec:	70e5      	strb	r5, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80146ee:	2b01      	cmp	r3, #1
 80146f0:	d8da      	bhi.n	80146a8 <mount_volume+0xbc>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80146f2:	0023      	movs	r3, r4
 80146f4:	333d      	adds	r3, #61	@ 0x3d
 80146f6:	781e      	ldrb	r6, [r3, #0]
 80146f8:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80146fa:	2e00      	cmp	r6, #0
 80146fc:	d0d4      	beq.n	80146a8 <mount_volume+0xbc>
 80146fe:	1e73      	subs	r3, r6, #1
 8014700:	421e      	tst	r6, r3
 8014702:	d1d1      	bne.n	80146a8 <mount_volume+0xbc>
		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014704:	0022      	movs	r2, r4
 8014706:	0023      	movs	r3, r4
 8014708:	3242      	adds	r2, #66	@ 0x42
 801470a:	7817      	ldrb	r7, [r2, #0]
 801470c:	3341      	adds	r3, #65	@ 0x41
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	023f      	lsls	r7, r7, #8
 8014712:	431f      	orrs	r7, r3
 8014714:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014716:	067b      	lsls	r3, r7, #25
 8014718:	d1c6      	bne.n	80146a8 <mount_volume+0xbc>
		tsect = ld_16(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 801471a:	0023      	movs	r3, r4
 801471c:	7890      	ldrb	r0, [r2, #2]
 801471e:	3343      	adds	r3, #67	@ 0x43
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	0200      	lsls	r0, r0, #8
 8014724:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_32(fs->win + BPB_TotSec32);
 8014726:	d103      	bne.n	8014730 <mount_volume+0x144>
 8014728:	0020      	movs	r0, r4
 801472a:	3050      	adds	r0, #80	@ 0x50
 801472c:	f7ff fd3a 	bl	80141a4 <ld_32>
		nrsv = ld_16(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8014730:	0023      	movs	r3, r4
 8014732:	333e      	adds	r3, #62	@ 0x3e
 8014734:	781a      	ldrb	r2, [r3, #0]
 8014736:	3301      	adds	r3, #1
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	021b      	lsls	r3, r3, #8
 801473c:	4313      	orrs	r3, r2
 801473e:	9303      	str	r3, [sp, #12]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014740:	d0b2      	beq.n	80146a8 <mount_volume+0xbc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014742:	9b01      	ldr	r3, [sp, #4]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014744:	9a03      	ldr	r2, [sp, #12]
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014746:	436b      	muls	r3, r5
 8014748:	9305      	str	r3, [sp, #20]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801474a:	09fb      	lsrs	r3, r7, #7
 801474c:	189b      	adds	r3, r3, r2
 801474e:	9a05      	ldr	r2, [sp, #20]
 8014750:	189b      	adds	r3, r3, r2
 8014752:	9304      	str	r3, [sp, #16]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014754:	4298      	cmp	r0, r3
 8014756:	d3a7      	bcc.n	80146a8 <mount_volume+0xbc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014758:	1ac5      	subs	r5, r0, r3
 801475a:	0031      	movs	r1, r6
 801475c:	0028      	movs	r0, r5
 801475e:	f7eb fd03 	bl	8000168 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014762:	42b5      	cmp	r5, r6
 8014764:	d3a0      	bcc.n	80146a8 <mount_volume+0xbc>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8014766:	4b43      	ldr	r3, [pc, #268]	@ (8014874 <mount_volume+0x288>)
 8014768:	4298      	cmp	r0, r3
 801476a:	d89d      	bhi.n	80146a8 <mount_volume+0xbc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801476c:	4b42      	ldr	r3, [pc, #264]	@ (8014878 <mount_volume+0x28c>)
 801476e:	2603      	movs	r6, #3
 8014770:	4298      	cmp	r0, r3
 8014772:	d804      	bhi.n	801477e <mount_volume+0x192>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014774:	4e41      	ldr	r6, [pc, #260]	@ (801487c <mount_volume+0x290>)
 8014776:	4286      	cmp	r6, r0
 8014778:	41b6      	sbcs	r6, r6
 801477a:	4276      	negs	r6, r6
 801477c:	3601      	adds	r6, #1
		fs->volbase = bsect;							/* Volume start sector */
 801477e:	9b02      	ldr	r3, [sp, #8]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014780:	1c85      	adds	r5, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014782:	469c      	mov	ip, r3
 8014784:	9803      	ldr	r0, [sp, #12]
		fs->volbase = bsect;							/* Volume start sector */
 8014786:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014788:	9b04      	ldr	r3, [sp, #16]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801478a:	4460      	add	r0, ip
		fs->database = bsect + sysect;					/* Data start sector */
 801478c:	4463      	add	r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801478e:	6165      	str	r5, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014790:	6260      	str	r0, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014792:	62e3      	str	r3, [r4, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8014794:	2e03      	cmp	r6, #3
 8014796:	d158      	bne.n	801484a <mount_volume+0x25e>
			if (ld_16(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014798:	0023      	movs	r3, r4
 801479a:	335a      	adds	r3, #90	@ 0x5a
 801479c:	781a      	ldrb	r2, [r3, #0]
 801479e:	785b      	ldrb	r3, [r3, #1]
 80147a0:	021b      	lsls	r3, r3, #8
 80147a2:	4313      	orrs	r3, r2
 80147a4:	433b      	orrs	r3, r7
 80147a6:	d000      	beq.n	80147aa <mount_volume+0x1be>
 80147a8:	e77e      	b.n	80146a8 <mount_volume+0xbc>
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80147aa:	0020      	movs	r0, r4
 80147ac:	305c      	adds	r0, #92	@ 0x5c
 80147ae:	f7ff fcf9 	bl	80141a4 <ld_32>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80147b2:	00ad      	lsls	r5, r5, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80147b4:	4b32      	ldr	r3, [pc, #200]	@ (8014880 <mount_volume+0x294>)
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80147b6:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80147b8:	18ed      	adds	r5, r5, r3
 80147ba:	9b01      	ldr	r3, [sp, #4]
 80147bc:	0b2d      	lsrs	r5, r5, #12
 80147be:	429d      	cmp	r5, r3
 80147c0:	d900      	bls.n	80147c4 <mount_volume+0x1d8>
 80147c2:	e771      	b.n	80146a8 <mount_volume+0xbc>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 80147c4:	2301      	movs	r3, #1
 80147c6:	425b      	negs	r3, r3
 80147c8:	6123      	str	r3, [r4, #16]
 80147ca:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 80147cc:	3381      	adds	r3, #129	@ 0x81
 80147ce:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 80147d0:	2e03      	cmp	r6, #3
 80147d2:	d132      	bne.n	801483a <mount_volume+0x24e>
			&& ld_16(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 80147d4:	0023      	movs	r3, r4
 80147d6:	3360      	adds	r3, #96	@ 0x60
 80147d8:	781a      	ldrb	r2, [r3, #0]
 80147da:	785b      	ldrb	r3, [r3, #1]
 80147dc:	021b      	lsls	r3, r3, #8
 80147de:	4313      	orrs	r3, r2
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d12a      	bne.n	801483a <mount_volume+0x24e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80147e4:	9902      	ldr	r1, [sp, #8]
 80147e6:	0020      	movs	r0, r4
 80147e8:	3101      	adds	r1, #1
 80147ea:	f7ff fd5c 	bl	80142a6 <move_window>
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d123      	bne.n	801483a <mount_volume+0x24e>
			fs->fsi_flag = 0;
 80147f2:	7160      	strb	r0, [r4, #5]
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 80147f4:	0020      	movs	r0, r4
 80147f6:	3030      	adds	r0, #48	@ 0x30
 80147f8:	f7ff fcd4 	bl	80141a4 <ld_32>
 80147fc:	4b21      	ldr	r3, [pc, #132]	@ (8014884 <mount_volume+0x298>)
 80147fe:	4298      	cmp	r0, r3
 8014800:	d11b      	bne.n	801483a <mount_volume+0x24e>
				&& ld_32(fs->win + FSI_StrucSig) == 0x61417272
 8014802:	2385      	movs	r3, #133	@ 0x85
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	18e0      	adds	r0, r4, r3
 8014808:	f7ff fccc 	bl	80141a4 <ld_32>
 801480c:	4b1e      	ldr	r3, [pc, #120]	@ (8014888 <mount_volume+0x29c>)
 801480e:	4298      	cmp	r0, r3
 8014810:	d113      	bne.n	801483a <mount_volume+0x24e>
				&& ld_32(fs->win + FSI_TrailSig) == 0xAA550000)
 8014812:	238b      	movs	r3, #139	@ 0x8b
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	18e0      	adds	r0, r4, r3
 8014818:	f7ff fcc4 	bl	80141a4 <ld_32>
 801481c:	4b1b      	ldr	r3, [pc, #108]	@ (801488c <mount_volume+0x2a0>)
 801481e:	4298      	cmp	r0, r3
 8014820:	d10b      	bne.n	801483a <mount_volume+0x24e>
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 8014822:	2386      	movs	r3, #134	@ 0x86
 8014824:	009b      	lsls	r3, r3, #2
 8014826:	18e0      	adds	r0, r4, r3
 8014828:	f7ff fcbc 	bl	80141a4 <ld_32>
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 801482c:	2387      	movs	r3, #135	@ 0x87
 801482e:	009b      	lsls	r3, r3, #2
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 8014830:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 8014832:	18e0      	adds	r0, r4, r3
 8014834:	f7ff fcb6 	bl	80141a4 <ld_32>
 8014838:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
 801483a:	4a15      	ldr	r2, [pc, #84]	@ (8014890 <mount_volume+0x2a4>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 801483c:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 801483e:	8813      	ldrh	r3, [r2, #0]
 8014840:	3301      	adds	r3, #1
 8014842:	b29b      	uxth	r3, r3
 8014844:	8013      	strh	r3, [r2, #0]
 8014846:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8014848:	e6f1      	b.n	801462e <mount_volume+0x42>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 801484a:	2f00      	cmp	r7, #0
 801484c:	d100      	bne.n	8014850 <mount_volume+0x264>
 801484e:	e72b      	b.n	80146a8 <mount_volume+0xbc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014850:	9b05      	ldr	r3, [sp, #20]
 8014852:	18c0      	adds	r0, r0, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014854:	2e02      	cmp	r6, #2
 8014856:	d101      	bne.n	801485c <mount_volume+0x270>
 8014858:	006d      	lsls	r5, r5, #1
 801485a:	e7ab      	b.n	80147b4 <mount_volume+0x1c8>
 801485c:	2303      	movs	r3, #3
 801485e:	2201      	movs	r2, #1
 8014860:	436b      	muls	r3, r5
 8014862:	4015      	ands	r5, r2
 8014864:	085b      	lsrs	r3, r3, #1
 8014866:	195d      	adds	r5, r3, r5
 8014868:	e7a4      	b.n	80147b4 <mount_volume+0x1c8>
 801486a:	46c0      	nop			@ (mov r8, r8)
 801486c:	200030dc 	.word	0x200030dc
 8014870:	00000236 	.word	0x00000236
 8014874:	0ffffff5 	.word	0x0ffffff5
 8014878:	0000fff5 	.word	0x0000fff5
 801487c:	00000ff5 	.word	0x00000ff5
 8014880:	00000fff 	.word	0x00000fff
 8014884:	41615252 	.word	0x41615252
 8014888:	61417272 	.word	0x61417272
 801488c:	aa550000 	.word	0xaa550000
 8014890:	200030d8 	.word	0x200030d8

08014894 <get_fileinfo.part.0.constprop.0.isra.0>:
static void get_fileinfo (
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	si = di = 0;
 8014896:	2300      	movs	r3, #0
static void get_fileinfo (
 8014898:	000c      	movs	r4, r1
	si = di = 0;
 801489a:	001a      	movs	r2, r3
static void get_fileinfo (
 801489c:	0005      	movs	r5, r0
		c = (TCHAR)dp->dir[si++];
 801489e:	3801      	subs	r0, #1
 80148a0:	3201      	adds	r2, #1
 80148a2:	5c81      	ldrb	r1, [r0, r2]
		if (c == ' ') continue;		/* Skip padding spaces */
 80148a4:	2920      	cmp	r1, #32
 80148a6:	d00b      	beq.n	80148c0 <get_fileinfo.part.0.constprop.0.isra.0+0x2c>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 80148a8:	2905      	cmp	r1, #5
 80148aa:	d100      	bne.n	80148ae <get_fileinfo.part.0.constprop.0.isra.0+0x1a>
 80148ac:	31e0      	adds	r1, #224	@ 0xe0
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 80148ae:	2a09      	cmp	r2, #9
 80148b0:	d103      	bne.n	80148ba <get_fileinfo.part.0.constprop.0.isra.0+0x26>
 80148b2:	272e      	movs	r7, #46	@ 0x2e
 80148b4:	18e6      	adds	r6, r4, r3
 80148b6:	7277      	strb	r7, [r6, #9]
 80148b8:	3301      	adds	r3, #1
		fno->fname[di++] = c;
 80148ba:	18e6      	adds	r6, r4, r3
 80148bc:	7271      	strb	r1, [r6, #9]
 80148be:	3301      	adds	r3, #1
	while (si < 11) {		/* Copy name body and extension */
 80148c0:	2a0b      	cmp	r2, #11
 80148c2:	d1ed      	bne.n	80148a0 <get_fileinfo.part.0.constprop.0.isra.0+0xc>
	fno->fname[di] = 0;		/* Terminate the SFN */
 80148c4:	2200      	movs	r2, #0
	fno->fsize = ld_32(dp->dir + DIR_FileSize);		/* Size */
 80148c6:	0028      	movs	r0, r5
	fno->fname[di] = 0;		/* Terminate the SFN */
 80148c8:	18e3      	adds	r3, r4, r3
 80148ca:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;		/* Attribute */
 80148cc:	7aeb      	ldrb	r3, [r5, #11]
 80148ce:	323f      	adds	r2, #63	@ 0x3f
 80148d0:	4013      	ands	r3, r2
 80148d2:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_32(dp->dir + DIR_FileSize);		/* Size */
 80148d4:	301c      	adds	r0, #28
 80148d6:	f7ff fc65 	bl	80141a4 <ld_32>
 80148da:	6020      	str	r0, [r4, #0]
	fno->ftime = ld_16(dp->dir + DIR_ModTime + 0);	/* Last modified time */
 80148dc:	7deb      	ldrb	r3, [r5, #23]
 80148de:	7daa      	ldrb	r2, [r5, #22]
 80148e0:	021b      	lsls	r3, r3, #8
 80148e2:	4313      	orrs	r3, r2
 80148e4:	80e3      	strh	r3, [r4, #6]
	fno->fdate = ld_16(dp->dir + DIR_ModTime + 2);	/* Last Modified date */
 80148e6:	7e6b      	ldrb	r3, [r5, #25]
 80148e8:	7e2a      	ldrb	r2, [r5, #24]
 80148ea:	021b      	lsls	r3, r3, #8
 80148ec:	4313      	orrs	r3, r2
 80148ee:	80a3      	strh	r3, [r4, #4]
}
 80148f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148f2 <ld_clust.isra.0>:
	cl = ld_16(dir + DIR_FstClusLO);
 80148f2:	7ecb      	ldrb	r3, [r1, #27]
static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
 80148f4:	0002      	movs	r2, r0
	cl = ld_16(dir + DIR_FstClusLO);
 80148f6:	7e88      	ldrb	r0, [r1, #26]
 80148f8:	021b      	lsls	r3, r3, #8
 80148fa:	4318      	orrs	r0, r3
	if (fs->fs_type == FS_FAT32) {
 80148fc:	2a03      	cmp	r2, #3
 80148fe:	d105      	bne.n	801490c <ld_clust.isra.0+0x1a>
		cl |= (DWORD)ld_16(dir + DIR_FstClusHI) << 16;
 8014900:	7d4b      	ldrb	r3, [r1, #21]
 8014902:	7d0a      	ldrb	r2, [r1, #20]
 8014904:	021b      	lsls	r3, r3, #8
 8014906:	4313      	orrs	r3, r2
 8014908:	041b      	lsls	r3, r3, #16
 801490a:	4318      	orrs	r0, r3
}
 801490c:	4770      	bx	lr
	...

08014910 <get_fat.isra.0>:
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8014910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 8014912:	2601      	movs	r6, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8014914:	0005      	movs	r5, r0
 8014916:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014918:	42b1      	cmp	r1, r6
 801491a:	d914      	bls.n	8014946 <get_fat.isra.0+0x36>
 801491c:	6943      	ldr	r3, [r0, #20]
 801491e:	4299      	cmp	r1, r3
 8014920:	d211      	bcs.n	8014946 <get_fat.isra.0+0x36>
		switch (fs->fs_type) {
 8014922:	7803      	ldrb	r3, [r0, #0]
 8014924:	2b02      	cmp	r3, #2
 8014926:	d02e      	beq.n	8014986 <get_fat.isra.0+0x76>
 8014928:	2b03      	cmp	r3, #3
 801492a:	d03f      	beq.n	80149ac <get_fat.isra.0+0x9c>
 801492c:	42b3      	cmp	r3, r6
 801492e:	d10a      	bne.n	8014946 <get_fat.isra.0+0x36>
			bc = (UINT)clst; bc += bc / 2;
 8014930:	084f      	lsrs	r7, r1, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014932:	6a43      	ldr	r3, [r0, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 8014934:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014936:	0b39      	lsrs	r1, r7, #12
 8014938:	18c9      	adds	r1, r1, r3
 801493a:	f7ff fcb4 	bl	80142a6 <move_window>
 801493e:	2800      	cmp	r0, #0
 8014940:	d003      	beq.n	801494a <get_fat.isra.0+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014942:	2601      	movs	r6, #1
 8014944:	4276      	negs	r6, r6
}
 8014946:	0030      	movs	r0, r6
 8014948:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 801494a:	1c7b      	adds	r3, r7, #1
 801494c:	053f      	lsls	r7, r7, #20
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801494e:	0b19      	lsrs	r1, r3, #12
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8014950:	9301      	str	r3, [sp, #4]
 8014952:	0d3f      	lsrs	r7, r7, #20
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014954:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8014956:	19ef      	adds	r7, r5, r7
 8014958:	3730      	adds	r7, #48	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801495a:	0028      	movs	r0, r5
 801495c:	18c9      	adds	r1, r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 801495e:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014960:	f7ff fca1 	bl	80142a6 <move_window>
 8014964:	2800      	cmp	r0, #0
 8014966:	d1ec      	bne.n	8014942 <get_fat.isra.0+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8014968:	9b01      	ldr	r3, [sp, #4]
 801496a:	051b      	lsls	r3, r3, #20
 801496c:	0d1b      	lsrs	r3, r3, #20
 801496e:	18eb      	adds	r3, r5, r3
 8014970:	3330      	adds	r3, #48	@ 0x30
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	021b      	lsls	r3, r3, #8
 8014976:	433b      	orrs	r3, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8014978:	4234      	tst	r4, r6
 801497a:	d001      	beq.n	8014980 <get_fat.isra.0+0x70>
 801497c:	091e      	lsrs	r6, r3, #4
 801497e:	e7e2      	b.n	8014946 <get_fat.isra.0+0x36>
 8014980:	051b      	lsls	r3, r3, #20
 8014982:	0d1e      	lsrs	r6, r3, #20
 8014984:	e7df      	b.n	8014946 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014986:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014988:	0ac9      	lsrs	r1, r1, #11
 801498a:	18c9      	adds	r1, r1, r3
 801498c:	f7ff fc8b 	bl	80142a6 <move_window>
 8014990:	2800      	cmp	r0, #0
 8014992:	d1d6      	bne.n	8014942 <get_fat.isra.0+0x32>
			val = ld_16(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8014994:	4b0e      	ldr	r3, [pc, #56]	@ (80149d0 <get_fat.isra.0+0xc0>)
 8014996:	0064      	lsls	r4, r4, #1
 8014998:	401c      	ands	r4, r3
 801499a:	192c      	adds	r4, r5, r4
 801499c:	0023      	movs	r3, r4
 801499e:	3431      	adds	r4, #49	@ 0x31
 80149a0:	7826      	ldrb	r6, [r4, #0]
 80149a2:	3330      	adds	r3, #48	@ 0x30
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	0236      	lsls	r6, r6, #8
 80149a8:	431e      	orrs	r6, r3
			break;
 80149aa:	e7cc      	b.n	8014946 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80149ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80149ae:	0a89      	lsrs	r1, r1, #10
 80149b0:	18c9      	adds	r1, r1, r3
 80149b2:	f7ff fc78 	bl	80142a6 <move_window>
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d1c3      	bne.n	8014942 <get_fat.isra.0+0x32>
			val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80149ba:	4b06      	ldr	r3, [pc, #24]	@ (80149d4 <get_fat.isra.0+0xc4>)
 80149bc:	00a4      	lsls	r4, r4, #2
 80149be:	401c      	ands	r4, r3
 80149c0:	3530      	adds	r5, #48	@ 0x30
 80149c2:	1928      	adds	r0, r5, r4
 80149c4:	f7ff fbee 	bl	80141a4 <ld_32>
 80149c8:	0106      	lsls	r6, r0, #4
 80149ca:	0936      	lsrs	r6, r6, #4
			break;
 80149cc:	e7bb      	b.n	8014946 <get_fat.isra.0+0x36>
 80149ce:	46c0      	nop			@ (mov r8, r8)
 80149d0:	00000ffe 	.word	0x00000ffe
 80149d4:	00000ffc 	.word	0x00000ffc

080149d8 <dir_sdi.constprop.0>:
	dp->dptr = ofs;				/* Set current offset */
 80149d8:	2300      	movs	r3, #0
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80149da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80149dc:	6884      	ldr	r4, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80149de:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
 80149e0:	6806      	ldr	r6, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80149e2:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80149e4:	429c      	cmp	r4, r3
 80149e6:	d118      	bne.n	8014a1a <dir_sdi.constprop.0+0x42>
 80149e8:	7833      	ldrb	r3, [r6, #0]
 80149ea:	2b02      	cmp	r3, #2
 80149ec:	d902      	bls.n	80149f4 <dir_sdi.constprop.0+0x1c>
		clst = (DWORD)fs->dirbase;
 80149ee:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d111      	bne.n	8014a18 <dir_sdi.constprop.0+0x40>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80149f4:	8933      	ldrh	r3, [r6, #8]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d101      	bne.n	80149fe <dir_sdi.constprop.0+0x26>
		return FR_INT_ERR;
 80149fa:	2002      	movs	r0, #2
}
 80149fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		dp->sect = fs->dirbase;
 80149fe:	2700      	movs	r7, #0
 8014a00:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8014a02:	61a8      	str	r0, [r5, #24]
	dp->clust = clst;					/* Current cluster# */
 8014a04:	616f      	str	r7, [r5, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d0f7      	beq.n	80149fa <dir_sdi.constprop.0+0x22>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014a0a:	0b24      	lsrs	r4, r4, #12
 8014a0c:	1820      	adds	r0, r4, r0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014a0e:	3630      	adds	r6, #48	@ 0x30
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014a10:	61a8      	str	r0, [r5, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014a12:	61ee      	str	r6, [r5, #28]
	return FR_OK;
 8014a14:	2000      	movs	r0, #0
 8014a16:	e7f1      	b.n	80149fc <dir_sdi.constprop.0+0x24>
 8014a18:	001c      	movs	r4, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8014a1a:	0027      	movs	r7, r4
 8014a1c:	2400      	movs	r4, #0
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014a1e:	8973      	ldrh	r3, [r6, #10]
 8014a20:	031b      	lsls	r3, r3, #12
 8014a22:	9301      	str	r3, [sp, #4]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014a24:	9b01      	ldr	r3, [sp, #4]
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014a26:	0039      	movs	r1, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 8014a28:	42a3      	cmp	r3, r4
 8014a2a:	d903      	bls.n	8014a34 <dir_sdi.constprop.0+0x5c>
		dp->sect = clst2sect(fs, clst);
 8014a2c:	0030      	movs	r0, r6
 8014a2e:	f7ff fbcc 	bl	80141ca <clst2sect>
 8014a32:	e7e6      	b.n	8014a02 <dir_sdi.constprop.0+0x2a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014a34:	6828      	ldr	r0, [r5, #0]
 8014a36:	f7ff ff6b 	bl	8014910 <get_fat.isra.0>
 8014a3a:	0007      	movs	r7, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014a3c:	1c43      	adds	r3, r0, #1
 8014a3e:	d007      	beq.n	8014a50 <dir_sdi.constprop.0+0x78>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014a40:	2801      	cmp	r0, #1
 8014a42:	d9da      	bls.n	80149fa <dir_sdi.constprop.0+0x22>
 8014a44:	6973      	ldr	r3, [r6, #20]
 8014a46:	4298      	cmp	r0, r3
 8014a48:	d2d7      	bcs.n	80149fa <dir_sdi.constprop.0+0x22>
			ofs -= csz;
 8014a4a:	9b01      	ldr	r3, [sp, #4]
 8014a4c:	1ae4      	subs	r4, r4, r3
 8014a4e:	e7e9      	b.n	8014a24 <dir_sdi.constprop.0+0x4c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014a50:	2001      	movs	r0, #1
 8014a52:	e7d3      	b.n	80149fc <dir_sdi.constprop.0+0x24>

08014a54 <remove_chain>:
{
 8014a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a56:	000c      	movs	r4, r1
 8014a58:	0006      	movs	r6, r0
 8014a5a:	0011      	movs	r1, r2
	FATFS *fs = obj->fs;
 8014a5c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014a5e:	2c01      	cmp	r4, #1
 8014a60:	d92d      	bls.n	8014abe <remove_chain+0x6a>
 8014a62:	696b      	ldr	r3, [r5, #20]
 8014a64:	42a3      	cmp	r3, r4
 8014a66:	d92a      	bls.n	8014abe <remove_chain+0x6a>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014a68:	2a00      	cmp	r2, #0
 8014a6a:	d006      	beq.n	8014a7a <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	0028      	movs	r0, r5
 8014a70:	4252      	negs	r2, r2
 8014a72:	f7ff fcab 	bl	80143cc <put_fat>
		if (res != FR_OK) return res;
 8014a76:	2800      	cmp	r0, #0
 8014a78:	d107      	bne.n	8014a8a <remove_chain+0x36>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014a7a:	0021      	movs	r1, r4
 8014a7c:	6830      	ldr	r0, [r6, #0]
 8014a7e:	f7ff ff47 	bl	8014910 <get_fat.isra.0>
 8014a82:	0027      	movs	r7, r4
 8014a84:	1e04      	subs	r4, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
 8014a86:	d101      	bne.n	8014a8c <remove_chain+0x38>
	return FR_OK;
 8014a88:	2000      	movs	r0, #0
}
 8014a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014a8c:	2801      	cmp	r0, #1
 8014a8e:	d016      	beq.n	8014abe <remove_chain+0x6a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014a90:	1c43      	adds	r3, r0, #1
 8014a92:	d016      	beq.n	8014ac2 <remove_chain+0x6e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014a94:	2200      	movs	r2, #0
 8014a96:	0039      	movs	r1, r7
 8014a98:	0028      	movs	r0, r5
 8014a9a:	f7ff fc97 	bl	80143cc <put_fat>
			if (res != FR_OK) return res;
 8014a9e:	2800      	cmp	r0, #0
 8014aa0:	d1f3      	bne.n	8014a8a <remove_chain+0x36>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8014aa2:	696a      	ldr	r2, [r5, #20]
 8014aa4:	692b      	ldr	r3, [r5, #16]
 8014aa6:	1e91      	subs	r1, r2, #2
 8014aa8:	428b      	cmp	r3, r1
 8014aaa:	d205      	bcs.n	8014ab8 <remove_chain+0x64>
			fs->fsi_flag |= 1;
 8014aac:	2101      	movs	r1, #1
			fs->free_clst++;
 8014aae:	3301      	adds	r3, #1
 8014ab0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8014ab2:	796b      	ldrb	r3, [r5, #5]
 8014ab4:	430b      	orrs	r3, r1
 8014ab6:	716b      	strb	r3, [r5, #5]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 8014ab8:	42a2      	cmp	r2, r4
 8014aba:	d8de      	bhi.n	8014a7a <remove_chain+0x26>
 8014abc:	e7e4      	b.n	8014a88 <remove_chain+0x34>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014abe:	2002      	movs	r0, #2
 8014ac0:	e7e3      	b.n	8014a8a <remove_chain+0x36>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014ac2:	2001      	movs	r0, #1
 8014ac4:	e7e1      	b.n	8014a8a <remove_chain+0x36>

08014ac6 <create_chain>:
{
 8014ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8014ac8:	6805      	ldr	r5, [r0, #0]
{
 8014aca:	9001      	str	r0, [sp, #4]
 8014acc:	9100      	str	r1, [sp, #0]
	if (clst == 0) {	/* Create a new chain */
 8014ace:	2900      	cmp	r1, #0
 8014ad0:	d10a      	bne.n	8014ae8 <create_chain+0x22>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8014ad2:	68ef      	ldr	r7, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014ad4:	2f00      	cmp	r7, #0
 8014ad6:	d018      	beq.n	8014b0a <create_chain+0x44>
 8014ad8:	696b      	ldr	r3, [r5, #20]
 8014ada:	42bb      	cmp	r3, r7
 8014adc:	d915      	bls.n	8014b0a <create_chain+0x44>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8014ade:	692b      	ldr	r3, [r5, #16]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d114      	bne.n	8014b0e <create_chain+0x48>
 8014ae4:	2400      	movs	r4, #0
 8014ae6:	e007      	b.n	8014af8 <create_chain+0x32>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014ae8:	0028      	movs	r0, r5
 8014aea:	9900      	ldr	r1, [sp, #0]
 8014aec:	f7ff ff10 	bl	8014910 <get_fat.isra.0>
 8014af0:	0004      	movs	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8014af2:	2801      	cmp	r0, #1
 8014af4:	d802      	bhi.n	8014afc <create_chain+0x36>
 8014af6:	2401      	movs	r4, #1
}
 8014af8:	0020      	movs	r0, r4
 8014afa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8014afc:	1c43      	adds	r3, r0, #1
 8014afe:	d05b      	beq.n	8014bb8 <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014b00:	696b      	ldr	r3, [r5, #20]
		scl = clst;							/* Cluster to start to find */
 8014b02:	9f00      	ldr	r7, [sp, #0]
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014b04:	4283      	cmp	r3, r0
 8014b06:	d9ea      	bls.n	8014ade <create_chain+0x18>
 8014b08:	e7f6      	b.n	8014af8 <create_chain+0x32>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014b0a:	2701      	movs	r7, #1
 8014b0c:	e7e7      	b.n	8014ade <create_chain+0x18>
		if (scl == clst) {						/* Stretching an existing chain? */
 8014b0e:	9a00      	ldr	r2, [sp, #0]
			if (ncl >= fs->n_fatent) ncl = 2;
 8014b10:	696b      	ldr	r3, [r5, #20]
		if (scl == clst) {						/* Stretching an existing chain? */
 8014b12:	4297      	cmp	r7, r2
 8014b14:	d114      	bne.n	8014b40 <create_chain+0x7a>
			ncl = scl + 1;						/* Test if next cluster is free */
 8014b16:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8014b18:	42a3      	cmp	r3, r4
 8014b1a:	d800      	bhi.n	8014b1e <create_chain+0x58>
 8014b1c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8014b1e:	9b01      	ldr	r3, [sp, #4]
 8014b20:	0021      	movs	r1, r4
 8014b22:	6818      	ldr	r0, [r3, #0]
 8014b24:	f7ff fef4 	bl	8014910 <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8014b28:	2801      	cmp	r0, #1
 8014b2a:	d0e4      	beq.n	8014af6 <create_chain+0x30>
 8014b2c:	1c43      	adds	r3, r0, #1
 8014b2e:	d043      	beq.n	8014bb8 <create_chain+0xf2>
			if (cs != 0) {						/* Not free? */
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d01c      	beq.n	8014b6e <create_chain+0xa8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8014b34:	68ee      	ldr	r6, [r5, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8014b36:	2e01      	cmp	r6, #1
 8014b38:	d902      	bls.n	8014b40 <create_chain+0x7a>
 8014b3a:	696b      	ldr	r3, [r5, #20]
 8014b3c:	429e      	cmp	r6, r3
 8014b3e:	d300      	bcc.n	8014b42 <create_chain+0x7c>
			if (ncl >= fs->n_fatent) ncl = 2;
 8014b40:	003e      	movs	r6, r7
			ncl = scl;	/* Start cluster */
 8014b42:	0034      	movs	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014b44:	696b      	ldr	r3, [r5, #20]
				ncl++;							/* Next cluster */
 8014b46:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014b48:	42a3      	cmp	r3, r4
 8014b4a:	d802      	bhi.n	8014b52 <create_chain+0x8c>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8014b4c:	2e01      	cmp	r6, #1
 8014b4e:	d0c9      	beq.n	8014ae4 <create_chain+0x1e>
					ncl = 2;
 8014b50:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014b52:	9b01      	ldr	r3, [sp, #4]
 8014b54:	0021      	movs	r1, r4
 8014b56:	6818      	ldr	r0, [r3, #0]
 8014b58:	f7ff feda 	bl	8014910 <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d008      	beq.n	8014b72 <create_chain+0xac>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8014b60:	2801      	cmp	r0, #1
 8014b62:	d0c8      	beq.n	8014af6 <create_chain+0x30>
 8014b64:	3001      	adds	r0, #1
 8014b66:	d027      	beq.n	8014bb8 <create_chain+0xf2>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8014b68:	42b4      	cmp	r4, r6
 8014b6a:	d1eb      	bne.n	8014b44 <create_chain+0x7e>
 8014b6c:	e7ba      	b.n	8014ae4 <create_chain+0x1e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8014b6e:	2c00      	cmp	r4, #0
 8014b70:	d0e6      	beq.n	8014b40 <create_chain+0x7a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8014b72:	2201      	movs	r2, #1
 8014b74:	0021      	movs	r1, r4
 8014b76:	0028      	movs	r0, r5
 8014b78:	4252      	negs	r2, r2
 8014b7a:	f7ff fc27 	bl	80143cc <put_fat>
		if (res == FR_OK && clst != 0) {
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	d118      	bne.n	8014bb4 <create_chain+0xee>
 8014b82:	9b00      	ldr	r3, [sp, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d10e      	bne.n	8014ba6 <create_chain+0xe0>
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8014b88:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8014b8a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d0b3      	beq.n	8014af8 <create_chain+0x32>
 8014b90:	696a      	ldr	r2, [r5, #20]
 8014b92:	3a02      	subs	r2, #2
 8014b94:	4293      	cmp	r3, r2
 8014b96:	d8af      	bhi.n	8014af8 <create_chain+0x32>
			fs->free_clst--;
 8014b98:	3b01      	subs	r3, #1
 8014b9a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	796a      	ldrb	r2, [r5, #5]
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	716b      	strb	r3, [r5, #5]
 8014ba4:	e7a8      	b.n	8014af8 <create_chain+0x32>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8014ba6:	0022      	movs	r2, r4
 8014ba8:	0028      	movs	r0, r5
 8014baa:	9900      	ldr	r1, [sp, #0]
 8014bac:	f7ff fc0e 	bl	80143cc <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	d0e9      	beq.n	8014b88 <create_chain+0xc2>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014bb4:	2801      	cmp	r0, #1
 8014bb6:	d19e      	bne.n	8014af6 <create_chain+0x30>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8014bb8:	2401      	movs	r4, #1
 8014bba:	4264      	negs	r4, r4
 8014bbc:	e79c      	b.n	8014af8 <create_chain+0x32>

08014bbe <dir_next>:
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8014bbe:	2380      	movs	r3, #128	@ 0x80
{
 8014bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014bc2:	6907      	ldr	r7, [r0, #16]
{
 8014bc4:	0004      	movs	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014bc6:	3720      	adds	r7, #32
	FATFS *fs = dp->obj.fs;
 8014bc8:	6806      	ldr	r6, [r0, #0]
{
 8014bca:	9101      	str	r1, [sp, #4]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8014bcc:	039b      	lsls	r3, r3, #14
 8014bce:	429f      	cmp	r7, r3
 8014bd0:	d301      	bcc.n	8014bd6 <dir_next+0x18>
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8014bd6:	69a3      	ldr	r3, [r4, #24]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d00f      	beq.n	8014bfc <dir_next+0x3e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014bdc:	053a      	lsls	r2, r7, #20
 8014bde:	0d11      	lsrs	r1, r2, #20
 8014be0:	9100      	str	r1, [sp, #0]
 8014be2:	2a00      	cmp	r2, #0
 8014be4:	d13b      	bne.n	8014c5e <dir_next+0xa0>
		if (dp->clust == 0) {	/* Static table */
 8014be6:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
 8014be8:	3301      	adds	r3, #1
 8014bea:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
 8014bec:	2900      	cmp	r1, #0
 8014bee:	d107      	bne.n	8014c00 <dir_next+0x42>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014bf0:	8932      	ldrh	r2, [r6, #8]
 8014bf2:	097b      	lsrs	r3, r7, #5
 8014bf4:	4293      	cmp	r3, r2
 8014bf6:	d332      	bcc.n	8014c5e <dir_next+0xa0>
				dp->sect = 0; return FR_NO_FILE;
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8014bfc:	2004      	movs	r0, #4
}
 8014bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8014c00:	8973      	ldrh	r3, [r6, #10]
 8014c02:	0b3a      	lsrs	r2, r7, #12
 8014c04:	3b01      	subs	r3, #1
 8014c06:	421a      	tst	r2, r3
 8014c08:	d129      	bne.n	8014c5e <dir_next+0xa0>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8014c0a:	0030      	movs	r0, r6
 8014c0c:	f7ff fe80 	bl	8014910 <get_fat.isra.0>
 8014c10:	0005      	movs	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8014c12:	2801      	cmp	r0, #1
 8014c14:	d801      	bhi.n	8014c1a <dir_next+0x5c>
 8014c16:	2002      	movs	r0, #2
 8014c18:	e7f1      	b.n	8014bfe <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014c1a:	1c43      	adds	r3, r0, #1
 8014c1c:	d101      	bne.n	8014c22 <dir_next+0x64>
 8014c1e:	2001      	movs	r0, #1
 8014c20:	e7ed      	b.n	8014bfe <dir_next+0x40>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8014c22:	6973      	ldr	r3, [r6, #20]
 8014c24:	4283      	cmp	r3, r0
 8014c26:	d814      	bhi.n	8014c52 <dir_next+0x94>
					if (!stretch) {								/* If no stretch, report EOT */
 8014c28:	9b01      	ldr	r3, [sp, #4]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d0e4      	beq.n	8014bf8 <dir_next+0x3a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014c2e:	0020      	movs	r0, r4
 8014c30:	6961      	ldr	r1, [r4, #20]
 8014c32:	f7ff ff48 	bl	8014ac6 <create_chain>
 8014c36:	0005      	movs	r5, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014c38:	2007      	movs	r0, #7
 8014c3a:	2d00      	cmp	r5, #0
 8014c3c:	d0df      	beq.n	8014bfe <dir_next+0x40>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014c3e:	2d01      	cmp	r5, #1
 8014c40:	d0e9      	beq.n	8014c16 <dir_next+0x58>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014c42:	1c6b      	adds	r3, r5, #1
 8014c44:	d0eb      	beq.n	8014c1e <dir_next+0x60>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8014c46:	0029      	movs	r1, r5
 8014c48:	0030      	movs	r0, r6
 8014c4a:	f7ff fc47 	bl	80144dc <dir_clear>
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	d1e5      	bne.n	8014c1e <dir_next+0x60>
				dp->sect = clst2sect(fs, clst);
 8014c52:	0029      	movs	r1, r5
 8014c54:	0030      	movs	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 8014c56:	6165      	str	r5, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 8014c58:	f7ff fab7 	bl	80141ca <clst2sect>
 8014c5c:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014c5e:	9b00      	ldr	r3, [sp, #0]
 8014c60:	3630      	adds	r6, #48	@ 0x30
 8014c62:	18f6      	adds	r6, r6, r3
	return FR_OK;
 8014c64:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8014c66:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014c68:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 8014c6a:	e7c8      	b.n	8014bfe <dir_next+0x40>

08014c6c <follow_path>:
{
 8014c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c6e:	0005      	movs	r5, r0
 8014c70:	000f      	movs	r7, r1
	FATFS *fs = dp->obj.fs;
 8014c72:	6803      	ldr	r3, [r0, #0]
{
 8014c74:	b087      	sub	sp, #28
	FATFS *fs = dp->obj.fs;
 8014c76:	9304      	str	r3, [sp, #16]
		while (IsSeparator(*path)) path++;	/* Strip heading separators */
 8014c78:	783b      	ldrb	r3, [r7, #0]
 8014c7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8014c7c:	d011      	beq.n	8014ca2 <follow_path+0x36>
 8014c7e:	2b5c      	cmp	r3, #92	@ 0x5c
 8014c80:	d00f      	beq.n	8014ca2 <follow_path+0x36>
		dp->obj.sclust = 0;					/* Start at the root directory */
 8014c82:	2300      	movs	r3, #0
 8014c84:	60ab      	str	r3, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014c86:	783b      	ldrb	r3, [r7, #0]
 8014c88:	2b1f      	cmp	r3, #31
 8014c8a:	d840      	bhi.n	8014d0e <follow_path+0xa2>
		dp->fn[NSFLAG] = NS_NONAME;
 8014c8c:	002b      	movs	r3, r5
 8014c8e:	2280      	movs	r2, #128	@ 0x80
 8014c90:	332b      	adds	r3, #43	@ 0x2b
		res = dir_sdi(dp, 0);
 8014c92:	0028      	movs	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8014c94:	701a      	strb	r2, [r3, #0]
		res = dir_sdi(dp, 0);
 8014c96:	f7ff fe9f 	bl	80149d8 <dir_sdi.constprop.0>
 8014c9a:	0004      	movs	r4, r0
}
 8014c9c:	0020      	movs	r0, r4
 8014c9e:	b007      	add	sp, #28
 8014ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (IsSeparator(*path)) path++;	/* Strip heading separators */
 8014ca2:	3701      	adds	r7, #1
 8014ca4:	e7e8      	b.n	8014c78 <follow_path+0xc>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separators */
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	e04a      	b.n	8014d40 <follow_path+0xd4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8014caa:	9b03      	ldr	r3, [sp, #12]
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8014cac:	2c2e      	cmp	r4, #46	@ 0x2e
 8014cae:	d100      	bne.n	8014cb2 <follow_path+0x46>
 8014cb0:	e093      	b.n	8014dda <follow_path+0x16e>
 8014cb2:	42b3      	cmp	r3, r6
 8014cb4:	d800      	bhi.n	8014cb8 <follow_path+0x4c>
 8014cb6:	e08e      	b.n	8014dd6 <follow_path+0x16a>
		if (c >= 0x80) {				/* Is SBC extended character? */
 8014cb8:	b263      	sxtb	r3, r4
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	da03      	bge.n	8014cc6 <follow_path+0x5a>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8014cbe:	237f      	movs	r3, #127	@ 0x7f
 8014cc0:	4a49      	ldr	r2, [pc, #292]	@ (8014de8 <follow_path+0x17c>)
 8014cc2:	4023      	ands	r3, r4
 8014cc4:	5cd4      	ldrb	r4, [r2, r3]
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014cc6:	0021      	movs	r1, r4
 8014cc8:	4848      	ldr	r0, [pc, #288]	@ (8014dec <follow_path+0x180>)
 8014cca:	f005 fd58 	bl	801a77e <strchr>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d000      	beq.n	8014cd4 <follow_path+0x68>
 8014cd2:	e080      	b.n	8014dd6 <follow_path+0x16a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014cd4:	0023      	movs	r3, r4
 8014cd6:	3b61      	subs	r3, #97	@ 0x61
 8014cd8:	2b19      	cmp	r3, #25
 8014cda:	d801      	bhi.n	8014ce0 <follow_path+0x74>
 8014cdc:	3c20      	subs	r4, #32
 8014cde:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 8014ce0:	9b02      	ldr	r3, [sp, #8]
 8014ce2:	559c      	strb	r4, [r3, r6]
 8014ce4:	3601      	adds	r6, #1
 8014ce6:	9b01      	ldr	r3, [sp, #4]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	9301      	str	r3, [sp, #4]
 8014cec:	e01e      	b.n	8014d2c <follow_path+0xc0>
			if (ns & NS_LAST) break;		/* If last segment matched, the function completed */
 8014cee:	2e00      	cmp	r6, #0
 8014cf0:	d1d4      	bne.n	8014c9c <follow_path+0x30>
			if (!(dp->obj.attr & AM_DIR)) {
 8014cf2:	9b01      	ldr	r3, [sp, #4]
 8014cf4:	06db      	lsls	r3, r3, #27
 8014cf6:	d56c      	bpl.n	8014dd2 <follow_path+0x166>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014cf8:	692b      	ldr	r3, [r5, #16]
 8014cfa:	9904      	ldr	r1, [sp, #16]
 8014cfc:	051b      	lsls	r3, r3, #20
 8014cfe:	0d1b      	lsrs	r3, r3, #20
 8014d00:	3130      	adds	r1, #48	@ 0x30
 8014d02:	18c9      	adds	r1, r1, r3
 8014d04:	9b04      	ldr	r3, [sp, #16]
 8014d06:	7818      	ldrb	r0, [r3, #0]
 8014d08:	f7ff fdf3 	bl	80148f2 <ld_clust.isra.0>
 8014d0c:	60a8      	str	r0, [r5, #8]
	p = *path; sfn = dp->fn;
 8014d0e:	002b      	movs	r3, r5
 8014d10:	3320      	adds	r3, #32
	memset(sfn, ' ', 11);
 8014d12:	0018      	movs	r0, r3
 8014d14:	220b      	movs	r2, #11
 8014d16:	2120      	movs	r1, #32
	p = *path; sfn = dp->fn;
 8014d18:	9302      	str	r3, [sp, #8]
	memset(sfn, ' ', 11);
 8014d1a:	f005 fd1b 	bl	801a754 <memset>
	si = i = 0; ni = 8;
 8014d1e:	2308      	movs	r3, #8
 8014d20:	2600      	movs	r6, #0
 8014d22:	9303      	str	r3, [sp, #12]
		c = (BYTE)p[si++];				/* Get a byte */
 8014d24:	3b07      	subs	r3, #7
 8014d26:	1bdb      	subs	r3, r3, r7
	memset(sfn, ' ', 11);
 8014d28:	9701      	str	r7, [sp, #4]
		c = (BYTE)p[si++];				/* Get a byte */
 8014d2a:	9305      	str	r3, [sp, #20]
 8014d2c:	9a01      	ldr	r2, [sp, #4]
 8014d2e:	9b05      	ldr	r3, [sp, #20]
 8014d30:	7814      	ldrb	r4, [r2, #0]
 8014d32:	189b      	adds	r3, r3, r2
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014d34:	2c20      	cmp	r4, #32
 8014d36:	d908      	bls.n	8014d4a <follow_path+0xde>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8014d38:	2c2f      	cmp	r4, #47	@ 0x2f
 8014d3a:	d001      	beq.n	8014d40 <follow_path+0xd4>
 8014d3c:	2c5c      	cmp	r4, #92	@ 0x5c
 8014d3e:	d1b4      	bne.n	8014caa <follow_path+0x3e>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separators */
 8014d40:	5cfa      	ldrb	r2, [r7, r3]
 8014d42:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d44:	d0af      	beq.n	8014ca6 <follow_path+0x3a>
 8014d46:	2a5c      	cmp	r2, #92	@ 0x5c
 8014d48:	d0ad      	beq.n	8014ca6 <follow_path+0x3a>
	*path = &p[si];						/* Return pointer to the next segment */
 8014d4a:	18ff      	adds	r7, r7, r3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014d4c:	2e00      	cmp	r6, #0
 8014d4e:	d042      	beq.n	8014dd6 <follow_path+0x16a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014d50:	1c6b      	adds	r3, r5, #1
 8014d52:	7fda      	ldrb	r2, [r3, #31]
 8014d54:	2ae5      	cmp	r2, #229	@ 0xe5
 8014d56:	d101      	bne.n	8014d5c <follow_path+0xf0>
 8014d58:	3ae0      	subs	r2, #224	@ 0xe0
 8014d5a:	77da      	strb	r2, [r3, #31]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8014d5c:	2604      	movs	r6, #4
 8014d5e:	2c20      	cmp	r4, #32
 8014d60:	d905      	bls.n	8014d6e <follow_path+0x102>
 8014d62:	2600      	movs	r6, #0
 8014d64:	2220      	movs	r2, #32
 8014d66:	783b      	ldrb	r3, [r7, #0]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	4176      	adcs	r6, r6
 8014d6c:	00b6      	lsls	r6, r6, #2
 8014d6e:	002b      	movs	r3, r5
 8014d70:	332b      	adds	r3, #43	@ 0x2b
 8014d72:	701e      	strb	r6, [r3, #0]
	FATFS *fs = dp->obj.fs;
 8014d74:	682b      	ldr	r3, [r5, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014d76:	0028      	movs	r0, r5
	FATFS *fs = dp->obj.fs;
 8014d78:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014d7a:	f7ff fe2d 	bl	80149d8 <dir_sdi.constprop.0>
 8014d7e:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
 8014d80:	d120      	bne.n	8014dc4 <follow_path+0x158>
		res = move_window(fs, dp->sect);
 8014d82:	69a9      	ldr	r1, [r5, #24]
 8014d84:	9803      	ldr	r0, [sp, #12]
 8014d86:	f7ff fa8e 	bl	80142a6 <move_window>
 8014d8a:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
 8014d8c:	d11a      	bne.n	8014dc4 <follow_path+0x158>
		et = dp->dir[DIR_Name];		/* Entry type */
 8014d8e:	69e8      	ldr	r0, [r5, #28]
		if (et == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8014d90:	7803      	ldrb	r3, [r0, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d019      	beq.n	8014dca <follow_path+0x15e>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014d96:	7ac3      	ldrb	r3, [r0, #11]
 8014d98:	3408      	adds	r4, #8
 8014d9a:	9301      	str	r3, [sp, #4]
 8014d9c:	233f      	movs	r3, #63	@ 0x3f
 8014d9e:	9a01      	ldr	r2, [sp, #4]
 8014da0:	4013      	ands	r3, r2
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014da2:	2208      	movs	r2, #8
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014da4:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014da6:	7ac3      	ldrb	r3, [r0, #11]
 8014da8:	401c      	ands	r4, r3
 8014daa:	4213      	tst	r3, r2
 8014dac:	d105      	bne.n	8014dba <follow_path+0x14e>
 8014dae:	9902      	ldr	r1, [sp, #8]
 8014db0:	3203      	adds	r2, #3
 8014db2:	f005 fcc1 	bl	801a738 <memcmp>
 8014db6:	2800      	cmp	r0, #0
 8014db8:	d099      	beq.n	8014cee <follow_path+0x82>
		res = dir_next(dp, 0);	/* Next entry */
 8014dba:	2100      	movs	r1, #0
 8014dbc:	0028      	movs	r0, r5
 8014dbe:	f7ff fefe 	bl	8014bbe <dir_next>
 8014dc2:	e7dc      	b.n	8014d7e <follow_path+0x112>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014dc4:	2c04      	cmp	r4, #4
 8014dc6:	d000      	beq.n	8014dca <follow_path+0x15e>
 8014dc8:	e768      	b.n	8014c9c <follow_path+0x30>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014dca:	2404      	movs	r4, #4
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014dcc:	2e00      	cmp	r6, #0
 8014dce:	d000      	beq.n	8014dd2 <follow_path+0x166>
 8014dd0:	e764      	b.n	8014c9c <follow_path+0x30>
 8014dd2:	2405      	movs	r4, #5
 8014dd4:	e762      	b.n	8014c9c <follow_path+0x30>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014dd6:	2406      	movs	r4, #6
	return res;
 8014dd8:	e760      	b.n	8014c9c <follow_path+0x30>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8014dda:	2b0b      	cmp	r3, #11
 8014ddc:	d0fb      	beq.n	8014dd6 <follow_path+0x16a>
			i = 8; ni = 11;				/* Enter file extension field */
 8014dde:	230b      	movs	r3, #11
 8014de0:	2608      	movs	r6, #8
 8014de2:	9303      	str	r3, [sp, #12]
 8014de4:	e77f      	b.n	8014ce6 <follow_path+0x7a>
 8014de6:	46c0      	nop			@ (mov r8, r8)
 8014de8:	08020736 	.word	0x08020736
 8014dec:	0802020f 	.word	0x0802020f

08014df0 <dir_read>:
{
 8014df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 8014df2:	6803      	ldr	r3, [r0, #0]
{
 8014df4:	0004      	movs	r4, r0
 8014df6:	000d      	movs	r5, r1
	FRESULT res = FR_NO_FILE;
 8014df8:	2004      	movs	r0, #4
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014dfa:	263f      	movs	r6, #63	@ 0x3f
			if (et != DDEM && et != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014dfc:	2720      	movs	r7, #32
	FATFS *fs = dp->obj.fs;
 8014dfe:	9301      	str	r3, [sp, #4]
	while (dp->sect) {
 8014e00:	69a1      	ldr	r1, [r4, #24]
 8014e02:	2900      	cmp	r1, #0
 8014e04:	d103      	bne.n	8014e0e <dir_read+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014e06:	2800      	cmp	r0, #0
 8014e08:	d122      	bne.n	8014e50 <dir_read+0x60>
 8014e0a:	2000      	movs	r0, #0
}
 8014e0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		res = move_window(fs, dp->sect);
 8014e0e:	9801      	ldr	r0, [sp, #4]
 8014e10:	f7ff fa49 	bl	80142a6 <move_window>
		if (res != FR_OK) break;
 8014e14:	2800      	cmp	r0, #0
 8014e16:	d118      	bne.n	8014e4a <dir_read+0x5a>
		et = dp->dir[DIR_Name];	/* Test for the entry type */
 8014e18:	69e3      	ldr	r3, [r4, #28]
 8014e1a:	781a      	ldrb	r2, [r3, #0]
		if (et == 0) {
 8014e1c:	2a00      	cmp	r2, #0
 8014e1e:	d017      	beq.n	8014e50 <dir_read+0x60>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014e20:	7adb      	ldrb	r3, [r3, #11]
 8014e22:	4033      	ands	r3, r6
 8014e24:	71a3      	strb	r3, [r4, #6]
			if (et != DDEM && et != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014e26:	2ae5      	cmp	r2, #229	@ 0xe5
 8014e28:	d009      	beq.n	8014e3e <dir_read+0x4e>
 8014e2a:	2a2e      	cmp	r2, #46	@ 0x2e
 8014e2c:	d007      	beq.n	8014e3e <dir_read+0x4e>
 8014e2e:	2b0f      	cmp	r3, #15
 8014e30:	d005      	beq.n	8014e3e <dir_read+0x4e>
 8014e32:	43bb      	bics	r3, r7
 8014e34:	3b08      	subs	r3, #8
 8014e36:	425a      	negs	r2, r3
 8014e38:	4153      	adcs	r3, r2
 8014e3a:	42ab      	cmp	r3, r5
 8014e3c:	d0e5      	beq.n	8014e0a <dir_read+0x1a>
		res = dir_next(dp, 0);		/* Next entry */
 8014e3e:	2100      	movs	r1, #0
 8014e40:	0020      	movs	r0, r4
 8014e42:	f7ff febc 	bl	8014bbe <dir_next>
		if (res != FR_OK) break;
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d0da      	beq.n	8014e00 <dir_read+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	61a3      	str	r3, [r4, #24]
	return res;
 8014e4e:	e7dd      	b.n	8014e0c <dir_read+0x1c>
 8014e50:	2004      	movs	r0, #4
 8014e52:	e7fa      	b.n	8014e4a <dir_read+0x5a>

08014e54 <dir_alloc.constprop.0>:
static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
 8014e54:	b570      	push	{r4, r5, r6, lr}
 8014e56:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
 8014e58:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);
 8014e5a:	f7ff fdbd 	bl	80149d8 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8014e5e:	2800      	cmp	r0, #0
 8014e60:	d110      	bne.n	8014e84 <dir_alloc.constprop.0+0x30>
			res = move_window(fs, dp->sect);
 8014e62:	0028      	movs	r0, r5
 8014e64:	69a1      	ldr	r1, [r4, #24]
 8014e66:	f7ff fa1e 	bl	80142a6 <move_window>
			if (res != FR_OK) break;
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	d10a      	bne.n	8014e84 <dir_alloc.constprop.0+0x30>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8014e6e:	69e3      	ldr	r3, [r4, #28]
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	2be5      	cmp	r3, #229	@ 0xe5
 8014e74:	d009      	beq.n	8014e8a <dir_alloc.constprop.0+0x36>
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d007      	beq.n	8014e8a <dir_alloc.constprop.0+0x36>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8014e7a:	2101      	movs	r1, #1
 8014e7c:	0020      	movs	r0, r4
 8014e7e:	f7ff fe9e 	bl	8014bbe <dir_next>
		} while (res == FR_OK);
 8014e82:	e7ec      	b.n	8014e5e <dir_alloc.constprop.0+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014e84:	2804      	cmp	r0, #4
 8014e86:	d100      	bne.n	8014e8a <dir_alloc.constprop.0+0x36>
 8014e88:	3003      	adds	r0, #3
}
 8014e8a:	bd70      	pop	{r4, r5, r6, pc}

08014e8c <dir_register>:
{
 8014e8c:	b570      	push	{r4, r5, r6, lr}
 8014e8e:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
 8014e90:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8014e92:	f7ff ffdf 	bl	8014e54 <dir_alloc.constprop.0>
 8014e96:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8014e98:	d112      	bne.n	8014ec0 <dir_register+0x34>
		res = move_window(fs, dp->sect);
 8014e9a:	0030      	movs	r0, r6
 8014e9c:	69a1      	ldr	r1, [r4, #24]
 8014e9e:	f7ff fa02 	bl	80142a6 <move_window>
 8014ea2:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {
 8014ea4:	d10c      	bne.n	8014ec0 <dir_register+0x34>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014ea6:	2220      	movs	r2, #32
 8014ea8:	0029      	movs	r1, r5
 8014eaa:	69e0      	ldr	r0, [r4, #28]
 8014eac:	f005 fc52 	bl	801a754 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014eb0:	0021      	movs	r1, r4
 8014eb2:	220b      	movs	r2, #11
 8014eb4:	69e0      	ldr	r0, [r4, #28]
 8014eb6:	3120      	adds	r1, #32
 8014eb8:	f005 fd16 	bl	801a8e8 <memcpy>
			fs->wflag = 1;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	7133      	strb	r3, [r6, #4]
}
 8014ec0:	0028      	movs	r0, r5
 8014ec2:	bd70      	pop	{r4, r5, r6, pc}

08014ec4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8014ec4:	b530      	push	{r4, r5, lr}
 8014ec6:	b085      	sub	sp, #20
 8014ec8:	9001      	str	r0, [sp, #4]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8014eca:	a803      	add	r0, sp, #12
{
 8014ecc:	0014      	movs	r4, r2
 8014ece:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8014ed0:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8014ed2:	f7ff f986 	bl	80141e2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ed6:	2800      	cmp	r0, #0
 8014ed8:	db19      	blt.n	8014f0e <f_mount+0x4a>

	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8014eda:	490e      	ldr	r1, [pc, #56]	@ (8014f14 <f_mount+0x50>)
 8014edc:	0082      	lsls	r2, r0, #2
 8014ede:	5853      	ldr	r3, [r2, r1]
	if (cfs) {					/* Unregister current filesystem object */
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d002      	beq.n	8014eea <f_mount+0x26>
		FatFs[vol] = 0;
 8014ee4:	2500      	movs	r5, #0
 8014ee6:	5055      	str	r5, [r2, r1]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8014ee8:	701d      	strb	r5, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8014eea:	9b01      	ldr	r3, [sp, #4]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d003      	beq.n	8014ef8 <f_mount+0x34>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8014ef0:	7058      	strb	r0, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8014ef2:	2000      	movs	r0, #0
		FatFs[vol] = fs;		/* Register it */
 8014ef4:	508b      	str	r3, [r1, r2]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8014ef6:	7018      	strb	r0, [r3, #0]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8014ef8:	2c00      	cmp	r4, #0
 8014efa:	d005      	beq.n	8014f08 <f_mount+0x44>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume in this function */
 8014efc:	2200      	movs	r2, #0
 8014efe:	4668      	mov	r0, sp
 8014f00:	a901      	add	r1, sp, #4
 8014f02:	f7ff fb73 	bl	80145ec <mount_volume>
 8014f06:	0004      	movs	r4, r0
	LEAVE_FF(fs, res);
}
 8014f08:	0020      	movs	r0, r4
 8014f0a:	b005      	add	sp, #20
 8014f0c:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8014f0e:	240b      	movs	r4, #11
 8014f10:	e7fa      	b.n	8014f08 <f_mount+0x44>
 8014f12:	46c0      	nop			@ (mov r8, r8)
 8014f14:	200030dc 	.word	0x200030dc

08014f18 <f_open>:
	DIR dj;
	FATFS *fs;
	DEF_NAMEBUFF


	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8014f18:	2309      	movs	r3, #9
{
 8014f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f1c:	b091      	sub	sp, #68	@ 0x44
 8014f1e:	0004      	movs	r4, r0
 8014f20:	0015      	movs	r5, r2
 8014f22:	9103      	str	r1, [sp, #12]
	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8014f24:	9302      	str	r3, [sp, #8]
 8014f26:	2800      	cmp	r0, #0
 8014f28:	d100      	bne.n	8014f2c <f_open+0x14>
 8014f2a:	e0c0      	b.n	80150ae <f_open+0x196>

	/* Get logical drive number and mount the volume if needed */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8014f2c:	3336      	adds	r3, #54	@ 0x36
 8014f2e:	4013      	ands	r3, r2
	res = mount_volume(&path, &fs, mode);
 8014f30:	001a      	movs	r2, r3
 8014f32:	a904      	add	r1, sp, #16
 8014f34:	a803      	add	r0, sp, #12
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8014f36:	9301      	str	r3, [sp, #4]
	res = mount_volume(&path, &fs, mode);
 8014f38:	f7ff fb58 	bl	80145ec <mount_volume>
 8014f3c:	9002      	str	r0, [sp, #8]

	if (res == FR_OK) {
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	d000      	beq.n	8014f44 <f_open+0x2c>
 8014f42:	e0a4      	b.n	801508e <f_open+0x176>
		fp->obj.fs = fs;
 8014f44:	9e04      	ldr	r6, [sp, #16]
		dj.obj.fs = fs;
		INIT_NAMEBUFF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014f46:	9903      	ldr	r1, [sp, #12]
		fp->obj.fs = fs;
 8014f48:	6026      	str	r6, [r4, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014f4a:	a805      	add	r0, sp, #20
		dj.obj.fs = fs;
 8014f4c:	9605      	str	r6, [sp, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014f4e:	f7ff fe8d 	bl	8014c6c <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d106      	bne.n	8014f64 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014f56:	2337      	movs	r3, #55	@ 0x37
 8014f58:	aa02      	add	r2, sp, #8
 8014f5a:	189b      	adds	r3, r3, r2
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014f60:	d900      	bls.n	8014f64 <f_open+0x4c>
				res = FR_INVALID_NAME;
 8014f62:	3006      	adds	r0, #6
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014f64:	231c      	movs	r3, #28
 8014f66:	421d      	tst	r5, r3
 8014f68:	d052      	beq.n	8015010 <f_open+0xf8>
			if (res != FR_OK) {					/* No file, create new */
 8014f6a:	2800      	cmp	r0, #0
 8014f6c:	d047      	beq.n	8014ffe <f_open+0xe6>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014f6e:	2804      	cmp	r0, #4
 8014f70:	d000      	beq.n	8014f74 <f_open+0x5c>
 8014f72:	e08c      	b.n	801508e <f_open+0x176>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8014f74:	a805      	add	r0, sp, #20
 8014f76:	f7ff ff89 	bl	8014e8c <dir_register>
					res = FR_EXIST;				/* Cannot create as new file */
				} else {
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8014f7a:	2800      	cmp	r0, #0
 8014f7c:	d000      	beq.n	8014f80 <f_open+0x68>
 8014f7e:	e086      	b.n	801508e <f_open+0x176>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014f80:	2308      	movs	r3, #8
 8014f82:	9a01      	ldr	r2, [sp, #4]
 8014f84:	431a      	orrs	r2, r3
 8014f86:	9201      	str	r2, [sp, #4]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8014f88:	9b01      	ldr	r3, [sp, #4]
 8014f8a:	071b      	lsls	r3, r3, #28
 8014f8c:	d54a      	bpl.n	8015024 <f_open+0x10c>
				DWORD tm = GET_FATTIME();
 8014f8e:	f7ff f905 	bl	801419c <get_fattime>
 8014f92:	0005      	movs	r5, r0
				} else
#endif
				{
					DWORD cl;
					/* Set FAT directory entry initial state */
					st_32(dj.dir + DIR_CrtTime, tm);	/* Set created time */
 8014f94:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8014f96:	0029      	movs	r1, r5
 8014f98:	300e      	adds	r0, #14
 8014f9a:	f7ff f90e 	bl	80141ba <st_32>
					st_32(dj.dir + DIR_ModTime, tm);	/* Set modified time (tmp setting) */
 8014f9e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8014fa0:	0029      	movs	r1, r5
 8014fa2:	3016      	adds	r0, #22
 8014fa4:	f7ff f909 	bl	80141ba <st_32>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8014fa8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8014faa:	7830      	ldrb	r0, [r6, #0]
 8014fac:	0029      	movs	r1, r5
 8014fae:	f7ff fca0 	bl	80148f2 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014fb2:	2320      	movs	r3, #32
 8014fb4:	72eb      	strb	r3, [r5, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014fb6:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8014fb8:	0007      	movs	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014fba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014fbc:	0030      	movs	r0, r6
 8014fbe:	f7ff f966 	bl	801428e <st_clust>
	*ptr++ = (BYTE)val; val >>= 8;
 8014fc2:	2200      	movs	r2, #0
					st_32(dj.dir + DIR_FileSize, 0);
 8014fc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8014fc6:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8014fc8:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8014fca:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8014fcc:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8014fce:	2301      	movs	r3, #1
 8014fd0:	7133      	strb	r3, [r6, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8014fd2:	4297      	cmp	r7, r2
 8014fd4:	d00e      	beq.n	8014ff4 <f_open+0xdc>
						LBA_t sc = fs->winsect;

						res = remove_chain(&dj.obj, cl, 0);
 8014fd6:	0039      	movs	r1, r7
 8014fd8:	a805      	add	r0, sp, #20
						LBA_t sc = fs->winsect;
 8014fda:	69f5      	ldr	r5, [r6, #28]
						res = remove_chain(&dj.obj, cl, 0);
 8014fdc:	f7ff fd3a 	bl	8014a54 <remove_chain>
						if (res == FR_OK) {
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d154      	bne.n	801508e <f_open+0x176>
							res = move_window(fs, sc);
 8014fe4:	0029      	movs	r1, r5
 8014fe6:	0030      	movs	r0, r6
 8014fe8:	f7ff f95d 	bl	80142a6 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014fec:	3f01      	subs	r7, #1
 8014fee:	60f7      	str	r7, [r6, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d14c      	bne.n	801508e <f_open+0x176>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8014ff4:	2340      	movs	r3, #64	@ 0x40
 8014ff6:	9a01      	ldr	r2, [sp, #4]
 8014ff8:	431a      	orrs	r2, r3
 8014ffa:	9201      	str	r2, [sp, #4]
 8014ffc:	e012      	b.n	8015024 <f_open+0x10c>
				if (mode & FA_CREATE_NEW) {
 8014ffe:	076d      	lsls	r5, r5, #29
 8015000:	d45c      	bmi.n	80150bc <f_open+0x1a4>
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
 8015002:	ab02      	add	r3, sp, #8
 8015004:	7c9a      	ldrb	r2, [r3, #18]
 8015006:	2311      	movs	r3, #17
 8015008:	421a      	tst	r2, r3
 801500a:	d0bd      	beq.n	8014f88 <f_open+0x70>
						res = FR_DENIED;
 801500c:	2007      	movs	r0, #7
 801500e:	e03e      	b.n	801508e <f_open+0x176>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8015010:	2800      	cmp	r0, #0
 8015012:	d13c      	bne.n	801508e <f_open+0x176>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8015014:	ab02      	add	r3, sp, #8
 8015016:	7c9b      	ldrb	r3, [r3, #18]
 8015018:	06da      	lsls	r2, r3, #27
 801501a:	d451      	bmi.n	80150c0 <f_open+0x1a8>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 801501c:	07ad      	lsls	r5, r5, #30
 801501e:	d501      	bpl.n	8015024 <f_open+0x10c>
 8015020:	07db      	lsls	r3, r3, #31
 8015022:	d4f3      	bmi.n	801500c <f_open+0xf4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015024:	69f3      	ldr	r3, [r6, #28]
			fp->dir_ptr = dj.dir;
 8015026:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015028:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
 801502a:	6265      	str	r5, [r4, #36]	@ 0x24
			if (fs->fs_type == FS_EXFAT) {
				init_alloc_info(&fp->obj, &dj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801502c:	7830      	ldrb	r0, [r6, #0]
 801502e:	0029      	movs	r1, r5
 8015030:	f7ff fc5f 	bl	80148f2 <ld_clust.isra.0>
 8015034:	60a0      	str	r0, [r4, #8]
 8015036:	0007      	movs	r7, r0
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8015038:	0028      	movs	r0, r5
 801503a:	301c      	adds	r0, #28
 801503c:	f7ff f8b2 	bl	80141a4 <ld_32>
 8015040:	60e0      	str	r0, [r4, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.id = fs->id;	/* Set current volume mount ID */
 8015042:	88f3      	ldrh	r3, [r6, #6]
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8015044:	0005      	movs	r5, r0
			fp->obj.id = fs->id;	/* Set current volume mount ID */
 8015046:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;	/* Set file access mode */
 8015048:	9b01      	ldr	r3, [sp, #4]
 801504a:	7423      	strb	r3, [r4, #16]
			fp->err = 0;		/* Clear error flag */
 801504c:	2300      	movs	r3, #0
 801504e:	7463      	strb	r3, [r4, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8015050:	61e3      	str	r3, [r4, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8015052:	6163      	str	r3, [r4, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015054:	9b01      	ldr	r3, [sp, #4]
 8015056:	069b      	lsls	r3, r3, #26
 8015058:	d529      	bpl.n	80150ae <f_open+0x196>
 801505a:	2800      	cmp	r0, #0
 801505c:	d027      	beq.n	80150ae <f_open+0x196>
				DWORD bcs, clst;
				FSIZE_t ofs;

				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801505e:	6160      	str	r0, [r4, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015060:	8973      	ldrh	r3, [r6, #10]
 8015062:	031b      	lsls	r3, r3, #12
 8015064:	9301      	str	r3, [sp, #4]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015066:	4298      	cmp	r0, r3
 8015068:	d915      	bls.n	8015096 <f_open+0x17e>
					clst = get_fat(&fp->obj, clst);
 801506a:	0039      	movs	r1, r7
 801506c:	6820      	ldr	r0, [r4, #0]
 801506e:	f7ff fc4f 	bl	8014910 <get_fat.isra.0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015072:	9b01      	ldr	r3, [sp, #4]
					clst = get_fat(&fp->obj, clst);
 8015074:	0007      	movs	r7, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015076:	1aed      	subs	r5, r5, r3
					if (clst <= 1) res = FR_INT_ERR;
 8015078:	2801      	cmp	r0, #1
 801507a:	d91b      	bls.n	80150b4 <f_open+0x19c>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801507c:	1c43      	adds	r3, r0, #1
 801507e:	d01b      	beq.n	80150b8 <f_open+0x1a0>
 8015080:	9b01      	ldr	r3, [sp, #4]
 8015082:	42ab      	cmp	r3, r5
 8015084:	d3f1      	bcc.n	801506a <f_open+0x152>
 8015086:	2000      	movs	r0, #0
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8015088:	61a7      	str	r7, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801508a:	2800      	cmp	r0, #0
 801508c:	d004      	beq.n	8015098 <f_open+0x180>
		}

		FREE_NAMEBUFF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801508e:	2300      	movs	r3, #0
 8015090:	9002      	str	r0, [sp, #8]
 8015092:	6023      	str	r3, [r4, #0]
 8015094:	e00b      	b.n	80150ae <f_open+0x196>
				fp->clust = clst;
 8015096:	61a7      	str	r7, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015098:	052b      	lsls	r3, r5, #20
 801509a:	d008      	beq.n	80150ae <f_open+0x196>
					LBA_t sec = clst2sect(fs, clst);
 801509c:	0039      	movs	r1, r7
 801509e:	0030      	movs	r0, r6
 80150a0:	f7ff f893 	bl	80141ca <clst2sect>
					if (sec == 0) {
 80150a4:	2800      	cmp	r0, #0
 80150a6:	d00d      	beq.n	80150c4 <f_open+0x1ac>
						fp->sect = sec + (DWORD)(ofs / SS(fs));
 80150a8:	0b2d      	lsrs	r5, r5, #12
 80150aa:	1828      	adds	r0, r5, r0
 80150ac:	61e0      	str	r0, [r4, #28]

	LEAVE_FF(fs, res);
}
 80150ae:	9802      	ldr	r0, [sp, #8]
 80150b0:	b011      	add	sp, #68	@ 0x44
 80150b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80150b4:	2002      	movs	r0, #2
 80150b6:	e7e7      	b.n	8015088 <f_open+0x170>
 80150b8:	2001      	movs	r0, #1
 80150ba:	e7e5      	b.n	8015088 <f_open+0x170>
					res = FR_EXIST;				/* Cannot create as new file */
 80150bc:	2008      	movs	r0, #8
 80150be:	e7e6      	b.n	801508e <f_open+0x176>
					res = FR_NO_FILE;
 80150c0:	2004      	movs	r0, #4
 80150c2:	e7e4      	b.n	801508e <f_open+0x176>
						res = FR_INT_ERR;
 80150c4:	2002      	movs	r0, #2
 80150c6:	e7e2      	b.n	801508e <f_open+0x176>

080150c8 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 80150c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ca:	b089      	sub	sp, #36	@ 0x24
 80150cc:	9305      	str	r3, [sp, #20]
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80150ce:	2300      	movs	r3, #0
{
 80150d0:	0017      	movs	r7, r2
	*bw = 0;	/* Clear write byte counter */
 80150d2:	9a05      	ldr	r2, [sp, #20]
{
 80150d4:	9102      	str	r1, [sp, #8]
	*bw = 0;	/* Clear write byte counter */
 80150d6:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80150d8:	a907      	add	r1, sp, #28
{
 80150da:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80150dc:	f7ff f897 	bl	801420e <validate>
 80150e0:	9001      	str	r0, [sp, #4]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d129      	bne.n	801513a <f_write+0x72>
 80150e6:	7c63      	ldrb	r3, [r4, #17]
 80150e8:	9301      	str	r3, [sp, #4]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d125      	bne.n	801513a <f_write+0x72>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80150ee:	7c23      	ldrb	r3, [r4, #16]
 80150f0:	079b      	lsls	r3, r3, #30
 80150f2:	d400      	bmi.n	80150f6 <f_write+0x2e>
 80150f4:	e0a8      	b.n	8015248 <f_write+0x180>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80150f6:	6963      	ldr	r3, [r4, #20]
 80150f8:	19da      	adds	r2, r3, r7
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d900      	bls.n	8015100 <f_write+0x38>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80150fe:	43df      	mvns	r7, r3
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8015100:	2f00      	cmp	r7, #0
 8015102:	d016      	beq.n	8015132 <f_write+0x6a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015104:	6962      	ldr	r2, [r4, #20]
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015106:	9e07      	ldr	r6, [sp, #28]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015108:	0513      	lsls	r3, r2, #20
 801510a:	d000      	beq.n	801510e <f_write+0x46>
 801510c:	e080      	b.n	8015210 <f_write+0x148>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801510e:	0b11      	lsrs	r1, r2, #12
 8015110:	0008      	movs	r0, r1
 8015112:	8973      	ldrh	r3, [r6, #10]
 8015114:	3b01      	subs	r3, #1
 8015116:	4018      	ands	r0, r3
 8015118:	9004      	str	r0, [sp, #16]
			if (csect == 0) {				/* On the cluster boundary? */
 801511a:	4219      	tst	r1, r3
 801511c:	d121      	bne.n	8015162 <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801511e:	2a00      	cmp	r2, #0
 8015120:	d10e      	bne.n	8015140 <f_write+0x78>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015122:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8015124:	2900      	cmp	r1, #0
 8015126:	d10d      	bne.n	8015144 <f_write+0x7c>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015128:	0020      	movs	r0, r4
 801512a:	f7ff fccc 	bl	8014ac6 <create_chain>
 801512e:	1e01      	subs	r1, r0, #0
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015130:	d108      	bne.n	8015144 <f_write+0x7c>
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015132:	2340      	movs	r3, #64	@ 0x40
 8015134:	7c22      	ldrb	r2, [r4, #16]
 8015136:	4313      	orrs	r3, r2
 8015138:	7423      	strb	r3, [r4, #16]

	LEAVE_FF(fs, FR_OK);
}
 801513a:	9801      	ldr	r0, [sp, #4]
 801513c:	b009      	add	sp, #36	@ 0x24
 801513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015140:	69a1      	ldr	r1, [r4, #24]
 8015142:	e7f1      	b.n	8015128 <f_write+0x60>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015144:	2901      	cmp	r1, #1
 8015146:	d103      	bne.n	8015150 <f_write+0x88>
 8015148:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801514a:	7463      	strb	r3, [r4, #17]
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801514c:	9301      	str	r3, [sp, #4]
 801514e:	e7f4      	b.n	801513a <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015150:	1c4b      	adds	r3, r1, #1
 8015152:	d101      	bne.n	8015158 <f_write+0x90>
 8015154:	2301      	movs	r3, #1
 8015156:	e7f8      	b.n	801514a <f_write+0x82>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015158:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801515a:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801515c:	2b00      	cmp	r3, #0
 801515e:	d100      	bne.n	8015162 <f_write+0x9a>
 8015160:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8015162:	69f2      	ldr	r2, [r6, #28]
 8015164:	69e3      	ldr	r3, [r4, #28]
 8015166:	429a      	cmp	r2, r3
 8015168:	d104      	bne.n	8015174 <f_write+0xac>
 801516a:	0030      	movs	r0, r6
 801516c:	f7ff f86d 	bl	801424a <sync_window>
 8015170:	2800      	cmp	r0, #0
 8015172:	d1ef      	bne.n	8015154 <f_write+0x8c>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8015174:	0030      	movs	r0, r6
 8015176:	69a1      	ldr	r1, [r4, #24]
 8015178:	f7ff f827 	bl	80141ca <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 801517c:	2800      	cmp	r0, #0
 801517e:	d0e3      	beq.n	8015148 <f_write+0x80>
			sect += csect;
 8015180:	9b04      	ldr	r3, [sp, #16]
 8015182:	181b      	adds	r3, r3, r0
 8015184:	9303      	str	r3, [sp, #12]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8015186:	2380      	movs	r3, #128	@ 0x80
 8015188:	015b      	lsls	r3, r3, #5
 801518a:	429f      	cmp	r7, r3
 801518c:	d333      	bcc.n	80151f6 <f_write+0x12e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801518e:	9a04      	ldr	r2, [sp, #16]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015190:	0b3d      	lsrs	r5, r7, #12
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015192:	8973      	ldrh	r3, [r6, #10]
 8015194:	1952      	adds	r2, r2, r5
 8015196:	429a      	cmp	r2, r3
 8015198:	d901      	bls.n	801519e <f_write+0xd6>
					cc = fs->csize - csect;
 801519a:	9a04      	ldr	r2, [sp, #16]
 801519c:	1a9d      	subs	r5, r3, r2
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801519e:	002b      	movs	r3, r5
 80151a0:	7870      	ldrb	r0, [r6, #1]
 80151a2:	9a03      	ldr	r2, [sp, #12]
 80151a4:	9902      	ldr	r1, [sp, #8]
 80151a6:	f7fe ffc0 	bl	801412a <disk_write>
 80151aa:	9004      	str	r0, [sp, #16]
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d1d1      	bne.n	8015154 <f_write+0x8c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80151b0:	69f1      	ldr	r1, [r6, #28]
 80151b2:	9b03      	ldr	r3, [sp, #12]
 80151b4:	1ac9      	subs	r1, r1, r3
 80151b6:	42a9      	cmp	r1, r5
 80151b8:	d20a      	bcs.n	80151d0 <f_write+0x108>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 80151ba:	0030      	movs	r0, r6
 80151bc:	2280      	movs	r2, #128	@ 0x80
 80151be:	9b02      	ldr	r3, [sp, #8]
 80151c0:	0309      	lsls	r1, r1, #12
 80151c2:	1859      	adds	r1, r3, r1
 80151c4:	3030      	adds	r0, #48	@ 0x30
 80151c6:	0152      	lsls	r2, r2, #5
 80151c8:	f005 fb8e 	bl	801a8e8 <memcpy>
					fs->wflag = 0;
 80151cc:	9b04      	ldr	r3, [sp, #16]
 80151ce:	7133      	strb	r3, [r6, #4]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80151d0:	032d      	lsls	r5, r5, #12
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80151d2:	9b05      	ldr	r3, [sp, #20]
 80151d4:	9a05      	ldr	r2, [sp, #20]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	1b7f      	subs	r7, r7, r5
 80151da:	195b      	adds	r3, r3, r5
 80151dc:	6013      	str	r3, [r2, #0]
 80151de:	9b02      	ldr	r3, [sp, #8]
 80151e0:	195b      	adds	r3, r3, r5
 80151e2:	9302      	str	r3, [sp, #8]
 80151e4:	6963      	ldr	r3, [r4, #20]
 80151e6:	18ed      	adds	r5, r5, r3
 80151e8:	68e3      	ldr	r3, [r4, #12]
 80151ea:	6165      	str	r5, [r4, #20]
 80151ec:	42ab      	cmp	r3, r5
 80151ee:	d200      	bcs.n	80151f2 <f_write+0x12a>
 80151f0:	002b      	movs	r3, r5
 80151f2:	60e3      	str	r3, [r4, #12]
 80151f4:	e784      	b.n	8015100 <f_write+0x38>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 80151f6:	6962      	ldr	r2, [r4, #20]
 80151f8:	68e3      	ldr	r3, [r4, #12]
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d306      	bcc.n	801520c <f_write+0x144>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 80151fe:	0030      	movs	r0, r6
 8015200:	f7ff f823 	bl	801424a <sync_window>
 8015204:	2800      	cmp	r0, #0
 8015206:	d1a5      	bne.n	8015154 <f_write+0x8c>
				fs->winsect = sect;
 8015208:	9b03      	ldr	r3, [sp, #12]
 801520a:	61f3      	str	r3, [r6, #28]
			fp->sect = sect;
 801520c:	9b03      	ldr	r3, [sp, #12]
 801520e:	61e3      	str	r3, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8015210:	2380      	movs	r3, #128	@ 0x80
 8015212:	6965      	ldr	r5, [r4, #20]
 8015214:	015b      	lsls	r3, r3, #5
 8015216:	052d      	lsls	r5, r5, #20
 8015218:	0d2d      	lsrs	r5, r5, #20
 801521a:	1b5d      	subs	r5, r3, r5
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801521c:	42bd      	cmp	r5, r7
 801521e:	d900      	bls.n	8015222 <f_write+0x15a>
 8015220:	003d      	movs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8015222:	0030      	movs	r0, r6
 8015224:	69e1      	ldr	r1, [r4, #28]
 8015226:	f7ff f83e 	bl	80142a6 <move_window>
 801522a:	2800      	cmp	r0, #0
 801522c:	d192      	bne.n	8015154 <f_write+0x8c>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801522e:	0030      	movs	r0, r6
 8015230:	6963      	ldr	r3, [r4, #20]
 8015232:	3030      	adds	r0, #48	@ 0x30
 8015234:	051b      	lsls	r3, r3, #20
 8015236:	0d1b      	lsrs	r3, r3, #20
 8015238:	18c0      	adds	r0, r0, r3
 801523a:	002a      	movs	r2, r5
 801523c:	9902      	ldr	r1, [sp, #8]
 801523e:	f005 fb53 	bl	801a8e8 <memcpy>
		fs->wflag = 1;
 8015242:	2301      	movs	r3, #1
 8015244:	7133      	strb	r3, [r6, #4]
 8015246:	e7c4      	b.n	80151d2 <f_write+0x10a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015248:	2307      	movs	r3, #7
 801524a:	e77f      	b.n	801514c <f_write+0x84>

0801524c <putc_bfd>:

	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;			/* Write index of pb->buf[] */
 801524c:	6843      	ldr	r3, [r0, #4]
{
 801524e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015250:	0004      	movs	r4, r0
	if (i < 0) return;		/* In write error? */
 8015252:	2b00      	cmp	r3, #0
 8015254:	db14      	blt.n	8015280 <putc_bfd+0x34>
	}
	pb->buf[i++] = (BYTE)wc;
#endif

#else							/* ANSI/OEM input (without re-encoding) */
	pb->buf[i++] = (BYTE)c;
 8015256:	1c5d      	adds	r5, r3, #1
 8015258:	18c3      	adds	r3, r0, r3
	nc = pb->nchr;			/* Write unit counter */
 801525a:	6886      	ldr	r6, [r0, #8]
	pb->buf[i++] = (BYTE)c;
 801525c:	7319      	strb	r1, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 801525e:	2d3b      	cmp	r5, #59	@ 0x3b
 8015260:	dd0b      	ble.n	801527a <putc_bfd+0x2e>
		f_write(pb->fp, pb->buf, (UINT)i, &n);
 8015262:	0001      	movs	r1, r0
 8015264:	002a      	movs	r2, r5
 8015266:	ab01      	add	r3, sp, #4
 8015268:	6800      	ldr	r0, [r0, #0]
 801526a:	310c      	adds	r1, #12
 801526c:	f7ff ff2c 	bl	80150c8 <f_write>
		i = (n == (UINT)i) ? 0 : -1;
 8015270:	9b01      	ldr	r3, [sp, #4]
 8015272:	1b5b      	subs	r3, r3, r5
 8015274:	1e5a      	subs	r2, r3, #1
 8015276:	4193      	sbcs	r3, r2
 8015278:	425d      	negs	r5, r3
	}
	pb->idx = i;
	pb->nchr = nc + 1;
 801527a:	3601      	adds	r6, #1
	pb->idx = i;
 801527c:	6065      	str	r5, [r4, #4]
	pb->nchr = nc + 1;
 801527e:	60a6      	str	r6, [r4, #8]
}
 8015280:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08015282 <putc_flush>:

static int putc_flush (putbuff* pb)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015282:	6842      	ldr	r2, [r0, #4]
{
 8015284:	b513      	push	{r0, r1, r4, lr}
 8015286:	0004      	movs	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015288:	2a00      	cmp	r2, #0
 801528a:	da02      	bge.n	8015292 <putc_flush+0x10>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) {
		return pb->nchr;
	}
	return -1;
 801528c:	2001      	movs	r0, #1
 801528e:	4240      	negs	r0, r0
}
 8015290:	bd16      	pop	{r1, r2, r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8015292:	0001      	movs	r1, r0
 8015294:	ab01      	add	r3, sp, #4
 8015296:	6800      	ldr	r0, [r0, #0]
 8015298:	310c      	adds	r1, #12
 801529a:	f7ff ff15 	bl	80150c8 <f_write>
 801529e:	2800      	cmp	r0, #0
 80152a0:	d1f4      	bne.n	801528c <putc_flush+0xa>
		&& (UINT)pb->idx == nw) {
 80152a2:	6862      	ldr	r2, [r4, #4]
 80152a4:	9b01      	ldr	r3, [sp, #4]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d1f0      	bne.n	801528c <putc_flush+0xa>
		return pb->nchr;
 80152aa:	68a0      	ldr	r0, [r4, #8]
 80152ac:	e7f0      	b.n	8015290 <putc_flush+0xe>

080152ae <f_sync>:
{
 80152ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152b0:	b085      	sub	sp, #20
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80152b2:	a903      	add	r1, sp, #12
{
 80152b4:	0005      	movs	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80152b6:	f7fe ffaa 	bl	801420e <validate>
 80152ba:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 80152bc:	d12f      	bne.n	801531e <f_sync+0x70>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80152be:	7c2b      	ldrb	r3, [r5, #16]
 80152c0:	2740      	movs	r7, #64	@ 0x40
 80152c2:	001c      	movs	r4, r3
 80152c4:	403c      	ands	r4, r7
 80152c6:	423b      	tst	r3, r7
 80152c8:	d029      	beq.n	801531e <f_sync+0x70>
				res = move_window(fs, fp->dir_sect);
 80152ca:	9b03      	ldr	r3, [sp, #12]
 80152cc:	6a29      	ldr	r1, [r5, #32]
 80152ce:	0018      	movs	r0, r3
 80152d0:	9301      	str	r3, [sp, #4]
 80152d2:	f7fe ffe8 	bl	80142a6 <move_window>
 80152d6:	1e04      	subs	r4, r0, #0
				if (res == FR_OK) {
 80152d8:	d121      	bne.n	801531e <f_sync+0x70>
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 80152da:	2320      	movs	r3, #32
					BYTE *dir = fp->dir_ptr;
 80152dc:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 80152de:	7af2      	ldrb	r2, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 80152e0:	0031      	movs	r1, r6
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 80152e2:	4313      	orrs	r3, r2
 80152e4:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 80152e6:	68aa      	ldr	r2, [r5, #8]
 80152e8:	6828      	ldr	r0, [r5, #0]
 80152ea:	f7fe ffd0 	bl	801428e <st_clust>
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80152ee:	0030      	movs	r0, r6
 80152f0:	68e9      	ldr	r1, [r5, #12]
 80152f2:	301c      	adds	r0, #28
 80152f4:	f7fe ff61 	bl	80141ba <st_32>
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
 80152f8:	f7fe ff50 	bl	801419c <get_fattime>
 80152fc:	0001      	movs	r1, r0
 80152fe:	0030      	movs	r0, r6
 8015300:	3016      	adds	r0, #22
 8015302:	f7fe ff5a 	bl	80141ba <st_32>
					fs->wflag = 1;
 8015306:	2301      	movs	r3, #1
 8015308:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801530a:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 801530c:	74f4      	strb	r4, [r6, #19]
					res = sync_fs(fs);							/* Restore it to the directory */
 801530e:	0010      	movs	r0, r2
					fs->wflag = 1;
 8015310:	7113      	strb	r3, [r2, #4]
					res = sync_fs(fs);							/* Restore it to the directory */
 8015312:	f7ff f90d 	bl	8014530 <sync_fs>
 8015316:	0004      	movs	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015318:	7c2b      	ldrb	r3, [r5, #16]
 801531a:	43bb      	bics	r3, r7
 801531c:	742b      	strb	r3, [r5, #16]
}
 801531e:	0020      	movs	r0, r4
 8015320:	b005      	add	sp, #20
 8015322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015324 <f_close>:
{
 8015324:	b513      	push	{r0, r1, r4, lr}
 8015326:	0004      	movs	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8015328:	f7ff ffc1 	bl	80152ae <f_sync>
	if (res == FR_OK)
 801532c:	2800      	cmp	r0, #0
 801532e:	d106      	bne.n	801533e <f_close+0x1a>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015330:	0020      	movs	r0, r4
 8015332:	a901      	add	r1, sp, #4
 8015334:	f7fe ff6b 	bl	801420e <validate>
		if (res == FR_OK) {
 8015338:	2800      	cmp	r0, #0
 801533a:	d100      	bne.n	801533e <f_close+0x1a>
			fp->obj.fs = 0;	/* Invalidate file object */
 801533c:	6020      	str	r0, [r4, #0]
}
 801533e:	bd16      	pop	{r1, r2, r4, pc}

08015340 <f_lseek>:
{
 8015340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015342:	b087      	sub	sp, #28
 8015344:	000c      	movs	r4, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015346:	a905      	add	r1, sp, #20
{
 8015348:	0005      	movs	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801534a:	f7fe ff60 	bl	801420e <validate>
 801534e:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015350:	d158      	bne.n	8015404 <f_lseek+0xc4>
 8015352:	7c6e      	ldrb	r6, [r5, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015354:	2e00      	cmp	r6, #0
 8015356:	d155      	bne.n	8015404 <f_lseek+0xc4>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015358:	68eb      	ldr	r3, [r5, #12]
 801535a:	42a3      	cmp	r3, r4
 801535c:	d203      	bcs.n	8015366 <f_lseek+0x26>
 801535e:	7c2a      	ldrb	r2, [r5, #16]
 8015360:	0792      	lsls	r2, r2, #30
 8015362:	d400      	bmi.n	8015366 <f_lseek+0x26>
			ofs = fp->obj.objsize;
 8015364:	001c      	movs	r4, r3
		fp->fptr = nsect = 0;
 8015366:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8015368:	696b      	ldr	r3, [r5, #20]
		fp->fptr = nsect = 0;
 801536a:	616a      	str	r2, [r5, #20]
		if (ofs > 0) {
 801536c:	4294      	cmp	r4, r2
 801536e:	d110      	bne.n	8015392 <f_lseek+0x52>
		fp->fptr = nsect = 0;
 8015370:	2000      	movs	r0, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8015372:	696b      	ldr	r3, [r5, #20]
 8015374:	68ea      	ldr	r2, [r5, #12]
 8015376:	4293      	cmp	r3, r2
 8015378:	d904      	bls.n	8015384 <f_lseek+0x44>
			fp->flag |= FA_MODIFIED;
 801537a:	2240      	movs	r2, #64	@ 0x40
 801537c:	7c29      	ldrb	r1, [r5, #16]
			fp->obj.objsize = fp->fptr;
 801537e:	60eb      	str	r3, [r5, #12]
			fp->flag |= FA_MODIFIED;
 8015380:	430a      	orrs	r2, r1
 8015382:	742a      	strb	r2, [r5, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015384:	051b      	lsls	r3, r3, #20
 8015386:	d03d      	beq.n	8015404 <f_lseek+0xc4>
 8015388:	69eb      	ldr	r3, [r5, #28]
 801538a:	4283      	cmp	r3, r0
 801538c:	d03a      	beq.n	8015404 <f_lseek+0xc4>
			fp->sect = nsect;
 801538e:	61e8      	str	r0, [r5, #28]
 8015390:	e038      	b.n	8015404 <f_lseek+0xc4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015392:	9a05      	ldr	r2, [sp, #20]
 8015394:	9201      	str	r2, [sp, #4]
 8015396:	8957      	ldrh	r7, [r2, #10]
 8015398:	033f      	lsls	r7, r7, #12
			if (ifptr > 0 &&
 801539a:	2b00      	cmp	r3, #0
 801539c:	d016      	beq.n	80153cc <f_lseek+0x8c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801539e:	3b01      	subs	r3, #1
 80153a0:	0039      	movs	r1, r7
 80153a2:	1e60      	subs	r0, r4, #1
 80153a4:	9302      	str	r3, [sp, #8]
 80153a6:	f7ea fedf 	bl	8000168 <__udivsi3>
 80153aa:	0039      	movs	r1, r7
 80153ac:	9003      	str	r0, [sp, #12]
 80153ae:	9802      	ldr	r0, [sp, #8]
 80153b0:	f7ea feda 	bl	8000168 <__udivsi3>
			if (ifptr > 0 &&
 80153b4:	9b03      	ldr	r3, [sp, #12]
 80153b6:	4283      	cmp	r3, r0
 80153b8:	d308      	bcc.n	80153cc <f_lseek+0x8c>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80153ba:	9a02      	ldr	r2, [sp, #8]
 80153bc:	427b      	negs	r3, r7
 80153be:	401a      	ands	r2, r3
				clst = fp->clust;
 80153c0:	69a9      	ldr	r1, [r5, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80153c2:	616a      	str	r2, [r5, #20]
				ofs -= fp->fptr;
 80153c4:	1aa4      	subs	r4, r4, r2
			if (clst != 0) {
 80153c6:	2900      	cmp	r1, #0
 80153c8:	d0d2      	beq.n	8015370 <f_lseek+0x30>
 80153ca:	e003      	b.n	80153d4 <f_lseek+0x94>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80153cc:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80153ce:	2900      	cmp	r1, #0
 80153d0:	d010      	beq.n	80153f4 <f_lseek+0xb4>
				fp->clust = clst;
 80153d2:	61a9      	str	r1, [r5, #24]
					ofs -= bcs; fp->fptr += bcs;
 80153d4:	696b      	ldr	r3, [r5, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 80153d6:	42bc      	cmp	r4, r7
 80153d8:	d81e      	bhi.n	8015418 <f_lseek+0xd8>
				fp->fptr += ofs;
 80153da:	696b      	ldr	r3, [r5, #20]
 80153dc:	191b      	adds	r3, r3, r4
 80153de:	616b      	str	r3, [r5, #20]
				if (ofs % SS(fs)) {
 80153e0:	0523      	lsls	r3, r4, #20
 80153e2:	d0c5      	beq.n	8015370 <f_lseek+0x30>
					nsect = clst2sect(fs, clst);	/* Current sector */
 80153e4:	9801      	ldr	r0, [sp, #4]
 80153e6:	f7fe fef0 	bl	80141ca <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d008      	beq.n	8015400 <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 80153ee:	0b24      	lsrs	r4, r4, #12
 80153f0:	1820      	adds	r0, r4, r0
 80153f2:	e7be      	b.n	8015372 <f_lseek+0x32>
					clst = create_chain(&fp->obj, 0);
 80153f4:	0028      	movs	r0, r5
 80153f6:	f7ff fb66 	bl	8014ac6 <create_chain>
 80153fa:	0001      	movs	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80153fc:	2801      	cmp	r0, #1
 80153fe:	d104      	bne.n	801540a <f_lseek+0xca>
 8015400:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015402:	746e      	strb	r6, [r5, #17]
}
 8015404:	0030      	movs	r0, r6
 8015406:	b007      	add	sp, #28
 8015408:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801540a:	1c43      	adds	r3, r0, #1
 801540c:	d101      	bne.n	8015412 <f_lseek+0xd2>
 801540e:	2601      	movs	r6, #1
 8015410:	e7f7      	b.n	8015402 <f_lseek+0xc2>
					fp->obj.sclust = clst;
 8015412:	60a8      	str	r0, [r5, #8]
				fp->clust = clst;
 8015414:	61a8      	str	r0, [r5, #24]
 8015416:	e7d6      	b.n	80153c6 <f_lseek+0x86>
					ofs -= bcs; fp->fptr += bcs;
 8015418:	1be2      	subs	r2, r4, r7
 801541a:	9202      	str	r2, [sp, #8]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801541c:	2202      	movs	r2, #2
					ofs -= bcs; fp->fptr += bcs;
 801541e:	19db      	adds	r3, r3, r7
 8015420:	616b      	str	r3, [r5, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015422:	7c2b      	ldrb	r3, [r5, #16]
 8015424:	4213      	tst	r3, r2
 8015426:	d006      	beq.n	8015436 <f_lseek+0xf6>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015428:	0028      	movs	r0, r5
 801542a:	f7ff fb4c 	bl	8014ac6 <create_chain>
 801542e:	1e04      	subs	r4, r0, #0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015430:	d105      	bne.n	801543e <f_lseek+0xfe>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015432:	0001      	movs	r1, r0
 8015434:	e7d1      	b.n	80153da <f_lseek+0x9a>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015436:	6828      	ldr	r0, [r5, #0]
 8015438:	f7ff fa6a 	bl	8014910 <get_fat.isra.0>
 801543c:	0004      	movs	r4, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801543e:	1c63      	adds	r3, r4, #1
 8015440:	d0e5      	beq.n	801540e <f_lseek+0xce>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015442:	2c01      	cmp	r4, #1
 8015444:	d9dc      	bls.n	8015400 <f_lseek+0xc0>
 8015446:	9b01      	ldr	r3, [sp, #4]
 8015448:	695b      	ldr	r3, [r3, #20]
 801544a:	42a3      	cmp	r3, r4
 801544c:	d9d8      	bls.n	8015400 <f_lseek+0xc0>
					fp->clust = clst;
 801544e:	0021      	movs	r1, r4
 8015450:	61ac      	str	r4, [r5, #24]
					ofs -= bcs; fp->fptr += bcs;
 8015452:	9c02      	ldr	r4, [sp, #8]
 8015454:	e7be      	b.n	80153d4 <f_lseek+0x94>

08015456 <f_stat>:
{
 8015456:	b530      	push	{r4, r5, lr}
 8015458:	b08f      	sub	sp, #60	@ 0x3c
 801545a:	9001      	str	r0, [sp, #4]
 801545c:	000d      	movs	r5, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
 801545e:	2200      	movs	r2, #0
 8015460:	a903      	add	r1, sp, #12
 8015462:	a801      	add	r0, sp, #4
 8015464:	f7ff f8c2 	bl	80145ec <mount_volume>
 8015468:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 801546a:	d118      	bne.n	801549e <f_stat+0x48>
		res = follow_path(&dj, path);	/* Follow the file path */
 801546c:	9901      	ldr	r1, [sp, #4]
 801546e:	a803      	add	r0, sp, #12
 8015470:	f7ff fbfc 	bl	8014c6c <follow_path>
 8015474:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
 8015476:	d112      	bne.n	801549e <f_stat+0x48>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8015478:	2337      	movs	r3, #55	@ 0x37
 801547a:	446b      	add	r3, sp
 801547c:	781b      	ldrb	r3, [r3, #0]
 801547e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015480:	d80c      	bhi.n	801549c <f_stat+0x46>
				if (fno) get_fileinfo(&dj, fno);
 8015482:	2d00      	cmp	r5, #0
 8015484:	d007      	beq.n	8015496 <f_stat+0x40>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8015486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	fno->fname[0] = 0;
 8015488:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 801548a:	2b00      	cmp	r3, #0
 801548c:	d003      	beq.n	8015496 <f_stat+0x40>
 801548e:	0029      	movs	r1, r5
 8015490:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015492:	f7ff f9ff 	bl	8014894 <get_fileinfo.part.0.constprop.0.isra.0>
}
 8015496:	0020      	movs	r0, r4
 8015498:	b00f      	add	sp, #60	@ 0x3c
 801549a:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 801549c:	2406      	movs	r4, #6
	if (fno && res != FR_OK) fno->fname[0] = 0;	/* Invalidate the file information if an error occured */
 801549e:	2d00      	cmp	r5, #0
 80154a0:	d0f9      	beq.n	8015496 <f_stat+0x40>
 80154a2:	2300      	movs	r3, #0
 80154a4:	726b      	strb	r3, [r5, #9]
 80154a6:	e7f6      	b.n	8015496 <f_stat+0x40>

080154a8 <f_chmod>:
{
 80154a8:	b570      	push	{r4, r5, r6, lr}
 80154aa:	b08e      	sub	sp, #56	@ 0x38
 80154ac:	000c      	movs	r4, r1
 80154ae:	0016      	movs	r6, r2
 80154b0:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
 80154b2:	2202      	movs	r2, #2
 80154b4:	a902      	add	r1, sp, #8
 80154b6:	a801      	add	r0, sp, #4
 80154b8:	f7ff f898 	bl	80145ec <mount_volume>
	if (res == FR_OK) {
 80154bc:	2800      	cmp	r0, #0
 80154be:	d11b      	bne.n	80154f8 <f_chmod+0x50>
		dj.obj.fs = fs;
 80154c0:	9d02      	ldr	r5, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 80154c2:	9901      	ldr	r1, [sp, #4]
 80154c4:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 80154c6:	9503      	str	r5, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80154c8:	f7ff fbd0 	bl	8014c6c <follow_path>
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d113      	bne.n	80154f8 <f_chmod+0x50>
 80154d0:	2337      	movs	r3, #55	@ 0x37
 80154d2:	225f      	movs	r2, #95	@ 0x5f
 80154d4:	446b      	add	r3, sp
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	3006      	adds	r0, #6
 80154da:	4393      	bics	r3, r2
 80154dc:	d10c      	bne.n	80154f8 <f_chmod+0x50>
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 80154de:	2127      	movs	r1, #39	@ 0x27
 80154e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
				res = sync_fs(fs);
 80154e2:	0028      	movs	r0, r5
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 80154e4:	7ad3      	ldrb	r3, [r2, #11]
 80154e6:	405c      	eors	r4, r3
 80154e8:	4034      	ands	r4, r6
 80154ea:	400c      	ands	r4, r1
 80154ec:	4063      	eors	r3, r4
 80154ee:	72d3      	strb	r3, [r2, #11]
				fs->wflag = 1;
 80154f0:	2301      	movs	r3, #1
 80154f2:	712b      	strb	r3, [r5, #4]
				res = sync_fs(fs);
 80154f4:	f7ff f81c 	bl	8014530 <sync_fs>
}
 80154f8:	b00e      	add	sp, #56	@ 0x38
 80154fa:	bd70      	pop	{r4, r5, r6, pc}

080154fc <f_setlabel>:
{
 80154fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154fe:	b095      	sub	sp, #84	@ 0x54
 8015500:	9001      	str	r0, [sp, #4]
	res = mount_volume(&label, &fs, FA_WRITE);
 8015502:	2202      	movs	r2, #2
 8015504:	a902      	add	r1, sp, #8
 8015506:	a801      	add	r0, sp, #4
 8015508:	f7ff f870 	bl	80145ec <mount_volume>
 801550c:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) LEAVE_FF(fs, res);
 801550e:	d153      	bne.n	80155b8 <f_setlabel+0xbc>
		while ((UINT)*label >= ' ') {	/* Create volume label */
 8015510:	0025      	movs	r5, r4
		memset(dirvn, ' ', 11);
 8015512:	220b      	movs	r2, #11
 8015514:	2120      	movs	r1, #32
 8015516:	a803      	add	r0, sp, #12
 8015518:	f005 f91c 	bl	801a754 <memset>
			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
 801551c:	4e34      	ldr	r6, [pc, #208]	@ (80155f0 <f_setlabel+0xf4>)
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 801551e:	4f35      	ldr	r7, [pc, #212]	@ (80155f4 <f_setlabel+0xf8>)
		while ((UINT)*label >= ' ') {	/* Create volume label */
 8015520:	9b01      	ldr	r3, [sp, #4]
 8015522:	781a      	ldrb	r2, [r3, #0]
 8015524:	2a1f      	cmp	r2, #31
 8015526:	d828      	bhi.n	801557a <f_setlabel+0x7e>
		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 8015528:	466b      	mov	r3, sp
 801552a:	7b1b      	ldrb	r3, [r3, #12]
 801552c:	2be5      	cmp	r3, #229	@ 0xe5
 801552e:	d042      	beq.n	80155b6 <f_setlabel+0xba>
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 8015530:	2d00      	cmp	r5, #0
 8015532:	d006      	beq.n	8015542 <f_setlabel+0x46>
 8015534:	466a      	mov	r2, sp
 8015536:	210c      	movs	r1, #12
 8015538:	1e6b      	subs	r3, r5, #1
 801553a:	1852      	adds	r2, r2, r1
 801553c:	5cd2      	ldrb	r2, [r2, r3]
 801553e:	2a20      	cmp	r2, #32
 8015540:	d03d      	beq.n	80155be <f_setlabel+0xc2>
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8015542:	9b02      	ldr	r3, [sp, #8]
	res = dir_sdi(&dj, 0);
 8015544:	a809      	add	r0, sp, #36	@ 0x24
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8015546:	9309      	str	r3, [sp, #36]	@ 0x24
 8015548:	2300      	movs	r3, #0
 801554a:	930b      	str	r3, [sp, #44]	@ 0x2c
	res = dir_sdi(&dj, 0);
 801554c:	f7ff fa44 	bl	80149d8 <dir_sdi.constprop.0>
 8015550:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8015552:	d131      	bne.n	80155b8 <f_setlabel+0xbc>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 8015554:	2101      	movs	r1, #1
 8015556:	a809      	add	r0, sp, #36	@ 0x24
 8015558:	f7ff fc4a 	bl	8014df0 <dir_read>
		if (res == FR_OK) {
 801555c:	2800      	cmp	r0, #0
 801555e:	d130      	bne.n	80155c2 <f_setlabel+0xc6>
					memcpy(dj.dir, dirvn, 11);	/* Change the volume label */
 8015560:	220b      	movs	r2, #11
 8015562:	9810      	ldr	r0, [sp, #64]	@ 0x40
				if (di != 0) {
 8015564:	2d00      	cmp	r5, #0
 8015566:	d13f      	bne.n	80155e8 <f_setlabel+0xec>
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 8015568:	23e5      	movs	r3, #229	@ 0xe5
 801556a:	7003      	strb	r3, [r0, #0]
						fs->wflag = 1;
 801556c:	2301      	movs	r3, #1
 801556e:	9802      	ldr	r0, [sp, #8]
 8015570:	7103      	strb	r3, [r0, #4]
						res = sync_fs(fs);
 8015572:	f7fe ffdd 	bl	8014530 <sync_fs>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 8015576:	0004      	movs	r4, r0
 8015578:	e01e      	b.n	80155b8 <f_setlabel+0xbc>
			wc = (BYTE)*label++;
 801557a:	1c5a      	adds	r2, r3, #1
 801557c:	9201      	str	r2, [sp, #4]
 801557e:	781c      	ldrb	r4, [r3, #0]
			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
 8015580:	0023      	movs	r3, r4
 8015582:	3b61      	subs	r3, #97	@ 0x61
 8015584:	2b19      	cmp	r3, #25
 8015586:	d80f      	bhi.n	80155a8 <f_setlabel+0xac>
 8015588:	3c20      	subs	r4, #32
 801558a:	b2a4      	uxth	r4, r4
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 801558c:	0021      	movs	r1, r4
 801558e:	0038      	movs	r0, r7
 8015590:	f005 f8f5 	bl	801a77e <strchr>
 8015594:	2800      	cmp	r0, #0
 8015596:	d10e      	bne.n	80155b6 <f_setlabel+0xba>
 8015598:	2d0b      	cmp	r5, #11
 801559a:	d00c      	beq.n	80155b6 <f_setlabel+0xba>
			dirvn[di++] = (BYTE)wc;
 801559c:	466b      	mov	r3, sp
 801559e:	220c      	movs	r2, #12
 80155a0:	189b      	adds	r3, r3, r2
 80155a2:	555c      	strb	r4, [r3, r5]
 80155a4:	3501      	adds	r5, #1
 80155a6:	e7bb      	b.n	8015520 <f_setlabel+0x24>
			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
 80155a8:	2c7f      	cmp	r4, #127	@ 0x7f
 80155aa:	d902      	bls.n	80155b2 <f_setlabel+0xb6>
 80155ac:	1934      	adds	r4, r6, r4
 80155ae:	3c80      	subs	r4, #128	@ 0x80
 80155b0:	7824      	ldrb	r4, [r4, #0]
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 80155b2:	2c00      	cmp	r4, #0
 80155b4:	d1ea      	bne.n	801558c <f_setlabel+0x90>
				LEAVE_FF(fs, FR_INVALID_NAME);
 80155b6:	2406      	movs	r4, #6
}
 80155b8:	0020      	movs	r0, r4
 80155ba:	b015      	add	sp, #84	@ 0x54
 80155bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 80155be:	001d      	movs	r5, r3
 80155c0:	e7b6      	b.n	8015530 <f_setlabel+0x34>
			if (res == FR_NO_FILE) {
 80155c2:	2804      	cmp	r0, #4
 80155c4:	d1d7      	bne.n	8015576 <f_setlabel+0x7a>
				if (di != 0) {	/* Create a volume label entry */
 80155c6:	2d00      	cmp	r5, #0
 80155c8:	d0f6      	beq.n	80155b8 <f_setlabel+0xbc>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 80155ca:	a809      	add	r0, sp, #36	@ 0x24
 80155cc:	f7ff fc42 	bl	8014e54 <dir_alloc.constprop.0>
 80155d0:	1e04      	subs	r4, r0, #0
					if (res == FR_OK) {
 80155d2:	d1f1      	bne.n	80155b8 <f_setlabel+0xbc>
						memset(dj.dir, 0, SZDIRE);	/* Clean the entry */
 80155d4:	2220      	movs	r2, #32
 80155d6:	0021      	movs	r1, r4
 80155d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80155da:	f005 f8bb 	bl	801a754 <memset>
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 80155de:	2208      	movs	r2, #8
 80155e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80155e2:	72da      	strb	r2, [r3, #11]
							memcpy(dj.dir, dirvn, 11);
 80155e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80155e6:	3203      	adds	r2, #3
 80155e8:	a903      	add	r1, sp, #12
 80155ea:	f005 f97d 	bl	801a8e8 <memcpy>
 80155ee:	e7bd      	b.n	801556c <f_setlabel+0x70>
 80155f0:	08020736 	.word	0x08020736
 80155f4:	08020724 	.word	0x08020724

080155f8 <f_mkfs>:
{
 80155f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155fa:	b09b      	sub	sp, #108	@ 0x6c
 80155fc:	9013      	str	r0, [sp, #76]	@ 0x4c
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 80155fe:	a813      	add	r0, sp, #76	@ 0x4c
{
 8015600:	930e      	str	r3, [sp, #56]	@ 0x38
 8015602:	000e      	movs	r6, r1
 8015604:	0014      	movs	r4, r2
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 8015606:	f7fe fdec 	bl	80141e2 <get_ldnumber>
 801560a:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 801560c:	200b      	movs	r0, #11
 801560e:	2b00      	cmp	r3, #0
 8015610:	db6b      	blt.n	80156ea <f_mkfs+0xf2>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8015612:	4ab7      	ldr	r2, [pc, #732]	@ (80158f0 <f_mkfs+0x2f8>)
 8015614:	0099      	lsls	r1, r3, #2
 8015616:	588a      	ldr	r2, [r1, r2]
 8015618:	2a00      	cmp	r2, #0
 801561a:	d001      	beq.n	8015620 <f_mkfs+0x28>
 801561c:	2100      	movs	r1, #0
 801561e:	7011      	strb	r1, [r2, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8015620:	b2db      	uxtb	r3, r3
	ds = disk_initialize(pdrv);
 8015622:	0018      	movs	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8015624:	9302      	str	r3, [sp, #8]
	ds = disk_initialize(pdrv);
 8015626:	f7fe fd5f 	bl	80140e8 <disk_initialize>
 801562a:	0003      	movs	r3, r0
	if (ds & STA_NOINIT) return FR_NOT_READY;
 801562c:	2003      	movs	r0, #3
 801562e:	07da      	lsls	r2, r3, #31
 8015630:	d45b      	bmi.n	80156ea <f_mkfs+0xf2>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8015632:	3007      	adds	r0, #7
 8015634:	075b      	lsls	r3, r3, #29
 8015636:	d458      	bmi.n	80156ea <f_mkfs+0xf2>
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8015638:	2e00      	cmp	r6, #0
 801563a:	d100      	bne.n	801563e <f_mkfs+0x46>
 801563c:	4ead      	ldr	r6, [pc, #692]	@ (80158f4 <f_mkfs+0x2fc>)
	sz_blk = opt->align;
 801563e:	6873      	ldr	r3, [r6, #4]
 8015640:	9315      	str	r3, [sp, #84]	@ 0x54
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 8015642:	2b00      	cmp	r3, #0
 8015644:	d104      	bne.n	8015650 <f_mkfs+0x58>
 8015646:	2103      	movs	r1, #3
 8015648:	9802      	ldr	r0, [sp, #8]
 801564a:	aa15      	add	r2, sp, #84	@ 0x54
 801564c:	f7fe fd92 	bl	8014174 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8015650:	2180      	movs	r1, #128	@ 0x80
 8015652:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015654:	0209      	lsls	r1, r1, #8
 8015656:	1e5a      	subs	r2, r3, #1
 8015658:	428a      	cmp	r2, r1
 801565a:	d201      	bcs.n	8015660 <f_mkfs+0x68>
 801565c:	421a      	tst	r2, r3
 801565e:	d001      	beq.n	8015664 <f_mkfs+0x6c>
 8015660:	2301      	movs	r3, #1
 8015662:	9315      	str	r3, [sp, #84]	@ 0x54
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8015664:	7873      	ldrb	r3, [r6, #1]
 8015666:	9307      	str	r3, [sp, #28]
 8015668:	3b01      	subs	r3, #1
 801566a:	2b01      	cmp	r3, #1
 801566c:	d901      	bls.n	8015672 <f_mkfs+0x7a>
 801566e:	2301      	movs	r3, #1
 8015670:	9307      	str	r3, [sp, #28]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8015672:	68b3      	ldr	r3, [r6, #8]
 8015674:	9308      	str	r3, [sp, #32]
 8015676:	1e5a      	subs	r2, r3, #1
 8015678:	2380      	movs	r3, #128	@ 0x80
 801567a:	021b      	lsls	r3, r3, #8
 801567c:	429a      	cmp	r2, r3
 801567e:	d202      	bcs.n	8015686 <f_mkfs+0x8e>
 8015680:	9b08      	ldr	r3, [sp, #32]
 8015682:	065b      	lsls	r3, r3, #25
 8015684:	d002      	beq.n	801568c <f_mkfs+0x94>
 8015686:	2380      	movs	r3, #128	@ 0x80
 8015688:	009b      	lsls	r3, r3, #2
 801568a:	9308      	str	r3, [sp, #32]
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 801568c:	2380      	movs	r3, #128	@ 0x80
 801568e:	68f5      	ldr	r5, [r6, #12]
 8015690:	045b      	lsls	r3, r3, #17
 8015692:	429d      	cmp	r5, r3
 8015694:	d82b      	bhi.n	80156ee <f_mkfs+0xf6>
 8015696:	1e6b      	subs	r3, r5, #1
 8015698:	402b      	ands	r3, r5
 801569a:	425a      	negs	r2, r3
 801569c:	4153      	adcs	r3, r2
 801569e:	425b      	negs	r3, r3
 80156a0:	401d      	ands	r5, r3
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 80156a2:	2380      	movs	r3, #128	@ 0x80
 80156a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80156a6:	2011      	movs	r0, #17
 80156a8:	015b      	lsls	r3, r3, #5
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d31d      	bcc.n	80156ea <f_mkfs+0xf2>
	if (!buf) return FR_NOT_ENOUGH_CORE;
 80156ae:	2c00      	cmp	r4, #0
 80156b0:	d01b      	beq.n	80156ea <f_mkfs+0xf2>
	b_vol = sz_vol = 0;
 80156b2:	2300      	movs	r3, #0
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80156b4:	2101      	movs	r1, #1
 80156b6:	9802      	ldr	r0, [sp, #8]
 80156b8:	aa16      	add	r2, sp, #88	@ 0x58
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 80156ba:	7836      	ldrb	r6, [r6, #0]
	b_vol = sz_vol = 0;
 80156bc:	9316      	str	r3, [sp, #88]	@ 0x58
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80156be:	f7fe fd59 	bl	8014174 <disk_ioctl>
 80156c2:	2800      	cmp	r0, #0
 80156c4:	d000      	beq.n	80156c8 <f_mkfs+0xd0>
 80156c6:	e309      	b.n	8015cdc <f_mkfs+0x6e4>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 80156c8:	2308      	movs	r3, #8
 80156ca:	0032      	movs	r2, r6
 80156cc:	401a      	ands	r2, r3
 80156ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80156d0:	421e      	tst	r6, r3
 80156d2:	d10e      	bne.n	80156f2 <f_mkfs+0xfa>
				if (sz_vol > N_SEC_TRACK) {
 80156d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80156d6:	2b01      	cmp	r3, #1
 80156d8:	d906      	bls.n	80156e8 <f_mkfs+0xf0>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 80156da:	3b01      	subs	r3, #1
 80156dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80156de:	2301      	movs	r3, #1
 80156e0:	9309      	str	r3, [sp, #36]	@ 0x24
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 80156e2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80156e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80156e6:	d806      	bhi.n	80156f6 <f_mkfs+0xfe>
 80156e8:	200e      	movs	r0, #14
}
 80156ea:	b01b      	add	sp, #108	@ 0x6c
 80156ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 80156ee:	2500      	movs	r5, #0
 80156f0:	e7d7      	b.n	80156a2 <f_mkfs+0xaa>
	b_vol = sz_vol = 0;
 80156f2:	9009      	str	r0, [sp, #36]	@ 0x24
 80156f4:	e7f5      	b.n	80156e2 <f_mkfs+0xea>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 80156f6:	2381      	movs	r3, #129	@ 0x81
 80156f8:	2780      	movs	r7, #128	@ 0x80
 80156fa:	031b      	lsls	r3, r3, #12
 80156fc:	429d      	cmp	r5, r3
 80156fe:	d200      	bcs.n	8015702 <f_mkfs+0x10a>
	sz_au /= ss;	/* Byte --> Sector */
 8015700:	0b2f      	lsrs	r7, r5, #12
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8015702:	2502      	movs	r5, #2
 8015704:	0033      	movs	r3, r6
 8015706:	402b      	ands	r3, r5
 8015708:	930d      	str	r3, [sp, #52]	@ 0x34
 801570a:	2301      	movs	r3, #1
 801570c:	4033      	ands	r3, r6
 801570e:	422e      	tst	r6, r5
 8015710:	d023      	beq.n	801575a <f_mkfs+0x162>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8015712:	3501      	adds	r5, #1
 8015714:	1aed      	subs	r5, r5, r3
 8015716:	b2ed      	uxtb	r5, r5
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015718:	f7fe fd40 	bl	801419c <get_fattime>
 801571c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801571e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015720:	9303      	str	r3, [sp, #12]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8015722:	9b08      	ldr	r3, [sp, #32]
 8015724:	015b      	lsls	r3, r3, #5
 8015726:	0b1b      	lsrs	r3, r3, #12
 8015728:	9311      	str	r3, [sp, #68]	@ 0x44
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 801572a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801572c:	1e5a      	subs	r2, r3, #1
 801572e:	425b      	negs	r3, r3
 8015730:	9212      	str	r2, [sp, #72]	@ 0x48
 8015732:	9310      	str	r3, [sp, #64]	@ 0x40
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8015734:	2d03      	cmp	r5, #3
 8015736:	d000      	beq.n	801573a <f_mkfs+0x142>
 8015738:	e091      	b.n	801585e <f_mkfs+0x266>
				if (pau == 0) {	/* AU auto-selection */
 801573a:	970a      	str	r7, [sp, #40]	@ 0x28
 801573c:	2f00      	cmp	r7, #0
 801573e:	d112      	bne.n	8015766 <f_mkfs+0x16e>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015740:	2701      	movs	r7, #1
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8015742:	9b03      	ldr	r3, [sp, #12]
 8015744:	4a6c      	ldr	r2, [pc, #432]	@ (80158f8 <f_mkfs+0x300>)
 8015746:	0c59      	lsrs	r1, r3, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015748:	8813      	ldrh	r3, [r2, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d003      	beq.n	8015756 <f_mkfs+0x15e>
 801574e:	3202      	adds	r2, #2
 8015750:	428b      	cmp	r3, r1
 8015752:	d956      	bls.n	8015802 <f_mkfs+0x20a>
 8015754:	2300      	movs	r3, #0
 8015756:	930a      	str	r3, [sp, #40]	@ 0x28
 8015758:	e005      	b.n	8015766 <f_mkfs+0x16e>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 801575a:	2013      	movs	r0, #19
 801575c:	2b00      	cmp	r3, #0
 801575e:	d1db      	bne.n	8015718 <f_mkfs+0x120>
 8015760:	e7c3      	b.n	80156ea <f_mkfs+0xf2>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015762:	087f      	lsrs	r7, r7, #1
 8015764:	970a      	str	r7, [sp, #40]	@ 0x28
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8015766:	0039      	movs	r1, r7
 8015768:	9803      	ldr	r0, [sp, #12]
 801576a:	f7ea fcfd 	bl	8000168 <__udivsi3>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801576e:	4a63      	ldr	r2, [pc, #396]	@ (80158fc <f_mkfs+0x304>)
 8015770:	0083      	lsls	r3, r0, #2
 8015772:	189b      	adds	r3, r3, r2
 8015774:	0b1b      	lsrs	r3, r3, #12
 8015776:	9306      	str	r3, [sp, #24]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8015778:	4b61      	ldr	r3, [pc, #388]	@ (8015900 <f_mkfs+0x308>)
 801577a:	18c0      	adds	r0, r0, r3
 801577c:	4b61      	ldr	r3, [pc, #388]	@ (8015904 <f_mkfs+0x30c>)
 801577e:	4298      	cmp	r0, r3
 8015780:	d8b2      	bhi.n	80156e8 <f_mkfs+0xf0>
				sz_dir = 0;		/* No static directory */
 8015782:	2300      	movs	r3, #0
				sz_rsv = 32;	/* Number of reserved sectors */
 8015784:	2520      	movs	r5, #32
				sz_dir = 0;		/* No static directory */
 8015786:	9305      	str	r3, [sp, #20]
 8015788:	3303      	adds	r3, #3
 801578a:	9301      	str	r3, [sp, #4]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801578c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 801578e:	9a06      	ldr	r2, [sp, #24]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015790:	18eb      	adds	r3, r5, r3
 8015792:	9304      	str	r3, [sp, #16]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8015794:	9b07      	ldr	r3, [sp, #28]
 8015796:	4353      	muls	r3, r2
 8015798:	9a04      	ldr	r2, [sp, #16]
 801579a:	189b      	adds	r3, r3, r2
 801579c:	9a05      	ldr	r2, [sp, #20]
 801579e:	189b      	adds	r3, r3, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80157a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 80157a2:	930b      	str	r3, [sp, #44]	@ 0x2c
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80157a4:	189e      	adds	r6, r3, r2
 80157a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80157a8:	401e      	ands	r6, r3
 80157aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80157ac:	1af6      	subs	r6, r6, r3
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 80157ae:	9b01      	ldr	r3, [sp, #4]
 80157b0:	2b03      	cmp	r3, #3
 80157b2:	d131      	bne.n	8015818 <f_mkfs+0x220>
				sz_rsv += n; b_fat += n;
 80157b4:	9b04      	ldr	r3, [sp, #16]
 80157b6:	19ad      	adds	r5, r5, r6
 80157b8:	199b      	adds	r3, r3, r6
 80157ba:	9304      	str	r3, [sp, #16]
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 80157bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80157be:	013b      	lsls	r3, r7, #4
 80157c0:	1a9b      	subs	r3, r3, r2
 80157c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80157c4:	189b      	adds	r3, r3, r2
 80157c6:	9a03      	ldr	r2, [sp, #12]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d200      	bcs.n	80157ce <f_mkfs+0x1d6>
 80157cc:	e78c      	b.n	80156e8 <f_mkfs+0xf0>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80157ce:	0013      	movs	r3, r2
 80157d0:	9a05      	ldr	r2, [sp, #20]
 80157d2:	0039      	movs	r1, r7
 80157d4:	1a98      	subs	r0, r3, r2
 80157d6:	9a06      	ldr	r2, [sp, #24]
 80157d8:	9b07      	ldr	r3, [sp, #28]
 80157da:	1b40      	subs	r0, r0, r5
 80157dc:	4353      	muls	r3, r2
 80157de:	1ac0      	subs	r0, r0, r3
 80157e0:	f7ea fcc2 	bl	8000168 <__udivsi3>
			if (fsty == FS_FAT32) {
 80157e4:	9b01      	ldr	r3, [sp, #4]
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80157e6:	0006      	movs	r6, r0
			if (fsty == FS_FAT32) {
 80157e8:	2b03      	cmp	r3, #3
 80157ea:	d128      	bne.n	801583e <f_mkfs+0x246>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 80157ec:	4b46      	ldr	r3, [pc, #280]	@ (8015908 <f_mkfs+0x310>)
 80157ee:	4298      	cmp	r0, r3
 80157f0:	d900      	bls.n	80157f4 <f_mkfs+0x1fc>
 80157f2:	e208      	b.n	8015c06 <f_mkfs+0x60e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80157f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d000      	beq.n	80157fc <f_mkfs+0x204>
 80157fa:	e775      	b.n	80156e8 <f_mkfs+0xf0>
 80157fc:	2f01      	cmp	r7, #1
 80157fe:	d8b0      	bhi.n	8015762 <f_mkfs+0x16a>
 8015800:	e772      	b.n	80156e8 <f_mkfs+0xf0>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015802:	007f      	lsls	r7, r7, #1
 8015804:	e7a0      	b.n	8015748 <f_mkfs+0x150>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015806:	006d      	lsls	r5, r5, #1
 8015808:	e02f      	b.n	801586a <f_mkfs+0x272>
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801580a:	2003      	movs	r0, #3
 801580c:	4358      	muls	r0, r3
 801580e:	3001      	adds	r0, #1
 8015810:	0840      	lsrs	r0, r0, #1
					fsty = FS_FAT12;
 8015812:	2301      	movs	r3, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8015814:	3003      	adds	r0, #3
 8015816:	e039      	b.n	801588c <f_mkfs+0x294>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8015818:	0030      	movs	r0, r6
 801581a:	9907      	ldr	r1, [sp, #28]
 801581c:	f7ea fd2a 	bl	8000274 <__aeabi_uidivmod>
 8015820:	2900      	cmp	r1, #0
 8015822:	d004      	beq.n	801582e <f_mkfs+0x236>
					n--; sz_rsv++; b_fat++;
 8015824:	9b04      	ldr	r3, [sp, #16]
 8015826:	3e01      	subs	r6, #1
 8015828:	3301      	adds	r3, #1
 801582a:	3501      	adds	r5, #1
 801582c:	9304      	str	r3, [sp, #16]
				sz_fat += n / n_fat;
 801582e:	0030      	movs	r0, r6
 8015830:	9907      	ldr	r1, [sp, #28]
 8015832:	f7ea fc99 	bl	8000168 <__udivsi3>
 8015836:	9b06      	ldr	r3, [sp, #24]
 8015838:	181b      	adds	r3, r3, r0
 801583a:	9306      	str	r3, [sp, #24]
 801583c:	e7be      	b.n	80157bc <f_mkfs+0x1c4>
			if (fsty == FS_FAT16) {
 801583e:	9b01      	ldr	r3, [sp, #4]
 8015840:	2b02      	cmp	r3, #2
 8015842:	d000      	beq.n	8015846 <f_mkfs+0x24e>
 8015844:	e1d9      	b.n	8015bfa <f_mkfs+0x602>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015846:	4b30      	ldr	r3, [pc, #192]	@ (8015908 <f_mkfs+0x310>)
 8015848:	4298      	cmp	r0, r3
 801584a:	d92a      	bls.n	80158a2 <f_mkfs+0x2aa>
					if (sz_au == 0 && (pau * 2) <= 64) {
 801584c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801584e:	2b00      	cmp	r3, #0
 8015850:	d000      	beq.n	8015854 <f_mkfs+0x25c>
 8015852:	e1c3      	b.n	8015bdc <f_mkfs+0x5e4>
 8015854:	007d      	lsls	r5, r7, #1
 8015856:	2d40      	cmp	r5, #64	@ 0x40
 8015858:	d900      	bls.n	801585c <f_mkfs+0x264>
 801585a:	e1c5      	b.n	8015be8 <f_mkfs+0x5f0>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 801585c:	002f      	movs	r7, r5
			pau = sz_au;
 801585e:	1e3d      	subs	r5, r7, #0
				if (pau == 0) {	/* au auto-selection */
 8015860:	d109      	bne.n	8015876 <f_mkfs+0x27e>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015862:	2501      	movs	r5, #1
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015864:	9b03      	ldr	r3, [sp, #12]
 8015866:	0b19      	lsrs	r1, r3, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015868:	4b28      	ldr	r3, [pc, #160]	@ (801590c <f_mkfs+0x314>)
 801586a:	881a      	ldrh	r2, [r3, #0]
 801586c:	2a00      	cmp	r2, #0
 801586e:	d002      	beq.n	8015876 <f_mkfs+0x27e>
 8015870:	3302      	adds	r3, #2
 8015872:	428a      	cmp	r2, r1
 8015874:	d9c7      	bls.n	8015806 <f_mkfs+0x20e>
				n_clst = (DWORD)sz_vol / pau;
 8015876:	0029      	movs	r1, r5
 8015878:	9803      	ldr	r0, [sp, #12]
 801587a:	f7ea fc75 	bl	8000168 <__udivsi3>
				if (n_clst > MAX_FAT12) {
 801587e:	4a24      	ldr	r2, [pc, #144]	@ (8015910 <f_mkfs+0x318>)
				n_clst = (DWORD)sz_vol / pau;
 8015880:	0003      	movs	r3, r0
				if (n_clst > MAX_FAT12) {
 8015882:	4290      	cmp	r0, r2
 8015884:	d9c1      	bls.n	801580a <f_mkfs+0x212>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8015886:	3302      	adds	r3, #2
 8015888:	0058      	lsls	r0, r3, #1
 801588a:	2302      	movs	r3, #2
					fsty = FS_FAT12;
 801588c:	9301      	str	r3, [sp, #4]
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801588e:	4b21      	ldr	r3, [pc, #132]	@ (8015914 <f_mkfs+0x31c>)
 8015890:	970a      	str	r7, [sp, #40]	@ 0x28
 8015892:	18c0      	adds	r0, r0, r3
 8015894:	0b03      	lsrs	r3, r0, #12
 8015896:	9306      	str	r3, [sp, #24]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8015898:	9b11      	ldr	r3, [sp, #68]	@ 0x44
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801589a:	002f      	movs	r7, r5
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 801589c:	9305      	str	r3, [sp, #20]
				sz_rsv = 1;						/* Number of reserved sectors */
 801589e:	2501      	movs	r5, #1
 80158a0:	e774      	b.n	801578c <f_mkfs+0x194>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80158a2:	4b1b      	ldr	r3, [pc, #108]	@ (8015910 <f_mkfs+0x318>)
 80158a4:	4298      	cmp	r0, r3
 80158a6:	d900      	bls.n	80158aa <f_mkfs+0x2b2>
 80158a8:	e1ad      	b.n	8015c06 <f_mkfs+0x60e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80158aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d000      	beq.n	80158b2 <f_mkfs+0x2ba>
 80158b0:	e71a      	b.n	80156e8 <f_mkfs+0xf0>
 80158b2:	007f      	lsls	r7, r7, #1
 80158b4:	2f80      	cmp	r7, #128	@ 0x80
 80158b6:	d9d2      	bls.n	801585e <f_mkfs+0x266>
 80158b8:	e716      	b.n	80156e8 <f_mkfs+0xf0>
			st_32(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 80158ba:	0020      	movs	r0, r4
 80158bc:	9903      	ldr	r1, [sp, #12]
 80158be:	3020      	adds	r0, #32
 80158c0:	f7fe fc7b 	bl	80141ba <st_32>
 80158c4:	e1c9      	b.n	8015c5a <f_mkfs+0x662>
			st_32(buf + BS_VolID, vsn);					/* VSN */
 80158c6:	3027      	adds	r0, #39	@ 0x27
 80158c8:	f7fe fc77 	bl	80141ba <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 80158cc:	9b06      	ldr	r3, [sp, #24]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80158ce:	2280      	movs	r2, #128	@ 0x80
	*ptr++ = (BYTE)val; val >>= 8;
 80158d0:	75a3      	strb	r3, [r4, #22]
 80158d2:	466b      	mov	r3, sp
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 80158d4:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80158d6:	8b1b      	ldrh	r3, [r3, #24]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 80158d8:	490f      	ldr	r1, [pc, #60]	@ (8015918 <f_mkfs+0x320>)
	*ptr++ = (BYTE)val; val >>= 8;
 80158da:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 80158dc:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80158de:	1d63      	adds	r3, r4, #5
 80158e0:	77da      	strb	r2, [r3, #31]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80158e2:	3a57      	subs	r2, #87	@ 0x57
 80158e4:	1de3      	adds	r3, r4, #7
 80158e6:	77da      	strb	r2, [r3, #31]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 80158e8:	302b      	adds	r0, #43	@ 0x2b
 80158ea:	3a16      	subs	r2, #22
 80158ec:	e1e2      	b.n	8015cb4 <f_mkfs+0x6bc>
 80158ee:	46c0      	nop			@ (mov r8, r8)
 80158f0:	200030dc 	.word	0x200030dc
 80158f4:	08020714 	.word	0x08020714
 80158f8:	08020706 	.word	0x08020706
 80158fc:	00001007 	.word	0x00001007
 8015900:	ffff000a 	.word	0xffff000a
 8015904:	0ffeffff 	.word	0x0ffeffff
 8015908:	0000fff5 	.word	0x0000fff5
 801590c:	080206f8 	.word	0x080206f8
 8015910:	00000ff5 	.word	0x00000ff5
 8015914:	00000fff 	.word	0x00000fff
 8015918:	0802023e 	.word	0x0802023e
		if (fsty == FS_FAT32) {
 801591c:	9b01      	ldr	r3, [sp, #4]
 801591e:	2b03      	cmp	r3, #3
 8015920:	d13d      	bne.n	801599e <f_mkfs+0x3a6>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8015922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015924:	0021      	movs	r1, r4
 8015926:	1d9a      	adds	r2, r3, #6
 8015928:	9802      	ldr	r0, [sp, #8]
 801592a:	2301      	movs	r3, #1
 801592c:	f7fe fbfd 	bl	801412a <disk_write>
			memset(buf, 0, ss);
 8015930:	2280      	movs	r2, #128	@ 0x80
 8015932:	9903      	ldr	r1, [sp, #12]
 8015934:	0152      	lsls	r2, r2, #5
 8015936:	0020      	movs	r0, r4
 8015938:	f004 ff0c 	bl	801a754 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 801593c:	2352      	movs	r3, #82	@ 0x52
 801593e:	20f2      	movs	r0, #242	@ 0xf2
	*ptr++ = (BYTE)val;
 8015940:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8015942:	2172      	movs	r1, #114	@ 0x72
 8015944:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015946:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8015948:	0040      	lsls	r0, r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801594a:	330f      	adds	r3, #15
 801594c:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 801594e:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8015950:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015952:	20e6      	movs	r0, #230	@ 0xe6
 8015954:	30ff      	adds	r0, #255	@ 0xff
 8015956:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015958:	3175      	adds	r1, #117	@ 0x75
 801595a:	31ff      	adds	r1, #255	@ 0xff
 801595c:	5462      	strb	r2, [r4, r1]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 801595e:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val;
 8015960:	22e8      	movs	r2, #232	@ 0xe8
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015962:	30e9      	adds	r0, #233	@ 0xe9
	*ptr++ = (BYTE)val;
 8015964:	32ff      	adds	r2, #255	@ 0xff
 8015966:	54a3      	strb	r3, [r4, r2]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015968:	1e71      	subs	r1, r6, #1
 801596a:	30ff      	adds	r0, #255	@ 0xff
 801596c:	f7fe fc25 	bl	80141ba <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8015970:	23f6      	movs	r3, #246	@ 0xf6
 8015972:	2202      	movs	r2, #2
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8015978:	3312      	adds	r3, #18
 801597a:	3253      	adds	r2, #83	@ 0x53
 801597c:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 801597e:	4bd8      	ldr	r3, [pc, #864]	@ (8015ce0 <f_mkfs+0x6e8>)
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015980:	0021      	movs	r1, r4
	*ptr++ = (BYTE)val;
 8015982:	54e5      	strb	r5, [r4, r3]
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015986:	9802      	ldr	r0, [sp, #8]
 8015988:	1dda      	adds	r2, r3, #7
 801598a:	2301      	movs	r3, #1
 801598c:	f7fe fbcd 	bl	801412a <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015992:	0021      	movs	r1, r4
 8015994:	1c5a      	adds	r2, r3, #1
 8015996:	9802      	ldr	r0, [sp, #8]
 8015998:	2301      	movs	r3, #1
 801599a:	f7fe fbc6 	bl	801412a <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 801599e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		memset(buf, 0, sz_buf * ss);
 80159a0:	2100      	movs	r1, #0
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 80159a2:	0b1d      	lsrs	r5, r3, #12
		memset(buf, 0, sz_buf * ss);
 80159a4:	032a      	lsls	r2, r5, #12
 80159a6:	0020      	movs	r0, r4
 80159a8:	f004 fed4 	bl	801a754 <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80159ac:	9b01      	ldr	r3, [sp, #4]
 80159ae:	3b01      	subs	r3, #1
 80159b0:	1e5a      	subs	r2, r3, #1
 80159b2:	4193      	sbcs	r3, r2
 80159b4:	4acb      	ldr	r2, [pc, #812]	@ (8015ce4 <f_mkfs+0x6ec>)
 80159b6:	425b      	negs	r3, r3
 80159b8:	4694      	mov	ip, r2
 80159ba:	0e1b      	lsrs	r3, r3, #24
 80159bc:	061b      	lsls	r3, r3, #24
 80159be:	4463      	add	r3, ip
 80159c0:	9308      	str	r3, [sp, #32]
 80159c2:	2300      	movs	r3, #0
 80159c4:	9309      	str	r3, [sp, #36]	@ 0x24
			if (fsty == FS_FAT32) {
 80159c6:	9b01      	ldr	r3, [sp, #4]
 80159c8:	2b03      	cmp	r3, #3
 80159ca:	d000      	beq.n	80159ce <f_mkfs+0x3d6>
 80159cc:	e0b1      	b.n	8015b32 <f_mkfs+0x53a>
	*ptr++ = (BYTE)val; val >>= 8;
 80159ce:	33f5      	adds	r3, #245	@ 0xf5
 80159d0:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80159d2:	3307      	adds	r3, #7
 80159d4:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80159d6:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80159d8:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80159da:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80159dc:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 80159de:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 80159e0:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 80159e2:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80159e4:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 80159e6:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 80159e8:	3bf0      	subs	r3, #240	@ 0xf0
 80159ea:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80159ec:	9e06      	ldr	r6, [sp, #24]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80159ee:	9603      	str	r6, [sp, #12]
 80159f0:	42ae      	cmp	r6, r5
 80159f2:	d900      	bls.n	80159f6 <f_mkfs+0x3fe>
 80159f4:	9503      	str	r5, [sp, #12]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80159f6:	0021      	movs	r1, r4
 80159f8:	9b03      	ldr	r3, [sp, #12]
 80159fa:	9a04      	ldr	r2, [sp, #16]
 80159fc:	9802      	ldr	r0, [sp, #8]
 80159fe:	f7fe fb94 	bl	801412a <disk_write>
 8015a02:	1e01      	subs	r1, r0, #0
 8015a04:	d000      	beq.n	8015a08 <f_mkfs+0x410>
 8015a06:	e169      	b.n	8015cdc <f_mkfs+0x6e4>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 8015a08:	2280      	movs	r2, #128	@ 0x80
 8015a0a:	0020      	movs	r0, r4
 8015a0c:	0152      	lsls	r2, r2, #5
 8015a0e:	f004 fea1 	bl	801a754 <memset>
				sect += n; nsect -= n;
 8015a12:	9a03      	ldr	r2, [sp, #12]
 8015a14:	9b04      	ldr	r3, [sp, #16]
 8015a16:	4694      	mov	ip, r2
 8015a18:	4463      	add	r3, ip
 8015a1a:	9304      	str	r3, [sp, #16]
 8015a1c:	1ab6      	subs	r6, r6, r2
			} while (nsect);
 8015a1e:	d1e6      	bne.n	80159ee <f_mkfs+0x3f6>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8015a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a22:	425a      	negs	r2, r3
 8015a24:	4153      	adcs	r3, r2
 8015a26:	2201      	movs	r2, #1
 8015a28:	b2db      	uxtb	r3, r3
 8015a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015a2c:	425a      	negs	r2, r3
 8015a2e:	4153      	adcs	r3, r2
 8015a30:	9a07      	ldr	r2, [sp, #28]
 8015a32:	3301      	adds	r3, #1
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d8c6      	bhi.n	80159c6 <f_mkfs+0x3ce>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8015a38:	9b01      	ldr	r3, [sp, #4]
 8015a3a:	2b03      	cmp	r3, #3
 8015a3c:	d100      	bne.n	8015a40 <f_mkfs+0x448>
 8015a3e:	9705      	str	r7, [sp, #20]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015a40:	9e05      	ldr	r6, [sp, #20]
 8015a42:	42ae      	cmp	r6, r5
 8015a44:	d900      	bls.n	8015a48 <f_mkfs+0x450>
 8015a46:	002e      	movs	r6, r5
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8015a48:	0033      	movs	r3, r6
 8015a4a:	0021      	movs	r1, r4
 8015a4c:	9a04      	ldr	r2, [sp, #16]
 8015a4e:	9802      	ldr	r0, [sp, #8]
 8015a50:	f7fe fb6b 	bl	801412a <disk_write>
 8015a54:	2800      	cmp	r0, #0
 8015a56:	d000      	beq.n	8015a5a <f_mkfs+0x462>
 8015a58:	e140      	b.n	8015cdc <f_mkfs+0x6e4>
			sect += n; nsect -= n;
 8015a5a:	9b04      	ldr	r3, [sp, #16]
 8015a5c:	199b      	adds	r3, r3, r6
 8015a5e:	9304      	str	r3, [sp, #16]
 8015a60:	9b05      	ldr	r3, [sp, #20]
 8015a62:	1b9b      	subs	r3, r3, r6
 8015a64:	9305      	str	r3, [sp, #20]
		} while (nsect);
 8015a66:	d1eb      	bne.n	8015a40 <f_mkfs+0x448>
		sys = 0x0C;		/* FAT32X */
 8015a68:	330c      	adds	r3, #12
 8015a6a:	9304      	str	r3, [sp, #16]
	} else if (fsty == FS_FAT32) {
 8015a6c:	9b01      	ldr	r3, [sp, #4]
 8015a6e:	2b03      	cmp	r3, #3
 8015a70:	d00d      	beq.n	8015a8e <f_mkfs+0x496>
	} else if (sz_vol >= 0x10000) {
 8015a72:	2380      	movs	r3, #128	@ 0x80
		sys = 0x06;		/* FAT12/16 (large) */
 8015a74:	2106      	movs	r1, #6
	} else if (sz_vol >= 0x10000) {
 8015a76:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015a78:	025b      	lsls	r3, r3, #9
		sys = 0x06;		/* FAT12/16 (large) */
 8015a7a:	9104      	str	r1, [sp, #16]
	} else if (sz_vol >= 0x10000) {
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d206      	bcs.n	8015a8e <f_mkfs+0x496>
		sys = 0x01;		/* FAT12 */
 8015a80:	2301      	movs	r3, #1
 8015a82:	9304      	str	r3, [sp, #16]
	} else if (fsty == FS_FAT16) {
 8015a84:	9b01      	ldr	r3, [sp, #4]
 8015a86:	2b02      	cmp	r3, #2
 8015a88:	d101      	bne.n	8015a8e <f_mkfs+0x496>
		sys = 0x04;		/* FAT16 */
 8015a8a:	3302      	adds	r3, #2
 8015a8c:	9304      	str	r3, [sp, #16]
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8015a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d145      	bne.n	8015b20 <f_mkfs+0x528>
			lba[0] = sz_vol; lba[1] = 0;
 8015a94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8015a96:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
 8015a98:	9318      	str	r3, [sp, #96]	@ 0x60
 8015a9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8015a9c:	9802      	ldr	r0, [sp, #8]
 8015a9e:	aa17      	add	r2, sp, #92	@ 0x5c
			lba[0] = sz_vol; lba[1] = 0;
 8015aa0:	9319      	str	r3, [sp, #100]	@ 0x64
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8015aa2:	f7fe fb67 	bl	8014174 <disk_ioctl>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	d000      	beq.n	8015aac <f_mkfs+0x4b4>
 8015aaa:	e117      	b.n	8015cdc <f_mkfs+0x6e4>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8015aac:	2208      	movs	r2, #8
		sz_drv32 = (DWORD)sz_drv;
 8015aae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8015ab0:	9201      	str	r2, [sp, #4]
		sz_drv32 = (DWORD)sz_drv;
 8015ab2:	9303      	str	r3, [sp, #12]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8015ab4:	9a03      	ldr	r2, [sp, #12]
 8015ab6:	4b8c      	ldr	r3, [pc, #560]	@ (8015ce8 <f_mkfs+0x6f0>)
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d914      	bls.n	8015ae6 <f_mkfs+0x4ee>
 8015abc:	2680      	movs	r6, #128	@ 0x80
 8015abe:	2505      	movs	r5, #5
 8015ac0:	00f6      	lsls	r6, r6, #3
 8015ac2:	9b01      	ldr	r3, [sp, #4]
 8015ac4:	3d01      	subs	r5, #1
 8015ac6:	005b      	lsls	r3, r3, #1
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	9301      	str	r3, [sp, #4]
 8015acc:	2d00      	cmp	r5, #0
 8015ace:	d005      	beq.n	8015adc <f_mkfs+0x4e4>
 8015ad0:	0019      	movs	r1, r3
 8015ad2:	9803      	ldr	r0, [sp, #12]
 8015ad4:	f7ea fb48 	bl	8000168 <__udivsi3>
 8015ad8:	42b0      	cmp	r0, r6
 8015ada:	d8f2      	bhi.n	8015ac2 <f_mkfs+0x4ca>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8015adc:	9b01      	ldr	r3, [sp, #4]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d101      	bne.n	8015ae6 <f_mkfs+0x4ee>
 8015ae2:	33ff      	adds	r3, #255	@ 0xff
 8015ae4:	9301      	str	r3, [sp, #4]
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8015ae6:	2280      	movs	r2, #128	@ 0x80
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8015ae8:	0025      	movs	r5, r4
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8015aea:	2100      	movs	r1, #0
 8015aec:	0020      	movs	r0, r4
 8015aee:	0152      	lsls	r2, r2, #5
 8015af0:	f004 fe30 	bl	801a754 <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8015af4:	9b03      	ldr	r3, [sp, #12]
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8015af6:	35bf      	adds	r5, #191	@ 0xbf
 8015af8:	35ff      	adds	r5, #255	@ 0xff
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d81e      	bhi.n	8015b3c <f_mkfs+0x544>
	*ptr++ = (BYTE)val; val >>= 8;
 8015afe:	23ff      	movs	r3, #255	@ 0xff
 8015b00:	2255      	movs	r2, #85	@ 0x55
 8015b02:	005b      	lsls	r3, r3, #1
 8015b04:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 8015b06:	4a76      	ldr	r2, [pc, #472]	@ (8015ce0 <f_mkfs+0x6e8>)
 8015b08:	3b55      	subs	r3, #85	@ 0x55
 8015b0a:	3bff      	subs	r3, #255	@ 0xff
 8015b0c:	54a3      	strb	r3, [r4, r2]
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8015b0e:	0021      	movs	r1, r4
 8015b10:	2200      	movs	r2, #0
 8015b12:	9802      	ldr	r0, [sp, #8]
 8015b14:	3ba9      	subs	r3, #169	@ 0xa9
 8015b16:	f7fe fb08 	bl	801412a <disk_write>
 8015b1a:	2800      	cmp	r0, #0
 8015b1c:	d000      	beq.n	8015b20 <f_mkfs+0x528>
 8015b1e:	e0dd      	b.n	8015cdc <f_mkfs+0x6e4>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8015b20:	2200      	movs	r2, #0
 8015b22:	9802      	ldr	r0, [sp, #8]
 8015b24:	0011      	movs	r1, r2
 8015b26:	f7fe fb25 	bl	8014174 <disk_ioctl>
 8015b2a:	1e43      	subs	r3, r0, #1
 8015b2c:	4198      	sbcs	r0, r3
 8015b2e:	b2c0      	uxtb	r0, r0
 8015b30:	e5db      	b.n	80156ea <f_mkfs+0xf2>
				st_32(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 8015b32:	0020      	movs	r0, r4
 8015b34:	9908      	ldr	r1, [sp, #32]
 8015b36:	f7fe fb40 	bl	80141ba <st_32>
 8015b3a:	e757      	b.n	80159ec <f_mkfs+0x3f4>
 8015b3c:	ab18      	add	r3, sp, #96	@ 0x60
 8015b3e:	9305      	str	r3, [sp, #20]
 8015b40:	0023      	movs	r3, r4
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8015b42:	2601      	movs	r6, #1
 8015b44:	33ff      	adds	r3, #255	@ 0xff
 8015b46:	33ff      	adds	r3, #255	@ 0xff
 8015b48:	9306      	str	r3, [sp, #24]
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 8015b4a:	9b05      	ldr	r3, [sp, #20]
 8015b4c:	681f      	ldr	r7, [r3, #0]
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8015b4e:	2f64      	cmp	r7, #100	@ 0x64
 8015b50:	d805      	bhi.n	8015b5e <f_mkfs+0x566>
 8015b52:	d03e      	beq.n	8015bd2 <f_mkfs+0x5da>
 8015b54:	2164      	movs	r1, #100	@ 0x64
 8015b56:	9803      	ldr	r0, [sp, #12]
 8015b58:	f7ea fb06 	bl	8000168 <__udivsi3>
 8015b5c:	4347      	muls	r7, r0
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 8015b5e:	9a03      	ldr	r2, [sp, #12]
 8015b60:	19bb      	adds	r3, r7, r6
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d301      	bcc.n	8015b6a <f_mkfs+0x572>
 8015b66:	42b3      	cmp	r3, r6
 8015b68:	d235      	bcs.n	8015bd6 <f_mkfs+0x5de>
 8015b6a:	9b03      	ldr	r3, [sp, #12]
 8015b6c:	1b9f      	subs	r7, r3, r6
			st_32(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 8015b6e:	0028      	movs	r0, r5
 8015b70:	0031      	movs	r1, r6
 8015b72:	3008      	adds	r0, #8
 8015b74:	f7fe fb21 	bl	80141ba <st_32>
			st_32(pte + PTE_SizLba, sz_part32);		/* Size of partition [sector] */
 8015b78:	0028      	movs	r0, r5
 8015b7a:	0039      	movs	r1, r7
 8015b7c:	300c      	adds	r0, #12
 8015b7e:	f7fe fb1c 	bl	80141ba <st_32>
			pte[PTE_System] = sys;					/* System type */
 8015b82:	9b04      	ldr	r3, [sp, #16]
 8015b84:	0030      	movs	r0, r6
 8015b86:	712b      	strb	r3, [r5, #4]
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8015b88:	9901      	ldr	r1, [sp, #4]
 8015b8a:	f7ea fb73 	bl	8000274 <__aeabi_uidivmod>
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015b8e:	223f      	movs	r2, #63	@ 0x3f
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8015b90:	7069      	strb	r1, [r5, #1]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015b92:	2101      	movs	r1, #1
 8015b94:	0883      	lsrs	r3, r0, #2
 8015b96:	4393      	bics	r3, r2
 8015b98:	430b      	orrs	r3, r1
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8015b9a:	19f6      	adds	r6, r6, r7
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015b9c:	70ab      	strb	r3, [r5, #2]
			pte[PTE_StCyl] = (BYTE)cy;
 8015b9e:	70e8      	strb	r0, [r5, #3]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8015ba0:	9901      	ldr	r1, [sp, #4]
 8015ba2:	1e70      	subs	r0, r6, #1
 8015ba4:	f7ea fb66 	bl	8000274 <__aeabi_uidivmod>
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015ba8:	223f      	movs	r2, #63	@ 0x3f
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 8015baa:	7169      	strb	r1, [r5, #5]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015bac:	2101      	movs	r1, #1
 8015bae:	0883      	lsrs	r3, r0, #2
 8015bb0:	4393      	bics	r3, r2
 8015bb2:	430b      	orrs	r3, r1
 8015bb4:	71ab      	strb	r3, [r5, #6]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8015bb6:	9b06      	ldr	r3, [sp, #24]
			pte[PTE_EdCyl] = (BYTE)cy;
 8015bb8:	71e8      	strb	r0, [r5, #7]
			pte += SZ_PTE;		/* Next entry */
 8015bba:	3510      	adds	r5, #16
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8015bbc:	42ab      	cmp	r3, r5
 8015bbe:	d09e      	beq.n	8015afe <f_mkfs+0x506>
 8015bc0:	2e00      	cmp	r6, #0
 8015bc2:	d09c      	beq.n	8015afe <f_mkfs+0x506>
 8015bc4:	9b05      	ldr	r3, [sp, #20]
 8015bc6:	3304      	adds	r3, #4
 8015bc8:	9305      	str	r3, [sp, #20]
 8015bca:	9b03      	ldr	r3, [sp, #12]
 8015bcc:	42b3      	cmp	r3, r6
 8015bce:	d8bc      	bhi.n	8015b4a <f_mkfs+0x552>
 8015bd0:	e795      	b.n	8015afe <f_mkfs+0x506>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8015bd2:	9f03      	ldr	r7, [sp, #12]
 8015bd4:	e7c3      	b.n	8015b5e <f_mkfs+0x566>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8015bd6:	2f00      	cmp	r7, #0
 8015bd8:	d1c9      	bne.n	8015b6e <f_mkfs+0x576>
 8015bda:	e790      	b.n	8015afe <f_mkfs+0x506>
					if ((fsopt & FM_FAT32)) {
 8015bdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
			pau = sz_au;
 8015bde:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
					if ((fsopt & FM_FAT32)) {
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d000      	beq.n	8015be6 <f_mkfs+0x5ee>
 8015be4:	e5bf      	b.n	8015766 <f_mkfs+0x16e>
 8015be6:	e57f      	b.n	80156e8 <f_mkfs+0xf0>
 8015be8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d000      	beq.n	8015bf0 <f_mkfs+0x5f8>
 8015bee:	e5a7      	b.n	8015740 <f_mkfs+0x148>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8015bf0:	002f      	movs	r7, r5
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015bf2:	2d80      	cmp	r5, #128	@ 0x80
 8015bf4:	d800      	bhi.n	8015bf8 <f_mkfs+0x600>
 8015bf6:	e63e      	b.n	8015876 <f_mkfs+0x27e>
 8015bf8:	e576      	b.n	80156e8 <f_mkfs+0xf0>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8015bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8015cec <f_mkfs+0x6f4>)
 8015bfc:	4298      	cmp	r0, r3
 8015bfe:	d900      	bls.n	8015c02 <f_mkfs+0x60a>
 8015c00:	e572      	b.n	80156e8 <f_mkfs+0xf0>
 8015c02:	2301      	movs	r3, #1
 8015c04:	9301      	str	r3, [sp, #4]
		memset(buf, 0, ss);
 8015c06:	2280      	movs	r2, #128	@ 0x80
 8015c08:	2100      	movs	r1, #0
 8015c0a:	0152      	lsls	r2, r2, #5
 8015c0c:	0020      	movs	r0, r4
 8015c0e:	f004 fda1 	bl	801a754 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8015c12:	220b      	movs	r2, #11
 8015c14:	0020      	movs	r0, r4
 8015c16:	4936      	ldr	r1, [pc, #216]	@ (8015cf0 <f_mkfs+0x6f8>)
 8015c18:	f004 fe66 	bl	801a8e8 <memcpy>
	*ptr++ = (BYTE)val;
 8015c1c:	2310      	movs	r3, #16
 8015c1e:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8015c20:	9b07      	ldr	r3, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c22:	73a5      	strb	r5, [r4, #14]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8015c24:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c26:	b2ad      	uxth	r5, r5
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8015c28:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c2a:	0a2d      	lsrs	r5, r5, #8
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015c2c:	7367      	strb	r7, [r4, #13]
	*ptr++ = (BYTE)val;
 8015c2e:	73e5      	strb	r5, [r4, #15]
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8015c30:	2b03      	cmp	r3, #3
 8015c32:	d101      	bne.n	8015c38 <f_mkfs+0x640>
 8015c34:	2300      	movs	r3, #0
 8015c36:	9308      	str	r3, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c38:	9b08      	ldr	r3, [sp, #32]
		if (sz_vol < 0x10000) {
 8015c3a:	9a03      	ldr	r2, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c3c:	7463      	strb	r3, [r4, #17]
 8015c3e:	466b      	mov	r3, sp
 8015c40:	8c1b      	ldrh	r3, [r3, #32]
 8015c42:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8015c44:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 8015c46:	2380      	movs	r3, #128	@ 0x80
 8015c48:	025b      	lsls	r3, r3, #9
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d300      	bcc.n	8015c50 <f_mkfs+0x658>
 8015c4e:	e634      	b.n	80158ba <f_mkfs+0x2c2>
	*ptr++ = (BYTE)val; val >>= 8;
 8015c50:	466b      	mov	r3, sp
 8015c52:	899b      	ldrh	r3, [r3, #12]
 8015c54:	74e2      	strb	r2, [r4, #19]
 8015c56:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8015c58:	7523      	strb	r3, [r4, #20]
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015c5a:	9b03      	ldr	r3, [sp, #12]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015c5c:	0020      	movs	r0, r4
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015c5e:	469c      	mov	ip, r3
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015c60:	23f8      	movs	r3, #248	@ 0xf8
 8015c62:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c64:	3bb9      	subs	r3, #185	@ 0xb9
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015c66:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8015c68:	7623      	strb	r3, [r4, #24]
 8015c6a:	33c0      	adds	r3, #192	@ 0xc0
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015c6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 8015c6e:	76a3      	strb	r3, [r4, #26]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015c70:	301c      	adds	r0, #28
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015c72:	4465      	add	r5, ip
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015c74:	f7fe faa1 	bl	80141ba <st_32>
		if (fsty == FS_FAT32) {
 8015c78:	9b01      	ldr	r3, [sp, #4]
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8015c7a:	0029      	movs	r1, r5
 8015c7c:	0020      	movs	r0, r4
		if (fsty == FS_FAT32) {
 8015c7e:	2b03      	cmp	r3, #3
 8015c80:	d000      	beq.n	8015c84 <f_mkfs+0x68c>
 8015c82:	e620      	b.n	80158c6 <f_mkfs+0x2ce>
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8015c84:	3043      	adds	r0, #67	@ 0x43
 8015c86:	f7fe fa98 	bl	80141ba <st_32>
			st_32(buf + BPB_FATSz32, sz_fat);			/* FAT size [sector] */
 8015c8a:	0020      	movs	r0, r4
 8015c8c:	9906      	ldr	r1, [sp, #24]
 8015c8e:	3024      	adds	r0, #36	@ 0x24
 8015c90:	f7fe fa93 	bl	80141ba <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8015c94:	0023      	movs	r3, r4
 8015c96:	2202      	movs	r2, #2
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015c98:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8015c9a:	332c      	adds	r3, #44	@ 0x2c
 8015c9c:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c9e:	3a01      	subs	r2, #1
 8015ca0:	711a      	strb	r2, [r3, #4]
 8015ca2:	3205      	adds	r2, #5
 8015ca4:	719a      	strb	r2, [r3, #6]
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015ca6:	327a      	adds	r2, #122	@ 0x7a
 8015ca8:	751a      	strb	r2, [r3, #20]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015caa:	4912      	ldr	r1, [pc, #72]	@ (8015cf4 <f_mkfs+0x6fc>)
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015cac:	3a57      	subs	r2, #87	@ 0x57
 8015cae:	759a      	strb	r2, [r3, #22]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015cb0:	3047      	adds	r0, #71	@ 0x47
 8015cb2:	3a16      	subs	r2, #22
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 8015cb4:	f004 fe18 	bl	801a8e8 <memcpy>
	*ptr++ = (BYTE)val; val >>= 8;
 8015cb8:	23ff      	movs	r3, #255	@ 0xff
 8015cba:	2255      	movs	r2, #85	@ 0x55
	*ptr++ = (BYTE)val;
 8015cbc:	25aa      	movs	r5, #170	@ 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 8015cbe:	005b      	lsls	r3, r3, #1
 8015cc0:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 8015cc2:	4b07      	ldr	r3, [pc, #28]	@ (8015ce0 <f_mkfs+0x6e8>)
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8015cc4:	0021      	movs	r1, r4
	*ptr++ = (BYTE)val;
 8015cc6:	54e5      	strb	r5, [r4, r3]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8015cc8:	3bff      	subs	r3, #255	@ 0xff
 8015cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ccc:	9802      	ldr	r0, [sp, #8]
 8015cce:	3bff      	subs	r3, #255	@ 0xff
 8015cd0:	f7fe fa2b 	bl	801412a <disk_write>
 8015cd4:	9003      	str	r0, [sp, #12]
 8015cd6:	2800      	cmp	r0, #0
 8015cd8:	d100      	bne.n	8015cdc <f_mkfs+0x6e4>
 8015cda:	e61f      	b.n	801591c <f_mkfs+0x324>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8015cdc:	2001      	movs	r0, #1
 8015cde:	e504      	b.n	80156ea <f_mkfs+0xf2>
 8015ce0:	000001ff 	.word	0x000001ff
 8015ce4:	00fffff8 	.word	0x00fffff8
 8015ce8:	00002007 	.word	0x00002007
 8015cec:	00000ff5 	.word	0x00000ff5
 8015cf0:	0802021e 	.word	0x0802021e
 8015cf4:	0802022a 	.word	0x0802022a

08015cf8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8015cf8:	b530      	push	{r4, r5, lr}
 8015cfa:	000d      	movs	r5, r1
 8015cfc:	b095      	sub	sp, #84	@ 0x54
 8015cfe:	0004      	movs	r4, r0
	memset(pb, 0, sizeof (putbuff));
 8015d00:	2248      	movs	r2, #72	@ 0x48
 8015d02:	2100      	movs	r1, #0
 8015d04:	a802      	add	r0, sp, #8
 8015d06:	f004 fd25 	bl	801a754 <memset>
	pb->fp = fp;
 8015d0a:	9501      	str	r5, [sp, #4]
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8015d0c:	7821      	ldrb	r1, [r4, #0]
 8015d0e:	2900      	cmp	r1, #0
 8015d10:	d104      	bne.n	8015d1c <f_puts+0x24>
	return putc_flush(&pb);
 8015d12:	a801      	add	r0, sp, #4
 8015d14:	f7ff fab5 	bl	8015282 <putc_flush>
}
 8015d18:	b015      	add	sp, #84	@ 0x54
 8015d1a:	bd30      	pop	{r4, r5, pc}
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8015d1c:	a801      	add	r0, sp, #4
 8015d1e:	3401      	adds	r4, #1
 8015d20:	f7ff fa94 	bl	801524c <putc_bfd>
 8015d24:	e7f2      	b.n	8015d0c <f_puts+0x14>
	...

08015d28 <_ux_device_stack_alternate_setting_get>:
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015d28:	4b11      	ldr	r3, [pc, #68]	@ (8015d70 <_ux_device_stack_alternate_setting_get+0x48>)
{
 8015d2a:	0001      	movs	r1, r0
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015d2c:	681b      	ldr	r3, [r3, #0]
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8015d2e:	20ff      	movs	r0, #255	@ 0xff
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
{
 8015d32:	b510      	push	{r4, lr}
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015d34:	2a03      	cmp	r2, #3
 8015d36:	d117      	bne.n	8015d68 <_ux_device_stack_alternate_setting_get+0x40>
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015d38:	001a      	movs	r2, r3
 8015d3a:	32b4      	adds	r2, #180	@ 0xb4
 8015d3c:	6812      	ldr	r2, [r2, #0]
        while (interface_ptr != UX_NULL)
 8015d3e:	2a00      	cmp	r2, #0
 8015d40:	d101      	bne.n	8015d46 <_ux_device_stack_alternate_setting_get+0x1e>
    return(UX_ERROR);
 8015d42:	20ff      	movs	r0, #255	@ 0xff
 8015d44:	e010      	b.n	8015d68 <_ux_device_stack_alternate_setting_get+0x40>
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8015d46:	7b90      	ldrb	r0, [r2, #14]
 8015d48:	4288      	cmp	r0, r1
 8015d4a:	d10e      	bne.n	8015d6a <_ux_device_stack_alternate_setting_get+0x42>
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8015d4c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 8015d4e:	7bd2      	ldrb	r2, [r2, #15]
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015d50:	2003      	movs	r0, #3
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8015d52:	700a      	strb	r2, [r1, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8015d54:	2101      	movs	r1, #1
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015d56:	001a      	movs	r2, r3
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8015d58:	6719      	str	r1, [r3, #112]	@ 0x70
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015d5a:	3208      	adds	r2, #8
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015d5c:	335c      	adds	r3, #92	@ 0x5c
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015d5e:	67d0      	str	r0, [r2, #124]	@ 0x7c
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015d60:	0018      	movs	r0, r3
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8015d62:	000a      	movs	r2, r1
 8015d64:	f000 fefe 	bl	8016b64 <_ux_device_stack_transfer_request>
}
 8015d68:	bd10      	pop	{r4, pc}
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8015d6a:	6992      	ldr	r2, [r2, #24]
 8015d6c:	e7e7      	b.n	8015d3e <_ux_device_stack_alternate_setting_get+0x16>
 8015d6e:	46c0      	nop			@ (mov r8, r8)
 8015d70:	200030e0 	.word	0x200030e0

08015d74 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8015d74:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015d76:	4b7d      	ldr	r3, [pc, #500]	@ (8015f6c <_ux_device_stack_alternate_setting_set+0x1f8>)
{
 8015d78:	b097      	sub	sp, #92	@ 0x5c
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015d7a:	681f      	ldr	r7, [r3, #0]
{
 8015d7c:	9002      	str	r0, [sp, #8]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        return(UX_FUNCTION_NOT_SUPPORTED);
 8015d80:	2054      	movs	r0, #84	@ 0x54
{
 8015d82:	9103      	str	r1, [sp, #12]
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015d84:	2b03      	cmp	r3, #3
 8015d86:	d10a      	bne.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 8015d88:	003b      	movs	r3, r7
 8015d8a:	33b4      	adds	r3, #180	@ 0xb4
 8015d8c:	681c      	ldr	r4, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 8015d8e:	2c00      	cmp	r4, #0
 8015d90:	d107      	bne.n	8015da2 <_ux_device_stack_alternate_setting_set+0x2e>
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8015d92:	2002      	movs	r0, #2
 8015d94:	2252      	movs	r2, #82	@ 0x52
 8015d96:	2107      	movs	r1, #7
 8015d98:	f000 ff4c 	bl	8016c34 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8015d9c:	2052      	movs	r0, #82	@ 0x52
    }

    /* Return error completion.  */
    return(UX_ERROR);
#endif
}
 8015d9e:	b017      	add	sp, #92	@ 0x5c
 8015da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8015da2:	7ba3      	ldrb	r3, [r4, #14]
 8015da4:	9a02      	ldr	r2, [sp, #8]
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d001      	beq.n	8015dae <_ux_device_stack_alternate_setting_set+0x3a>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8015daa:	69a4      	ldr	r4, [r4, #24]
 8015dac:	e7ef      	b.n	8015d8e <_ux_device_stack_alternate_setting_set+0x1a>
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8015dae:	7be3      	ldrb	r3, [r4, #15]
 8015db0:	9a03      	ldr	r2, [sp, #12]
        return(UX_SUCCESS);       
 8015db2:	2000      	movs	r0, #0
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8015db4:	4293      	cmp	r3, r2
 8015db6:	d0f2      	beq.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015db8:	003b      	movs	r3, r7
 8015dba:	33cc      	adds	r3, #204	@ 0xcc
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8015dbc:	cb60      	ldmia	r3!, {r5, r6}
    while (device_framework_length != 0)
 8015dbe:	2e00      	cmp	r6, #0
 8015dc0:	d019      	beq.n	8015df6 <_ux_device_stack_alternate_setting_set+0x82>
        descriptor_length =  (ULONG) *device_framework;
 8015dc2:	782b      	ldrb	r3, [r5, #0]
 8015dc4:	9301      	str	r3, [sp, #4]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8015dc6:	786b      	ldrb	r3, [r5, #1]
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d000      	beq.n	8015dce <_ux_device_stack_alternate_setting_set+0x5a>
 8015dcc:	e0ca      	b.n	8015f64 <_ux_device_stack_alternate_setting_set+0x1f0>
            _ux_utility_descriptor_parse(device_framework,
 8015dce:	2208      	movs	r2, #8
 8015dd0:	ab05      	add	r3, sp, #20
 8015dd2:	0028      	movs	r0, r5
 8015dd4:	4966      	ldr	r1, [pc, #408]	@ (8015f70 <_ux_device_stack_alternate_setting_set+0x1fc>)
 8015dd6:	f000 ff94 	bl	8016d02 <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 8015dda:	ab04      	add	r3, sp, #16
 8015ddc:	7a5a      	ldrb	r2, [r3, #9]
 8015dde:	003b      	movs	r3, r7
 8015de0:	33a4      	adds	r3, #164	@ 0xa4
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	d000      	beq.n	8015dea <_ux_device_stack_alternate_setting_set+0x76>
 8015de8:	e0bc      	b.n	8015f64 <_ux_device_stack_alternate_setting_set+0x1f0>
                device_framework_length = configuration_descriptor.wTotalLength;
 8015dea:	ab04      	add	r3, sp, #16
 8015dec:	88db      	ldrh	r3, [r3, #6]
 8015dee:	9301      	str	r3, [sp, #4]
                while (device_framework_length != 0)
 8015df0:	9b01      	ldr	r3, [sp, #4]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d101      	bne.n	8015dfa <_ux_device_stack_alternate_setting_set+0x86>
    return(UX_ERROR);
 8015df6:	20ff      	movs	r0, #255	@ 0xff
 8015df8:	e7d1      	b.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8015dfa:	786b      	ldrb	r3, [r5, #1]
                    descriptor_length =  (ULONG) *device_framework;
 8015dfc:	782e      	ldrb	r6, [r5, #0]
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8015dfe:	2b04      	cmp	r3, #4
 8015e00:	d000      	beq.n	8015e04 <_ux_device_stack_alternate_setting_set+0x90>
 8015e02:	e0aa      	b.n	8015f5a <_ux_device_stack_alternate_setting_set+0x1e6>
                        _ux_utility_descriptor_parse(device_framework,
 8015e04:	2209      	movs	r2, #9
 8015e06:	ab08      	add	r3, sp, #32
 8015e08:	0028      	movs	r0, r5
 8015e0a:	495a      	ldr	r1, [pc, #360]	@ (8015f74 <_ux_device_stack_alternate_setting_set+0x200>)
 8015e0c:	f000 ff79 	bl	8016d02 <_ux_utility_descriptor_parse>
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8015e10:	ab04      	add	r3, sp, #16
 8015e12:	7c9b      	ldrb	r3, [r3, #18]
 8015e14:	9a02      	ldr	r2, [sp, #8]
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d000      	beq.n	8015e1c <_ux_device_stack_alternate_setting_set+0xa8>
 8015e1a:	e09e      	b.n	8015f5a <_ux_device_stack_alternate_setting_set+0x1e6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8015e1c:	ab04      	add	r3, sp, #16
 8015e1e:	7cdb      	ldrb	r3, [r3, #19]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8015e20:	9a03      	ldr	r2, [sp, #12]
 8015e22:	4293      	cmp	r3, r2
 8015e24:	d000      	beq.n	8015e28 <_ux_device_stack_alternate_setting_set+0xb4>
 8015e26:	e098      	b.n	8015f5a <_ux_device_stack_alternate_setting_set+0x1e6>
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8015e28:	69e6      	ldr	r6, [r4, #28]
                            while (endpoint != UX_NULL)
 8015e2a:	2e00      	cmp	r6, #0
 8015e2c:	d125      	bne.n	8015e7a <_ux_device_stack_alternate_setting_set+0x106>
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015e2e:	003b      	movs	r3, r7
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 8015e30:	61e6      	str	r6, [r4, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015e32:	3324      	adds	r3, #36	@ 0x24
                            device_framework_length -=  (ULONG) *device_framework;
 8015e34:	9a01      	ldr	r2, [sp, #4]
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015e36:	9303      	str	r3, [sp, #12]
                            device_framework_length -=  (ULONG) *device_framework;
 8015e38:	782b      	ldrb	r3, [r5, #0]
 8015e3a:	1ad6      	subs	r6, r2, r3
                            device_framework +=  (ULONG) *device_framework;
 8015e3c:	18eb      	adds	r3, r5, r3
                                device_framework +=  descriptor_length;
 8015e3e:	9301      	str	r3, [sp, #4]
                            while (device_framework_length != 0)
 8015e40:	2e00      	cmp	r6, #0
 8015e42:	d12c      	bne.n	8015e9e <_ux_device_stack_alternate_setting_set+0x12a>
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8015e44:	220c      	movs	r2, #12
 8015e46:	a908      	add	r1, sp, #32
 8015e48:	18a0      	adds	r0, r4, r2
 8015e4a:	f001 f8a9 	bl	8016fa0 <_ux_utility_memory_copy>
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8015e4e:	4b47      	ldr	r3, [pc, #284]	@ (8015f6c <_ux_device_stack_alternate_setting_set+0x1f8>)
                                return (UX_NO_CLASS_MATCH);
 8015e50:	2057      	movs	r0, #87	@ 0x57
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	7ba3      	ldrb	r3, [r4, #14]
 8015e56:	3340      	adds	r3, #64	@ 0x40
 8015e58:	009b      	lsls	r3, r3, #2
 8015e5a:	18d3      	adds	r3, r2, r3
 8015e5c:	685b      	ldr	r3, [r3, #4]
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d09d      	beq.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>
 8015e62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015e64:	2a00      	cmp	r2, #0
 8015e66:	d09a      	beq.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8015e68:	2206      	movs	r2, #6
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8015e6a:	9313      	str	r3, [sp, #76]	@ 0x4c
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 8015e6c:	661c      	str	r4, [r3, #96]	@ 0x60
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8015e6e:	920b      	str	r2, [sp, #44]	@ 0x2c
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8015e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 8015e72:	940d      	str	r4, [sp, #52]	@ 0x34
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8015e74:	a80b      	add	r0, sp, #44	@ 0x2c
 8015e76:	4798      	blx	r3
                            return(status); 
 8015e78:	e791      	b.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 8015e7a:	2126      	movs	r1, #38	@ 0x26
 8015e7c:	0030      	movs	r0, r6
 8015e7e:	f000 fe6b 	bl	8016b58 <_ux_device_stack_transfer_all_request_abort>
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8015e82:	0032      	movs	r2, r6
 8015e84:	69bb      	ldr	r3, [r7, #24]
 8015e86:	210f      	movs	r1, #15
 8015e88:	0038      	movs	r0, r7
 8015e8a:	4798      	blx	r3
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8015e8c:	2300      	movs	r3, #0
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8015e8e:	6972      	ldr	r2, [r6, #20]
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8015e90:	6033      	str	r3, [r6, #0]
                                endpoint -> ux_slave_endpoint_state =  0;
 8015e92:	6073      	str	r3, [r6, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8015e94:	6173      	str	r3, [r6, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8015e96:	61b3      	str	r3, [r6, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8015e98:	61f3      	str	r3, [r6, #28]
                                endpoint =  next_endpoint;
 8015e9a:	0016      	movs	r6, r2
 8015e9c:	e7c5      	b.n	8015e2a <_ux_device_stack_alternate_setting_set+0xb6>
                                descriptor_length =  (ULONG) *device_framework;
 8015e9e:	9b01      	ldr	r3, [sp, #4]
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	9302      	str	r3, [sp, #8]
                                descriptor_type =  *(device_framework + 1);
 8015ea4:	9b01      	ldr	r3, [sp, #4]
 8015ea6:	785b      	ldrb	r3, [r3, #1]
                                switch(descriptor_type)
 8015ea8:	2b04      	cmp	r3, #4
 8015eaa:	d003      	beq.n	8015eb4 <_ux_device_stack_alternate_setting_set+0x140>
 8015eac:	2b05      	cmp	r3, #5
 8015eae:	d003      	beq.n	8015eb8 <_ux_device_stack_alternate_setting_set+0x144>
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	d145      	bne.n	8015f40 <_ux_device_stack_alternate_setting_set+0x1cc>
 8015eb4:	9e02      	ldr	r6, [sp, #8]
 8015eb6:	e043      	b.n	8015f40 <_ux_device_stack_alternate_setting_set+0x1cc>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 8015eb8:	003b      	movs	r3, r7
 8015eba:	33c0      	adds	r3, #192	@ 0xc0
 8015ebc:	681d      	ldr	r5, [r3, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8015ebe:	3304      	adds	r3, #4
 8015ec0:	681b      	ldr	r3, [r3, #0]
                                    while (endpoints_pool_number != 0)
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d101      	bne.n	8015eca <_ux_device_stack_alternate_setting_set+0x156>
                                        return(UX_MEMORY_INSUFFICIENT);
 8015ec6:	2012      	movs	r0, #18
 8015ec8:	e769      	b.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8015eca:	682a      	ldr	r2, [r5, #0]
 8015ecc:	2a00      	cmp	r2, #0
 8015ece:	d130      	bne.n	8015f32 <_ux_device_stack_alternate_setting_set+0x1be>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	602b      	str	r3, [r5, #0]
                                    _ux_utility_descriptor_parse(device_framework,
 8015ed4:	002b      	movs	r3, r5
 8015ed6:	4928      	ldr	r1, [pc, #160]	@ (8015f78 <_ux_device_stack_alternate_setting_set+0x204>)
 8015ed8:	330c      	adds	r3, #12
 8015eda:	3206      	adds	r2, #6
 8015edc:	9801      	ldr	r0, [sp, #4]
 8015ede:	f000 ff10 	bl	8016d02 <_ux_utility_descriptor_parse>
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015ee2:	4a22      	ldr	r2, [pc, #136]	@ (8015f6c <_ux_device_stack_alternate_setting_set+0x1f8>)
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8015ee4:	8a29      	ldrh	r1, [r5, #16]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015ee6:	6812      	ldr	r2, [r2, #0]
                                    max_transfer_length =
 8015ee8:	054b      	lsls	r3, r1, #21
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015eea:	32fc      	adds	r2, #252	@ 0xfc
 8015eec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
                                    max_transfer_length =
 8015eee:	0d5b      	lsrs	r3, r3, #21
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015ef0:	2a02      	cmp	r2, #2
 8015ef2:	d10c      	bne.n	8015f0e <_ux_device_stack_alternate_setting_set+0x19a>
 8015ef4:	2001      	movs	r0, #1
 8015ef6:	7bea      	ldrb	r2, [r5, #15]
 8015ef8:	4202      	tst	r2, r0
 8015efa:	d008      	beq.n	8015f0e <_ux_device_stack_alternate_setting_set+0x19a>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8015efc:	20c0      	movs	r0, #192	@ 0xc0
 8015efe:	000a      	movs	r2, r1
 8015f00:	0140      	lsls	r0, r0, #5
 8015f02:	4002      	ands	r2, r0
                                        if (n_trans)
 8015f04:	4201      	tst	r1, r0
 8015f06:	d002      	beq.n	8015f0e <_ux_device_stack_alternate_setting_set+0x19a>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8015f08:	0ad2      	lsrs	r2, r2, #11
                                            n_trans ++;
 8015f0a:	3201      	adds	r2, #1
                                            max_transfer_length *= n_trans;
 8015f0c:	4353      	muls	r3, r2
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8015f0e:	642b      	str	r3, [r5, #64]	@ 0x40
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8015f10:	2301      	movs	r3, #1
 8015f12:	425b      	negs	r3, r3
 8015f14:	656b      	str	r3, [r5, #84]	@ 0x54
                                    endpoint -> ux_slave_endpoint_device =  device;
 8015f16:	9b03      	ldr	r3, [sp, #12]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015f18:	002a      	movs	r2, r5
                                    endpoint -> ux_slave_endpoint_device =  device;
 8015f1a:	61eb      	str	r3, [r5, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015f1c:	210e      	movs	r1, #14
 8015f1e:	0038      	movs	r0, r7
 8015f20:	69bb      	ldr	r3, [r7, #24]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8015f22:	62ad      	str	r5, [r5, #40]	@ 0x28
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8015f24:	61ac      	str	r4, [r5, #24]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015f26:	4798      	blx	r3
                                    if (status != UX_SUCCESS)
 8015f28:	2800      	cmp	r0, #0
 8015f2a:	d005      	beq.n	8015f38 <_ux_device_stack_alternate_setting_set+0x1c4>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	602b      	str	r3, [r5, #0]
                                        return(status);
 8015f30:	e735      	b.n	8015d9e <_ux_device_stack_alternate_setting_set+0x2a>
                                        endpoint++;
 8015f32:	3568      	adds	r5, #104	@ 0x68
                                       endpoints_pool_number--; 
 8015f34:	3b01      	subs	r3, #1
 8015f36:	e7c4      	b.n	8015ec2 <_ux_device_stack_alternate_setting_set+0x14e>
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8015f38:	69e3      	ldr	r3, [r4, #28]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d107      	bne.n	8015f4e <_ux_device_stack_alternate_setting_set+0x1da>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 8015f3e:	61e5      	str	r5, [r4, #28]
                                device_framework +=  descriptor_length;
 8015f40:	9a02      	ldr	r2, [sp, #8]
                                device_framework_length -=  descriptor_length;
 8015f42:	9b02      	ldr	r3, [sp, #8]
                                device_framework +=  descriptor_length;
 8015f44:	4694      	mov	ip, r2
                                device_framework_length -=  descriptor_length;
 8015f46:	1af6      	subs	r6, r6, r3
                                device_framework +=  descriptor_length;
 8015f48:	9b01      	ldr	r3, [sp, #4]
 8015f4a:	4463      	add	r3, ip
 8015f4c:	e777      	b.n	8015e3e <_ux_device_stack_alternate_setting_set+0xca>
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8015f4e:	001a      	movs	r2, r3
 8015f50:	695b      	ldr	r3, [r3, #20]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d1fb      	bne.n	8015f4e <_ux_device_stack_alternate_setting_set+0x1da>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8015f56:	6155      	str	r5, [r2, #20]
 8015f58:	e7f2      	b.n	8015f40 <_ux_device_stack_alternate_setting_set+0x1cc>
                    device_framework_length -=  descriptor_length;
 8015f5a:	9b01      	ldr	r3, [sp, #4]
                    device_framework +=  descriptor_length;
 8015f5c:	19ad      	adds	r5, r5, r6
                    device_framework_length -=  descriptor_length;
 8015f5e:	1b9b      	subs	r3, r3, r6
 8015f60:	9301      	str	r3, [sp, #4]
                    device_framework +=  descriptor_length;
 8015f62:	e745      	b.n	8015df0 <_ux_device_stack_alternate_setting_set+0x7c>
        device_framework_length -=  descriptor_length;
 8015f64:	9b01      	ldr	r3, [sp, #4]
 8015f66:	1af6      	subs	r6, r6, r3
        device_framework +=  descriptor_length;
 8015f68:	18ed      	adds	r5, r5, r3
 8015f6a:	e728      	b.n	8015dbe <_ux_device_stack_alternate_setting_set+0x4a>
 8015f6c:	200030e0 	.word	0x200030e0
 8015f70:	20000243 	.word	0x20000243
 8015f74:	2000023a 	.word	0x2000023a
 8015f78:	20000259 	.word	0x20000259

08015f7c <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8015f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f7e:	001f      	movs	r7, r3

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8015f80:	2300      	movs	r3, #0
{
 8015f82:	b08f      	sub	sp, #60	@ 0x3c
 8015f84:	000e      	movs	r6, r1
 8015f86:	9201      	str	r2, [sp, #4]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8015f88:	a902      	add	r1, sp, #8
 8015f8a:	223f      	movs	r2, #63	@ 0x3f
{
 8015f8c:	0005      	movs	r5, r0
UINT                        class_name_length =  0;
 8015f8e:	9302      	str	r3, [sp, #8]
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8015f90:	f001 f851 	bl	8017036 <_ux_utility_string_length_check>
    if (status)
 8015f94:	2800      	cmp	r0, #0
 8015f96:	d121      	bne.n	8015fdc <_ux_device_stack_class_register+0x60>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015f98:	4b13      	ldr	r3, [pc, #76]	@ (8015fe8 <_ux_device_stack_class_register+0x6c>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	33fc      	adds	r3, #252	@ 0xfc

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015f9e:	cb18      	ldmia	r3, {r3, r4}
 8015fa0:	4283      	cmp	r3, r0
 8015fa2:	d101      	bne.n	8015fa8 <_ux_device_stack_class_register+0x2c>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 8015fa4:	2012      	movs	r0, #18
 8015fa6:	e019      	b.n	8015fdc <_ux_device_stack_class_register+0x60>
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 8015fa8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015faa:	2a00      	cmp	r2, #0
 8015fac:	d118      	bne.n	8015fe0 <_ux_device_stack_class_register+0x64>
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8015fae:	9a02      	ldr	r2, [sp, #8]
 8015fb0:	0020      	movs	r0, r4
 8015fb2:	0029      	movs	r1, r5
 8015fb4:	3201      	adds	r2, #1
 8015fb6:	f000 fff3 	bl	8016fa0 <_ux_utility_memory_copy>
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8015fba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8015fbc:	6466      	str	r6, [r4, #68]	@ 0x44
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8015fbe:	6563      	str	r3, [r4, #84]	@ 0x54
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8015fc0:	9b01      	ldr	r3, [sp, #4]
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8015fc2:	65a7      	str	r7, [r4, #88]	@ 0x58
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8015fc4:	65e3      	str	r3, [r4, #92]	@ 0x5c
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 8015fc6:	2305      	movs	r3, #5
 8015fc8:	9303      	str	r3, [sp, #12]
            command.ux_slave_class_command_parameter  =  parameter;
 8015fca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            status = class_entry_function(&command);
 8015fcc:	a803      	add	r0, sp, #12
            command.ux_slave_class_command_parameter  =  parameter;
 8015fce:	930c      	str	r3, [sp, #48]	@ 0x30
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8015fd0:	940b      	str	r4, [sp, #44]	@ 0x2c
            status = class_entry_function(&command);
 8015fd2:	47b0      	blx	r6
            if (status != UX_SUCCESS)
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	d101      	bne.n	8015fdc <_ux_device_stack_class_register+0x60>
            class_inst -> ux_slave_class_status = UX_USED;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8015fdc:	b00f      	add	sp, #60	@ 0x3c
 8015fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        class_inst ++;
 8015fe0:	3464      	adds	r4, #100	@ 0x64
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015fe2:	3001      	adds	r0, #1
 8015fe4:	e7dc      	b.n	8015fa0 <_ux_device_stack_class_register+0x24>
 8015fe6:	46c0      	nop			@ (mov r8, r8)
 8015fe8:	200030e0 	.word	0x200030e0

08015fec <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8015fec:	b570      	push	{r4, r5, r6, lr}
 8015fee:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015ff0:	4b17      	ldr	r3, [pc, #92]	@ (8016050 <_ux_device_stack_clear_feature+0x64>)

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8015ff2:	002c      	movs	r4, r5
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015ff4:	6818      	ldr	r0, [r3, #0]
    switch (request_type & UX_REQUEST_TARGET)
 8015ff6:	2303      	movs	r3, #3
 8015ff8:	401c      	ands	r4, r3
 8015ffa:	421d      	tst	r5, r3
 8015ffc:	d007      	beq.n	801600e <_ux_device_stack_clear_feature+0x22>
 8015ffe:	2c02      	cmp	r4, #2
 8016000:	d010      	beq.n	8016024 <_ux_device_stack_clear_feature+0x38>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016002:	0002      	movs	r2, r0

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016004:	2114      	movs	r1, #20
 8016006:	6983      	ldr	r3, [r0, #24]
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016008:	323c      	adds	r2, #60	@ 0x3c
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801600a:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801600c:	e008      	b.n	8016020 <_ux_device_stack_clear_feature+0x34>
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801600e:	2901      	cmp	r1, #1
 8016010:	d106      	bne.n	8016020 <_ux_device_stack_clear_feature+0x34>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8016012:	0003      	movs	r3, r0
 8016014:	33fc      	adds	r3, #252	@ 0xfc
 8016016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
                return (UX_FUNCTION_NOT_SUPPORTED);
 8016018:	2054      	movs	r0, #84	@ 0x54
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801601a:	2a00      	cmp	r2, #0
 801601c:	d001      	beq.n	8016022 <_ux_device_stack_clear_feature+0x36>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 801601e:	655c      	str	r4, [r3, #84]	@ 0x54
                    return(UX_SUCCESS);
 8016020:	2000      	movs	r0, #0
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
}
 8016022:	bd70      	pop	{r4, r5, r6, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016024:	0003      	movs	r3, r0
 8016026:	33b4      	adds	r3, #180	@ 0xb4
 8016028:	681b      	ldr	r3, [r3, #0]
        while (interface_ptr != UX_NULL)
 801602a:	2b00      	cmp	r3, #0
 801602c:	d0e9      	beq.n	8016002 <_ux_device_stack_clear_feature+0x16>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 801602e:	69dc      	ldr	r4, [r3, #28]
            while (endpoint_target != UX_NULL)
 8016030:	2c00      	cmp	r4, #0
 8016032:	d101      	bne.n	8016038 <_ux_device_stack_clear_feature+0x4c>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8016034:	699b      	ldr	r3, [r3, #24]
 8016036:	e7f8      	b.n	801602a <_ux_device_stack_clear_feature+0x3e>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8016038:	7ba1      	ldrb	r1, [r4, #14]
 801603a:	4291      	cmp	r1, r2
 801603c:	d106      	bne.n	801604c <_ux_device_stack_clear_feature+0x60>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 801603e:	6983      	ldr	r3, [r0, #24]
 8016040:	0022      	movs	r2, r4
 8016042:	2110      	movs	r1, #16
 8016044:	4798      	blx	r3
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8016046:	2300      	movs	r3, #0
 8016048:	6063      	str	r3, [r4, #4]
                    return(UX_SUCCESS);
 801604a:	e7e9      	b.n	8016020 <_ux_device_stack_clear_feature+0x34>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801604c:	6964      	ldr	r4, [r4, #20]
 801604e:	e7ef      	b.n	8016030 <_ux_device_stack_clear_feature+0x44>
 8016050:	200030e0 	.word	0x200030e0

08016054 <_ux_device_stack_configuration_get>:
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016054:	4b08      	ldr	r3, [pc, #32]	@ (8016078 <_ux_device_stack_configuration_get+0x24>)
{
 8016056:	b510      	push	{r4, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016058:	6818      	ldr	r0, [r3, #0]
    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801605a:	0002      	movs	r2, r0
 801605c:	32a4      	adds	r2, #164	@ 0xa4
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801605e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8016060:	6812      	ldr	r2, [r2, #0]
 8016062:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016064:	0003      	movs	r3, r0
 8016066:	2203      	movs	r2, #3
 8016068:	3308      	adds	r3, #8
 801606a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801606c:	3a02      	subs	r2, #2
 801606e:	0011      	movs	r1, r2
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016070:	305c      	adds	r0, #92	@ 0x5c
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8016072:	f000 fd77 	bl	8016b64 <_ux_device_stack_transfer_request>

    /* Return the function status.  */
    return(status);
}
 8016076:	bd10      	pop	{r4, pc}
 8016078:	200030e0 	.word	0x200030e0

0801607c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 801607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801607e:	b09b      	sub	sp, #108	@ 0x6c
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8016080:	220c      	movs	r2, #12
{
 8016082:	9002      	str	r0, [sp, #8]
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8016084:	2100      	movs	r1, #0
 8016086:	a809      	add	r0, sp, #36	@ 0x24
 8016088:	f004 fb64 	bl	801a754 <memset>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801608c:	4b75      	ldr	r3, [pc, #468]	@ (8016264 <_ux_device_stack_configuration_set+0x1e8>)
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 801608e:	9a02      	ldr	r2, [sp, #8]
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016090:	681f      	ldr	r7, [r3, #0]
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8016092:	003b      	movs	r3, r7
 8016094:	33a4      	adds	r3, #164	@ 0xa4
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4293      	cmp	r3, r2
 801609a:	d059      	beq.n	8016150 <_ux_device_stack_configuration_set+0xd4>
        return(UX_SUCCESS);

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 801609c:	003b      	movs	r3, r7
 801609e:	33cc      	adds	r3, #204	@ 0xcc
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	9301      	str	r3, [sp, #4]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80160a4:	003b      	movs	r3, r7
 80160a6:	33d0      	adds	r3, #208	@ 0xd0
 80160a8:	681c      	ldr	r4, [r3, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 80160aa:	2c00      	cmp	r4, #0
 80160ac:	d105      	bne.n	80160ba <_ux_device_stack_configuration_set+0x3e>
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 80160ae:	9b02      	ldr	r3, [sp, #8]
        return(UX_ERROR);
 80160b0:	20ff      	movs	r0, #255	@ 0xff
    if (device_framework_length == 0 && configuration_value != 0)
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d016      	beq.n	80160e4 <_ux_device_stack_configuration_set+0x68>
    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);

    /* Configuration mounted. */
    return(UX_SUCCESS);
}
 80160b6:	b01b      	add	sp, #108	@ 0x6c
 80160b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        descriptor_length =  (ULONG) *device_framework;
 80160ba:	9b01      	ldr	r3, [sp, #4]
 80160bc:	781e      	ldrb	r6, [r3, #0]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80160be:	785b      	ldrb	r3, [r3, #1]
 80160c0:	2b02      	cmp	r3, #2
 80160c2:	d004      	beq.n	80160ce <_ux_device_stack_configuration_set+0x52>
        device_framework += descriptor_length;
 80160c4:	9b01      	ldr	r3, [sp, #4]
        device_framework_length -= descriptor_length;
 80160c6:	1ba4      	subs	r4, r4, r6
        device_framework += descriptor_length;
 80160c8:	199b      	adds	r3, r3, r6
 80160ca:	9301      	str	r3, [sp, #4]
 80160cc:	e7ed      	b.n	80160aa <_ux_device_stack_configuration_set+0x2e>
            _ux_utility_descriptor_parse(device_framework,
 80160ce:	ad09      	add	r5, sp, #36	@ 0x24
 80160d0:	002b      	movs	r3, r5
 80160d2:	2208      	movs	r2, #8
 80160d4:	4964      	ldr	r1, [pc, #400]	@ (8016268 <_ux_device_stack_configuration_set+0x1ec>)
 80160d6:	9801      	ldr	r0, [sp, #4]
 80160d8:	f000 fe13 	bl	8016d02 <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 80160dc:	796b      	ldrb	r3, [r5, #5]
 80160de:	9a02      	ldr	r2, [sp, #8]
 80160e0:	4293      	cmp	r3, r2
 80160e2:	d1ef      	bne.n	80160c4 <_ux_device_stack_configuration_set+0x48>
    if (device -> ux_slave_device_configuration_selected)
 80160e4:	003d      	movs	r5, r7
 80160e6:	35a4      	adds	r5, #164	@ 0xa4
 80160e8:	682b      	ldr	r3, [r5, #0]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d132      	bne.n	8016154 <_ux_device_stack_configuration_set+0xd8>
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80160ee:	2301      	movs	r3, #1
    device -> ux_slave_device_configuration_selected =  0;
 80160f0:	2400      	movs	r4, #0
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80160f2:	2201      	movs	r2, #1
    device -> ux_slave_device_configuration_selected =  0;
 80160f4:	602c      	str	r4, [r5, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80160f6:	2113      	movs	r1, #19
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80160f8:	627b      	str	r3, [r7, #36]	@ 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80160fa:	0038      	movs	r0, r7
 80160fc:	69bb      	ldr	r3, [r7, #24]
 80160fe:	4798      	blx	r3
    if (configuration_value == 0)
 8016100:	9b02      	ldr	r3, [sp, #8]
 8016102:	42a3      	cmp	r3, r4
 8016104:	d024      	beq.n	8016150 <_ux_device_stack_configuration_set+0xd4>
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8016106:	9b02      	ldr	r3, [sp, #8]
    _ux_utility_descriptor_parse(device_framework,
 8016108:	2208      	movs	r2, #8
    device -> ux_slave_device_configuration_selected =  configuration_value;
 801610a:	602b      	str	r3, [r5, #0]
    _ux_utility_descriptor_parse(device_framework,
 801610c:	003b      	movs	r3, r7
 801610e:	4956      	ldr	r1, [pc, #344]	@ (8016268 <_ux_device_stack_configuration_set+0x1ec>)
 8016110:	33a8      	adds	r3, #168	@ 0xa8
 8016112:	9801      	ldr	r0, [sp, #4]
 8016114:	f000 fdf5 	bl	8016d02 <_ux_utility_descriptor_parse>
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8016118:	ab08      	add	r3, sp, #32
 801611a:	7adb      	ldrb	r3, [r3, #11]
 801611c:	4951      	ldr	r1, [pc, #324]	@ (8016264 <_ux_device_stack_configuration_set+0x1e8>)
 801611e:	065a      	lsls	r2, r3, #25
 8016120:	6809      	ldr	r1, [r1, #0]
 8016122:	0fd2      	lsrs	r2, r2, #31
 8016124:	3201      	adds	r2, #1
 8016126:	31fc      	adds	r1, #252	@ 0xfc
 8016128:	64ca      	str	r2, [r1, #76]	@ 0x4c
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 801612a:	2201      	movs	r2, #1
    iad_flag =  UX_FALSE;
 801612c:	0025      	movs	r5, r4
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 801612e:	115b      	asrs	r3, r3, #5
 8016130:	4013      	ands	r3, r2
 8016132:	650b      	str	r3, [r1, #80]	@ 0x50
    device_framework_length =  configuration_descriptor.wTotalLength;
 8016134:	ab08      	add	r3, sp, #32
 8016136:	88db      	ldrh	r3, [r3, #6]
ULONG                           iad_first_interface =  0;
 8016138:	9406      	str	r4, [sp, #24]
    device_framework_length =  configuration_descriptor.wTotalLength;
 801613a:	9303      	str	r3, [sp, #12]
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 801613c:	9404      	str	r4, [sp, #16]
    while (device_framework_length != 0)
 801613e:	9b03      	ldr	r3, [sp, #12]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d11d      	bne.n	8016180 <_ux_device_stack_configuration_set+0x104>
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8016144:	2203      	movs	r2, #3
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8016146:	2113      	movs	r1, #19
 8016148:	0038      	movs	r0, r7
 801614a:	69bb      	ldr	r3, [r7, #24]
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 801614c:	627a      	str	r2, [r7, #36]	@ 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 801614e:	4798      	blx	r3
        return(UX_SUCCESS);
 8016150:	2000      	movs	r0, #0
 8016152:	e7b0      	b.n	80160b6 <_ux_device_stack_configuration_set+0x3a>
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016154:	003b      	movs	r3, r7
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8016156:	2603      	movs	r6, #3
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016158:	33b4      	adds	r3, #180	@ 0xb4
 801615a:	681c      	ldr	r4, [r3, #0]
        while (interface_ptr != UX_NULL)
 801615c:	2c00      	cmp	r4, #0
 801615e:	d0c6      	beq.n	80160ee <_ux_device_stack_configuration_set+0x72>
            class_inst =  interface_ptr -> ux_slave_interface_class;
 8016160:	6863      	ldr	r3, [r4, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8016162:	960f      	str	r6, [sp, #60]	@ 0x3c
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8016164:	9411      	str	r4, [sp, #68]	@ 0x44
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8016166:	9317      	str	r3, [sp, #92]	@ 0x5c
            if (class_inst != UX_NULL)
 8016168:	2b00      	cmp	r3, #0
 801616a:	d002      	beq.n	8016172 <_ux_device_stack_configuration_set+0xf6>
                class_inst -> ux_slave_class_entry_function(&class_command);
 801616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801616e:	a80f      	add	r0, sp, #60	@ 0x3c
 8016170:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8016172:	69a3      	ldr	r3, [r4, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 8016174:	0020      	movs	r0, r4
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8016176:	9303      	str	r3, [sp, #12]
            _ux_device_stack_interface_delete(interface_ptr);
 8016178:	f000 fb98 	bl	80168ac <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
 801617c:	9c03      	ldr	r4, [sp, #12]
 801617e:	e7ed      	b.n	801615c <_ux_device_stack_configuration_set+0xe0>
        descriptor_length =  (ULONG) *device_framework;
 8016180:	9b01      	ldr	r3, [sp, #4]
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	9307      	str	r3, [sp, #28]
        descriptor_type =  *(device_framework + 1);
 8016186:	9b01      	ldr	r3, [sp, #4]
 8016188:	785b      	ldrb	r3, [r3, #1]
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 801618a:	2b0b      	cmp	r3, #11
 801618c:	d10e      	bne.n	80161ac <_ux_device_stack_configuration_set+0x130>
            iad_flag = UX_TRUE;
 801618e:	2501      	movs	r5, #1
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8016190:	9b01      	ldr	r3, [sp, #4]
 8016192:	789b      	ldrb	r3, [r3, #2]
 8016194:	9306      	str	r3, [sp, #24]
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8016196:	9b01      	ldr	r3, [sp, #4]
 8016198:	78dc      	ldrb	r4, [r3, #3]
        device_framework_length -=  descriptor_length;
 801619a:	9a07      	ldr	r2, [sp, #28]
 801619c:	9b03      	ldr	r3, [sp, #12]
        device_framework +=  descriptor_length;
 801619e:	4694      	mov	ip, r2
        device_framework_length -=  descriptor_length;
 80161a0:	1a9b      	subs	r3, r3, r2
 80161a2:	9303      	str	r3, [sp, #12]
        device_framework +=  descriptor_length;
 80161a4:	9b01      	ldr	r3, [sp, #4]
 80161a6:	4463      	add	r3, ip
 80161a8:	9301      	str	r3, [sp, #4]
 80161aa:	e7c8      	b.n	801613e <_ux_device_stack_configuration_set+0xc2>
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80161ac:	2b04      	cmp	r3, #4
 80161ae:	d1f4      	bne.n	801619a <_ux_device_stack_configuration_set+0x11e>
            _ux_utility_descriptor_parse(device_framework,
 80161b0:	492e      	ldr	r1, [pc, #184]	@ (801626c <_ux_device_stack_configuration_set+0x1f0>)
 80161b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80161b4:	2209      	movs	r2, #9
 80161b6:	9801      	ldr	r0, [sp, #4]
 80161b8:	f000 fda3 	bl	8016d02 <_ux_utility_descriptor_parse>
            if (interface_descriptor.bAlternateSetting == 0)
 80161bc:	ab08      	add	r3, sp, #32
 80161be:	7cd9      	ldrb	r1, [r3, #19]
 80161c0:	2900      	cmp	r1, #0
 80161c2:	d1ea      	bne.n	801619a <_ux_device_stack_configuration_set+0x11e>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 80161c4:	4b27      	ldr	r3, [pc, #156]	@ (8016264 <_ux_device_stack_configuration_set+0x1e8>)
 80161c6:	6818      	ldr	r0, [r3, #0]
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 80161c8:	ab08      	add	r3, sp, #32
 80161ca:	7c9b      	ldrb	r3, [r3, #18]
                if (iad_flag == UX_TRUE)
 80161cc:	2d01      	cmp	r5, #1
 80161ce:	d12d      	bne.n	801622c <_ux_device_stack_configuration_set+0x1b0>
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 80161d0:	9a06      	ldr	r2, [sp, #24]
 80161d2:	4293      	cmp	r3, r2
 80161d4:	d124      	bne.n	8016220 <_ux_device_stack_configuration_set+0x1a4>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 80161d6:	0005      	movs	r5, r0
 80161d8:	35fc      	adds	r5, #252	@ 0xfc
 80161da:	686a      	ldr	r2, [r5, #4]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 80161dc:	682d      	ldr	r5, [r5, #0]
 80161de:	46ac      	mov	ip, r5
 80161e0:	458c      	cmp	ip, r1
 80161e2:	d101      	bne.n	80161e8 <_ux_device_stack_configuration_set+0x16c>
 80161e4:	9a04      	ldr	r2, [sp, #16]
 80161e6:	e00d      	b.n	8016204 <_ux_device_stack_configuration_set+0x188>
                            if (class_inst -> ux_slave_class_status == UX_USED)
 80161e8:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 80161ea:	2e01      	cmp	r6, #1
 80161ec:	d115      	bne.n	801621a <_ux_device_stack_configuration_set+0x19e>
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80161ee:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 80161f0:	42b3      	cmp	r3, r6
 80161f2:	d112      	bne.n	801621a <_ux_device_stack_configuration_set+0x19e>
 80161f4:	6dd6      	ldr	r6, [r2, #92]	@ 0x5c
 80161f6:	9d02      	ldr	r5, [sp, #8]
 80161f8:	42ae      	cmp	r6, r5
 80161fa:	d10e      	bne.n	801621a <_ux_device_stack_configuration_set+0x19e>
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 80161fc:	3340      	adds	r3, #64	@ 0x40
 80161fe:	009b      	lsls	r3, r3, #2
 8016200:	18c3      	adds	r3, r0, r3
 8016202:	605a      	str	r2, [r3, #4]
                    iad_number_interfaces--;
 8016204:	3c01      	subs	r4, #1
                    if (iad_number_interfaces == 0)
 8016206:	0025      	movs	r5, r4
 8016208:	1e6b      	subs	r3, r5, #1
 801620a:	419d      	sbcs	r5, r3
 801620c:	9204      	str	r2, [sp, #16]
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 801620e:	2200      	movs	r2, #0
 8016210:	9903      	ldr	r1, [sp, #12]
 8016212:	9801      	ldr	r0, [sp, #4]
 8016214:	f000 fb6e 	bl	80168f4 <_ux_device_stack_interface_set>
 8016218:	e7bf      	b.n	801619a <_ux_device_stack_configuration_set+0x11e>
                            class_inst ++;
 801621a:	3264      	adds	r2, #100	@ 0x64
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801621c:	3101      	adds	r1, #1
 801621e:	e7df      	b.n	80161e0 <_ux_device_stack_configuration_set+0x164>
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8016220:	3340      	adds	r3, #64	@ 0x40
 8016222:	9a04      	ldr	r2, [sp, #16]
 8016224:	009b      	lsls	r3, r3, #2
 8016226:	18c3      	adds	r3, r0, r3
 8016228:	605a      	str	r2, [r3, #4]
 801622a:	e7db      	b.n	80161e4 <_ux_device_stack_configuration_set+0x168>
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801622c:	0001      	movs	r1, r0
 801622e:	31fc      	adds	r1, #252	@ 0xfc
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8016230:	c906      	ldmia	r1, {r1, r2}
 8016232:	468c      	mov	ip, r1
 8016234:	9505      	str	r5, [sp, #20]
 8016236:	9905      	ldr	r1, [sp, #20]
 8016238:	458c      	cmp	ip, r1
 801623a:	d0e8      	beq.n	801620e <_ux_device_stack_configuration_set+0x192>
                        if (class_inst -> ux_slave_class_status == UX_USED)
 801623c:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 801623e:	2e01      	cmp	r6, #1
 8016240:	d10b      	bne.n	801625a <_ux_device_stack_configuration_set+0x1de>
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8016242:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8016244:	42b3      	cmp	r3, r6
 8016246:	d108      	bne.n	801625a <_ux_device_stack_configuration_set+0x1de>
 8016248:	6dd6      	ldr	r6, [r2, #92]	@ 0x5c
 801624a:	9902      	ldr	r1, [sp, #8]
 801624c:	428e      	cmp	r6, r1
 801624e:	d104      	bne.n	801625a <_ux_device_stack_configuration_set+0x1de>
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8016250:	3340      	adds	r3, #64	@ 0x40
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	18c3      	adds	r3, r0, r3
 8016256:	605a      	str	r2, [r3, #4]
                                break;
 8016258:	e7d9      	b.n	801620e <_ux_device_stack_configuration_set+0x192>
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801625a:	9905      	ldr	r1, [sp, #20]
                        class_inst ++;
 801625c:	3264      	adds	r2, #100	@ 0x64
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801625e:	3101      	adds	r1, #1
 8016260:	9105      	str	r1, [sp, #20]
 8016262:	e7e8      	b.n	8016236 <_ux_device_stack_configuration_set+0x1ba>
 8016264:	200030e0 	.word	0x200030e0
 8016268:	20000243 	.word	0x20000243
 801626c:	2000023a 	.word	0x2000023a

08016270 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8016270:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8016272:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8016274:	b095      	sub	sp, #84	@ 0x54
 8016276:	0004      	movs	r4, r0
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8016278:	9305      	str	r3, [sp, #20]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d000      	beq.n	8016280 <_ux_device_stack_control_request_process+0x10>
 801627e:	e0cc      	b.n	801641a <_ux_device_stack_control_request_process+0x1aa>
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016280:	4b67      	ldr	r3, [pc, #412]	@ (8016420 <_ux_device_stack_control_request_process+0x1b0>)
 8016282:	681e      	ldr	r6, [r3, #0]
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8016284:	0003      	movs	r3, r0
 8016286:	333c      	adds	r3, #60	@ 0x3c
 8016288:	781d      	ldrb	r5, [r3, #0]
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801628a:	3301      	adds	r3, #1
 801628c:	781b      	ldrb	r3, [r3, #0]
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801628e:	303e      	adds	r0, #62	@ 0x3e
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8016290:	9306      	str	r3, [sp, #24]
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016292:	f000 febe 	bl	8017012 <_ux_utility_short_get>
 8016296:	9003      	str	r0, [sp, #12]
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8016298:	0020      	movs	r0, r4
 801629a:	3040      	adds	r0, #64	@ 0x40
 801629c:	f000 feb9 	bl	8017012 <_ux_utility_short_get>
 80162a0:	9004      	str	r0, [sp, #16]
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80162a2:	0020      	movs	r0, r4
 80162a4:	3042      	adds	r0, #66	@ 0x42
 80162a6:	f000 feb4 	bl	8017012 <_ux_utility_short_get>

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 80162aa:	9b06      	ldr	r3, [sp, #24]
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80162ac:	9007      	str	r0, [sp, #28]
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 80162ae:	1f9a      	subs	r2, r3, #6
 80162b0:	2360      	movs	r3, #96	@ 0x60
 80162b2:	2a01      	cmp	r2, #1
 80162b4:	d83f      	bhi.n	8016336 <_ux_device_stack_control_request_process+0xc6>
 80162b6:	22c0      	movs	r2, #192	@ 0xc0
 80162b8:	9903      	ldr	r1, [sp, #12]
 80162ba:	01d2      	lsls	r2, r2, #7
 80162bc:	4211      	tst	r1, r2
 80162be:	d03a      	beq.n	8016336 <_ux_device_stack_control_request_process+0xc6>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 80162c0:	439d      	bics	r5, r3
            request_type |= UX_REQUEST_TYPE_CLASS;
 80162c2:	3b40      	subs	r3, #64	@ 0x40
 80162c4:	431d      	orrs	r5, r3
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 80162c6:	2360      	movs	r3, #96	@ 0x60
 80162c8:	2220      	movs	r2, #32
 80162ca:	402b      	ands	r3, r5
 80162cc:	3b20      	subs	r3, #32
 80162ce:	4393      	bics	r3, r2
 80162d0:	1e1f      	subs	r7, r3, #0
 80162d2:	d15c      	bne.n	801638e <_ux_device_stack_control_request_process+0x11e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 80162d4:	2304      	movs	r3, #4
 80162d6:	9309      	str	r3, [sp, #36]	@ 0x24
UINT                        status =  UX_ERROR;
 80162d8:	33fb      	adds	r3, #251	@ 0xfb
 80162da:	9305      	str	r3, [sp, #20]
            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 80162dc:	003a      	movs	r2, r7
 80162de:	4b50      	ldr	r3, [pc, #320]	@ (8016420 <_ux_device_stack_control_request_process+0x1b0>)
 80162e0:	3240      	adds	r2, #64	@ 0x40
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	0092      	lsls	r2, r2, #2
 80162e6:	189b      	adds	r3, r3, r2
 80162e8:	685b      	ldr	r3, [r3, #4]

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d018      	beq.n	8016320 <_ux_device_stack_control_request_process+0xb0>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 80162ee:	2203      	movs	r2, #3
 80162f0:	402a      	ands	r2, r5
 80162f2:	2a01      	cmp	r2, #1
 80162f4:	d10d      	bne.n	8016312 <_ux_device_stack_control_request_process+0xa2>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 80162f6:	2da1      	cmp	r5, #161	@ 0xa1
 80162f8:	d145      	bne.n	8016386 <_ux_device_stack_control_request_process+0x116>
 80162fa:	9a06      	ldr	r2, [sp, #24]
 80162fc:	2a00      	cmp	r2, #0
 80162fe:	d142      	bne.n	8016386 <_ux_device_stack_control_request_process+0x116>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 8016300:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8016302:	7c52      	ldrb	r2, [r2, #17]
 8016304:	2a07      	cmp	r2, #7
 8016306:	d13e      	bne.n	8016386 <_ux_device_stack_control_request_process+0x116>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 8016308:	0022      	movs	r2, r4
 801630a:	3241      	adds	r2, #65	@ 0x41
 801630c:	7812      	ldrb	r2, [r2, #0]
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 801630e:	42ba      	cmp	r2, r7
 8016310:	d106      	bne.n	8016320 <_ux_device_stack_control_request_process+0xb0>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8016312:	9311      	str	r3, [sp, #68]	@ 0x44

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8016314:	a809      	add	r0, sp, #36	@ 0x24
 8016316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016318:	4798      	blx	r3
 801631a:	9005      	str	r0, [sp, #20]

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 801631c:	2800      	cmp	r0, #0
 801631e:	d02f      	beq.n	8016380 <_ux_device_stack_control_request_process+0x110>
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8016320:	3701      	adds	r7, #1
 8016322:	2f10      	cmp	r7, #16
 8016324:	d1da      	bne.n	80162dc <_ux_device_stack_control_request_process+0x6c>

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8016326:	9b05      	ldr	r3, [sp, #20]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d029      	beq.n	8016380 <_ux_device_stack_control_request_process+0x110>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801632c:	0030      	movs	r0, r6
 801632e:	303c      	adds	r0, #60	@ 0x3c
 8016330:	f000 f99e 	bl	8016670 <_ux_device_stack_endpoint_stall>
 8016334:	e024      	b.n	8016380 <_ux_device_stack_control_request_process+0x110>
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8016336:	402b      	ands	r3, r5
 8016338:	2b40      	cmp	r3, #64	@ 0x40
 801633a:	d1c4      	bne.n	80162c6 <_ux_device_stack_control_request_process+0x56>
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 801633c:	4b38      	ldr	r3, [pc, #224]	@ (8016420 <_ux_device_stack_control_request_process+0x1b0>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	33fc      	adds	r3, #252	@ 0xfc
 8016342:	6f5f      	ldr	r7, [r3, #116]	@ 0x74
 8016344:	2f00      	cmp	r7, #0
 8016346:	d0be      	beq.n	80162c6 <_ux_device_stack_control_request_process+0x56>
 8016348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801634a:	9a06      	ldr	r2, [sp, #24]
 801634c:	4293      	cmp	r3, r2
 801634e:	d1ba      	bne.n	80162c6 <_ux_device_stack_control_request_process+0x56>
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8016350:	2380      	movs	r3, #128	@ 0x80
 8016352:	005b      	lsls	r3, r3, #1
 8016354:	9309      	str	r3, [sp, #36]	@ 0x24
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8016356:	ab09      	add	r3, sp, #36	@ 0x24
 8016358:	9301      	str	r3, [sp, #4]
 801635a:	68e3      	ldr	r3, [r4, #12]
 801635c:	9a04      	ldr	r2, [sp, #16]
 801635e:	9300      	str	r3, [sp, #0]
 8016360:	9903      	ldr	r1, [sp, #12]
 8016362:	9b07      	ldr	r3, [sp, #28]
 8016364:	9806      	ldr	r0, [sp, #24]
 8016366:	47b8      	blx	r7
                if (status == UX_SUCCESS)
 8016368:	2800      	cmp	r0, #0
 801636a:	d1df      	bne.n	801632c <_ux_device_stack_control_request_process+0xbc>
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801636c:	0033      	movs	r3, r6
 801636e:	2203      	movs	r2, #3
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016370:	0030      	movs	r0, r6
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016372:	3308      	adds	r3, #8
 8016374:	67da      	str	r2, [r3, #124]	@ 0x7c
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8016376:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016378:	9a07      	ldr	r2, [sp, #28]
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801637a:	305c      	adds	r0, #92	@ 0x5c
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 801637c:	f000 fbf2 	bl	8016b64 <_ux_device_stack_transfer_request>
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
    }

    /* Return the function status.  */
    return(status);
}
 8016380:	9805      	ldr	r0, [sp, #20]
 8016382:	b015      	add	sp, #84	@ 0x54
 8016384:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if ((request_index & 0xFF) != class_index)
 8016386:	21ff      	movs	r1, #255	@ 0xff
 8016388:	9a04      	ldr	r2, [sp, #16]
 801638a:	400a      	ands	r2, r1
 801638c:	e7bf      	b.n	801630e <_ux_device_stack_control_request_process+0x9e>
        switch (request)
 801638e:	9b06      	ldr	r3, [sp, #24]
 8016390:	2b0c      	cmp	r3, #12
 8016392:	d840      	bhi.n	8016416 <_ux_device_stack_control_request_process+0x1a6>
 8016394:	0018      	movs	r0, r3
 8016396:	f7e9 febf 	bl	8000118 <__gnu_thumb1_case_sqi>
 801639a:	1407      	.short	0x1407
 801639c:	203e1a3e 	.word	0x203e1a3e
 80163a0:	312e3e28 	.word	0x312e3e28
 80163a4:	3935      	.short	0x3935
 80163a6:	f3          	.byte	0xf3
 80163a7:	00          	.byte	0x00
            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 80163a8:	0028      	movs	r0, r5
 80163aa:	9a07      	ldr	r2, [sp, #28]
 80163ac:	9904      	ldr	r1, [sp, #16]
 80163ae:	f000 f981 	bl	80166b4 <_ux_device_stack_get_status>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 80163b2:	1e04      	subs	r4, r0, #0
        if (status != UX_SUCCESS)
 80163b4:	d0e4      	beq.n	8016380 <_ux_device_stack_control_request_process+0x110>
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80163b6:	0030      	movs	r0, r6
 80163b8:	303c      	adds	r0, #60	@ 0x3c
 80163ba:	f000 f959 	bl	8016670 <_ux_device_stack_endpoint_stall>
 80163be:	9405      	str	r4, [sp, #20]
 80163c0:	e7de      	b.n	8016380 <_ux_device_stack_control_request_process+0x110>
            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 80163c2:	0028      	movs	r0, r5
 80163c4:	9a04      	ldr	r2, [sp, #16]
 80163c6:	9903      	ldr	r1, [sp, #12]
 80163c8:	f7ff fe10 	bl	8015fec <_ux_device_stack_clear_feature>
 80163cc:	e7f1      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 80163ce:	0028      	movs	r0, r5
 80163d0:	9a04      	ldr	r2, [sp, #16]
 80163d2:	9903      	ldr	r1, [sp, #12]
 80163d4:	f000 fb52 	bl	8016a7c <_ux_device_stack_set_feature>
 80163d8:	e7eb      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
            dcd -> ux_slave_dcd_device_address =  request_value;
 80163da:	9b03      	ldr	r3, [sp, #12]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 80163dc:	2111      	movs	r1, #17
            dcd -> ux_slave_dcd_device_address =  request_value;
 80163de:	6173      	str	r3, [r6, #20]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 80163e0:	0030      	movs	r0, r6
 80163e2:	69b3      	ldr	r3, [r6, #24]
 80163e4:	9a03      	ldr	r2, [sp, #12]
 80163e6:	4798      	blx	r3
 80163e8:	e7e3      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 80163ea:	9a07      	ldr	r2, [sp, #28]
 80163ec:	9904      	ldr	r1, [sp, #16]
 80163ee:	9803      	ldr	r0, [sp, #12]
 80163f0:	f000 f818 	bl	8016424 <_ux_device_stack_descriptor_send>
 80163f4:	e7dd      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_get();
 80163f6:	f7ff fe2d 	bl	8016054 <_ux_device_stack_configuration_get>
 80163fa:	e7da      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_set(request_value);
 80163fc:	9803      	ldr	r0, [sp, #12]
 80163fe:	f7ff fe3d 	bl	801607c <_ux_device_stack_configuration_set>
 8016402:	e7d6      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_get(request_index);
 8016404:	9804      	ldr	r0, [sp, #16]
 8016406:	f7ff fc8f 	bl	8015d28 <_ux_device_stack_alternate_setting_get>
 801640a:	e7d2      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 801640c:	9903      	ldr	r1, [sp, #12]
 801640e:	9804      	ldr	r0, [sp, #16]
 8016410:	f7ff fcb0 	bl	8015d74 <_ux_device_stack_alternate_setting_set>
 8016414:	e7cd      	b.n	80163b2 <_ux_device_stack_control_request_process+0x142>
        switch (request)
 8016416:	2454      	movs	r4, #84	@ 0x54
 8016418:	e7cd      	b.n	80163b6 <_ux_device_stack_control_request_process+0x146>
UINT                        status =  UX_ERROR;
 801641a:	23ff      	movs	r3, #255	@ 0xff
 801641c:	9305      	str	r3, [sp, #20]
 801641e:	e7af      	b.n	8016380 <_ux_device_stack_control_request_process+0x110>
 8016420:	200030e0 	.word	0x200030e0

08016424 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8016424:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016426:	4e72      	ldr	r6, [pc, #456]	@ (80165f0 <_ux_device_stack_descriptor_send+0x1cc>)
{
 8016428:	0015      	movs	r5, r2
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801642a:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801642c:	2203      	movs	r2, #3
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801642e:	0023      	movs	r3, r4
{
 8016430:	b08d      	sub	sp, #52	@ 0x34
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016432:	333c      	adds	r3, #60	@ 0x3c
 8016434:	9301      	str	r3, [sp, #4]
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016436:	3320      	adds	r3, #32
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016438:	629a      	str	r2, [r3, #40]	@ 0x28
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801643a:	9302      	str	r3, [sp, #8]

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 801643c:	0002      	movs	r2, r0
 801643e:	23ff      	movs	r3, #255	@ 0xff
 8016440:	401a      	ands	r2, r3
 8016442:	9203      	str	r2, [sp, #12]

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8016444:	0a02      	lsrs	r2, r0, #8
 8016446:	4013      	ands	r3, r2

    /* Default descriptor length is host length.  */
    length =  host_length;

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8016448:	1e58      	subs	r0, r3, #1
{
 801644a:	9105      	str	r1, [sp, #20]
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 801644c:	9204      	str	r2, [sp, #16]
    switch (descriptor_type)
 801644e:	280e      	cmp	r0, #14
 8016450:	d900      	bls.n	8016454 <_ux_device_stack_descriptor_send+0x30>
 8016452:	e09f      	b.n	8016594 <_ux_device_stack_descriptor_send+0x170>
 8016454:	f7e9 fe6a 	bl	800012c <__gnu_thumb1_case_uqi>
 8016458:	9e6d3108 	.word	0x9e6d3108
 801645c:	9e31169e 	.word	0x9e31169e
 8016460:	9e9e9e1b 	.word	0x9e9e9e1b
 8016464:	9e9e      	.short	0x9e9e
 8016466:	31          	.byte	0x31
 8016467:	00          	.byte	0x00
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8016468:	002e      	movs	r6, r5
 801646a:	2d12      	cmp	r5, #18
 801646c:	d900      	bls.n	8016470 <_ux_device_stack_descriptor_send+0x4c>
 801646e:	2612      	movs	r6, #18
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8016470:	0022      	movs	r2, r4
 8016472:	32cc      	adds	r2, #204	@ 0xcc
 8016474:	6811      	ldr	r1, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8016476:	3204      	adds	r2, #4
        device_framework_end = device_framework + device_framework_length;
 8016478:	6812      	ldr	r2, [r2, #0]
 801647a:	188a      	adds	r2, r1, r2

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 801647c:	4291      	cmp	r1, r2
 801647e:	d30b      	bcc.n	8016498 <_ux_device_stack_descriptor_send+0x74>
            if (string_framework_length == 0)
            {

                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
 8016480:	20ff      	movs	r0, #255	@ 0xff
 8016482:	e016      	b.n	80164b2 <_ux_device_stack_descriptor_send+0x8e>
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8016484:	002e      	movs	r6, r5
 8016486:	2d0a      	cmp	r5, #10
 8016488:	d9f2      	bls.n	8016470 <_ux_device_stack_descriptor_send+0x4c>
 801648a:	260a      	movs	r6, #10
 801648c:	e7f0      	b.n	8016470 <_ux_device_stack_descriptor_send+0x4c>
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 801648e:	002e      	movs	r6, r5
 8016490:	2d05      	cmp	r5, #5
 8016492:	d9ed      	bls.n	8016470 <_ux_device_stack_descriptor_send+0x4c>
 8016494:	2605      	movs	r6, #5
 8016496:	e7eb      	b.n	8016470 <_ux_device_stack_descriptor_send+0x4c>
            if (*(device_framework + 1) == descriptor_type)
 8016498:	784f      	ldrb	r7, [r1, #1]
            descriptor_length =  (ULONG) *device_framework;
 801649a:	7808      	ldrb	r0, [r1, #0]
            if (*(device_framework + 1) == descriptor_type)
 801649c:	429f      	cmp	r7, r3
 801649e:	d10a      	bne.n	80164b6 <_ux_device_stack_descriptor_send+0x92>
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80164a0:	0032      	movs	r2, r6
 80164a2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80164a4:	f000 fd7c 	bl	8016fa0 <_ux_utility_memory_copy>
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80164a8:	002a      	movs	r2, r5
 80164aa:	0031      	movs	r1, r6
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80164ac:	9802      	ldr	r0, [sp, #8]
 80164ae:	f000 fb59 	bl	8016b64 <_ux_device_stack_transfer_request>
        return(UX_ERROR);
    }

    /* Return the status to the caller.  */
    return(status);
}
 80164b2:	b00d      	add	sp, #52	@ 0x34
 80164b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            device_framework +=  descriptor_length;
 80164b6:	1809      	adds	r1, r1, r0
 80164b8:	e7e0      	b.n	801647c <_ux_device_stack_descriptor_send+0x58>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80164ba:	0022      	movs	r2, r4
        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 80164bc:	2b07      	cmp	r3, #7
 80164be:	d11e      	bne.n	80164fe <_ux_device_stack_descriptor_send+0xda>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80164c0:	32d4      	adds	r2, #212	@ 0xd4
{
 80164c2:	2100      	movs	r1, #0
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80164c4:	6816      	ldr	r6, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80164c6:	3204      	adds	r2, #4
            device_framework_end = device_framework + device_framework_length;
 80164c8:	6812      	ldr	r2, [r2, #0]
 80164ca:	18b2      	adds	r2, r6, r2
        while (device_framework < device_framework_end)
 80164cc:	4296      	cmp	r6, r2
 80164ce:	d2d7      	bcs.n	8016480 <_ux_device_stack_descriptor_send+0x5c>
            descriptor_length =  (ULONG) *device_framework;
 80164d0:	7837      	ldrb	r7, [r6, #0]
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 80164d2:	7870      	ldrb	r0, [r6, #1]
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 80164d4:	2b0f      	cmp	r3, #15
 80164d6:	d114      	bne.n	8016502 <_ux_device_stack_descriptor_send+0xde>
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 80164d8:	280f      	cmp	r0, #15
 80164da:	d11d      	bne.n	8016518 <_ux_device_stack_descriptor_send+0xf4>
                    _ux_utility_descriptor_parse(device_framework,
 80164dc:	af07      	add	r7, sp, #28
 80164de:	003b      	movs	r3, r7
 80164e0:	2204      	movs	r2, #4
 80164e2:	4944      	ldr	r1, [pc, #272]	@ (80165f4 <_ux_device_stack_descriptor_send+0x1d0>)
                        _ux_utility_descriptor_parse(device_framework,
 80164e4:	0030      	movs	r0, r6
 80164e6:	f000 fc0c 	bl	8016d02 <_ux_utility_descriptor_parse>
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 80164ea:	887f      	ldrh	r7, [r7, #2]
            if (target_descriptor_length < host_length)
 80164ec:	42af      	cmp	r7, r5
 80164ee:	d900      	bls.n	80164f2 <_ux_device_stack_descriptor_send+0xce>
 80164f0:	002f      	movs	r7, r5
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80164f2:	2380      	movs	r3, #128	@ 0x80
 80164f4:	005b      	lsls	r3, r3, #1
 80164f6:	429f      	cmp	r7, r3
 80164f8:	d910      	bls.n	801651c <_ux_device_stack_descriptor_send+0xf8>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80164fa:	2212      	movs	r2, #18
 80164fc:	e025      	b.n	801654a <_ux_device_stack_descriptor_send+0x126>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80164fe:	32cc      	adds	r2, #204	@ 0xcc
 8016500:	e7df      	b.n	80164c2 <_ux_device_stack_descriptor_send+0x9e>
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8016502:	2802      	cmp	r0, #2
 8016504:	d108      	bne.n	8016518 <_ux_device_stack_descriptor_send+0xf4>
                    if (parsed_descriptor_index == descriptor_index)
 8016506:	9803      	ldr	r0, [sp, #12]
 8016508:	4281      	cmp	r1, r0
 801650a:	d104      	bne.n	8016516 <_ux_device_stack_descriptor_send+0xf2>
                        _ux_utility_descriptor_parse(device_framework,
 801650c:	af09      	add	r7, sp, #36	@ 0x24
 801650e:	003b      	movs	r3, r7
 8016510:	2208      	movs	r2, #8
 8016512:	4939      	ldr	r1, [pc, #228]	@ (80165f8 <_ux_device_stack_descriptor_send+0x1d4>)
 8016514:	e7e6      	b.n	80164e4 <_ux_device_stack_descriptor_send+0xc0>
                        parsed_descriptor_index++;
 8016516:	3101      	adds	r1, #1
            device_framework +=  descriptor_length;
 8016518:	19f6      	adds	r6, r6, r7
 801651a:	e7d7      	b.n	80164cc <_ux_device_stack_descriptor_send+0xa8>
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801651c:	003a      	movs	r2, r7
 801651e:	0031      	movs	r1, r6
 8016520:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8016522:	f000 fd3d 	bl	8016fa0 <_ux_utility_memory_copy>
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8016526:	9a04      	ldr	r2, [sp, #16]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8016528:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801652a:	0039      	movs	r1, r7
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 801652c:	705a      	strb	r2, [r3, #1]
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801652e:	002a      	movs	r2, r5
 8016530:	e7bc      	b.n	80164ac <_ux_device_stack_descriptor_send+0x88>
        if (descriptor_index == 0)
 8016532:	9b03      	ldr	r3, [sp, #12]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d128      	bne.n	801658a <_ux_device_stack_descriptor_send+0x166>
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8016538:	0023      	movs	r3, r4
 801653a:	2280      	movs	r2, #128	@ 0x80
 801653c:	33f0      	adds	r3, #240	@ 0xf0
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	0052      	lsls	r2, r2, #1
 8016542:	3302      	adds	r3, #2
 8016544:	4293      	cmp	r3, r2
 8016546:	d90a      	bls.n	801655e <_ux_device_stack_descriptor_send+0x13a>
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8016548:	3aee      	subs	r2, #238	@ 0xee
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801654a:	2109      	movs	r1, #9
 801654c:	2002      	movs	r0, #2
 801654e:	f000 fb71 	bl	8016c34 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016552:	2114      	movs	r1, #20
 8016554:	0020      	movs	r0, r4
 8016556:	69a3      	ldr	r3, [r4, #24]
 8016558:	9a01      	ldr	r2, [sp, #4]
 801655a:	4798      	blx	r3
            if (string_framework_length == 0)
 801655c:	e7a9      	b.n	80164b2 <_ux_device_stack_descriptor_send+0x8e>
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801655e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8016560:	7003      	strb	r3, [r0, #0]
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8016562:	2303      	movs	r3, #3
 8016564:	7043      	strb	r3, [r0, #1]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8016566:	6833      	ldr	r3, [r6, #0]
 8016568:	3002      	adds	r0, #2
 801656a:	001a      	movs	r2, r3
 801656c:	33ec      	adds	r3, #236	@ 0xec
 801656e:	32f0      	adds	r2, #240	@ 0xf0
 8016570:	6819      	ldr	r1, [r3, #0]
 8016572:	6812      	ldr	r2, [r2, #0]
 8016574:	f000 fd14 	bl	8016fa0 <_ux_utility_memory_copy>
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8016578:	6833      	ldr	r3, [r6, #0]
 801657a:	33f0      	adds	r3, #240	@ 0xf0
 801657c:	6819      	ldr	r1, [r3, #0]
 801657e:	3102      	adds	r1, #2
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8016580:	42a9      	cmp	r1, r5
 8016582:	d900      	bls.n	8016586 <_ux_device_stack_descriptor_send+0x162>
 8016584:	0029      	movs	r1, r5
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8016586:	002a      	movs	r2, r5
 8016588:	e790      	b.n	80164ac <_ux_device_stack_descriptor_send+0x88>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 801658a:	0023      	movs	r3, r4
 801658c:	33e4      	adds	r3, #228	@ 0xe4
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 801658e:	cbc0      	ldmia	r3!, {r6, r7}
            while (string_framework_length != 0)
 8016590:	2f00      	cmp	r7, #0
 8016592:	d105      	bne.n	80165a0 <_ux_device_stack_descriptor_send+0x17c>
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016594:	2114      	movs	r1, #20
 8016596:	0020      	movs	r0, r4
 8016598:	69a3      	ldr	r3, [r4, #24]
 801659a:	9a01      	ldr	r2, [sp, #4]
 801659c:	4798      	blx	r3
        return(UX_ERROR);
 801659e:	e76f      	b.n	8016480 <_ux_device_stack_descriptor_send+0x5c>
                if (_ux_utility_short_get(string_framework) == request_index)
 80165a0:	0030      	movs	r0, r6
 80165a2:	f000 fd36 	bl	8017012 <_ux_utility_short_get>
 80165a6:	9a05      	ldr	r2, [sp, #20]
 80165a8:	78f3      	ldrb	r3, [r6, #3]
 80165aa:	4290      	cmp	r0, r2
 80165ac:	d11b      	bne.n	80165e6 <_ux_device_stack_descriptor_send+0x1c2>
                    if (*(string_framework + 2) == descriptor_index)
 80165ae:	78b2      	ldrb	r2, [r6, #2]
 80165b0:	9903      	ldr	r1, [sp, #12]
 80165b2:	428a      	cmp	r2, r1
 80165b4:	d117      	bne.n	80165e6 <_ux_device_stack_descriptor_send+0x1c2>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80165b6:	3301      	adds	r3, #1
 80165b8:	005a      	lsls	r2, r3, #1
 80165ba:	2b80      	cmp	r3, #128	@ 0x80
 80165bc:	dc9d      	bgt.n	80164fa <_ux_device_stack_descriptor_send+0xd6>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80165be:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 80165c0:	2400      	movs	r4, #0
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 80165c2:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 80165c4:	2203      	movs	r2, #3
 80165c6:	705a      	strb	r2, [r3, #1]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 80165c8:	0032      	movs	r2, r6
 80165ca:	3302      	adds	r3, #2
 80165cc:	78f1      	ldrb	r1, [r6, #3]
 80165ce:	1b90      	subs	r0, r2, r6
 80165d0:	4281      	cmp	r1, r0
 80165d2:	d802      	bhi.n	80165da <_ux_device_stack_descriptor_send+0x1b6>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 80165d4:	3101      	adds	r1, #1
 80165d6:	0049      	lsls	r1, r1, #1
 80165d8:	e7d2      	b.n	8016580 <_ux_device_stack_descriptor_send+0x15c>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 80165da:	7911      	ldrb	r1, [r2, #4]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 80165dc:	705c      	strb	r4, [r3, #1]
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 80165de:	7019      	strb	r1, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 80165e0:	3201      	adds	r2, #1
 80165e2:	3302      	adds	r3, #2
 80165e4:	e7f2      	b.n	80165cc <_ux_device_stack_descriptor_send+0x1a8>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 80165e6:	3f04      	subs	r7, #4
 80165e8:	1aff      	subs	r7, r7, r3
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 80165ea:	3304      	adds	r3, #4
 80165ec:	18f6      	adds	r6, r6, r3
 80165ee:	e7cf      	b.n	8016590 <_ux_device_stack_descriptor_send+0x16c>
 80165f0:	200030e0 	.word	0x200030e0
 80165f4:	20000236 	.word	0x20000236
 80165f8:	20000243 	.word	0x20000243

080165fc <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 80165fc:	b5f0      	push	{r4, r5, r6, r7, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80165fe:	4f1b      	ldr	r7, [pc, #108]	@ (801666c <_ux_device_stack_disconnect+0x70>)
{
 8016600:	b08f      	sub	sp, #60	@ 0x3c
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016602:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8016604:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8016606:	2e03      	cmp	r6, #3
 8016608:	d11e      	bne.n	8016648 <_ux_device_stack_disconnect+0x4c>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 801660a:	0023      	movs	r3, r4
 801660c:	33b4      	adds	r3, #180	@ 0xb4
 801660e:	681d      	ldr	r5, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8016610:	2d00      	cmp	r5, #0
 8016612:	d109      	bne.n	8016628 <_ux_device_stack_disconnect+0x2c>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8016614:	2301      	movs	r3, #1
 8016616:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8016618:	0022      	movs	r2, r4
 801661a:	210f      	movs	r1, #15
 801661c:	0020      	movs	r0, r4
 801661e:	69a3      	ldr	r3, [r4, #24]
 8016620:	323c      	adds	r2, #60	@ 0x3c
 8016622:	4798      	blx	r3
 8016624:	0005      	movs	r5, r0
 8016626:	e012      	b.n	801664e <_ux_device_stack_disconnect+0x52>
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 8016628:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 801662a:	9603      	str	r6, [sp, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 801662c:	9505      	str	r5, [sp, #20]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 801662e:	930b      	str	r3, [sp, #44]	@ 0x2c
            if (class_ptr != UX_NULL)
 8016630:	2b00      	cmp	r3, #0
 8016632:	d002      	beq.n	801663a <_ux_device_stack_disconnect+0x3e>
                class_ptr -> ux_slave_class_entry_function(&class_command);
 8016634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016636:	a803      	add	r0, sp, #12
 8016638:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 801663a:	69ab      	ldr	r3, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 801663c:	0028      	movs	r0, r5
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 801663e:	9301      	str	r3, [sp, #4]
            _ux_device_stack_interface_delete(interface_ptr);
 8016640:	f000 f934 	bl	80168ac <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
 8016644:	9d01      	ldr	r5, [sp, #4]
 8016646:	e7e3      	b.n	8016610 <_ux_device_stack_disconnect+0x14>
UINT                        status = UX_ERROR;
 8016648:	25ff      	movs	r5, #255	@ 0xff
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 801664a:	2e01      	cmp	r6, #1
 801664c:	d0e4      	beq.n	8016618 <_ux_device_stack_disconnect+0x1c>
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 801664e:	0022      	movs	r2, r4
 8016650:	2300      	movs	r3, #0
 8016652:	32a4      	adds	r2, #164	@ 0xa4
 8016654:	6013      	str	r3, [r2, #0]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8016656:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	33fc      	adds	r3, #252	@ 0xfc
 801665c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801665e:	2b00      	cmp	r3, #0
 8016660:	d001      	beq.n	8016666 <_ux_device_stack_disconnect+0x6a>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8016662:	200a      	movs	r0, #10
 8016664:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
 8016666:	0028      	movs	r0, r5
 8016668:	b00f      	add	sp, #60	@ 0x3c
 801666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801666c:	200030e0 	.word	0x200030e0

08016670 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8016670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016672:	4d0f      	ldr	r5, [pc, #60]	@ (80166b0 <_ux_device_stack_endpoint_stall+0x40>)
{
 8016674:	0004      	movs	r4, r0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016676:	682f      	ldr	r7, [r5, #0]
       section where interrupts are disabled.  */
    status =  UX_ERROR;

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8016678:	f002 fdca 	bl	8019210 <_ux_utility_interrupt_disable>

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801667c:	682b      	ldr	r3, [r5, #0]
    UX_DISABLE
 801667e:	0006      	movs	r6, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8016680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    status =  UX_ERROR;
 8016682:	25ff      	movs	r5, #255	@ 0xff
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8016684:	2b00      	cmp	r3, #0
 8016686:	d00d      	beq.n	80166a4 <_ux_device_stack_endpoint_stall+0x34>
 8016688:	6863      	ldr	r3, [r4, #4]
 801668a:	2b02      	cmp	r3, #2
 801668c:	d00a      	beq.n	80166a4 <_ux_device_stack_endpoint_stall+0x34>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801668e:	69bb      	ldr	r3, [r7, #24]
 8016690:	0022      	movs	r2, r4
 8016692:	2114      	movs	r1, #20
 8016694:	0038      	movs	r0, r7
 8016696:	4798      	blx	r3

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8016698:	7be3      	ldrb	r3, [r4, #15]
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801669a:	0005      	movs	r5, r0
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 801669c:	079b      	lsls	r3, r3, #30
 801669e:	d001      	beq.n	80166a4 <_ux_device_stack_endpoint_stall+0x34>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80166a0:	2302      	movs	r3, #2
 80166a2:	6063      	str	r3, [r4, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 80166a4:	0030      	movs	r0, r6
 80166a6:	f002 fdb7 	bl	8019218 <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
}
 80166aa:	0028      	movs	r0, r5
 80166ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166ae:	46c0      	nop			@ (mov r8, r8)
 80166b0:	200030e0 	.word	0x200030e0

080166b4 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 80166b4:	000a      	movs	r2, r1

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 80166b6:	2100      	movs	r1, #0
{
 80166b8:	b570      	push	{r4, r5, r6, lr}
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80166ba:	0006      	movs	r6, r0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80166bc:	4b20      	ldr	r3, [pc, #128]	@ (8016740 <_ux_device_stack_get_status+0x8c>)
 80166be:	681c      	ldr	r4, [r3, #0]
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 80166c0:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 80166c2:	7029      	strb	r1, [r5, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 80166c4:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 80166c6:	7069      	strb	r1, [r5, #1]
    switch (request_type & UX_REQUEST_TARGET)
 80166c8:	3103      	adds	r1, #3
 80166ca:	400e      	ands	r6, r1
 80166cc:	4208      	tst	r0, r1
 80166ce:	d00a      	beq.n	80166e6 <_ux_device_stack_get_status+0x32>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80166d0:	0025      	movs	r5, r4
 80166d2:	69a3      	ldr	r3, [r4, #24]
 80166d4:	353c      	adds	r5, #60	@ 0x3c
    switch (request_type & UX_REQUEST_TARGET)
 80166d6:	2e02      	cmp	r6, #2
 80166d8:	d026      	beq.n	8016728 <_ux_device_stack_get_status+0x74>
        break;

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80166da:	002a      	movs	r2, r5
 80166dc:	2114      	movs	r1, #20
 80166de:	0020      	movs	r0, r4
 80166e0:	4798      	blx	r3
            return(UX_SUCCESS);            
 80166e2:	2000      	movs	r0, #0
    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);

    /* Return the function status.  */
    return(status);
}
 80166e4:	bd70      	pop	{r4, r5, r6, pc}
        if (request_index == UX_OTG_STATUS_SELECTOR)
 80166e6:	20f0      	movs	r0, #240	@ 0xf0
            data_length = 1;
 80166e8:	2101      	movs	r1, #1
        if (request_index == UX_OTG_STATUS_SELECTOR)
 80166ea:	0200      	lsls	r0, r0, #8
 80166ec:	4282      	cmp	r2, r0
 80166ee:	d011      	beq.n	8016714 <_ux_device_stack_get_status+0x60>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	32fc      	adds	r2, #252	@ 0xfc
 80166f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80166f6:	2a02      	cmp	r2, #2
 80166f8:	d101      	bne.n	80166fe <_ux_device_stack_get_status+0x4a>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80166fa:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80166fc:	7011      	strb	r1, [r2, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	33fc      	adds	r3, #252	@ 0xfc
 8016702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016704:	2b00      	cmp	r3, #0
 8016706:	d004      	beq.n	8016712 <_ux_device_stack_get_status+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8016708:	2302      	movs	r3, #2
 801670a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801670c:	7811      	ldrb	r1, [r2, #0]
 801670e:	430b      	orrs	r3, r1
 8016710:	7013      	strb	r3, [r2, #0]
    data_length = 2;
 8016712:	2102      	movs	r1, #2
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016714:	0023      	movs	r3, r4
 8016716:	2203      	movs	r2, #3
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016718:	0020      	movs	r0, r4
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801671a:	3308      	adds	r3, #8
 801671c:	67da      	str	r2, [r3, #124]	@ 0x7c
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801671e:	305c      	adds	r0, #92	@ 0x5c
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8016720:	000a      	movs	r2, r1
 8016722:	f000 fa1f 	bl	8016b64 <_ux_device_stack_transfer_request>
    return(status);
 8016726:	e7dd      	b.n	80166e4 <_ux_device_stack_get_status+0x30>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 8016728:	2115      	movs	r1, #21
 801672a:	0020      	movs	r0, r4
 801672c:	4798      	blx	r3
        if (status != UX_ERROR)
 801672e:	28ff      	cmp	r0, #255	@ 0xff
 8016730:	d004      	beq.n	801673c <_ux_device_stack_get_status+0x88>
            if (status == UX_TRUE)
 8016732:	2801      	cmp	r0, #1
 8016734:	d1ed      	bne.n	8016712 <_ux_device_stack_get_status+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8016736:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8016738:	7018      	strb	r0, [r3, #0]
 801673a:	e7ea      	b.n	8016712 <_ux_device_stack_get_status+0x5e>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801673c:	69a3      	ldr	r3, [r4, #24]
 801673e:	e7cc      	b.n	80166da <_ux_device_stack_get_status+0x26>
 8016740:	200030e0 	.word	0x200030e0

08016744 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8016744:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016746:	4c58      	ldr	r4, [pc, #352]	@ (80168a8 <_ux_device_stack_initialize+0x164>)
{
 8016748:	b085      	sub	sp, #20
    device =  &_ux_system_slave -> ux_system_slave_device;
 801674a:	6825      	ldr	r5, [r4, #0]

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 801674c:	002e      	movs	r6, r5
 801674e:	36dc      	adds	r6, #220	@ 0xdc
 8016750:	6030      	str	r0, [r6, #0]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 8016752:	0028      	movs	r0, r5
 8016754:	30e0      	adds	r0, #224	@ 0xe0
 8016756:	6001      	str	r1, [r0, #0]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 8016758:	0029      	movs	r1, r5
 801675a:	31d4      	adds	r1, #212	@ 0xd4
 801675c:	600a      	str	r2, [r1, #0]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 801675e:	002a      	movs	r2, r5
 8016760:	32d8      	adds	r2, #216	@ 0xd8
 8016762:	6013      	str	r3, [r2, #0]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 8016764:	002b      	movs	r3, r5
 8016766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016768:	33e4      	adds	r3, #228	@ 0xe4
 801676a:	601a      	str	r2, [r3, #0]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 801676c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801676e:	2100      	movs	r1, #0
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8016770:	605a      	str	r2, [r3, #4]
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 8016772:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016774:	3308      	adds	r3, #8
 8016776:	601a      	str	r2, [r3, #0]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8016778:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801677a:	0008      	movs	r0, r1
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 801677c:	605a      	str	r2, [r3, #4]
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 801677e:	2202      	movs	r2, #2
 8016780:	611a      	str	r2, [r3, #16]
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8016782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    if (memory == UX_NULL)
        return(UX_MEMORY_INSUFFICIENT);
 8016784:	2612      	movs	r6, #18
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8016786:	67da      	str	r2, [r3, #124]	@ 0x7c
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 8016788:	22c8      	movs	r2, #200	@ 0xc8
 801678a:	f000 fb13 	bl	8016db4 <_ux_utility_memory_allocate>
    if (memory == UX_NULL)
 801678e:	2800      	cmp	r0, #0
 8016790:	d100      	bne.n	8016794 <_ux_device_stack_initialize+0x50>
 8016792:	e086      	b.n	80168a2 <_ux_device_stack_initialize+0x15e>
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8016794:	2280      	movs	r2, #128	@ 0x80
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8016796:	6823      	ldr	r3, [r4, #0]
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8016798:	2101      	movs	r1, #1
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 801679a:	33fc      	adds	r3, #252	@ 0xfc
 801679c:	6058      	str	r0, [r3, #4]
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 801679e:	0052      	lsls	r2, r2, #1
 80167a0:	2000      	movs	r0, #0
 80167a2:	f000 fb07 	bl	8016db4 <_ux_utility_memory_allocate>
    transfer_request -> ux_slave_transfer_request_data_pointer =
 80167a6:	66a8      	str	r0, [r5, #104]	@ 0x68

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d05a      	beq.n	8016862 <_ux_device_stack_initialize+0x11e>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80167ac:	6823      	ldr	r3, [r4, #0]
 80167ae:	001a      	movs	r2, r3
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80167b0:	33d8      	adds	r3, #216	@ 0xd8
 80167b2:	681e      	ldr	r6, [r3, #0]

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
        local_endpoints_found              =  0;
        endpoints_in_interface_found       =  0;
 80167b4:	2300      	movs	r3, #0
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80167b6:	32d4      	adds	r2, #212	@ 0xd4
 80167b8:	6811      	ldr	r1, [r2, #0]
        local_endpoints_found              =  0;
 80167ba:	0018      	movs	r0, r3
        local_interfaces_found             =  0;
 80167bc:	001a      	movs	r2, r3
    endpoints_found                    =  0;
 80167be:	469c      	mov	ip, r3
    interfaces_found                   =  0;
 80167c0:	001c      	movs	r4, r3
    max_interface_number               =  0;
 80167c2:	9302      	str	r3, [sp, #8]

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 80167c4:	2e00      	cmp	r6, #0
 80167c6:	d11c      	bne.n	8016802 <_ux_device_stack_initialize+0xbe>
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 80167c8:	4294      	cmp	r4, r2
 80167ca:	d342      	bcc.n	8016852 <_ux_device_stack_initialize+0x10e>
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 80167cc:	1e22      	subs	r2, r4, #0
 80167ce:	d140      	bne.n	8016852 <_ux_device_stack_initialize+0x10e>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 80167d0:	2103      	movs	r1, #3
 80167d2:	2002      	movs	r0, #2
 80167d4:	3242      	adds	r2, #66	@ 0x42
 80167d6:	f000 fa2d 	bl	8016c34 <_ux_system_error_handler>
 80167da:	3642      	adds	r6, #66	@ 0x42

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 80167dc:	002b      	movs	r3, r5
 80167de:	33b8      	adds	r3, #184	@ 0xb8
 80167e0:	6818      	ldr	r0, [r3, #0]
 80167e2:	2800      	cmp	r0, #0
 80167e4:	d001      	beq.n	80167ea <_ux_device_stack_initialize+0xa6>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 80167e6:	f000 fbe5 	bl	8016fb4 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 80167ea:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 80167ec:	2800      	cmp	r0, #0
 80167ee:	d001      	beq.n	80167f4 <_ux_device_stack_initialize+0xb0>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80167f0:	f000 fbe0 	bl	8016fb4 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 80167f4:	4b2c      	ldr	r3, [pc, #176]	@ (80168a8 <_ux_device_stack_initialize+0x164>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	33fc      	adds	r3, #252	@ 0xfc
 80167fa:	6858      	ldr	r0, [r3, #4]
 80167fc:	f000 fbda 	bl	8016fb4 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8016800:	e04f      	b.n	80168a2 <_ux_device_stack_initialize+0x15e>
            descriptor_length =  (ULONG) *device_framework;
 8016802:	780f      	ldrb	r7, [r1, #0]
 8016804:	9703      	str	r7, [sp, #12]
            descriptor_type =  *(device_framework + 1);
 8016806:	784f      	ldrb	r7, [r1, #1]
            switch(descriptor_type)
 8016808:	2f02      	cmp	r7, #2
 801680a:	d017      	beq.n	801683c <_ux_device_stack_initialize+0xf8>
 801680c:	2f04      	cmp	r7, #4
 801680e:	d10c      	bne.n	801682a <_ux_device_stack_initialize+0xe6>
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8016810:	790f      	ldrb	r7, [r1, #4]
 8016812:	9701      	str	r7, [sp, #4]
                if (*(device_framework + 3) == 0)
 8016814:	78cf      	ldrb	r7, [r1, #3]
 8016816:	2f00      	cmp	r7, #0
 8016818:	d10b      	bne.n	8016832 <_ux_device_stack_initialize+0xee>
                    local_endpoints_found += endpoints_in_interface_found;
 801681a:	18c0      	adds	r0, r0, r3
                    local_interfaces_found++;
 801681c:	3201      	adds	r2, #1
                if (*(device_framework + 2) > max_interface_number)
 801681e:	788b      	ldrb	r3, [r1, #2]
 8016820:	9f02      	ldr	r7, [sp, #8]
 8016822:	429f      	cmp	r7, r3
 8016824:	d200      	bcs.n	8016828 <_ux_device_stack_initialize+0xe4>
 8016826:	9302      	str	r3, [sp, #8]
 8016828:	9b01      	ldr	r3, [sp, #4]
            device_framework_length -=  descriptor_length;
 801682a:	9f03      	ldr	r7, [sp, #12]
 801682c:	1bf6      	subs	r6, r6, r7
            device_framework +=  descriptor_length;
 801682e:	19c9      	adds	r1, r1, r7
 8016830:	e7c8      	b.n	80167c4 <_ux_device_stack_initialize+0x80>
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 8016832:	9f01      	ldr	r7, [sp, #4]
 8016834:	429f      	cmp	r7, r3
 8016836:	d2f2      	bcs.n	801681e <_ux_device_stack_initialize+0xda>
 8016838:	9301      	str	r3, [sp, #4]
 801683a:	e7f0      	b.n	801681e <_ux_device_stack_initialize+0xda>
                if (local_interfaces_found > interfaces_found)
 801683c:	4294      	cmp	r4, r2
 801683e:	d200      	bcs.n	8016842 <_ux_device_stack_initialize+0xfe>
 8016840:	0014      	movs	r4, r2
                local_endpoints_found += endpoints_in_interface_found;
 8016842:	18c3      	adds	r3, r0, r3
                if (local_endpoints_found > endpoints_found)
 8016844:	459c      	cmp	ip, r3
 8016846:	d200      	bcs.n	801684a <_ux_device_stack_initialize+0x106>
 8016848:	469c      	mov	ip, r3
                endpoints_in_interface_found  =  0;
 801684a:	2300      	movs	r3, #0
                local_endpoints_found         =  0;
 801684c:	0018      	movs	r0, r3
                local_interfaces_found =  0;
 801684e:	001a      	movs	r2, r3
 8016850:	e7eb      	b.n	801682a <_ux_device_stack_initialize+0xe6>
        if (status == UX_SUCCESS &&
 8016852:	9902      	ldr	r1, [sp, #8]
 8016854:	290f      	cmp	r1, #15
 8016856:	d906      	bls.n	8016866 <_ux_device_stack_initialize+0x122>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 8016858:	2212      	movs	r2, #18
 801685a:	2103      	movs	r1, #3
 801685c:	2002      	movs	r0, #2
 801685e:	f000 f9e9 	bl	8016c34 <_ux_system_error_handler>
    if (status == UX_SUCCESS)
 8016862:	2612      	movs	r6, #18
 8016864:	e7ba      	b.n	80167dc <_ux_device_stack_initialize+0x98>
        local_endpoints_found += endpoints_in_interface_found;
 8016866:	18c4      	adds	r4, r0, r3
        if (local_endpoints_found > endpoints_found)
 8016868:	4564      	cmp	r4, ip
 801686a:	d200      	bcs.n	801686e <_ux_device_stack_initialize+0x12a>
 801686c:	4664      	mov	r4, ip
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801686e:	002b      	movs	r3, r5
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8016870:	2100      	movs	r1, #0
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 8016872:	33bc      	adds	r3, #188	@ 0xbc
 8016874:	601a      	str	r2, [r3, #0]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8016876:	609c      	str	r4, [r3, #8]
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8016878:	0008      	movs	r0, r1
 801687a:	2320      	movs	r3, #32
 801687c:	f000 fb00 	bl	8016e80 <_ux_utility_memory_allocate_mulc_safe>
        if (interfaces_pool == UX_NULL)
 8016880:	2800      	cmp	r0, #0
 8016882:	d0ee      	beq.n	8016862 <_ux_device_stack_initialize+0x11e>
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8016884:	002b      	movs	r3, r5
 8016886:	33b8      	adds	r3, #184	@ 0xb8
 8016888:	6018      	str	r0, [r3, #0]
    if (endpoints_found != 0 && status == UX_SUCCESS)
 801688a:	2c00      	cmp	r4, #0
 801688c:	d009      	beq.n	80168a2 <_ux_device_stack_initialize+0x15e>
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 801688e:	2100      	movs	r1, #0
 8016890:	2368      	movs	r3, #104	@ 0x68
 8016892:	0022      	movs	r2, r4
 8016894:	0008      	movs	r0, r1
 8016896:	f000 faf3 	bl	8016e80 <_ux_utility_memory_allocate_mulc_safe>
        if (endpoints_pool == UX_NULL)
 801689a:	2800      	cmp	r0, #0
 801689c:	d0e1      	beq.n	8016862 <_ux_device_stack_initialize+0x11e>
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 801689e:	35c0      	adds	r5, #192	@ 0xc0
 80168a0:	6028      	str	r0, [r5, #0]
}
 80168a2:	0030      	movs	r0, r6
 80168a4:	b005      	add	sp, #20
 80168a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168a8:	200030e0 	.word	0x200030e0

080168ac <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 80168ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80168ae:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80168b0:	4e0f      	ldr	r6, [pc, #60]	@ (80168f0 <_ux_device_stack_interface_delete+0x44>)

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 80168b2:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
 80168b4:	6833      	ldr	r3, [r6, #0]
 80168b6:	9301      	str	r3, [sp, #4]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 80168b8:	2c00      	cmp	r4, #0
 80168ba:	d10a      	bne.n	80168d2 <_ux_device_stack_interface_delete+0x26>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 80168bc:	9b01      	ldr	r3, [sp, #4]
 80168be:	69aa      	ldr	r2, [r5, #24]
 80168c0:	33b4      	adds	r3, #180	@ 0xb4
 80168c2:	601a      	str	r2, [r3, #0]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 80168c4:	0020      	movs	r0, r4
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 80168c6:	606c      	str	r4, [r5, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 80168c8:	60ac      	str	r4, [r5, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 80168ca:	61ac      	str	r4, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 80168cc:	61ec      	str	r4, [r5, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 80168ce:	602c      	str	r4, [r5, #0]
}
 80168d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 80168d2:	6830      	ldr	r0, [r6, #0]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 80168d4:	0022      	movs	r2, r4
 80168d6:	6983      	ldr	r3, [r0, #24]
 80168d8:	210f      	movs	r1, #15
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80168da:	6967      	ldr	r7, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 80168dc:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 80168de:	2300      	movs	r3, #0
 80168e0:	6023      	str	r3, [r4, #0]
        endpoint -> ux_slave_endpoint_state =  0;
 80168e2:	6063      	str	r3, [r4, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 80168e4:	6163      	str	r3, [r4, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 80168e6:	61a3      	str	r3, [r4, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 80168e8:	61e3      	str	r3, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80168ea:	003c      	movs	r4, r7
 80168ec:	e7e4      	b.n	80168b8 <_ux_device_stack_interface_delete+0xc>
 80168ee:	46c0      	nop			@ (mov r8, r8)
 80168f0:	200030e0 	.word	0x200030e0

080168f4 <_ux_device_stack_interface_set>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80168f4:	4b47      	ldr	r3, [pc, #284]	@ (8016a14 <_ux_device_stack_interface_set+0x120>)
{
 80168f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80168f8:	681f      	ldr	r7, [r3, #0]
{
 80168fa:	0006      	movs	r6, r0
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 80168fc:	003b      	movs	r3, r7
{
 80168fe:	000c      	movs	r4, r1
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 8016900:	33b8      	adds	r3, #184	@ 0xb8
 8016902:	681d      	ldr	r5, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 8016904:	3304      	adds	r3, #4
 8016906:	681b      	ldr	r3, [r3, #0]
{
 8016908:	b085      	sub	sp, #20
    while (interfaces_pool_number != 0)
 801690a:	2b00      	cmp	r3, #0
 801690c:	d102      	bne.n	8016914 <_ux_device_stack_interface_set+0x20>
        interfaces_pool_number--;
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
        return(UX_MEMORY_INSUFFICIENT);
 801690e:	2012      	movs	r0, #18
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);

    /* Return the status to the caller.  */
    return(status);
}
 8016910:	b005      	add	sp, #20
 8016912:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 8016914:	682a      	ldr	r2, [r5, #0]
 8016916:	2a00      	cmp	r2, #0
 8016918:	d002      	beq.n	8016920 <_ux_device_stack_interface_set+0x2c>
        interface_ptr++;
 801691a:	3520      	adds	r5, #32
        interfaces_pool_number--;
 801691c:	3b01      	subs	r3, #1
 801691e:	e7f4      	b.n	801690a <_ux_device_stack_interface_set+0x16>
    interface_ptr -> ux_slave_interface_status = UX_USED;
 8016920:	2301      	movs	r3, #1
 8016922:	602b      	str	r3, [r5, #0]
    _ux_utility_descriptor_parse(device_framework,
 8016924:	002b      	movs	r3, r5
 8016926:	2209      	movs	r2, #9
 8016928:	330c      	adds	r3, #12
 801692a:	0030      	movs	r0, r6
 801692c:	493a      	ldr	r1, [pc, #232]	@ (8016a18 <_ux_device_stack_interface_set+0x124>)
 801692e:	f000 f9e8 	bl	8016d02 <_ux_utility_descriptor_parse>
    if (device -> ux_slave_device_first_interface == UX_NULL)
 8016932:	003a      	movs	r2, r7
 8016934:	32b4      	adds	r2, #180	@ 0xb4
 8016936:	6813      	ldr	r3, [r2, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d117      	bne.n	801696c <_ux_device_stack_interface_set+0x78>
        device -> ux_slave_device_first_interface =  interface_ptr;
 801693c:	6015      	str	r5, [r2, #0]
    device =  &_ux_system_slave -> ux_system_slave_device;
 801693e:	003b      	movs	r3, r7
 8016940:	3324      	adds	r3, #36	@ 0x24
 8016942:	9303      	str	r3, [sp, #12]
    device_framework_length -=  (ULONG) *device_framework;
 8016944:	7833      	ldrb	r3, [r6, #0]
 8016946:	1ae2      	subs	r2, r4, r3
 8016948:	9201      	str	r2, [sp, #4]
        device_framework +=  descriptor_length;
 801694a:	18f6      	adds	r6, r6, r3
    while (device_framework_length != 0)
 801694c:	9b01      	ldr	r3, [sp, #4]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d008      	beq.n	8016964 <_ux_device_stack_interface_set+0x70>
        descriptor_length =  (ULONG) *device_framework;
 8016952:	7833      	ldrb	r3, [r6, #0]
 8016954:	9302      	str	r3, [sp, #8]
        descriptor_type =  *(device_framework + 1);
 8016956:	7873      	ldrb	r3, [r6, #1]
        switch(descriptor_type)
 8016958:	2b04      	cmp	r3, #4
 801695a:	d003      	beq.n	8016964 <_ux_device_stack_interface_set+0x70>
 801695c:	2b05      	cmp	r3, #5
 801695e:	d00b      	beq.n	8016978 <_ux_device_stack_interface_set+0x84>
 8016960:	2b02      	cmp	r3, #2
 8016962:	d14b      	bne.n	80169fc <_ux_device_stack_interface_set+0x108>
    status =  _ux_device_stack_interface_start(interface_ptr);
 8016964:	0028      	movs	r0, r5
 8016966:	f000 f85b 	bl	8016a20 <_ux_device_stack_interface_start>
    return(status);
 801696a:	e7d1      	b.n	8016910 <_ux_device_stack_interface_set+0x1c>
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 801696c:	001a      	movs	r2, r3
 801696e:	699b      	ldr	r3, [r3, #24]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d1fb      	bne.n	801696c <_ux_device_stack_interface_set+0x78>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 8016974:	6195      	str	r5, [r2, #24]
 8016976:	e7e2      	b.n	801693e <_ux_device_stack_interface_set+0x4a>
            endpoint = device -> ux_slave_device_endpoints_pool;
 8016978:	003b      	movs	r3, r7
 801697a:	33c0      	adds	r3, #192	@ 0xc0
 801697c:	681c      	ldr	r4, [r3, #0]
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801697e:	3304      	adds	r3, #4
 8016980:	681b      	ldr	r3, [r3, #0]
            while (endpoints_pool_number != 0)
 8016982:	2b00      	cmp	r3, #0
 8016984:	d0c3      	beq.n	801690e <_ux_device_stack_interface_set+0x1a>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8016986:	6822      	ldr	r2, [r4, #0]
 8016988:	2a00      	cmp	r2, #0
 801698a:	d130      	bne.n	80169ee <_ux_device_stack_interface_set+0xfa>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 801698c:	2301      	movs	r3, #1
 801698e:	6023      	str	r3, [r4, #0]
            _ux_utility_descriptor_parse(device_framework,
 8016990:	0023      	movs	r3, r4
 8016992:	4922      	ldr	r1, [pc, #136]	@ (8016a1c <_ux_device_stack_interface_set+0x128>)
 8016994:	330c      	adds	r3, #12
 8016996:	3206      	adds	r2, #6
 8016998:	0030      	movs	r0, r6
 801699a:	f000 f9b2 	bl	8016d02 <_ux_utility_descriptor_parse>
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801699e:	4a1d      	ldr	r2, [pc, #116]	@ (8016a14 <_ux_device_stack_interface_set+0x120>)
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80169a0:	8a21      	ldrh	r1, [r4, #16]
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80169a2:	6812      	ldr	r2, [r2, #0]
            max_transfer_length =
 80169a4:	054b      	lsls	r3, r1, #21
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80169a6:	32fc      	adds	r2, #252	@ 0xfc
 80169a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
            max_transfer_length =
 80169aa:	0d5b      	lsrs	r3, r3, #21
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80169ac:	2a02      	cmp	r2, #2
 80169ae:	d10c      	bne.n	80169ca <_ux_device_stack_interface_set+0xd6>
 80169b0:	2001      	movs	r0, #1
 80169b2:	7be2      	ldrb	r2, [r4, #15]
 80169b4:	4202      	tst	r2, r0
 80169b6:	d008      	beq.n	80169ca <_ux_device_stack_interface_set+0xd6>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80169b8:	20c0      	movs	r0, #192	@ 0xc0
 80169ba:	000a      	movs	r2, r1
 80169bc:	0140      	lsls	r0, r0, #5
 80169be:	4002      	ands	r2, r0
                if (n_trans)
 80169c0:	4201      	tst	r1, r0
 80169c2:	d002      	beq.n	80169ca <_ux_device_stack_interface_set+0xd6>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 80169c4:	0ad2      	lsrs	r2, r2, #11
                    n_trans ++;
 80169c6:	3201      	adds	r2, #1
                    max_transfer_length *= n_trans;
 80169c8:	4353      	muls	r3, r2
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 80169ca:	6423      	str	r3, [r4, #64]	@ 0x40
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 80169cc:	2301      	movs	r3, #1
 80169ce:	425b      	negs	r3, r3
 80169d0:	6563      	str	r3, [r4, #84]	@ 0x54
            endpoint -> ux_slave_endpoint_device =  device;
 80169d2:	9b03      	ldr	r3, [sp, #12]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80169d4:	0022      	movs	r2, r4
            endpoint -> ux_slave_endpoint_device =  device;
 80169d6:	61e3      	str	r3, [r4, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80169d8:	210e      	movs	r1, #14
 80169da:	0038      	movs	r0, r7
 80169dc:	69bb      	ldr	r3, [r7, #24]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 80169de:	62a4      	str	r4, [r4, #40]	@ 0x28
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 80169e0:	61a5      	str	r5, [r4, #24]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80169e2:	4798      	blx	r3
            if (status != UX_SUCCESS)
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d005      	beq.n	80169f4 <_ux_device_stack_interface_set+0x100>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 80169e8:	2300      	movs	r3, #0
 80169ea:	6023      	str	r3, [r4, #0]
                return(status);
 80169ec:	e790      	b.n	8016910 <_ux_device_stack_interface_set+0x1c>
                endpoint++;
 80169ee:	3468      	adds	r4, #104	@ 0x68
               endpoints_pool_number--; 
 80169f0:	3b01      	subs	r3, #1
 80169f2:	e7c6      	b.n	8016982 <_ux_device_stack_interface_set+0x8e>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 80169f4:	69eb      	ldr	r3, [r5, #28]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d106      	bne.n	8016a08 <_ux_device_stack_interface_set+0x114>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 80169fa:	61ec      	str	r4, [r5, #28]
        device_framework_length -=  descriptor_length;
 80169fc:	9b01      	ldr	r3, [sp, #4]
 80169fe:	9a02      	ldr	r2, [sp, #8]
 8016a00:	1a9b      	subs	r3, r3, r2
 8016a02:	9301      	str	r3, [sp, #4]
        device_framework +=  descriptor_length;
 8016a04:	0013      	movs	r3, r2
 8016a06:	e7a0      	b.n	801694a <_ux_device_stack_interface_set+0x56>
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8016a08:	001a      	movs	r2, r3
 8016a0a:	695b      	ldr	r3, [r3, #20]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d1fb      	bne.n	8016a08 <_ux_device_stack_interface_set+0x114>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8016a10:	6154      	str	r4, [r2, #20]
 8016a12:	e7f3      	b.n	80169fc <_ux_device_stack_interface_set+0x108>
 8016a14:	200030e0 	.word	0x200030e0
 8016a18:	2000023a 	.word	0x2000023a
 8016a1c:	20000259 	.word	0x20000259

08016a20 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 8016a20:	b530      	push	{r4, r5, lr}
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8016a22:	4b15      	ldr	r3, [pc, #84]	@ (8016a78 <_ux_device_stack_interface_start+0x58>)
{
 8016a24:	0004      	movs	r4, r0
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8016a26:	681a      	ldr	r2, [r3, #0]
 8016a28:	7b83      	ldrb	r3, [r0, #14]
{
 8016a2a:	b08d      	sub	sp, #52	@ 0x34
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8016a2c:	3340      	adds	r3, #64	@ 0x40
 8016a2e:	009b      	lsls	r3, r3, #2
 8016a30:	18d3      	adds	r3, r2, r3
 8016a32:	685d      	ldr	r5, [r3, #4]

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 8016a34:	2d00      	cmp	r5, #0
 8016a36:	d102      	bne.n	8016a3e <_ux_device_stack_interface_start+0x1e>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 8016a38:	2057      	movs	r0, #87	@ 0x57
        return(status); 
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
}
 8016a3a:	b00d      	add	sp, #52	@ 0x34
 8016a3c:	bd30      	pop	{r4, r5, pc}
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8016a3e:	2301      	movs	r3, #1
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 8016a40:	9003      	str	r0, [sp, #12]
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8016a42:	9301      	str	r3, [sp, #4]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 8016a44:	7c43      	ldrb	r3, [r0, #17]
 8016a46:	9306      	str	r3, [sp, #24]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8016a48:	7c83      	ldrb	r3, [r0, #18]
 8016a4a:	9307      	str	r3, [sp, #28]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8016a4c:	7cc3      	ldrb	r3, [r0, #19]
 8016a4e:	9308      	str	r3, [sp, #32]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8016a50:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 8016a52:	9305      	str	r3, [sp, #20]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8016a54:	8e53      	ldrh	r3, [r2, #50]	@ 0x32
    class_ptr -> ux_slave_class_interface = interface_ptr;
 8016a56:	6628      	str	r0, [r5, #96]	@ 0x60
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8016a58:	9304      	str	r3, [sp, #16]
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8016a5a:	a801      	add	r0, sp, #4
 8016a5c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8016a5e:	4798      	blx	r3
    if (status == UX_SUCCESS)
 8016a60:	2800      	cmp	r0, #0
 8016a62:	d1e9      	bne.n	8016a38 <_ux_device_stack_interface_start+0x18>
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8016a64:	2302      	movs	r3, #2
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8016a66:	9509      	str	r5, [sp, #36]	@ 0x24
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8016a68:	9301      	str	r3, [sp, #4]
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8016a6a:	a801      	add	r0, sp, #4
 8016a6c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8016a6e:	4798      	blx	r3
        if(status == UX_SUCCESS)
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d1e2      	bne.n	8016a3a <_ux_device_stack_interface_start+0x1a>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 8016a74:	6065      	str	r5, [r4, #4]
 8016a76:	e7e0      	b.n	8016a3a <_ux_device_stack_interface_start+0x1a>
 8016a78:	200030e0 	.word	0x200030e0

08016a7c <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8016a7c:	b570      	push	{r4, r5, r6, lr}
 8016a7e:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016a80:	4b15      	ldr	r3, [pc, #84]	@ (8016ad8 <_ux_device_stack_set_feature+0x5c>)
{
 8016a82:	0014      	movs	r4, r2
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016a84:	6818      	ldr	r0, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8016a86:	002a      	movs	r2, r5
 8016a88:	2303      	movs	r3, #3
 8016a8a:	401a      	ands	r2, r3
 8016a8c:	421d      	tst	r5, r3
 8016a8e:	d004      	beq.n	8016a9a <_ux_device_stack_set_feature+0x1e>
 8016a90:	2a02      	cmp	r2, #2
 8016a92:	d00d      	beq.n	8016ab0 <_ux_device_stack_set_feature+0x34>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016a94:	0002      	movs	r2, r0
 8016a96:	323c      	adds	r2, #60	@ 0x3c
 8016a98:	e017      	b.n	8016aca <_ux_device_stack_set_feature+0x4e>
                return (UX_SUCCESS);
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 8016a9a:	2354      	movs	r3, #84	@ 0x54
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8016a9c:	2901      	cmp	r1, #1
 8016a9e:	d105      	bne.n	8016aac <_ux_device_stack_set_feature+0x30>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8016aa0:	30fc      	adds	r0, #252	@ 0xfc
 8016aa2:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8016aa4:	2a00      	cmp	r2, #0
 8016aa6:	d001      	beq.n	8016aac <_ux_device_stack_set_feature+0x30>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8016aa8:	6541      	str	r1, [r0, #84]	@ 0x54
                return (UX_SUCCESS);
 8016aaa:	2300      	movs	r3, #0
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
    }
}
 8016aac:	0018      	movs	r0, r3
 8016aae:	bd70      	pop	{r4, r5, r6, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016ab0:	0003      	movs	r3, r0
 8016ab2:	33b4      	adds	r3, #180	@ 0xb4
 8016ab4:	681b      	ldr	r3, [r3, #0]
        while (interface_ptr != UX_NULL)
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d0ec      	beq.n	8016a94 <_ux_device_stack_set_feature+0x18>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8016aba:	69da      	ldr	r2, [r3, #28]
            while (endpoint_target != UX_NULL)
 8016abc:	2a00      	cmp	r2, #0
 8016abe:	d101      	bne.n	8016ac4 <_ux_device_stack_set_feature+0x48>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8016ac0:	699b      	ldr	r3, [r3, #24]
 8016ac2:	e7f8      	b.n	8016ab6 <_ux_device_stack_set_feature+0x3a>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8016ac4:	7b91      	ldrb	r1, [r2, #14]
 8016ac6:	42a1      	cmp	r1, r4
 8016ac8:	d103      	bne.n	8016ad2 <_ux_device_stack_set_feature+0x56>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8016aca:	2114      	movs	r1, #20
 8016acc:	6983      	ldr	r3, [r0, #24]
 8016ace:	4798      	blx	r3
                    return(UX_SUCCESS);
 8016ad0:	e7eb      	b.n	8016aaa <_ux_device_stack_set_feature+0x2e>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8016ad2:	6952      	ldr	r2, [r2, #20]
 8016ad4:	e7f2      	b.n	8016abc <_ux_device_stack_set_feature+0x40>
 8016ad6:	46c0      	nop			@ (mov r8, r8)
 8016ad8:	200030e0 	.word	0x200030e0

08016adc <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
 8016adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UX_SLAVE_CLASS              *class_instance;
ULONG                       class_index;
UINT                        status;


    status = UX_STATE_RESET;
 8016ade:	2500      	movs	r5, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 8016ae0:	002e      	movs	r6, r5
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8016ae2:	4f0e      	ldr	r7, [pc, #56]	@ (8016b1c <_ux_device_stack_tasks_run+0x40>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 8016ae4:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8016ae6:	6838      	ldr	r0, [r7, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 8016ae8:	2112      	movs	r1, #18
 8016aea:	6983      	ldr	r3, [r0, #24]
 8016aec:	4798      	blx	r3
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
 8016aee:	683b      	ldr	r3, [r7, #0]
 8016af0:	33fc      	adds	r3, #252	@ 0xfc
 8016af2:	685c      	ldr	r4, [r3, #4]
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	33fc      	adds	r3, #252	@ 0xfc
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	42b3      	cmp	r3, r6
 8016afc:	d801      	bhi.n	8016b02 <_ux_device_stack_tasks_run+0x26>
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
 8016afe:	0028      	movs	r0, r5
 8016b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 8016b02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d006      	beq.n	8016b16 <_ux_device_stack_tasks_run+0x3a>
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
 8016b08:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d003      	beq.n	8016b16 <_ux_device_stack_tasks_run+0x3a>
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 8016b0e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8016b10:	4798      	blx	r3
        class_instance ++;
 8016b12:	3464      	adds	r4, #100	@ 0x64
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 8016b14:	4305      	orrs	r5, r0
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 8016b16:	3601      	adds	r6, #1
 8016b18:	e7ec      	b.n	8016af4 <_ux_device_stack_tasks_run+0x18>
 8016b1a:	46c0      	nop			@ (mov r8, r8)
 8016b1c:	200030e0 	.word	0x200030e0

08016b20 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8016b20:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016b22:	4b0c      	ldr	r3, [pc, #48]	@ (8016b54 <_ux_device_stack_transfer_abort+0x34>)
{
 8016b24:	0004      	movs	r4, r0

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8016b26:	6241      	str	r1, [r0, #36]	@ 0x24
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016b28:	681e      	ldr	r6, [r3, #0]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8016b2a:	f002 fb71 	bl	8019210 <_ux_utility_interrupt_disable>

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8016b2e:	6823      	ldr	r3, [r4, #0]
    UX_DISABLE
 8016b30:	0005      	movs	r5, r0
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	d10b      	bne.n	8016b4e <_ux_device_stack_transfer_abort+0x2e>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8016b36:	69b3      	ldr	r3, [r6, #24]
 8016b38:	0022      	movs	r2, r4
 8016b3a:	210d      	movs	r1, #13
 8016b3c:	0030      	movs	r0, r6
 8016b3e:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 8016b40:	0028      	movs	r0, r5
 8016b42:	f002 fb69 	bl	8019218 <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8016b46:	2304      	movs	r3, #4
 8016b48:	6023      	str	r3, [r4, #0]
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
}
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	bd70      	pop	{r4, r5, r6, pc}
        UX_RESTORE
 8016b4e:	f002 fb63 	bl	8019218 <_ux_utility_interrupt_restore>
 8016b52:	e7fa      	b.n	8016b4a <_ux_device_stack_transfer_abort+0x2a>
 8016b54:	200030e0 	.word	0x200030e0

08016b58 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8016b58:	b510      	push	{r4, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016b5a:	3020      	adds	r0, #32
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8016b5c:	f7ff ffe0 	bl	8016b20 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8016b60:	2000      	movs	r0, #0
 8016b62:	bd10      	pop	{r4, pc}

08016b64 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8016b64:	b570      	push	{r4, r5, r6, lr}
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8016b66:	2500      	movs	r5, #0
 8016b68:	6305      	str	r5, [r0, #48]	@ 0x30
{
 8016b6a:	0004      	movs	r4, r0
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 8016b6c:	f000 f80a 	bl	8016b84 <_ux_device_stack_transfer_run>
 8016b70:	0003      	movs	r3, r0
    if (status == UX_STATE_LOCK)
        return(UX_BUSY);
 8016b72:	20fe      	movs	r0, #254	@ 0xfe
    if (status == UX_STATE_LOCK)
 8016b74:	2b06      	cmp	r3, #6
 8016b76:	d003      	beq.n	8016b80 <_ux_device_stack_transfer_request+0x1c>
    if (status < UX_STATE_NEXT)
        return(transfer_request -> ux_slave_transfer_request_completion_code);

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 8016b78:	0028      	movs	r0, r5
    if (status < UX_STATE_NEXT)
 8016b7a:	2b03      	cmp	r3, #3
 8016b7c:	d800      	bhi.n	8016b80 <_ux_device_stack_transfer_request+0x1c>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 8016b7e:	6a60      	ldr	r0, [r4, #36]	@ 0x24

    /* And return the status.  */
    return(status);

#endif
}
 8016b80:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b84 <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 8016b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8016b86:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8016b88:	0004      	movs	r4, r0
 8016b8a:	000d      	movs	r5, r1
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8016b8c:	2b01      	cmp	r3, #1
 8016b8e:	d104      	bne.n	8016b9a <_ux_device_stack_transfer_run+0x16>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8016b90:	2300      	movs	r3, #0
 8016b92:	6243      	str	r3, [r0, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 8016b94:	2004      	movs	r0, #4
 8016b96:	6320      	str	r0, [r4, #48]	@ 0x30
        return(UX_STATE_EXIT);
    }

    /* And return the status.  */
    return(status);
}
 8016b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8016b9a:	4b25      	ldr	r3, [pc, #148]	@ (8016c30 <_ux_device_stack_transfer_run+0xac>)
 8016b9c:	681e      	ldr	r6, [r3, #0]
        !(device_state == UX_DEVICE_ADDRESSED) &&
 8016b9e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8016ba0:	3b01      	subs	r3, #1
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 8016ba2:	2b02      	cmp	r3, #2
 8016ba4:	d905      	bls.n	8016bb2 <_ux_device_stack_transfer_run+0x2e>
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 8016ba6:	2325      	movs	r3, #37	@ 0x25
 8016ba8:	6243      	str	r3, [r0, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 8016baa:	2300      	movs	r3, #0
        return(UX_STATE_EXIT);
 8016bac:	2001      	movs	r0, #1
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 8016bae:	6323      	str	r3, [r4, #48]	@ 0x30
        return(UX_STATE_EXIT);
 8016bb0:	e7f2      	b.n	8016b98 <_ux_device_stack_transfer_run+0x14>
    state = transfer_request -> ux_slave_transfer_request_state;
 8016bb2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8016bb4:	6887      	ldr	r7, [r0, #8]
    switch(state)
 8016bb6:	2920      	cmp	r1, #32
 8016bb8:	d023      	beq.n	8016c02 <_ux_device_stack_transfer_run+0x7e>
 8016bba:	2921      	cmp	r1, #33	@ 0x21
 8016bbc:	d02a      	beq.n	8016c14 <_ux_device_stack_transfer_run+0x90>
 8016bbe:	2900      	cmp	r1, #0
 8016bc0:	d1f3      	bne.n	8016baa <_ux_device_stack_transfer_run+0x26>
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8016bc2:	2303      	movs	r3, #3
 8016bc4:	7bf8      	ldrb	r0, [r7, #15]
 8016bc6:	4218      	tst	r0, r3
 8016bc8:	d02e      	beq.n	8016c28 <_ux_device_stack_transfer_run+0xa4>
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8016bca:	7bb8      	ldrb	r0, [r7, #14]
 8016bcc:	287f      	cmp	r0, #127	@ 0x7f
 8016bce:	d90b      	bls.n	8016be8 <_ux_device_stack_transfer_run+0x64>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016bd0:	62a3      	str	r3, [r4, #40]	@ 0x28
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8016bd2:	2d00      	cmp	r5, #0
 8016bd4:	d00a      	beq.n	8016bec <_ux_device_stack_transfer_run+0x68>
            (slave_length != 0) && (host_length != slave_length) &&
 8016bd6:	4295      	cmp	r5, r2
 8016bd8:	d008      	beq.n	8016bec <_ux_device_stack_transfer_run+0x68>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8016bda:	0028      	movs	r0, r5
 8016bdc:	8a39      	ldrh	r1, [r7, #16]
 8016bde:	f7e9 fb49 	bl	8000274 <__aeabi_uidivmod>
            (slave_length != 0) && (host_length != slave_length) &&
 8016be2:	424b      	negs	r3, r1
 8016be4:	4159      	adcs	r1, r3
 8016be6:	e001      	b.n	8016bec <_ux_device_stack_transfer_run+0x68>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8016be8:	2302      	movs	r3, #2
 8016bea:	62a3      	str	r3, [r4, #40]	@ 0x28
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8016bec:	2300      	movs	r3, #0
 8016bee:	61a3      	str	r3, [r4, #24]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8016bf0:	68e3      	ldr	r3, [r4, #12]
 8016bf2:	63a1      	str	r1, [r4, #56]	@ 0x38
 8016bf4:	6123      	str	r3, [r4, #16]
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	6023      	str	r3, [r4, #0]
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 8016bfa:	331f      	adds	r3, #31
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 8016bfc:	6165      	str	r5, [r4, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8016bfe:	61e5      	str	r5, [r4, #28]
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 8016c00:	6323      	str	r3, [r4, #48]	@ 0x30
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8016c02:	7bfb      	ldrb	r3, [r7, #15]
 8016c04:	079b      	lsls	r3, r3, #30
 8016c06:	d003      	beq.n	8016c10 <_ux_device_stack_transfer_run+0x8c>
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8016c08:	687b      	ldr	r3, [r7, #4]
                return(UX_STATE_WAIT);
 8016c0a:	2005      	movs	r0, #5
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8016c0c:	2b02      	cmp	r3, #2
 8016c0e:	d0c3      	beq.n	8016b98 <_ux_device_stack_transfer_run+0x14>
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 8016c10:	2321      	movs	r3, #33	@ 0x21
 8016c12:	6323      	str	r3, [r4, #48]	@ 0x30
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 8016c14:	0022      	movs	r2, r4
 8016c16:	210c      	movs	r1, #12
 8016c18:	0030      	movs	r0, r6
 8016c1a:	69b3      	ldr	r3, [r6, #24]
 8016c1c:	4798      	blx	r3
        if (status < UX_STATE_WAIT)
 8016c1e:	2804      	cmp	r0, #4
 8016c20:	d8ba      	bhi.n	8016b98 <_ux_device_stack_transfer_run+0x14>
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8016c22:	2300      	movs	r3, #0
 8016c24:	6323      	str	r3, [r4, #48]	@ 0x30
 8016c26:	e7b7      	b.n	8016b98 <_ux_device_stack_transfer_run+0x14>
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8016c28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016c2a:	2b03      	cmp	r3, #3
 8016c2c:	d1de      	bne.n	8016bec <_ux_device_stack_transfer_run+0x68>
 8016c2e:	e7d0      	b.n	8016bd2 <_ux_device_stack_transfer_run+0x4e>
 8016c30:	200030e0 	.word	0x200030e0

08016c34 <_ux_system_error_handler>:
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8016c34:	4b05      	ldr	r3, [pc, #20]	@ (8016c4c <_ux_system_error_handler+0x18>)
{
 8016c36:	b510      	push	{r4, lr}
    _ux_system -> ux_system_last_error =  error_code;
 8016c38:	681b      	ldr	r3, [r3, #0]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8016c3a:	691c      	ldr	r4, [r3, #16]
    _ux_system -> ux_system_last_error =  error_code;
 8016c3c:	60da      	str	r2, [r3, #12]
    _ux_system -> ux_system_error_count++;
 8016c3e:	3401      	adds	r4, #1
 8016c40:	611c      	str	r4, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8016c42:	695b      	ldr	r3, [r3, #20]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d000      	beq.n	8016c4a <_ux_system_error_handler+0x16>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8016c48:	4798      	blx	r3
    }
}
 8016c4a:	bd10      	pop	{r4, pc}
 8016c4c:	200030e4 	.word	0x200030e4

08016c50 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8016c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c52:	0004      	movs	r4, r0
 8016c54:	0015      	movs	r5, r2
 8016c56:	001e      	movs	r6, r3
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
        return(UX_INVALID_PARAMETER);
 8016c58:	20fa      	movs	r0, #250	@ 0xfa
{
 8016c5a:	9101      	str	r1, [sp, #4]
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8016c5c:	2c00      	cmp	r4, #0
 8016c5e:	d023      	beq.n	8016ca8 <_ux_system_initialize+0x58>
 8016c60:	2900      	cmp	r1, #0
 8016c62:	d021      	beq.n	8016ca8 <_ux_system_initialize+0x58>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8016c64:	000a      	movs	r2, r1
 8016c66:	0020      	movs	r0, r4
 8016c68:	2100      	movs	r1, #0
 8016c6a:	f000 f9cb 	bl	8017004 <_ux_utility_memory_set>
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c6e:	0020      	movs	r0, r4
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c70:	0022      	movs	r2, r4
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8016c72:	4f1c      	ldr	r7, [pc, #112]	@ (8016ce4 <_ux_system_initialize+0x94>)
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c74:	4b1c      	ldr	r3, [pc, #112]	@ (8016ce8 <_ux_system_initialize+0x98>)
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c76:	308d      	adds	r0, #141	@ 0x8d
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c78:	3218      	adds	r2, #24
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c7a:	30ff      	adds	r0, #255	@ 0xff
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8016c7c:	603c      	str	r4, [r7, #0]
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c7e:	601a      	str	r2, [r3, #0]
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c80:	6020      	str	r0, [r4, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8016c82:	2d00      	cmp	r5, #0
 8016c84:	d011      	beq.n	8016caa <_ux_system_initialize+0x5a>
 8016c86:	2e00      	cmp	r6, #0
 8016c88:	d00f      	beq.n	8016caa <_ux_system_initialize+0x5a>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c8a:	0023      	movs	r3, r4

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016c8c:	21da      	movs	r1, #218	@ 0xda
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c8e:	33a1      	adds	r3, #161	@ 0xa1
 8016c90:	33ff      	adds	r3, #255	@ 0xff
 8016c92:	6063      	str	r3, [r4, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
    int_memory_pool_start += UX_ALIGN_MIN;
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016c94:	2307      	movs	r3, #7
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016c96:	0049      	lsls	r1, r1, #1
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016c98:	1861      	adds	r1, r4, r1
    int_memory_pool_start += UX_ALIGN_MIN;
 8016c9a:	3107      	adds	r1, #7
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016c9c:	4399      	bics	r1, r3

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8016c9e:	9b01      	ldr	r3, [sp, #4]
 8016ca0:	18e4      	adds	r4, r4, r3

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8016ca2:	42a1      	cmp	r1, r4
 8016ca4:	d304      	bcc.n	8016cb0 <_ux_system_initialize+0x60>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8016ca6:	2012      	movs	r0, #18
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
}
 8016ca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8016caa:	0003      	movs	r3, r0
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016cac:	21d0      	movs	r1, #208	@ 0xd0
 8016cae:	e7f0      	b.n	8016c92 <_ux_system_initialize+0x42>
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8016cb0:	1a62      	subs	r2, r4, r1
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 8016cb2:	f000 f913 	bl	8016edc <_ux_utility_memory_byte_pool_create>
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8016cb6:	2d00      	cmp	r5, #0
 8016cb8:	d011      	beq.n	8016cde <_ux_system_initialize+0x8e>
 8016cba:	2e00      	cmp	r6, #0
 8016cbc:	d00f      	beq.n	8016cde <_ux_system_initialize+0x8e>
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 8016cbe:	2100      	movs	r1, #0
 8016cc0:	0028      	movs	r0, r5
 8016cc2:	0032      	movs	r2, r6
 8016cc4:	f000 f99e 	bl	8017004 <_ux_utility_memory_set>
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016cc8:	2307      	movs	r3, #7
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8016cca:	1de9      	adds	r1, r5, #7
        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 8016ccc:	19ad      	adds	r5, r5, r6
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016cce:	4399      	bics	r1, r3
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 8016cd0:	42a9      	cmp	r1, r5
 8016cd2:	d2e8      	bcs.n	8016ca6 <_ux_system_initialize+0x56>
        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 8016cd4:	683b      	ldr	r3, [r7, #0]
        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 8016cd6:	1a6a      	subs	r2, r5, r1
        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 8016cd8:	6858      	ldr	r0, [r3, #4]
 8016cda:	f000 f8ff 	bl	8016edc <_ux_utility_memory_byte_pool_create>
    return(UX_SUCCESS);
 8016cde:	2000      	movs	r0, #0
 8016ce0:	e7e2      	b.n	8016ca8 <_ux_system_initialize+0x58>
 8016ce2:	46c0      	nop			@ (mov r8, r8)
 8016ce4:	200030e4 	.word	0x200030e4
 8016ce8:	200030e0 	.word	0x200030e0

08016cec <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8016cec:	b510      	push	{r4, lr}
 8016cee:	0004      	movs	r4, r0
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
            return(UX_INVALID_PARAMETER);
 8016cf0:	20fa      	movs	r0, #250	@ 0xfa
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8016cf2:	2c00      	cmp	r4, #0
 8016cf4:	d004      	beq.n	8016d00 <_uxe_system_initialize+0x14>
 8016cf6:	2900      	cmp	r1, #0
 8016cf8:	d002      	beq.n	8016d00 <_uxe_system_initialize+0x14>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 8016cfa:	0020      	movs	r0, r4
 8016cfc:	f7ff ffa8 	bl	8016c50 <_ux_system_initialize>
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 8016d00:	bd10      	pop	{r4, pc}

08016d02 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 8016d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d04:	0005      	movs	r5, r0

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8016d06:	000e      	movs	r6, r1
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 8016d08:	2703      	movs	r7, #3
{
 8016d0a:	001c      	movs	r4, r3
 8016d0c:	188b      	adds	r3, r1, r2
 8016d0e:	9301      	str	r3, [sp, #4]
    while(descriptor_entries--)
 8016d10:	9b01      	ldr	r3, [sp, #4]
 8016d12:	429e      	cmp	r6, r3
 8016d14:	d100      	bne.n	8016d18 <_ux_utility_descriptor_parse+0x16>
        }
    }

    /* Return to caller.  */
    return;
}
 8016d16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        switch(*descriptor_structure++)
 8016d18:	7833      	ldrb	r3, [r6, #0]
 8016d1a:	2b02      	cmp	r3, #2
 8016d1c:	d00b      	beq.n	8016d36 <_ux_utility_descriptor_parse+0x34>
 8016d1e:	2b04      	cmp	r3, #4
 8016d20:	d11a      	bne.n	8016d58 <_ux_utility_descriptor_parse+0x56>
                *descriptor++ =  0;
 8016d22:	2300      	movs	r3, #0
            while((ALIGN_TYPE) descriptor & 3u)
 8016d24:	423c      	tst	r4, r7
 8016d26:	d111      	bne.n	8016d4c <_ux_utility_descriptor_parse+0x4a>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8016d28:	0028      	movs	r0, r5
 8016d2a:	f000 f81a 	bl	8016d62 <_ux_utility_long_get>
            raw_descriptor +=  4;
 8016d2e:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8016d30:	c401      	stmia	r4!, {r0}
            break;
 8016d32:	3601      	adds	r6, #1
 8016d34:	e7ec      	b.n	8016d10 <_ux_utility_descriptor_parse+0xe>
                *descriptor++ =  0;
 8016d36:	2300      	movs	r3, #0
            while((ALIGN_TYPE) descriptor & 1u)
 8016d38:	2201      	movs	r2, #1
 8016d3a:	4214      	tst	r4, r2
 8016d3c:	d109      	bne.n	8016d52 <_ux_utility_descriptor_parse+0x50>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8016d3e:	0028      	movs	r0, r5
 8016d40:	f000 f967 	bl	8017012 <_ux_utility_short_get>
            raw_descriptor += 2;
 8016d44:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8016d46:	8020      	strh	r0, [r4, #0]
            descriptor += 2;
 8016d48:	3402      	adds	r4, #2
            break;
 8016d4a:	e7f2      	b.n	8016d32 <_ux_utility_descriptor_parse+0x30>
                *descriptor++ =  0;
 8016d4c:	7023      	strb	r3, [r4, #0]
 8016d4e:	3401      	adds	r4, #1
 8016d50:	e7e8      	b.n	8016d24 <_ux_utility_descriptor_parse+0x22>
                *descriptor++ =  0;
 8016d52:	7023      	strb	r3, [r4, #0]
 8016d54:	3401      	adds	r4, #1
 8016d56:	e7ef      	b.n	8016d38 <_ux_utility_descriptor_parse+0x36>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8016d58:	782b      	ldrb	r3, [r5, #0]
            raw_descriptor++;
 8016d5a:	3501      	adds	r5, #1
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8016d5c:	7023      	strb	r3, [r4, #0]
            descriptor ++;
 8016d5e:	3401      	adds	r4, #1
 8016d60:	e7e7      	b.n	8016d32 <_ux_utility_descriptor_parse+0x30>

08016d62 <_ux_utility_long_get>:
    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
    value |=  (ULONG)*address++ << 8;
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;
 8016d62:	7842      	ldrb	r2, [r0, #1]
 8016d64:	7803      	ldrb	r3, [r0, #0]
 8016d66:	0212      	lsls	r2, r2, #8
 8016d68:	431a      	orrs	r2, r3
 8016d6a:	7883      	ldrb	r3, [r0, #2]
 8016d6c:	78c0      	ldrb	r0, [r0, #3]
 8016d6e:	041b      	lsls	r3, r3, #16
 8016d70:	4313      	orrs	r3, r2
 8016d72:	0600      	lsls	r0, r0, #24
 8016d74:	4318      	orrs	r0, r3

    /* Return 32-bit value.  */
    return(value);
}
 8016d76:	4770      	bx	lr

08016d78 <_ux_utility_long_get_big_endian>:


    /* We read a byte at a time from the address.  */
    value =  (ULONG) ((*address++) << 24);
    value |=  (ULONG) ((*address++) << 16);
    value |=  (ULONG) ((*address++) << 8);
 8016d78:	7842      	ldrb	r2, [r0, #1]
 8016d7a:	7803      	ldrb	r3, [r0, #0]
 8016d7c:	0212      	lsls	r2, r2, #8
 8016d7e:	431a      	orrs	r2, r3
 8016d80:	7883      	ldrb	r3, [r0, #2]
 8016d82:	78c0      	ldrb	r0, [r0, #3]
 8016d84:	041b      	lsls	r3, r3, #16
 8016d86:	4313      	orrs	r3, r2
 8016d88:	0600      	lsls	r0, r0, #24
 8016d8a:	4318      	orrs	r0, r3
 8016d8c:	ba00      	rev	r0, r0
    value |=  (ULONG) *address;

    /* Return 32-bit value.  */
    return(value);
}
 8016d8e:	4770      	bx	lr

08016d90 <_ux_utility_long_put>:
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8016d90:	0a0b      	lsrs	r3, r1, #8
    *address++ =  (UCHAR) (value & 0xff);
 8016d92:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8016d94:	7043      	strb	r3, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8016d96:	0c0b      	lsrs	r3, r1, #16
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8016d98:	0e09      	lsrs	r1, r1, #24
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8016d9a:	7083      	strb	r3, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8016d9c:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 8016d9e:	4770      	bx	lr

08016da0 <_ux_utility_long_put_big_endian>:
ULONG   high_word_value;

    /* First we swap the value words.  */
    low_word_value =  value >> 16;
    high_word_value =  value << 16;
    value =  high_word_value | low_word_value;
 8016da0:	2310      	movs	r3, #16
 8016da2:	41d9      	rors	r1, r3

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8016da4:	0a0b      	lsrs	r3, r1, #8
 8016da6:	7003      	strb	r3, [r0, #0]
    *address++ =  (UCHAR) (value & 0xff);
 8016da8:	7041      	strb	r1, [r0, #1]
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 8016daa:	0e0b      	lsrs	r3, r1, #24
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 8016dac:	0c09      	lsrs	r1, r1, #16
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 8016dae:	7083      	strb	r3, [r0, #2]
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 8016db0:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 8016db2:	4770      	bx	lr

08016db4 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8016db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db6:	0015      	movs	r5, r2
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 8016db8:	2900      	cmp	r1, #0
 8016dba:	d121      	bne.n	8016e00 <_ux_utility_memory_allocate+0x4c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8016dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8016e78 <_ux_utility_memory_allocate+0xc4>)
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	681c      	ldr	r4, [r3, #0]
    {
        return(UX_NULL);
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 8016dc2:	2c00      	cmp	r4, #0
 8016dc4:	d019      	beq.n	8016dfa <_ux_utility_memory_allocate+0x46>
    {
        return(UX_NULL);
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 8016dc6:	2d00      	cmp	r5, #0
 8016dc8:	d017      	beq.n	8016dfa <_ux_utility_memory_allocate+0x46>

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
        memory_alignment =  UX_ALIGN_MIN;
 8016dca:	2607      	movs	r6, #7
    if (memory_alignment == UX_SAFE_ALIGN)
 8016dcc:	1c43      	adds	r3, r0, #1
 8016dce:	d003      	beq.n	8016dd8 <_ux_utility_memory_allocate+0x24>
    if (memory_alignment < UX_ALIGN_MIN)
 8016dd0:	0006      	movs	r6, r0
 8016dd2:	2807      	cmp	r0, #7
 8016dd4:	d200      	bcs.n	8016dd8 <_ux_utility_memory_allocate+0x24>
 8016dd6:	2607      	movs	r6, #7
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8016dd8:	2307      	movs	r3, #7
 8016dda:	3507      	adds	r5, #7
 8016ddc:	439d      	bics	r5, r3
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 8016dde:	0029      	movs	r1, r5
    if (memory_alignment <= UX_ALIGN_MIN)
 8016de0:	429e      	cmp	r6, r3
 8016de2:	d000      	beq.n	8016de6 <_ux_utility_memory_allocate+0x32>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 8016de4:	1971      	adds	r1, r6, r5
 8016de6:	0020      	movs	r0, r4
 8016de8:	f000 f896 	bl	8016f18 <_ux_utility_memory_byte_pool_search>

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 8016dec:	2800      	cmp	r0, #0
 8016dee:	d10d      	bne.n	8016e0c <_ux_utility_memory_allocate+0x58>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8016df0:	2212      	movs	r2, #18
 8016df2:	2108      	movs	r1, #8
 8016df4:	3002      	adds	r0, #2
 8016df6:	f7ff ff1d 	bl	8016c34 <_ux_system_error_handler>
        return(UX_NULL);
 8016dfa:	2400      	movs	r4, #0

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
}
 8016dfc:	0020      	movs	r0, r4
 8016dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 8016e00:	2901      	cmp	r1, #1
 8016e02:	d1fa      	bne.n	8016dfa <_ux_utility_memory_allocate+0x46>
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 8016e04:	4b1c      	ldr	r3, [pc, #112]	@ (8016e78 <_ux_utility_memory_allocate+0xc4>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	685c      	ldr	r4, [r3, #4]
 8016e0a:	e7da      	b.n	8016dc2 <_ux_utility_memory_allocate+0xe>
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 8016e0c:	0007      	movs	r7, r0
    next_ptr =             *this_block_link_ptr;
 8016e0e:	6801      	ldr	r1, [r0, #0]
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 8016e10:	3708      	adds	r7, #8
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016e12:	1a0a      	subs	r2, r1, r0
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8016e14:	3a08      	subs	r2, #8
    if ((int_memory_buffer & memory_alignment) != 0)
 8016e16:	4237      	tst	r7, r6
 8016e18:	d00e      	beq.n	8016e38 <_ux_utility_memory_allocate+0x84>
        int_memory_buffer += memory_alignment;
 8016e1a:	0033      	movs	r3, r6
 8016e1c:	3308      	adds	r3, #8
 8016e1e:	19db      	adds	r3, r3, r7
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 8016e20:	43b3      	bics	r3, r6
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 8016e22:	3b08      	subs	r3, #8
        *next_block_link_ptr =  *this_block_link_ptr;
 8016e24:	6019      	str	r1, [r3, #0]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8016e26:	4915      	ldr	r1, [pc, #84]	@ (8016e7c <_ux_utility_memory_allocate+0xc8>)
 8016e28:	6059      	str	r1, [r3, #4]
        pool_ptr -> ux_byte_pool_fragments++;
 8016e2a:	6861      	ldr	r1, [r4, #4]
 8016e2c:	3101      	adds	r1, #1
 8016e2e:	6061      	str	r1, [r4, #4]
        *this_block_link_ptr =  next_ptr;
 8016e30:	6003      	str	r3, [r0, #0]
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016e32:	1a18      	subs	r0, r3, r0
 8016e34:	1a12      	subs	r2, r2, r0
        current_ptr = next_ptr;
 8016e36:	0018      	movs	r0, r3
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 8016e38:	1b53      	subs	r3, r2, r5
 8016e3a:	2b13      	cmp	r3, #19
 8016e3c:	d90b      	bls.n	8016e56 <_ux_utility_memory_allocate+0xa2>
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 8016e3e:	002b      	movs	r3, r5
        *next_block_link_ptr =  *this_block_link_ptr;
 8016e40:	6802      	ldr	r2, [r0, #0]
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 8016e42:	3308      	adds	r3, #8
 8016e44:	18c3      	adds	r3, r0, r3
        *next_block_link_ptr =  *this_block_link_ptr;
 8016e46:	601a      	str	r2, [r3, #0]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8016e48:	4a0c      	ldr	r2, [pc, #48]	@ (8016e7c <_ux_utility_memory_allocate+0xc8>)
 8016e4a:	605a      	str	r2, [r3, #4]
        pool_ptr -> ux_byte_pool_fragments++;
 8016e4c:	6862      	ldr	r2, [r4, #4]
 8016e4e:	3201      	adds	r2, #1
 8016e50:	6062      	str	r2, [r4, #4]
        available_bytes =  memory_size_requested;
 8016e52:	002a      	movs	r2, r5
        *this_block_link_ptr =  next_ptr;
 8016e54:	6003      	str	r3, [r0, #0]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8016e56:	6823      	ldr	r3, [r4, #0]
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8016e58:	6044      	str	r4, [r0, #4]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8016e5a:	3b08      	subs	r3, #8
 8016e5c:	1a9b      	subs	r3, r3, r2
 8016e5e:	6023      	str	r3, [r4, #0]
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 8016e60:	68a3      	ldr	r3, [r4, #8]
 8016e62:	4283      	cmp	r3, r0
 8016e64:	d101      	bne.n	8016e6a <_ux_utility_memory_allocate+0xb6>
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 8016e66:	6803      	ldr	r3, [r0, #0]
 8016e68:	60a3      	str	r3, [r4, #8]
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8016e6a:	3008      	adds	r0, #8
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 8016e6c:	2100      	movs	r1, #0
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8016e6e:	0004      	movs	r4, r0
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 8016e70:	f000 f8c8 	bl	8017004 <_ux_utility_memory_set>
    return(work_ptr);
 8016e74:	e7c2      	b.n	8016dfc <_ux_utility_memory_allocate+0x48>
 8016e76:	46c0      	nop			@ (mov r8, r8)
 8016e78:	200030e4 	.word	0x200030e4
 8016e7c:	ffffeeee 	.word	0xffffeeee

08016e80 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8016e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d011      	beq.n	8016eaa <_ux_utility_memory_allocate_mulc_safe+0x2a>
 8016e86:	0c1c      	lsrs	r4, r3, #16
 8016e88:	0c17      	lsrs	r7, r2, #16
 8016e8a:	2c00      	cmp	r4, #0
 8016e8c:	d111      	bne.n	8016eb2 <_ux_utility_memory_allocate_mulc_safe+0x32>
 8016e8e:	2f00      	cmp	r7, #0
 8016e90:	d00b      	beq.n	8016eaa <_ux_utility_memory_allocate_mulc_safe+0x2a>
 8016e92:	1c3c      	adds	r4, r7, #0
 8016e94:	1c1e      	adds	r6, r3, #0
 8016e96:	b29f      	uxth	r7, r3
 8016e98:	b295      	uxth	r5, r2
 8016e9a:	437d      	muls	r5, r7
 8016e9c:	b2b6      	uxth	r6, r6
 8016e9e:	b2a4      	uxth	r4, r4
 8016ea0:	4374      	muls	r4, r6
 8016ea2:	0c2d      	lsrs	r5, r5, #16
 8016ea4:	1964      	adds	r4, r4, r5
 8016ea6:	0c24      	lsrs	r4, r4, #16
 8016ea8:	d107      	bne.n	8016eba <_ux_utility_memory_allocate_mulc_safe+0x3a>
 8016eaa:	435a      	muls	r2, r3
 8016eac:	f7ff ff82 	bl	8016db4 <_ux_utility_memory_allocate>
}
 8016eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8016eb2:	2f00      	cmp	r7, #0
 8016eb4:	d101      	bne.n	8016eba <_ux_utility_memory_allocate_mulc_safe+0x3a>
 8016eb6:	1c16      	adds	r6, r2, #0
 8016eb8:	e7ed      	b.n	8016e96 <_ux_utility_memory_allocate_mulc_safe+0x16>
 8016eba:	2000      	movs	r0, #0
 8016ebc:	e7f8      	b.n	8016eb0 <_ux_utility_memory_allocate_mulc_safe+0x30>

08016ebe <_ux_utility_memory_allocate_mulv_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulv_safe(ULONG align,ULONG cache,ULONG size_mul_v0,ULONG size_mul_v1)
{
 8016ebe:	b570      	push	{r4, r5, r6, lr}
 8016ec0:	0014      	movs	r4, r2
    return UX_UTILITY_MEMORY_ALLOCATE_MULV_SAFE(align, cache, size_mul_v0, size_mul_v1);
 8016ec2:	001a      	movs	r2, r3
{
 8016ec4:	0005      	movs	r5, r0
    return UX_UTILITY_MEMORY_ALLOCATE_MULV_SAFE(align, cache, size_mul_v0, size_mul_v1);
 8016ec6:	4362      	muls	r2, r4
 8016ec8:	429c      	cmp	r4, r3
 8016eca:	d900      	bls.n	8016ece <_ux_utility_memory_allocate_mulv_safe+0x10>
 8016ecc:	001c      	movs	r4, r3
 8016ece:	2000      	movs	r0, #0
 8016ed0:	42a2      	cmp	r2, r4
 8016ed2:	d302      	bcc.n	8016eda <_ux_utility_memory_allocate_mulv_safe+0x1c>
 8016ed4:	0028      	movs	r0, r5
 8016ed6:	f7ff ff6d 	bl	8016db4 <_ux_utility_memory_allocate>
}
 8016eda:	bd70      	pop	{r4, r5, r6, pc}

08016edc <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 8016edc:	b570      	push	{r4, r5, r6, lr}
 8016ede:	000c      	movs	r4, r1
 8016ee0:	0016      	movs	r6, r2
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 8016ee2:	2100      	movs	r1, #0
 8016ee4:	2214      	movs	r2, #20
{
 8016ee6:	0005      	movs	r5, r0
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 8016ee8:	f000 f88c 	bl	8017004 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8016eec:	2303      	movs	r3, #3
 8016eee:	439e      	bics	r6, r3

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8016ef0:	0033      	movs	r3, r6
 8016ef2:	3b08      	subs	r3, #8
 8016ef4:	602b      	str	r3, [r5, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 8016ef6:	2302      	movs	r3, #2
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8016ef8:	19a2      	adds	r2, r4, r6
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 8016efa:	606b      	str	r3, [r5, #4]
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
    *block_indirect_ptr =  temp_ptr;
 8016efc:	1f13      	subs	r3, r2, #4
    pool_ptr -> ux_byte_pool_size =    pool_size;
 8016efe:	612e      	str	r6, [r5, #16]
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016f00:	60ec      	str	r4, [r5, #12]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016f02:	60ac      	str	r4, [r5, #8]
    *block_indirect_ptr =  temp_ptr;
 8016f04:	601d      	str	r5, [r3, #0]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
    *block_indirect_ptr =  block_ptr;
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 8016f06:	4b03      	ldr	r3, [pc, #12]	@ (8016f14 <_ux_utility_memory_byte_pool_create+0x38>)
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016f08:	3a08      	subs	r2, #8
 8016f0a:	6014      	str	r4, [r2, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
}
 8016f0c:	2000      	movs	r0, #0
    *block_indirect_ptr =  block_ptr;
 8016f0e:	6022      	str	r2, [r4, #0]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 8016f10:	6063      	str	r3, [r4, #4]
}
 8016f12:	bd70      	pop	{r4, r5, r6, pc}
 8016f14:	ffffeeee 	.word	0xffffeeee

08016f18 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8016f18:	0003      	movs	r3, r0
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 8016f1a:	6842      	ldr	r2, [r0, #4]
{
 8016f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 8016f1e:	1e90      	subs	r0, r2, #2
 8016f20:	681c      	ldr	r4, [r3, #0]
 8016f22:	00c0      	lsls	r0, r0, #3
 8016f24:	1900      	adds	r0, r0, r4
    if (memory_size >= total_theoretical_available)
 8016f26:	4288      	cmp	r0, r1
 8016f28:	d801      	bhi.n	8016f2e <_ux_utility_memory_byte_pool_search+0x16>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 8016f2a:	2000      	movs	r0, #0
        return(UX_NULL);
    }

    /* Return the search pointer.  */
    return(current_ptr);
}
 8016f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8016f2e:	6898      	ldr	r0, [r3, #8]
 8016f30:	68dc      	ldr	r4, [r3, #12]
 8016f32:	42a0      	cmp	r0, r4
 8016f34:	d3f9      	bcc.n	8016f2a <_ux_utility_memory_byte_pool_search+0x12>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 8016f36:	691d      	ldr	r5, [r3, #16]
 8016f38:	1964      	adds	r4, r4, r5
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8016f3a:	42a0      	cmp	r0, r4
 8016f3c:	d8f5      	bhi.n	8016f2a <_ux_utility_memory_byte_pool_search+0x12>
UINT                first_free_block_found =  UX_FALSE;
 8016f3e:	2400      	movs	r4, #0
                        examine_blocks--;
 8016f40:	2701      	movs	r7, #1
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 8016f42:	3201      	adds	r2, #1
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016f44:	6845      	ldr	r5, [r0, #4]
 8016f46:	4e15      	ldr	r6, [pc, #84]	@ (8016f9c <_ux_utility_memory_byte_pool_search+0x84>)
 8016f48:	42b5      	cmp	r5, r6
 8016f4a:	d122      	bne.n	8016f92 <_ux_utility_memory_byte_pool_search+0x7a>
            if (first_free_block_found == UX_FALSE)
 8016f4c:	2c00      	cmp	r4, #0
 8016f4e:	d100      	bne.n	8016f52 <_ux_utility_memory_byte_pool_search+0x3a>
                pool_ptr->ux_byte_pool_search =  current_ptr;
 8016f50:	6098      	str	r0, [r3, #8]
            next_ptr =             *this_block_link_ptr;
 8016f52:	6805      	ldr	r5, [r0, #0]
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016f54:	1a2c      	subs	r4, r5, r0
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8016f56:	3c08      	subs	r4, #8
            if (available_bytes >= memory_size)
 8016f58:	42a1      	cmp	r1, r4
 8016f5a:	d91c      	bls.n	8016f96 <_ux_utility_memory_byte_pool_search+0x7e>
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016f5c:	686e      	ldr	r6, [r5, #4]
                    *this_block_link_ptr =  *next_block_link_ptr;
 8016f5e:	682c      	ldr	r4, [r5, #0]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016f60:	46b4      	mov	ip, r6
 8016f62:	4e0e      	ldr	r6, [pc, #56]	@ (8016f9c <_ux_utility_memory_byte_pool_search+0x84>)
 8016f64:	45b4      	cmp	ip, r6
 8016f66:	d10f      	bne.n	8016f88 <_ux_utility_memory_byte_pool_search+0x70>
                    *this_block_link_ptr =  *next_block_link_ptr;
 8016f68:	6004      	str	r4, [r0, #0]
                    pool_ptr -> ux_byte_pool_fragments--;
 8016f6a:	685c      	ldr	r4, [r3, #4]
 8016f6c:	3c01      	subs	r4, #1
 8016f6e:	605c      	str	r4, [r3, #4]
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 8016f70:	689c      	ldr	r4, [r3, #8]
 8016f72:	42ac      	cmp	r4, r5
 8016f74:	d006      	beq.n	8016f84 <_ux_utility_memory_byte_pool_search+0x6c>
                        examine_blocks--;
 8016f76:	003c      	movs	r4, r7
        if (examine_blocks != ((UINT) 0))
 8016f78:	2a00      	cmp	r2, #0
 8016f7a:	d0d6      	beq.n	8016f2a <_ux_utility_memory_byte_pool_search+0x12>
            examine_blocks--;
 8016f7c:	3a01      	subs	r2, #1
    } while(examine_blocks != ((UINT) 0));
 8016f7e:	2a00      	cmp	r2, #0
 8016f80:	d1e0      	bne.n	8016f44 <_ux_utility_memory_byte_pool_search+0x2c>
 8016f82:	e7d2      	b.n	8016f2a <_ux_utility_memory_byte_pool_search+0x12>
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 8016f84:	6098      	str	r0, [r3, #8]
 8016f86:	e7f6      	b.n	8016f76 <_ux_utility_memory_byte_pool_search+0x5e>
                    if (examine_blocks != ((UINT) 0))
 8016f88:	2a00      	cmp	r2, #0
 8016f8a:	d0ce      	beq.n	8016f2a <_ux_utility_memory_byte_pool_search+0x12>
                    current_ptr =  *next_block_link_ptr;
 8016f8c:	0020      	movs	r0, r4
                        examine_blocks--;
 8016f8e:	3a01      	subs	r2, #1
 8016f90:	e7f1      	b.n	8016f76 <_ux_utility_memory_byte_pool_search+0x5e>
            current_ptr =  *this_block_link_ptr;
 8016f92:	6800      	ldr	r0, [r0, #0]
 8016f94:	e7f0      	b.n	8016f78 <_ux_utility_memory_byte_pool_search+0x60>
    if (available_bytes == ((ULONG) 0))
 8016f96:	2c00      	cmp	r4, #0
 8016f98:	d1c8      	bne.n	8016f2c <_ux_utility_memory_byte_pool_search+0x14>
 8016f9a:	e7c6      	b.n	8016f2a <_ux_utility_memory_byte_pool_search+0x12>
 8016f9c:	ffffeeee 	.word	0xffffeeee

08016fa0 <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
 8016fa0:	2300      	movs	r3, #0
{
 8016fa2:	b510      	push	{r4, lr}
    while(length--)
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d100      	bne.n	8016faa <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
 8016fa8:	bd10      	pop	{r4, pc}
        *destination++ =  *source++;
 8016faa:	5ccc      	ldrb	r4, [r1, r3]
 8016fac:	54c4      	strb	r4, [r0, r3]
 8016fae:	3301      	adds	r3, #1
 8016fb0:	e7f8      	b.n	8016fa4 <_ux_utility_memory_copy+0x4>
	...

08016fb4 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8016fb4:	b570      	push	{r4, r5, r6, lr}
    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
    if (work_ptr != UX_NULL)
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d00e      	beq.n	8016fd8 <_ux_utility_memory_free+0x24>
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 8016fba:	1f02      	subs	r2, r0, #4
 8016fbc:	6813      	ldr	r3, [r2, #0]
 8016fbe:	490f      	ldr	r1, [pc, #60]	@ (8016ffc <_ux_utility_memory_free+0x48>)
 8016fc0:	428b      	cmp	r3, r1
 8016fc2:	d009      	beq.n	8016fd8 <_ux_utility_memory_free+0x24>
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
            pool_ptr = *byte_pool_ptr;

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d007      	beq.n	8016fd8 <_ux_utility_memory_free+0x24>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 8016fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8017000 <_ux_utility_memory_free+0x4c>)
 8016fca:	6824      	ldr	r4, [r4, #0]
            if ((pool_ptr == UX_NULL) ||
 8016fcc:	6825      	ldr	r5, [r4, #0]
 8016fce:	429d      	cmp	r5, r3
 8016fd0:	d008      	beq.n	8016fe4 <_ux_utility_memory_free+0x30>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 8016fd2:	6864      	ldr	r4, [r4, #4]
 8016fd4:	429c      	cmp	r4, r3
 8016fd6:	d005      	beq.n	8016fe4 <_ux_utility_memory_free+0x30>

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8016fd8:	2219      	movs	r2, #25
 8016fda:	2108      	movs	r1, #8
 8016fdc:	2002      	movs	r0, #2
 8016fde:	f7ff fe29 	bl	8016c34 <_ux_system_error_handler>
    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
}
 8016fe2:	bd70      	pop	{r4, r5, r6, pc}
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8016fe4:	3808      	subs	r0, #8
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 8016fe6:	6011      	str	r1, [r2, #0]
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8016fe8:	6801      	ldr	r1, [r0, #0]
 8016fea:	681a      	ldr	r2, [r3, #0]
 8016fec:	1a09      	subs	r1, r1, r0
 8016fee:	1852      	adds	r2, r2, r1
    pool_ptr -> ux_byte_pool_available =
 8016ff0:	601a      	str	r2, [r3, #0]
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 8016ff2:	689a      	ldr	r2, [r3, #8]
 8016ff4:	4282      	cmp	r2, r0
 8016ff6:	d9f4      	bls.n	8016fe2 <_ux_utility_memory_free+0x2e>
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 8016ff8:	6098      	str	r0, [r3, #8]
 8016ffa:	e7f2      	b.n	8016fe2 <_ux_utility_memory_free+0x2e>
 8016ffc:	ffffeeee 	.word	0xffffeeee
 8017000:	200030e4 	.word	0x200030e4

08017004 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 8017004:	1882      	adds	r2, r0, r2
 8017006:	4290      	cmp	r0, r2
 8017008:	d100      	bne.n	801700c <_ux_utility_memory_set+0x8>
        *work_ptr++ =  value;
    }

    /* Return to caller.  */
    return; 
}
 801700a:	4770      	bx	lr
        *work_ptr++ =  value;
 801700c:	7001      	strb	r1, [r0, #0]
 801700e:	3001      	adds	r0, #1
 8017010:	e7f9      	b.n	8017006 <_ux_utility_memory_set+0x2>

08017012 <_ux_utility_short_get>:


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);
 8017012:	7803      	ldrb	r3, [r0, #0]
 8017014:	7840      	ldrb	r0, [r0, #1]
 8017016:	0200      	lsls	r0, r0, #8

    /* Return to caller.  */
    return((ULONG) value);
 8017018:	4318      	orrs	r0, r3
}
 801701a:	4770      	bx	lr

0801701c <_ux_utility_short_get_big_endian>:
    /* We read a byte at a time from the address.  */
    value =  (USHORT)((*address++) << 8);
    value =  (USHORT)(value | *address);

    /* Return 16-bit value.  */
    return((ULONG) value);
 801701c:	7803      	ldrb	r3, [r0, #0]
 801701e:	7840      	ldrb	r0, [r0, #1]
 8017020:	0200      	lsls	r0, r0, #8
 8017022:	4318      	orrs	r0, r3
 8017024:	ba40      	rev16	r0, r0
 8017026:	b280      	uxth	r0, r0
}
 8017028:	4770      	bx	lr

0801702a <_ux_utility_short_put_big_endian>:

    
    /* First we swap the value bytes. */
    low_byte_value =  value >> 8;
    high_byte_value =  (USHORT)(value<< 8);
    value =  high_byte_value | low_byte_value;
 801702a:	ba49      	rev16	r1, r1
 801702c:	b289      	uxth	r1, r1

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 801702e:	7001      	strb	r1, [r0, #0]
    *address=     (UCHAR) ((value >> 8) & 0xff);
 8017030:	0a09      	lsrs	r1, r1, #8
 8017032:	7041      	strb	r1, [r0, #1]

    /* Return to caller. */
    return;
}
 8017034:	4770      	bx	lr

08017036 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8017036:	b510      	push	{r4, lr}

UINT    string_length;


    if (string == UX_NULL)
 8017038:	2800      	cmp	r0, #0
 801703a:	d00b      	beq.n	8017054 <_ux_utility_string_length_check+0x1e>
        return(UX_ERROR);

    string_length = 0;
 801703c:	2300      	movs	r3, #0

    while (1)
    {

        if (string[string_length] == '\0')
 801703e:	5cc4      	ldrb	r4, [r0, r3]
 8017040:	2c00      	cmp	r4, #0
 8017042:	d009      	beq.n	8017058 <_ux_utility_string_length_check+0x22>
            break;

        string_length++;
 8017044:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 8017046:	4293      	cmp	r3, r2
 8017048:	d9f9      	bls.n	801703e <_ux_utility_string_length_check+0x8>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 801704a:	22ff      	movs	r2, #255	@ 0xff
 801704c:	2108      	movs	r1, #8
 801704e:	2002      	movs	r0, #2
 8017050:	f7ff fdf0 	bl	8016c34 <_ux_system_error_handler>
        return(UX_ERROR);
 8017054:	20ff      	movs	r0, #255	@ 0xff
 8017056:	e002      	b.n	801705e <_ux_utility_string_length_check+0x28>

            return(UX_ERROR);
        }
    }

    if (string_length_ptr)
 8017058:	2900      	cmp	r1, #0
 801705a:	d101      	bne.n	8017060 <_ux_utility_string_length_check+0x2a>
        *string_length_ptr = string_length;

    return(UX_SUCCESS); 
 801705c:	2000      	movs	r0, #0
}
 801705e:	bd10      	pop	{r4, pc}
        *string_length_ptr = string_length;
 8017060:	600b      	str	r3, [r1, #0]
 8017062:	e7fb      	b.n	801705c <_ux_utility_string_length_check+0x26>

08017064 <_ux_device_class_hid_activate>:
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
 8017064:	2200      	movs	r2, #0

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8017066:	6a03      	ldr	r3, [r0, #32]
{
 8017068:	b570      	push	{r4, r5, r6, lr}
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 801706a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 801706c:	0015      	movs	r5, r2

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 801706e:	6883      	ldr	r3, [r0, #8]
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8017070:	2003      	movs	r0, #3
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 8017072:	609c      	str	r4, [r3, #8]
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 8017074:	6023      	str	r3, [r4, #0]
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 8017076:	69db      	ldr	r3, [r3, #28]
    while (endpoint_interrupt != UX_NULL)
 8017078:	2b00      	cmp	r3, #0
 801707a:	d103      	bne.n	8017084 <_ux_device_class_hid_activate+0x20>
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
        return (UX_ERROR);
 801707c:	20ff      	movs	r0, #255	@ 0xff
    if (endpoint_in == UX_NULL)
 801707e:	2d00      	cmp	r5, #0
 8017080:	d113      	bne.n	80170aa <_ux_device_class_hid_activate+0x46>
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8017082:	bd70      	pop	{r4, r5, r6, pc}
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8017084:	7bd9      	ldrb	r1, [r3, #15]
 8017086:	4001      	ands	r1, r0
 8017088:	2903      	cmp	r1, #3
 801708a:	d108      	bne.n	801709e <_ux_device_class_hid_activate+0x3a>
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 801708c:	7b9e      	ldrb	r6, [r3, #14]
                                UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 801708e:	68a1      	ldr	r1, [r4, #8]
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8017090:	2e7f      	cmp	r6, #127	@ 0x7f
 8017092:	d906      	bls.n	80170a2 <_ux_device_class_hid_activate+0x3e>
                                UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 8017094:	3108      	adds	r1, #8
                endpoint_in = endpoint_interrupt;
 8017096:	001d      	movs	r5, r3
                        ux_slave_transfer_request_data_pointer =
 8017098:	62d9      	str	r1, [r3, #44]	@ 0x2c
                if (endpoint_out != UX_NULL)
 801709a:	2a00      	cmp	r2, #0
 801709c:	d105      	bne.n	80170aa <_ux_device_class_hid_activate+0x46>
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 801709e:	695b      	ldr	r3, [r3, #20]
 80170a0:	e7ea      	b.n	8017078 <_ux_device_class_hid_activate+0x14>
                endpoint_out = endpoint_interrupt;
 80170a2:	001a      	movs	r2, r3
                        ux_slave_transfer_request_data_pointer =
 80170a4:	62d9      	str	r1, [r3, #44]	@ 0x2c
                if (endpoint_in != UX_NULL)
 80170a6:	2d00      	cmp	r5, #0
 80170a8:	d0f9      	beq.n	801709e <_ux_device_class_hid_activate+0x3a>
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80170aa:	2301      	movs	r3, #1
    if (hid -> ux_device_class_hid_receiver && endpoint_out)
 80170ac:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80170ae:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 80170b0:	6065      	str	r5, [r4, #4]
    hid -> ux_device_class_hid_read_endpoint              = endpoint_out;
 80170b2:	6662      	str	r2, [r4, #100]	@ 0x64
    if (hid -> ux_device_class_hid_receiver && endpoint_out)
 80170b4:	2900      	cmp	r1, #0
 80170b6:	d00a      	beq.n	80170ce <_ux_device_class_hid_activate+0x6a>
 80170b8:	2a00      	cmp	r2, #0
 80170ba:	d008      	beq.n	80170ce <_ux_device_class_hid_activate+0x6a>
            hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 80170bc:	68cb      	ldr	r3, [r1, #12]
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
 80170be:	690a      	ldr	r2, [r1, #16]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_save_pos =
 80170c0:	618b      	str	r3, [r1, #24]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_read_pos =
 80170c2:	614b      	str	r3, [r1, #20]
            ((UX_DEVICE_CLASS_HID_RECEIVED_EVENT*)pos) -> ux_device_class_hid_received_event_length = 0;
 80170c4:	2100      	movs	r1, #0
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
 80170c6:	429a      	cmp	r2, r3
 80170c8:	d810      	bhi.n	80170ec <_ux_device_class_hid_activate+0x88>
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 80170ca:	2323      	movs	r3, #35	@ 0x23
 80170cc:	67e3      	str	r3, [r4, #124]	@ 0x7c
    _ux_utility_memory_set((VOID *)&hid -> ux_device_class_hid_event, 0,
 80170ce:	0020      	movs	r0, r4
 80170d0:	2210      	movs	r2, #16
 80170d2:	2100      	movs	r1, #0
 80170d4:	3034      	adds	r0, #52	@ 0x34
 80170d6:	f7ff ff95 	bl	8017004 <_ux_utility_memory_set>
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
 80170da:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80170dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80170de:	2300      	movs	r3, #0
 80170e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 80170e2:	69a3      	ldr	r3, [r4, #24]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d104      	bne.n	80170f2 <_ux_device_class_hid_activate+0x8e>
    return(UX_SUCCESS);
 80170e8:	2000      	movs	r0, #0
 80170ea:	e7ca      	b.n	8017082 <_ux_device_class_hid_activate+0x1e>
            ((UX_DEVICE_CLASS_HID_RECEIVED_EVENT*)pos) -> ux_device_class_hid_received_event_length = 0;
 80170ec:	6019      	str	r1, [r3, #0]
             pos += UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(hid -> ux_device_class_hid_receiver))
 80170ee:	3308      	adds	r3, #8
 80170f0:	e7e9      	b.n	80170c6 <_ux_device_class_hid_activate+0x62>
        hid -> ux_slave_class_hid_instance_activate(hid);
 80170f2:	0020      	movs	r0, r4
 80170f4:	4798      	blx	r3
 80170f6:	e7f7      	b.n	80170e8 <_ux_device_class_hid_activate+0x84>

080170f8 <_ux_device_class_hid_control_request>:
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80170f8:	4b34      	ldr	r3, [pc, #208]	@ (80171cc <_ux_device_class_hid_control_request+0xd4>)
{
 80170fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 80170fc:	681e      	ldr	r6, [r3, #0]
{
 80170fe:	0004      	movs	r4, r0

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8017100:	0033      	movs	r3, r6

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017102:	0030      	movs	r0, r6
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8017104:	335c      	adds	r3, #92	@ 0x5c
 8017106:	9301      	str	r3, [sp, #4]
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017108:	333d      	adds	r3, #61	@ 0x3d
 801710a:	781b      	ldrb	r3, [r3, #0]
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801710c:	309a      	adds	r0, #154	@ 0x9a
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801710e:	9300      	str	r3, [sp, #0]
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017110:	f7ff ff7f 	bl	8017012 <_ux_utility_short_get>
 8017114:	0005      	movs	r5, r0
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8017116:	0030      	movs	r0, r6
 8017118:	309c      	adds	r0, #156	@ 0x9c
 801711a:	f7ff ff7a 	bl	8017012 <_ux_utility_short_get>
 801711e:	0007      	movs	r7, r0
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8017120:	0030      	movs	r0, r6
 8017122:	309e      	adds	r0, #158	@ 0x9e
 8017124:	f7ff ff75 	bl	8017012 <_ux_utility_short_get>

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8017128:	0032      	movs	r2, r6
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 801712a:	6a21      	ldr	r1, [r4, #32]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801712c:	0003      	movs	r3, r0
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 801712e:	6c8c      	ldr	r4, [r1, #72]	@ 0x48

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8017130:	9900      	ldr	r1, [sp, #0]
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8017132:	329b      	adds	r2, #155	@ 0x9b
    switch (request)
 8017134:	1e48      	subs	r0, r1, #1
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8017136:	7812      	ldrb	r2, [r2, #0]
    switch (request)
 8017138:	280a      	cmp	r0, #10
 801713a:	d844      	bhi.n	80171c6 <_ux_device_class_hid_control_request+0xce>
 801713c:	f7e8 fff6 	bl	800012c <__gnu_thumb1_case_uqi>
 8017140:	433e1a06 	.word	0x433e1a06
 8017144:	43431443 	.word	0x43431443
 8017148:	1a0d      	.short	0x1a0d
 801714a:	41          	.byte	0x41
 801714b:	00          	.byte	0x00
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 801714c:	003a      	movs	r2, r7
 801714e:	0029      	movs	r1, r5
 8017150:	0020      	movs	r0, r4
 8017152:	f000 fa81 	bl	8017658 <_ux_device_class_hid_report_get>
            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8017156:	2000      	movs	r0, #0
}
 8017158:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            descriptor_type =  (request_value & 0xff00) >> 8;
 801715a:	0a29      	lsrs	r1, r5, #8
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 801715c:	003a      	movs	r2, r7
 801715e:	0020      	movs	r0, r4
            descriptor_type =  (request_value & 0xff00) >> 8;
 8017160:	b2c9      	uxtb	r1, r1
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 8017162:	f000 fac7 	bl	80176f4 <_ux_device_class_hid_report_set>
            break;
 8017166:	e7f6      	b.n	8017156 <_ux_device_class_hid_control_request+0x5e>
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 8017168:	003a      	movs	r2, r7
 801716a:	0029      	movs	r1, r5
 801716c:	0020      	movs	r0, r4
 801716e:	f000 f83d 	bl	80171ec <_ux_device_class_hid_descriptor_send>
            break;            
 8017172:	e7f0      	b.n	8017156 <_ux_device_class_hid_control_request+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8017174:	6c61      	ldr	r1, [r4, #68]	@ 0x44
            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8017176:	9800      	ldr	r0, [sp, #0]
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8017178:	b2c9      	uxtb	r1, r1
            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 801717a:	2802      	cmp	r0, #2
 801717c:	d107      	bne.n	801718e <_ux_device_class_hid_control_request+0x96>
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 801717e:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8017180:	7011      	strb	r1, [r2, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8017182:	9801      	ldr	r0, [sp, #4]
 8017184:	001a      	movs	r2, r3
 8017186:	2101      	movs	r1, #1
 8017188:	f7ff fcec 	bl	8016b64 <_ux_device_stack_transfer_request>
            break;
 801718c:	e7e3      	b.n	8017156 <_ux_device_class_hid_control_request+0x5e>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 801718e:	428a      	cmp	r2, r1
 8017190:	d0e1      	beq.n	8017156 <_ux_device_class_hid_control_request+0x5e>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8017192:	6462      	str	r2, [r4, #68]	@ 0x44
                    if (duration == 0)
 8017194:	2a00      	cmp	r2, #0
 8017196:	d103      	bne.n	80171a0 <_ux_device_class_hid_control_request+0xa8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8017198:	2301      	movs	r3, #1
 801719a:	425b      	negs	r3, r3
 801719c:	64a3      	str	r3, [r4, #72]	@ 0x48
 801719e:	e7da      	b.n	8017156 <_ux_device_class_hid_control_request+0x5e>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 80171a0:	20fa      	movs	r0, #250	@ 0xfa
 80171a2:	21fa      	movs	r1, #250	@ 0xfa
 80171a4:	0100      	lsls	r0, r0, #4
 80171a6:	4350      	muls	r0, r2
 80171a8:	0089      	lsls	r1, r1, #2
 80171aa:	f7e8 ffdd 	bl	8000168 <__udivsi3>
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 80171ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 80171b0:	64a0      	str	r0, [r4, #72]	@ 0x48
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 80171b2:	2b05      	cmp	r3, #5
 80171b4:	d0cf      	beq.n	8017156 <_ux_device_class_hid_control_request+0x5e>
                            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80171b6:	2300      	movs	r3, #0
 80171b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80171ba:	e7cc      	b.n	8017156 <_ux_device_class_hid_control_request+0x5e>
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 80171bc:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 80171be:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80171c0:	e7de      	b.n	8017180 <_ux_device_class_hid_control_request+0x88>
            hid -> ux_device_class_hid_protocol = request_value;
 80171c2:	64e5      	str	r5, [r4, #76]	@ 0x4c
            break;
 80171c4:	e7c7      	b.n	8017156 <_ux_device_class_hid_control_request+0x5e>
    switch (request)
 80171c6:	20ff      	movs	r0, #255	@ 0xff
 80171c8:	e7c6      	b.n	8017158 <_ux_device_class_hid_control_request+0x60>
 80171ca:	46c0      	nop			@ (mov r8, r8)
 80171cc:	200030e0 	.word	0x200030e0

080171d0 <_ux_device_class_hid_deactivate>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80171d0:	6a03      	ldr	r3, [r0, #32]
{
 80171d2:	b510      	push	{r4, lr}
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80171d4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 80171d6:	2126      	movs	r1, #38	@ 0x26
 80171d8:	6860      	ldr	r0, [r4, #4]
 80171da:	f7ff fcbd 	bl	8016b58 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 80171de:	69e3      	ldr	r3, [r4, #28]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d001      	beq.n	80171e8 <_ux_device_class_hid_deactivate+0x18>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 80171e4:	0020      	movs	r0, r4
 80171e6:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 80171e8:	2000      	movs	r0, #0
 80171ea:	bd10      	pop	{r4, pc}

080171ec <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80171ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171ee:	001e      	movs	r6, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80171f0:	4b28      	ldr	r3, [pc, #160]	@ (8017294 <_ux_device_class_hid_descriptor_send+0xa8>)

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80171f2:	2403      	movs	r4, #3
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80171f4:	681d      	ldr	r5, [r3, #0]
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80171f6:	0a09      	lsrs	r1, r1, #8
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80171f8:	002b      	movs	r3, r5
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80171fa:	002f      	movs	r7, r5
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80171fc:	335c      	adds	r3, #92	@ 0x5c
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80171fe:	629c      	str	r4, [r3, #40]	@ 0x28
 8017200:	34fc      	adds	r4, #252	@ 0xfc
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8017202:	373c      	adds	r7, #60	@ 0x3c
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017204:	9301      	str	r3, [sp, #4]
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8017206:	4021      	ands	r1, r4

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8017208:	2921      	cmp	r1, #33	@ 0x21
 801720a:	d008      	beq.n	801721e <_ux_device_class_hid_descriptor_send+0x32>
 801720c:	2922      	cmp	r1, #34	@ 0x22
 801720e:	d02f      	beq.n	8017270 <_ux_device_class_hid_descriptor_send+0x84>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8017210:	003a      	movs	r2, r7
 8017212:	2114      	movs	r1, #20
 8017214:	0028      	movs	r0, r5
 8017216:	69ab      	ldr	r3, [r5, #24]
 8017218:	4798      	blx	r3
        return(UX_ERROR);
 801721a:	0020      	movs	r0, r4
 801721c:	e00e      	b.n	801723c <_ux_device_class_hid_descriptor_send+0x50>
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801721e:	002b      	movs	r3, r5
 8017220:	33cc      	adds	r3, #204	@ 0xcc
 8017222:	6819      	ldr	r1, [r3, #0]
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8017224:	3304      	adds	r3, #4
 8017226:	681b      	ldr	r3, [r3, #0]
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8017228:	b2d2      	uxtb	r2, r2
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 801722a:	18cb      	adds	r3, r1, r3
 801722c:	469c      	mov	ip, r3
        while (device_framework < device_framework_end)
 801722e:	4561      	cmp	r1, ip
 8017230:	d305      	bcc.n	801723e <_ux_device_class_hid_descriptor_send+0x52>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8017232:	003a      	movs	r2, r7
 8017234:	2114      	movs	r1, #20
 8017236:	0028      	movs	r0, r5
 8017238:	69ab      	ldr	r3, [r5, #24]
 801723a:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
 801723c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            descriptor_type =  *(device_framework + 1);
 801723e:	7848      	ldrb	r0, [r1, #1]
            descriptor_length =  (ULONG) *device_framework;
 8017240:	780b      	ldrb	r3, [r1, #0]
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8017242:	2804      	cmp	r0, #4
 8017244:	d102      	bne.n	801724c <_ux_device_class_hid_descriptor_send+0x60>
                interface_number = *(device_framework + 2);
 8017246:	788c      	ldrb	r4, [r1, #2]
            device_framework +=  descriptor_length;
 8017248:	18c9      	adds	r1, r1, r3
 801724a:	e7f0      	b.n	801722e <_ux_device_class_hid_descriptor_send+0x42>
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 801724c:	2821      	cmp	r0, #33	@ 0x21
 801724e:	d1fb      	bne.n	8017248 <_ux_device_class_hid_descriptor_send+0x5c>
 8017250:	42a2      	cmp	r2, r4
 8017252:	d1f9      	bne.n	8017248 <_ux_device_class_hid_descriptor_send+0x5c>
                if (descriptor_length < host_length)
 8017254:	0034      	movs	r4, r6
 8017256:	429e      	cmp	r6, r3
 8017258:	d900      	bls.n	801725c <_ux_device_class_hid_descriptor_send+0x70>
 801725a:	001c      	movs	r4, r3
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 801725c:	0022      	movs	r2, r4
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 801725e:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8017260:	f7ff fe9e 	bl	8016fa0 <_ux_utility_memory_copy>
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8017264:	0032      	movs	r2, r6
 8017266:	0021      	movs	r1, r4
 8017268:	9801      	ldr	r0, [sp, #4]
 801726a:	f7ff fc7b 	bl	8016b64 <_ux_device_stack_transfer_request>
        break;
 801726e:	e7e5      	b.n	801723c <_ux_device_class_hid_descriptor_send+0x50>
        if (descriptor_length < host_length)
 8017270:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017272:	42b4      	cmp	r4, r6
 8017274:	d900      	bls.n	8017278 <_ux_device_class_hid_descriptor_send+0x8c>
 8017276:	0034      	movs	r4, r6
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017278:	2380      	movs	r3, #128	@ 0x80
 801727a:	005b      	lsls	r3, r3, #1
 801727c:	429c      	cmp	r4, r3
 801727e:	d905      	bls.n	801728c <_ux_device_class_hid_descriptor_send+0xa0>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8017280:	2212      	movs	r2, #18
 8017282:	2107      	movs	r1, #7
 8017284:	2002      	movs	r0, #2
 8017286:	f7ff fcd5 	bl	8016c34 <_ux_system_error_handler>
 801728a:	e7d2      	b.n	8017232 <_ux_device_class_hid_descriptor_send+0x46>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 801728c:	0022      	movs	r2, r4
 801728e:	6a01      	ldr	r1, [r0, #32]
 8017290:	e7e5      	b.n	801725e <_ux_device_class_hid_descriptor_send+0x72>
 8017292:	46c0      	nop			@ (mov r8, r8)
 8017294:	200030e0 	.word	0x200030e0

08017298 <_ux_device_class_hid_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8017298:	0003      	movs	r3, r0
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 801729a:	6800      	ldr	r0, [r0, #0]
{
 801729c:	b510      	push	{r4, lr}
    switch (command -> ux_slave_class_command_request)
 801729e:	3801      	subs	r0, #1
 80172a0:	2806      	cmp	r0, #6
 80172a2:	d81f      	bhi.n	80172e4 <_ux_device_class_hid_entry+0x4c>
 80172a4:	f7e8 ff42 	bl	800012c <__gnu_thumb1_case_uqi>
 80172a8:	1a16120c 	.word	0x1a16120c
 80172ac:	1e04      	.short	0x1e04
 80172ae:	08          	.byte	0x08
 80172af:	00          	.byte	0x00

        /* Call the init function of the HID class.  */
#if defined(UX_DEVICE_CLASS_HID_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_hid_initialize(command);
#else
        status =  _ux_device_class_hid_initialize(command);
 80172b0:	0018      	movs	r0, r3
 80172b2:	f000 f88b 	bl	80173cc <_ux_device_class_hid_initialize>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }   
}
 80172b6:	bd10      	pop	{r4, pc}
        status =  _ux_device_class_hid_uninitialize(command);
 80172b8:	0018      	movs	r0, r3
 80172ba:	f000 fa93 	bl	80177e4 <_ux_device_class_hid_uninitialize>
        return(status);
 80172be:	e7fa      	b.n	80172b6 <_ux_device_class_hid_entry+0x1e>
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 80172c0:	695b      	ldr	r3, [r3, #20]
            return(UX_NO_CLASS_MATCH);
 80172c2:	2057      	movs	r0, #87	@ 0x57
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 80172c4:	2b03      	cmp	r3, #3
 80172c6:	d1f6      	bne.n	80172b6 <_ux_device_class_hid_entry+0x1e>
            return(UX_SUCCESS);
 80172c8:	2000      	movs	r0, #0
 80172ca:	e7f4      	b.n	80172b6 <_ux_device_class_hid_entry+0x1e>
        status =  _ux_device_class_hid_activate(command);
 80172cc:	0018      	movs	r0, r3
 80172ce:	f7ff fec9 	bl	8017064 <_ux_device_class_hid_activate>
        return(status);
 80172d2:	e7f0      	b.n	80172b6 <_ux_device_class_hid_entry+0x1e>
        status =  _ux_device_class_hid_deactivate(command);
 80172d4:	0018      	movs	r0, r3
 80172d6:	f7ff ff7b 	bl	80171d0 <_ux_device_class_hid_deactivate>
        return(status);
 80172da:	e7ec      	b.n	80172b6 <_ux_device_class_hid_entry+0x1e>
        status = _ux_device_class_hid_control_request(command);
 80172dc:	0018      	movs	r0, r3
 80172de:	f7ff ff0b 	bl	80170f8 <_ux_device_class_hid_control_request>
        return(status);
 80172e2:	e7e8      	b.n	80172b6 <_ux_device_class_hid_entry+0x1e>
    switch (command -> ux_slave_class_command_request)
 80172e4:	2054      	movs	r0, #84	@ 0x54
 80172e6:	e7e6      	b.n	80172b6 <_ux_device_class_hid_entry+0x1e>

080172e8 <_ux_device_class_hid_event_check>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80172e8:	4a07      	ldr	r2, [pc, #28]	@ (8017308 <_ux_device_class_hid_event_check+0x20>)
{
 80172ea:	0003      	movs	r3, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80172ec:	6812      	ldr	r2, [r2, #0]
        return(UX_DEVICE_HANDLE_UNKNOWN);
 80172ee:	2050      	movs	r0, #80	@ 0x50
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80172f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80172f2:	2a03      	cmp	r2, #3
 80172f4:	d106      	bne.n	8017304 <_ux_device_class_hid_event_check+0x1c>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head ==
        hid -> ux_device_class_hid_event_array_tail)
 80172f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    if (hid -> ux_device_class_hid_event_array_head ==
 80172f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54

        /* No event to report.  */
        return(UX_ERROR);
 80172fa:	30af      	adds	r0, #175	@ 0xaf
    if (hid -> ux_device_class_hid_event_array_head ==
 80172fc:	4293      	cmp	r3, r2
 80172fe:	d001      	beq.n	8017304 <_ux_device_class_hid_event_check+0x1c>

    /* There is an event to report, get the current pointer to the event.  */
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
    return(UX_SUCCESS);
 8017300:	2000      	movs	r0, #0
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8017302:	600a      	str	r2, [r1, #0]
}
 8017304:	4770      	bx	lr
 8017306:	46c0      	nop			@ (mov r8, r8)
 8017308:	200030e0 	.word	0x200030e0

0801730c <_ux_device_class_hid_event_free>:
/**************************************************************************/
VOID  _ux_device_class_hid_event_free(UX_SLAVE_CLASS_HID *hid)
{
UCHAR                           *pos;

    pos = (UCHAR *) hid -> ux_device_class_hid_event_array_tail;
 801730c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 801730e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 8017310:	3310      	adds	r3, #16
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 8017312:	429a      	cmp	r2, r3
 8017314:	d800      	bhi.n	8017318 <_ux_device_class_hid_event_free+0xc>
        pos = (UCHAR *) hid -> ux_device_class_hid_event_array;
 8017316:	6d03      	ldr	r3, [r0, #80]	@ 0x50
    hid -> ux_device_class_hid_event_array_tail = (UX_DEVICE_CLASS_HID_EVENT *) pos;
 8017318:	6583      	str	r3, [r0, #88]	@ 0x58
}
 801731a:	4770      	bx	lr

0801731c <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,
                                     UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 801731c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801731e:	000c      	movs	r4, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Check and get event pointer.  */
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 8017320:	a901      	add	r1, sp, #4
{
 8017322:	0005      	movs	r5, r0
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 8017324:	f7ff ffe0 	bl	80172e8 <_ux_device_class_hid_event_check>
 8017328:	1e06      	subs	r6, r0, #0
    if (status != UX_SUCCESS)
 801732a:	d10f      	bne.n	801734c <_ux_device_class_hid_event_get+0x30>
        return(status);

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 801732c:	9b01      	ldr	r3, [sp, #4]
 801732e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8017330:	6899      	ldr	r1, [r3, #8]
 8017332:	4291      	cmp	r1, r2
 8017334:	d900      	bls.n	8017338 <_ux_device_class_hid_event_get+0x1c>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid);
 8017336:	609a      	str	r2, [r3, #8]

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;

    /* Copy the event data into the user buffer.  */
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 8017338:	0020      	movs	r0, r4
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 801733a:	689a      	ldr	r2, [r3, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 801733c:	300c      	adds	r0, #12
 801733e:	68d9      	ldr	r1, [r3, #12]
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8017340:	60a2      	str	r2, [r4, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 8017342:	f7ff fe2d 	bl	8016fa0 <_ux_utility_memory_copy>
                            UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
                            current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Free the tail event.  */
    _ux_device_class_hid_event_free(hid);
 8017346:	0028      	movs	r0, r5
 8017348:	f7ff ffe0 	bl	801730c <_ux_device_class_hid_event_free>

    /* Return event status to the user.  */
    return(UX_SUCCESS);
}
 801734c:	0030      	movs	r0, r6
 801734e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08017350 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8017350:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8017352:	6d46      	ldr	r6, [r0, #84]	@ 0x54
{
 8017354:	0004      	movs	r4, r0
 8017356:	000d      	movs	r5, r1

    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
        return (UX_ERROR);
 8017358:	20ff      	movs	r0, #255	@ 0xff
    if (current_hid_event == UX_NULL)
 801735a:	2e00      	cmp	r6, #0
 801735c:	d018      	beq.n	8017390 <_ux_device_class_hid_event_set+0x40>
    
    /* Calculate the next position.  */
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 801735e:	0033      	movs	r3, r6
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8017360:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 8017362:	3310      	adds	r3, #16
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8017364:	429a      	cmp	r2, r3
 8017366:	d800      	bhi.n	801736a <_ux_device_class_hid_event_set+0x1a>
        next_position = (UCHAR *)hid -> ux_device_class_hid_event_array;
 8017368:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    next_hid_event = (UX_DEVICE_CLASS_HID_EVENT *)next_position;

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 801736a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
        return (UX_ERROR);
 801736c:	20ff      	movs	r0, #255	@ 0xff
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 801736e:	429a      	cmp	r2, r3
 8017370:	d00e      	beq.n	8017390 <_ux_device_class_hid_event_set+0x40>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8017372:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017374:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 8017376:	68aa      	ldr	r2, [r5, #8]
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017378:	2b01      	cmp	r3, #1
 801737a:	d120      	bne.n	80173be <_ux_device_class_hid_event_set+0x6e>
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 801737c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801737e:	3201      	adds	r2, #1
 8017380:	429a      	cmp	r2, r3
 8017382:	d906      	bls.n	8017392 <_ux_device_class_hid_event_set+0x42>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8017384:	38fd      	subs	r0, #253	@ 0xfd
 8017386:	2212      	movs	r2, #18
 8017388:	2107      	movs	r1, #7
 801738a:	f7ff fc53 	bl	8016c34 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 801738e:	2012      	movs	r0, #18
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
}
 8017390:	bd70      	pop	{r4, r5, r6, pc}
                                hid_event -> ux_device_class_hid_event_buffer,
 8017392:	0029      	movs	r1, r5
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 8017394:	68f3      	ldr	r3, [r6, #12]
 8017396:	682a      	ldr	r2, [r5, #0]
                                hid_event -> ux_device_class_hid_event_buffer,
 8017398:	310c      	adds	r1, #12
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 801739a:	701a      	strb	r2, [r3, #0]
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) + 1,
 801739c:	68f0      	ldr	r0, [r6, #12]
 801739e:	68aa      	ldr	r2, [r5, #8]
 80173a0:	3001      	adds	r0, #1
 80173a2:	f7ff fdfd 	bl	8016fa0 <_ux_utility_memory_copy>
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 80173a6:	68ab      	ldr	r3, [r5, #8]
 80173a8:	3301      	adds	r3, #1
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 80173aa:	2204      	movs	r2, #4
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 80173ac:	60b3      	str	r3, [r6, #8]
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 80173ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80173b0:	4393      	bics	r3, r2
 80173b2:	2b01      	cmp	r3, #1
 80173b4:	d001      	beq.n	80173ba <_ux_device_class_hid_event_set+0x6a>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80173b6:	2300      	movs	r3, #0
 80173b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return(UX_SUCCESS);
 80173ba:	2000      	movs	r0, #0
 80173bc:	e7e8      	b.n	8017390 <_ux_device_class_hid_event_set+0x40>
                                hid_event -> ux_device_class_hid_event_buffer,
 80173be:	0029      	movs	r1, r5
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 80173c0:	68f0      	ldr	r0, [r6, #12]
                                hid_event -> ux_device_class_hid_event_buffer,
 80173c2:	310c      	adds	r1, #12
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 80173c4:	f7ff fdec 	bl	8016fa0 <_ux_utility_memory_copy>
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 80173c8:	68ab      	ldr	r3, [r5, #8]
 80173ca:	e7ee      	b.n	80173aa <_ux_device_class_hid_event_set+0x5a>

080173cc <_ux_device_class_hid_initialize>:
/*                                            checked compile options,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80173cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 80173ce:	2100      	movs	r1, #0
    hid_parameter =  command -> ux_slave_class_command_parameter;
 80173d0:	6a45      	ldr	r5, [r0, #36]	@ 0x24
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80173d2:	6a07      	ldr	r7, [r0, #32]
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 80173d4:	2284      	movs	r2, #132	@ 0x84
 80173d6:	0008      	movs	r0, r1
 80173d8:	f7ff fcec 	bl	8016db4 <_ux_utility_memory_allocate>
 80173dc:	1e04      	subs	r4, r0, #0

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 80173de:	d00b      	beq.n	80173f8 <_ux_device_class_hid_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 80173e0:	64b8      	str	r0, [r7, #72]	@ 0x48

#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)

    /* Allocate buffer(s) for endpoint(s).  */
    UX_ASSERT(!UX_DEVICE_CLASS_HID_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW);
    hid -> ux_device_class_hid_endpoint_buffer = _ux_utility_memory_allocate(
 80173e2:	2248      	movs	r2, #72	@ 0x48
 80173e4:	2101      	movs	r1, #1
 80173e6:	2000      	movs	r0, #0
 80173e8:	f7ff fce4 	bl	8016db4 <_ux_utility_memory_allocate>
 80173ec:	60a0      	str	r0, [r4, #8]
                            UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
                            UX_DEVICE_CLASS_HID_ENDPOINT_BUFFER_SIZE);
    if (hid -> ux_device_class_hid_endpoint_buffer == UX_NULL)
 80173ee:	2800      	cmp	r0, #0
 80173f0:	d105      	bne.n	80173fe <_ux_device_class_hid_initialize+0x32>
    {
        _ux_utility_memory_free(hid);
 80173f2:	0020      	movs	r0, r4
 80173f4:	f7ff fdde 	bl	8016fb4 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 80173f8:	2512      	movs	r5, #18
    /* Free HID instance. */
    _ux_utility_memory_free(hid);

    /* Return completion status.  */
    return(status);
}
 80173fa:	0028      	movs	r0, r5
 80173fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 80173fe:	4b35      	ldr	r3, [pc, #212]	@ (80174d4 <_ux_device_class_hid_initialize+0x108>)
                                    UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 8017400:	3008      	adds	r0, #8
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_buffer =
 8017402:	6420      	str	r0, [r4, #64]	@ 0x40
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 8017404:	653b      	str	r3, [r7, #80]	@ 0x50
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 8017406:	68ab      	ldr	r3, [r5, #8]
 8017408:	6223      	str	r3, [r4, #32]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 801740a:	692b      	ldr	r3, [r5, #16]
 801740c:	62a3      	str	r3, [r4, #40]	@ 0x28
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 801740e:	68eb      	ldr	r3, [r5, #12]
 8017410:	6263      	str	r3, [r4, #36]	@ 0x24
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8017412:	696b      	ldr	r3, [r5, #20]
 8017414:	6123      	str	r3, [r4, #16]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 8017416:	69ab      	ldr	r3, [r5, #24]
 8017418:	6163      	str	r3, [r4, #20]
        if (UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter) == 0 ||
 801741a:	6a2b      	ldr	r3, [r5, #32]
 801741c:	3b01      	subs	r3, #1
 801741e:	2b3f      	cmp	r3, #63	@ 0x3f
 8017420:	d901      	bls.n	8017426 <_ux_device_class_hid_initialize+0x5a>
            UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter) = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8017422:	2340      	movs	r3, #64	@ 0x40
 8017424:	622b      	str	r3, [r5, #32]
        if (UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter) < 2 ||
 8017426:	69eb      	ldr	r3, [r5, #28]
 8017428:	3b02      	subs	r3, #2
 801742a:	2b06      	cmp	r3, #6
 801742c:	d901      	bls.n	8017432 <_ux_device_class_hid_initialize+0x66>
            UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter) = UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 801742e:	2308      	movs	r3, #8
 8017430:	61eb      	str	r3, [r5, #28]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017432:	2100      	movs	r1, #0
        UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid) = UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8017434:	6a2b      	ldr	r3, [r5, #32]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017436:	0008      	movs	r0, r1
        UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid) = UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8017438:	6623      	str	r3, [r4, #96]	@ 0x60
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 801743a:	69eb      	ldr	r3, [r5, #28]
 801743c:	011b      	lsls	r3, r3, #4
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 801743e:	001a      	movs	r2, r3
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 8017440:	9301      	str	r3, [sp, #4]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017442:	f7ff fcb7 	bl	8016db4 <_ux_utility_memory_allocate>
            buffer = _ux_utility_memory_allocate_mulv_safe(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8017446:	2101      	movs	r1, #1
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017448:	6520      	str	r0, [r4, #80]	@ 0x50
            buffer = _ux_utility_memory_allocate_mulv_safe(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 801744a:	69eb      	ldr	r3, [r5, #28]
 801744c:	2000      	movs	r0, #0
 801744e:	6a2a      	ldr	r2, [r5, #32]
 8017450:	f7ff fd35 	bl	8016ebe <_ux_utility_memory_allocate_mulv_safe>
 8017454:	1e06      	subs	r6, r0, #0
            if (buffer == UX_NULL)
 8017456:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8017458:	d00a      	beq.n	8017470 <_ux_device_class_hid_initialize+0xa4>
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 801745a:	2300      	movs	r3, #0
 801745c:	69e9      	ldr	r1, [r5, #28]
 801745e:	4299      	cmp	r1, r3
 8017460:	d00b      	beq.n	801747a <_ux_device_class_hid_initialize+0xae>
                    hid -> ux_device_class_hid_event_array[i].ux_device_class_hid_event_buffer = buffer;
 8017462:	011a      	lsls	r2, r3, #4
 8017464:	1882      	adds	r2, r0, r2
 8017466:	60d6      	str	r6, [r2, #12]
                    buffer += UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8017468:	6a2a      	ldr	r2, [r5, #32]
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 801746a:	3301      	adds	r3, #1
                    buffer += UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 801746c:	18b6      	adds	r6, r6, r2
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 801746e:	e7f6      	b.n	801745e <_ux_device_class_hid_initialize+0x92>
                if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8017470:	2800      	cmp	r0, #0
 8017472:	d002      	beq.n	801747a <_ux_device_class_hid_initialize+0xae>
                    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8017474:	f7ff fd9e 	bl	8016fb4 <_ux_utility_memory_free>
                    hid -> ux_device_class_hid_event_array = UX_NULL;
 8017478:	6526      	str	r6, [r4, #80]	@ 0x50
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 801747a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801747c:	2b00      	cmp	r3, #0
 801747e:	d027      	beq.n	80174d0 <_ux_device_class_hid_initialize+0x104>
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 8017480:	9a01      	ldr	r2, [sp, #4]
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8017482:	6563      	str	r3, [r4, #84]	@ 0x54
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8017484:	65a3      	str	r3, [r4, #88]	@ 0x58
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 8017486:	189b      	adds	r3, r3, r2
 8017488:	65e3      	str	r3, [r4, #92]	@ 0x5c
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 801748a:	682b      	ldr	r3, [r5, #0]
 801748c:	61a3      	str	r3, [r4, #24]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 801748e:	686b      	ldr	r3, [r5, #4]
 8017490:	61e3      	str	r3, [r4, #28]
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8017492:	2301      	movs	r3, #1
 8017494:	425b      	negs	r3, r3
 8017496:	64a3      	str	r3, [r4, #72]	@ 0x48
                    if (hid_parameter -> ux_device_class_hid_parameter_receiver_initialize)
 8017498:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801749a:	2b00      	cmp	r3, #0
 801749c:	d101      	bne.n	80174a2 <_ux_device_class_hid_initialize+0xd6>
                        return(status);
 801749e:	2500      	movs	r5, #0
 80174a0:	e7ab      	b.n	80173fa <_ux_device_class_hid_initialize+0x2e>
                                                &hid -> ux_device_class_hid_receiver);
 80174a2:	0022      	movs	r2, r4
                        status = hid_parameter ->
 80174a4:	0029      	movs	r1, r5
 80174a6:	0020      	movs	r0, r4
                                                &hid -> ux_device_class_hid_receiver);
 80174a8:	3268      	adds	r2, #104	@ 0x68
                        status = hid_parameter ->
 80174aa:	4798      	blx	r3
 80174ac:	1e05      	subs	r5, r0, #0
                    if (status == UX_SUCCESS)
 80174ae:	d0f6      	beq.n	801749e <_ux_device_class_hid_initialize+0xd2>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
 80174b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80174b2:	68d8      	ldr	r0, [r3, #12]
 80174b4:	f7ff fd7e 	bl	8016fb4 <_ux_utility_memory_free>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 80174b8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80174ba:	f7ff fd7b 	bl	8016fb4 <_ux_utility_memory_free>
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
 80174be:	68a0      	ldr	r0, [r4, #8]
 80174c0:	f7ff fd78 	bl	8016fb4 <_ux_utility_memory_free>
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 80174c4:	2300      	movs	r3, #0
    _ux_utility_memory_free(hid);
 80174c6:	0020      	movs	r0, r4
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 80174c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    _ux_utility_memory_free(hid);
 80174ca:	f7ff fd73 	bl	8016fb4 <_ux_utility_memory_free>
    return(status);
 80174ce:	e794      	b.n	80173fa <_ux_device_class_hid_initialize+0x2e>
            status =  UX_MEMORY_INSUFFICIENT;
 80174d0:	2512      	movs	r5, #18
 80174d2:	e7f4      	b.n	80174be <_ux_device_class_hid_initialize+0xf2>
 80174d4:	0801773d 	.word	0x0801773d

080174d8 <_ux_device_class_hid_receiver_event_free>:
UX_DEVICE_CLASS_HID_RECEIVER            *receiver;
UX_DEVICE_CLASS_HID_RECEIVED_EVENT      *pos;
UCHAR                                   *next_pos;

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;
 80174d8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_RECEIVER_EVENT_FREE, hid, pos, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* If event is not valid, return error.  */
    if (pos -> ux_device_class_hid_received_event_length == 0)
        return(UX_ERROR);
 80174da:	20ff      	movs	r0, #255	@ 0xff
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 80174dc:	695a      	ldr	r2, [r3, #20]
    if (pos -> ux_device_class_hid_received_event_length == 0)
 80174de:	6811      	ldr	r1, [r2, #0]
 80174e0:	2900      	cmp	r1, #0
 80174e2:	d008      	beq.n	80174f6 <_ux_device_class_hid_receiver_event_free+0x1e>

    /* Invalidate the event and advance position.  */

    /* Calculate next item address.  */
    next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 80174e4:	0011      	movs	r1, r2

    if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 80174e6:	6918      	ldr	r0, [r3, #16]
    next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 80174e8:	3108      	adds	r1, #8
    if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 80174ea:	4288      	cmp	r0, r1
 80174ec:	d800      	bhi.n	80174f0 <_ux_device_class_hid_receiver_event_free+0x18>
        next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 80174ee:	68d9      	ldr	r1, [r3, #12]
    receiver -> ux_device_class_hid_receiver_event_read_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;

    pos -> ux_device_class_hid_received_event_length = 0;
 80174f0:	2000      	movs	r0, #0
    receiver -> ux_device_class_hid_receiver_event_read_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 80174f2:	6159      	str	r1, [r3, #20]
    pos -> ux_device_class_hid_received_event_length = 0;
 80174f4:	6010      	str	r0, [r2, #0]
                                UX_DEVICE_CLASS_HID_RECEIVER_RESTART, UX_OR);

    /* Return event status to the user.  */
    return(UX_SUCCESS);
#endif
}
 80174f6:	4770      	bx	lr

080174f8 <_ux_device_class_hid_receiver_event_get>:

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;

    /* Get current reading position.  */
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 80174f8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);

        return(UX_SUCCESS);
    }

    return(UX_ERROR);
 80174fa:	20ff      	movs	r0, #255	@ 0xff
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 80174fc:	695b      	ldr	r3, [r3, #20]
    if (pos -> ux_device_class_hid_received_event_length != 0)
 80174fe:	681a      	ldr	r2, [r3, #0]
 8017500:	2a00      	cmp	r2, #0
 8017502:	d003      	beq.n	801750c <_ux_device_class_hid_receiver_event_get+0x14>
        return(UX_SUCCESS);
 8017504:	2000      	movs	r0, #0
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);
 8017506:	685b      	ldr	r3, [r3, #4]
        event -> ux_device_class_hid_received_event_length = pos -> ux_device_class_hid_received_event_length;
 8017508:	600a      	str	r2, [r1, #0]
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);
 801750a:	604b      	str	r3, [r1, #4]
#endif
}
 801750c:	4770      	bx	lr
	...

08017510 <_ux_device_class_hid_receiver_initialize>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_receiver_initialize(UX_SLAVE_CLASS_HID *hid,
                                    UX_SLAVE_CLASS_HID_PARAMETER *parameter,
                                    UX_DEVICE_CLASS_HID_RECEIVER **receiver)
{
 8017510:	b5f0      	push	{r4, r5, r6, r7, lr}

#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Events structs are in regular memory.  */
    UX_ASSERT(!UX_OVERFLOW_CHECK_MULV_ULONG(sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT), parameter -> ux_device_class_hid_parameter_receiver_event_max_number));
    events_size = sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT) * parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 8017512:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
{
 8017514:	000d      	movs	r5, r1
#endif
    UX_ASSERT(!UX_OVERFLOW_CHECK_ADD_ULONG(memory_size, events_size));
    memory_size += events_size;

    /* Allocate memory.  */
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 8017516:	2100      	movs	r1, #0
    events_size = sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT) * parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 8017518:	00db      	lsls	r3, r3, #3
{
 801751a:	b087      	sub	sp, #28
    memory_size += events_size;
 801751c:	3320      	adds	r3, #32
{
 801751e:	9003      	str	r0, [sp, #12]
 8017520:	9204      	str	r2, [sp, #16]
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 8017522:	0008      	movs	r0, r1
 8017524:	001a      	movs	r2, r3
    memory_size += events_size;
 8017526:	9301      	str	r3, [sp, #4]
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 8017528:	f7ff fc44 	bl	8016db4 <_ux_utility_memory_allocate>
 801752c:	1e04      	subs	r4, r0, #0
    if (memory_receiver == UX_NULL)
 801752e:	d02b      	beq.n	8017588 <_ux_device_class_hid_receiver_initialize+0x78>
        return(UX_MEMORY_INSUFFICIENT);
#if !defined(UX_DEVICE_STANDALONE)
    memory_stack = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
    memory_events = memory_stack + UX_DEVICE_CLASS_HID_RECEIVER_THREAD_STACK_SIZE;
#else
    memory_events = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 8017530:	0006      	movs	r6, r0
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Allocate cache safe memory.  */

    /* Total buffer size calculate.  */
    events_size  = parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 8017532:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    UX_ASSERT(!UX_OVERFLOW_CHECK_MULV_ULONG(events_size, parameter -> ux_device_class_hid_parameter_receiver_event_max_number));
    events_size *= parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 8017534:	6aaa      	ldr	r2, [r5, #40]	@ 0x28

    /* Allocate buffer.  */
    buffer = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, events_size);
 8017536:	2101      	movs	r1, #1
 8017538:	2000      	movs	r0, #0
    events_size *= parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 801753a:	435a      	muls	r2, r3
    memory_events = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 801753c:	3620      	adds	r6, #32
    buffer = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, events_size);
 801753e:	f7ff fc39 	bl	8016db4 <_ux_utility_memory_allocate>
    if (buffer == UX_NULL)
 8017542:	2800      	cmp	r0, #0
 8017544:	d01d      	beq.n	8017582 <_ux_device_class_hid_receiver_initialize+0x72>
        return(UX_MEMORY_INSUFFICIENT);
    }

    /* Assign events buffers.  */
    events_head = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *) memory_events;
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8017546:	6aab      	ldr	r3, [r5, #40]	@ 0x28
    {

        /* Assign event buffer.  */
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8017548:	0021      	movs	r1, r4
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 801754a:	9302      	str	r3, [sp, #8]
 801754c:	2300      	movs	r3, #0
        events_head -> ux_device_class_hid_received_event_data = buffer;
 801754e:	3124      	adds	r1, #36	@ 0x24

        /* Move to next event and next buffer.  */
        buffer += parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 8017550:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8017552:	9105      	str	r1, [sp, #20]
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8017554:	9902      	ldr	r1, [sp, #8]
 8017556:	4299      	cmp	r1, r3
 8017558:	d119      	bne.n	801758e <_ux_device_class_hid_receiver_initialize+0x7e>
        events_head ++;
    }
#endif

    /* Store receiver instance pointer.  */
    (*receiver) = (UX_DEVICE_CLASS_HID_RECEIVER *)memory_receiver;
 801755a:	9b04      	ldr	r3, [sp, #16]
    {

#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&((*receiver) -> ux_device_class_hid_receiver_thread), hid)
#else
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 801755c:	9903      	ldr	r1, [sp, #12]
    (*receiver) = (UX_DEVICE_CLASS_HID_RECEIVER *)memory_receiver;
 801755e:	601c      	str	r4, [r3, #0]
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8017560:	2323      	movs	r3, #35	@ 0x23
 8017562:	67cb      	str	r3, [r1, #124]	@ 0x7c
        (*receiver) -> ux_device_class_hid_receiver_tasks_run = _ux_device_class_hid_receiver_tasks_run;
 8017564:	4b0e      	ldr	r3, [pc, #56]	@ (80175a0 <_ux_device_class_hid_receiver_initialize+0x90>)
        /* Initialize callback function.  */
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
                    parameter -> ux_device_class_hid_parameter_receiver_event_callback;

        /* Done success.  */
        return(UX_SUCCESS);
 8017566:	2000      	movs	r0, #0
        (*receiver) -> ux_device_class_hid_receiver_tasks_run = _ux_device_class_hid_receiver_tasks_run;
 8017568:	61e3      	str	r3, [r4, #28]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_receiver + memory_size);
 801756a:	9b01      	ldr	r3, [sp, #4]
        (*receiver) -> ux_device_class_hid_receiver_event_buffer_size =
 801756c:	60a2      	str	r2, [r4, #8]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_receiver + memory_size);
 801756e:	18e3      	adds	r3, r4, r3
        (*receiver) -> ux_device_class_hid_receiver_events_end =
 8017570:	6123      	str	r3, [r4, #16]
        (*receiver) -> ux_device_class_hid_receiver_uninitialize = _ux_device_class_hid_receiver_uninitialize;
 8017572:	4b0c      	ldr	r3, [pc, #48]	@ (80175a4 <_ux_device_class_hid_receiver_initialize+0x94>)
        (*receiver) -> ux_device_class_hid_receiver_events =
 8017574:	60e6      	str	r6, [r4, #12]
        (*receiver) -> ux_device_class_hid_receiver_uninitialize = _ux_device_class_hid_receiver_uninitialize;
 8017576:	6023      	str	r3, [r4, #0]
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 8017578:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
        (*receiver) -> ux_device_class_hid_receiver_event_read_pos =
 801757a:	6166      	str	r6, [r4, #20]
        (*receiver) -> ux_device_class_hid_receiver_event_save_pos =
 801757c:	61a6      	str	r6, [r4, #24]
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 801757e:	6063      	str	r3, [r4, #4]
        return(UX_SUCCESS);
 8017580:	e003      	b.n	801758a <_ux_device_class_hid_receiver_initialize+0x7a>
        _ux_utility_memory_free(memory_receiver);
 8017582:	0020      	movs	r0, r4
 8017584:	f7ff fd16 	bl	8016fb4 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 8017588:	2012      	movs	r0, #18
    (*receiver) =  UX_NULL;

    /* Return completion status.  */
    return(status);
#endif
}
 801758a:	b007      	add	sp, #28
 801758c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        events_head -> ux_device_class_hid_received_event_data = buffer;
 801758e:	00d9      	lsls	r1, r3, #3
 8017590:	468c      	mov	ip, r1
 8017592:	4667      	mov	r7, ip
 8017594:	9905      	ldr	r1, [sp, #20]
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8017596:	3301      	adds	r3, #1
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8017598:	51c8      	str	r0, [r1, r7]
        buffer += parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 801759a:	1880      	adds	r0, r0, r2
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 801759c:	e7da      	b.n	8017554 <_ux_device_class_hid_receiver_initialize+0x44>
 801759e:	46c0      	nop			@ (mov r8, r8)
 80175a0:	080175a9 	.word	0x080175a9
 80175a4:	08017645 	.word	0x08017645

080175a8 <_ux_device_class_hid_receiver_tasks_run>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80175a8:	4b25      	ldr	r3, [pc, #148]	@ (8017640 <_ux_device_class_hid_receiver_tasks_run+0x98>)
{
 80175aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80175ac:	681b      	ldr	r3, [r3, #0]
{
 80175ae:	0004      	movs	r4, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80175b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        return(UX_STATE_EXIT);
 80175b2:	2501      	movs	r5, #1
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80175b4:	9301      	str	r3, [sp, #4]
 80175b6:	2b03      	cmp	r3, #3
 80175b8:	d11a      	bne.n	80175f0 <_ux_device_class_hid_receiver_tasks_run+0x48>

    /* Get receiver instance.  */
    receiver = hid -> ux_device_class_hid_receiver;
 80175ba:	6e86      	ldr	r6, [r0, #104]	@ 0x68
    if (receiver == UX_NULL)
 80175bc:	2e00      	cmp	r6, #0
 80175be:	d017      	beq.n	80175f0 <_ux_device_class_hid_receiver_tasks_run+0x48>
        return(UX_STATE_EXIT);

    /* Get endpoint.  */
    endpoint = hid -> ux_device_class_hid_read_endpoint;
 80175c0:	6e47      	ldr	r7, [r0, #100]	@ 0x64
    if (endpoint == UX_NULL)
 80175c2:	2f00      	cmp	r7, #0
 80175c4:	d014      	beq.n	80175f0 <_ux_device_class_hid_receiver_tasks_run+0x48>

    /* Event buffer available, issue request to get data.  */
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;

    /* Run read/receiver states.  */
    switch(hid -> ux_device_class_hid_read_state)
 80175c6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80175c8:	2b23      	cmp	r3, #35	@ 0x23
 80175ca:	d013      	beq.n	80175f4 <_ux_device_class_hid_receiver_tasks_run+0x4c>
        pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
        if (pos -> ux_device_class_hid_received_event_length != 0)
        {

            /* Buffer is full, keep waiting.  */
            return(UX_STATE_IDLE);
 80175cc:	196d      	adds	r5, r5, r5
    switch(hid -> ux_device_class_hid_read_state)
 80175ce:	2b24      	cmp	r3, #36	@ 0x24
 80175d0:	d10e      	bne.n	80175f0 <_ux_device_class_hid_receiver_tasks_run+0x48>

        /* Fall through.  */
    case UX_DEVICE_CLASS_HID_RECEIVER_WAIT:

        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_run(transfer,
 80175d2:	0038      	movs	r0, r7
 80175d4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80175d6:	3020      	adds	r0, #32
 80175d8:	000a      	movs	r2, r1
 80175da:	f7ff fad3 	bl	8016b84 <_ux_device_stack_transfer_run>
 80175de:	0005      	movs	r5, r0
                            hid -> ux_device_class_hid_read_requested_length,
                            hid -> ux_device_class_hid_read_requested_length);

        /* Error case.  */
        if (status < UX_STATE_NEXT)
 80175e0:	2803      	cmp	r0, #3
 80175e2:	d813      	bhi.n	801760c <_ux_device_class_hid_receiver_tasks_run+0x64>
        {

            hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_ERROR;
 80175e4:	2325      	movs	r3, #37	@ 0x25
 80175e6:	67e3      	str	r3, [r4, #124]	@ 0x7c
            hid -> ux_device_class_hid_read_status =
 80175e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175ea:	3404      	adds	r4, #4
                transfer -> ux_slave_transfer_request_completion_code;
            return(UX_STATE_ERROR);
 80175ec:	9d01      	ldr	r5, [sp, #4]
            hid -> ux_device_class_hid_read_status =
 80175ee:	67e3      	str	r3, [r4, #124]	@ 0x7c
        break;
    }

    /* Task is idle.  */
    return(UX_STATE_IDLE);
}
 80175f0:	0028      	movs	r0, r5
 80175f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 80175f4:	69b3      	ldr	r3, [r6, #24]
            return(UX_STATE_IDLE);
 80175f6:	2502      	movs	r5, #2
        if (pos -> ux_device_class_hid_received_event_length != 0)
 80175f8:	681a      	ldr	r2, [r3, #0]
 80175fa:	2a00      	cmp	r2, #0
 80175fc:	d1f8      	bne.n	80175f0 <_ux_device_class_hid_receiver_tasks_run+0x48>
        transfer -> ux_slave_transfer_request_data_pointer = buffer;
 80175fe:	685b      	ldr	r3, [r3, #4]
 8017600:	62fb      	str	r3, [r7, #44]	@ 0x2c
        hid -> ux_device_class_hid_read_requested_length =
 8017602:	68b3      	ldr	r3, [r6, #8]
 8017604:	6703      	str	r3, [r0, #112]	@ 0x70
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_WAIT;
 8017606:	2324      	movs	r3, #36	@ 0x24
 8017608:	67c3      	str	r3, [r0, #124]	@ 0x7c
 801760a:	e7e2      	b.n	80175d2 <_ux_device_class_hid_receiver_tasks_run+0x2a>
        if (status == UX_STATE_NEXT)
 801760c:	2804      	cmp	r0, #4
 801760e:	d114      	bne.n	801763a <_ux_device_class_hid_receiver_tasks_run+0x92>
            if (transfer -> ux_slave_transfer_request_actual_length == 0)
 8017610:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017612:	2900      	cmp	r1, #0
 8017614:	d102      	bne.n	801761c <_ux_device_class_hid_receiver_tasks_run+0x74>
                hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8017616:	2323      	movs	r3, #35	@ 0x23
 8017618:	67e3      	str	r3, [r4, #124]	@ 0x7c
                return(UX_STATE_NEXT);
 801761a:	e7e9      	b.n	80175f0 <_ux_device_class_hid_receiver_tasks_run+0x48>
            pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 801761c:	69b2      	ldr	r2, [r6, #24]
            if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 801761e:	6930      	ldr	r0, [r6, #16]
            next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8017620:	0013      	movs	r3, r2
 8017622:	3308      	adds	r3, #8
            if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 8017624:	4298      	cmp	r0, r3
 8017626:	d800      	bhi.n	801762a <_ux_device_class_hid_receiver_tasks_run+0x82>
                next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 8017628:	68f3      	ldr	r3, [r6, #12]
            receiver -> ux_device_class_hid_receiver_event_save_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 801762a:	61b3      	str	r3, [r6, #24]
            if (receiver -> ux_device_class_hid_receiver_event_callback)
 801762c:	6873      	ldr	r3, [r6, #4]
            pos -> ux_device_class_hid_received_event_length = temp;
 801762e:	6011      	str	r1, [r2, #0]
            if (receiver -> ux_device_class_hid_receiver_event_callback)
 8017630:	2b00      	cmp	r3, #0
 8017632:	d0f0      	beq.n	8017616 <_ux_device_class_hid_receiver_tasks_run+0x6e>
                receiver -> ux_device_class_hid_receiver_event_callback(hid);
 8017634:	0020      	movs	r0, r4
 8017636:	4798      	blx	r3
 8017638:	e7ed      	b.n	8017616 <_ux_device_class_hid_receiver_tasks_run+0x6e>
        return(UX_STATE_WAIT);
 801763a:	2505      	movs	r5, #5
 801763c:	e7d8      	b.n	80175f0 <_ux_device_class_hid_receiver_tasks_run+0x48>
 801763e:	46c0      	nop			@ (mov r8, r8)
 8017640:	200030e0 	.word	0x200030e0

08017644 <_ux_device_class_hid_receiver_uninitialize>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID _ux_device_class_hid_receiver_uninitialize(UX_DEVICE_CLASS_HID_RECEIVER *receiver)
{
 8017644:	b510      	push	{r4, lr}
 8017646:	0004      	movs	r4, r0
#endif

#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Free cache safe event memory.  */
    _ux_utility_memory_free(receiver -> ux_device_class_hid_receiver_events -> ux_device_class_hid_received_event_data);
 8017648:	68c3      	ldr	r3, [r0, #12]
 801764a:	6858      	ldr	r0, [r3, #4]
 801764c:	f7ff fcb2 	bl	8016fb4 <_ux_utility_memory_free>
#endif

    /* Free receiver and events memory.  */
    _ux_utility_memory_free(receiver);
 8017650:	0020      	movs	r0, r4
 8017652:	f7ff fcaf 	bl	8016fb4 <_ux_utility_memory_free>
}
 8017656:	bd10      	pop	{r4, pc}

08017658 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8017658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801765a:	001d      	movs	r5, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801765c:	4b24      	ldr	r3, [pc, #144]	@ (80176f0 <_ux_device_class_hid_report_get+0x98>)
    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801765e:	2603      	movs	r6, #3
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017660:	681b      	ldr	r3, [r3, #0]
{
 8017662:	b095      	sub	sp, #84	@ 0x54
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8017664:	001a      	movs	r2, r3
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017666:	001c      	movs	r4, r3
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8017668:	329a      	adds	r2, #154	@ 0x9a
 801766a:	7811      	ldrb	r1, [r2, #0]
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801766c:	3408      	adds	r4, #8
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 801766e:	3201      	adds	r2, #1
 8017670:	7812      	ldrb	r2, [r2, #0]
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017672:	001f      	movs	r7, r3
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017674:	67e6      	str	r6, [r4, #124]	@ 0x7c

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8017676:	6e9e      	ldr	r6, [r3, #104]	@ 0x68

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
    hid_event.ux_device_class_hid_event_report_type = report_type;
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8017678:	2340      	movs	r3, #64	@ 0x40
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801767a:	375c      	adds	r7, #92	@ 0x5c
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 801767c:	9101      	str	r1, [sp, #4]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 801767e:	9202      	str	r2, [sp, #8]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8017680:	9303      	str	r3, [sp, #12]

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8017682:	2a01      	cmp	r2, #1
 8017684:	d121      	bne.n	80176ca <_ux_device_class_hid_report_get+0x72>
 8017686:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017688:	2b01      	cmp	r3, #1
 801768a:	d01e      	beq.n	80176ca <_ux_device_class_hid_report_get+0x72>
        hid -> ux_device_class_hid_report_id != UX_TRUE)

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 801768c:	a901      	add	r1, sp, #4
 801768e:	f7ff fe45 	bl	801731c <_ux_device_class_hid_event_get>
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
    }

    if (status == UX_SUCCESS)
 8017692:	2800      	cmp	r0, #0
 8017694:	d11f      	bne.n	80176d6 <_ux_device_class_hid_report_get+0x7e>
        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
            hid_event_length =  host_length;
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017696:	2380      	movs	r3, #128	@ 0x80
 8017698:	9c03      	ldr	r4, [sp, #12]
 801769a:	005b      	lsls	r3, r3, #1
 801769c:	429c      	cmp	r4, r3
 801769e:	d900      	bls.n	80176a2 <_ux_device_class_hid_report_get+0x4a>
 80176a0:	001c      	movs	r4, r3
 80176a2:	42ac      	cmp	r4, r5
 80176a4:	d900      	bls.n	80176a8 <_ux_device_class_hid_report_get+0x50>
 80176a6:	002c      	movs	r4, r5
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 80176a8:	0022      	movs	r2, r4
 80176aa:	2100      	movs	r1, #0
 80176ac:	0030      	movs	r0, r6
 80176ae:	f7ff fca9 	bl	8017004 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 80176b2:	0022      	movs	r2, r4
 80176b4:	0030      	movs	r0, r6
 80176b6:	a904      	add	r1, sp, #16
 80176b8:	f7ff fc72 	bl	8016fa0 <_ux_utility_memory_copy>
        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 80176bc:	002a      	movs	r2, r5
 80176be:	0021      	movs	r1, r4
 80176c0:	0038      	movs	r0, r7
 80176c2:	f7ff fa4f 	bl	8016b64 <_ux_device_stack_transfer_request>

    /* Return the status to the caller.  */
    return(status);
}
 80176c6:	b015      	add	sp, #84	@ 0x54
 80176c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 80176ca:	6943      	ldr	r3, [r0, #20]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d002      	beq.n	80176d6 <_ux_device_class_hid_report_get+0x7e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 80176d0:	a901      	add	r1, sp, #4
 80176d2:	4798      	blx	r3
 80176d4:	e7dd      	b.n	8017692 <_ux_device_class_hid_report_get+0x3a>
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80176d6:	2380      	movs	r3, #128	@ 0x80
 80176d8:	002c      	movs	r4, r5
 80176da:	005b      	lsls	r3, r3, #1
 80176dc:	429d      	cmp	r5, r3
 80176de:	d900      	bls.n	80176e2 <_ux_device_class_hid_report_get+0x8a>
 80176e0:	001c      	movs	r4, r3
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 80176e2:	0022      	movs	r2, r4
 80176e4:	2100      	movs	r1, #0
 80176e6:	0030      	movs	r0, r6
 80176e8:	f7ff fc8c 	bl	8017004 <_ux_utility_memory_set>
 80176ec:	e7e6      	b.n	80176bc <_ux_device_class_hid_report_get+0x64>
 80176ee:	46c0      	nop			@ (mov r8, r8)
 80176f0:	200030e0 	.word	0x200030e0

080176f4 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80176f4:	b510      	push	{r4, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80176f6:	4b10      	ldr	r3, [pc, #64]	@ (8017738 <_ux_device_class_hid_report_set+0x44>)
{
 80176f8:	0004      	movs	r4, r0
    device =  &_ux_system_slave -> ux_system_slave_device;
 80176fa:	681b      	ldr	r3, [r3, #0]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 80176fc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80176fe:	b094      	sub	sp, #80	@ 0x50
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 8017700:	9102      	str	r1, [sp, #8]
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017702:	2200      	movs	r2, #0
 8017704:	6e99      	ldr	r1, [r3, #104]	@ 0x68
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 8017706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017708:	2801      	cmp	r0, #1
 801770a:	d102      	bne.n	8017712 <_ux_device_class_hid_report_set+0x1e>
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 801770c:	780a      	ldrb	r2, [r1, #0]
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 801770e:	3b01      	subs	r3, #1
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 8017710:	3101      	adds	r1, #1
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 8017712:	9201      	str	r2, [sp, #4]
        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8017714:	2b40      	cmp	r3, #64	@ 0x40
 8017716:	d80d      	bhi.n	8017734 <_ux_device_class_hid_report_set+0x40>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 8017718:	9303      	str	r3, [sp, #12]
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 801771a:	9a03      	ldr	r2, [sp, #12]
 801771c:	a804      	add	r0, sp, #16
 801771e:	f7ff fc3f 	bl	8016fa0 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 8017722:	6923      	ldr	r3, [r4, #16]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d002      	beq.n	801772e <_ux_device_class_hid_report_set+0x3a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 8017728:	0020      	movs	r0, r4
 801772a:	a901      	add	r1, sp, #4
 801772c:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
}
 801772e:	2000      	movs	r0, #0
 8017730:	b014      	add	sp, #80	@ 0x50
 8017732:	bd10      	pop	{r4, pc}
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 8017734:	2340      	movs	r3, #64	@ 0x40
 8017736:	e7ef      	b.n	8017718 <_ux_device_class_hid_report_set+0x24>
 8017738:	200030e0 	.word	0x200030e0

0801773c <_ux_device_class_hid_tasks_run>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check if the device is configured.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801773c:	4b28      	ldr	r3, [pc, #160]	@ (80177e0 <_ux_device_class_hid_tasks_run+0xa4>)
{
 801773e:	b513      	push	{r0, r1, r4, lr}
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017740:	681b      	ldr	r3, [r3, #0]
{
 8017742:	0004      	movs	r4, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017746:	2b03      	cmp	r3, #3
 8017748:	d004      	beq.n	8017754 <_ux_device_class_hid_tasks_run+0x18>
    {
        hid -> ux_device_class_hid_event_state = UX_STATE_EXIT;
 801774a:	2301      	movs	r3, #1
 801774c:	62c3      	str	r3, [r0, #44]	@ 0x2c
{
 801774e:	2301      	movs	r3, #1

        /* Just go back to normal state.  */
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
        return(UX_STATE_IDLE);
    }
}
 8017750:	0018      	movs	r0, r3
 8017752:	bd16      	pop	{r1, r2, r4, pc}
    if (hid -> ux_device_class_hid_receiver)
 8017754:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8017756:	2b00      	cmp	r3, #0
 8017758:	d001      	beq.n	801775e <_ux_device_class_hid_tasks_run+0x22>
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_tasks_run(hid);
 801775a:	69db      	ldr	r3, [r3, #28]
 801775c:	4798      	blx	r3
    hid_event = &hid -> ux_device_class_hid_event;
 801775e:	0023      	movs	r3, r4
    switch(hid -> ux_device_class_hid_event_state)
 8017760:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hid_event = &hid -> ux_device_class_hid_event;
 8017762:	3334      	adds	r3, #52	@ 0x34
 8017764:	9301      	str	r3, [sp, #4]
    switch(hid -> ux_device_class_hid_event_state)
 8017766:	2805      	cmp	r0, #5
 8017768:	d826      	bhi.n	80177b8 <_ux_device_class_hid_tasks_run+0x7c>
 801776a:	f7e8 fcd5 	bl	8000118 <__gnu_thumb1_case_sqi>
 801776e:	f003      	.short	0xf003
 8017770:	18252508 	.word	0x18252508
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 8017774:	f001 fd53 	bl	801921e <_ux_utility_time_get>
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 8017778:	2302      	movs	r3, #2
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 801777a:	6320      	str	r0, [r4, #48]	@ 0x30
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 801777c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        status = _ux_device_class_hid_event_check(hid, &hid_event);
 801777e:	0020      	movs	r0, r4
 8017780:	a901      	add	r1, sp, #4
 8017782:	f7ff fdb1 	bl	80172e8 <_ux_device_class_hid_event_check>
        if (status != UX_SUCCESS)
 8017786:	2800      	cmp	r0, #0
 8017788:	d119      	bne.n	80177be <_ux_device_class_hid_tasks_run+0x82>
                                hid_event -> ux_device_class_hid_event_buffer;
 801778a:	9a01      	ldr	r2, [sp, #4]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 801778c:	6863      	ldr	r3, [r4, #4]
        trans -> ux_slave_transfer_request_data_pointer =
 801778e:	68d1      	ldr	r1, [r2, #12]
        trans -> ux_slave_transfer_request_requested_length =
 8017790:	6892      	ldr	r2, [r2, #8]
        trans -> ux_slave_transfer_request_data_pointer =
 8017792:	62d9      	str	r1, [r3, #44]	@ 0x2c
        trans -> ux_slave_transfer_request_requested_length =
 8017794:	635a      	str	r2, [r3, #52]	@ 0x34
        UX_SLAVE_TRANSFER_STATE_RESET(trans);
 8017796:	2200      	movs	r2, #0
 8017798:	651a      	str	r2, [r3, #80]	@ 0x50
        hid -> ux_device_class_hid_event_state = UX_STATE_WAIT;
 801779a:	2305      	movs	r3, #5
 801779c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        status = _ux_device_stack_transfer_run(trans,
 801779e:	9b01      	ldr	r3, [sp, #4]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 80177a0:	6860      	ldr	r0, [r4, #4]
        status = _ux_device_stack_transfer_run(trans,
 80177a2:	6899      	ldr	r1, [r3, #8]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 80177a4:	3020      	adds	r0, #32
        status = _ux_device_stack_transfer_run(trans,
 80177a6:	000a      	movs	r2, r1
 80177a8:	f7ff f9ec 	bl	8016b84 <_ux_device_stack_transfer_run>
        return(UX_STATE_WAIT);
 80177ac:	2305      	movs	r3, #5
        if (status <= UX_STATE_NEXT)
 80177ae:	2804      	cmp	r0, #4
 80177b0:	d8ce      	bhi.n	8017750 <_ux_device_class_hid_tasks_run+0x14>
            _ux_device_class_hid_event_free(hid);
 80177b2:	0020      	movs	r0, r4
 80177b4:	f7ff fdaa 	bl	801730c <_ux_device_class_hid_event_free>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80177b8:	2300      	movs	r3, #0
 80177ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
        return(UX_STATE_IDLE);
 80177bc:	e002      	b.n	80177c4 <_ux_device_class_hid_tasks_run+0x88>
            if (hid -> ux_device_class_hid_event_wait_timeout == UX_WAIT_FOREVER)
 80177be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80177c0:	3301      	adds	r3, #1
 80177c2:	d101      	bne.n	80177c8 <_ux_device_class_hid_tasks_run+0x8c>
                return(UX_STATE_IDLE);
 80177c4:	2302      	movs	r3, #2
 80177c6:	e7c3      	b.n	8017750 <_ux_device_class_hid_tasks_run+0x14>
            tick = _ux_utility_time_get();
 80177c8:	f001 fd29 	bl	801921e <_ux_utility_time_get>
            elapsed = _ux_utility_time_elapsed(hid -> ux_device_class_hid_event_wait_start, tick);
 80177cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177ce:	1a1a      	subs	r2, r3, r0
 80177d0:	4283      	cmp	r3, r0
 80177d2:	d800      	bhi.n	80177d6 <_ux_device_class_hid_tasks_run+0x9a>
 80177d4:	1ac2      	subs	r2, r0, r3
            if (elapsed < hid -> ux_device_class_hid_event_wait_timeout)
 80177d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80177d8:	4293      	cmp	r3, r2
 80177da:	d9d6      	bls.n	801778a <_ux_device_class_hid_tasks_run+0x4e>
 80177dc:	e7f2      	b.n	80177c4 <_ux_device_class_hid_tasks_run+0x88>
 80177de:	46c0      	nop			@ (mov r8, r8)
 80177e0:	200030e0 	.word	0x200030e0

080177e4 <_ux_device_class_hid_uninitialize>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80177e4:	6a03      	ldr	r3, [r0, #32]
{
 80177e6:	b510      	push	{r4, lr}
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80177e8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif

    /* Free memory for the array. */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
 80177ea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80177ec:	68d8      	ldr	r0, [r3, #12]
 80177ee:	f7ff fbe1 	bl	8016fb4 <_ux_utility_memory_free>
#endif
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 80177f2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80177f4:	f7ff fbde 	bl	8016fb4 <_ux_utility_memory_free>
    /* Free read mutex.  */
    _ux_device_mutex_delete(&hid -> ux_device_class_hid_read_mutex);
#endif

    /* Uninitialize receiver.  */
    if (hid -> ux_device_class_hid_receiver)
 80177f8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80177fa:	2800      	cmp	r0, #0
 80177fc:	d001      	beq.n	8017802 <_ux_device_class_hid_uninitialize+0x1e>
        hid -> ux_device_class_hid_receiver ->
 80177fe:	6803      	ldr	r3, [r0, #0]
 8017800:	4798      	blx	r3
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
 8017802:	68a0      	ldr	r0, [r4, #8]
 8017804:	f7ff fbd6 	bl	8016fb4 <_ux_utility_memory_free>
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 8017808:	0020      	movs	r0, r4
 801780a:	f7ff fbd3 	bl	8016fb4 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 801780e:	2000      	movs	r0, #0
 8017810:	bd10      	pop	{r4, pc}

08017812 <_ux_device_class_storage_activate>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8017812:	0003      	movs	r3, r0

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017814:	6a02      	ldr	r2, [r0, #32]
{
 8017816:	b570      	push	{r4, r5, r6, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017818:	6c90      	ldr	r0, [r2, #72]	@ 0x48

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 801781a:	689a      	ldr	r2, [r3, #8]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)storage;
         
    /* Now the opposite, store the interface in the class instance.  */
    storage -> ux_slave_class_storage_interface =  interface_ptr;
 801781c:	0003      	movs	r3, r0
 801781e:	0004      	movs	r4, r0
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)storage;
 8017820:	6090      	str	r0, [r2, #8]
    storage -> ux_slave_class_storage_interface =  interface_ptr;
 8017822:	c304      	stmia	r3!, {r2}

#else

    /* Locate the endpoints.  */
    /* Check the first endpoint direction, if IN we have the correct endpoint.  */
    endpoint = interface_ptr -> ux_slave_interface_first_endpoint;
 8017824:	69d2      	ldr	r2, [r2, #28]
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8017826:	3408      	adds	r4, #8
 8017828:	7b95      	ldrb	r5, [r2, #14]

        /* Wrong direction, we found the OUT endpoint first.  */
        storage -> ux_device_class_storage_ep_out = endpoint;

        /* So the next endpoint has to be the IN endpoint.  */
        storage -> ux_device_class_storage_ep_in = endpoint -> ux_slave_endpoint_next_endpoint;
 801782a:	6951      	ldr	r1, [r2, #20]
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 801782c:	2d7f      	cmp	r5, #127	@ 0x7f
 801782e:	d81b      	bhi.n	8017868 <_ux_device_class_storage_activate+0x56>
        storage -> ux_device_class_storage_ep_out = endpoint;
 8017830:	67da      	str	r2, [r3, #124]	@ 0x7c
        storage -> ux_device_class_storage_ep_in = endpoint -> ux_slave_endpoint_next_endpoint;
 8017832:	67e1      	str	r1, [r4, #124]	@ 0x7c
    }

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1

    /* Assign endpoint buffers.  */
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
 8017834:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
        ux_slave_transfer_request_data_pointer = UX_DEVICE_CLASS_STORAGE_BULKIN_BUFFER(storage);
 8017836:	2480      	movs	r4, #128	@ 0x80
 8017838:	6841      	ldr	r1, [r0, #4]
 801783a:	0164      	lsls	r4, r4, #5
 801783c:	190c      	adds	r4, r1, r4
 801783e:	62d4      	str	r4, [r2, #44]	@ 0x2c
    storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request.
 8017840:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
        ux_slave_transfer_request_data_pointer = UX_DEVICE_CLASS_STORAGE_BULKOUT_BUFFER(storage);
 8017842:	62e1      	str	r1, [r4, #44]	@ 0x2c
#endif

    /* Reset states.  */
    storage -> ux_device_class_storage_buffer[0] = storage -> ux_device_class_storage_ep_out ->
                    ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer;
    storage -> ux_device_class_storage_buffer[1] = storage -> ux_device_class_storage_ep_in ->
 8017844:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
    storage -> ux_device_class_storage_buffer[0] = storage -> ux_device_class_storage_ep_out ->
 8017846:	6701      	str	r1, [r0, #112]	@ 0x70
                    ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer;
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8017848:	0001      	movs	r1, r0
    storage -> ux_device_class_storage_buffer[1] = storage -> ux_device_class_storage_ep_in ->
 801784a:	6743      	str	r3, [r0, #116]	@ 0x74
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 801784c:	2300      	movs	r3, #0
 801784e:	3190      	adds	r1, #144	@ 0x90
 8017850:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_state = UX_STATE_RESET;
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017852:	3912      	subs	r1, #18
 8017854:	800b      	strh	r3, [r1, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_IDLE;
 8017856:	6783      	str	r3, [r0, #120]	@ 0x78
    storage -> ux_device_class_storage_buffer_state[1] = UX_DEVICE_CLASS_STORAGE_BUFFER_IDLE;
    storage -> ux_device_class_storage_buffer_usb = 0;
    storage -> ux_device_class_storage_buffer_disk = 0;
    UX_SLAVE_TRANSFER_STATE_RESET(&storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request);
 8017858:	6523      	str	r3, [r4, #80]	@ 0x50
    UX_SLAVE_TRANSFER_STATE_RESET(&storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request);
 801785a:	6513      	str	r3, [r2, #80]	@ 0x50

    status = UX_SUCCESS;
#endif

    /* If there is a activate function call it.  */
    if (storage -> ux_slave_class_storage_instance_activate != UX_NULL)
 801785c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801785e:	2b00      	cmp	r3, #0
 8017860:	d000      	beq.n	8017864 <_ux_device_class_storage_activate+0x52>
    {        
        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_activate(storage);
 8017862:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, storage, 0, 0, 0)

    /* Return completion status.  */
    return(status);
}
 8017864:	2000      	movs	r0, #0
 8017866:	bd70      	pop	{r4, r5, r6, pc}
        storage -> ux_device_class_storage_ep_in = endpoint;
 8017868:	67e2      	str	r2, [r4, #124]	@ 0x7c
        storage -> ux_device_class_storage_ep_out = endpoint -> ux_slave_endpoint_next_endpoint;
 801786a:	67d9      	str	r1, [r3, #124]	@ 0x7c
 801786c:	e7e2      	b.n	8017834 <_ux_device_class_storage_activate+0x22>
	...

08017870 <_ux_device_class_storage_control_request>:
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;


    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017870:	4b1e      	ldr	r3, [pc, #120]	@ (80178ec <_ux_device_class_storage_control_request+0x7c>)
{
 8017872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017874:	681d      	ldr	r5, [r3, #0]
{
 8017876:	0006      	movs	r6, r0

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
    
    /* Extract the request type from the SETUP packet..   */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017878:	002b      	movs	r3, r5
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801787a:	0028      	movs	r0, r5
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801787c:	335c      	adds	r3, #92	@ 0x5c
 801787e:	9301      	str	r3, [sp, #4]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017880:	309a      	adds	r0, #154	@ 0x9a
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017882:	333d      	adds	r3, #61	@ 0x3d
 8017884:	781f      	ldrb	r7, [r3, #0]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017886:	f7ff fbc4 	bl	8017012 <_ux_utility_short_get>
 801788a:	0004      	movs	r4, r0
    request_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801788c:	0028      	movs	r0, r5
 801788e:	309e      	adds	r0, #158	@ 0x9e
 8017890:	f7ff fbbf 	bl	8017012 <_ux_utility_short_get>

    /* Check if wValue is valid.  */
    if (request_value != 0)
 8017894:	2c00      	cmp	r4, #0
 8017896:	d127      	bne.n	80178e8 <_ux_device_class_storage_control_request+0x78>

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
    
    /* Get the storage instance from this class container.  */
    storage =  (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 8017898:	6a33      	ldr	r3, [r6, #32]
 801789a:	6c9e      	ldr	r6, [r3, #72]	@ 0x48

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 801789c:	2ffe      	cmp	r7, #254	@ 0xfe
 801789e:	d014      	beq.n	80178ca <_ux_device_class_storage_control_request+0x5a>
 80178a0:	2fff      	cmp	r7, #255	@ 0xff
 80178a2:	d121      	bne.n	80178e8 <_ux_device_class_storage_control_request+0x78>
    {

    case UX_SLAVE_CLASS_STORAGE_RESET:

        /* Check if wLength is valid.  */
        if (request_length != 0)
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d11f      	bne.n	80178e8 <_ux_device_class_storage_control_request+0x78>
            return(UX_ERROR);

#if defined(UX_DEVICE_STANDALONE)
        endpoint_in = storage -> ux_device_class_storage_ep_in;
 80178a8:	0033      	movs	r3, r6
 80178aa:	3308      	adds	r3, #8
 80178ac:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
        endpoint_out = storage -> ux_device_class_storage_ep_out;
 80178ae:	1d33      	adds	r3, r6, #4
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
        }
#endif

        /* First cancel any transfer on the endpoint OUT, from the host.  */
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80178b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80178b2:	2128      	movs	r1, #40	@ 0x28
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80178b4:	3020      	adds	r0, #32
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80178b6:	f7ff f933 	bl	8016b20 <_ux_device_stack_transfer_abort>

        /* Then cancel any transfer on the endpoint IN, from the host.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80178ba:	0028      	movs	r0, r5
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80178bc:	2128      	movs	r1, #40	@ 0x28
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80178be:	3020      	adds	r0, #32
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80178c0:	f7ff f92e 	bl	8016b20 <_ux_device_stack_transfer_abort>

        /* Reset phase error.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80178c4:	6574      	str	r4, [r6, #84]	@ 0x54
        return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
}
 80178c6:	0020      	movs	r0, r4
 80178c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (request_length < 1)
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d00c      	beq.n	80178e8 <_ux_device_class_storage_control_request+0x78>
        *transfer_request -> ux_slave_transfer_request_data_pointer =  (UCHAR)(storage -> ux_slave_class_storage_number_lun -1);
 80178ce:	68b3      	ldr	r3, [r6, #8]
 80178d0:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 80178d2:	3b01      	subs	r3, #1
 80178d4:	7013      	strb	r3, [r2, #0]
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80178d6:	2303      	movs	r3, #3
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80178d8:	2201      	movs	r2, #1
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80178da:	3508      	adds	r5, #8
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80178dc:	0011      	movs	r1, r2
 80178de:	9801      	ldr	r0, [sp, #4]
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80178e0:	67eb      	str	r3, [r5, #124]	@ 0x7c
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80178e2:	f7ff f93f 	bl	8016b64 <_ux_device_stack_transfer_request>
        break;
 80178e6:	e7ee      	b.n	80178c6 <_ux_device_class_storage_control_request+0x56>
        return(UX_ERROR);
 80178e8:	24ff      	movs	r4, #255	@ 0xff
 80178ea:	e7ec      	b.n	80178c6 <_ux_device_class_storage_control_request+0x56>
 80178ec:	200030e0 	.word	0x200030e0

080178f0 <_ux_device_class_storage_csw_send>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_csw_send(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                UX_SLAVE_ENDPOINT *endpoint_in, UCHAR csw_status)
{
 80178f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if defined(UX_DEVICE_STANDALONE)

    /* Reset transfer request buffer pointers.  */
    storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 80178f2:	1d03      	adds	r3, r0, #4
 80178f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
{
 80178f6:	0015      	movs	r5, r2
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 80178f8:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 80178fa:	0004      	movs	r4, r0
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 80178fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[1];
 80178fe:	0003      	movs	r3, r0
 8017900:	3308      	adds	r3, #8
 8017902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017904:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8017906:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

    /* If CSW skipped, just return.  */
    if (UX_DEVICE_CLASS_STORAGE_CSW_SKIP(&storage -> ux_slave_class_storage_csw_status))
 8017908:	0003      	movs	r3, r0
 801790a:	3357      	adds	r3, #87	@ 0x57
 801790c:	781e      	ldrb	r6, [r3, #0]
 801790e:	2e00      	cmp	r6, #0
 8017910:	d124      	bne.n	801795c <_ux_device_class_storage_csw_send+0x6c>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get CSW buffer pointer.  */
    csw_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017912:	6aef      	ldr	r7, [r5, #44]	@ 0x2c

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(csw_buffer, 0, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH); /* Use case of memset is verified. */
 8017914:	220d      	movs	r2, #13
 8017916:	0031      	movs	r1, r6
 8017918:	0038      	movs	r0, r7
 801791a:	f7ff fb73 	bl	8017004 <_ux_utility_memory_set>

    /* Store the signature of the CSW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE], UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE_MASK);
 801791e:	0038      	movs	r0, r7
 8017920:	490f      	ldr	r1, [pc, #60]	@ (8017960 <_ux_device_class_storage_csw_send+0x70>)
 8017922:	f7ff fa35 	bl	8016d90 <_ux_utility_long_put>

    /* Store the SCSI tag from the CBW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_TAG], storage -> ux_slave_class_storage_scsi_tag);
 8017926:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8017928:	1d38      	adds	r0, r7, #4
 801792a:	f7ff fa31 	bl	8016d90 <_ux_utility_long_put>

    /* Store the dCSWDataResidue.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_DATA_RESIDUE], storage -> ux_slave_class_storage_csw_residue);
 801792e:	0038      	movs	r0, r7
 8017930:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8017932:	3008      	adds	r0, #8
 8017934:	f7ff fa2c 	bl	8016d90 <_ux_utility_long_put>

    /* Store the status of the previous operation.  */
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 8017938:	6d63      	ldr	r3, [r4, #84]	@ 0x54

#if defined(UX_DEVICE_STANDALONE)

    /* Next: Transfer (CSW).  */
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 801793a:	2203      	movs	r2, #3
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 801793c:	733b      	strb	r3, [r7, #12]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 801793e:	0023      	movs	r3, r4
 8017940:	337d      	adds	r3, #125	@ 0x7d
 8017942:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017944:	3220      	adds	r2, #32
 8017946:	709a      	strb	r2, [r3, #2]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017948:	3520      	adds	r5, #32
    storage -> ux_device_class_storage_transfer = transfer_request;

    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 801794a:	0022      	movs	r2, r4
    storage -> ux_device_class_storage_transfer = transfer_request;
 801794c:	330b      	adds	r3, #11
 801794e:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 8017950:	230d      	movs	r3, #13
 8017952:	328c      	adds	r2, #140	@ 0x8c
    storage -> ux_device_class_storage_data_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
    storage -> ux_device_class_storage_data_count = 0;
 8017954:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 8017956:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 8017958:	6093      	str	r3, [r2, #8]
    storage -> ux_device_class_storage_data_count = 0;
 801795a:	6026      	str	r6, [r4, #0]
                                    UX_SLAVE_CLASS_STORAGE_CSW_LENGTH);
#endif

    /* Return completion status.  */
    return(status);
}
 801795c:	2000      	movs	r0, #0
 801795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017960:	53425355 	.word	0x53425355

08017964 <_ux_device_class_storage_deactivate>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017964:	6a03      	ldr	r3, [r0, #32]
{
 8017966:	b570      	push	{r4, r5, r6, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017968:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

#if defined(UX_DEVICE_STANDALONE)

    endpoint_in = storage -> ux_device_class_storage_ep_in;
    endpoint_out = storage -> ux_device_class_storage_ep_out;
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 801796a:	2126      	movs	r1, #38	@ 0x26
    endpoint_in = storage -> ux_device_class_storage_ep_in;
 801796c:	0023      	movs	r3, r4
 801796e:	3308      	adds	r3, #8
 8017970:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
    endpoint_out = storage -> ux_device_class_storage_ep_out;
 8017972:	1d23      	adds	r3, r4, #4
 8017974:	6fde      	ldr	r6, [r3, #124]	@ 0x7c
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8017976:	0028      	movs	r0, r5
 8017978:	f7ff f8ee 	bl	8016b58 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 801797c:	2126      	movs	r1, #38	@ 0x26
 801797e:	0030      	movs	r0, r6
 8017980:	f7ff f8ea 	bl	8016b58 <_ux_device_stack_transfer_all_request_abort>
    endpoint_out -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
 8017984:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017986:	62f3      	str	r3, [r6, #44]	@ 0x2c
                                storage -> ux_device_class_storage_buffer[0];
    endpoint_in -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
 8017988:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801798a:	62eb      	str	r3, [r5, #44]	@ 0x2c
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
#endif

    /* If there is a deactivate function call it.  */
    if (storage -> ux_slave_class_storage_instance_deactivate != UX_NULL)
 801798c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801798e:	2b00      	cmp	r3, #0
 8017990:	d001      	beq.n	8017996 <_ux_device_class_storage_deactivate+0x32>
    {

        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_deactivate(storage);
 8017992:	0020      	movs	r0, r4
 8017994:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(storage);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8017996:	2000      	movs	r0, #0
 8017998:	bd70      	pop	{r4, r5, r6, pc}

0801799a <_ux_device_class_storage_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 801799a:	0003      	movs	r3, r0
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 801799c:	6800      	ldr	r0, [r0, #0]
{
 801799e:	b510      	push	{r4, lr}
    switch (command -> ux_slave_class_command_request)
 80179a0:	3801      	subs	r0, #1
 80179a2:	2806      	cmp	r0, #6
 80179a4:	d81f      	bhi.n	80179e6 <_ux_device_class_storage_entry+0x4c>
 80179a6:	f7e8 fbc1 	bl	800012c <__gnu_thumb1_case_uqi>
 80179aa:	120c      	.short	0x120c
 80179ac:	1e041a16 	.word	0x1e041a16
 80179b0:	08          	.byte	0x08
 80179b1:	00          	.byte	0x00

        /* Call the init function of the Storage class.  */
#if defined(UX_DEVICE_CLASS_STORAGE_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_storage_initialize(command);
#else
        status =  _ux_device_class_storage_initialize(command);
 80179b2:	0018      	movs	r0, r3
 80179b4:	f000 f82a 	bl	8017a0c <_ux_device_class_storage_initialize>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }   
}
 80179b8:	bd10      	pop	{r4, pc}
        status =  _ux_device_class_storage_uninitialize(command);
 80179ba:	0018      	movs	r0, r3
 80179bc:	f000 feb6 	bl	801872c <_ux_device_class_storage_uninitialize>
        return(status);
 80179c0:	e7fa      	b.n	80179b8 <_ux_device_class_storage_entry+0x1e>
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 80179c2:	695b      	ldr	r3, [r3, #20]
            return(UX_NO_CLASS_MATCH);
 80179c4:	2057      	movs	r0, #87	@ 0x57
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 80179c6:	2b08      	cmp	r3, #8
 80179c8:	d1f6      	bne.n	80179b8 <_ux_device_class_storage_entry+0x1e>
            return(UX_SUCCESS);
 80179ca:	2000      	movs	r0, #0
 80179cc:	e7f4      	b.n	80179b8 <_ux_device_class_storage_entry+0x1e>
        status =  _ux_device_class_storage_activate(command);
 80179ce:	0018      	movs	r0, r3
 80179d0:	f7ff ff1f 	bl	8017812 <_ux_device_class_storage_activate>
        return(status);
 80179d4:	e7f0      	b.n	80179b8 <_ux_device_class_storage_entry+0x1e>
        status =  _ux_device_class_storage_deactivate(command);
 80179d6:	0018      	movs	r0, r3
 80179d8:	f7ff ffc4 	bl	8017964 <_ux_device_class_storage_deactivate>
        return(status);
 80179dc:	e7ec      	b.n	80179b8 <_ux_device_class_storage_entry+0x1e>
        status = _ux_device_class_storage_control_request(command);
 80179de:	0018      	movs	r0, r3
 80179e0:	f7ff ff46 	bl	8017870 <_ux_device_class_storage_control_request>
        return(status);
 80179e4:	e7e8      	b.n	80179b8 <_ux_device_class_storage_entry+0x1e>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 80179e6:	2002      	movs	r0, #2
 80179e8:	2254      	movs	r2, #84	@ 0x54
 80179ea:	2107      	movs	r1, #7
 80179ec:	f7ff f922 	bl	8016c34 <_ux_system_error_handler>
        return(UX_FUNCTION_NOT_SUPPORTED);
 80179f0:	2054      	movs	r0, #84	@ 0x54
 80179f2:	e7e1      	b.n	80179b8 <_ux_device_class_storage_entry+0x1e>

080179f4 <_ux_device_class_storage_format>:

    UX_PARAMETER_NOT_USED(endpoint_out);
#endif

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80179f4:	2338      	movs	r3, #56	@ 0x38
 80179f6:	4359      	muls	r1, r3
 80179f8:	4b03      	ldr	r3, [pc, #12]	@ (8017a08 <_ux_device_class_storage_format+0x14>)
 80179fa:	1841      	adds	r1, r0, r1
 80179fc:	624b      	str	r3, [r1, #36]	@ 0x24
                                               UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80179fe:	2301      	movs	r3, #1
 8017a00:	6543      	str	r3, [r0, #84]	@ 0x54
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}
 8017a02:	2054      	movs	r0, #84	@ 0x54
 8017a04:	4770      	bx	lr
 8017a06:	46c0      	nop			@ (mov r8, r8)
 8017a08:	00012605 	.word	0x00012605

08017a0c <_ux_device_class_storage_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8017a0c:	b570      	push	{r4, r5, r6, lr}
UX_SLAVE_CLASS                          *class_inst;
ULONG                                   lun_index;


    /* Get the pointer to the application parameters for the storage class.  */
    storage_parameter =  command -> ux_slave_class_command_parameter;
 8017a0e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
{
 8017a10:	0003      	movs	r3, r0

    /* Ensure the number of LUN declared by the caller does not exceed the
       max number allowed for LUN storage.  */
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 8017a12:	68aa      	ldr	r2, [r5, #8]
        return UX_ERROR;
 8017a14:	20ff      	movs	r0, #255	@ 0xff
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 8017a16:	2a01      	cmp	r2, #1
 8017a18:	d846      	bhi.n	8017aa8 <_ux_device_class_storage_initialize+0x9c>

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;

    /* Create an instance of the device storage class.  */
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 8017a1a:	2100      	movs	r1, #0
 8017a1c:	22b4      	movs	r2, #180	@ 0xb4
 8017a1e:	0008      	movs	r0, r1
    class_inst =  command -> ux_slave_class_command_class_ptr;
 8017a20:	6a1e      	ldr	r6, [r3, #32]
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 8017a22:	f7ff f9c7 	bl	8016db4 <_ux_utility_memory_allocate>
 8017a26:	1e04      	subs	r4, r0, #0

    /* Check for successful allocation.  */
    if (storage == UX_NULL)
 8017a28:	d044      	beq.n	8017ab4 <_ux_device_class_storage_initialize+0xa8>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1

    /* Allocate bulk endpoint buffer.  */
    UX_ASSERT(!UX_DEVICE_CLASS_STORAGE_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW);
    storage -> ux_device_class_storage_endpoint_buffer = _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017a2a:	2280      	movs	r2, #128	@ 0x80
 8017a2c:	2101      	movs	r1, #1
 8017a2e:	2000      	movs	r0, #0
 8017a30:	0192      	lsls	r2, r2, #6
 8017a32:	f7ff f9bf 	bl	8016db4 <_ux_utility_memory_allocate>
            status = UX_MEMORY_INSUFFICIENT;
    }
#else

    /* Save tasks run entry.  */
    class_inst -> ux_slave_class_task_function = _ux_device_class_storage_tasks_run;
 8017a36:	4b22      	ldr	r3, [pc, #136]	@ (8017ac0 <_ux_device_class_storage_initialize+0xb4>)
    storage -> ux_device_class_storage_endpoint_buffer = _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017a38:	6060      	str	r0, [r4, #4]
    class_inst -> ux_slave_class_task_function = _ux_device_class_storage_tasks_run;
 8017a3a:	6533      	str	r3, [r6, #80]	@ 0x50
    {

        UX_THREAD_EXTENSION_PTR_SET(&(class_inst -> ux_slave_class_thread), class_inst)

        /* Store the number of LUN declared.  */
        storage -> ux_slave_class_storage_number_lun = storage_parameter -> ux_slave_class_storage_parameter_number_lun;
 8017a3c:	68ab      	ldr	r3, [r5, #8]
 8017a3e:	60a3      	str	r3, [r4, #8]

        /* Copy each individual LUN parameters.  */
        for (lun_index = 0; lun_index < storage -> ux_slave_class_storage_number_lun; lun_index++)
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d017      	beq.n	8017a74 <_ux_device_class_storage_initialize+0x68>
        {

            /* Check block length size. */
            if (storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017a44:	2280      	movs	r2, #128	@ 0x80
 8017a46:	692b      	ldr	r3, [r5, #16]
 8017a48:	0152      	lsls	r2, r2, #5
 8017a4a:	4293      	cmp	r3, r2
 8017a4c:	d82d      	bhi.n	8017aaa <_ux_device_class_storage_initialize+0x9e>
                status = (UX_MEMORY_INSUFFICIENT);
                break;
            }

            /* Store all the application parameter information about the media.  */
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 8017a4e:	68ea      	ldr	r2, [r5, #12]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_block_length   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length;
 8017a50:	6123      	str	r3, [r4, #16]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 8017a52:	696b      	ldr	r3, [r5, #20]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 8017a54:	60e2      	str	r2, [r4, #12]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 8017a56:	6163      	str	r3, [r4, #20]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_removable_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_removable_flag;
 8017a58:	69ab      	ldr	r3, [r5, #24]
 8017a5a:	61a3      	str	r3, [r4, #24]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read_only_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read_only_flag;
 8017a5c:	69eb      	ldr	r3, [r5, #28]
 8017a5e:	61e3      	str	r3, [r4, #28]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read;
 8017a60:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017a62:	6323      	str	r3, [r4, #48]	@ 0x30
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_flush          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_flush;
 8017a64:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8017a66:	63a3      	str	r3, [r4, #56]	@ 0x38
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_write          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_write;
 8017a68:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8017a6a:	6363      	str	r3, [r4, #52]	@ 0x34
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_status         = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_status;
 8017a6c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8017a6e:	63e3      	str	r3, [r4, #60]	@ 0x3c
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_notification   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_notification;
 8017a70:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8017a72:	6423      	str	r3, [r4, #64]	@ 0x40
        /* If it's OK, complete it.  */
        if (status == UX_SUCCESS)
        {

            /* Store the start and stop signals if needed by the application.  */
            storage -> ux_slave_class_storage_instance_activate = storage_parameter -> ux_slave_class_storage_instance_activate;
 8017a74:	682b      	ldr	r3, [r5, #0]
 8017a76:	65a3      	str	r3, [r4, #88]	@ 0x58
            storage -> ux_slave_class_storage_instance_deactivate = storage_parameter -> ux_slave_class_storage_instance_deactivate;
 8017a78:	686b      	ldr	r3, [r5, #4]
 8017a7a:	65e3      	str	r3, [r4, #92]	@ 0x5c

            /* Store the vendor id, product id, product revision and product serial.  */
            if (storage_parameter -> ux_slave_class_storage_parameter_vendor_id)
 8017a7c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d100      	bne.n	8017a84 <_ux_device_class_storage_initialize+0x78>
                storage -> ux_slave_class_storage_vendor_id = storage_parameter -> ux_slave_class_storage_parameter_vendor_id;
            else
                storage -> ux_slave_class_storage_vendor_id = _ux_system_slave_class_storage_vendor_id;
 8017a82:	4b10      	ldr	r3, [pc, #64]	@ (8017ac4 <_ux_device_class_storage_initialize+0xb8>)
 8017a84:	6623      	str	r3, [r4, #96]	@ 0x60

            if (storage_parameter -> ux_slave_class_storage_parameter_product_id)
 8017a86:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d100      	bne.n	8017a8e <_ux_device_class_storage_initialize+0x82>
                storage -> ux_slave_class_storage_product_id = storage_parameter -> ux_slave_class_storage_parameter_product_id;
            else
                storage -> ux_slave_class_storage_product_id = _ux_system_slave_class_storage_product_id;
 8017a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8017ac8 <_ux_device_class_storage_initialize+0xbc>)
 8017a8e:	6663      	str	r3, [r4, #100]	@ 0x64

            if (storage_parameter -> ux_slave_class_storage_parameter_product_rev)
 8017a90:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d100      	bne.n	8017a98 <_ux_device_class_storage_initialize+0x8c>
                storage -> ux_slave_class_storage_product_rev = storage_parameter -> ux_slave_class_storage_parameter_product_rev;
            else
                storage -> ux_slave_class_storage_product_rev = _ux_system_slave_class_storage_product_rev;
 8017a96:	4b0d      	ldr	r3, [pc, #52]	@ (8017acc <_ux_device_class_storage_initialize+0xc0>)
 8017a98:	66a3      	str	r3, [r4, #104]	@ 0x68

            if (storage_parameter -> ux_slave_class_storage_parameter_product_serial)
 8017a9a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d100      	bne.n	8017aa2 <_ux_device_class_storage_initialize+0x96>
                storage -> ux_slave_class_storage_product_serial = storage_parameter -> ux_slave_class_storage_parameter_product_serial;
            else
                storage -> ux_slave_class_storage_product_serial = _ux_system_slave_class_storage_product_serial;
 8017aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8017ad0 <_ux_device_class_storage_initialize+0xc4>)

            /* Save the address of the STORAGE instance inside the STORAGE container.  */
            class_inst -> ux_slave_class_instance = (VOID *) storage;

            return(UX_SUCCESS);
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	66e3      	str	r3, [r4, #108]	@ 0x6c
            class_inst -> ux_slave_class_instance = (VOID *) storage;
 8017aa6:	64b4      	str	r4, [r6, #72]	@ 0x48
    /* Free instance.  */
    _ux_utility_memory_free(storage);

    /* Return completion status.  */
    return(status);
}
 8017aa8:	bd70      	pop	{r4, r5, r6, pc}
    if (storage -> ux_device_class_storage_endpoint_buffer != UX_NULL)
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	d104      	bne.n	8017ab8 <_ux_device_class_storage_initialize+0xac>
    _ux_utility_memory_free(storage);
 8017aae:	0020      	movs	r0, r4
 8017ab0:	f7ff fa80 	bl	8016fb4 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 8017ab4:	2012      	movs	r0, #18
 8017ab6:	e7f7      	b.n	8017aa8 <_ux_device_class_storage_initialize+0x9c>
        _ux_utility_memory_free(storage -> ux_device_class_storage_endpoint_buffer);
 8017ab8:	f7ff fa7c 	bl	8016fb4 <_ux_utility_memory_free>
 8017abc:	e7f7      	b.n	8017aae <_ux_device_class_storage_initialize+0xa2>
 8017abe:	46c0      	nop			@ (mov r8, r8)
 8017ac0:	08017f41 	.word	0x08017f41
 8017ac4:	2000028a 	.word	0x2000028a
 8017ac8:	20000279 	.word	0x20000279
 8017acc:	20000274 	.word	0x20000274
 8017ad0:	2000025f 	.word	0x2000025f

08017ad4 <_ux_device_class_storage_inquiry>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_inquiry(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ad6:	b085      	sub	sp, #20
        return(UX_ERROR);
    }
#endif

    /* From the SCSI Inquiry payload, get the page code.  */
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 8017ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Obtain inquiry buffer pointer.  */
    inquiry_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017ada:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 8017adc:	789f      	ldrb	r7, [r3, #2]
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 8017ade:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8017ae0:	9103      	str	r1, [sp, #12]
 8017ae2:	0004      	movs	r4, r0
 8017ae4:	0016      	movs	r6, r2

    /* Ensure the data buffer is cleaned.  */
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017ae6:	2100      	movs	r1, #0
 8017ae8:	2224      	movs	r2, #36	@ 0x24
 8017aea:	0028      	movs	r0, r5
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 8017aec:	9302      	str	r3, [sp, #8]
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017aee:	f7ff fa89 	bl	8017004 <_ux_utility_memory_set>

    /* Check for the maximum length to be returned. */
    if (inquiry_length > UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH)
 8017af2:	9b02      	ldr	r3, [sp, #8]
 8017af4:	9301      	str	r3, [sp, #4]
 8017af6:	2b24      	cmp	r3, #36	@ 0x24
 8017af8:	d901      	bls.n	8017afe <_ux_device_class_storage_inquiry+0x2a>
 8017afa:	2324      	movs	r3, #36	@ 0x24
 8017afc:	9301      	str	r3, [sp, #4]
        inquiry_length = UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;

    /* Default CSW to passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017afe:	2300      	movs	r3, #0
 8017b00:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Ensure we know about the page code.  */
    switch (inquiry_page_code)
 8017b02:	429f      	cmp	r7, r3
 8017b04:	d00c      	beq.n	8017b20 <_ux_device_class_storage_inquiry+0x4c>
 8017b06:	2f80      	cmp	r7, #128	@ 0x80
 8017b08:	d043      	beq.n	8017b92 <_ux_device_class_storage_inquiry+0xbe>
        /* The page code is not supported.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
#endif

        /* And update the REQUEST_SENSE codes.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8017b0a:	2338      	movs	r3, #56	@ 0x38
 8017b0c:	9a03      	ldr	r2, [sp, #12]

        /* Now we set the CSW with failure.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;

        /* Return error.  */
        status =  UX_ERROR;
 8017b0e:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8017b10:	4353      	muls	r3, r2
 8017b12:	4a2a      	ldr	r2, [pc, #168]	@ (8017bbc <_ux_device_class_storage_inquiry+0xe8>)
 8017b14:	18e3      	adds	r3, r4, r3
 8017b16:	625a      	str	r2, [r3, #36]	@ 0x24
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017b18:	2301      	movs	r3, #1
 8017b1a:	6563      	str	r3, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 8017b1c:	b005      	add	sp, #20
 8017b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PERIPHERAL_TYPE] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type;
 8017b20:	2338      	movs	r3, #56	@ 0x38
 8017b22:	9a03      	ldr	r2, [sp, #12]
 8017b24:	435a      	muls	r2, r3
 8017b26:	18a2      	adds	r2, r4, r2
 8017b28:	6951      	ldr	r1, [r2, #20]
 8017b2a:	7029      	strb	r1, [r5, #0]
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_REMOVABLE_MEDIA] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_removable_flag;
 8017b2c:	6991      	ldr	r1, [r2, #24]
 8017b2e:	7069      	strb	r1, [r5, #1]
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type == UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8017b30:	6952      	ldr	r2, [r2, #20]
 8017b32:	2a05      	cmp	r2, #5
 8017b34:	d100      	bne.n	8017b38 <_ux_device_class_storage_inquiry+0x64>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x32;
 8017b36:	2732      	movs	r7, #50	@ 0x32
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8017b38:	9a03      	ldr	r2, [sp, #12]
 8017b3a:	70ef      	strb	r7, [r5, #3]
 8017b3c:	4353      	muls	r3, r2
 8017b3e:	18e3      	adds	r3, r4, r3
 8017b40:	695a      	ldr	r2, [r3, #20]
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH_CD_ROM;
 8017b42:	235b      	movs	r3, #91	@ 0x5b
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8017b44:	2a05      	cmp	r2, #5
 8017b46:	d000      	beq.n	8017b4a <_ux_device_class_storage_inquiry+0x76>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 8017b48:	3b37      	subs	r3, #55	@ 0x37
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 8017b4a:	0028      	movs	r0, r5
 8017b4c:	712b      	strb	r3, [r5, #4]
 8017b4e:	2208      	movs	r2, #8
 8017b50:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8017b52:	3008      	adds	r0, #8
 8017b54:	f7ff fa24 	bl	8016fa0 <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 8017b58:	0028      	movs	r0, r5
 8017b5a:	2210      	movs	r2, #16
 8017b5c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8017b5e:	3010      	adds	r0, #16
 8017b60:	f7ff fa1e 	bl	8016fa0 <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 8017b64:	0028      	movs	r0, r5
 8017b66:	2204      	movs	r2, #4
 8017b68:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8017b6a:	3020      	adds	r0, #32
 8017b6c:	f7ff fa18 	bl	8016fa0 <_ux_utility_memory_copy>
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017b70:	0023      	movs	r3, r4
 8017b72:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_data_count = 0;
 8017b74:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017b76:	337f      	adds	r3, #127	@ 0x7f
 8017b78:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017b7a:	3b02      	subs	r3, #2
 8017b7c:	3a1e      	subs	r2, #30
 8017b7e:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length = inquiry_length;
 8017b80:	9a01      	ldr	r2, [sp, #4]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017b82:	330b      	adds	r3, #11
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017b84:	3620      	adds	r6, #32
    storage -> ux_device_class_storage_data_count = 0;
 8017b86:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017b88:	601e      	str	r6, [r3, #0]
    storage -> ux_device_class_storage_device_length = inquiry_length;
 8017b8a:	605a      	str	r2, [r3, #4]
    storage -> ux_device_class_storage_data_length = inquiry_length;
 8017b8c:	60da      	str	r2, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 8017b8e:	6020      	str	r0, [r4, #0]
    return(status);
 8017b90:	e7c4      	b.n	8017b1c <_ux_device_class_storage_inquiry+0x48>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL);
 8017b92:	0039      	movs	r1, r7
 8017b94:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017b96:	f7ff fa48 	bl	801702a <_ux_utility_short_put_big_endian>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer + 2, 20);
 8017b9a:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017b9c:	2114      	movs	r1, #20
 8017b9e:	3002      	adds	r0, #2
 8017ba0:	f7ff fa43 	bl	801702a <_ux_utility_short_put_big_endian>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer + 4, storage -> ux_slave_class_storage_product_serial, 20); /* Use case of memcpy is verified. */
 8017ba4:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017ba6:	2214      	movs	r2, #20
 8017ba8:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8017baa:	3004      	adds	r0, #4
 8017bac:	f7ff f9f8 	bl	8016fa0 <_ux_utility_memory_copy>
        if (inquiry_length > 24)
 8017bb0:	9b02      	ldr	r3, [sp, #8]
 8017bb2:	2b18      	cmp	r3, #24
 8017bb4:	d9dc      	bls.n	8017b70 <_ux_device_class_storage_inquiry+0x9c>
            inquiry_length = 24;
 8017bb6:	2318      	movs	r3, #24
 8017bb8:	9301      	str	r3, [sp, #4]
 8017bba:	e7d9      	b.n	8017b70 <_ux_device_class_storage_inquiry+0x9c>
 8017bbc:	00012605 	.word	0x00012605

08017bc0 <_ux_device_class_storage_mode_select>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SELECT, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* This command is not yet supported. So Stall the endpoint.  */
    if (storage -> ux_slave_class_storage_host_length)
 8017bc0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 8017bc2:	000b      	movs	r3, r1
 8017bc4:	b510      	push	{r4, lr}
    if (storage -> ux_slave_class_storage_host_length)
 8017bc6:	2a00      	cmp	r2, #0
 8017bc8:	d000      	beq.n	8017bcc <_ux_device_class_storage_mode_select+0xc>
        _ux_device_stack_endpoint_stall(endpoint_out);
#else
        UX_PARAMETER_NOT_USED(endpoint_out);
#endif

        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 8017bca:	6502      	str	r2, [r0, #80]	@ 0x50
    }

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8017bcc:	2138      	movs	r1, #56	@ 0x38
 8017bce:	4359      	muls	r1, r3
 8017bd0:	4b05      	ldr	r3, [pc, #20]	@ (8017be8 <_ux_device_class_storage_mode_select+0x28>)
 8017bd2:	1841      	adds	r1, r0, r1
 8017bd4:	624b      	str	r3, [r1, #36]	@ 0x24
                                            UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017bd6:	2301      	movs	r3, #1

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8017bd8:	2254      	movs	r2, #84	@ 0x54
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017bda:	6543      	str	r3, [r0, #84]	@ 0x54
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8017bdc:	2107      	movs	r1, #7
 8017bde:	2002      	movs	r0, #2
 8017be0:	f7ff f828 	bl	8016c34 <_ux_system_error_handler>
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error!  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}    
 8017be4:	2054      	movs	r0, #84	@ 0x54
 8017be6:	bd10      	pop	{r4, pc}
 8017be8:	00012605 	.word	0x00012605

08017bec <_ux_device_class_storage_mode_sense>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SENSE, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017bec:	0013      	movs	r3, r2
{
 8017bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bf0:	b087      	sub	sp, #28
 8017bf2:	0005      	movs	r5, r0
 8017bf4:	980c      	ldr	r0, [sp, #48]	@ 0x30
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017bf6:	3320      	adds	r3, #32
 8017bf8:	9305      	str	r3, [sp, #20]

    /* Get the command format : we have 1a and 5a.  */
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 8017bfa:	7803      	ldrb	r3, [r0, #0]
{
 8017bfc:	0016      	movs	r6, r2
    
    /* Extract the notification from the cbwcb.  */
    page_code =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PC_PAGE_CODE);
 8017bfe:	7887      	ldrb	r7, [r0, #2]
{
 8017c00:	9104      	str	r1, [sp, #16]
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 8017c02:	9303      	str	r3, [sp, #12]

    /* Check the command.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8017c04:	2b1a      	cmp	r3, #26
 8017c06:	d147      	bne.n	8017c98 <_ux_device_class_storage_mode_sense+0xac>
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 8017c08:	7903      	ldrb	r3, [r0, #4]
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_6;
 8017c0a:	2404      	movs	r4, #4
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 8017c0c:	9301      	str	r3, [sp, #4]
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
 8017c0e:	2302      	movs	r3, #2
 8017c10:	9302      	str	r3, [sp, #8]
    /* Ensure reply not exceed storage buffer.  */
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
        mode_sense_reply_length = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;

    /* Ensure memory buffer cleaned.  */
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length); /* Use case of memset is verified. */
 8017c12:	2100      	movs	r1, #0
 8017c14:	9a01      	ldr	r2, [sp, #4]
 8017c16:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017c18:	f7ff f9f4 	bl	8017004 <_ux_utility_memory_set>

    /* Establish READ ONLY flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 8017c1c:	2238      	movs	r2, #56	@ 0x38
 8017c1e:	9b04      	ldr	r3, [sp, #16]
 8017c20:	435a      	muls	r2, r3
 8017c22:	18aa      	adds	r2, r5, r2
 8017c24:	69d3      	ldr	r3, [r2, #28]
        page_pointer += page_length;
    }
#endif

    /* Caching mode page is returned if cache flush callback implemented.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 8017c26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 8017c28:	3b01      	subs	r3, #1
 8017c2a:	4259      	negs	r1, r3
 8017c2c:	414b      	adcs	r3, r1
 8017c2e:	01db      	lsls	r3, r3, #7
 8017c30:	9304      	str	r3, [sp, #16]
    page_pointer = transfer_request -> ux_slave_transfer_request_data_pointer + response_header_length;
 8017c32:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8017c34:	191b      	adds	r3, r3, r4
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 8017c36:	2a00      	cmp	r2, #0
 8017c38:	d03b      	beq.n	8017cb2 <_ux_device_class_storage_mode_sense+0xc6>
 8017c3a:	2f08      	cmp	r7, #8
 8017c3c:	d001      	beq.n	8017c42 <_ux_device_class_storage_mode_sense+0x56>
        (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE ||
 8017c3e:	2f3f      	cmp	r7, #63	@ 0x3f
 8017c40:	d143      	bne.n	8017cca <_ux_device_class_storage_mode_sense+0xde>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL))
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_CACHE_LENGTH;

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 8017c42:	2208      	movs	r2, #8
        /* Store the length of the page data.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_PAGE_LENGTH;

        /* Set the Write Cache Enabled (WCE) bit.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 8017c44:	7899      	ldrb	r1, [r3, #2]
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 8017c46:	701a      	strb	r2, [r3, #0]
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
 8017c48:	320a      	adds	r2, #10
 8017c4a:	705a      	strb	r2, [r3, #1]
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 8017c4c:	3a0e      	subs	r2, #14
 8017c4e:	430a      	orrs	r2, r1
 8017c50:	709a      	strb	r2, [r3, #2]
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAG_WCE;

        mode_data_length += page_length;
 8017c52:	3414      	adds	r4, #20
        page_pointer += page_length;
 8017c54:	3314      	adds	r3, #20
    }

    /* Informational Exceptions Control mode page.  */
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8017c56:	2f3f      	cmp	r7, #63	@ 0x3f
 8017c58:	d02d      	beq.n	8017cb6 <_ux_device_class_storage_mode_sense+0xca>

        mode_data_length += page_length;
    }

    /* Put the payload length in the header.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8017c5a:	9b03      	ldr	r3, [sp, #12]
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 8017c5c:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8017c5e:	2b1a      	cmp	r3, #26
 8017c60:	d12f      	bne.n	8017cc2 <_ux_device_class_storage_mode_sense+0xd6>
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 8017c62:	7004      	strb	r4, [r0, #0]
    else
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);

    /* Store the write protection flag.  */
    *(transfer_request -> ux_slave_transfer_request_data_pointer + flags_index) = read_only_flag;
 8017c64:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8017c66:	9a02      	ldr	r2, [sp, #8]
 8017c68:	9904      	ldr	r1, [sp, #16]
 8017c6a:	5499      	strb	r1, [r3, r2]

#if defined(UX_DEVICE_STANDALONE)
    // FIXME: set sense mode is 0 if not hid alway reset.
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length);
 8017c6c:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017c6e:	9a01      	ldr	r2, [sp, #4]
 8017c70:	2100      	movs	r1, #0
 8017c72:	f7ff f9c7 	bl	8017004 <_ux_utility_memory_set>
    /* Next: Transfer (DATA).  */
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017c76:	002b      	movs	r3, r5
 8017c78:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;

    storage -> ux_device_class_storage_transfer = transfer_request;
    storage -> ux_device_class_storage_device_length = mode_data_length;
    storage -> ux_device_class_storage_data_length = mode_data_length;
    storage -> ux_device_class_storage_data_count = 0;
 8017c7a:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017c7c:	337f      	adds	r3, #127	@ 0x7f
 8017c7e:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017c80:	3b02      	subs	r3, #2
 8017c82:	3a1e      	subs	r2, #30
 8017c84:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017c86:	9a05      	ldr	r2, [sp, #20]
 8017c88:	330b      	adds	r3, #11
 8017c8a:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length = mode_data_length;
 8017c8c:	605c      	str	r4, [r3, #4]
    storage -> ux_device_class_storage_data_length = mode_data_length;
 8017c8e:	60dc      	str	r4, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 8017c90:	6118      	str	r0, [r3, #16]
    /* Send a payload with the response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, mode_sense_reply_length, mode_sense_reply_length); 
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017c92:	6568      	str	r0, [r5, #84]	@ 0x54
    status = UX_SUCCESS;

    /* Return completion status.  */
    return(status);
}
 8017c94:	b007      	add	sp, #28
 8017c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 8017c98:	3007      	adds	r0, #7
 8017c9a:	f7ff f9bf 	bl	801701c <_ux_utility_short_get_big_endian>
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017c9e:	2380      	movs	r3, #128	@ 0x80
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 8017ca0:	9001      	str	r0, [sp, #4]
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017ca2:	015b      	lsls	r3, r3, #5
 8017ca4:	4298      	cmp	r0, r3
 8017ca6:	d900      	bls.n	8017caa <_ux_device_class_storage_mode_sense+0xbe>
 8017ca8:	9301      	str	r3, [sp, #4]
 8017caa:	2303      	movs	r3, #3
 8017cac:	2408      	movs	r4, #8
 8017cae:	9302      	str	r3, [sp, #8]
 8017cb0:	e7af      	b.n	8017c12 <_ux_device_class_storage_mode_sense+0x26>
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8017cb2:	2f1c      	cmp	r7, #28
 8017cb4:	d1cf      	bne.n	8017c56 <_ux_device_class_storage_mode_sense+0x6a>
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC;
 8017cb6:	221c      	movs	r2, #28
 8017cb8:	701a      	strb	r2, [r3, #0]
        *(page_pointer + 1) = UX_SLAVE_CLASS_STORAGE_IEC_MODE_PAGE_PAGE_LENGTH;
 8017cba:	3a12      	subs	r2, #18
 8017cbc:	705a      	strb	r2, [r3, #1]
        mode_data_length += page_length;
 8017cbe:	340c      	adds	r4, #12
 8017cc0:	e7cb      	b.n	8017c5a <_ux_device_class_storage_mode_sense+0x6e>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);
 8017cc2:	b2a1      	uxth	r1, r4
 8017cc4:	f7ff f9b1 	bl	801702a <_ux_utility_short_put_big_endian>
 8017cc8:	e7cc      	b.n	8017c64 <_ux_device_class_storage_mode_sense+0x78>
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8017cca:	2f1c      	cmp	r7, #28
 8017ccc:	d0f3      	beq.n	8017cb6 <_ux_device_class_storage_mode_sense+0xca>
 8017cce:	e7c4      	b.n	8017c5a <_ux_device_class_storage_mode_sense+0x6e>

08017cd0 <_ux_device_class_storage_prevent_allow_media_removal>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_prevent_allow_media_removal(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017cd0:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_PREVENT_ALLOW_MEDIA_REMOVAL, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017cd2:	2000      	movs	r0, #0
 8017cd4:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8017cd6:	4770      	bx	lr

08017cd8 <_ux_device_class_storage_read>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 8017cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cda:	b087      	sub	sp, #28
 8017cdc:	ab0c      	add	r3, sp, #48	@ 0x30
 8017cde:	cb20      	ldmia	r3!, {r5}
 8017ce0:	0004      	movs	r4, r0


    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 8017ce2:	1ca8      	adds	r0, r5, #2
{
 8017ce4:	781f      	ldrb	r7, [r3, #0]
 8017ce6:	9100      	str	r1, [sp, #0]
 8017ce8:	9203      	str	r2, [sp, #12]
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 8017cea:	f7ff f845 	bl	8016d78 <_ux_utility_long_get_big_endian>
 8017cee:	9002      	str	r0, [sp, #8]

    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.  */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_READ16)
 8017cf0:	2f28      	cmp	r7, #40	@ 0x28
 8017cf2:	d127      	bne.n	8017d44 <_ux_device_class_storage_read+0x6c>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_16);
 8017cf4:	1de8      	adds	r0, r5, #7
 8017cf6:	f7ff f991 	bl	801701c <_ux_utility_short_get_big_endian>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8017cfa:	2338      	movs	r3, #56	@ 0x38
 8017cfc:	9d00      	ldr	r5, [sp, #0]
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 8017cfe:	0007      	movs	r7, r0
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8017d00:	435d      	muls	r5, r3
 8017d02:	1962      	adds	r2, r4, r5
 8017d04:	6916      	ldr	r6, [r2, #16]
 8017d06:	9201      	str	r2, [sp, #4]

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017d08:	2201      	movs	r2, #1
 8017d0a:	6562      	str	r2, [r4, #84]	@ 0x54

#if defined(UX_DEVICE_STANDALONE)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017d0c:	9a00      	ldr	r2, [sp, #0]
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8017d0e:	4346      	muls	r6, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017d10:	3201      	adds	r2, #1
 8017d12:	4353      	muls	r3, r2
 8017d14:	18e3      	adds	r3, r4, r3
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	9a01      	ldr	r2, [sp, #4]
 8017d1a:	001d      	movs	r5, r3
 8017d1c:	6a12      	ldr	r2, [r2, #32]
 8017d1e:	ab05      	add	r3, sp, #20
 8017d20:	0020      	movs	r0, r4
 8017d22:	9900      	ldr	r1, [sp, #0]
 8017d24:	47a8      	blx	r5
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017d26:	9b05      	ldr	r3, [sp, #20]
 8017d28:	9a01      	ldr	r2, [sp, #4]
 8017d2a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Update the request to use.  */
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017d2c:	0022      	movs	r2, r4
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017d2e:	9b03      	ldr	r3, [sp, #12]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017d30:	3288      	adds	r2, #136	@ 0x88
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017d32:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017d34:	6013      	str	r3, [r2, #0]

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8017d36:	2800      	cmp	r0, #0
 8017d38:	d008      	beq.n	8017d4c <_ux_device_class_storage_read+0x74>

        /* Update residue.  */
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;

        /* Return an error.  */
        return(UX_ERROR);
 8017d3a:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 8017d3c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017d3e:	6523      	str	r3, [r4, #80]	@ 0x50
    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8017d40:	b007      	add	sp, #28
 8017d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 8017d44:	1da8      	adds	r0, r5, #6
 8017d46:	f7ff f817 	bl	8016d78 <_ux_utility_long_get_big_endian>
 8017d4a:	e7d6      	b.n	8017cfa <_ux_device_class_storage_read+0x22>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017d4c:	0023      	movs	r3, r4
 8017d4e:	2205      	movs	r2, #5
 8017d50:	337d      	adds	r3, #125	@ 0x7d
 8017d52:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8017d54:	4a0b      	ldr	r2, [pc, #44]	@ (8017d84 <_ux_device_class_storage_read+0xac>)
 8017d56:	3301      	adds	r3, #1
 8017d58:	801a      	strh	r2, [r3, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 8017d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8017d88 <_ux_device_class_storage_read+0xb0>)
    storage -> ux_device_class_storage_data_length =
 8017d5c:	0022      	movs	r2, r4
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 8017d5e:	67a3      	str	r3, [r4, #120]	@ 0x78
    storage -> ux_device_class_storage_device_length = total_length;
 8017d60:	0023      	movs	r3, r4
 8017d62:	338c      	adds	r3, #140	@ 0x8c
 8017d64:	601e      	str	r6, [r3, #0]
        UX_MIN(total_length , storage -> ux_slave_class_storage_host_length);
 8017d66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    storage -> ux_device_class_storage_data_length =
 8017d68:	3294      	adds	r2, #148	@ 0x94
        UX_MIN(total_length , storage -> ux_slave_class_storage_host_length);
 8017d6a:	42b3      	cmp	r3, r6
 8017d6c:	d900      	bls.n	8017d70 <_ux_device_class_storage_read+0x98>
 8017d6e:	0033      	movs	r3, r6
    storage -> ux_device_class_storage_data_length =
 8017d70:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8017d72:	0022      	movs	r2, r4
 8017d74:	2300      	movs	r3, #0
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017d76:	9902      	ldr	r1, [sp, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8017d78:	3298      	adds	r2, #152	@ 0x98
 8017d7a:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017d7c:	60d1      	str	r1, [r2, #12]
    storage -> ux_device_class_storage_cmd_n_lb = total_number_blocks;
 8017d7e:	6117      	str	r7, [r2, #16]
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017d80:	6563      	str	r3, [r4, #84]	@ 0x54
    return(UX_SUCCESS);
 8017d82:	e7dd      	b.n	8017d40 <_ux_device_class_storage_read+0x68>
 8017d84:	00002601 	.word	0x00002601
 8017d88:	01010101 	.word	0x01010101

08017d8c <_ux_device_class_storage_read_capacity>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017d8c:	2338      	movs	r3, #56	@ 0x38
{
 8017d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017d90:	001e      	movs	r6, r3
{
 8017d92:	0017      	movs	r7, r2
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017d94:	1c4a      	adds	r2, r1, #1
 8017d96:	434e      	muls	r6, r1
 8017d98:	4353      	muls	r3, r2
{
 8017d9a:	b085      	sub	sp, #20
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017d9c:	1986      	adds	r6, r0, r6
 8017d9e:	18c3      	adds	r3, r0, r3
 8017da0:	685d      	ldr	r5, [r3, #4]
 8017da2:	6a32      	ldr	r2, [r6, #32]
 8017da4:	ab03      	add	r3, sp, #12
{
 8017da6:	0004      	movs	r4, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017da8:	47a8      	blx	r5
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017daa:	9b03      	ldr	r3, [sp, #12]
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017dac:	1e05      	subs	r5, r0, #0
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017dae:	6273      	str	r3, [r6, #36]	@ 0x24

    /* Check the status for error.  */
    if (status != UX_SUCCESS)
 8017db0:	d123      	bne.n	8017dfa <_ux_device_class_storage_read_capacity+0x6e>
    
        /* Obtain the pointer to the transfer request.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

        /* Obtain read capacity response buffer.  */
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    
        /* Ensure it is cleaned.  */
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 8017db4:	2208      	movs	r2, #8
 8017db6:	0001      	movs	r1, r0
 8017db8:	0018      	movs	r0, r3
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017dba:	9301      	str	r3, [sp, #4]
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 8017dbc:	f7ff f922 	bl	8017004 <_ux_utility_memory_set>
    
        /* Insert the last LBA address in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LAST_LBA],
 8017dc0:	68f1      	ldr	r1, [r6, #12]
 8017dc2:	9801      	ldr	r0, [sp, #4]
 8017dc4:	f7fe ffec 	bl	8016da0 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);
    
        /* Insert the block length in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_BLOCK_SIZE],
 8017dc8:	9b01      	ldr	r3, [sp, #4]
 8017dca:	6931      	ldr	r1, [r6, #16]
 8017dcc:	1d18      	adds	r0, r3, #4
 8017dce:	f7fe ffe7 	bl	8016da0 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);
    
#if defined(UX_DEVICE_STANDALONE)

        /* Next: Transfer (DATA).  */
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017dd2:	0023      	movs	r3, r4
 8017dd4:	2223      	movs	r2, #35	@ 0x23
 8017dd6:	337f      	adds	r3, #127	@ 0x7f
 8017dd8:	701a      	strb	r2, [r3, #0]
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017dda:	3a1e      	subs	r2, #30
 8017ddc:	3b02      	subs	r3, #2
 8017dde:	701a      	strb	r2, [r3, #0]
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017de0:	003a      	movs	r2, r7

        storage -> ux_device_class_storage_transfer = transfer_request;
 8017de2:	330b      	adds	r3, #11
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017de4:	3220      	adds	r2, #32
        storage -> ux_device_class_storage_transfer = transfer_request;
 8017de6:	601a      	str	r2, [r3, #0]
        storage -> ux_device_class_storage_device_length =
 8017de8:	2208      	movs	r2, #8
                        UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH;
        storage -> ux_device_class_storage_data_length =
                        UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH;
        storage -> ux_device_class_storage_data_count = 0;
 8017dea:	611d      	str	r5, [r3, #16]
        storage -> ux_device_class_storage_device_length =
 8017dec:	605a      	str	r2, [r3, #4]
        storage -> ux_device_class_storage_data_length =
 8017dee:	60da      	str	r2, [r3, #12]
        UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 8017df0:	653d      	str	r5, [r7, #80]	@ 0x50
        status = UX_SUCCESS;
    }
        
    /* Return completion status.  */
    return(status);
}
 8017df2:	2000      	movs	r0, #0
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017df4:	6565      	str	r5, [r4, #84]	@ 0x54
}
 8017df6:	b005      	add	sp, #20
 8017df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dfa:	2501      	movs	r5, #1
 8017dfc:	e7f9      	b.n	8017df2 <_ux_device_class_storage_read_capacity+0x66>

08017dfe <_ux_device_class_storage_read_format_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_format_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get read format capacity response buffer.  */
    read_format_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017e00:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
{
 8017e02:	0004      	movs	r4, r0
 8017e04:	0016      	movs	r6, r2

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017e06:	0038      	movs	r0, r7
 8017e08:	220c      	movs	r2, #12
{
 8017e0a:	000d      	movs	r5, r1
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	f7ff f8f9 	bl	8017004 <_ux_utility_memory_set>

    /* Insert the size of the response block.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_SIZE], 8);
 8017e12:	0038      	movs	r0, r7
 8017e14:	2108      	movs	r1, #8
 8017e16:	f7fe ffc3 	bl	8016da0 <_ux_utility_long_put_big_endian>

    /* Insert the last LBA address in the response.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LAST_LBA],
 8017e1a:	2338      	movs	r3, #56	@ 0x38
 8017e1c:	435d      	muls	r5, r3
 8017e1e:	1965      	adds	r5, r4, r5
 8017e20:	68e9      	ldr	r1, [r5, #12]
 8017e22:	1d38      	adds	r0, r7, #4
 8017e24:	f7fe ffbc 	bl	8016da0 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);

    /* Insert the block length in the response.  This is in 3 bytes. */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_BLOCK_SIZE],
 8017e28:	0038      	movs	r0, r7
 8017e2a:	6929      	ldr	r1, [r5, #16]
 8017e2c:	3008      	adds	r0, #8
 8017e2e:	f7fe ffb7 	bl	8016da0 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);

    /* Insert the response code : always 2.  */
    read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_DESC_CODE] =  2;    
 8017e32:	2302      	movs	r3, #2
 8017e34:	723b      	strb	r3, [r7, #8]

#if defined(UX_DEVICE_STANDALONE)

    /* Next: Transfer (DATA).  */
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017e36:	0023      	movs	r3, r4
 8017e38:	2223      	movs	r2, #35	@ 0x23
 8017e3a:	337f      	adds	r3, #127	@ 0x7f
 8017e3c:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017e3e:	3b02      	subs	r3, #2
 8017e40:	3a1e      	subs	r2, #30
 8017e42:	701a      	strb	r2, [r3, #0]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017e44:	0032      	movs	r2, r6

    storage -> ux_device_class_storage_transfer = transfer_request;
 8017e46:	330b      	adds	r3, #11
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017e48:	3220      	adds	r2, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017e4a:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length =
 8017e4c:	0022      	movs	r2, r4
 8017e4e:	230c      	movs	r3, #12
 8017e50:	328c      	adds	r2, #140	@ 0x8c
 8017e52:	6013      	str	r3, [r2, #0]
                    UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH;
    storage -> ux_device_class_storage_data_length =
 8017e54:	6093      	str	r3, [r2, #8]
                    UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH;
    storage -> ux_device_class_storage_data_count = 0;
 8017e56:	0023      	movs	r3, r4
 8017e58:	2000      	movs	r0, #0
 8017e5a:	3398      	adds	r3, #152	@ 0x98
 8017e5c:	6018      	str	r0, [r3, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 8017e5e:	6530      	str	r0, [r6, #80]	@ 0x50
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH,
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017e60:	6560      	str	r0, [r4, #84]	@ 0x54
    status = UX_SUCCESS;

    /* Return completion status.  */
    return(status);
}
 8017e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e64 <_ux_device_class_storage_request_sense>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_request_sense(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get length.  */
    sense_length = storage -> ux_slave_class_storage_host_length;
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 8017e66:	6c47      	ldr	r7, [r0, #68]	@ 0x44
{
 8017e68:	0004      	movs	r4, r0
 8017e6a:	0015      	movs	r5, r2
 8017e6c:	9101      	str	r1, [sp, #4]
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 8017e6e:	2f12      	cmp	r7, #18
 8017e70:	d900      	bls.n	8017e74 <_ux_device_class_storage_request_sense+0x10>
 8017e72:	2712      	movs	r7, #18
        sense_length = UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH;

    /* Obtain sense buffer.  */
    sense_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017e74:	6aee      	ldr	r6, [r5, #44]	@ 0x2c

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(sense_buffer, 0, sense_length); /* Use case of memset is verified. */
 8017e76:	003a      	movs	r2, r7
 8017e78:	0030      	movs	r0, r6
 8017e7a:	2100      	movs	r1, #0
 8017e7c:	f7ff f8c2 	bl	8017004 <_ux_utility_memory_set>
    
    /* Initialize the response buffer with the error code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 8017e80:	2370      	movs	r3, #112	@ 0x70
                    UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE_VALUE;

    /* Extract sense key, code, qualifier.  */
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8017e82:	9a01      	ldr	r2, [sp, #4]
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 8017e84:	7033      	strb	r3, [r6, #0]
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8017e86:	3b38      	subs	r3, #56	@ 0x38
 8017e88:	4353      	muls	r3, r2
 8017e8a:	18e3      	adds	r3, r4, r3
 8017e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;

    storage -> ux_device_class_storage_transfer = transfer_request;
    storage -> ux_device_class_storage_device_length = sense_length;
    storage -> ux_device_class_storage_data_length = sense_length;
    storage -> ux_device_class_storage_data_count = 0;
 8017e8e:	2000      	movs	r0, #0
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8017e90:	70b3      	strb	r3, [r6, #2]
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 8017e92:	0a1a      	lsrs	r2, r3, #8
    qualifier = UX_DEVICE_CLASS_STORAGE_SENSE_QUALIFIER(storage -> ux_slave_class_storage_lun[lun].
 8017e94:	0c1b      	lsrs	r3, r3, #16
 8017e96:	7373      	strb	r3, [r6, #13]
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ADD_LENGTH] =  10;
 8017e98:	230a      	movs	r3, #10
 8017e9a:	71f3      	strb	r3, [r6, #7]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017e9c:	0023      	movs	r3, r4
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 8017e9e:	7332      	strb	r2, [r6, #12]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017ea0:	2223      	movs	r2, #35	@ 0x23
 8017ea2:	337f      	adds	r3, #127	@ 0x7f
 8017ea4:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017ea6:	3b02      	subs	r3, #2
 8017ea8:	3a1e      	subs	r2, #30
 8017eaa:	701a      	strb	r2, [r3, #0]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017eac:	3520      	adds	r5, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017eae:	330b      	adds	r3, #11
    storage -> ux_device_class_storage_data_count = 0;
 8017eb0:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017eb2:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_device_length = sense_length;
 8017eb4:	605f      	str	r7, [r3, #4]
    storage -> ux_device_class_storage_data_length = sense_length;
 8017eb6:	60df      	str	r7, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 8017eb8:	6020      	str	r0, [r4, #0]
    }
#endif

    /* Return completion status.  */    
    return(status);
}
 8017eba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017ebc <_ux_device_class_storage_start_stop>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_start_stop(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017ebc:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_START_STOP, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017ebe:	2000      	movs	r0, #0
 8017ec0:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8017ec2:	4770      	bx	lr

08017ec4 <_ux_device_class_storage_synchronize_cache>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_synchronize_cache(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                                 UX_SLAVE_ENDPOINT *endpoint_in,
                                                 UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb, UCHAR scsi_command)
{
 8017ec4:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* By default status is passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Is there not an implementation?  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017ec6:	2738      	movs	r7, #56	@ 0x38
 8017ec8:	003d      	movs	r5, r7
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017eca:	2300      	movs	r3, #0
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017ecc:	434d      	muls	r5, r1
 8017ece:	1945      	adds	r5, r0, r5
{
 8017ed0:	b085      	sub	sp, #20
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017ed2:	6543      	str	r3, [r0, #84]	@ 0x54
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017ed4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
{
 8017ed6:	0004      	movs	r4, r0
 8017ed8:	000e      	movs	r6, r1
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d02c      	beq.n	8017f38 <_ux_device_class_storage_synchronize_cache+0x74>
        /* Return success.  */
        return(UX_SUCCESS);
    }

    /* Get the LBA and number of blocks from the CBWCB in 16 bits.  */
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 8017ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ee0:	1c98      	adds	r0, r3, #2
 8017ee2:	f7fe ff49 	bl	8016d78 <_ux_utility_long_get_big_endian>
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 8017ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 8017ee8:	9001      	str	r0, [sp, #4]
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 8017eea:	1dd8      	adds	r0, r3, #7
 8017eec:	f7ff f896 	bl	801701c <_ux_utility_short_get_big_endian>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_SYNCHRONIZE_CACHE, storage, lun, lba, number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8017ef0:	1c73      	adds	r3, r6, #1
 8017ef2:	437b      	muls	r3, r7
 8017ef4:	18e3      	adds	r3, r4, r3
 8017ef6:	685f      	ldr	r7, [r3, #4]
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 8017ef8:	9000      	str	r0, [sp, #0]
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8017efa:	ab03      	add	r3, sp, #12
 8017efc:	0031      	movs	r1, r6
 8017efe:	0020      	movs	r0, r4
 8017f00:	6a2a      	ldr	r2, [r5, #32]
 8017f02:	47b8      	blx	r7
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017f04:	9b03      	ldr	r3, [sp, #12]
 8017f06:	626b      	str	r3, [r5, #36]	@ 0x24

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8017f08:	0023      	movs	r3, r4
 8017f0a:	337d      	adds	r3, #125	@ 0x7d
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	d006      	beq.n	8017f1e <_ux_device_class_storage_synchronize_cache+0x5a>
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_in);
#else
        UX_PARAMETER_NOT_USED(endpoint_in);
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
 8017f10:	2202      	movs	r2, #2
 8017f12:	701a      	strb	r2, [r3, #0]
#endif

        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017f14:	2301      	movs	r3, #1

        /* We are done here.  */
        return(UX_ERROR);
 8017f16:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017f18:	6563      	str	r3, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 8017f1a:	b005      	add	sp, #20
 8017f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_DISK_OP;
 8017f1e:	2206      	movs	r2, #6
 8017f20:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8017f22:	0023      	movs	r3, r4
 8017f24:	4a05      	ldr	r2, [pc, #20]	@ (8017f3c <_ux_device_class_storage_synchronize_cache+0x78>)
 8017f26:	337e      	adds	r3, #126	@ 0x7e
 8017f28:	801a      	strh	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017f2a:	9a01      	ldr	r2, [sp, #4]
 8017f2c:	3326      	adds	r3, #38	@ 0x26
 8017f2e:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_n_lb = number_blocks;
 8017f30:	466b      	mov	r3, sp
 8017f32:	881b      	ldrh	r3, [r3, #0]
 8017f34:	34a8      	adds	r4, #168	@ 0xa8
 8017f36:	6023      	str	r3, [r4, #0]
        return(UX_SUCCESS);
 8017f38:	2000      	movs	r0, #0
 8017f3a:	e7ee      	b.n	8017f1a <_ux_device_class_storage_synchronize_cache+0x56>
 8017f3c:	00002601 	.word	0x00002601

08017f40 <_ux_device_class_storage_tasks_run>:
/*                                            improved internal logic,    */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_storage_tasks_run(VOID *instance)
{
 8017f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f42:	0004      	movs	r4, r0
UINT                        status;
INT                         immediate_state = UX_TRUE;


    /* Get pointer to the device.  */
    device = &_ux_system_slave -> ux_system_slave_device;
 8017f44:	4bb9      	ldr	r3, [pc, #740]	@ (801822c <_ux_device_class_storage_tasks_run+0x2ec>)
{
 8017f46:	b085      	sub	sp, #20
    device = &_ux_system_slave -> ux_system_slave_device;
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	9302      	str	r3, [sp, #8]
    /* Run states once.  */
    while(immediate_state)
    {

        /* General check for MSC ready.  */
        if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED ||
 8017f4c:	0026      	movs	r6, r4
 8017f4e:	9b02      	ldr	r3, [sp, #8]
 8017f50:	367f      	adds	r6, #127	@ 0x7f
 8017f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f54:	2b03      	cmp	r3, #3
 8017f56:	d108      	bne.n	8017f6a <_ux_device_class_storage_tasks_run+0x2a>
            storage -> ux_device_class_storage_ep_in == UX_NULL ||
 8017f58:	0027      	movs	r7, r4
 8017f5a:	3708      	adds	r7, #8
 8017f5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
        if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED ||
 8017f5e:	2a00      	cmp	r2, #0
 8017f60:	d003      	beq.n	8017f6a <_ux_device_class_storage_tasks_run+0x2a>
            storage -> ux_device_class_storage_ep_out == UX_NULL)
 8017f62:	1d25      	adds	r5, r4, #4
 8017f64:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
            storage -> ux_device_class_storage_ep_in == UX_NULL ||
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d110      	bne.n	8017f8c <_ux_device_class_storage_tasks_run+0x4c>
        {
            storage -> ux_device_class_storage_state = UX_STATE_RESET;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	7033      	strb	r3, [r6, #0]
{
 8017f6e:	2701      	movs	r7, #1
    /* Run states once.  */
    while(immediate_state)
    {

        /* Update state.  */
        state = storage -> ux_device_class_storage_disk_state;
 8017f70:	0025      	movs	r5, r4
 8017f72:	357e      	adds	r5, #126	@ 0x7e
        switch(state)
 8017f74:	7828      	ldrb	r0, [r5, #0]
 8017f76:	3801      	subs	r0, #1
 8017f78:	2804      	cmp	r0, #4
 8017f7a:	d900      	bls.n	8017f7e <_ux_device_class_storage_tasks_run+0x3e>
 8017f7c:	e303      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
 8017f7e:	f7e8 f8e9 	bl	8000154 <__gnu_thumb1_case_uhi>
 8017f82:	02a7      	.short	0x02a7
 8017f84:	031802c1 	.word	0x031802c1
 8017f88:	039a0302 	.word	0x039a0302
        state = storage -> ux_device_class_storage_state;
 8017f8c:	7830      	ldrb	r0, [r6, #0]
        switch(state)
 8017f8e:	2800      	cmp	r0, #0
 8017f90:	d00e      	beq.n	8017fb0 <_ux_device_class_storage_tasks_run+0x70>
 8017f92:	3821      	subs	r0, #33	@ 0x21
 8017f94:	b2c1      	uxtb	r1, r0
 8017f96:	2906      	cmp	r1, #6
 8017f98:	d8e9      	bhi.n	8017f6e <_ux_device_class_storage_tasks_run+0x2e>
 8017f9a:	2806      	cmp	r0, #6
 8017f9c:	d8e7      	bhi.n	8017f6e <_ux_device_class_storage_tasks_run+0x2e>
 8017f9e:	f7e8 f8cf 	bl	8000140 <__gnu_thumb1_case_shi>
 8017fa2:	0019      	.short	0x0019
 8017fa4:	0028001f 	.word	0x0028001f
 8017fa8:	00970053 	.word	0x00970053
 8017fac:	0275ffe6 	.word	0x0275ffe6
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 8017fb0:	0022      	movs	r2, r4
 8017fb2:	2101      	movs	r1, #1
 8017fb4:	327d      	adds	r2, #125	@ 0x7d
 8017fb6:	7011      	strb	r1, [r2, #0]
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8017fb8:	3213      	adds	r2, #19
 8017fba:	6010      	str	r0, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017fbc:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_transfer = transfer;
 8017fbe:	0021      	movs	r1, r4
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017fc0:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8017fc2:	8a1a      	ldrh	r2, [r3, #16]
    storage -> ux_device_class_storage_transfer = transfer;
 8017fc4:	3188      	adds	r1, #136	@ 0x88
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 8017fc6:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 8017fc8:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 8017fca:	0023      	movs	r3, r4
 8017fcc:	3394      	adds	r3, #148	@ 0x94
 8017fce:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8017fd0:	6058      	str	r0, [r3, #4]
 8017fd2:	e7bb      	b.n	8017f4c <_ux_device_class_storage_tasks_run+0xc>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8017fd4:	0010      	movs	r0, r2
 8017fd6:	f7fe fb4b 	bl	8016670 <_ux_device_stack_endpoint_stall>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 8017fda:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8017fdc:	f7fe fb48 	bl	8016670 <_ux_device_stack_endpoint_stall>
    if ((UCHAR)storage -> ux_slave_class_storage_csw_status !=
 8017fe0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017fe2:	b2db      	uxtb	r3, r3
 8017fe4:	2b02      	cmp	r3, #2
 8017fe6:	d100      	bne.n	8017fea <_ux_device_class_storage_tasks_run+0xaa>
 8017fe8:	e09c      	b.n	8018124 <_ux_device_class_storage_tasks_run+0x1e4>
        storage -> ux_device_class_storage_state = UX_STATE_RESET;
 8017fea:	2300      	movs	r3, #0
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 8017fec:	7033      	strb	r3, [r6, #0]
            return _ux_device_class_storage_reset_wait(storage);
 8017fee:	2705      	movs	r7, #5
 8017ff0:	e7be      	b.n	8017f70 <_ux_device_class_storage_tasks_run+0x30>
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8017ff2:	0023      	movs	r3, r4
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017ff4:	2180      	movs	r1, #128	@ 0x80
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8017ff6:	3394      	adds	r3, #148	@ 0x94
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	3304      	adds	r3, #4
 8017ffc:	681b      	ldr	r3, [r3, #0]
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017ffe:	0149      	lsls	r1, r1, #5
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8018000:	1ad5      	subs	r5, r2, r3
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8018002:	428d      	cmp	r5, r1
 8018004:	d900      	bls.n	8018008 <_ux_device_class_storage_tasks_run+0xc8>
 8018006:	000d      	movs	r5, r1
    if (storage -> ux_device_class_storage_data_buffer && device_length &&
 8018008:	0021      	movs	r1, r4
 801800a:	0020      	movs	r0, r4
 801800c:	3190      	adds	r1, #144	@ 0x90
 801800e:	6809      	ldr	r1, [r1, #0]
 8018010:	3088      	adds	r0, #136	@ 0x88
 8018012:	9002      	str	r0, [sp, #8]
 8018014:	2900      	cmp	r1, #0
 8018016:	d00c      	beq.n	8018032 <_ux_device_class_storage_tasks_run+0xf2>
 8018018:	429a      	cmp	r2, r3
 801801a:	d00a      	beq.n	8018032 <_ux_device_class_storage_tasks_run+0xf2>
        storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_READ)
 801801c:	0022      	movs	r2, r4
 801801e:	327d      	adds	r2, #125	@ 0x7d
    if (storage -> ux_device_class_storage_data_buffer && device_length &&
 8018020:	7812      	ldrb	r2, [r2, #0]
 8018022:	2a05      	cmp	r2, #5
 8018024:	d105      	bne.n	8018032 <_ux_device_class_storage_tasks_run+0xf2>
                                storage -> ux_device_class_storage_data_buffer +
 8018026:	18c9      	adds	r1, r1, r3
        _ux_utility_memory_copy(storage -> ux_device_class_storage_transfer ->
 8018028:	6803      	ldr	r3, [r0, #0]
 801802a:	002a      	movs	r2, r5
 801802c:	68d8      	ldr	r0, [r3, #12]
 801802e:	f7fe ffb7 	bl	8016fa0 <_ux_utility_memory_copy>
    storage -> ux_device_class_storage_trans_device_length = device_length;
 8018032:	0023      	movs	r3, r4
 8018034:	33a0      	adds	r3, #160	@ 0xa0
 8018036:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_trans_host_length = host_length;
 8018038:	3b04      	subs	r3, #4
 801803a:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_WAIT;
 801803c:	2324      	movs	r3, #36	@ 0x24
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 801803e:	2200      	movs	r2, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_WAIT;
 8018040:	7033      	strb	r3, [r6, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 8018042:	9b02      	ldr	r3, [sp, #8]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	631a      	str	r2, [r3, #48]	@ 0x30
    return _ux_device_stack_transfer_run(storage -> ux_device_class_storage_transfer,
 8018048:	0025      	movs	r5, r4
 801804a:	0023      	movs	r3, r4
 801804c:	3588      	adds	r5, #136	@ 0x88
 801804e:	339c      	adds	r3, #156	@ 0x9c
 8018050:	681a      	ldr	r2, [r3, #0]
 8018052:	6859      	ldr	r1, [r3, #4]
 8018054:	6828      	ldr	r0, [r5, #0]
 8018056:	f7fe fd95 	bl	8016b84 <_ux_device_stack_transfer_run>
            if (status < UX_STATE_ERROR)
 801805a:	0023      	movs	r3, r4
 801805c:	337e      	adds	r3, #126	@ 0x7e
 801805e:	9302      	str	r3, [sp, #8]
 8018060:	2802      	cmp	r0, #2
 8018062:	d809      	bhi.n	8018078 <_ux_device_class_storage_tasks_run+0x138>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_IDLE;
 8018064:	2320      	movs	r3, #32
 8018066:	7033      	strb	r3, [r6, #0]
                if (storage -> ux_device_class_storage_disk_state !=
 8018068:	9b02      	ldr	r3, [sp, #8]
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d0be      	beq.n	8017fee <_ux_device_class_storage_tasks_run+0xae>
                    storage -> ux_device_class_storage_disk_state =
 8018070:	2305      	movs	r3, #5
 8018072:	9a02      	ldr	r2, [sp, #8]
 8018074:	7013      	strb	r3, [r2, #0]
 8018076:	e7ba      	b.n	8017fee <_ux_device_class_storage_tasks_run+0xae>
            if (status == UX_STATE_ERROR)
 8018078:	2803      	cmp	r0, #3
 801807a:	d11e      	bne.n	80180ba <_ux_device_class_storage_tasks_run+0x17a>
UX_SLAVE_ENDPOINT *endp = trans -> ux_slave_transfer_request_endpoint;
 801807c:	682b      	ldr	r3, [r5, #0]
    _ux_device_stack_endpoint_stall(endp);
 801807e:	6898      	ldr	r0, [r3, #8]
 8018080:	f7fe faf6 	bl	8016670 <_ux_device_stack_endpoint_stall>
                if (storage -> ux_device_class_storage_disk_state !=
 8018084:	9b02      	ldr	r3, [sp, #8]
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d002      	beq.n	8018092 <_ux_device_class_storage_tasks_run+0x152>
                    storage -> ux_device_class_storage_disk_state =
 801808c:	2305      	movs	r3, #5
 801808e:	9a02      	ldr	r2, [sp, #8]
 8018090:	7013      	strb	r3, [r2, #0]
                        storage -> ux_slave_class_storage_host_length -
 8018092:	0022      	movs	r2, r4
 8018094:	3298      	adds	r2, #152	@ 0x98
 8018096:	6812      	ldr	r2, [r2, #0]
 8018098:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801809a:	1a9b      	subs	r3, r3, r2
                storage -> ux_slave_class_storage_csw_residue =
 801809c:	6523      	str	r3, [r4, #80]	@ 0x50
                    storage -> ux_slave_class_storage_cbw_lun].
 801809e:	0023      	movs	r3, r4
 80180a0:	3349      	adds	r3, #73	@ 0x49
 80180a2:	7819      	ldrb	r1, [r3, #0]
                        ux_slave_class_storage_request_sense_status =
 80180a4:	2338      	movs	r3, #56	@ 0x38
 80180a6:	434b      	muls	r3, r1
 80180a8:	4a61      	ldr	r2, [pc, #388]	@ (8018230 <_ux_device_class_storage_tasks_run+0x2f0>)
 80180aa:	18e3      	adds	r3, r4, r3
 80180ac:	625a      	str	r2, [r3, #36]	@ 0x24
                _ux_device_class_storage_csw_send(storage,
 80180ae:	2300      	movs	r3, #0
 80180b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
        _ux_device_class_storage_csw_send(storage,
 80180b2:	0020      	movs	r0, r4
 80180b4:	f7ff fc1c 	bl	80178f0 <_ux_device_class_storage_csw_send>
 80180b8:	e799      	b.n	8017fee <_ux_device_class_storage_tasks_run+0xae>
            if (status == UX_STATE_NEXT)
 80180ba:	2804      	cmp	r0, #4
 80180bc:	d197      	bne.n	8017fee <_ux_device_class_storage_tasks_run+0xae>
                storage -> ux_device_class_storage_data_count +=
 80180be:	0022      	movs	r2, r4
                        storage -> ux_device_class_storage_transfer ->
 80180c0:	682b      	ldr	r3, [r5, #0]
                storage -> ux_device_class_storage_data_count +=
 80180c2:	3298      	adds	r2, #152	@ 0x98
 80180c4:	699b      	ldr	r3, [r3, #24]
 80180c6:	6811      	ldr	r1, [r2, #0]
 80180c8:	185b      	adds	r3, r3, r1
 80180ca:	6013      	str	r3, [r2, #0]
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_NEXT;
 80180cc:	2325      	movs	r3, #37	@ 0x25
 80180ce:	e78d      	b.n	8017fec <_ux_device_class_storage_tasks_run+0xac>
            if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 80180d0:	0021      	movs	r1, r4
 80180d2:	317d      	adds	r1, #125	@ 0x7d
 80180d4:	9103      	str	r1, [sp, #12]
 80180d6:	7809      	ldrb	r1, [r1, #0]
 80180d8:	2901      	cmp	r1, #1
 80180da:	d000      	beq.n	80180de <_ux_device_class_storage_tasks_run+0x19e>
 80180dc:	e137      	b.n	801834e <_ux_device_class_storage_tasks_run+0x40e>
    cbw_trans = storage -> ux_device_class_storage_transfer;
 80180de:	0020      	movs	r0, r4
 80180e0:	3088      	adds	r0, #136	@ 0x88
 80180e2:	6802      	ldr	r2, [r0, #0]
    if (cbw_trans -> ux_slave_transfer_request_completion_code == UX_TRANSFER_STALLED)
 80180e4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80180e6:	2921      	cmp	r1, #33	@ 0x21
 80180e8:	d10d      	bne.n	8018106 <_ux_device_class_storage_tasks_run+0x1c6>
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 80180ea:	0022      	movs	r2, r4
 80180ec:	2100      	movs	r1, #0
 80180ee:	3290      	adds	r2, #144	@ 0x90
 80180f0:	6011      	str	r1, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 80180f2:	2223      	movs	r2, #35	@ 0x23
 80180f4:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80180f6:	8a1a      	ldrh	r2, [r3, #16]
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 80180f8:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 80180fa:	6003      	str	r3, [r0, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 80180fc:	0023      	movs	r3, r4
 80180fe:	3394      	adds	r3, #148	@ 0x94
 8018100:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8018102:	6059      	str	r1, [r3, #4]
}
 8018104:	e773      	b.n	8017fee <_ux_device_class_storage_tasks_run+0xae>
    cbw = cbw_trans -> ux_slave_transfer_request_data_pointer;
 8018106:	68d3      	ldr	r3, [r2, #12]
 8018108:	9302      	str	r3, [sp, #8]
    if (cbw_length != UX_SLAVE_CLASS_STORAGE_CBW_LENGTH)
 801810a:	6993      	ldr	r3, [r2, #24]
 801810c:	2b1f      	cmp	r3, #31
 801810e:	d00b      	beq.n	8018128 <_ux_device_class_storage_tasks_run+0x1e8>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8018110:	2302      	movs	r3, #2
 8018112:	6563      	str	r3, [r4, #84]	@ 0x54
    if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 8018114:	0025      	movs	r5, r4
 8018116:	357d      	adds	r5, #125	@ 0x7d
 8018118:	7829      	ldrb	r1, [r5, #0]
 801811a:	2901      	cmp	r1, #1
 801811c:	d000      	beq.n	8018120 <_ux_device_class_storage_tasks_run+0x1e0>
 801811e:	e0d1      	b.n	80182c4 <_ux_device_class_storage_tasks_run+0x384>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8018120:	2302      	movs	r3, #2
 8018122:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 8018124:	2321      	movs	r3, #33	@ 0x21
 8018126:	e761      	b.n	8017fec <_ux_device_class_storage_tasks_run+0xac>
    lun = *(cbw + UX_SLAVE_CLASS_STORAGE_CBW_LUN);
 8018128:	9b02      	ldr	r3, [sp, #8]
 801812a:	7b5d      	ldrb	r5, [r3, #13]
    storage -> ux_slave_class_storage_cbw_lun = lun;
 801812c:	0023      	movs	r3, r4
 801812e:	3349      	adds	r3, #73	@ 0x49
 8018130:	701d      	strb	r5, [r3, #0]
    storage -> ux_slave_class_storage_cbw_flags = *(cbw + UX_SLAVE_CLASS_STORAGE_CBW_FLAGS);
 8018132:	9b02      	ldr	r3, [sp, #8]
 8018134:	7b1a      	ldrb	r2, [r3, #12]
 8018136:	0023      	movs	r3, r4
 8018138:	3348      	adds	r3, #72	@ 0x48
 801813a:	701a      	strb	r2, [r3, #0]
                    _ux_utility_long_get(cbw + UX_SLAVE_CLASS_STORAGE_CBW_TAG);
 801813c:	9b02      	ldr	r3, [sp, #8]
 801813e:	1d18      	adds	r0, r3, #4
 8018140:	f7fe fe0f 	bl	8016d62 <_ux_utility_long_get>
    storage -> ux_slave_class_storage_scsi_tag =
 8018144:	64e0      	str	r0, [r4, #76]	@ 0x4c
    storage -> ux_slave_class_storage_host_length = _ux_utility_long_get(cbw + UX_SLAVE_CLASS_STORAGE_CBW_DATA_LENGTH);
 8018146:	9802      	ldr	r0, [sp, #8]
 8018148:	3008      	adds	r0, #8
 801814a:	f7fe fe0a 	bl	8016d62 <_ux_utility_long_get>
 801814e:	6460      	str	r0, [r4, #68]	@ 0x44
    storage -> ux_slave_class_storage_csw_residue = 0;
 8018150:	2000      	movs	r0, #0
    if (lun >= storage -> ux_slave_class_storage_number_lun)
 8018152:	68a3      	ldr	r3, [r4, #8]
    storage -> ux_slave_class_storage_csw_residue = 0;
 8018154:	6520      	str	r0, [r4, #80]	@ 0x50
    storage -> ux_slave_class_storage_csw_status = 0;
 8018156:	6560      	str	r0, [r4, #84]	@ 0x54
    if (lun >= storage -> ux_slave_class_storage_number_lun)
 8018158:	429d      	cmp	r5, r3
 801815a:	d2d9      	bcs.n	8018110 <_ux_device_class_storage_tasks_run+0x1d0>
    if (_ux_utility_long_get(cbw) != UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 801815c:	9802      	ldr	r0, [sp, #8]
 801815e:	f7fe fe00 	bl	8016d62 <_ux_utility_long_get>
 8018162:	4b34      	ldr	r3, [pc, #208]	@ (8018234 <_ux_device_class_storage_tasks_run+0x2f4>)
 8018164:	4298      	cmp	r0, r3
 8018166:	d1d3      	bne.n	8018110 <_ux_device_class_storage_tasks_run+0x1d0>
    if (cbwcb_length == 0)
 8018168:	9b02      	ldr	r3, [sp, #8]
 801816a:	7b9b      	ldrb	r3, [r3, #14]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d0cf      	beq.n	8018110 <_ux_device_class_storage_tasks_run+0x1d0>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8018170:	2103      	movs	r1, #3
    endpoint_in = storage -> ux_device_class_storage_ep_in;
 8018172:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8018174:	9f03      	ldr	r7, [sp, #12]
    endpoint_out = storage -> ux_device_class_storage_ep_out;
 8018176:	1d23      	adds	r3, r4, #4
 8018178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 801817a:	7039      	strb	r1, [r7, #0]
    storage -> ux_device_class_storage_device_length = 0;
 801817c:	0021      	movs	r1, r4
 801817e:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8018180:	0027      	movs	r7, r4
    storage -> ux_device_class_storage_device_length = 0;
 8018182:	318c      	adds	r1, #140	@ 0x8c
 8018184:	6008      	str	r0, [r1, #0]
    storage -> ux_device_class_storage_data_length = 0;
 8018186:	6088      	str	r0, [r1, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8018188:	60c8      	str	r0, [r1, #12]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 801818a:	390e      	subs	r1, #14
 801818c:	7008      	strb	r0, [r1, #0]
    storage -> ux_device_class_storage_cmd = *cbwcb;
 801818e:	9802      	ldr	r0, [sp, #8]
    cbwcb = cbw + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 8018190:	9902      	ldr	r1, [sp, #8]
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8018192:	7bc0      	ldrb	r0, [r0, #15]
 8018194:	377c      	adds	r7, #124	@ 0x7c
    cbwcb = cbw + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 8018196:	310f      	adds	r1, #15
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8018198:	7038      	strb	r0, [r7, #0]
    switch(storage -> ux_device_class_storage_cmd)
 801819a:	282f      	cmp	r0, #47	@ 0x2f
 801819c:	d828      	bhi.n	80181f0 <_ux_device_class_storage_tasks_run+0x2b0>
 801819e:	2819      	cmp	r0, #25
 80181a0:	d80e      	bhi.n	80181c0 <_ux_device_class_storage_tasks_run+0x280>
 80181a2:	2804      	cmp	r0, #4
 80181a4:	d050      	beq.n	8018248 <_ux_device_class_storage_tasks_run+0x308>
 80181a6:	d81b      	bhi.n	80181e0 <_ux_device_class_storage_tasks_run+0x2a0>
 80181a8:	2800      	cmp	r0, #0
 80181aa:	d039      	beq.n	8018220 <_ux_device_class_storage_tasks_run+0x2e0>
 80181ac:	2803      	cmp	r0, #3
 80181ae:	d045      	beq.n	801823c <_ux_device_class_storage_tasks_run+0x2fc>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80181b0:	2301      	movs	r3, #1
 80181b2:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80181b4:	3337      	adds	r3, #55	@ 0x37
 80181b6:	436b      	muls	r3, r5
 80181b8:	4a1f      	ldr	r2, [pc, #124]	@ (8018238 <_ux_device_class_storage_tasks_run+0x2f8>)
 80181ba:	18e3      	adds	r3, r4, r3
 80181bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80181be:	e7a9      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 80181c0:	381a      	subs	r0, #26
 80181c2:	2815      	cmp	r0, #21
 80181c4:	d8f4      	bhi.n	80181b0 <_ux_device_class_storage_tasks_run+0x270>
 80181c6:	f7e7 ffa7 	bl	8000118 <__gnu_thumb1_case_sqi>
 80181ca:	4563      	.short	0x4563
 80181cc:	f34bf3f3 	.word	0xf34bf3f3
 80181d0:	51f3f3f3 	.word	0x51f3f3f3
 80181d4:	f3f357f3 	.word	0xf3f357f3
 80181d8:	f373f371 	.word	0xf373f371
 80181dc:	5df3f3f3 	.word	0x5df3f3f3
 80181e0:	2812      	cmp	r0, #18
 80181e2:	d1e5      	bne.n	80181b0 <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_inquiry(storage, lun, endpoint_in, endpoint_out, cbwcb);
 80181e4:	9100      	str	r1, [sp, #0]
 80181e6:	0020      	movs	r0, r4
 80181e8:	0029      	movs	r1, r5
 80181ea:	f7ff fc73 	bl	8017ad4 <_ux_device_class_storage_inquiry>
        break;
 80181ee:	e791      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 80181f0:	285a      	cmp	r0, #90	@ 0x5a
 80181f2:	d04d      	beq.n	8018290 <_ux_device_class_storage_tasks_run+0x350>
 80181f4:	d809      	bhi.n	801820a <_ux_device_class_storage_tasks_run+0x2ca>
 80181f6:	2835      	cmp	r0, #53	@ 0x35
 80181f8:	d05c      	beq.n	80182b4 <_ux_device_class_storage_tasks_run+0x374>
 80181fa:	2855      	cmp	r0, #85	@ 0x55
 80181fc:	d1d8      	bne.n	80181b0 <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_mode_select(storage, lun, endpoint_in, endpoint_out, cbwcb);
 80181fe:	9100      	str	r1, [sp, #0]
 8018200:	0020      	movs	r0, r4
 8018202:	0029      	movs	r1, r5
 8018204:	f7ff fcdc 	bl	8017bc0 <_ux_device_class_storage_mode_select>
        break;
 8018208:	e784      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 801820a:	28a8      	cmp	r0, #168	@ 0xa8
 801820c:	d046      	beq.n	801829c <_ux_device_class_storage_tasks_run+0x35c>
 801820e:	28aa      	cmp	r0, #170	@ 0xaa
 8018210:	d1ce      	bne.n	80181b0 <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8018212:	9001      	str	r0, [sp, #4]
 8018214:	9100      	str	r1, [sp, #0]
 8018216:	0020      	movs	r0, r4
 8018218:	0029      	movs	r1, r5
 801821a:	f000 fa99 	bl	8018750 <_ux_device_class_storage_write>
        break;
 801821e:	e779      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_test_ready(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018220:	9100      	str	r1, [sp, #0]
 8018222:	0020      	movs	r0, r4
 8018224:	0029      	movs	r1, r5
 8018226:	f000 fa6d 	bl	8018704 <_ux_device_class_storage_test_ready>
        break;
 801822a:	e773      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
 801822c:	200030e0 	.word	0x200030e0
 8018230:	00005402 	.word	0x00005402
 8018234:	43425355 	.word	0x43425355
 8018238:	00002005 	.word	0x00002005
        _ux_device_class_storage_request_sense(storage, lun, endpoint_in, endpoint_out, cbwcb);
 801823c:	9100      	str	r1, [sp, #0]
 801823e:	0020      	movs	r0, r4
 8018240:	0029      	movs	r1, r5
 8018242:	f7ff fe0f 	bl	8017e64 <_ux_device_class_storage_request_sense>
        break;
 8018246:	e765      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_format(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018248:	9100      	str	r1, [sp, #0]
 801824a:	0020      	movs	r0, r4
 801824c:	0029      	movs	r1, r5
 801824e:	f7ff fbd1 	bl	80179f4 <_ux_device_class_storage_format>
        break;
 8018252:	e75f      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_start_stop(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018254:	9100      	str	r1, [sp, #0]
 8018256:	0020      	movs	r0, r4
 8018258:	0029      	movs	r1, r5
 801825a:	f7ff fe2f 	bl	8017ebc <_ux_device_class_storage_start_stop>
        break;
 801825e:	e759      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_prevent_allow_media_removal(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018260:	9100      	str	r1, [sp, #0]
 8018262:	0020      	movs	r0, r4
 8018264:	0029      	movs	r1, r5
 8018266:	f7ff fd33 	bl	8017cd0 <_ux_device_class_storage_prevent_allow_media_removal>
        break;
 801826a:	e753      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read_format_capacity(storage, lun, endpoint_in, endpoint_out, cbwcb);
 801826c:	9100      	str	r1, [sp, #0]
 801826e:	0020      	movs	r0, r4
 8018270:	0029      	movs	r1, r5
 8018272:	f7ff fdc4 	bl	8017dfe <_ux_device_class_storage_read_format_capacity>
        break;
 8018276:	e74d      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read_capacity(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018278:	9100      	str	r1, [sp, #0]
 801827a:	0020      	movs	r0, r4
 801827c:	0029      	movs	r1, r5
 801827e:	f7ff fd85 	bl	8017d8c <_ux_device_class_storage_read_capacity>
        break;
 8018282:	e747      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_verify(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018284:	9100      	str	r1, [sp, #0]
 8018286:	0020      	movs	r0, r4
 8018288:	0029      	movs	r1, r5
 801828a:	f000 fa5c 	bl	8018746 <_ux_device_class_storage_verify>
        break;
 801828e:	e741      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_mode_sense(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018290:	9100      	str	r1, [sp, #0]
 8018292:	0020      	movs	r0, r4
 8018294:	0029      	movs	r1, r5
 8018296:	f7ff fca9 	bl	8017bec <_ux_device_class_storage_mode_sense>
        break;
 801829a:	e73b      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 801829c:	20a8      	movs	r0, #168	@ 0xa8
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 801829e:	9001      	str	r0, [sp, #4]
 80182a0:	9100      	str	r1, [sp, #0]
 80182a2:	0020      	movs	r0, r4
 80182a4:	0029      	movs	r1, r5
 80182a6:	f7ff fd17 	bl	8017cd8 <_ux_device_class_storage_read>
        break;
 80182aa:	e733      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 80182ac:	2028      	movs	r0, #40	@ 0x28
 80182ae:	e7f6      	b.n	801829e <_ux_device_class_storage_tasks_run+0x35e>
        _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 80182b0:	202a      	movs	r0, #42	@ 0x2a
 80182b2:	e7ae      	b.n	8018212 <_ux_device_class_storage_tasks_run+0x2d2>
        _ux_device_class_storage_synchronize_cache(storage, lun, endpoint_in, endpoint_out, cbwcb, *(cbwcb));
 80182b4:	2035      	movs	r0, #53	@ 0x35
 80182b6:	9100      	str	r1, [sp, #0]
 80182b8:	9001      	str	r0, [sp, #4]
 80182ba:	0029      	movs	r1, r5
 80182bc:	0020      	movs	r0, r4
 80182be:	f7ff fe01 	bl	8017ec4 <_ux_device_class_storage_synchronize_cache>
        break;
 80182c2:	e727      	b.n	8018114 <_ux_device_class_storage_tasks_run+0x1d4>
    if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PASSED)
 80182c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
            storage -> ux_slave_class_storage_host_length == 0)
 80182c6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PASSED)
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d10a      	bne.n	80182e2 <_ux_device_class_storage_tasks_run+0x3a2>
    if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_DIR)
 80182cc:	0023      	movs	r3, r4
 80182ce:	3348      	adds	r3, #72	@ 0x48
 80182d0:	781b      	ldrb	r3, [r3, #0]
 80182d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80182d4:	d918      	bls.n	8018308 <_ux_device_class_storage_tasks_run+0x3c8>
        if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_WRITE ||
 80182d6:	2904      	cmp	r1, #4
 80182d8:	d001      	beq.n	80182de <_ux_device_class_storage_tasks_run+0x39e>
 80182da:	2a00      	cmp	r2, #0
 80182dc:	d10a      	bne.n	80182f4 <_ux_device_class_storage_tasks_run+0x3b4>
            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 80182de:	2302      	movs	r3, #2
            storage -> ux_slave_class_storage_csw_status =
 80182e0:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 80182e2:	0023      	movs	r3, r4
 80182e4:	2100      	movs	r1, #0
 80182e6:	337e      	adds	r3, #126	@ 0x7e
 80182e8:	7019      	strb	r1, [r3, #0]
        if (storage -> ux_slave_class_storage_host_length &&
 80182ea:	428a      	cmp	r2, r1
 80182ec:	d119      	bne.n	8018322 <_ux_device_class_storage_tasks_run+0x3e2>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 80182ee:	0023      	movs	r3, r4
 80182f0:	3308      	adds	r3, #8
 80182f2:	e01c      	b.n	801832e <_ux_device_class_storage_tasks_run+0x3ee>
            storage -> ux_device_class_storage_data_length)
 80182f4:	0023      	movs	r3, r4
 80182f6:	3394      	adds	r3, #148	@ 0x94
        if (storage -> ux_slave_class_storage_host_length <
 80182f8:	6818      	ldr	r0, [r3, #0]
 80182fa:	4290      	cmp	r0, r2
 80182fc:	d900      	bls.n	8018300 <_ux_device_class_storage_tasks_run+0x3c0>
            storage -> ux_device_class_storage_data_length =
 80182fe:	601a      	str	r2, [r3, #0]
    if (storage -> ux_device_class_storage_cmd_state < UX_DEVICE_CLASS_STORAGE_CMD_WRITE)
 8018300:	2903      	cmp	r1, #3
 8018302:	d900      	bls.n	8018306 <_ux_device_class_storage_tasks_run+0x3c6>
 8018304:	e673      	b.n	8017fee <_ux_device_class_storage_tasks_run+0xae>
 8018306:	e01a      	b.n	801833e <_ux_device_class_storage_tasks_run+0x3fe>
                storage -> ux_device_class_storage_device_length ||
 8018308:	0023      	movs	r3, r4
 801830a:	338c      	adds	r3, #140	@ 0x8c
 801830c:	681b      	ldr	r3, [r3, #0]
        if (storage -> ux_slave_class_storage_host_length <
 801830e:	4293      	cmp	r3, r2
 8018310:	d8e5      	bhi.n	80182de <_ux_device_class_storage_tasks_run+0x39e>
                storage -> ux_device_class_storage_device_length ||
 8018312:	2905      	cmp	r1, #5
 8018314:	d0e3      	beq.n	80182de <_ux_device_class_storage_tasks_run+0x39e>
        if (storage -> ux_slave_class_storage_host_length !=
 8018316:	4293      	cmp	r3, r2
 8018318:	d0f2      	beq.n	8018300 <_ux_device_class_storage_tasks_run+0x3c0>
                    storage -> ux_slave_class_storage_host_length -
 801831a:	1ad3      	subs	r3, r2, r3
            storage -> ux_slave_class_storage_csw_residue =
 801831c:	6523      	str	r3, [r4, #80]	@ 0x50
            storage -> ux_slave_class_storage_csw_status =
 801831e:	2301      	movs	r3, #1
 8018320:	e7de      	b.n	80182e0 <_ux_device_class_storage_tasks_run+0x3a0>
            (storage -> ux_slave_class_storage_cbw_flags &
 8018322:	0023      	movs	r3, r4
 8018324:	3348      	adds	r3, #72	@ 0x48
        if (storage -> ux_slave_class_storage_host_length &&
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	2b7f      	cmp	r3, #127	@ 0x7f
 801832a:	d8e0      	bhi.n	80182ee <_ux_device_class_storage_tasks_run+0x3ae>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 801832c:	1d23      	adds	r3, r4, #4
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 801832e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8018330:	f7fe f99e 	bl	8016670 <_ux_device_stack_endpoint_stall>
        if (storage -> ux_device_class_storage_cmd_state != UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 8018334:	782b      	ldrb	r3, [r5, #0]
 8018336:	2b01      	cmp	r3, #1
 8018338:	d001      	beq.n	801833e <_ux_device_class_storage_tasks_run+0x3fe>
            storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
 801833a:	2302      	movs	r3, #2
 801833c:	702b      	strb	r3, [r5, #0]
                                storage -> ux_slave_class_storage_cbw_lun,
 801833e:	0023      	movs	r3, r4
        _ux_device_class_storage_csw_send(storage,
 8018340:	0022      	movs	r2, r4
                                storage -> ux_slave_class_storage_cbw_lun,
 8018342:	3349      	adds	r3, #73	@ 0x49
        _ux_device_class_storage_csw_send(storage,
 8018344:	3208      	adds	r2, #8
 8018346:	7819      	ldrb	r1, [r3, #0]
 8018348:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 801834a:	2300      	movs	r3, #0
 801834c:	e6b1      	b.n	80180b2 <_ux_device_class_storage_tasks_run+0x172>
            if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CSW)
 801834e:	2903      	cmp	r1, #3
 8018350:	d118      	bne.n	8018384 <_ux_device_class_storage_tasks_run+0x444>
                if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR)
 8018352:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018354:	2a02      	cmp	r2, #2
 8018356:	d102      	bne.n	801835e <_ux_device_class_storage_tasks_run+0x41e>
                    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 8018358:	2321      	movs	r3, #33	@ 0x21
 801835a:	7033      	strb	r3, [r6, #0]
 801835c:	e5f6      	b.n	8017f4c <_ux_device_class_storage_tasks_run+0xc>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 801835e:	2201      	movs	r2, #1
 8018360:	9903      	ldr	r1, [sp, #12]
    storage -> ux_device_class_storage_transfer = transfer;
 8018362:	0020      	movs	r0, r4
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 8018364:	700a      	strb	r2, [r1, #0]
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8018366:	0022      	movs	r2, r4
 8018368:	2100      	movs	r1, #0
 801836a:	3290      	adds	r2, #144	@ 0x90
 801836c:	6011      	str	r1, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 801836e:	2223      	movs	r2, #35	@ 0x23
 8018370:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018372:	8a1a      	ldrh	r2, [r3, #16]
    storage -> ux_device_class_storage_transfer = transfer;
 8018374:	3088      	adds	r0, #136	@ 0x88
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 8018376:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 8018378:	6003      	str	r3, [r0, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 801837a:	0023      	movs	r3, r4
 801837c:	3394      	adds	r3, #148	@ 0x94
 801837e:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8018380:	6059      	str	r1, [r3, #4]
}
 8018382:	e5e3      	b.n	8017f4c <_ux_device_class_storage_tasks_run+0xc>
    switch(storage -> ux_device_class_storage_cmd)
 8018384:	0023      	movs	r3, r4
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8018386:	0025      	movs	r5, r4
 8018388:	0021      	movs	r1, r4
    switch(storage -> ux_device_class_storage_cmd)
 801838a:	337c      	adds	r3, #124	@ 0x7c
 801838c:	781b      	ldrb	r3, [r3, #0]
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 801838e:	3598      	adds	r5, #152	@ 0x98
 8018390:	6828      	ldr	r0, [r5, #0]
 8018392:	317e      	adds	r1, #126	@ 0x7e
    switch(storage -> ux_device_class_storage_cmd)
 8018394:	2ba8      	cmp	r3, #168	@ 0xa8
 8018396:	d037      	beq.n	8018408 <_ux_device_class_storage_tasks_run+0x4c8>
 8018398:	d810      	bhi.n	80183bc <_ux_device_class_storage_tasks_run+0x47c>
 801839a:	2b28      	cmp	r3, #40	@ 0x28
 801839c:	d034      	beq.n	8018408 <_ux_device_class_storage_tasks_run+0x4c8>
 801839e:	2b2a      	cmp	r3, #42	@ 0x2a
 80183a0:	d00e      	beq.n	80183c0 <_ux_device_class_storage_tasks_run+0x480>
        if (storage -> ux_slave_class_storage_host_length >
 80183a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80183a4:	4283      	cmp	r3, r0
 80183a6:	d940      	bls.n	801842a <_ux_device_class_storage_tasks_run+0x4ea>
UX_SLAVE_ENDPOINT *endp = trans -> ux_slave_transfer_request_endpoint;
 80183a8:	0023      	movs	r3, r4
 80183aa:	3388      	adds	r3, #136	@ 0x88
 80183ac:	681b      	ldr	r3, [r3, #0]
    _ux_device_stack_endpoint_stall(endp);
 80183ae:	6898      	ldr	r0, [r3, #8]
 80183b0:	f7fe f95e 	bl	8016670 <_ux_device_stack_endpoint_stall>
                storage -> ux_slave_class_storage_host_length -
 80183b4:	0022      	movs	r2, r4
 80183b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80183b8:	3294      	adds	r2, #148	@ 0x94
 80183ba:	e033      	b.n	8018424 <_ux_device_class_storage_tasks_run+0x4e4>
    switch(storage -> ux_device_class_storage_cmd)
 80183bc:	2baa      	cmp	r3, #170	@ 0xaa
 80183be:	d1f0      	bne.n	80183a2 <_ux_device_class_storage_tasks_run+0x462>
                        storage -> ux_device_class_storage_buffer_usb] =
 80183c0:	0025      	movs	r5, r4
 80183c2:	2702      	movs	r7, #2
 80183c4:	357a      	adds	r5, #122	@ 0x7a
 80183c6:	782b      	ldrb	r3, [r5, #0]
 80183c8:	18e2      	adds	r2, r4, r3
 80183ca:	3278      	adds	r2, #120	@ 0x78
 80183cc:	7017      	strb	r7, [r2, #0]
        if (storage -> ux_device_class_storage_disk_state ==
 80183ce:	780a      	ldrb	r2, [r1, #0]
 80183d0:	2a04      	cmp	r2, #4
 80183d2:	d101      	bne.n	80183d8 <_ux_device_class_storage_tasks_run+0x498>
            storage -> ux_device_class_storage_disk_state =
 80183d4:	3a03      	subs	r2, #3
 80183d6:	700a      	strb	r2, [r1, #0]
            storage -> ux_device_class_storage_data_length)
 80183d8:	0022      	movs	r2, r4
 80183da:	3294      	adds	r2, #148	@ 0x94
        if (storage -> ux_device_class_storage_data_count >=
 80183dc:	6812      	ldr	r2, [r2, #0]
 80183de:	4282      	cmp	r2, r0
 80183e0:	d910      	bls.n	8018404 <_ux_device_class_storage_tasks_run+0x4c4>
                                !storage -> ux_device_class_storage_buffer_usb;
 80183e2:	425a      	negs	r2, r3
 80183e4:	4153      	adcs	r3, r2
                ux_slave_transfer_request_data_pointer =
 80183e6:	0022      	movs	r2, r4
                                !storage -> ux_device_class_storage_buffer_usb;
 80183e8:	b2db      	uxtb	r3, r3
            storage -> ux_device_class_storage_buffer_usb =
 80183ea:	702b      	strb	r3, [r5, #0]
                ux_slave_transfer_request_data_pointer =
 80183ec:	3288      	adds	r2, #136	@ 0x88
 80183ee:	6811      	ldr	r1, [r2, #0]
                            storage -> ux_device_class_storage_buffer[
 80183f0:	001a      	movs	r2, r3
            if (storage -> ux_device_class_storage_buffer_state[
 80183f2:	18e3      	adds	r3, r4, r3
                            storage -> ux_device_class_storage_buffer[
 80183f4:	321c      	adds	r2, #28
 80183f6:	0092      	lsls	r2, r2, #2
            if (storage -> ux_device_class_storage_buffer_state[
 80183f8:	3378      	adds	r3, #120	@ 0x78
                ux_slave_transfer_request_data_pointer =
 80183fa:	5912      	ldr	r2, [r2, r4]
            if (storage -> ux_device_class_storage_buffer_state[
 80183fc:	781b      	ldrb	r3, [r3, #0]
                ux_slave_transfer_request_data_pointer =
 80183fe:	60ca      	str	r2, [r1, #12]
            if (storage -> ux_device_class_storage_buffer_state[
 8018400:	2b01      	cmp	r3, #1
 8018402:	d03f      	beq.n	8018484 <_ux_device_class_storage_tasks_run+0x544>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT;
 8018404:	2326      	movs	r3, #38	@ 0x26
 8018406:	e03e      	b.n	8018486 <_ux_device_class_storage_tasks_run+0x546>
            storage -> ux_device_class_storage_data_length)
 8018408:	0023      	movs	r3, r4
 801840a:	3394      	adds	r3, #148	@ 0x94
 801840c:	9302      	str	r3, [sp, #8]
 801840e:	681b      	ldr	r3, [r3, #0]
        if (storage -> ux_device_class_storage_data_count >=
 8018410:	4283      	cmp	r3, r0
 8018412:	d81b      	bhi.n	801844c <_ux_device_class_storage_tasks_run+0x50c>
            if (storage -> ux_slave_class_storage_host_length >
 8018414:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018416:	428b      	cmp	r3, r1
 8018418:	d207      	bcs.n	801842a <_ux_device_class_storage_tasks_run+0x4ea>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 801841a:	0010      	movs	r0, r2
 801841c:	f7fe f928 	bl	8016670 <_ux_device_stack_endpoint_stall>
                    storage -> ux_slave_class_storage_host_length -
 8018420:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018422:	9a02      	ldr	r2, [sp, #8]
                storage -> ux_slave_class_storage_host_length -
 8018424:	6812      	ldr	r2, [r2, #0]
 8018426:	1a9b      	subs	r3, r3, r2
            storage -> ux_slave_class_storage_csw_residue =
 8018428:	6523      	str	r3, [r4, #80]	@ 0x50
        if (storage -> ux_device_class_storage_device_length >
 801842a:	0023      	movs	r3, r4
 801842c:	338c      	adds	r3, #140	@ 0x8c
 801842e:	681a      	ldr	r2, [r3, #0]
 8018430:	682b      	ldr	r3, [r5, #0]
 8018432:	429a      	cmp	r2, r3
 8018434:	d901      	bls.n	801843a <_ux_device_class_storage_tasks_run+0x4fa>
            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018436:	2301      	movs	r3, #1
 8018438:	6563      	str	r3, [r4, #84]	@ 0x54
                    storage -> ux_slave_class_storage_cbw_lun,
 801843a:	0023      	movs	r3, r4
 801843c:	3349      	adds	r3, #73	@ 0x49
        _ux_device_class_storage_csw_send(storage,
 801843e:	7819      	ldrb	r1, [r3, #0]
 8018440:	0020      	movs	r0, r4
 8018442:	2300      	movs	r3, #0
 8018444:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8018446:	f7ff fa53 	bl	80178f0 <_ux_device_class_storage_csw_send>
 801844a:	e01d      	b.n	8018488 <_ux_device_class_storage_tasks_run+0x548>
            storage -> ux_device_class_storage_buffer_state[storage -> ux_device_class_storage_buffer_usb] =
 801844c:	0025      	movs	r5, r4
 801844e:	2001      	movs	r0, #1
 8018450:	357a      	adds	r5, #122	@ 0x7a
 8018452:	782b      	ldrb	r3, [r5, #0]
 8018454:	18e2      	adds	r2, r4, r3
 8018456:	3278      	adds	r2, #120	@ 0x78
 8018458:	7010      	strb	r0, [r2, #0]
            storage -> ux_device_class_storage_buffer_usb = !storage -> ux_device_class_storage_buffer_usb;
 801845a:	425a      	negs	r2, r3
 801845c:	4153      	adcs	r3, r2
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 801845e:	0022      	movs	r2, r4
            storage -> ux_device_class_storage_buffer_usb = !storage -> ux_device_class_storage_buffer_usb;
 8018460:	b2db      	uxtb	r3, r3
 8018462:	702b      	strb	r3, [r5, #0]
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 8018464:	3288      	adds	r2, #136	@ 0x88
 8018466:	6815      	ldr	r5, [r2, #0]
                    storage -> ux_device_class_storage_buffer[storage -> ux_device_class_storage_buffer_usb];
 8018468:	001a      	movs	r2, r3
 801846a:	321c      	adds	r2, #28
 801846c:	0092      	lsls	r2, r2, #2
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 801846e:	5912      	ldr	r2, [r2, r4]
 8018470:	60ea      	str	r2, [r5, #12]
            if (storage -> ux_device_class_storage_disk_state == UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT)
 8018472:	780a      	ldrb	r2, [r1, #0]
 8018474:	2a04      	cmp	r2, #4
 8018476:	d100      	bne.n	801847a <_ux_device_class_storage_tasks_run+0x53a>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8018478:	7008      	strb	r0, [r1, #0]
            if (storage -> ux_device_class_storage_buffer_state[storage->ux_device_class_storage_buffer_usb] ==
 801847a:	18e3      	adds	r3, r4, r3
 801847c:	3378      	adds	r3, #120	@ 0x78
 801847e:	781b      	ldrb	r3, [r3, #0]
 8018480:	2b02      	cmp	r3, #2
 8018482:	d1bf      	bne.n	8018404 <_ux_device_class_storage_tasks_run+0x4c4>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8018484:	2323      	movs	r3, #35	@ 0x23
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT;
 8018486:	7033      	strb	r3, [r6, #0]
            return _ux_device_class_storage_data_next(storage);
 8018488:	2704      	movs	r7, #4
 801848a:	e571      	b.n	8017f70 <_ux_device_class_storage_tasks_run+0x30>
    if (storage -> ux_device_class_storage_data_count < storage -> ux_device_class_storage_data_length)
 801848c:	0025      	movs	r5, r4
 801848e:	0021      	movs	r1, r4
 8018490:	3598      	adds	r5, #152	@ 0x98
 8018492:	3194      	adds	r1, #148	@ 0x94
 8018494:	6828      	ldr	r0, [r5, #0]
 8018496:	6809      	ldr	r1, [r1, #0]
 8018498:	4288      	cmp	r0, r1
 801849a:	d215      	bcs.n	80184c8 <_ux_device_class_storage_tasks_run+0x588>
        if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_IN)
 801849c:	0021      	movs	r1, r4
 801849e:	3148      	adds	r1, #72	@ 0x48
 80184a0:	7809      	ldrb	r1, [r1, #0]
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 80184a2:	0010      	movs	r0, r2
        if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_IN)
 80184a4:	297f      	cmp	r1, #127	@ 0x7f
 80184a6:	d800      	bhi.n	80184aa <_ux_device_class_storage_tasks_run+0x56a>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 80184a8:	0018      	movs	r0, r3
 80184aa:	f7fe f8e1 	bl	8016670 <_ux_device_stack_endpoint_stall>
            storage -> ux_slave_class_storage_host_length -
 80184ae:	682a      	ldr	r2, [r5, #0]
 80184b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80184b2:	1a9b      	subs	r3, r3, r2
        storage -> ux_slave_class_storage_csw_residue =
 80184b4:	6523      	str	r3, [r4, #80]	@ 0x50
            storage -> ux_slave_class_storage_cbw_lun,
 80184b6:	0023      	movs	r3, r4
 80184b8:	3349      	adds	r3, #73	@ 0x49
    _ux_device_class_storage_csw_send(storage,
 80184ba:	7819      	ldrb	r1, [r3, #0]
 80184bc:	0020      	movs	r0, r4
 80184be:	2300      	movs	r3, #0
 80184c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80184c2:	f7ff fa15 	bl	80178f0 <_ux_device_class_storage_csw_send>
            continue;
 80184c6:	e541      	b.n	8017f4c <_ux_device_class_storage_tasks_run+0xc>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 80184c8:	0010      	movs	r0, r2
 80184ca:	f7fe f8d1 	bl	8016670 <_ux_device_stack_endpoint_stall>
}
 80184ce:	e7f2      	b.n	80184b6 <_ux_device_class_storage_tasks_run+0x576>

    if (storage -> ux_device_class_storage_cmd == UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE)
    {

        /* All things sync in one call.  */
        storage -> ux_device_class_storage_disk_n_lb = storage -> ux_device_class_storage_cmd_n_lb;
 80184d0:	0023      	movs	r3, r4
 80184d2:	33a8      	adds	r3, #168	@ 0xa8
 80184d4:	681e      	ldr	r6, [r3, #0]
    if (storage -> ux_device_class_storage_cmd == UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE)
 80184d6:	3b2c      	subs	r3, #44	@ 0x2c
 80184d8:	781b      	ldrb	r3, [r3, #0]
 80184da:	2b35      	cmp	r3, #53	@ 0x35
 80184dc:	d00d      	beq.n	80184fa <_ux_device_class_storage_tasks_run+0x5ba>
    }

    /* Read/write, split the operation by buffer sizes.  */

    /* Max blocks for one buffer.  */
    block_size = storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80184de:	0023      	movs	r3, r4
 80184e0:	3349      	adds	r3, #73	@ 0x49
 80184e2:	781a      	ldrb	r2, [r3, #0]
 80184e4:	2338      	movs	r3, #56	@ 0x38
                                                        ux_slave_class_storage_media_block_length;
    if (block_size == 0)
        UX_ASSERT(UX_FALSE);
    max_n_blocks = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE / block_size;
 80184e6:	2080      	movs	r0, #128	@ 0x80
    block_size = storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80184e8:	4353      	muls	r3, r2
 80184ea:	18e3      	adds	r3, r4, r3
    max_n_blocks = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE / block_size;
 80184ec:	6919      	ldr	r1, [r3, #16]
 80184ee:	0140      	lsls	r0, r0, #5
 80184f0:	f7e7 fe3a 	bl	8000168 <__udivsi3>

    /* Prepare next disk read.  */
    if (storage -> ux_device_class_storage_cmd_n_lb > max_n_blocks)
 80184f4:	4286      	cmp	r6, r0
 80184f6:	d900      	bls.n	80184fa <_ux_device_class_storage_tasks_run+0x5ba>
 80184f8:	0006      	movs	r6, r0
        storage -> ux_device_class_storage_disk_n_lb = storage -> ux_device_class_storage_cmd_n_lb;
 80184fa:	0023      	movs	r3, r4
 80184fc:	33ac      	adds	r3, #172	@ 0xac
 80184fe:	601e      	str	r6, [r3, #0]
            storage -> ux_device_class_storage_disk_state =
 8018500:	2302      	movs	r3, #2
 8018502:	702b      	strb	r3, [r5, #0]
// ux_slave_class_storage_media_read, write and others, so do a ugly hack
static inline UINT _ux_device_class_storage_disk_wait(UX_SLAVE_CLASS_STORAGE *storage)
{
    UINT status = UX_SUCCESS;

    switch (storage -> ux_device_class_storage_cmd)
 8018504:	0023      	movs	r3, r4
 8018506:	337c      	adds	r3, #124	@ 0x7c
 8018508:	781b      	ldrb	r3, [r3, #0]
 801850a:	2b35      	cmp	r3, #53	@ 0x35
 801850c:	d03e      	beq.n	801858c <_ux_device_class_storage_tasks_run+0x64c>
 801850e:	d806      	bhi.n	801851e <_ux_device_class_storage_tasks_run+0x5de>
 8018510:	2b28      	cmp	r3, #40	@ 0x28
 8018512:	d01c      	beq.n	801854e <_ux_device_class_storage_tasks_run+0x60e>
 8018514:	2b2a      	cmp	r3, #42	@ 0x2a
 8018516:	d006      	beq.n	8018526 <_ux_device_class_storage_tasks_run+0x5e6>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_NEXT;
 8018518:	2303      	movs	r3, #3
                    0 /* Not used.  */);
        }
        return;

    default:
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 801851a:	702b      	strb	r3, [r5, #0]
        break;
 801851c:	e033      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
    switch (storage -> ux_device_class_storage_cmd)
 801851e:	2ba8      	cmp	r3, #168	@ 0xa8
 8018520:	d015      	beq.n	801854e <_ux_device_class_storage_tasks_run+0x60e>
 8018522:	2baa      	cmp	r3, #170	@ 0xaa
 8018524:	d1f8      	bne.n	8018518 <_ux_device_class_storage_tasks_run+0x5d8>
        status= ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8018526:	0023      	movs	r3, r4
 8018528:	3349      	adds	r3, #73	@ 0x49
 801852a:	7819      	ldrb	r1, [r3, #0]
                                storage -> ux_device_class_storage_buffer_disk],
 801852c:	3332      	adds	r3, #50	@ 0x32
 801852e:	781a      	ldrb	r2, [r3, #0]
        status= ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8018530:	0026      	movs	r6, r4
 8018532:	2338      	movs	r3, #56	@ 0x38
 8018534:	0020      	movs	r0, r4
 8018536:	36b0      	adds	r6, #176	@ 0xb0
 8018538:	434b      	muls	r3, r1
 801853a:	9601      	str	r6, [sp, #4]
 801853c:	3e0c      	subs	r6, #12
 801853e:	6836      	ldr	r6, [r6, #0]
 8018540:	321c      	adds	r2, #28
 8018542:	18e3      	adds	r3, r4, r3
 8018544:	9600      	str	r6, [sp, #0]
 8018546:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8018548:	30ac      	adds	r0, #172	@ 0xac
 801854a:	0092      	lsls	r2, r2, #2
 801854c:	e012      	b.n	8018574 <_ux_device_class_storage_tasks_run+0x634>
        status = (storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 801854e:	0023      	movs	r3, r4
 8018550:	3349      	adds	r3, #73	@ 0x49
 8018552:	7819      	ldrb	r1, [r3, #0]
                                storage -> ux_device_class_storage_buffer_disk],
 8018554:	3332      	adds	r3, #50	@ 0x32
 8018556:	781a      	ldrb	r2, [r3, #0]
        status = (storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8018558:	0026      	movs	r6, r4
 801855a:	2338      	movs	r3, #56	@ 0x38
 801855c:	0020      	movs	r0, r4
 801855e:	36b0      	adds	r6, #176	@ 0xb0
 8018560:	434b      	muls	r3, r1
 8018562:	9601      	str	r6, [sp, #4]
 8018564:	3e0c      	subs	r6, #12
 8018566:	6836      	ldr	r6, [r6, #0]
 8018568:	18e3      	adds	r3, r4, r3
 801856a:	9600      	str	r6, [sp, #0]
 801856c:	321c      	adds	r2, #28
 801856e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8018570:	30ac      	adds	r0, #172	@ 0xac
 8018572:	0092      	lsls	r2, r2, #2
 8018574:	6803      	ldr	r3, [r0, #0]
 8018576:	5912      	ldr	r2, [r2, r4]
 8018578:	0020      	movs	r0, r4
 801857a:	47b0      	blx	r6
        return (status == UX_SUCCESS) ? UX_STATE_NEXT : UX_STATE_ERROR;
 801857c:	2800      	cmp	r0, #0
 801857e:	d0cb      	beq.n	8018518 <_ux_device_class_storage_tasks_run+0x5d8>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8018580:	239c      	movs	r3, #156	@ 0x9c
 8018582:	019b      	lsls	r3, r3, #6
 8018584:	802b      	strh	r3, [r5, #0]
}
 8018586:	0038      	movs	r0, r7
 8018588:	b005      	add	sp, #20
 801858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 801858c:	0023      	movs	r3, r4
 801858e:	3349      	adds	r3, #73	@ 0x49
 8018590:	7819      	ldrb	r1, [r3, #0]
 8018592:	2338      	movs	r3, #56	@ 0x38
 8018594:	0026      	movs	r6, r4
 8018596:	0020      	movs	r0, r4
 8018598:	0022      	movs	r2, r4
 801859a:	434b      	muls	r3, r1
 801859c:	36b0      	adds	r6, #176	@ 0xb0
 801859e:	9600      	str	r6, [sp, #0]
 80185a0:	18e3      	adds	r3, r4, r3
 80185a2:	30a4      	adds	r0, #164	@ 0xa4
 80185a4:	32ac      	adds	r2, #172	@ 0xac
 80185a6:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80185a8:	6812      	ldr	r2, [r2, #0]
 80185aa:	6803      	ldr	r3, [r0, #0]
 80185ac:	0020      	movs	r0, r4
 80185ae:	47b0      	blx	r6
 80185b0:	e7e4      	b.n	801857c <_ux_device_class_storage_tasks_run+0x63c>
    storage -> ux_device_class_storage_cmd_lba += storage -> ux_device_class_storage_disk_n_lb;
 80185b2:	0023      	movs	r3, r4
 80185b4:	0021      	movs	r1, r4
 80185b6:	33ac      	adds	r3, #172	@ 0xac
 80185b8:	31a4      	adds	r1, #164	@ 0xa4
 80185ba:	681a      	ldr	r2, [r3, #0]
 80185bc:	680b      	ldr	r3, [r1, #0]
 80185be:	189b      	adds	r3, r3, r2
 80185c0:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_cmd_n_lb -= storage -> ux_device_class_storage_disk_n_lb;
 80185c2:	0023      	movs	r3, r4
 80185c4:	33a8      	adds	r3, #168	@ 0xa8
 80185c6:	6818      	ldr	r0, [r3, #0]
    switch (storage -> ux_device_class_storage_cmd)
 80185c8:	3b2c      	subs	r3, #44	@ 0x2c
    storage -> ux_device_class_storage_cmd_n_lb -= storage -> ux_device_class_storage_disk_n_lb;
 80185ca:	1a80      	subs	r0, r0, r2
 80185cc:	62d8      	str	r0, [r3, #44]	@ 0x2c
    switch (storage -> ux_device_class_storage_cmd)
 80185ce:	781a      	ldrb	r2, [r3, #0]
 80185d0:	2a35      	cmp	r2, #53	@ 0x35
 80185d2:	d064      	beq.n	801869e <_ux_device_class_storage_tasks_run+0x75e>
 80185d4:	d805      	bhi.n	80185e2 <_ux_device_class_storage_tasks_run+0x6a2>
 80185d6:	2a28      	cmp	r2, #40	@ 0x28
 80185d8:	d01f      	beq.n	801861a <_ux_device_class_storage_tasks_run+0x6da>
 80185da:	2a2a      	cmp	r2, #42	@ 0x2a
 80185dc:	d005      	beq.n	80185ea <_ux_device_class_storage_tasks_run+0x6aa>
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 80185de:	2300      	movs	r3, #0
 80185e0:	e79b      	b.n	801851a <_ux_device_class_storage_tasks_run+0x5da>
    switch (storage -> ux_device_class_storage_cmd)
 80185e2:	2aa8      	cmp	r2, #168	@ 0xa8
 80185e4:	d019      	beq.n	801861a <_ux_device_class_storage_tasks_run+0x6da>
 80185e6:	2aaa      	cmp	r2, #170	@ 0xaa
 80185e8:	d1f9      	bne.n	80185de <_ux_device_class_storage_tasks_run+0x69e>
static inline VOID _ux_device_class_storage_disk_write_next(UX_SLAVE_CLASS_STORAGE *storage)
{

    /* Update buffer state : empty.  */
    storage -> ux_device_class_storage_buffer_state[
            storage -> ux_device_class_storage_buffer_disk] =
 80185ea:	0021      	movs	r1, r4
 80185ec:	317b      	adds	r1, #123	@ 0x7b
 80185ee:	780b      	ldrb	r3, [r1, #0]
 80185f0:	18e2      	adds	r2, r4, r3
 80185f2:	3278      	adds	r2, #120	@ 0x78
 80185f4:	4694      	mov	ip, r2
 80185f6:	9302      	str	r3, [sp, #8]
 80185f8:	2201      	movs	r2, #1
 80185fa:	4663      	mov	r3, ip
 80185fc:	701a      	strb	r2, [r3, #0]
                                    UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;

    /* Check if all disk operation is done.  */
    if (storage -> ux_device_class_storage_cmd_n_lb == 0)
 80185fe:	2800      	cmp	r0, #0
 8018600:	d132      	bne.n	8018668 <_ux_device_class_storage_tasks_run+0x728>
        /* Disk is idle now.  */
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;

        /* Issue CSW.  */
        _ux_device_class_storage_csw_send(storage,
                    storage -> ux_slave_class_storage_cbw_lun,
 8018602:	0023      	movs	r3, r4
        _ux_device_class_storage_csw_send(storage,
 8018604:	0022      	movs	r2, r4
                    storage -> ux_slave_class_storage_cbw_lun,
 8018606:	3349      	adds	r3, #73	@ 0x49
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8018608:	7028      	strb	r0, [r5, #0]
        _ux_device_class_storage_csw_send(storage,
 801860a:	7819      	ldrb	r1, [r3, #0]
 801860c:	0003      	movs	r3, r0
 801860e:	3208      	adds	r2, #8
            _ux_device_class_storage_csw_send(storage,
 8018610:	0020      	movs	r0, r4
 8018612:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8018614:	f7ff f96c 	bl	80178f0 <_ux_device_class_storage_csw_send>
 8018618:	e7b5      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
        storage -> ux_device_class_storage_buffer_disk] =
 801861a:	0021      	movs	r1, r4
 801861c:	317b      	adds	r1, #123	@ 0x7b
 801861e:	780b      	ldrb	r3, [r1, #0]
 8018620:	18e2      	adds	r2, r4, r3
 8018622:	3278      	adds	r2, #120	@ 0x78
 8018624:	9302      	str	r3, [sp, #8]
 8018626:	0013      	movs	r3, r2
 8018628:	2202      	movs	r2, #2
 801862a:	701a      	strb	r2, [r3, #0]
    if (storage -> ux_device_class_storage_cmd_n_lb == 0)
 801862c:	2200      	movs	r2, #0
 801862e:	4290      	cmp	r0, r2
 8018630:	d00a      	beq.n	8018648 <_ux_device_class_storage_tasks_run+0x708>
                            !storage -> ux_device_class_storage_buffer_disk;
 8018632:	9b02      	ldr	r3, [sp, #8]
 8018634:	425a      	negs	r2, r3
 8018636:	4153      	adcs	r3, r2
 8018638:	b2db      	uxtb	r3, r3
        storage -> ux_device_class_storage_buffer_disk =
 801863a:	700b      	strb	r3, [r1, #0]
            storage -> ux_device_class_storage_buffer_state[
 801863c:	18e3      	adds	r3, r4, r3
 801863e:	3378      	adds	r3, #120	@ 0x78
 8018640:	781a      	ldrb	r2, [r3, #0]
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY ==
 8018642:	2a01      	cmp	r2, #1
 8018644:	d000      	beq.n	8018648 <_ux_device_class_storage_tasks_run+0x708>
 8018646:	2204      	movs	r2, #4
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8018648:	702a      	strb	r2, [r5, #0]
    if (storage -> ux_device_class_storage_state ==
 801864a:	7833      	ldrb	r3, [r6, #0]
 801864c:	2b26      	cmp	r3, #38	@ 0x26
 801864e:	d19a      	bne.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
            storage -> ux_device_class_storage_buffer_usb])
 8018650:	0023      	movs	r3, r4
 8018652:	337a      	adds	r3, #122	@ 0x7a
 8018654:	781b      	ldrb	r3, [r3, #0]
        storage -> ux_device_class_storage_buffer_state[
 8018656:	18e3      	adds	r3, r4, r3
 8018658:	3378      	adds	r3, #120	@ 0x78
            UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	2b02      	cmp	r3, #2
 801865e:	d000      	beq.n	8018662 <_ux_device_class_storage_tasks_run+0x722>
 8018660:	e791      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
        storage -> ux_device_class_storage_state =
 8018662:	2323      	movs	r3, #35	@ 0x23
 8018664:	7033      	strb	r3, [r6, #0]
 8018666:	e78e      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
    else
    {

        /* Update buffer index.  */
        storage -> ux_device_class_storage_buffer_disk =
                             !storage -> ux_device_class_storage_buffer_disk;
 8018668:	9b02      	ldr	r3, [sp, #8]
 801866a:	4258      	negs	r0, r3
 801866c:	4143      	adcs	r3, r0
 801866e:	b2db      	uxtb	r3, r3
        storage -> ux_device_class_storage_buffer_disk =
 8018670:	700b      	strb	r3, [r1, #0]

        /* If buffer is full, start next write.  */
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
            storage -> ux_device_class_storage_buffer_state[
 8018672:	18e3      	adds	r3, r4, r3
 8018674:	3378      	adds	r3, #120	@ 0x78
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
 8018676:	7819      	ldrb	r1, [r3, #0]
        }
        else
        {

            /* Wait until buffer filled by USB.  */
            storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT;
 8018678:	2304      	movs	r3, #4
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
 801867a:	2902      	cmp	r1, #2
 801867c:	d100      	bne.n	8018680 <_ux_device_class_storage_tasks_run+0x740>
            storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 801867e:	0013      	movs	r3, r2
 8018680:	702b      	strb	r3, [r5, #0]
        }

        /* Start USB transfer.  */
        if (storage -> ux_device_class_storage_state ==
 8018682:	7833      	ldrb	r3, [r6, #0]
 8018684:	2b26      	cmp	r3, #38	@ 0x26
 8018686:	d000      	beq.n	801868a <_ux_device_class_storage_tasks_run+0x74a>
 8018688:	e77d      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
                UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
            UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY ==
            storage -> ux_device_class_storage_buffer_state[
                storage -> ux_device_class_storage_buffer_usb])
 801868a:	0023      	movs	r3, r4
 801868c:	337a      	adds	r3, #122	@ 0x7a
 801868e:	781b      	ldrb	r3, [r3, #0]
            storage -> ux_device_class_storage_buffer_state[
 8018690:	18e3      	adds	r3, r4, r3
 8018692:	3378      	adds	r3, #120	@ 0x78
                UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	2b01      	cmp	r3, #1
 8018698:	d000      	beq.n	801869c <_ux_device_class_storage_tasks_run+0x75c>
 801869a:	e774      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
 801869c:	e7e1      	b.n	8018662 <_ux_device_class_storage_tasks_run+0x722>
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 801869e:	2300      	movs	r3, #0
 80186a0:	702b      	strb	r3, [r5, #0]
        if (storage -> ux_device_class_storage_state == UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT)
 80186a2:	7832      	ldrb	r2, [r6, #0]
 80186a4:	2a26      	cmp	r2, #38	@ 0x26
 80186a6:	d000      	beq.n	80186aa <_ux_device_class_storage_tasks_run+0x76a>
 80186a8:	e76d      	b.n	8018586 <_ux_device_class_storage_tasks_run+0x646>
                    storage -> ux_slave_class_storage_cbw_lun,
 80186aa:	0021      	movs	r1, r4
            _ux_device_class_storage_csw_send(storage,
 80186ac:	0022      	movs	r2, r4
                    storage -> ux_slave_class_storage_cbw_lun,
 80186ae:	3149      	adds	r1, #73	@ 0x49
            _ux_device_class_storage_csw_send(storage,
 80186b0:	7809      	ldrb	r1, [r1, #0]
 80186b2:	3208      	adds	r2, #8
 80186b4:	e7ac      	b.n	8018610 <_ux_device_class_storage_tasks_run+0x6d0>
    }
}
static inline VOID _ux_device_class_storage_disk_error(UX_SLAVE_CLASS_STORAGE *storage)
{
    /* Abort disk operation: read or write with NULL!  */
    switch (storage -> ux_device_class_storage_cmd)
 80186b6:	0023      	movs	r3, r4
 80186b8:	337c      	adds	r3, #124	@ 0x7c
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	2ba8      	cmp	r3, #168	@ 0xa8
 80186be:	d012      	beq.n	80186e6 <_ux_device_class_storage_tasks_run+0x7a6>
 80186c0:	d80e      	bhi.n	80186e0 <_ux_device_class_storage_tasks_run+0x7a0>
 80186c2:	2b28      	cmp	r3, #40	@ 0x28
 80186c4:	d00f      	beq.n	80186e6 <_ux_device_class_storage_tasks_run+0x7a6>
 80186c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80186c8:	d189      	bne.n	80185de <_ux_device_class_storage_tasks_run+0x69e>
                ux_slave_class_storage_media_read(storage,
                        storage -> ux_slave_class_storage_cbw_lun, UX_NULL, 0, 0, UX_NULL);
        break;
    case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16:
    case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE32:
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80186ca:	0023      	movs	r3, r4
 80186cc:	2038      	movs	r0, #56	@ 0x38
 80186ce:	2200      	movs	r2, #0
 80186d0:	3349      	adds	r3, #73	@ 0x49
 80186d2:	7819      	ldrb	r1, [r3, #0]
 80186d4:	9201      	str	r2, [sp, #4]
 80186d6:	4348      	muls	r0, r1
 80186d8:	9200      	str	r2, [sp, #0]
 80186da:	1820      	adds	r0, r4, r0
 80186dc:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80186de:	e00c      	b.n	80186fa <_ux_device_class_storage_tasks_run+0x7ba>
    switch (storage -> ux_device_class_storage_cmd)
 80186e0:	2baa      	cmp	r3, #170	@ 0xaa
 80186e2:	d0f2      	beq.n	80186ca <_ux_device_class_storage_tasks_run+0x78a>
 80186e4:	e77b      	b.n	80185de <_ux_device_class_storage_tasks_run+0x69e>
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80186e6:	0023      	movs	r3, r4
 80186e8:	2038      	movs	r0, #56	@ 0x38
 80186ea:	2200      	movs	r2, #0
 80186ec:	3349      	adds	r3, #73	@ 0x49
 80186ee:	7819      	ldrb	r1, [r3, #0]
 80186f0:	9201      	str	r2, [sp, #4]
 80186f2:	4348      	muls	r0, r1
 80186f4:	9200      	str	r2, [sp, #0]
 80186f6:	1820      	adds	r0, r4, r0
 80186f8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80186fa:	0013      	movs	r3, r2
 80186fc:	0020      	movs	r0, r4
 80186fe:	47b0      	blx	r6
                ux_slave_class_storage_media_write(storage,
                        storage -> ux_slave_class_storage_cbw_lun, UX_NULL, 0, 0, UX_NULL);
        break;
 8018700:	e76d      	b.n	80185de <_ux_device_class_storage_tasks_run+0x69e>
 8018702:	46c0      	nop			@ (mov r8, r8)

08018704 <_ux_device_class_storage_test_ready>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_TEST_READY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8018704:	2338      	movs	r3, #56	@ 0x38
{
 8018706:	b573      	push	{r0, r1, r4, r5, r6, lr}
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8018708:	001d      	movs	r5, r3
 801870a:	1c4a      	adds	r2, r1, #1
 801870c:	434d      	muls	r5, r1
 801870e:	4353      	muls	r3, r2
 8018710:	1945      	adds	r5, r0, r5
 8018712:	18c3      	adds	r3, r0, r3
 8018714:	685e      	ldr	r6, [r3, #4]
 8018716:	6a2a      	ldr	r2, [r5, #32]
 8018718:	ab01      	add	r3, sp, #4
{
 801871a:	0004      	movs	r4, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 801871c:	47b0      	blx	r6
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Set the sense/code/qualifier codes for the REQUEST_SENSE command.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801871e:	9b01      	ldr	r3, [sp, #4]
 8018720:	626b      	str	r3, [r5, #36]	@ 0x24

    /* Return CSW with success/error.  */
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
                            UX_SLAVE_CLASS_STORAGE_CSW_PASSED : UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018722:	1e43      	subs	r3, r0, #1
 8018724:	4198      	sbcs	r0, r3
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
 8018726:	6560      	str	r0, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 8018728:	2000      	movs	r0, #0
 801872a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0801872c <_ux_device_class_storage_uninitialize>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 801872c:	6a03      	ldr	r3, [r0, #32]
{
 801872e:	b510      	push	{r4, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 8018730:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
    
    /* Sanity check.  */
    if (storage != UX_NULL)
 8018732:	2c00      	cmp	r4, #0
 8018734:	d005      	beq.n	8018742 <_ux_device_class_storage_uninitialize+0x16>
        /* Remove the thread used by STORAGE.  */
        _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
#endif

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1
        _ux_utility_memory_free(storage -> ux_device_class_storage_endpoint_buffer);
 8018736:	6860      	ldr	r0, [r4, #4]
 8018738:	f7fe fc3c 	bl	8016fb4 <_ux_utility_memory_free>
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(storage);
 801873c:	0020      	movs	r0, r4
 801873e:	f7fe fc39 	bl	8016fb4 <_ux_utility_memory_free>
    }
    
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8018742:	2000      	movs	r0, #0
 8018744:	bd10      	pop	{r4, pc}

08018746 <_ux_device_class_storage_verify>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_verify(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                      UX_SLAVE_ENDPOINT *endpoint_in,
                                      UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8018746:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_VERIFY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8018748:	2000      	movs	r0, #0
 801874a:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return success!  */
    return(UX_SUCCESS);
}
 801874c:	4770      	bx	lr
	...

08018750 <_ux_device_class_storage_write>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_write(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                    UX_SLAVE_ENDPOINT *endpoint_in,
                                    UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 8018750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018752:	b085      	sub	sp, #20
 8018754:	9301      	str	r3, [sp, #4]
 8018756:	ab0a      	add	r3, sp, #40	@ 0x28
 8018758:	cb20      	ldmia	r3!, {r5}
 801875a:	0004      	movs	r4, r0


    UX_PARAMETER_NOT_USED(endpoint_in);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 801875c:	1ca8      	adds	r0, r5, #2
{
 801875e:	000e      	movs	r6, r1
 8018760:	781f      	ldrb	r7, [r3, #0]
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 8018762:	f7fe fb09 	bl	8016d78 <_ux_utility_long_get_big_endian>
 8018766:	9000      	str	r0, [sp, #0]
    
    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.   */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16)
 8018768:	2f2a      	cmp	r7, #42	@ 0x2a
 801876a:	d120      	bne.n	80187ae <_ux_device_class_storage_write+0x5e>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_16);
 801876c:	1de8      	adds	r0, r5, #7
 801876e:	f7fe fc55 	bl	801701c <_ux_utility_short_get_big_endian>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8018772:	2338      	movs	r3, #56	@ 0x38
 8018774:	1c72      	adds	r2, r6, #1
 8018776:	001d      	movs	r5, r3
 8018778:	4353      	muls	r3, r2
 801877a:	18e3      	adds	r3, r4, r3
 801877c:	685b      	ldr	r3, [r3, #4]
 801877e:	4375      	muls	r5, r6
 8018780:	469c      	mov	ip, r3
 8018782:	1965      	adds	r5, r4, r5
 8018784:	0031      	movs	r1, r6
 8018786:	ab03      	add	r3, sp, #12
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 8018788:	0007      	movs	r7, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 801878a:	4666      	mov	r6, ip
 801878c:	0020      	movs	r0, r4
 801878e:	6a2a      	ldr	r2, [r5, #32]
 8018790:	47b0      	blx	r6
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8018792:	9b03      	ldr	r3, [sp, #12]
 8018794:	626b      	str	r3, [r5, #36]	@ 0x24

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018796:	2301      	movs	r3, #1
 8018798:	6563      	str	r3, [r4, #84]	@ 0x54

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 801879a:	2800      	cmp	r0, #0
 801879c:	d104      	bne.n	80187a8 <_ux_device_class_storage_write+0x58>
        /* We are done here.  */
        return(UX_ERROR);
    }

    /* Check Read Only flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 801879e:	69eb      	ldr	r3, [r5, #28]
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d108      	bne.n	80187b6 <_ux_device_class_storage_write+0x66>
    {

        /* Update the request sense.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80187a4:	4b12      	ldr	r3, [pc, #72]	@ (80187f0 <_ux_device_class_storage_write+0xa0>)
 80187a6:	626b      	str	r3, [r5, #36]	@ 0x24
        return(UX_ERROR);
 80187a8:	20ff      	movs	r0, #255	@ 0xff
    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Return completion status.  */
    return(status);
}
 80187aa:	b005      	add	sp, #20
 80187ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 80187ae:	1da8      	adds	r0, r5, #6
 80187b0:	f7fe fae2 	bl	8016d78 <_ux_utility_long_get_big_endian>
 80187b4:	e7dd      	b.n	8018772 <_ux_device_class_storage_write+0x22>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_WRITE;
 80187b6:	0022      	movs	r2, r4
 80187b8:	2104      	movs	r1, #4
 80187ba:	327d      	adds	r2, #125	@ 0x7d
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 80187bc:	692b      	ldr	r3, [r5, #16]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_WRITE;
 80187be:	7011      	strb	r1, [r2, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT;
 80187c0:	490c      	ldr	r1, [pc, #48]	@ (80187f4 <_ux_device_class_storage_write+0xa4>)
 80187c2:	3201      	adds	r2, #1
 80187c4:	8011      	strh	r1, [r2, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 80187c6:	2202      	movs	r2, #2
    storage -> ux_device_class_storage_transfer = transfer_request;
 80187c8:	0021      	movs	r1, r4
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 80187ca:	32ff      	adds	r2, #255	@ 0xff
 80187cc:	67a2      	str	r2, [r4, #120]	@ 0x78
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80187ce:	9a01      	ldr	r2, [sp, #4]
    storage -> ux_device_class_storage_transfer = transfer_request;
 80187d0:	3188      	adds	r1, #136	@ 0x88
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80187d2:	3220      	adds	r2, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 80187d4:	600a      	str	r2, [r1, #0]
    storage -> ux_device_class_storage_device_length = total_length;
 80187d6:	0022      	movs	r2, r4
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 80187d8:	437b      	muls	r3, r7
    storage -> ux_device_class_storage_device_length = total_length;
 80187da:	328c      	adds	r2, #140	@ 0x8c
 80187dc:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_length = total_length;
 80187de:	6093      	str	r3, [r2, #8]
    storage -> ux_device_class_storage_data_count = 0;
 80187e0:	0023      	movs	r3, r4
    storage -> ux_device_class_storage_cmd_lba = lba;
 80187e2:	9a00      	ldr	r2, [sp, #0]
    storage -> ux_device_class_storage_data_count = 0;
 80187e4:	3398      	adds	r3, #152	@ 0x98
 80187e6:	6018      	str	r0, [r3, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 80187e8:	60da      	str	r2, [r3, #12]
    storage -> ux_device_class_storage_cmd_n_lb = total_number_blocks;
 80187ea:	611f      	str	r7, [r3, #16]
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80187ec:	6560      	str	r0, [r4, #84]	@ 0x54
    return(status);
 80187ee:	e7dc      	b.n	80187aa <_ux_device_class_storage_write+0x5a>
 80187f0:	00002707 	.word	0x00002707
 80187f4:	00002304 	.word	0x00002304

080187f8 <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 80187f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80187fa:	0004      	movs	r4, r0

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80187fc:	6847      	ldr	r7, [r0, #4]

    UX_DISABLE
 80187fe:	f000 fd07 	bl	8019210 <_ux_utility_interrupt_disable>

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8018802:	68a3      	ldr	r3, [r4, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 8018804:	2280      	movs	r2, #128	@ 0x80
 8018806:	0019      	movs	r1, r3
 8018808:	00d2      	lsls	r2, r2, #3
 801880a:	4011      	ands	r1, r2
 801880c:	9101      	str	r1, [sp, #4]
 801880e:	4213      	tst	r3, r2
 8018810:	d002      	beq.n	8018818 <_ux_dcd_stm32_setup_isr_pending+0x20>

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
    if (ed_status == 0)
    {
        UX_RESTORE
 8018812:	f000 fd01 	bl	8019218 <_ux_utility_interrupt_restore>
        break;
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
}
 8018816:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
 8018818:	26c0      	movs	r6, #192	@ 0xc0
 801881a:	0019      	movs	r1, r3
 801881c:	00b6      	lsls	r6, r6, #2
 801881e:	4031      	ands	r1, r6
 8018820:	9100      	str	r1, [sp, #0]
    if (ed_status == 0)
 8018822:	4233      	tst	r3, r6
 8018824:	d0f5      	beq.n	8018812 <_ux_dcd_stm32_setup_isr_pending+0x1a>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 8018826:	491b      	ldr	r1, [pc, #108]	@ (8018894 <_ux_dcd_stm32_setup_isr_pending+0x9c>)
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8018828:	003d      	movs	r5, r7
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 801882a:	400b      	ands	r3, r1
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 801882c:	431a      	orrs	r2, r3
 801882e:	60a2      	str	r2, [r4, #8]
    UX_RESTORE
 8018830:	f000 fcf2 	bl	8019218 <_ux_utility_interrupt_restore>
    switch(ed_status)
 8018834:	2280      	movs	r2, #128	@ 0x80
 8018836:	9900      	ldr	r1, [sp, #0]
 8018838:	2380      	movs	r3, #128	@ 0x80
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 801883a:	3520      	adds	r5, #32
    switch(ed_status)
 801883c:	0052      	lsls	r2, r2, #1
 801883e:	4291      	cmp	r1, r2
 8018840:	d00c      	beq.n	801885c <_ux_dcd_stm32_setup_isr_pending+0x64>
 8018842:	0022      	movs	r2, r4
 8018844:	3294      	adds	r2, #148	@ 0x94
 8018846:	42b1      	cmp	r1, r6
 8018848:	d013      	beq.n	8018872 <_ux_dcd_stm32_setup_isr_pending+0x7a>
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 801884a:	6816      	ldr	r6, [r2, #0]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801884c:	0028      	movs	r0, r5
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801884e:	73a3      	strb	r3, [r4, #14]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018850:	f7fd fd0e 	bl	8016270 <_ux_device_stack_control_request_process>
 8018854:	1e01      	subs	r1, r0, #0
 8018856:	d107      	bne.n	8018868 <_ux_dcd_stm32_setup_isr_pending+0x70>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8018858:	2304      	movs	r3, #4
 801885a:	e014      	b.n	8018886 <_ux_dcd_stm32_setup_isr_pending+0x8e>
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801885c:	73a3      	strb	r3, [r4, #14]
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 801885e:	2301      	movs	r3, #1
    _ux_device_stack_control_request_process(transfer_request);
 8018860:	0028      	movs	r0, r5
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8018862:	7323      	strb	r3, [r4, #12]
    _ux_device_stack_control_request_process(transfer_request);
 8018864:	f7fd fd04 	bl	8016270 <_ux_device_stack_control_request_process>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 8018868:	68a3      	ldr	r3, [r4, #8]
 801886a:	4a0b      	ldr	r2, [pc, #44]	@ (8018898 <_ux_dcd_stm32_setup_isr_pending+0xa0>)
 801886c:	4013      	ands	r3, r2
 801886e:	60a3      	str	r3, [r4, #8]
 8018870:	e7d1      	b.n	8018816 <_ux_dcd_stm32_setup_isr_pending+0x1e>
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 8018872:	6816      	ldr	r6, [r2, #0]
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018874:	9a01      	ldr	r2, [sp, #4]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018876:	0028      	movs	r0, r5
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018878:	647a      	str	r2, [r7, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801887a:	73a3      	strb	r3, [r4, #14]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801887c:	f7fd fcf8 	bl	8016270 <_ux_device_stack_control_request_process>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8018880:	2303      	movs	r3, #3
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018882:	1e01      	subs	r1, r0, #0
 8018884:	d1f0      	bne.n	8018868 <_ux_dcd_stm32_setup_isr_pending+0x70>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8018886:	7323      	strb	r3, [r4, #12]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8018888:	000a      	movs	r2, r1
 801888a:	000b      	movs	r3, r1
 801888c:	0030      	movs	r0, r6
 801888e:	f7f8 f93a 	bl	8010b06 <HAL_PCD_EP_Transmit>
 8018892:	e7e9      	b.n	8018868 <_ux_dcd_stm32_setup_isr_pending+0x70>
 8018894:	fffffcff 	.word	0xfffffcff
 8018898:	fffffbff 	.word	0xfffffbff

0801889c <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801889c:	4b27      	ldr	r3, [pc, #156]	@ (801893c <HAL_PCD_SetupStageCallback+0xa0>)
{
 801889e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80188a0:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80188a2:	2208      	movs	r2, #8
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80188a4:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80188a6:	23a6      	movs	r3, #166	@ 0xa6
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80188a8:	686c      	ldr	r4, [r5, #4]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	0027      	movs	r7, r4
 80188ae:	375c      	adds	r7, #92	@ 0x5c
 80188b0:	18c1      	adds	r1, r0, r3
{
 80188b2:	0006      	movs	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80188b4:	0038      	movs	r0, r7
 80188b6:	f7fe fb73 	bl	8016fa0 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80188ba:	2301      	movs	r3, #1

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80188bc:	210e      	movs	r1, #14
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80188be:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80188c0:	6263      	str	r3, [r4, #36]	@ 0x24
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80188c2:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80188c4:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80188c6:	438b      	bics	r3, r1
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80188c8:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80188ca:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 80188cc:	7839      	ldrb	r1, [r7, #0]
 80188ce:	297f      	cmp	r1, #127	@ 0x7f
 80188d0:	d904      	bls.n	80188dc <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 80188d2:	3201      	adds	r2, #1
 80188d4:	32ff      	adds	r2, #255	@ 0xff

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 80188d6:	4313      	orrs	r3, r2
 80188d8:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
 80188da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 80188dc:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80188de:	0022      	movs	r2, r4
 80188e0:	3262      	adds	r2, #98	@ 0x62
 80188e2:	7812      	ldrb	r2, [r2, #0]
 80188e4:	2a00      	cmp	r2, #0
 80188e6:	d107      	bne.n	80188f8 <HAL_PCD_SetupStageCallback+0x5c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 80188e8:	0022      	movs	r2, r4
 80188ea:	3263      	adds	r2, #99	@ 0x63
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80188ec:	7812      	ldrb	r2, [r2, #0]
 80188ee:	2a00      	cmp	r2, #0
 80188f0:	d102      	bne.n	80188f8 <HAL_PCD_SetupStageCallback+0x5c>
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 80188f2:	2280      	movs	r2, #128	@ 0x80
 80188f4:	0092      	lsls	r2, r2, #2
 80188f6:	e7ee      	b.n	80188d6 <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80188f8:	0020      	movs	r0, r4
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80188fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80188fc:	3062      	adds	r0, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80188fe:	9301      	str	r3, [sp, #4]
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8018900:	f7fe fb87 	bl	8017012 <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018904:	2280      	movs	r2, #128	@ 0x80
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8018906:	0003      	movs	r3, r0
 8018908:	2700      	movs	r7, #0
 801890a:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801890c:	0052      	lsls	r2, r2, #1
 801890e:	4290      	cmp	r0, r2
 8018910:	d908      	bls.n	8018924 <HAL_PCD_SetupStageCallback+0x88>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8018912:	0028      	movs	r0, r5
 8018914:	9901      	ldr	r1, [sp, #4]
 8018916:	f000 f95d 	bl	8018bd4 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 801891a:	2380      	movs	r3, #128	@ 0x80
 801891c:	68aa      	ldr	r2, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801891e:	732f      	strb	r7, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8018920:	009b      	lsls	r3, r3, #2
 8018922:	e7d8      	b.n	80188d6 <HAL_PCD_SetupStageCallback+0x3a>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8018924:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                HAL_PCD_EP_Receive(hpcd,
 8018926:	9901      	ldr	r1, [sp, #4]
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8018928:	63a7      	str	r7, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801892a:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
 801892c:	0030      	movs	r0, r6
 801892e:	7b89      	ldrb	r1, [r1, #14]
 8018930:	f7f8 f8c6 	bl	8010ac0 <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8018934:	2302      	movs	r3, #2
 8018936:	732b      	strb	r3, [r5, #12]
 8018938:	e7cf      	b.n	80188da <HAL_PCD_SetupStageCallback+0x3e>
 801893a:	46c0      	nop			@ (mov r8, r8)
 801893c:	200030e0 	.word	0x200030e0

08018940 <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018940:	4b33      	ldr	r3, [pc, #204]	@ (8018a10 <HAL_PCD_DataInStageCallback+0xd0>)
{
 8018942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	000a      	movs	r2, r1
 8018948:	69de      	ldr	r6, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 801894a:	230f      	movs	r3, #15
{
 801894c:	0007      	movs	r7, r0
 801894e:	000d      	movs	r5, r1
 8018950:	401a      	ands	r2, r3
    if ((epnum & 0xF) != 0)
 8018952:	4219      	tst	r1, r3
 8018954:	d012      	beq.n	801897c <HAL_PCD_DataInStageCallback+0x3c>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8018956:	3b03      	subs	r3, #3
 8018958:	4353      	muls	r3, r2
 801895a:	0019      	movs	r1, r3
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801895c:	18f3      	adds	r3, r6, r3
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 801895e:	314c      	adds	r1, #76	@ 0x4c
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8018960:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8018962:	1871      	adds	r1, r6, r1
    }
    else
    {

        /* Check if a ZLP should be armed.  */
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8018964:	2200      	movs	r2, #0
 8018966:	6da0      	ldr	r0, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_requested_length)
 8018968:	6b63      	ldr	r3, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 801896a:	4290      	cmp	r0, r2
 801896c:	d046      	beq.n	80189fc <HAL_PCD_DataInStageCallback+0xbc>
 801896e:	4293      	cmp	r3, r2
 8018970:	d044      	beq.n	80189fc <HAL_PCD_DataInStageCallback+0xbc>
            /* Reset the ZLP condition.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;

            /* Arm a ZLP packet on IN.  */
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8018972:	0013      	movs	r3, r2
 8018974:	0029      	movs	r1, r5
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8018976:	65a2      	str	r2, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8018978:	63e2      	str	r2, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 801897a:	e039      	b.n	80189f0 <HAL_PCD_DataInStageCallback+0xb0>
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801897c:	6874      	ldr	r4, [r6, #4]
    if (epnum == 0U)
 801897e:	2900      	cmp	r1, #0
 8018980:	d13a      	bne.n	80189f8 <HAL_PCD_DataInStageCallback+0xb8>
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8018982:	7b33      	ldrb	r3, [r6, #12]
 8018984:	2b01      	cmp	r3, #1
 8018986:	d115      	bne.n	80189b4 <HAL_PCD_DataInStageCallback+0x74>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018988:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801898a:	000a      	movs	r2, r1
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801898c:	9301      	str	r3, [sp, #4]
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801898e:	000b      	movs	r3, r1
 8018990:	f7f8 f896 	bl	8010ac0 <HAL_PCD_EP_Receive>
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8018994:	9b01      	ldr	r3, [sp, #4]
 8018996:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8018998:	8a18      	ldrh	r0, [r3, #16]
 801899a:	4281      	cmp	r1, r0
 801899c:	d81d      	bhi.n	80189da <HAL_PCD_DataInStageCallback+0x9a>
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801899e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80189a0:	2b01      	cmp	r3, #1
 80189a2:	d108      	bne.n	80189b6 <HAL_PCD_DataInStageCallback+0x76>
                    HAL_PCD_EP_Transmit(hpcd,
 80189a4:	9b01      	ldr	r3, [sp, #4]
 80189a6:	002a      	movs	r2, r5
 80189a8:	7b99      	ldrb	r1, [r3, #14]
 80189aa:	0038      	movs	r0, r7
 80189ac:	002b      	movs	r3, r5
 80189ae:	f7f8 f8aa 	bl	8010b06 <HAL_PCD_EP_Transmit>
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80189b2:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 80189b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80189b6:	2302      	movs	r3, #2
 80189b8:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 80189ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80189bc:	68b2      	ldr	r2, [r6, #8]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 80189be:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80189c0:	2308      	movs	r3, #8
 80189c2:	4313      	orrs	r3, r2
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80189c4:	6465      	str	r5, [r4, #68]	@ 0x44
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80189c6:	60b3      	str	r3, [r6, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 80189c8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d002      	beq.n	80189d4 <HAL_PCD_DataInStageCallback+0x94>
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80189ce:	0020      	movs	r0, r4
 80189d0:	3020      	adds	r0, #32
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 80189d2:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80189d4:	2304      	movs	r3, #4
 80189d6:	7333      	strb	r3, [r6, #12]
 80189d8:	e7ec      	b.n	80189b4 <HAL_PCD_DataInStageCallback+0x74>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80189da:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80189dc:	4283      	cmp	r3, r0
 80189de:	d900      	bls.n	80189e2 <HAL_PCD_DataInStageCallback+0xa2>
 80189e0:	0003      	movs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80189e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 80189e4:	1ac9      	subs	r1, r1, r3
 80189e6:	63e1      	str	r1, [r4, #60]	@ 0x3c
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80189e8:	1812      	adds	r2, r2, r0
                HAL_PCD_EP_Transmit(hpcd,
 80189ea:	9901      	ldr	r1, [sp, #4]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80189ec:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Transmit(hpcd,
 80189ee:	7b89      	ldrb	r1, [r1, #14]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 80189f0:	0038      	movs	r0, r7
 80189f2:	f7f8 f888 	bl	8010b06 <HAL_PCD_EP_Transmit>
 80189f6:	e7dd      	b.n	80189b4 <HAL_PCD_DataInStageCallback+0x74>
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 80189f8:	1d31      	adds	r1, r6, #4
 80189fa:	e7b3      	b.n	8018964 <HAL_PCD_DataInStageCallback+0x24>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80189fc:	6462      	str	r2, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80189fe:	2202      	movs	r2, #2
            transfer_request -> ux_slave_transfer_request_actual_length =
 8018a00:	63a3      	str	r3, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018a02:	2308      	movs	r3, #8
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8018a04:	6222      	str	r2, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018a06:	684a      	ldr	r2, [r1, #4]
 8018a08:	4313      	orrs	r3, r2
 8018a0a:	604b      	str	r3, [r1, #4]
}
 8018a0c:	e7d2      	b.n	80189b4 <HAL_PCD_DataInStageCallback+0x74>
 8018a0e:	46c0      	nop			@ (mov r8, r8)
 8018a10:	200030e0 	.word	0x200030e0

08018a14 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8018a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018a16:	4b21      	ldr	r3, [pc, #132]	@ (8018a9c <HAL_PCD_DataOutStageCallback+0x88>)
 8018a18:	250c      	movs	r5, #12
 8018a1a:	681b      	ldr	r3, [r3, #0]
{
 8018a1c:	0007      	movs	r7, r0
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018a1e:	69de      	ldr	r6, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8018a20:	230f      	movs	r3, #15
 8018a22:	400b      	ands	r3, r1
 8018a24:	435d      	muls	r5, r3
 8018a26:	1975      	adds	r5, r6, r5
 8018a28:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8018a2a:	2900      	cmp	r1, #0
 8018a2c:	d12a      	bne.n	8018a84 <HAL_PCD_DataOutStageCallback+0x70>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8018a2e:	7b33      	ldrb	r3, [r6, #12]
 8018a30:	2b02      	cmp	r3, #2
 8018a32:	d111      	bne.n	8018a58 <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8018a34:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018a36:	f7f8 f85e 	bl	8010af6 <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8018a3a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
 8018a3c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8018a3e:	18c3      	adds	r3, r0, r3
 8018a40:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8018a42:	4293      	cmp	r3, r2
 8018a44:	d811      	bhi.n	8018a6a <HAL_PCD_DataOutStageCallback+0x56>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8018a46:	d002      	beq.n	8018a4e <HAL_PCD_DataOutStageCallback+0x3a>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8018a48:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8018a4a:	4283      	cmp	r3, r0
 8018a4c:	d005      	beq.n	8018a5a <HAL_PCD_DataOutStageCallback+0x46>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 8018a4e:	23c0      	movs	r3, #192	@ 0xc0
 8018a50:	68b2      	ldr	r2, [r6, #8]
 8018a52:	009b      	lsls	r3, r3, #2
 8018a54:	4313      	orrs	r3, r2
 8018a56:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8018a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018a5a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
 8018a5c:	0038      	movs	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018a5e:	18d2      	adds	r2, r2, r3
 8018a60:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
 8018a62:	7ba9      	ldrb	r1, [r5, #14]
 8018a64:	f7f8 f82c 	bl	8010ac0 <HAL_PCD_EP_Receive>
 8018a68:	e7f6      	b.n	8018a58 <HAL_PCD_DataOutStageCallback+0x44>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8018a6a:	2327      	movs	r3, #39	@ 0x27
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018a6c:	68b2      	ldr	r2, [r6, #8]
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8018a6e:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018a70:	3b1f      	subs	r3, #31
 8018a72:	4313      	orrs	r3, r2
 8018a74:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8018a76:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d0ed      	beq.n	8018a58 <HAL_PCD_DataOutStageCallback+0x44>
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8018a7c:	0020      	movs	r0, r4
 8018a7e:	3020      	adds	r0, #32
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8018a80:	4798      	blx	r3
 8018a82:	e7e9      	b.n	8018a58 <HAL_PCD_DataOutStageCallback+0x44>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018a84:	f7f8 f837 	bl	8010af6 <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018a88:	2300      	movs	r3, #0
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018a8a:	68aa      	ldr	r2, [r5, #8]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018a8c:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8018a8e:	3302      	adds	r3, #2
 8018a90:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018a92:	3306      	adds	r3, #6
 8018a94:	4313      	orrs	r3, r2
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018a96:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018a98:	60ab      	str	r3, [r5, #8]
}
 8018a9a:	e7dd      	b.n	8018a58 <HAL_PCD_DataOutStageCallback+0x44>
 8018a9c:	200030e0 	.word	0x200030e0

08018aa0 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8018aa0:	b570      	push	{r4, r5, r6, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8018aa2:	4c08      	ldr	r4, [pc, #32]	@ (8018ac4 <HAL_PCD_ResetCallback+0x24>)
 8018aa4:	6823      	ldr	r3, [r4, #0]
 8018aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d001      	beq.n	8018ab0 <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8018aac:	f7fd fda6 	bl	80165fc <_ux_device_stack_disconnect>
        break;

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8018ab0:	2501      	movs	r5, #1
 8018ab2:	6823      	ldr	r3, [r4, #0]
 8018ab4:	33fc      	adds	r3, #252	@ 0xfc
 8018ab6:	649d      	str	r5, [r3, #72]	@ 0x48
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8018ab8:	f000 f92c 	bl	8018d14 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8018abc:	6823      	ldr	r3, [r4, #0]
 8018abe:	625d      	str	r5, [r3, #36]	@ 0x24
}
 8018ac0:	bd70      	pop	{r4, r5, r6, pc}
 8018ac2:	46c0      	nop			@ (mov r8, r8)
 8018ac4:	200030e0 	.word	0x200030e0

08018ac8 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018ac8:	4b04      	ldr	r3, [pc, #16]	@ (8018adc <HAL_PCD_SuspendCallback+0x14>)
{
 8018aca:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	33fc      	adds	r3, #252	@ 0xfc
 8018ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d001      	beq.n	8018ada <HAL_PCD_SuspendCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8018ad6:	20f4      	movs	r0, #244	@ 0xf4
 8018ad8:	4798      	blx	r3
    }
}
 8018ada:	bd10      	pop	{r4, pc}
 8018adc:	200030e0 	.word	0x200030e0

08018ae0 <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018ae0:	4b04      	ldr	r3, [pc, #16]	@ (8018af4 <HAL_PCD_ResumeCallback+0x14>)
{
 8018ae2:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	33fc      	adds	r3, #252	@ 0xfc
 8018ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d001      	beq.n	8018af2 <HAL_PCD_ResumeCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8018aee:	20f3      	movs	r0, #243	@ 0xf3
 8018af0:	4798      	blx	r3
    }
}
 8018af2:	bd10      	pop	{r4, pc}
 8018af4:	200030e0 	.word	0x200030e0

08018af8 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018af8:	4b04      	ldr	r3, [pc, #16]	@ (8018b0c <HAL_PCD_SOFCallback+0x14>)
{
 8018afa:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	33fc      	adds	r3, #252	@ 0xfc
 8018b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d001      	beq.n	8018b0a <HAL_PCD_SOFCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8018b06:	20f0      	movs	r0, #240	@ 0xf0
 8018b08:	4798      	blx	r3
    }
}
 8018b0a:	bd10      	pop	{r4, pc}
 8018b0c:	200030e0 	.word	0x200030e0

08018b10 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b12:	267f      	movs	r6, #127	@ 0x7f
 8018b14:	000a      	movs	r2, r1
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018b16:	7b89      	ldrb	r1, [r1, #14]
{
 8018b18:	0005      	movs	r5, r0

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);

    if (ed == UX_NULL)
        return(UX_NO_ED_AVAILABLE);
 8018b1a:	2414      	movs	r4, #20
 8018b1c:	400e      	ands	r6, r1
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8018b1e:	2e05      	cmp	r6, #5
 8018b20:	d829      	bhi.n	8018b76 <_ux_dcd_stm32_endpoint_create+0x66>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8018b22:	0003      	movs	r3, r0
 8018b24:	3394      	adds	r3, #148	@ 0x94
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	469c      	mov	ip, r3
 8018b2a:	791b      	ldrb	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8018b2c:	429e      	cmp	r6, r3
 8018b2e:	d222      	bcs.n	8018b76 <_ux_dcd_stm32_endpoint_create+0x66>
        return(UX_NULL);

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 8018b30:	230c      	movs	r3, #12
 8018b32:	b24c      	sxtb	r4, r1
 8018b34:	4373      	muls	r3, r6
 8018b36:	2c00      	cmp	r4, #0
 8018b38:	da1f      	bge.n	8018b7a <_ux_dcd_stm32_endpoint_create+0x6a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8018b3a:	334c      	adds	r3, #76	@ 0x4c
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8018b3c:	18eb      	adds	r3, r5, r3

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8018b3e:	685e      	ldr	r6, [r3, #4]
 8018b40:	2501      	movs	r5, #1
 8018b42:	0034      	movs	r4, r6
 8018b44:	402c      	ands	r4, r5
 8018b46:	422e      	tst	r6, r5
 8018b48:	d119      	bne.n	8018b7e <_ux_dcd_stm32_endpoint_create+0x6e>
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018b4a:	2780      	movs	r7, #128	@ 0x80
 8018b4c:	0008      	movs	r0, r1
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8018b4e:	4335      	orrs	r5, r6
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018b50:	43b8      	bics	r0, r7
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8018b52:	605d      	str	r5, [r3, #4]
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018b54:	0007      	movs	r7, r0

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8018b56:	6093      	str	r3, [r2, #8]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8018b58:	257f      	movs	r5, #127	@ 0x7f
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 8018b5a:	7258      	strb	r0, [r3, #9]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8018b5c:	0008      	movs	r0, r1
 8018b5e:	43a8      	bics	r0, r5
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8018b60:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8018b62:	7298      	strb	r0, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8018b64:	2f00      	cmp	r7, #0
 8018b66:	d006      	beq.n	8018b76 <_ux_dcd_stm32_endpoint_create+0x66>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8018b68:	2503      	movs	r5, #3
 8018b6a:	7bd3      	ldrb	r3, [r2, #15]
 8018b6c:	4660      	mov	r0, ip
 8018b6e:	8a12      	ldrh	r2, [r2, #16]
 8018b70:	402b      	ands	r3, r5
 8018b72:	f7f7 ff51 	bl	8010a18 <HAL_PCD_EP_Open>
        return(UX_SUCCESS);
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
}
 8018b76:	0020      	movs	r0, r4
 8018b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b7a:	3304      	adds	r3, #4
 8018b7c:	e7de      	b.n	8018b3c <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 8018b7e:	2414      	movs	r4, #20
 8018b80:	e7f9      	b.n	8018b76 <_ux_dcd_stm32_endpoint_create+0x66>

08018b82 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018b82:	b510      	push	{r4, lr}

    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8018b84:	2400      	movs	r4, #0
 8018b86:	688b      	ldr	r3, [r1, #8]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018b88:	3094      	adds	r0, #148	@ 0x94
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8018b8a:	605c      	str	r4, [r3, #4]
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018b8c:	7b89      	ldrb	r1, [r1, #14]
 8018b8e:	6800      	ldr	r0, [r0, #0]
 8018b90:	f7f7 ff70 	bl	8010a74 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 8018b94:	0020      	movs	r0, r4
 8018b96:	bd10      	pop	{r4, pc}

08018b98 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8018b9a:	688e      	ldr	r6, [r1, #8]
{
 8018b9c:	000c      	movs	r4, r1
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8018b9e:	2700      	movs	r7, #0
{
 8018ba0:	0005      	movs	r5, r0
    UX_DISABLE
 8018ba2:	f000 fb35 	bl	8019210 <_ux_utility_interrupt_disable>
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8018ba6:	6873      	ldr	r3, [r6, #4]
 8018ba8:	4a09      	ldr	r2, [pc, #36]	@ (8018bd0 <_ux_dcd_stm32_endpoint_reset+0x38>)
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8018baa:	7237      	strb	r7, [r6, #8]
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8018bac:	4013      	ands	r3, r2
 8018bae:	6073      	str	r3, [r6, #4]
    UX_DISABLE
 8018bb0:	9001      	str	r0, [sp, #4]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8018bb2:	3594      	adds	r5, #148	@ 0x94
 8018bb4:	7ba1      	ldrb	r1, [r4, #14]
 8018bb6:	6828      	ldr	r0, [r5, #0]
 8018bb8:	f7f7 ffeb 	bl	8010b92 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018bbc:	7ba1      	ldrb	r1, [r4, #14]
 8018bbe:	6828      	ldr	r0, [r5, #0]
 8018bc0:	f7f8 f827 	bl	8010c12 <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 8018bc4:	9801      	ldr	r0, [sp, #4]
 8018bc6:	f000 fb27 	bl	8019218 <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 8018bca:	0038      	movs	r0, r7
 8018bcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018bce:	46c0      	nop			@ (mov r8, r8)
 8018bd0:	fffffcf3 	.word	0xfffffcf3

08018bd4 <_ux_dcd_stm32_endpoint_stall>:

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8018bd4:	2204      	movs	r2, #4
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8018bd6:	688b      	ldr	r3, [r1, #8]
{
 8018bd8:	b510      	push	{r4, lr}
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8018bda:	685c      	ldr	r4, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 8018bdc:	3094      	adds	r0, #148	@ 0x94
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8018bde:	4322      	orrs	r2, r4
 8018be0:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 8018be2:	7b89      	ldrb	r1, [r1, #14]
 8018be4:	7a9b      	ldrb	r3, [r3, #10]
 8018be6:	6800      	ldr	r0, [r0, #0]
 8018be8:	4319      	orrs	r1, r3
 8018bea:	f7f7 ffa4 	bl	8010b36 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 8018bee:	2000      	movs	r0, #0
 8018bf0:	bd10      	pop	{r4, pc}

08018bf2 <_ux_dcd_stm32_endpoint_status>:
ULONG ep_num = ep_addr & 0x7Fu;
 8018bf2:	227f      	movs	r2, #127	@ 0x7f
 8018bf4:	400a      	ands	r2, r1
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8018bf6:	2a05      	cmp	r2, #5
 8018bf8:	d815      	bhi.n	8018c26 <_ux_dcd_stm32_endpoint_status+0x34>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8018bfa:	0003      	movs	r3, r0
 8018bfc:	3394      	adds	r3, #148	@ 0x94
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	791b      	ldrb	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8018c02:	429a      	cmp	r2, r3
 8018c04:	d20f      	bcs.n	8018c26 <_ux_dcd_stm32_endpoint_status+0x34>
    if (ep_dir)
 8018c06:	230c      	movs	r3, #12
 8018c08:	4353      	muls	r3, r2
 8018c0a:	0609      	lsls	r1, r1, #24
 8018c0c:	d509      	bpl.n	8018c22 <_ux_dcd_stm32_endpoint_status+0x30>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8018c0e:	334c      	adds	r3, #76	@ 0x4c
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8018c10:	18c0      	adds	r0, r0, r3

    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8018c12:	2301      	movs	r3, #1
 8018c14:	6842      	ldr	r2, [r0, #4]
        return(UX_ERROR);
 8018c16:	20ff      	movs	r0, #255	@ 0xff
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8018c18:	421a      	tst	r2, r3
 8018c1a:	d001      	beq.n	8018c20 <_ux_dcd_stm32_endpoint_status+0x2e>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8018c1c:	0890      	lsrs	r0, r2, #2
 8018c1e:	4018      	ands	r0, r3
        return(UX_FALSE);
    else
        return(UX_TRUE);
}
 8018c20:	4770      	bx	lr
 8018c22:	3304      	adds	r3, #4
 8018c24:	e7f4      	b.n	8018c10 <_ux_dcd_stm32_endpoint_status+0x1e>
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8018c26:	2300      	movs	r3, #0
 8018c28:	685b      	ldr	r3, [r3, #4]
 8018c2a:	deff      	udf	#255	@ 0xff

08018c2c <_ux_dcd_stm32_frame_number_get>:
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{

    /* This function never fails. */
    return(UX_SUCCESS);
}
 8018c2c:	2000      	movs	r0, #0
 8018c2e:	4770      	bx	lr

08018c30 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 8018c30:	0003      	movs	r3, r0
 8018c32:	0008      	movs	r0, r1
 8018c34:	0011      	movs	r1, r2
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8018c36:	681a      	ldr	r2, [r3, #0]
{
 8018c38:	b510      	push	{r4, lr}
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8018c3a:	2a00      	cmp	r2, #0
 8018c3c:	d106      	bne.n	8018c4c <_ux_dcd_stm32_function+0x1c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 8018c3e:	2102      	movs	r1, #2
 8018c40:	3255      	adds	r2, #85	@ 0x55
 8018c42:	0008      	movs	r0, r1
 8018c44:	f7fd fff6 	bl	8016c34 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 8018c48:	2055      	movs	r0, #85	@ 0x55
        break;
    }

    /* Return completion status.  */
    return(status);
}
 8018c4a:	bd10      	pop	{r4, pc}
    switch(function)
 8018c4c:	380a      	subs	r0, #10
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018c4e:	69db      	ldr	r3, [r3, #28]
    switch(function)
 8018c50:	280b      	cmp	r0, #11
 8018c52:	d83a      	bhi.n	8018cca <_ux_dcd_stm32_function+0x9a>
 8018c54:	f7e7 fa6a 	bl	800012c <__gnu_thumb1_case_uqi>
 8018c58:	0e0a3906 	.word	0x0e0a3906
 8018c5c:	221a1612 	.word	0x221a1612
 8018c60:	311e2835 	.word	0x311e2835
        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 8018c64:	0018      	movs	r0, r3
 8018c66:	f7ff ffe1 	bl	8018c2c <_ux_dcd_stm32_frame_number_get>
        break;
 8018c6a:	e7ee      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 8018c6c:	0018      	movs	r0, r3
 8018c6e:	f000 f8cf 	bl	8018e10 <_ux_dcd_stm32_transfer_run>
        break;
 8018c72:	e7ea      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 8018c74:	0018      	movs	r0, r3
 8018c76:	f000 f8bd 	bl	8018df4 <_ux_dcd_stm32_transfer_abort>
        break;
 8018c7a:	e7e6      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8018c7c:	0018      	movs	r0, r3
 8018c7e:	f7ff ff47 	bl	8018b10 <_ux_dcd_stm32_endpoint_create>
        break;
 8018c82:	e7e2      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8018c84:	0018      	movs	r0, r3
 8018c86:	f7ff ff7c 	bl	8018b82 <_ux_dcd_stm32_endpoint_destroy>
        break;
 8018c8a:	e7de      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8018c8c:	0018      	movs	r0, r3
 8018c8e:	f7ff ff83 	bl	8018b98 <_ux_dcd_stm32_endpoint_reset>
        break;
 8018c92:	e7da      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8018c94:	0018      	movs	r0, r3
 8018c96:	f7ff ff9d 	bl	8018bd4 <_ux_dcd_stm32_endpoint_stall>
        break;
 8018c9a:	e7d6      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8018c9c:	3394      	adds	r3, #148	@ 0x94
 8018c9e:	6818      	ldr	r0, [r3, #0]
 8018ca0:	b2c9      	uxtb	r1, r1
 8018ca2:	f7f7 fa5b 	bl	801015c <HAL_PCD_SetAddress>
        break;
 8018ca6:	e7d0      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8018ca8:	290b      	cmp	r1, #11
 8018caa:	d001      	beq.n	8018cb0 <_ux_dcd_stm32_function+0x80>
        status = UX_SUCCESS;
 8018cac:	2000      	movs	r0, #0
 8018cae:	e7cc      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 8018cb0:	3394      	adds	r3, #148	@ 0x94
 8018cb2:	6818      	ldr	r0, [r3, #0]
 8018cb4:	f7f7 fa3f 	bl	8010136 <HAL_PCD_Stop>
 8018cb8:	e7c7      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 8018cba:	0018      	movs	r0, r3
 8018cbc:	f7ff ff99 	bl	8018bf2 <_ux_dcd_stm32_endpoint_status>
        break;
 8018cc0:	e7c3      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>
        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 8018cc2:	0018      	movs	r0, r3
 8018cc4:	f7ff fd98 	bl	80187f8 <_ux_dcd_stm32_setup_isr_pending>
        break;
 8018cc8:	e7f0      	b.n	8018cac <_ux_dcd_stm32_function+0x7c>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8018cca:	2102      	movs	r1, #2
 8018ccc:	2254      	movs	r2, #84	@ 0x54
 8018cce:	0008      	movs	r0, r1
 8018cd0:	f7fd ffb0 	bl	8016c34 <_ux_system_error_handler>
        status =  UX_FUNCTION_NOT_SUPPORTED;
 8018cd4:	2054      	movs	r0, #84	@ 0x54
        break;
 8018cd6:	e7b8      	b.n	8018c4a <_ux_dcd_stm32_function+0x1a>

08018cd8 <_ux_dcd_stm32_initialize>:


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8018d0c <_ux_dcd_stm32_initialize+0x34>)
{
 8018cda:	b570      	push	{r4, r5, r6, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018cdc:	681c      	ldr	r4, [r3, #0]
{
 8018cde:	000d      	movs	r5, r1

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8018ce0:	2380      	movs	r3, #128	@ 0x80

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8018ce2:	2100      	movs	r1, #0
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8018ce4:	6063      	str	r3, [r4, #4]
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8018ce6:	2298      	movs	r2, #152	@ 0x98
 8018ce8:	0008      	movs	r0, r1
 8018cea:	f7fe f863 	bl	8016db4 <_ux_utility_memory_allocate>
 8018cee:	0003      	movs	r3, r0

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
        return(UX_MEMORY_INSUFFICIENT);
 8018cf0:	2012      	movs	r0, #18
    if(dcd_stm32 == UX_NULL)
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d008      	beq.n	8018d08 <_ux_dcd_stm32_initialize+0x30>

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8018cf6:	4a06      	ldr	r2, [pc, #24]	@ (8018d10 <_ux_dcd_stm32_initialize+0x38>)
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 8018cf8:	61e3      	str	r3, [r4, #28]
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 8018cfa:	601c      	str	r4, [r3, #0]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8018cfc:	3394      	adds	r3, #148	@ 0x94
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8018cfe:	61a2      	str	r2, [r4, #24]
    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8018d00:	601d      	str	r5, [r3, #0]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8018d02:	2301      	movs	r3, #1

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8018d04:	2000      	movs	r0, #0
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8018d06:	6023      	str	r3, [r4, #0]
}
 8018d08:	bd70      	pop	{r4, r5, r6, pc}
 8018d0a:	46c0      	nop			@ (mov r8, r8)
 8018d0c:	200030e0 	.word	0x200030e0
 8018d10:	08018c31 	.word	0x08018c31

08018d14 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8018d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018d16:	4e34      	ldr	r6, [pc, #208]	@ (8018de8 <_ux_dcd_stm32_initialize_complete+0xd4>)
 8018d18:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8018d1a:	0023      	movs	r3, r4
 8018d1c:	0020      	movs	r0, r4
 8018d1e:	33fc      	adds	r3, #252	@ 0xfc
 8018d20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018d22:	69e7      	ldr	r7, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8018d24:	30cc      	adds	r0, #204	@ 0xcc
 8018d26:	2a01      	cmp	r2, #1
 8018d28:	d14a      	bne.n	8018dc0 <_ux_dcd_stm32_initialize_complete+0xac>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8018d2a:	3b08      	subs	r3, #8
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	6003      	str	r3, [r0, #0]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8018d30:	0023      	movs	r3, r4
 8018d32:	33f8      	adds	r3, #248	@ 0xf8
 8018d34:	0022      	movs	r2, r4
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8018d36:	681b      	ldr	r3, [r3, #0]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8018d38:	32d0      	adds	r2, #208	@ 0xd0
 8018d3a:	6013      	str	r3, [r2, #0]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8018d3c:	0023      	movs	r3, r4
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8018d3e:	3a84      	subs	r2, #132	@ 0x84
    _ux_utility_descriptor_parse(device_framework,
 8018d40:	492a      	ldr	r1, [pc, #168]	@ (8018dec <_ux_dcd_stm32_initialize_complete+0xd8>)
 8018d42:	6800      	ldr	r0, [r0, #0]
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8018d44:	3328      	adds	r3, #40	@ 0x28
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8018d46:	9201      	str	r2, [sp, #4]
    _ux_utility_descriptor_parse(device_framework,
 8018d48:	220e      	movs	r2, #14
 8018d4a:	f7fd ffda 	bl	8016d02 <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8018d4e:	0023      	movs	r3, r4
 8018d50:	4a27      	ldr	r2, [pc, #156]	@ (8018df0 <_ux_dcd_stm32_initialize_complete+0xdc>)
 8018d52:	3390      	adds	r3, #144	@ 0x90
 8018d54:	601a      	str	r2, [r3, #0]
    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8018d56:	0022      	movs	r2, r4

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018d58:	0025      	movs	r5, r4
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8018d5a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8018d5c:	323c      	adds	r2, #60	@ 0x3c
 8018d5e:	6662      	str	r2, [r4, #100]	@ 0x64
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8018d60:	66e3      	str	r3, [r4, #108]	@ 0x6c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018d62:	352f      	adds	r5, #47	@ 0x2f
 8018d64:	782b      	ldrb	r3, [r5, #0]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8018d66:	9901      	ldr	r1, [sp, #4]
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8018d68:	3794      	adds	r7, #148	@ 0x94
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8018d6a:	800b      	strh	r3, [r1, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8018d6c:	0020      	movs	r0, r4
 8018d6e:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018d70:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8018d72:	69a3      	ldr	r3, [r4, #24]
 8018d74:	4798      	blx	r3
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8018d76:	2100      	movs	r1, #0
 8018d78:	6838      	ldr	r0, [r7, #0]
 8018d7a:	f7f7 ff4a 	bl	8010c12 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8018d7e:	2300      	movs	r3, #0
 8018d80:	782a      	ldrb	r2, [r5, #0]
 8018d82:	0019      	movs	r1, r3
 8018d84:	6838      	ldr	r0, [r7, #0]
 8018d86:	f7f7 fe47 	bl	8010a18 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8018d8a:	2180      	movs	r1, #128	@ 0x80
 8018d8c:	6838      	ldr	r0, [r7, #0]
 8018d8e:	f7f7 ff40 	bl	8010c12 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8018d92:	2300      	movs	r3, #0
 8018d94:	782a      	ldrb	r2, [r5, #0]
 8018d96:	2180      	movs	r1, #128	@ 0x80
 8018d98:	6838      	ldr	r0, [r7, #0]
 8018d9a:	f7f7 fe3d 	bl	8010a18 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8018d9e:	2300      	movs	r3, #0

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8018da0:	2001      	movs	r0, #1

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8018da2:	2208      	movs	r2, #8
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8018da4:	6423      	str	r3, [r4, #64]	@ 0x40
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8018da6:	6763      	str	r3, [r4, #116]	@ 0x74

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018da8:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8018daa:	6620      	str	r0, [r4, #96]	@ 0x60
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018dac:	33fc      	adds	r3, #252	@ 0xfc
 8018dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8018db0:	65e0      	str	r0, [r4, #92]	@ 0x5c
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8018db2:	6722      	str	r2, [r4, #112]	@ 0x70
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 8018db4:	67a2      	str	r2, [r4, #120]	@ 0x78
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d000      	beq.n	8018dbc <_ux_dcd_stm32_initialize_complete+0xa8>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8018dba:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
 8018dbc:	2000      	movs	r0, #0
 8018dbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	665a      	str	r2, [r3, #100]	@ 0x64
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 8018dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018dc6:	2b01      	cmp	r3, #1
 8018dc8:	d106      	bne.n	8018dd8 <_ux_dcd_stm32_initialize_complete+0xc4>
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8018dca:	0023      	movs	r3, r4
 8018dcc:	33d4      	adds	r3, #212	@ 0xd4
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	6003      	str	r3, [r0, #0]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8018dd2:	0023      	movs	r3, r4
 8018dd4:	33d8      	adds	r3, #216	@ 0xd8
 8018dd6:	e7ad      	b.n	8018d34 <_ux_dcd_stm32_initialize_complete+0x20>
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8018dd8:	0023      	movs	r3, r4
 8018dda:	33dc      	adds	r3, #220	@ 0xdc
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	6003      	str	r3, [r0, #0]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8018de0:	0023      	movs	r3, r4
 8018de2:	33e0      	adds	r3, #224	@ 0xe0
 8018de4:	e7a6      	b.n	8018d34 <_ux_dcd_stm32_initialize_complete+0x20>
 8018de6:	46c0      	nop			@ (mov r8, r8)
 8018de8:	200030e0 	.word	0x200030e0
 8018dec:	2000024b 	.word	0x2000024b
 8018df0:	0000fde8 	.word	0x0000fde8

08018df4 <_ux_dcd_stm32_transfer_abort>:


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018df4:	3094      	adds	r0, #148	@ 0x94
{
 8018df6:	b570      	push	{r4, r5, r6, lr}
    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018df8:	0004      	movs	r4, r0
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018dfa:	688d      	ldr	r5, [r1, #8]
    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018dfc:	6800      	ldr	r0, [r0, #0]
 8018dfe:	7ba9      	ldrb	r1, [r5, #14]
 8018e00:	f7f7 fef5 	bl	8010bee <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018e04:	7ba9      	ldrb	r1, [r5, #14]
 8018e06:	6820      	ldr	r0, [r4, #0]
 8018e08:	f7f7 ff03 	bl	8010c12 <HAL_PCD_EP_Flush>
    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
}
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	bd70      	pop	{r4, r5, r6, pc}

08018e10 <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8018e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018e12:	688f      	ldr	r7, [r1, #8]
{
 8018e14:	000c      	movs	r4, r1

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8018e16:	68be      	ldr	r6, [r7, #8]
{
 8018e18:	9001      	str	r0, [sp, #4]

    UX_DISABLE
 8018e1a:	f000 f9f9 	bl	8019210 <_ux_utility_interrupt_disable>

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8018e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8018e88 <_ux_dcd_stm32_transfer_run+0x78>)
    UX_DISABLE
 8018e20:	0005      	movs	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8018e22:	6812      	ldr	r2, [r2, #0]
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8018e24:	6873      	ldr	r3, [r6, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8018e26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8018e28:	2a00      	cmp	r2, #0
 8018e2a:	d105      	bne.n	8018e38 <_ux_dcd_stm32_transfer_run+0x28>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 8018e2c:	2326      	movs	r3, #38	@ 0x26
 8018e2e:	6263      	str	r3, [r4, #36]	@ 0x24
        UX_RESTORE
 8018e30:	f000 f9f2 	bl	8019218 <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 8018e34:	2001      	movs	r0, #1
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
    return(UX_STATE_WAIT);
}
 8018e36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 8018e38:	075a      	lsls	r2, r3, #29
 8018e3a:	d506      	bpl.n	8018e4a <_ux_dcd_stm32_transfer_run+0x3a>
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 8018e3c:	2321      	movs	r3, #33	@ 0x21
 8018e3e:	6263      	str	r3, [r4, #36]	@ 0x24
            UX_RESTORE
 8018e40:	0028      	movs	r0, r5
 8018e42:	f000 f9e9 	bl	8019218 <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 8018e46:	2004      	movs	r0, #4
 8018e48:	e7f5      	b.n	8018e36 <_ux_dcd_stm32_transfer_run+0x26>
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 8018e4a:	2202      	movs	r2, #2
 8018e4c:	4213      	tst	r3, r2
 8018e4e:	d005      	beq.n	8018e5c <_ux_dcd_stm32_transfer_run+0x4c>
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 8018e50:	071a      	lsls	r2, r3, #28
 8018e52:	d510      	bpl.n	8018e76 <_ux_dcd_stm32_transfer_run+0x66>
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 8018e54:	4a0d      	ldr	r2, [pc, #52]	@ (8018e8c <_ux_dcd_stm32_transfer_run+0x7c>)
 8018e56:	4013      	ands	r3, r2
 8018e58:	6073      	str	r3, [r6, #4]
 8018e5a:	e7f1      	b.n	8018e40 <_ux_dcd_stm32_transfer_run+0x30>
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 8018e5c:	431a      	orrs	r2, r3
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018e5e:	9b01      	ldr	r3, [sp, #4]
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 8018e60:	6072      	str	r2, [r6, #4]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018e62:	3394      	adds	r3, #148	@ 0x94
 8018e64:	6818      	ldr	r0, [r3, #0]
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8018e66:	68e2      	ldr	r2, [r4, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018e68:	6963      	ldr	r3, [r4, #20]
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8018e6a:	6aa4      	ldr	r4, [r4, #40]	@ 0x28
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018e6c:	7bb9      	ldrb	r1, [r7, #14]
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8018e6e:	2c03      	cmp	r4, #3
 8018e70:	d106      	bne.n	8018e80 <_ux_dcd_stm32_transfer_run+0x70>
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018e72:	f7f7 fe48 	bl	8010b06 <HAL_PCD_EP_Transmit>
    UX_RESTORE
 8018e76:	0028      	movs	r0, r5
 8018e78:	f000 f9ce 	bl	8019218 <_ux_utility_interrupt_restore>
        return(UX_STATE_WAIT);
 8018e7c:	2005      	movs	r0, #5
 8018e7e:	e7da      	b.n	8018e36 <_ux_dcd_stm32_transfer_run+0x26>
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8018e80:	f7f7 fe1e 	bl	8010ac0 <HAL_PCD_EP_Receive>
 8018e84:	e7f7      	b.n	8018e76 <_ux_dcd_stm32_transfer_run+0x66>
 8018e86:	46c0      	nop			@ (mov r8, r8)
 8018e88:	200030e0 	.word	0x200030e0
 8018e8c:	00000405 	.word	0x00000405

08018e90 <tpdf_draw_colored_text>:
 * @param g           The green color component (0.0 to 1.0).
 * @param b           The blue color component (0.0 to 1.0).
 * @param text        The text string to write.
 */
UINT tpdf_draw_colored_text(FIL* file_p, int x, int y, const char* font_name, int font_size, \
                            float r, float g, float b, const char* text) {
 8018e90:	b530      	push	{r4, r5, lr}
 8018e92:	4c18      	ldr	r4, [pc, #96]	@ (8018ef4 <tpdf_draw_colored_text+0x64>)
 8018e94:	0005      	movs	r5, r0
 8018e96:	44a5      	add	sp, r4
    // Tj = Show Text (draw the string)
    // ET = End Text block
    char buffer[512];
    UINT len =0;

    snprintf(buffer, sizeof(buffer), "BT %.2f %.2f %.2f rg /%s %d Tf %d %d Td (%s) Tj ET\n", \
 8018e98:	9894      	ldr	r0, [sp, #592]	@ 0x250
 8018e9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e9c:	9a90      	ldr	r2, [sp, #576]	@ 0x240
 8018e9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018ea0:	9893      	ldr	r0, [sp, #588]	@ 0x24c
 8018ea2:	9306      	str	r3, [sp, #24]
 8018ea4:	9207      	str	r2, [sp, #28]
 8018ea6:	9108      	str	r1, [sp, #32]
 8018ea8:	f7ea fc76 	bl	8003798 <__aeabi_f2d>
 8018eac:	9004      	str	r0, [sp, #16]
 8018eae:	9105      	str	r1, [sp, #20]
 8018eb0:	9892      	ldr	r0, [sp, #584]	@ 0x248
 8018eb2:	f7ea fc71 	bl	8003798 <__aeabi_f2d>
 8018eb6:	9002      	str	r0, [sp, #8]
 8018eb8:	9103      	str	r1, [sp, #12]
 8018eba:	9891      	ldr	r0, [sp, #580]	@ 0x244
 8018ebc:	f7ea fc6c 	bl	8003798 <__aeabi_f2d>
 8018ec0:	9000      	str	r0, [sp, #0]
 8018ec2:	9101      	str	r1, [sp, #4]
 8018ec4:	2180      	movs	r1, #128	@ 0x80
 8018ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8018ef8 <tpdf_draw_colored_text+0x68>)
 8018ec8:	0089      	lsls	r1, r1, #2
 8018eca:	0022      	movs	r2, r4
 8018ecc:	a80c      	add	r0, sp, #48	@ 0x30
 8018ece:	f001 faef 	bl	801a4b0 <sniprintf>
             r, g, b, font_name, font_size, x, y, text);
    len = strlen(buffer);
 8018ed2:	a80c      	add	r0, sp, #48	@ 0x30
 8018ed4:	f7e7 f918 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 8018ed8:	0029      	movs	r1, r5
    len = strlen(buffer);
 8018eda:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 8018edc:	a80c      	add	r0, sp, #48	@ 0x30
 8018ede:	f7fc ff0b 	bl	8015cf8 <f_puts>
 8018ee2:	2800      	cmp	r0, #0
 8018ee4:	da01      	bge.n	8018eea <tpdf_draw_colored_text+0x5a>
        return -1;
 8018ee6:	2401      	movs	r4, #1
 8018ee8:	4264      	negs	r4, r4
    }
    return len;
}
 8018eea:	0020      	movs	r0, r4
 8018eec:	238d      	movs	r3, #141	@ 0x8d
 8018eee:	009b      	lsls	r3, r3, #2
 8018ef0:	449d      	add	sp, r3
 8018ef2:	bd30      	pop	{r4, r5, pc}
 8018ef4:	fffffdcc 	.word	0xfffffdcc
 8018ef8:	08020252 	.word	0x08020252

08018efc <tpdf_draw_line>:

UINT tpdf_draw_line(FIL* file_p, int x1, int y1, int x2, int y2, float line_width, float r, float g, float b){
 8018efc:	b530      	push	{r4, r5, lr}
 8018efe:	b0ad      	sub	sp, #180	@ 0xb4
 8018f00:	0005      	movs	r5, r0
    char buffer[128];
    UINT len = 0;

    snprintf(buffer, sizeof(buffer), "%.2f %.2f %.2f RG %.2f w %d %d m %d %d l S\n",r,g,b,line_width, x1, y1, x2, y2);
 8018f02:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8018f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f06:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018f08:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8018f0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f0c:	9108      	str	r1, [sp, #32]
 8018f0e:	f7ea fc43 	bl	8003798 <__aeabi_f2d>
 8018f12:	9006      	str	r0, [sp, #24]
 8018f14:	9107      	str	r1, [sp, #28]
 8018f16:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8018f18:	f7ea fc3e 	bl	8003798 <__aeabi_f2d>
 8018f1c:	9004      	str	r0, [sp, #16]
 8018f1e:	9105      	str	r1, [sp, #20]
 8018f20:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8018f22:	f7ea fc39 	bl	8003798 <__aeabi_f2d>
 8018f26:	9002      	str	r0, [sp, #8]
 8018f28:	9103      	str	r1, [sp, #12]
 8018f2a:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8018f2c:	f7ea fc34 	bl	8003798 <__aeabi_f2d>
 8018f30:	4c0b      	ldr	r4, [pc, #44]	@ (8018f60 <tpdf_draw_line+0x64>)
 8018f32:	9000      	str	r0, [sp, #0]
 8018f34:	9101      	str	r1, [sp, #4]
 8018f36:	0022      	movs	r2, r4
 8018f38:	2180      	movs	r1, #128	@ 0x80
 8018f3a:	a80c      	add	r0, sp, #48	@ 0x30
 8018f3c:	f001 fab8 	bl	801a4b0 <sniprintf>
    len = strlen(buffer);
 8018f40:	a80c      	add	r0, sp, #48	@ 0x30
 8018f42:	f7e7 f8e1 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 8018f46:	0029      	movs	r1, r5
    len = strlen(buffer);
 8018f48:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 8018f4a:	a80c      	add	r0, sp, #48	@ 0x30
 8018f4c:	f7fc fed4 	bl	8015cf8 <f_puts>
 8018f50:	2800      	cmp	r0, #0
 8018f52:	da01      	bge.n	8018f58 <tpdf_draw_line+0x5c>
        return -1;
 8018f54:	2401      	movs	r4, #1
 8018f56:	4264      	negs	r4, r4
    }

    return len;
}
 8018f58:	0020      	movs	r0, r4
 8018f5a:	b02d      	add	sp, #180	@ 0xb4
 8018f5c:	bd30      	pop	{r4, r5, pc}
 8018f5e:	46c0      	nop			@ (mov r8, r8)
 8018f60:	08020286 	.word	0x08020286

08018f64 <tpdf_draw_simple_dashed_line>:
 * @param r           The red color component (0.0 to 1.0).
 * @param g           The green color component (0.0 to 1.0).
 * @param b           The blue color component (0.0 to 1.0).
 * @param dash_length The length of both the dash and the gap.
 */
UINT tpdf_draw_simple_dashed_line(FIL* file_p, int x1, int y1, int x2, int y2, float line_width, float r, float g, float b, int dash_length) {
 8018f64:	b570      	push	{r4, r5, r6, lr}
 8018f66:	b0ae      	sub	sp, #184	@ 0xb8
 8018f68:	0005      	movs	r5, r0
 8018f6a:	9837      	ldr	r0, [sp, #220]	@ 0xdc
    char buffer[128];
    UINT len = 0;

    snprintf(buffer, sizeof(buffer), "%.2f %.2f %.2f RG %.2f w [%d %d] 0 d %d %d m %d %d l S\n[] 0 d\n",
 8018f6c:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
 8018f6e:	9009      	str	r0, [sp, #36]	@ 0x24
 8018f70:	9008      	str	r0, [sp, #32]
 8018f72:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8018f74:	930c      	str	r3, [sp, #48]	@ 0x30
 8018f76:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018f78:	960d      	str	r6, [sp, #52]	@ 0x34
 8018f7a:	910a      	str	r1, [sp, #40]	@ 0x28
 8018f7c:	f7ea fc0c 	bl	8003798 <__aeabi_f2d>
 8018f80:	9006      	str	r0, [sp, #24]
 8018f82:	9107      	str	r1, [sp, #28]
 8018f84:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8018f86:	f7ea fc07 	bl	8003798 <__aeabi_f2d>
 8018f8a:	9004      	str	r0, [sp, #16]
 8018f8c:	9105      	str	r1, [sp, #20]
 8018f8e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8018f90:	f7ea fc02 	bl	8003798 <__aeabi_f2d>
 8018f94:	9002      	str	r0, [sp, #8]
 8018f96:	9103      	str	r1, [sp, #12]
 8018f98:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8018f9a:	f7ea fbfd 	bl	8003798 <__aeabi_f2d>
 8018f9e:	4c0b      	ldr	r4, [pc, #44]	@ (8018fcc <tpdf_draw_simple_dashed_line+0x68>)
 8018fa0:	9000      	str	r0, [sp, #0]
 8018fa2:	9101      	str	r1, [sp, #4]
 8018fa4:	0022      	movs	r2, r4
 8018fa6:	2180      	movs	r1, #128	@ 0x80
 8018fa8:	a80e      	add	r0, sp, #56	@ 0x38
 8018faa:	f001 fa81 	bl	801a4b0 <sniprintf>
                         r, g, b, line_width, dash_length, dash_length, x1, y1, x2, y2);
    len = strlen(buffer);
 8018fae:	a80e      	add	r0, sp, #56	@ 0x38
 8018fb0:	f7e7 f8aa 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 8018fb4:	0029      	movs	r1, r5
    len = strlen(buffer);
 8018fb6:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 8018fb8:	a80e      	add	r0, sp, #56	@ 0x38
 8018fba:	f7fc fe9d 	bl	8015cf8 <f_puts>
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	da01      	bge.n	8018fc6 <tpdf_draw_simple_dashed_line+0x62>
        return -1;
 8018fc2:	2401      	movs	r4, #1
 8018fc4:	4264      	negs	r4, r4
    }

    return len;
}
 8018fc6:	0020      	movs	r0, r4
 8018fc8:	b02e      	add	sp, #184	@ 0xb8
 8018fca:	bd70      	pop	{r4, r5, r6, pc}
 8018fcc:	080202b2 	.word	0x080202b2

08018fd0 <tpdf_add_new_obj>:

uint32_t tpdf_add_new_obj(FIL* file_p, int obj_num, const char* content, pdf_doc_t* pdf_monitor) {
 8018fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fd2:	001d      	movs	r5, r3
 8018fd4:	000e      	movs	r6, r1
 8018fd6:	0004      	movs	r4, r0
 8018fd8:	0017      	movs	r7, r2
    char buffer[64];
    UINT status;

    // 1. Store the current file position. This is the object's offset.
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018fda:	68c2      	ldr	r2, [r0, #12]
uint32_t tpdf_add_new_obj(FIL* file_p, int obj_num, const char* content, pdf_doc_t* pdf_monitor) {
 8018fdc:	b091      	sub	sp, #68	@ 0x44
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018fde:	008b      	lsls	r3, r1, #2
 8018fe0:	515a      	str	r2, [r3, r5]

    // 2. Write the object header (e.g., "1 0 obj\n").
    sprintf(buffer, "%d 0 obj\n", obj_num);
 8018fe2:	4668      	mov	r0, sp
 8018fe4:	0032      	movs	r2, r6
 8018fe6:	490a      	ldr	r1, [pc, #40]	@ (8019010 <tpdf_add_new_obj+0x40>)
 8018fe8:	f001 fa98 	bl	801a51c <siprintf>
    status = f_puts(buffer,file_p);
 8018fec:	0021      	movs	r1, r4
 8018fee:	4668      	mov	r0, sp
 8018ff0:	f7fc fe82 	bl	8015cf8 <f_puts>
    if (status < 0) return status;

    // 3. Write the main content of the object.
    status = f_puts(content,file_p);
 8018ff4:	0021      	movs	r1, r4
 8018ff6:	0038      	movs	r0, r7
 8018ff8:	f7fc fe7e 	bl	8015cf8 <f_puts>
    if (status < 0) return status;

    // 4. Write the object footer.
    status = f_puts("\nendobj\n",file_p);
 8018ffc:	0021      	movs	r1, r4
 8018ffe:	4805      	ldr	r0, [pc, #20]	@ (8019014 <tpdf_add_new_obj+0x44>)
 8019000:	f7fc fe7a 	bl	8015cf8 <f_puts>
	pdf_monitor->num_objs += 1;
 8019004:	4a04      	ldr	r2, [pc, #16]	@ (8019018 <tpdf_add_new_obj+0x48>)
 8019006:	58ab      	ldr	r3, [r5, r2]
 8019008:	3301      	adds	r3, #1
 801900a:	50ab      	str	r3, [r5, r2]

    return status;
}
 801900c:	b011      	add	sp, #68	@ 0x44
 801900e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019010:	080202f1 	.word	0x080202f1
 8019014:	08020329 	.word	0x08020329
 8019018:	00000404 	.word	0x00000404

0801901c <tpdf_start_new_stream_obj>:

uint32_t tpdf_start_new_stream_obj(FIL* file_p, int obj_num,int obj_length_num, pdf_doc_t* pdf_monitor) {
 801901c:	b530      	push	{r4, r5, lr}
 801901e:	0005      	movs	r5, r0
 8019020:	001c      	movs	r4, r3
 8019022:	0008      	movs	r0, r1
    char buffer[64];
    UINT status;

    // 1. Store the current file position. This is the object's offset.
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8019024:	008b      	lsls	r3, r1, #2
 8019026:	68e9      	ldr	r1, [r5, #12]
uint32_t tpdf_start_new_stream_obj(FIL* file_p, int obj_num,int obj_length_num, pdf_doc_t* pdf_monitor) {
 8019028:	b091      	sub	sp, #68	@ 0x44
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 801902a:	5119      	str	r1, [r3, r4]

    sprintf(buffer, "%d 0 obj\n<</Length %d 0 R\n>>\nstream\n", obj_num, obj_length_num);
 801902c:	0013      	movs	r3, r2
 801902e:	4907      	ldr	r1, [pc, #28]	@ (801904c <tpdf_start_new_stream_obj+0x30>)
 8019030:	0002      	movs	r2, r0
 8019032:	4668      	mov	r0, sp
 8019034:	f001 fa72 	bl	801a51c <siprintf>
    status = f_puts(buffer,file_p);
 8019038:	0029      	movs	r1, r5
 801903a:	4668      	mov	r0, sp
 801903c:	f7fc fe5c 	bl	8015cf8 <f_puts>
    if (status < 0) return status;
    pdf_monitor->num_objs++;
 8019040:	4a03      	ldr	r2, [pc, #12]	@ (8019050 <tpdf_start_new_stream_obj+0x34>)
 8019042:	58a3      	ldr	r3, [r4, r2]
 8019044:	3301      	adds	r3, #1
 8019046:	50a3      	str	r3, [r4, r2]

    return status;
}
 8019048:	b011      	add	sp, #68	@ 0x44
 801904a:	bd30      	pop	{r4, r5, pc}
 801904c:	080202fb 	.word	0x080202fb
 8019050:	00000404 	.word	0x00000404

08019054 <tpdf_end_new_stream_obj>:

uint32_t tpdf_end_new_stream_obj(FIL* file_p, int obj_length_num, int stream_length, pdf_doc_t* pdf_monitor) {
 8019054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019056:	0004      	movs	r4, r0
 8019058:	b08b      	sub	sp, #44	@ 0x2c
 801905a:	000e      	movs	r6, r1
    char buffer[32];
    UINT status;
    char * end_stream = "endstream\nendobj\n";
    status = f_puts(end_stream,file_p);
 801905c:	480a      	ldr	r0, [pc, #40]	@ (8019088 <tpdf_end_new_stream_obj+0x34>)
 801905e:	0021      	movs	r1, r4
uint32_t tpdf_end_new_stream_obj(FIL* file_p, int obj_length_num, int stream_length, pdf_doc_t* pdf_monitor) {
 8019060:	9301      	str	r3, [sp, #4]
 8019062:	0017      	movs	r7, r2
    status = f_puts(end_stream,file_p);
 8019064:	f7fc fe48 	bl	8015cf8 <f_puts>
 8019068:	0005      	movs	r5, r0
    if (status < 0) return status;
    sprintf(buffer, "%d", stream_length);
 801906a:	003a      	movs	r2, r7
 801906c:	4907      	ldr	r1, [pc, #28]	@ (801908c <tpdf_end_new_stream_obj+0x38>)
 801906e:	a802      	add	r0, sp, #8
 8019070:	f001 fa54 	bl	801a51c <siprintf>
    tpdf_add_new_obj(file_p,obj_length_num,buffer,pdf_monitor);
 8019074:	0031      	movs	r1, r6
 8019076:	0020      	movs	r0, r4
 8019078:	9b01      	ldr	r3, [sp, #4]
 801907a:	aa02      	add	r2, sp, #8
 801907c:	f7ff ffa8 	bl	8018fd0 <tpdf_add_new_obj>
    return status;
}
 8019080:	0028      	movs	r0, r5
 8019082:	b00b      	add	sp, #44	@ 0x2c
 8019084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019086:	46c0      	nop			@ (mov r8, r8)
 8019088:	08020320 	.word	0x08020320
 801908c:	0801fef5 	.word	0x0801fef5

08019090 <USBD_ChangeFunction>:
  /* USER CODE BEGIN USBD_ChangeFunction1 */

  /* USER CODE END USBD_ChangeFunction1 */

  return status;
}
 8019090:	2000      	movs	r0, #0
 8019092:	4770      	bx	lr

08019094 <MX_USBX_Device_Init>:
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8019094:	2300      	movs	r3, #0
 8019096:	21c0      	movs	r1, #192	@ 0xc0
{
 8019098:	b570      	push	{r4, r5, r6, lr}
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 801909a:	001a      	movs	r2, r3
 801909c:	4845      	ldr	r0, [pc, #276]	@ (80191b4 <MX_USBX_Device_Init+0x120>)
{
 801909e:	b08a      	sub	sp, #40	@ 0x28
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 80190a0:	0189      	lsls	r1, r1, #6
 80190a2:	f7fd fe23 	bl	8016cec <_uxe_system_initialize>
 80190a6:	1e04      	subs	r4, r0, #0
 80190a8:	d002      	beq.n	80190b0 <MX_USBX_Device_Init+0x1c>
    return UX_ERROR;
 80190aa:	20ff      	movs	r0, #255	@ 0xff
}
 80190ac:	b00a      	add	sp, #40	@ 0x28
 80190ae:	bd70      	pop	{r4, r5, r6, pc}
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80190b0:	a906      	add	r1, sp, #24
 80190b2:	2001      	movs	r0, #1
 80190b4:	f000 fb4c 	bl	8019750 <USBD_Get_Device_Framework_Speed>
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80190b8:	a907      	add	r1, sp, #28
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80190ba:	0005      	movs	r5, r0
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80190bc:	0020      	movs	r0, r4
 80190be:	f000 fb47 	bl	8019750 <USBD_Get_Device_Framework_Speed>
 80190c2:	0004      	movs	r4, r0
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80190c4:	a808      	add	r0, sp, #32
 80190c6:	f000 fb61 	bl	801978c <USBD_Get_String_Framework>
 80190ca:	0006      	movs	r6, r0
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80190cc:	a809      	add	r0, sp, #36	@ 0x24
 80190ce:	f000 fbab 	bl	8019828 <USBD_Get_Language_Id_Framework>
  if (ux_device_stack_initialize(device_framework_high_speed,
 80190d2:	4b39      	ldr	r3, [pc, #228]	@ (80191b8 <MX_USBX_Device_Init+0x124>)
 80190d4:	9002      	str	r0, [sp, #8]
 80190d6:	9304      	str	r3, [sp, #16]
 80190d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190da:	0028      	movs	r0, r5
 80190dc:	9303      	str	r3, [sp, #12]
 80190de:	9b08      	ldr	r3, [sp, #32]
 80190e0:	0022      	movs	r2, r4
 80190e2:	9301      	str	r3, [sp, #4]
 80190e4:	9906      	ldr	r1, [sp, #24]
 80190e6:	9b07      	ldr	r3, [sp, #28]
 80190e8:	9600      	str	r6, [sp, #0]
 80190ea:	f7fd fb2b 	bl	8016744 <_ux_device_stack_initialize>
 80190ee:	1e05      	subs	r5, r0, #0
 80190f0:	d1db      	bne.n	80190aa <MX_USBX_Device_Init+0x16>
  custom_hid_parameter.ux_slave_class_hid_instance_activate         = USBD_Custom_HID_Activate;
 80190f2:	4c32      	ldr	r4, [pc, #200]	@ (80191bc <MX_USBX_Device_Init+0x128>)
 80190f4:	4b32      	ldr	r3, [pc, #200]	@ (80191c0 <MX_USBX_Device_Init+0x12c>)
 80190f6:	6023      	str	r3, [r4, #0]
  custom_hid_parameter.ux_slave_class_hid_instance_deactivate       = USBD_Custom_HID_Deactivate;
 80190f8:	4b32      	ldr	r3, [pc, #200]	@ (80191c4 <MX_USBX_Device_Init+0x130>)
 80190fa:	6063      	str	r3, [r4, #4]
  custom_hid_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_CUSTOM);
 80190fc:	f000 fbbc 	bl	8019878 <USBD_HID_ReportDesc>
 8019100:	60a0      	str	r0, [r4, #8]
  custom_hid_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8019102:	0028      	movs	r0, r5
 8019104:	f000 fbc2 	bl	801988c <USBD_HID_ReportDesc_length>
  custom_hid_parameter.ux_device_class_hid_parameter_callback       = USBD_Custom_HID_SetFeature;
 8019108:	4b2f      	ldr	r3, [pc, #188]	@ (80191c8 <MX_USBX_Device_Init+0x134>)
  custom_hid_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 801910a:	60e5      	str	r5, [r4, #12]
  custom_hid_parameter.ux_device_class_hid_parameter_callback       = USBD_Custom_HID_SetFeature;
 801910c:	6163      	str	r3, [r4, #20]
  custom_hid_parameter.ux_device_class_hid_parameter_get_callback   = USBD_Custom_HID_GetReport;
 801910e:	4b2f      	ldr	r3, [pc, #188]	@ (80191cc <MX_USBX_Device_Init+0x138>)
  custom_hid_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8019110:	6120      	str	r0, [r4, #16]
  custom_hid_parameter.ux_device_class_hid_parameter_get_callback   = USBD_Custom_HID_GetReport;
 8019112:	61a3      	str	r3, [r4, #24]
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_initialize       = ux_device_class_hid_receiver_initialize;
 8019114:	4b2e      	ldr	r3, [pc, #184]	@ (80191d0 <MX_USBX_Device_Init+0x13c>)
 8019116:	6263      	str	r3, [r4, #36]	@ 0x24
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_number = USBD_Custom_HID_EventMaxNumber();
 8019118:	f000 f914 	bl	8019344 <USBD_Custom_HID_EventMaxNumber>
 801911c:	62a0      	str	r0, [r4, #40]	@ 0x28
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_length = USBD_Custom_HID_EventMaxLength();
 801911e:	f000 f919 	bl	8019354 <USBD_Custom_HID_EventMaxLength>
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_callback   = USBD_Custom_HID_SetReport;
 8019122:	4b2c      	ldr	r3, [pc, #176]	@ (80191d4 <MX_USBX_Device_Init+0x140>)
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8019124:	0029      	movs	r1, r5
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_length = USBD_Custom_HID_EventMaxLength();
 8019126:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8019128:	2001      	movs	r0, #1
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_callback   = USBD_Custom_HID_SetReport;
 801912a:	6323      	str	r3, [r4, #48]	@ 0x30
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 801912c:	f000 fba2 	bl	8019874 <USBD_Get_Configuration_Number>
 8019130:	4e29      	ldr	r6, [pc, #164]	@ (80191d8 <MX_USBX_Device_Init+0x144>)
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8019132:	0029      	movs	r1, r5
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8019134:	6030      	str	r0, [r6, #0]
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8019136:	2001      	movs	r0, #1
 8019138:	f000 fb86 	bl	8019848 <USBD_Get_Interface_Number>
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 801913c:	4d27      	ldr	r5, [pc, #156]	@ (80191dc <MX_USBX_Device_Init+0x148>)
 801913e:	9400      	str	r4, [sp, #0]
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8019140:	0003      	movs	r3, r0
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8019142:	4927      	ldr	r1, [pc, #156]	@ (80191e0 <MX_USBX_Device_Init+0x14c>)
 8019144:	0028      	movs	r0, r5
 8019146:	6832      	ldr	r2, [r6, #0]
 8019148:	f7fc ff18 	bl	8015f7c <_ux_device_stack_class_register>
 801914c:	1e05      	subs	r5, r0, #0
 801914e:	d1ac      	bne.n	80190aa <MX_USBX_Device_Init+0x16>
  storage_parameter.ux_slave_class_storage_instance_activate   = USBD_STORAGE_Activate;
 8019150:	4c24      	ldr	r4, [pc, #144]	@ (80191e4 <MX_USBX_Device_Init+0x150>)
 8019152:	4b25      	ldr	r3, [pc, #148]	@ (80191e8 <MX_USBX_Device_Init+0x154>)
 8019154:	6023      	str	r3, [r4, #0]
  storage_parameter.ux_slave_class_storage_instance_deactivate = USBD_STORAGE_Deactivate;
 8019156:	4b25      	ldr	r3, [pc, #148]	@ (80191ec <MX_USBX_Device_Init+0x158>)
 8019158:	6063      	str	r3, [r4, #4]
  storage_parameter.ux_slave_class_storage_parameter_number_lun = STORAGE_NUMBER_LUN;
 801915a:	2301      	movs	r3, #1
 801915c:	60a3      	str	r3, [r4, #8]
    ux_slave_class_storage_media_last_lba = USBD_STORAGE_GetMediaLastLba();
 801915e:	f000 fbd3 	bl	8019908 <USBD_STORAGE_GetMediaLastLba>
 8019162:	60e0      	str	r0, [r4, #12]
    ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8019164:	f000 fbe2 	bl	801992c <USBD_STORAGE_GetMediaBlocklength>
    ux_slave_class_storage_media_removable_flag = STORAGE_REMOVABLE_FLAG;
 8019168:	2380      	movs	r3, #128	@ 0x80
 801916a:	61a3      	str	r3, [r4, #24]
    ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 801916c:	4b20      	ldr	r3, [pc, #128]	@ (80191f0 <MX_USBX_Device_Init+0x15c>)
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 801916e:	0029      	movs	r1, r5
    ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 8019170:	6323      	str	r3, [r4, #48]	@ 0x30
    ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8019172:	4b20      	ldr	r3, [pc, #128]	@ (80191f4 <MX_USBX_Device_Init+0x160>)
    ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8019174:	6120      	str	r0, [r4, #16]
    ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8019176:	6363      	str	r3, [r4, #52]	@ 0x34
    ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 8019178:	4b1f      	ldr	r3, [pc, #124]	@ (80191f8 <MX_USBX_Device_Init+0x164>)
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 801917a:	2003      	movs	r0, #3
    ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 801917c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 801917e:	4b1f      	ldr	r3, [pc, #124]	@ (80191fc <MX_USBX_Device_Init+0x168>)
    ux_slave_class_storage_media_type = 0;
 8019180:	6165      	str	r5, [r4, #20]
    ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 8019182:	63e3      	str	r3, [r4, #60]	@ 0x3c
    ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8019184:	4b1e      	ldr	r3, [pc, #120]	@ (8019200 <MX_USBX_Device_Init+0x16c>)
    ux_slave_class_storage_media_read_only_flag = STORAGE_READ_ONLY;
 8019186:	61e5      	str	r5, [r4, #28]
    ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8019188:	6423      	str	r3, [r4, #64]	@ 0x40
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 801918a:	f000 fb73 	bl	8019874 <USBD_Get_Configuration_Number>
 801918e:	4e1d      	ldr	r6, [pc, #116]	@ (8019204 <MX_USBX_Device_Init+0x170>)
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8019190:	0029      	movs	r1, r5
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8019192:	6030      	str	r0, [r6, #0]
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8019194:	2003      	movs	r0, #3
 8019196:	f000 fb57 	bl	8019848 <USBD_Get_Interface_Number>
  if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 801919a:	4d1b      	ldr	r5, [pc, #108]	@ (8019208 <MX_USBX_Device_Init+0x174>)
 801919c:	9400      	str	r4, [sp, #0]
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 801919e:	0003      	movs	r3, r0
  if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 80191a0:	491a      	ldr	r1, [pc, #104]	@ (801920c <MX_USBX_Device_Init+0x178>)
 80191a2:	0028      	movs	r0, r5
 80191a4:	6832      	ldr	r2, [r6, #0]
 80191a6:	f7fc fee9 	bl	8015f7c <_ux_device_stack_class_register>
 80191aa:	2800      	cmp	r0, #0
 80191ac:	d100      	bne.n	80191b0 <MX_USBX_Device_Init+0x11c>
 80191ae:	e77d      	b.n	80190ac <MX_USBX_Device_Init+0x18>
 80191b0:	e77b      	b.n	80190aa <MX_USBX_Device_Init+0x16>
 80191b2:	46c0      	nop			@ (mov r8, r8)
 80191b4:	20003178 	.word	0x20003178
 80191b8:	08019091 	.word	0x08019091
 80191bc:	2000313c 	.word	0x2000313c
 80191c0:	080192a5 	.word	0x080192a5
 80191c4:	080192cd 	.word	0x080192cd
 80191c8:	080192dd 	.word	0x080192dd
 80191cc:	080192ed 	.word	0x080192ed
 80191d0:	08017511 	.word	0x08017511
 80191d4:	080192fd 	.word	0x080192fd
 80191d8:	20003174 	.word	0x20003174
 80191dc:	2000020c 	.word	0x2000020c
 80191e0:	08017299 	.word	0x08017299
 80191e4:	200030e8 	.word	0x200030e8
 80191e8:	0801989b 	.word	0x0801989b
 80191ec:	0801989d 	.word	0x0801989d
 80191f0:	080198a1 	.word	0x080198a1
 80191f4:	080198f1 	.word	0x080198f1
 80191f8:	080198f9 	.word	0x080198f9
 80191fc:	080198fd 	.word	0x080198fd
 8019200:	08019903 	.word	0x08019903
 8019204:	20003170 	.word	0x20003170
 8019208:	2000021f 	.word	0x2000021f
 801920c:	0801799b 	.word	0x0801799b

08019210 <_ux_utility_interrupt_disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019210:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8019214:	b672      	cpsid	i
}
 8019216:	4770      	bx	lr

08019218 <_ux_utility_interrupt_restore>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019218:	f380 8810 	msr	PRIMASK, r0
}
 801921c:	4770      	bx	lr

0801921e <_ux_utility_time_get>:
{
 801921e:	b510      	push	{r4, lr}
  time_tick = HAL_GetTick();
 8019220:	f7f5 f914 	bl	800e44c <HAL_GetTick>
}
 8019224:	bd10      	pop	{r4, pc}
	...

08019228 <USB_Send_HidReport>:
UINT USB_Send_HidReport(uint8_t *report_buffer, ULONG report_len)
{
  UINT status;
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8019228:	4a0f      	ldr	r2, [pc, #60]	@ (8019268 <USB_Send_HidReport+0x40>)
{
 801922a:	b530      	push	{r4, r5, lr}
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 801922c:	6812      	ldr	r2, [r2, #0]
{
 801922e:	0003      	movs	r3, r0
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8019230:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 8019232:	000c      	movs	r4, r1
  {
    return UX_ERROR;
 8019234:	20ff      	movs	r0, #255	@ 0xff
{
 8019236:	b095      	sub	sp, #84	@ 0x54
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8019238:	2a03      	cmp	r2, #3
 801923a:	d113      	bne.n	8019264 <USB_Send_HidReport+0x3c>
 801923c:	4d0b      	ldr	r5, [pc, #44]	@ (801926c <USB_Send_HidReport+0x44>)
 801923e:	682a      	ldr	r2, [r5, #0]
 8019240:	2a00      	cmp	r2, #0
 8019242:	d00f      	beq.n	8019264 <USB_Send_HidReport+0x3c>
  }

  if (report_buffer == UX_NULL || report_len == 0 || report_len > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
  {
    return UX_INVALID_PARAMETER;
 8019244:	3805      	subs	r0, #5
  if (report_buffer == UX_NULL || report_len == 0 || report_len > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8019246:	2b00      	cmp	r3, #0
 8019248:	d00c      	beq.n	8019264 <USB_Send_HidReport+0x3c>
 801924a:	1e4a      	subs	r2, r1, #1
 801924c:	2a3f      	cmp	r2, #63	@ 0x3f
 801924e:	d809      	bhi.n	8019264 <USB_Send_HidReport+0x3c>

  /*
   * Prepare the HID event for sending.
   */
  // 1. Point the event's buffer pointer to YOUR data buffer.
  ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, \
 8019250:	000a      	movs	r2, r1
 8019252:	a804      	add	r0, sp, #16
 8019254:	0019      	movs	r1, r3
 8019256:	f7fd fea3 	bl	8016fa0 <_ux_utility_memory_copy>

  /*
   * 3. Send the event. This will queue the report for transmission on the
   * Interrupt IN endpoint.
   */
  status = ux_device_class_hid_event_set(hid_instance_global, &hid_event);
 801925a:	6828      	ldr	r0, [r5, #0]
 801925c:	a901      	add	r1, sp, #4
  hid_event.ux_device_class_hid_event_length = report_len;
 801925e:	9403      	str	r4, [sp, #12]
  status = ux_device_class_hid_event_set(hid_instance_global, &hid_event);
 8019260:	f7fe f876 	bl	8017350 <_ux_device_class_hid_event_set>

  return status;
}
 8019264:	b015      	add	sp, #84	@ 0x54
 8019266:	bd30      	pop	{r4, r5, pc}
 8019268:	200030e0 	.word	0x200030e0
 801926c:	200061bc 	.word	0x200061bc

08019270 <USB_Get_HidReport>:
//	ux_utility_memory_copy(report_buffer,hid_get_report_buff,UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
//	*report_len = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
//	return UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
//}

UINT USB_Get_HidReport(uint8_t *report_buffer, ULONG *report_len) {
 8019270:	b570      	push	{r4, r5, r6, lr}
    if (hid_data_ready) {
 8019272:	4d09      	ldr	r5, [pc, #36]	@ (8019298 <USB_Get_HidReport+0x28>)
UINT USB_Get_HidReport(uint8_t *report_buffer, ULONG *report_len) {
 8019274:	000c      	movs	r4, r1
    if (hid_data_ready) {
 8019276:	782b      	ldrb	r3, [r5, #0]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d009      	beq.n	8019290 <USB_Get_HidReport+0x20>
        ux_utility_memory_copy(report_buffer, hid_get_report_buff, last_report_len);
 801927c:	4e07      	ldr	r6, [pc, #28]	@ (801929c <USB_Get_HidReport+0x2c>)
 801927e:	4908      	ldr	r1, [pc, #32]	@ (80192a0 <USB_Get_HidReport+0x30>)
 8019280:	7832      	ldrb	r2, [r6, #0]
 8019282:	f7fd fe8d 	bl	8016fa0 <_ux_utility_memory_copy>
        *report_len = last_report_len;
        hid_data_ready = 0;
 8019286:	2000      	movs	r0, #0
        *report_len = last_report_len;
 8019288:	7833      	ldrb	r3, [r6, #0]
        hid_data_ready = 0;
 801928a:	7028      	strb	r0, [r5, #0]
        *report_len = last_report_len;
 801928c:	6023      	str	r3, [r4, #0]
        return 0; // 0 = Success
    } else {
        *report_len = 0;
        return 1; // No new data
    }
}
 801928e:	bd70      	pop	{r4, r5, r6, pc}
        return 1; // No new data
 8019290:	2001      	movs	r0, #1
        *report_len = 0;
 8019292:	600b      	str	r3, [r1, #0]
        return 1; // No new data
 8019294:	e7fb      	b.n	801928e <USB_Get_HidReport+0x1e>
 8019296:	46c0      	nop			@ (mov r8, r8)
 8019298:	20006179 	.word	0x20006179
 801929c:	20006178 	.word	0x20006178
 80192a0:	2000617a 	.word	0x2000617a

080192a4 <USBD_Custom_HID_Activate>:
  *         This function is called when insertion of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Activate(VOID *hid_instance)
{
 80192a4:	b510      	push	{r4, lr}
 80192a6:	0004      	movs	r4, r0
  /* USER CODE BEGIN USBD_Custom_HID_Activate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device activated.\n");
 80192a8:	4805      	ldr	r0, [pc, #20]	@ (80192c0 <USBD_Custom_HID_Activate+0x1c>)
 80192aa:	f001 f8f7 	bl	801a49c <puts>
  hid_instance_global = (UX_SLAVE_CLASS_HID *)hid_instance;
 80192ae:	4b05      	ldr	r3, [pc, #20]	@ (80192c4 <USBD_Custom_HID_Activate+0x20>)
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80192b0:	4805      	ldr	r0, [pc, #20]	@ (80192c8 <USBD_Custom_HID_Activate+0x24>)
  hid_instance_global = (UX_SLAVE_CLASS_HID *)hid_instance;
 80192b2:	601c      	str	r4, [r3, #0]
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80192b4:	f7f8 ffe6 	bl	8012284 <HAL_RTCEx_DeactivateWakeUpTimer>
  Switch_Backup_reg(MODE_Stop);
 80192b8:	2002      	movs	r0, #2
 80192ba:	f7ec ff1f 	bl	80060fc <Switch_Backup_reg>
  /* USER CODE END USBD_Custom_HID_Activate */

  return;
}
 80192be:	bd10      	pop	{r4, pc}
 80192c0:	08020332 	.word	0x08020332
 80192c4:	200061bc 	.word	0x200061bc
 80192c8:	200009f8 	.word	0x200009f8

080192cc <USBD_Custom_HID_Deactivate>:
  *         This function is called when extraction of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Deactivate(VOID *hid_instance)
{
 80192cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USBD_Custom_HID_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device deactivated.\n");
 80192ce:	4802      	ldr	r0, [pc, #8]	@ (80192d8 <USBD_Custom_HID_Deactivate+0xc>)
 80192d0:	f001 f8e4 	bl	801a49c <puts>
  /* USER CODE END USBD_Custom_HID_Deactivate */

  return;
}
 80192d4:	bd10      	pop	{r4, pc}
 80192d6:	46c0      	nop			@ (mov r8, r8)
 80192d8:	0802034f 	.word	0x0802034f

080192dc <USBD_Custom_HID_SetFeature>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_SetFeature(UX_SLAVE_CLASS_HID *hid_instance,
                                UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80192dc:	b510      	push	{r4, lr}
  UINT status = UX_SUCCESS;

  /* USER CODE BEGIN USBD_Custom_HID_SetFeature */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Set Feature request received.\n");
 80192de:	4802      	ldr	r0, [pc, #8]	@ (80192e8 <USBD_Custom_HID_SetFeature+0xc>)
 80192e0:	f001 f8dc 	bl	801a49c <puts>
  /* USER CODE END USBD_Custom_HID_SetFeature */

  return status;
}
 80192e4:	2000      	movs	r0, #0
 80192e6:	bd10      	pop	{r4, pc}
 80192e8:	0802036e 	.word	0x0802036e

080192ec <USBD_Custom_HID_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                               UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80192ec:	b510      	push	{r4, lr}
  UINT status = UX_SUCCESS;

  /* USER CODE BEGIN USBD_Custom_HID_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Get Report request received.\n");
 80192ee:	4802      	ldr	r0, [pc, #8]	@ (80192f8 <USBD_Custom_HID_GetReport+0xc>)
 80192f0:	f001 f8d4 	bl	801a49c <puts>
  /* USER CODE END USBD_Custom_HID_GetReport */

  return status;
}
 80192f4:	2000      	movs	r0, #0
 80192f6:	bd10      	pop	{r4, pc}
 80192f8:	08020397 	.word	0x08020397

080192fc <USBD_Custom_HID_SetReport>:
  *         to the application over Endpoint OUT (Set Report).
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_SetReport(struct UX_SLAVE_CLASS_HID_STRUCT *hid_instance)
{
 80192fc:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN USBD_Custom_HID_SetReport */

  UX_DEVICE_CLASS_HID_RECEIVED_EVENT hid_received_event;

  ux_utility_memory_set(&hid_received_event, 0, sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT));
 80192fe:	2208      	movs	r2, #8
 8019300:	2100      	movs	r1, #0
 8019302:	4668      	mov	r0, sp
 8019304:	f7fd fe7e 	bl	8017004 <_ux_utility_memory_set>

  // FIXME: Add flag to check write event?
  if(ux_device_class_hid_receiver_event_get(hid_instance_global, &hid_received_event) == UX_SUCCESS)
 8019308:	4c0a      	ldr	r4, [pc, #40]	@ (8019334 <USBD_Custom_HID_SetReport+0x38>)
 801930a:	4669      	mov	r1, sp
 801930c:	6820      	ldr	r0, [r4, #0]
 801930e:	f7fe f8f3 	bl	80174f8 <_ux_device_class_hid_receiver_event_get>
 8019312:	2800      	cmp	r0, #0
 8019314:	d10d      	bne.n	8019332 <USBD_Custom_HID_SetReport+0x36>
  {
	ux_utility_memory_copy(hid_get_report_buff, \
 8019316:	2240      	movs	r2, #64	@ 0x40
 8019318:	4807      	ldr	r0, [pc, #28]	@ (8019338 <USBD_Custom_HID_SetReport+0x3c>)
 801931a:	9901      	ldr	r1, [sp, #4]
 801931c:	f7fd fe40 	bl	8016fa0 <_ux_utility_memory_copy>
							hid_received_event.ux_device_class_hid_received_event_data, \
							UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
    /* Free hid received event */
    ux_device_class_hid_receiver_event_free(hid_instance_global);
 8019320:	6820      	ldr	r0, [r4, #0]
 8019322:	f7fe f8d9 	bl	80174d8 <_ux_device_class_hid_receiver_event_free>

    last_report_len = hid_received_event.ux_device_class_hid_received_event_length;
 8019326:	4b05      	ldr	r3, [pc, #20]	@ (801933c <USBD_Custom_HID_SetReport+0x40>)
 8019328:	9a00      	ldr	r2, [sp, #0]
 801932a:	701a      	strb	r2, [r3, #0]
    hid_data_ready = 1;
 801932c:	2201      	movs	r2, #1
 801932e:	4b04      	ldr	r3, [pc, #16]	@ (8019340 <USBD_Custom_HID_SetReport+0x44>)
 8019330:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USBD_Custom_HID_SetReport */

  return;
}
 8019332:	bd13      	pop	{r0, r1, r4, pc}
 8019334:	200061bc 	.word	0x200061bc
 8019338:	2000617a 	.word	0x2000617a
 801933c:	20006178 	.word	0x20006178
 8019340:	20006179 	.word	0x20006179

08019344 <USBD_Custom_HID_EventMaxNumber>:
  *         This function to set receiver event max number parameter.
  * @param  none
  * @retval receiver event max number
  */
ULONG USBD_Custom_HID_EventMaxNumber(VOID)
{
 8019344:	b510      	push	{r4, lr}
  ULONG max_number = 0U;

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxNumber */
  printf("Custom HID Event Max Number requested.\n");
 8019346:	4802      	ldr	r0, [pc, #8]	@ (8019350 <USBD_Custom_HID_EventMaxNumber+0xc>)
 8019348:	f001 f8a8 	bl	801a49c <puts>

  max_number = UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
  /* USER CODE END USBD_Custom_HID_EventMaxNumber */

  return max_number;
}
 801934c:	2008      	movs	r0, #8
 801934e:	bd10      	pop	{r4, pc}
 8019350:	080203bf 	.word	0x080203bf

08019354 <USBD_Custom_HID_EventMaxLength>:
  *         This function to set receiver event max length parameter.
  * @param  none
  * @retval receiver event max length
  */
ULONG USBD_Custom_HID_EventMaxLength(VOID)
{
 8019354:	b510      	push	{r4, lr}
  ULONG max_length = 0U;

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxLength */
  printf("Custom HID Event Max Length requested.\n");
 8019356:	4802      	ldr	r0, [pc, #8]	@ (8019360 <USBD_Custom_HID_EventMaxLength+0xc>)
 8019358:	f001 f8a0 	bl	801a49c <puts>
   max_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
  /* USER CODE END USBD_Custom_HID_EventMaxLength */

  return max_length;
}
 801935c:	2040      	movs	r0, #64	@ 0x40
 801935e:	bd10      	pop	{r4, pc}
 8019360:	080203e6 	.word	0x080203e6

08019364 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8019364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019366:	9101      	str	r1, [sp, #4]
  uint32_t idx = 0U;

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8019368:	215c      	movs	r1, #92	@ 0x5c
 801936a:	6845      	ldr	r5, [r0, #4]
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 801936c:	2706      	movs	r7, #6
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801936e:	4369      	muls	r1, r5
 8019370:	1844      	adds	r4, r0, r1
 8019372:	69e4      	ldr	r4, [r4, #28]
 8019374:	3128      	adds	r1, #40	@ 0x28
 8019376:	46a4      	mov	ip, r4
  uint32_t idx = 0U;
 8019378:	2400      	movs	r4, #0
 801937a:	1841      	adds	r1, r0, r1
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801937c:	45a4      	cmp	ip, r4
 801937e:	d10f      	bne.n	80193a0 <USBD_FrameWork_AssignEp+0x3c>
    /* Increment the index */
    idx++;
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8019380:	2106      	movs	r1, #6
 8019382:	4361      	muls	r1, r4
 8019384:	245c      	movs	r4, #92	@ 0x5c
 8019386:	436c      	muls	r4, r5
 8019388:	1909      	adds	r1, r1, r4
 801938a:	1841      	adds	r1, r0, r1
 801938c:	9c01      	ldr	r4, [sp, #4]
 801938e:	1d48      	adds	r0, r1, #5
 8019390:	77c4      	strb	r4, [r0, #31]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8019392:	1d88      	adds	r0, r1, #6
 8019394:	77c2      	strb	r2, [r0, #31]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8019396:	84cb      	strh	r3, [r1, #38]	@ 0x26
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8019398:	2301      	movs	r3, #1
 801939a:	3128      	adds	r1, #40	@ 0x28
 801939c:	700b      	strb	r3, [r1, #0]
}
 801939e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 80193a0:	003e      	movs	r6, r7
 80193a2:	4366      	muls	r6, r4
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80193a4:	5d8e      	ldrb	r6, [r1, r6]
 80193a6:	2e00      	cmp	r6, #0
 80193a8:	d0ea      	beq.n	8019380 <USBD_FrameWork_AssignEp+0x1c>
    idx++;
 80193aa:	3401      	adds	r4, #1
 80193ac:	e7e6      	b.n	801937c <USBD_FrameWork_AssignEp+0x18>

080193ae <USBD_Desc_GetString.part.0>:
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 80193ae:	b570      	push	{r4, r5, r6, lr}
 80193b0:	0016      	movs	r6, r2
 80193b2:	0004      	movs	r4, r0
 80193b4:	000d      	movs	r5, r1
  while (*pbuff != (uint8_t)'\0')
 80193b6:	f7e6 fea7 	bl	8000108 <strlen>
 80193ba:	2201      	movs	r2, #1
 80193bc:	b2c0      	uxtb	r0, r0
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 80193be:	8030      	strh	r0, [r6, #0]
  unicode[idx++] = *(uint8_t *)len;
 80193c0:	1b12      	subs	r2, r2, r4
 80193c2:	7028      	strb	r0, [r5, #0]
  while (*pdesc != (uint8_t)'\0')
 80193c4:	7821      	ldrb	r1, [r4, #0]
 80193c6:	18a3      	adds	r3, r4, r2
 80193c8:	b2db      	uxtb	r3, r3
 80193ca:	2900      	cmp	r1, #0
 80193cc:	d100      	bne.n	80193d0 <USBD_Desc_GetString.part.0+0x22>
}
 80193ce:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx++] = *pdesc;
 80193d0:	54e9      	strb	r1, [r5, r3]
    pdesc++;
 80193d2:	3401      	adds	r4, #1
 80193d4:	e7f6      	b.n	80193c4 <USBD_Desc_GetString.part.0+0x16>
	...

080193d8 <USBD_Device_Framework_Builder.constprop.0.isra.0>:
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 80193d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193da:	000e      	movs	r6, r1
 80193dc:	b089      	sub	sp, #36	@ 0x24
 80193de:	9205      	str	r2, [sp, #20]
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 80193e0:	4ad6      	ldr	r2, [pc, #856]	@ (801973c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x364>)
  pdev->CurrConfDescSz = 0U;
 80193e2:	0001      	movs	r1, r0
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 80193e4:	6016      	str	r6, [r2, #0]
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 80193e6:	2212      	movs	r2, #18
  pdev->CurrConfDescSz = 0U;
 80193e8:	2300      	movs	r3, #0
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 80193ea:	4694      	mov	ip, r2
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 80193ec:	0004      	movs	r4, r0
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 80193ee:	2001      	movs	r0, #1
  pDevDesc->idVendor = USBD_VID;
 80193f0:	277d      	movs	r7, #125	@ 0x7d
  pdev->CurrConfDescSz = 0U;
 80193f2:	31fc      	adds	r1, #252	@ 0xfc
 80193f4:	628b      	str	r3, [r1, #40]	@ 0x28
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 80193f6:	2540      	movs	r5, #64	@ 0x40
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 80193f8:	7070      	strb	r0, [r6, #1]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 80193fa:	73b0      	strb	r0, [r6, #14]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 80193fc:	7470      	strb	r0, [r6, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 80193fe:	4660      	mov	r0, ip
  pDevDesc->idVendor = USBD_VID;
 8019400:	427f      	negs	r7, r7
 8019402:	7237      	strb	r7, [r6, #8]
 8019404:	3781      	adds	r7, #129	@ 0x81
 8019406:	7277      	strb	r7, [r6, #9]
  pDevDesc->idProduct = USBD_PID;
 8019408:	3f84      	subs	r7, #132	@ 0x84
 801940a:	72b7      	strb	r7, [r6, #10]
 801940c:	37d1      	adds	r7, #209	@ 0xd1
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 801940e:	7032      	strb	r2, [r6, #0]
  pDevDesc->idProduct = USBD_PID;
 8019410:	72f7      	strb	r7, [r6, #11]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8019412:	3a10      	subs	r2, #16
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8019414:	3f4e      	subs	r7, #78	@ 0x4e
  pDevDesc->bcdUSB = USB_BCDUSB;
 8019416:	70b3      	strb	r3, [r6, #2]
 8019418:	70f2      	strb	r2, [r6, #3]
  pDevDesc->bDeviceClass = 0x00;
 801941a:	7133      	strb	r3, [r6, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 801941c:	7173      	strb	r3, [r6, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 801941e:	71b3      	strb	r3, [r6, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8019420:	71f5      	strb	r5, [r6, #7]
  pDevDesc->bcdDevice = 0x0200;
 8019422:	7333      	strb	r3, [r6, #12]
 8019424:	7372      	strb	r2, [r6, #13]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8019426:	73f2      	strb	r2, [r6, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8019428:	7437      	strb	r7, [r6, #16]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 801942a:	6248      	str	r0, [r1, #36]	@ 0x24
  if (Speed == USBD_HIGH_SPEED)
 801942c:	9805      	ldr	r0, [sp, #20]
 801942e:	2801      	cmp	r0, #1
 8019430:	d110      	bne.n	8019454 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x7c>
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8019432:	3009      	adds	r0, #9
 8019434:	74b0      	strb	r0, [r6, #18]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8019436:	0030      	movs	r0, r6
 8019438:	4460      	add	r0, ip
    pDevQualDesc->bcdDevice = 0x0200;
 801943a:	70c2      	strb	r2, [r0, #3]
    pDevQualDesc->bNumConfigurations = 0x01;
 801943c:	9a05      	ldr	r2, [sp, #20]
    pDevQualDesc->bcdDevice = 0x0200;
 801943e:	7083      	strb	r3, [r0, #2]
    pDevQualDesc->Class = 0x00;
 8019440:	7103      	strb	r3, [r0, #4]
    pDevQualDesc->SubClass = 0x00;
 8019442:	7143      	strb	r3, [r0, #5]
    pDevQualDesc->Protocol = 0x00;
 8019444:	7183      	strb	r3, [r0, #6]
    pDevQualDesc->bReserved = 0x00;
 8019446:	7243      	strb	r3, [r0, #9]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8019448:	3703      	adds	r7, #3
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 801944a:	331c      	adds	r3, #28
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 801944c:	7047      	strb	r7, [r0, #1]
    pDevQualDesc->bMaxPacketSize = 0x40;
 801944e:	71c5      	strb	r5, [r0, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8019450:	7202      	strb	r2, [r0, #8]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8019452:	624b      	str	r3, [r1, #36]	@ 0x24
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8019454:	4bba      	ldr	r3, [pc, #744]	@ (8019740 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x368>)
 8019456:	9304      	str	r3, [sp, #16]
 8019458:	4bba      	ldr	r3, [pc, #744]	@ (8019744 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x36c>)
 801945a:	9307      	str	r3, [sp, #28]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801945c:	6863      	ldr	r3, [r4, #4]
 801945e:	9301      	str	r3, [sp, #4]
 8019460:	2b02      	cmp	r3, #2
 8019462:	d818      	bhi.n	8019496 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8019464:	68a3      	ldr	r3, [r4, #8]
 8019466:	9302      	str	r3, [sp, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8019468:	2b02      	cmp	r3, #2
 801946a:	d814      	bhi.n	8019496 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 801946c:	9b04      	ldr	r3, [sp, #16]
 801946e:	7819      	ldrb	r1, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8019470:	2900      	cmp	r1, #0
 8019472:	d010      	beq.n	8019496 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8019474:	0023      	movs	r3, r4
 8019476:	33fc      	adds	r3, #252	@ 0xfc
 8019478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      (pdev->tclasslist[pdev->classId].Active == 0U))
 801947a:	9a01      	ldr	r2, [sp, #4]
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 801947c:	469c      	mov	ip, r3
      (pdev->tclasslist[pdev->classId].Active == 0U))
 801947e:	235c      	movs	r3, #92	@ 0x5c
 8019480:	4353      	muls	r3, r2
 8019482:	18e3      	adds	r3, r4, r3
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8019484:	699d      	ldr	r5, [r3, #24]
 8019486:	2d00      	cmp	r5, #0
 8019488:	d017      	beq.n	80194ba <USBD_Device_Framework_Builder.constprop.0.isra.0+0xe2>
      pdev->classId ++;
 801948a:	9b01      	ldr	r3, [sp, #4]
 801948c:	3301      	adds	r3, #1
 801948e:	6063      	str	r3, [r4, #4]
      pdev->NumClasses ++;
 8019490:	9b02      	ldr	r3, [sp, #8]
 8019492:	3301      	adds	r3, #1
 8019494:	60a3      	str	r3, [r4, #8]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8019496:	9b04      	ldr	r3, [sp, #16]
 8019498:	9a07      	ldr	r2, [sp, #28]
 801949a:	3301      	adds	r3, #1
 801949c:	9304      	str	r3, [sp, #16]
 801949e:	4293      	cmp	r3, r2
 80194a0:	d1dc      	bne.n	801945c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x84>
  if (pdev->NumClasses > 1)
 80194a2:	68a3      	ldr	r3, [r4, #8]
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d800      	bhi.n	80194aa <USBD_Device_Framework_Builder.constprop.0.isra.0+0xd2>
 80194a8:	e13f      	b.n	801972a <USBD_Device_Framework_Builder.constprop.0.isra.0+0x352>
    pDevDesc->bDeviceClass = 0xEF;
 80194aa:	23ef      	movs	r3, #239	@ 0xef
 80194ac:	7133      	strb	r3, [r6, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 80194ae:	3bed      	subs	r3, #237	@ 0xed
 80194b0:	7173      	strb	r3, [r6, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 80194b2:	3b01      	subs	r3, #1
      pDevDesc->bDeviceProtocol = 0x00;
 80194b4:	71b3      	strb	r3, [r6, #6]
}
 80194b6:	b009      	add	sp, #36	@ 0x24
 80194b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80194ba:	9a01      	ldr	r2, [sp, #4]
    pdev->tclasslist[pdev->classId].ClassType = class;
 80194bc:	7319      	strb	r1, [r3, #12]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80194be:	611a      	str	r2, [r3, #16]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80194c0:	2201      	movs	r2, #1
 80194c2:	619a      	str	r2, [r3, #24]
    if (class == CLASS_TYPE_HID)
 80194c4:	4291      	cmp	r1, r2
 80194c6:	d10a      	bne.n	80194de <USBD_Device_Framework_Builder.constprop.0.isra.0+0x106>
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 80194c8:	489f      	ldr	r0, [pc, #636]	@ (8019748 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x370>)
 80194ca:	4fa0      	ldr	r7, [pc, #640]	@ (801974c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x374>)
 80194cc:	7802      	ldrb	r2, [r0, #0]
 80194ce:	5cbf      	ldrb	r7, [r7, r2]
      interface_idx++;
 80194d0:	3201      	adds	r2, #1
 80194d2:	b2d2      	uxtb	r2, r2
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 80194d4:	751f      	strb	r7, [r3, #20]
      if (interface_idx == sizeof(UserHIDInterface))
 80194d6:	2a01      	cmp	r2, #1
 80194d8:	d100      	bne.n	80194dc <USBD_Device_Framework_Builder.constprop.0.isra.0+0x104>
 80194da:	e097      	b.n	801960c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x234>
      interface_idx++;
 80194dc:	7002      	strb	r2, [r0, #0]
      (void)USBD_FrameWork_AddClass(pdev,
 80194de:	4663      	mov	r3, ip
 80194e0:	18f7      	adds	r7, r6, r3
  pdev->Speed = Speed;
 80194e2:	9b05      	ldr	r3, [sp, #20]
 80194e4:	7023      	strb	r3, [r4, #0]
  if (pdev->classId == 0U)
 80194e6:	9b01      	ldr	r3, [sp, #4]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d114      	bne.n	8019516 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x13e>
  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 80194ec:	3309      	adds	r3, #9
 80194ee:	703b      	strb	r3, [r7, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 80194f0:	3b07      	subs	r3, #7
 80194f2:	707b      	strb	r3, [r7, #1]
  ptr->wDescriptorLength = 0U;
 80194f4:	9b01      	ldr	r3, [sp, #4]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 80194f6:	0022      	movs	r2, r4
  ptr->bNumInterfaces = 0U;
 80194f8:	713b      	strb	r3, [r7, #4]
  ptr->wDescriptorLength = 0U;
 80194fa:	70bb      	strb	r3, [r7, #2]
 80194fc:	70fb      	strb	r3, [r7, #3]
  ptr->bConfigurationValue = 1U;
 80194fe:	2301      	movs	r3, #1
 8019500:	717b      	strb	r3, [r7, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8019502:	9b01      	ldr	r3, [sp, #4]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8019504:	32fc      	adds	r2, #252	@ 0xfc
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8019506:	71bb      	strb	r3, [r7, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 8019508:	23c0      	movs	r3, #192	@ 0xc0
 801950a:	71fb      	strb	r3, [r7, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 801950c:	3ba7      	subs	r3, #167	@ 0xa7
 801950e:	723b      	strb	r3, [r7, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8019510:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8019512:	3309      	adds	r3, #9
 8019514:	6293      	str	r3, [r2, #40]	@ 0x28
  switch (pdev->tclasslist[pdev->classId].ClassType)
 8019516:	2901      	cmp	r1, #1
 8019518:	d07a      	beq.n	8019610 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x238>
 801951a:	2903      	cmp	r1, #3
 801951c:	d1b5      	bne.n	801948a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
  uint32_t idx = 0U;
 801951e:	9a02      	ldr	r2, [sp, #8]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8019520:	1e13      	subs	r3, r2, #0
 8019522:	d004      	beq.n	801952e <USBD_Device_Framework_Builder.constprop.0.isra.0+0x156>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8019524:	6a22      	ldr	r2, [r4, #32]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8019526:	2b02      	cmp	r3, #2
 8019528:	d101      	bne.n	801952e <USBD_Device_Framework_Builder.constprop.0.isra.0+0x156>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801952a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 801952c:	18d2      	adds	r2, r2, r3
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 801952e:	235c      	movs	r3, #92	@ 0x5c
 8019530:	9901      	ldr	r1, [sp, #4]
      pdev->tclasslist[pdev->classId].NumEps = 2; /* EP_IN, EP_OUT */
 8019532:	2502      	movs	r5, #2
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 8019534:	434b      	muls	r3, r1
 8019536:	2101      	movs	r1, #1
 8019538:	18e3      	adds	r3, r4, r3
 801953a:	6219      	str	r1, [r3, #32]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 801953c:	0019      	movs	r1, r3
 801953e:	315a      	adds	r1, #90	@ 0x5a
 8019540:	700a      	strb	r2, [r1, #0]
      pdev->tclasslist[pdev->classId].NumEps = 2; /* EP_IN, EP_OUT */
 8019542:	61dd      	str	r5, [r3, #28]
      if (pdev->Speed == USBD_HIGH_SPEED)
 8019544:	9b05      	ldr	r3, [sp, #20]
 8019546:	2b01      	cmp	r3, #1
 8019548:	d000      	beq.n	801954c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x174>
 801954a:	e0e6      	b.n	801971a <USBD_Device_Framework_Builder.constprop.0.isra.0+0x342>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 801954c:	2380      	movs	r3, #128	@ 0x80
 801954e:	002a      	movs	r2, r5
 8019550:	009b      	lsls	r3, r3, #2
 8019552:	2182      	movs	r1, #130	@ 0x82
 8019554:	0020      	movs	r0, r4
 8019556:	f7ff ff05 	bl	8019364 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 801955a:	2380      	movs	r3, #128	@ 0x80
 801955c:	009b      	lsls	r3, r3, #2
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 801955e:	002a      	movs	r2, r5
 8019560:	0029      	movs	r1, r5
{
  USBD_IfDescTypedef       *pIfDesc;
  USBD_EpDescTypedef       *pEpDesc;

  /* Append MSC Interface descriptor */
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8019562:	0025      	movs	r5, r4
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8019564:	0020      	movs	r0, r4
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8019566:	35fc      	adds	r5, #252	@ 0xfc
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8019568:	f7ff fefc 	bl	8019364 <USBD_FrameWork_AssignEp>
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 801956c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801956e:	9901      	ldr	r1, [sp, #4]
 8019570:	18fa      	adds	r2, r7, r3
 8019572:	9303      	str	r3, [sp, #12]
 8019574:	2309      	movs	r3, #9
 8019576:	7013      	strb	r3, [r2, #0]
 8019578:	3b05      	subs	r3, #5
 801957a:	7053      	strb	r3, [r2, #1]
 801957c:	3358      	adds	r3, #88	@ 0x58
 801957e:	434b      	muls	r3, r1
 8019580:	18e3      	adds	r3, r4, r3
 8019582:	0019      	movs	r1, r3
 8019584:	315a      	adds	r1, #90	@ 0x5a
 8019586:	7809      	ldrb	r1, [r1, #0]
                          (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                          (0x08U), (0x06U), (0x50U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8019588:	2005      	movs	r0, #5
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 801958a:	7091      	strb	r1, [r2, #2]
 801958c:	2100      	movs	r1, #0
 801958e:	70d1      	strb	r1, [r2, #3]
 8019590:	468c      	mov	ip, r1
 8019592:	69d9      	ldr	r1, [r3, #28]
 8019594:	7111      	strb	r1, [r2, #4]
 8019596:	2108      	movs	r1, #8
 8019598:	7151      	strb	r1, [r2, #5]
 801959a:	3902      	subs	r1, #2
 801959c:	7191      	strb	r1, [r2, #6]
 801959e:	314a      	adds	r1, #74	@ 0x4a
 80195a0:	71d1      	strb	r1, [r2, #7]
 80195a2:	4661      	mov	r1, ip
 80195a4:	7211      	strb	r1, [r2, #8]
 80195a6:	9a03      	ldr	r2, [sp, #12]
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 80195a8:	3107      	adds	r1, #7
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 80195aa:	3209      	adds	r2, #9
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 80195ac:	19d2      	adds	r2, r2, r7
 80195ae:	7011      	strb	r1, [r2, #0]
 80195b0:	7050      	strb	r0, [r2, #1]
 80195b2:	1819      	adds	r1, r3, r0
 80195b4:	7fc9      	ldrb	r1, [r1, #31]
 80195b6:	7091      	strb	r1, [r2, #2]
 80195b8:	2102      	movs	r1, #2
 80195ba:	70d1      	strb	r1, [r2, #3]
 80195bc:	0019      	movs	r1, r3
 80195be:	3126      	adds	r1, #38	@ 0x26
 80195c0:	9106      	str	r1, [sp, #24]
 80195c2:	7809      	ldrb	r1, [r1, #0]
 80195c4:	7111      	strb	r1, [r2, #4]
 80195c6:	9906      	ldr	r1, [sp, #24]
 80195c8:	7849      	ldrb	r1, [r1, #1]
 80195ca:	7151      	strb	r1, [r2, #5]
 80195cc:	4661      	mov	r1, ip
 80195ce:	7191      	strb	r1, [r2, #6]
 80195d0:	9a03      	ldr	r2, [sp, #12]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add),
 80195d2:	3107      	adds	r1, #7
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 80195d4:	3210      	adds	r2, #16
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add),
 80195d6:	19d2      	adds	r2, r2, r7
 80195d8:	7050      	strb	r0, [r2, #1]
 80195da:	0018      	movs	r0, r3
 80195dc:	7011      	strb	r1, [r2, #0]
 80195de:	302a      	adds	r0, #42	@ 0x2a
 80195e0:	7800      	ldrb	r0, [r0, #0]
 80195e2:	3905      	subs	r1, #5
 80195e4:	332c      	adds	r3, #44	@ 0x2c
 80195e6:	7090      	strb	r0, [r2, #2]
 80195e8:	70d1      	strb	r1, [r2, #3]
 80195ea:	7819      	ldrb	r1, [r3, #0]
 80195ec:	7111      	strb	r1, [r2, #4]
 80195ee:	785b      	ldrb	r3, [r3, #1]
 80195f0:	7153      	strb	r3, [r2, #5]
 80195f2:	4663      	mov	r3, ip
 80195f4:	7193      	strb	r3, [r2, #6]
 80195f6:	9b03      	ldr	r3, [sp, #12]
 80195f8:	3317      	adds	r3, #23
 80195fa:	62ab      	str	r3, [r5, #40]	@ 0x28
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 80195fc:	793a      	ldrb	r2, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 80195fe:	70bb      	strb	r3, [r7, #2]
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8019600:	3201      	adds	r2, #1
 8019602:	713a      	strb	r2, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8019604:	b29a      	uxth	r2, r3
 8019606:	0a12      	lsrs	r2, r2, #8
 8019608:	70fa      	strb	r2, [r7, #3]
}
 801960a:	e73e      	b.n	801948a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
        interface_idx = 0U;
 801960c:	7005      	strb	r5, [r0, #0]
 801960e:	e766      	b.n	80194de <USBD_Device_Framework_Builder.constprop.0.isra.0+0x106>
      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 8019610:	255c      	movs	r5, #92	@ 0x5c
 8019612:	9b01      	ldr	r3, [sp, #4]
 8019614:	436b      	muls	r3, r5
 8019616:	18e3      	adds	r3, r4, r3
 8019618:	7d1b      	ldrb	r3, [r3, #20]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d000      	beq.n	8019620 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x248>
 801961e:	e734      	b.n	801948a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
  uint32_t idx = 0U;
 8019620:	9b02      	ldr	r3, [sp, #8]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8019622:	1e1a      	subs	r2, r3, #0
 8019624:	d004      	beq.n	8019630 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x258>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8019626:	6a23      	ldr	r3, [r4, #32]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8019628:	2a02      	cmp	r2, #2
 801962a:	d101      	bne.n	8019630 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x258>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801962c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801962e:	189b      	adds	r3, r3, r2
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 8019630:	9a01      	ldr	r2, [sp, #4]
 8019632:	2001      	movs	r0, #1
 8019634:	4355      	muls	r5, r2
 8019636:	1965      	adds	r5, r4, r5
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8019638:	002a      	movs	r2, r5
 801963a:	325a      	adds	r2, #90	@ 0x5a
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 801963c:	6228      	str	r0, [r5, #32]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 801963e:	7013      	strb	r3, [r2, #0]
          pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP_IN, EP_OUT */
 8019640:	2302      	movs	r3, #2
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 8019642:	2181      	movs	r1, #129	@ 0x81
 8019644:	0020      	movs	r0, r4
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8019646:	9206      	str	r2, [sp, #24]
          pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP_IN, EP_OUT */
 8019648:	61eb      	str	r3, [r5, #28]
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 801964a:	2203      	movs	r2, #3
 801964c:	333e      	adds	r3, #62	@ 0x3e
 801964e:	f7ff fe89 	bl	8019364 <USBD_FrameWork_AssignEp>
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPOUT_ADDR,
 8019652:	2203      	movs	r2, #3
 8019654:	2340      	movs	r3, #64	@ 0x40
 8019656:	2101      	movs	r1, #1
 8019658:	0020      	movs	r0, r4
 801965a:	f7ff fe83 	bl	8019364 <USBD_FrameWork_AssignEp>
  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 801965e:	7d2a      	ldrb	r2, [r5, #20]
 8019660:	2a00      	cmp	r2, #0
 8019662:	d14f      	bne.n	8019704 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x32c>
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8019664:	23fc      	movs	r3, #252	@ 0xfc
 8019666:	469c      	mov	ip, r3
 8019668:	44a4      	add	ip, r4
 801966a:	4663      	mov	r3, ip
 801966c:	2004      	movs	r0, #4
 801966e:	2109      	movs	r1, #9
 8019670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019672:	9303      	str	r3, [sp, #12]
 8019674:	18fb      	adds	r3, r7, r3
 8019676:	7058      	strb	r0, [r3, #1]
 8019678:	9806      	ldr	r0, [sp, #24]
 801967a:	7019      	strb	r1, [r3, #0]
 801967c:	7800      	ldrb	r0, [r0, #0]
 801967e:	70da      	strb	r2, [r3, #3]
 8019680:	7098      	strb	r0, [r3, #2]
 8019682:	69e8      	ldr	r0, [r5, #28]
 8019684:	719a      	strb	r2, [r3, #6]
 8019686:	7118      	strb	r0, [r3, #4]
 8019688:	2003      	movs	r0, #3
 801968a:	71da      	strb	r2, [r3, #7]
 801968c:	7158      	strb	r0, [r3, #5]
 801968e:	721a      	strb	r2, [r3, #8]
 8019690:	9b03      	ldr	r3, [sp, #12]
      pHidDesc->bcdHID = 0x0111U;
 8019692:	2011      	movs	r0, #17
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8019694:	185b      	adds	r3, r3, r1
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 8019696:	19db      	adds	r3, r3, r7
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 8019698:	7019      	strb	r1, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 801969a:	3118      	adds	r1, #24
 801969c:	7059      	strb	r1, [r3, #1]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 801969e:	2121      	movs	r1, #33	@ 0x21
      pHidDesc->bcdHID = 0x0111U;
 80196a0:	7098      	strb	r0, [r3, #2]
 80196a2:	3810      	subs	r0, #16
      pHidDesc->bNumDescriptors = 0x01U;
 80196a4:	7158      	strb	r0, [r3, #5]
      pHidDesc->bcdHID = 0x0111U;
 80196a6:	70d8      	strb	r0, [r3, #3]
      pHidDesc->bHIDDescriptorType = 0x22U;
 80196a8:	3021      	adds	r0, #33	@ 0x21
      pHidDesc->bCountryCode = 0x00U;
 80196aa:	711a      	strb	r2, [r3, #4]
      pHidDesc->bHIDDescriptorType = 0x22U;
 80196ac:	7198      	strb	r0, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 80196ae:	71d9      	strb	r1, [r3, #7]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 80196b0:	8da9      	ldrh	r1, [r5, #44]	@ 0x2c
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 80196b2:	721a      	strb	r2, [r3, #8]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 80196b4:	9106      	str	r1, [sp, #24]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80196b6:	2107      	movs	r1, #7
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 80196b8:	9a03      	ldr	r2, [sp, #12]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80196ba:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 80196bc:	3212      	adds	r2, #18
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80196be:	19d2      	adds	r2, r2, r7
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80196c0:	7011      	strb	r1, [r2, #0]
 80196c2:	3902      	subs	r1, #2
 80196c4:	7051      	strb	r1, [r2, #1]
 80196c6:	1869      	adds	r1, r5, r1
 80196c8:	7fc9      	ldrb	r1, [r1, #31]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80196ca:	9b03      	ldr	r3, [sp, #12]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80196cc:	7091      	strb	r1, [r2, #2]
 80196ce:	7110      	strb	r0, [r2, #4]
 80196d0:	0a00      	lsrs	r0, r0, #8
 80196d2:	7150      	strb	r0, [r2, #5]
 80196d4:	2103      	movs	r1, #3
 80196d6:	2001      	movs	r0, #1
 80196d8:	70d1      	strb	r1, [r2, #3]
 80196da:	7190      	strb	r0, [r2, #6]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 80196dc:	2207      	movs	r2, #7
 80196de:	2103      	movs	r1, #3
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80196e0:	3319      	adds	r3, #25
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 80196e2:	19db      	adds	r3, r3, r7
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 80196e4:	701a      	strb	r2, [r3, #0]
 80196e6:	3a02      	subs	r2, #2
 80196e8:	705a      	strb	r2, [r3, #1]
 80196ea:	352a      	adds	r5, #42	@ 0x2a
 80196ec:	782a      	ldrb	r2, [r5, #0]
 80196ee:	70d9      	strb	r1, [r3, #3]
 80196f0:	709a      	strb	r2, [r3, #2]
 80196f2:	9a06      	ldr	r2, [sp, #24]
 80196f4:	7198      	strb	r0, [r3, #6]
 80196f6:	711a      	strb	r2, [r3, #4]
 80196f8:	0a11      	lsrs	r1, r2, #8
 80196fa:	4662      	mov	r2, ip
 80196fc:	7159      	strb	r1, [r3, #5]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 80196fe:	9b03      	ldr	r3, [sp, #12]
 8019700:	3320      	adds	r3, #32
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8019702:	6293      	str	r3, [r2, #40]	@ 0x28
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8019704:	793b      	ldrb	r3, [r7, #4]
 8019706:	3301      	adds	r3, #1
 8019708:	713b      	strb	r3, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 801970a:	0023      	movs	r3, r4
 801970c:	33fc      	adds	r3, #252	@ 0xfc
 801970e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019710:	b293      	uxth	r3, r2
 8019712:	0a1b      	lsrs	r3, r3, #8
 8019714:	70ba      	strb	r2, [r7, #2]
 8019716:	70fb      	strb	r3, [r7, #3]
}
 8019718:	e6b7      	b.n	801948a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 801971a:	2340      	movs	r3, #64	@ 0x40
 801971c:	002a      	movs	r2, r5
 801971e:	2182      	movs	r1, #130	@ 0x82
 8019720:	0020      	movs	r0, r4
 8019722:	f7ff fe1f 	bl	8019364 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8019726:	2340      	movs	r3, #64	@ 0x40
 8019728:	e719      	b.n	801955e <USBD_Device_Framework_Builder.constprop.0.isra.0+0x186>
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 801972a:	4b05      	ldr	r3, [pc, #20]	@ (8019740 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x368>)
 801972c:	781b      	ldrb	r3, [r3, #0]
 801972e:	2b02      	cmp	r3, #2
 8019730:	d000      	beq.n	8019734 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x35c>
 8019732:	e6c0      	b.n	80194b6 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xde>
      pDevDesc->bDeviceClass = 0x02;
 8019734:	7133      	strb	r3, [r6, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8019736:	7173      	strb	r3, [r6, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8019738:	2300      	movs	r3, #0
 801973a:	e6bb      	b.n	80194b4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xdc>
 801973c:	200061c4 	.word	0x200061c4
 8019740:	200002b5 	.word	0x200002b5
 8019744:	200002b8 	.word	0x200002b8
 8019748:	200061c0 	.word	0x200061c0
 801974c:	2000645c 	.word	0x2000645c

08019750 <USBD_Get_Device_Framework_Speed>:
{
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	0002      	movs	r2, r0
 8019754:	000d      	movs	r5, r1
  if (USBD_FULL_SPEED == Speed)
 8019756:	2800      	cmp	r0, #0
 8019758:	d10c      	bne.n	8019774 <USBD_Get_Device_Framework_Speed+0x24>
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 801975a:	4c08      	ldr	r4, [pc, #32]	@ (801977c <USBD_Get_Device_Framework_Speed+0x2c>)
 801975c:	4e08      	ldr	r6, [pc, #32]	@ (8019780 <USBD_Get_Device_Framework_Speed+0x30>)
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 801975e:	0030      	movs	r0, r6
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8019760:	36fc      	adds	r6, #252	@ 0xfc
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8019762:	0021      	movs	r1, r4
 8019764:	f7ff fe38 	bl	80193d8 <USBD_Device_Framework_Builder.constprop.0.isra.0>
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8019768:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 801976a:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
    pFrameWork = pDevFrameWorkDesc_HS;
 801976c:	0020      	movs	r0, r4
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 801976e:	189b      	adds	r3, r3, r2
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8019770:	602b      	str	r3, [r5, #0]
}
 8019772:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8019774:	4c03      	ldr	r4, [pc, #12]	@ (8019784 <USBD_Get_Device_Framework_Speed+0x34>)
 8019776:	4e04      	ldr	r6, [pc, #16]	@ (8019788 <USBD_Get_Device_Framework_Speed+0x38>)
 8019778:	e7f1      	b.n	801975e <USBD_Get_Device_Framework_Speed+0xe>
 801977a:	46c0      	nop			@ (mov r8, r8)
 801977c:	20006394 	.word	0x20006394
 8019780:	20006588 	.word	0x20006588
 8019784:	200062cc 	.word	0x200062cc
 8019788:	20006460 	.word	0x20006460

0801978c <USBD_Get_String_Framework>:
{
 801978c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801978e:	4b20      	ldr	r3, [pc, #128]	@ (8019810 <USBD_Get_String_Framework+0x84>)
 8019790:	4d20      	ldr	r5, [pc, #128]	@ (8019814 <USBD_Get_String_Framework+0x88>)
{
 8019792:	b085      	sub	sp, #20
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019794:	802b      	strh	r3, [r5, #0]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8019796:	2301      	movs	r3, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019798:	2709      	movs	r7, #9
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801979a:	2604      	movs	r6, #4
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 801979c:	70ab      	strb	r3, [r5, #2]
  if (desc == NULL)
 801979e:	ab02      	add	r3, sp, #8
{
 80197a0:	9001      	str	r0, [sp, #4]
 80197a2:	1d9a      	adds	r2, r3, #6
 80197a4:	491c      	ldr	r1, [pc, #112]	@ (8019818 <USBD_Get_String_Framework+0x8c>)
 80197a6:	481d      	ldr	r0, [pc, #116]	@ (801981c <USBD_Get_String_Framework+0x90>)
 80197a8:	f7ff fe01 	bl	80193ae <USBD_Desc_GetString.part.0>
  count += len + 1;
 80197ac:	ab02      	add	r3, sp, #8
 80197ae:	799b      	ldrb	r3, [r3, #6]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80197b0:	481b      	ldr	r0, [pc, #108]	@ (8019820 <USBD_Get_String_Framework+0x94>)
  count += len + 1;
 80197b2:	1d1a      	adds	r2, r3, #4
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80197b4:	b2d2      	uxtb	r2, r2
 80197b6:	54af      	strb	r7, [r5, r2]
 80197b8:	1d5a      	adds	r2, r3, #5
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80197ba:	b2d2      	uxtb	r2, r2
 80197bc:	54ae      	strb	r6, [r5, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 80197be:	2202      	movs	r2, #2
 80197c0:	1ddc      	adds	r4, r3, #7
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80197c2:	3306      	adds	r3, #6
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 80197c4:	b2db      	uxtb	r3, r3
 80197c6:	54ea      	strb	r2, [r5, r3]
 80197c8:	b2e4      	uxtb	r4, r4
  if (desc == NULL)
 80197ca:	ab02      	add	r3, sp, #8
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 80197cc:	1961      	adds	r1, r4, r5
 80197ce:	1d9a      	adds	r2, r3, #6
 80197d0:	f7ff fded 	bl	80193ae <USBD_Desc_GetString.part.0>
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80197d4:	2203      	movs	r2, #3
  count += len + 1;
 80197d6:	ab02      	add	r3, sp, #8
 80197d8:	88db      	ldrh	r3, [r3, #6]
 80197da:	4812      	ldr	r0, [pc, #72]	@ (8019824 <USBD_Get_String_Framework+0x98>)
 80197dc:	18e4      	adds	r4, r4, r3
 80197de:	b2e4      	uxtb	r4, r4
 80197e0:	1c63      	adds	r3, r4, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	54ef      	strb	r7, [r5, r3]
 80197e6:	1ca3      	adds	r3, r4, #2
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80197e8:	b2db      	uxtb	r3, r3
 80197ea:	54ee      	strb	r6, [r5, r3]
 80197ec:	1ce3      	adds	r3, r4, #3
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80197ee:	b2db      	uxtb	r3, r3
 80197f0:	19a4      	adds	r4, r4, r6
 80197f2:	54ea      	strb	r2, [r5, r3]
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80197f4:	b2e1      	uxtb	r1, r4
 80197f6:	ab02      	add	r3, sp, #8
 80197f8:	1d9a      	adds	r2, r3, #6
 80197fa:	1949      	adds	r1, r1, r5
 80197fc:	f7ff fdd7 	bl	80193ae <USBD_Desc_GetString.part.0>
  *Length = strlen((const char *)USBD_string_framework);
 8019800:	0028      	movs	r0, r5
 8019802:	f7e6 fc81 	bl	8000108 <strlen>
 8019806:	9b01      	ldr	r3, [sp, #4]
 8019808:	6018      	str	r0, [r3, #0]
}
 801980a:	0028      	movs	r0, r5
 801980c:	b005      	add	sp, #20
 801980e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019810:	00000409 	.word	0x00000409
 8019814:	200061cc 	.word	0x200061cc
 8019818:	200061cf 	.word	0x200061cf
 801981c:	0802040d 	.word	0x0802040d
 8019820:	08020414 	.word	0x08020414
 8019824:	08020423 	.word	0x08020423

08019828 <USBD_Get_Language_Id_Framework>:
{
 8019828:	b570      	push	{r4, r5, r6, lr}
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801982a:	4c05      	ldr	r4, [pc, #20]	@ (8019840 <USBD_Get_Language_Id_Framework+0x18>)
 801982c:	4b05      	ldr	r3, [pc, #20]	@ (8019844 <USBD_Get_Language_Id_Framework+0x1c>)
{
 801982e:	0005      	movs	r5, r0
  *Length = strlen((const char *)USBD_language_id_framework);
 8019830:	0020      	movs	r0, r4
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019832:	8023      	strh	r3, [r4, #0]
  *Length = strlen((const char *)USBD_language_id_framework);
 8019834:	f7e6 fc68 	bl	8000108 <strlen>
 8019838:	6028      	str	r0, [r5, #0]
}
 801983a:	0020      	movs	r0, r4
 801983c:	bd70      	pop	{r4, r5, r6, pc}
 801983e:	46c0      	nop			@ (mov r8, r8)
 8019840:	200061c8 	.word	0x200061c8
 8019844:	00000409 	.word	0x00000409

08019848 <USBD_Get_Interface_Number>:
{
 8019848:	b530      	push	{r4, r5, lr}
 801984a:	2303      	movs	r3, #3
 801984c:	0004      	movs	r4, r0
  uint8_t itf_num = 0U;
 801984e:	2000      	movs	r0, #0
 8019850:	4a07      	ldr	r2, [pc, #28]	@ (8019870 <USBD_Get_Interface_Number+0x28>)
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8019852:	7b15      	ldrb	r5, [r2, #12]
 8019854:	42a5      	cmp	r5, r4
 8019856:	d105      	bne.n	8019864 <USBD_Get_Interface_Number+0x1c>
 8019858:	7d15      	ldrb	r5, [r2, #20]
 801985a:	428d      	cmp	r5, r1
 801985c:	d102      	bne.n	8019864 <USBD_Get_Interface_Number+0x1c>
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 801985e:	0010      	movs	r0, r2
 8019860:	305a      	adds	r0, #90	@ 0x5a
 8019862:	7800      	ldrb	r0, [r0, #0]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8019864:	3b01      	subs	r3, #1
 8019866:	b2db      	uxtb	r3, r3
 8019868:	325c      	adds	r2, #92	@ 0x5c
 801986a:	2b00      	cmp	r3, #0
 801986c:	d1f1      	bne.n	8019852 <USBD_Get_Interface_Number+0xa>
}
 801986e:	bd30      	pop	{r4, r5, pc}
 8019870:	20006588 	.word	0x20006588

08019874 <USBD_Get_Configuration_Number>:
}
 8019874:	2001      	movs	r0, #1
 8019876:	4770      	bx	lr

08019878 <USBD_HID_ReportDesc>:
{
 8019878:	0003      	movs	r3, r0
  uint8_t *pHidReportDesc = NULL;
 801987a:	425a      	negs	r2, r3
 801987c:	4153      	adcs	r3, r2
      pHidReportDesc = USBD_CustomHID_ReportDesc;
 801987e:	4802      	ldr	r0, [pc, #8]	@ (8019888 <USBD_HID_ReportDesc+0x10>)
  uint8_t *pHidReportDesc = NULL;
 8019880:	425b      	negs	r3, r3
 8019882:	4018      	ands	r0, r3
}
 8019884:	4770      	bx	lr
 8019886:	46c0      	nop			@ (mov r8, r8)
 8019888:	20000294 	.word	0x20000294

0801988c <USBD_HID_ReportDesc_length>:
{
 801988c:	0003      	movs	r3, r0
  uint16_t ReportDesc_Size = 0;
 801988e:	425a      	negs	r2, r3
 8019890:	4153      	adcs	r3, r2
      ReportDesc_Size = sizeof(USBD_CustomHID_ReportDesc);
 8019892:	2021      	movs	r0, #33	@ 0x21
  uint16_t ReportDesc_Size = 0;
 8019894:	425b      	negs	r3, r3
 8019896:	4018      	ands	r0, r3
}
 8019898:	4770      	bx	lr

0801989a <USBD_STORAGE_Activate>:
  /* USER CODE BEGIN USBD_STORAGE_Activate */
  UX_PARAMETER_NOT_USED(storage_instance);
  /* USER CODE END USBD_STORAGE_Activate */

  return;
}
 801989a:	4770      	bx	lr

0801989c <USBD_STORAGE_Deactivate>:
  * @brief  USBD_STORAGE_Deactivate
  *         This function is called when extraction of a storage device.
  * @param  storage_instance: Pointer to the storage class instance.
  * @retval none
  */
VOID USBD_STORAGE_Deactivate(VOID *storage_instance)
 801989c:	4770      	bx	lr
	...

080198a0 <USBD_STORAGE_Read>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Read(VOID *storage_instance, ULONG lun, UCHAR *data_pointer,
                       ULONG number_blocks, ULONG lba, ULONG *media_status)
{
 80198a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN USBD_STORAGE_Read */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);

  while(number_blocks--) {
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 80198a2:	2780      	movs	r7, #128	@ 0x80
{
 80198a4:	0015      	movs	r5, r2
 80198a6:	9c08      	ldr	r4, [sp, #32]
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 80198a8:	017f      	lsls	r7, r7, #5
 80198aa:	191e      	adds	r6, r3, r4
  while(number_blocks--) {
 80198ac:	42b4      	cmp	r4, r6
 80198ae:	d10e      	bne.n	80198ce <USBD_STORAGE_Read+0x2e>
	  lba ++;
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
  }
  LOG_USB_MSC("--> USBD_STORAGE_Read: lba=%lu, num_blocks=%lu, status:%u\r\n", lba, (number_blocks+1),status);
 80198b0:	2500      	movs	r5, #0
 80198b2:	4b0c      	ldr	r3, [pc, #48]	@ (80198e4 <USBD_STORAGE_Read+0x44>)
 80198b4:	4a0c      	ldr	r2, [pc, #48]	@ (80198e8 <USBD_STORAGE_Read+0x48>)
 80198b6:	6818      	ldr	r0, [r3, #0]
 80198b8:	9501      	str	r5, [sp, #4]
 80198ba:	9500      	str	r5, [sp, #0]
 80198bc:	0023      	movs	r3, r4
 80198be:	490b      	ldr	r1, [pc, #44]	@ (80198ec <USBD_STORAGE_Read+0x4c>)
 80198c0:	68c0      	ldr	r0, [r0, #12]
 80198c2:	f000 fd4f 	bl	801a364 <fiprintf>
    /* Set the media status with the result */
    *media_status = status;
 80198c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24

  /* USER CODE END USBD_STORAGE_Read */

  return status;
}
 80198c8:	0028      	movs	r0, r5
    *media_status = status;
 80198ca:	601d      	str	r5, [r3, #0]
}
 80198cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 80198ce:	0029      	movs	r1, r5
 80198d0:	0320      	lsls	r0, r4, #12
 80198d2:	003a      	movs	r2, r7
 80198d4:	f7f0 fd0a 	bl	800a2ec <SPI_FLASH_ReadData>
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
 80198d8:	2380      	movs	r3, #128	@ 0x80
 80198da:	015b      	lsls	r3, r3, #5
	  lba ++;
 80198dc:	3401      	adds	r4, #1
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
 80198de:	18ed      	adds	r5, r5, r3
 80198e0:	e7e4      	b.n	80198ac <USBD_STORAGE_Read+0xc>
 80198e2:	46c0      	nop			@ (mov r8, r8)
 80198e4:	200002cc 	.word	0x200002cc
 80198e8:	0801de2e 	.word	0x0801de2e
 80198ec:	08020430 	.word	0x08020430

080198f0 <USBD_STORAGE_Write>:
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(data_pointer);
  UX_PARAMETER_NOT_USED(number_blocks);
  UX_PARAMETER_NOT_USED(lba);

  *media_status = status;
 80198f0:	2000      	movs	r0, #0
 80198f2:	9b01      	ldr	r3, [sp, #4]
 80198f4:	6018      	str	r0, [r3, #0]
  /* USER CODE END USBD_STORAGE_Write */

  return status;
}
 80198f6:	4770      	bx	lr

080198f8 <USBD_STORAGE_Flush>:
  UX_PARAMETER_NOT_USED(lba);
  UX_PARAMETER_NOT_USED(media_status);
  /* USER CODE END USBD_STORAGE_Flush */

  return status;
}
 80198f8:	2000      	movs	r0, #0
 80198fa:	4770      	bx	lr

080198fc <USBD_STORAGE_Status>:
  /* USER CODE BEGIN USBD_STORAGE_Status */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_id);
//  LOG_USB_MSC("USBD_STORAGE_Status\r\n");
  *media_status = UX_SUCCESS ;
 80198fc:	2000      	movs	r0, #0
 80198fe:	6018      	str	r0, [r3, #0]
  /* USER CODE END USBD_STORAGE_Status */

  return status;
}
 8019900:	4770      	bx	lr

08019902 <USBD_STORAGE_Notification>:
  UX_PARAMETER_NOT_USED(media_notification);
  UX_PARAMETER_NOT_USED(media_notification_length);
  /* USER CODE END USBD_STORAGE_Notification */

  return status;
}
 8019902:	2000      	movs	r0, #0
 8019904:	4770      	bx	lr
	...

08019908 <USBD_STORAGE_GetMediaLastLba>:
{
  ULONG LastLba = 0U;

  /* USER CODE BEGIN USBD_STORAGE_GetMediaLastLba */
  LastLba = MSC_TOTAL_SECTORS -1;
  LOG_USB_MSC("USBD_STORAGE_GetMediaLastLba:%d\r\n",(int)LastLba);
 8019908:	4b05      	ldr	r3, [pc, #20]	@ (8019920 <USBD_STORAGE_GetMediaLastLba+0x18>)
{
 801990a:	b510      	push	{r4, lr}
  LOG_USB_MSC("USBD_STORAGE_GetMediaLastLba:%d\r\n",(int)LastLba);
 801990c:	6818      	ldr	r0, [r3, #0]
 801990e:	4a05      	ldr	r2, [pc, #20]	@ (8019924 <USBD_STORAGE_GetMediaLastLba+0x1c>)
 8019910:	23ff      	movs	r3, #255	@ 0xff
 8019912:	4905      	ldr	r1, [pc, #20]	@ (8019928 <USBD_STORAGE_GetMediaLastLba+0x20>)
 8019914:	68c0      	ldr	r0, [r0, #12]
 8019916:	f000 fd25 	bl	801a364 <fiprintf>
  /* USER CODE END USBD_STORAGE_GetMediaLastLba */

  return LastLba;
}
 801991a:	20ff      	movs	r0, #255	@ 0xff
 801991c:	bd10      	pop	{r4, pc}
 801991e:	46c0      	nop			@ (mov r8, r8)
 8019920:	200002cc 	.word	0x200002cc
 8019924:	0801de2e 	.word	0x0801de2e
 8019928:	08020471 	.word	0x08020471

0801992c <USBD_STORAGE_GetMediaBlocklength>:
  *         Get Media block length.
  * @param  none.
  * @retval block length.
  */
ULONG USBD_STORAGE_GetMediaBlocklength(VOID)
{
 801992c:	b510      	push	{r4, lr}
  ULONG MediaBlockLen = 0U;

  /* USER CODE BEGIN USBD_STORAGE_GetMediaBlocklength */
  MediaBlockLen = MSC_MEDIA_BLOCK_SIZE;
  LOG_USB_MSC("USBD_STORAGE_GetMediaBlocklength:%d\r\n",(int)MediaBlockLen);
 801992e:	2480      	movs	r4, #128	@ 0x80
 8019930:	4b05      	ldr	r3, [pc, #20]	@ (8019948 <USBD_STORAGE_GetMediaBlocklength+0x1c>)
 8019932:	0164      	lsls	r4, r4, #5
 8019934:	6818      	ldr	r0, [r3, #0]
 8019936:	4a05      	ldr	r2, [pc, #20]	@ (801994c <USBD_STORAGE_GetMediaBlocklength+0x20>)
 8019938:	0023      	movs	r3, r4
 801993a:	4905      	ldr	r1, [pc, #20]	@ (8019950 <USBD_STORAGE_GetMediaBlocklength+0x24>)
 801993c:	68c0      	ldr	r0, [r0, #12]
 801993e:	f000 fd11 	bl	801a364 <fiprintf>
  /* USER CODE END USBD_STORAGE_GetMediaBlocklength */

  return MediaBlockLen;
}
 8019942:	0020      	movs	r0, r4
 8019944:	bd10      	pop	{r4, pc}
 8019946:	46c0      	nop			@ (mov r8, r8)
 8019948:	200002cc 	.word	0x200002cc
 801994c:	0801de2e 	.word	0x0801de2e
 8019950:	08020498 	.word	0x08020498

08019954 <__cvt>:
 8019954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019956:	001f      	movs	r7, r3
 8019958:	2300      	movs	r3, #0
 801995a:	0016      	movs	r6, r2
 801995c:	b08b      	sub	sp, #44	@ 0x2c
 801995e:	429f      	cmp	r7, r3
 8019960:	da04      	bge.n	801996c <__cvt+0x18>
 8019962:	2180      	movs	r1, #128	@ 0x80
 8019964:	0609      	lsls	r1, r1, #24
 8019966:	187b      	adds	r3, r7, r1
 8019968:	001f      	movs	r7, r3
 801996a:	232d      	movs	r3, #45	@ 0x2d
 801996c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801996e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8019970:	7013      	strb	r3, [r2, #0]
 8019972:	2320      	movs	r3, #32
 8019974:	2203      	movs	r2, #3
 8019976:	439d      	bics	r5, r3
 8019978:	2d46      	cmp	r5, #70	@ 0x46
 801997a:	d007      	beq.n	801998c <__cvt+0x38>
 801997c:	002b      	movs	r3, r5
 801997e:	3b45      	subs	r3, #69	@ 0x45
 8019980:	4259      	negs	r1, r3
 8019982:	414b      	adcs	r3, r1
 8019984:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019986:	3a01      	subs	r2, #1
 8019988:	18cb      	adds	r3, r1, r3
 801998a:	9310      	str	r3, [sp, #64]	@ 0x40
 801998c:	ab09      	add	r3, sp, #36	@ 0x24
 801998e:	9304      	str	r3, [sp, #16]
 8019990:	ab08      	add	r3, sp, #32
 8019992:	9303      	str	r3, [sp, #12]
 8019994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019996:	9200      	str	r2, [sp, #0]
 8019998:	9302      	str	r3, [sp, #8]
 801999a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801999c:	0032      	movs	r2, r6
 801999e:	9301      	str	r3, [sp, #4]
 80199a0:	003b      	movs	r3, r7
 80199a2:	f001 f82f 	bl	801aa04 <_dtoa_r>
 80199a6:	0004      	movs	r4, r0
 80199a8:	2d47      	cmp	r5, #71	@ 0x47
 80199aa:	d11b      	bne.n	80199e4 <__cvt+0x90>
 80199ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80199ae:	07db      	lsls	r3, r3, #31
 80199b0:	d511      	bpl.n	80199d6 <__cvt+0x82>
 80199b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80199b4:	18c3      	adds	r3, r0, r3
 80199b6:	9307      	str	r3, [sp, #28]
 80199b8:	2200      	movs	r2, #0
 80199ba:	2300      	movs	r3, #0
 80199bc:	0030      	movs	r0, r6
 80199be:	0039      	movs	r1, r7
 80199c0:	f7e6 fd58 	bl	8000474 <__aeabi_dcmpeq>
 80199c4:	2800      	cmp	r0, #0
 80199c6:	d001      	beq.n	80199cc <__cvt+0x78>
 80199c8:	9b07      	ldr	r3, [sp, #28]
 80199ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80199cc:	2230      	movs	r2, #48	@ 0x30
 80199ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199d0:	9907      	ldr	r1, [sp, #28]
 80199d2:	428b      	cmp	r3, r1
 80199d4:	d320      	bcc.n	8019a18 <__cvt+0xc4>
 80199d6:	0020      	movs	r0, r4
 80199d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80199dc:	1b1b      	subs	r3, r3, r4
 80199de:	6013      	str	r3, [r2, #0]
 80199e0:	b00b      	add	sp, #44	@ 0x2c
 80199e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80199e6:	18c3      	adds	r3, r0, r3
 80199e8:	9307      	str	r3, [sp, #28]
 80199ea:	2d46      	cmp	r5, #70	@ 0x46
 80199ec:	d1e4      	bne.n	80199b8 <__cvt+0x64>
 80199ee:	7803      	ldrb	r3, [r0, #0]
 80199f0:	2b30      	cmp	r3, #48	@ 0x30
 80199f2:	d10c      	bne.n	8019a0e <__cvt+0xba>
 80199f4:	2200      	movs	r2, #0
 80199f6:	2300      	movs	r3, #0
 80199f8:	0030      	movs	r0, r6
 80199fa:	0039      	movs	r1, r7
 80199fc:	f7e6 fd3a 	bl	8000474 <__aeabi_dcmpeq>
 8019a00:	2800      	cmp	r0, #0
 8019a02:	d104      	bne.n	8019a0e <__cvt+0xba>
 8019a04:	2301      	movs	r3, #1
 8019a06:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019a08:	1a9b      	subs	r3, r3, r2
 8019a0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019a0c:	6013      	str	r3, [r2, #0]
 8019a0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019a10:	9a07      	ldr	r2, [sp, #28]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	18d3      	adds	r3, r2, r3
 8019a16:	e7ce      	b.n	80199b6 <__cvt+0x62>
 8019a18:	1c59      	adds	r1, r3, #1
 8019a1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8019a1c:	701a      	strb	r2, [r3, #0]
 8019a1e:	e7d6      	b.n	80199ce <__cvt+0x7a>

08019a20 <__exponent>:
 8019a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a22:	232b      	movs	r3, #43	@ 0x2b
 8019a24:	b085      	sub	sp, #20
 8019a26:	0005      	movs	r5, r0
 8019a28:	1e0c      	subs	r4, r1, #0
 8019a2a:	7002      	strb	r2, [r0, #0]
 8019a2c:	da01      	bge.n	8019a32 <__exponent+0x12>
 8019a2e:	424c      	negs	r4, r1
 8019a30:	3302      	adds	r3, #2
 8019a32:	706b      	strb	r3, [r5, #1]
 8019a34:	2c09      	cmp	r4, #9
 8019a36:	dd2c      	ble.n	8019a92 <__exponent+0x72>
 8019a38:	ab02      	add	r3, sp, #8
 8019a3a:	1dde      	adds	r6, r3, #7
 8019a3c:	0020      	movs	r0, r4
 8019a3e:	210a      	movs	r1, #10
 8019a40:	f7e6 fd02 	bl	8000448 <__aeabi_idivmod>
 8019a44:	0037      	movs	r7, r6
 8019a46:	3130      	adds	r1, #48	@ 0x30
 8019a48:	3e01      	subs	r6, #1
 8019a4a:	0020      	movs	r0, r4
 8019a4c:	7031      	strb	r1, [r6, #0]
 8019a4e:	210a      	movs	r1, #10
 8019a50:	9401      	str	r4, [sp, #4]
 8019a52:	f7e6 fc13 	bl	800027c <__divsi3>
 8019a56:	9b01      	ldr	r3, [sp, #4]
 8019a58:	0004      	movs	r4, r0
 8019a5a:	2b63      	cmp	r3, #99	@ 0x63
 8019a5c:	dcee      	bgt.n	8019a3c <__exponent+0x1c>
 8019a5e:	1eba      	subs	r2, r7, #2
 8019a60:	1ca8      	adds	r0, r5, #2
 8019a62:	0001      	movs	r1, r0
 8019a64:	0013      	movs	r3, r2
 8019a66:	3430      	adds	r4, #48	@ 0x30
 8019a68:	7014      	strb	r4, [r2, #0]
 8019a6a:	ac02      	add	r4, sp, #8
 8019a6c:	3407      	adds	r4, #7
 8019a6e:	429c      	cmp	r4, r3
 8019a70:	d80a      	bhi.n	8019a88 <__exponent+0x68>
 8019a72:	2300      	movs	r3, #0
 8019a74:	4294      	cmp	r4, r2
 8019a76:	d303      	bcc.n	8019a80 <__exponent+0x60>
 8019a78:	3309      	adds	r3, #9
 8019a7a:	aa02      	add	r2, sp, #8
 8019a7c:	189b      	adds	r3, r3, r2
 8019a7e:	1bdb      	subs	r3, r3, r7
 8019a80:	18c0      	adds	r0, r0, r3
 8019a82:	1b40      	subs	r0, r0, r5
 8019a84:	b005      	add	sp, #20
 8019a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a88:	781c      	ldrb	r4, [r3, #0]
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	700c      	strb	r4, [r1, #0]
 8019a8e:	3101      	adds	r1, #1
 8019a90:	e7eb      	b.n	8019a6a <__exponent+0x4a>
 8019a92:	2330      	movs	r3, #48	@ 0x30
 8019a94:	18e4      	adds	r4, r4, r3
 8019a96:	70ab      	strb	r3, [r5, #2]
 8019a98:	1d28      	adds	r0, r5, #4
 8019a9a:	70ec      	strb	r4, [r5, #3]
 8019a9c:	e7f1      	b.n	8019a82 <__exponent+0x62>
	...

08019aa0 <_printf_float>:
 8019aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019aa2:	b097      	sub	sp, #92	@ 0x5c
 8019aa4:	000d      	movs	r5, r1
 8019aa6:	920a      	str	r2, [sp, #40]	@ 0x28
 8019aa8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8019aaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019aac:	9009      	str	r0, [sp, #36]	@ 0x24
 8019aae:	f000 fe89 	bl	801a7c4 <_localeconv_r>
 8019ab2:	6803      	ldr	r3, [r0, #0]
 8019ab4:	0018      	movs	r0, r3
 8019ab6:	930d      	str	r3, [sp, #52]	@ 0x34
 8019ab8:	f7e6 fb26 	bl	8000108 <strlen>
 8019abc:	2300      	movs	r3, #0
 8019abe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8019ac0:	9314      	str	r3, [sp, #80]	@ 0x50
 8019ac2:	7e2b      	ldrb	r3, [r5, #24]
 8019ac4:	2207      	movs	r2, #7
 8019ac6:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ac8:	682b      	ldr	r3, [r5, #0]
 8019aca:	930e      	str	r3, [sp, #56]	@ 0x38
 8019acc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019ace:	6823      	ldr	r3, [r4, #0]
 8019ad0:	05c9      	lsls	r1, r1, #23
 8019ad2:	d545      	bpl.n	8019b60 <_printf_float+0xc0>
 8019ad4:	189b      	adds	r3, r3, r2
 8019ad6:	4393      	bics	r3, r2
 8019ad8:	001a      	movs	r2, r3
 8019ada:	3208      	adds	r2, #8
 8019adc:	6022      	str	r2, [r4, #0]
 8019ade:	2201      	movs	r2, #1
 8019ae0:	681e      	ldr	r6, [r3, #0]
 8019ae2:	685f      	ldr	r7, [r3, #4]
 8019ae4:	007b      	lsls	r3, r7, #1
 8019ae6:	085b      	lsrs	r3, r3, #1
 8019ae8:	9311      	str	r3, [sp, #68]	@ 0x44
 8019aea:	9610      	str	r6, [sp, #64]	@ 0x40
 8019aec:	64ae      	str	r6, [r5, #72]	@ 0x48
 8019aee:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8019af0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019af2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019af4:	4ba7      	ldr	r3, [pc, #668]	@ (8019d94 <_printf_float+0x2f4>)
 8019af6:	4252      	negs	r2, r2
 8019af8:	f7e9 fd9e 	bl	8003638 <__aeabi_dcmpun>
 8019afc:	2800      	cmp	r0, #0
 8019afe:	d131      	bne.n	8019b64 <_printf_float+0xc4>
 8019b00:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019b02:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019b04:	2201      	movs	r2, #1
 8019b06:	4ba3      	ldr	r3, [pc, #652]	@ (8019d94 <_printf_float+0x2f4>)
 8019b08:	4252      	negs	r2, r2
 8019b0a:	f7e6 fcc3 	bl	8000494 <__aeabi_dcmple>
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	d128      	bne.n	8019b64 <_printf_float+0xc4>
 8019b12:	2200      	movs	r2, #0
 8019b14:	2300      	movs	r3, #0
 8019b16:	0030      	movs	r0, r6
 8019b18:	0039      	movs	r1, r7
 8019b1a:	f7e6 fcb1 	bl	8000480 <__aeabi_dcmplt>
 8019b1e:	2800      	cmp	r0, #0
 8019b20:	d003      	beq.n	8019b2a <_printf_float+0x8a>
 8019b22:	002b      	movs	r3, r5
 8019b24:	222d      	movs	r2, #45	@ 0x2d
 8019b26:	3343      	adds	r3, #67	@ 0x43
 8019b28:	701a      	strb	r2, [r3, #0]
 8019b2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b2c:	4f9a      	ldr	r7, [pc, #616]	@ (8019d98 <_printf_float+0x2f8>)
 8019b2e:	2b47      	cmp	r3, #71	@ 0x47
 8019b30:	d800      	bhi.n	8019b34 <_printf_float+0x94>
 8019b32:	4f9a      	ldr	r7, [pc, #616]	@ (8019d9c <_printf_float+0x2fc>)
 8019b34:	2303      	movs	r3, #3
 8019b36:	2400      	movs	r4, #0
 8019b38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019b3a:	612b      	str	r3, [r5, #16]
 8019b3c:	3301      	adds	r3, #1
 8019b3e:	439a      	bics	r2, r3
 8019b40:	602a      	str	r2, [r5, #0]
 8019b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b44:	0029      	movs	r1, r5
 8019b46:	9300      	str	r3, [sp, #0]
 8019b48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019b4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b4c:	aa15      	add	r2, sp, #84	@ 0x54
 8019b4e:	f000 f9e5 	bl	8019f1c <_printf_common>
 8019b52:	3001      	adds	r0, #1
 8019b54:	d000      	beq.n	8019b58 <_printf_float+0xb8>
 8019b56:	e09e      	b.n	8019c96 <_printf_float+0x1f6>
 8019b58:	2001      	movs	r0, #1
 8019b5a:	4240      	negs	r0, r0
 8019b5c:	b017      	add	sp, #92	@ 0x5c
 8019b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b60:	3307      	adds	r3, #7
 8019b62:	e7b8      	b.n	8019ad6 <_printf_float+0x36>
 8019b64:	0032      	movs	r2, r6
 8019b66:	003b      	movs	r3, r7
 8019b68:	0030      	movs	r0, r6
 8019b6a:	0039      	movs	r1, r7
 8019b6c:	f7e9 fd64 	bl	8003638 <__aeabi_dcmpun>
 8019b70:	2800      	cmp	r0, #0
 8019b72:	d00b      	beq.n	8019b8c <_printf_float+0xec>
 8019b74:	2f00      	cmp	r7, #0
 8019b76:	da03      	bge.n	8019b80 <_printf_float+0xe0>
 8019b78:	002b      	movs	r3, r5
 8019b7a:	222d      	movs	r2, #45	@ 0x2d
 8019b7c:	3343      	adds	r3, #67	@ 0x43
 8019b7e:	701a      	strb	r2, [r3, #0]
 8019b80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b82:	4f87      	ldr	r7, [pc, #540]	@ (8019da0 <_printf_float+0x300>)
 8019b84:	2b47      	cmp	r3, #71	@ 0x47
 8019b86:	d8d5      	bhi.n	8019b34 <_printf_float+0x94>
 8019b88:	4f86      	ldr	r7, [pc, #536]	@ (8019da4 <_printf_float+0x304>)
 8019b8a:	e7d3      	b.n	8019b34 <_printf_float+0x94>
 8019b8c:	2220      	movs	r2, #32
 8019b8e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019b90:	686b      	ldr	r3, [r5, #4]
 8019b92:	4394      	bics	r4, r2
 8019b94:	1c5a      	adds	r2, r3, #1
 8019b96:	d146      	bne.n	8019c26 <_printf_float+0x186>
 8019b98:	3307      	adds	r3, #7
 8019b9a:	606b      	str	r3, [r5, #4]
 8019b9c:	2380      	movs	r3, #128	@ 0x80
 8019b9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ba0:	00db      	lsls	r3, r3, #3
 8019ba2:	4313      	orrs	r3, r2
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	602b      	str	r3, [r5, #0]
 8019ba8:	9206      	str	r2, [sp, #24]
 8019baa:	aa14      	add	r2, sp, #80	@ 0x50
 8019bac:	9205      	str	r2, [sp, #20]
 8019bae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019bb0:	a90a      	add	r1, sp, #40	@ 0x28
 8019bb2:	9204      	str	r2, [sp, #16]
 8019bb4:	aa13      	add	r2, sp, #76	@ 0x4c
 8019bb6:	9203      	str	r2, [sp, #12]
 8019bb8:	2223      	movs	r2, #35	@ 0x23
 8019bba:	1852      	adds	r2, r2, r1
 8019bbc:	9202      	str	r2, [sp, #8]
 8019bbe:	9301      	str	r3, [sp, #4]
 8019bc0:	686b      	ldr	r3, [r5, #4]
 8019bc2:	0032      	movs	r2, r6
 8019bc4:	9300      	str	r3, [sp, #0]
 8019bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bc8:	003b      	movs	r3, r7
 8019bca:	f7ff fec3 	bl	8019954 <__cvt>
 8019bce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019bd0:	0007      	movs	r7, r0
 8019bd2:	2c47      	cmp	r4, #71	@ 0x47
 8019bd4:	d12d      	bne.n	8019c32 <_printf_float+0x192>
 8019bd6:	1cd3      	adds	r3, r2, #3
 8019bd8:	db02      	blt.n	8019be0 <_printf_float+0x140>
 8019bda:	686b      	ldr	r3, [r5, #4]
 8019bdc:	429a      	cmp	r2, r3
 8019bde:	dd47      	ble.n	8019c70 <_printf_float+0x1d0>
 8019be0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019be2:	3b02      	subs	r3, #2
 8019be4:	b2db      	uxtb	r3, r3
 8019be6:	930c      	str	r3, [sp, #48]	@ 0x30
 8019be8:	0028      	movs	r0, r5
 8019bea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019bec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019bee:	3901      	subs	r1, #1
 8019bf0:	3050      	adds	r0, #80	@ 0x50
 8019bf2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019bf4:	f7ff ff14 	bl	8019a20 <__exponent>
 8019bf8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019bfa:	0004      	movs	r4, r0
 8019bfc:	1813      	adds	r3, r2, r0
 8019bfe:	612b      	str	r3, [r5, #16]
 8019c00:	2a01      	cmp	r2, #1
 8019c02:	dc02      	bgt.n	8019c0a <_printf_float+0x16a>
 8019c04:	682a      	ldr	r2, [r5, #0]
 8019c06:	07d2      	lsls	r2, r2, #31
 8019c08:	d501      	bpl.n	8019c0e <_printf_float+0x16e>
 8019c0a:	3301      	adds	r3, #1
 8019c0c:	612b      	str	r3, [r5, #16]
 8019c0e:	2323      	movs	r3, #35	@ 0x23
 8019c10:	aa0a      	add	r2, sp, #40	@ 0x28
 8019c12:	189b      	adds	r3, r3, r2
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d100      	bne.n	8019c1c <_printf_float+0x17c>
 8019c1a:	e792      	b.n	8019b42 <_printf_float+0xa2>
 8019c1c:	002b      	movs	r3, r5
 8019c1e:	222d      	movs	r2, #45	@ 0x2d
 8019c20:	3343      	adds	r3, #67	@ 0x43
 8019c22:	701a      	strb	r2, [r3, #0]
 8019c24:	e78d      	b.n	8019b42 <_printf_float+0xa2>
 8019c26:	2c47      	cmp	r4, #71	@ 0x47
 8019c28:	d1b8      	bne.n	8019b9c <_printf_float+0xfc>
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d1b6      	bne.n	8019b9c <_printf_float+0xfc>
 8019c2e:	3301      	adds	r3, #1
 8019c30:	e7b3      	b.n	8019b9a <_printf_float+0xfa>
 8019c32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c34:	2b65      	cmp	r3, #101	@ 0x65
 8019c36:	d9d7      	bls.n	8019be8 <_printf_float+0x148>
 8019c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c3a:	2b66      	cmp	r3, #102	@ 0x66
 8019c3c:	d11a      	bne.n	8019c74 <_printf_float+0x1d4>
 8019c3e:	686b      	ldr	r3, [r5, #4]
 8019c40:	2a00      	cmp	r2, #0
 8019c42:	dd09      	ble.n	8019c58 <_printf_float+0x1b8>
 8019c44:	612a      	str	r2, [r5, #16]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d102      	bne.n	8019c50 <_printf_float+0x1b0>
 8019c4a:	6829      	ldr	r1, [r5, #0]
 8019c4c:	07c9      	lsls	r1, r1, #31
 8019c4e:	d50b      	bpl.n	8019c68 <_printf_float+0x1c8>
 8019c50:	3301      	adds	r3, #1
 8019c52:	189b      	adds	r3, r3, r2
 8019c54:	612b      	str	r3, [r5, #16]
 8019c56:	e007      	b.n	8019c68 <_printf_float+0x1c8>
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d103      	bne.n	8019c64 <_printf_float+0x1c4>
 8019c5c:	2201      	movs	r2, #1
 8019c5e:	6829      	ldr	r1, [r5, #0]
 8019c60:	4211      	tst	r1, r2
 8019c62:	d000      	beq.n	8019c66 <_printf_float+0x1c6>
 8019c64:	1c9a      	adds	r2, r3, #2
 8019c66:	612a      	str	r2, [r5, #16]
 8019c68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019c6a:	2400      	movs	r4, #0
 8019c6c:	65ab      	str	r3, [r5, #88]	@ 0x58
 8019c6e:	e7ce      	b.n	8019c0e <_printf_float+0x16e>
 8019c70:	2367      	movs	r3, #103	@ 0x67
 8019c72:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c74:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019c76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019c78:	4299      	cmp	r1, r3
 8019c7a:	db06      	blt.n	8019c8a <_printf_float+0x1ea>
 8019c7c:	682b      	ldr	r3, [r5, #0]
 8019c7e:	6129      	str	r1, [r5, #16]
 8019c80:	07db      	lsls	r3, r3, #31
 8019c82:	d5f1      	bpl.n	8019c68 <_printf_float+0x1c8>
 8019c84:	3101      	adds	r1, #1
 8019c86:	6129      	str	r1, [r5, #16]
 8019c88:	e7ee      	b.n	8019c68 <_printf_float+0x1c8>
 8019c8a:	2201      	movs	r2, #1
 8019c8c:	2900      	cmp	r1, #0
 8019c8e:	dce0      	bgt.n	8019c52 <_printf_float+0x1b2>
 8019c90:	1892      	adds	r2, r2, r2
 8019c92:	1a52      	subs	r2, r2, r1
 8019c94:	e7dd      	b.n	8019c52 <_printf_float+0x1b2>
 8019c96:	682a      	ldr	r2, [r5, #0]
 8019c98:	0553      	lsls	r3, r2, #21
 8019c9a:	d408      	bmi.n	8019cae <_printf_float+0x20e>
 8019c9c:	692b      	ldr	r3, [r5, #16]
 8019c9e:	003a      	movs	r2, r7
 8019ca0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ca4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019ca6:	47a0      	blx	r4
 8019ca8:	3001      	adds	r0, #1
 8019caa:	d129      	bne.n	8019d00 <_printf_float+0x260>
 8019cac:	e754      	b.n	8019b58 <_printf_float+0xb8>
 8019cae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019cb0:	2b65      	cmp	r3, #101	@ 0x65
 8019cb2:	d800      	bhi.n	8019cb6 <_printf_float+0x216>
 8019cb4:	e0db      	b.n	8019e6e <_printf_float+0x3ce>
 8019cb6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8019cb8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8019cba:	2200      	movs	r2, #0
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	f7e6 fbd9 	bl	8000474 <__aeabi_dcmpeq>
 8019cc2:	2800      	cmp	r0, #0
 8019cc4:	d033      	beq.n	8019d2e <_printf_float+0x28e>
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	4a37      	ldr	r2, [pc, #220]	@ (8019da8 <_printf_float+0x308>)
 8019cca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019ccc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019cce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019cd0:	47a0      	blx	r4
 8019cd2:	3001      	adds	r0, #1
 8019cd4:	d100      	bne.n	8019cd8 <_printf_float+0x238>
 8019cd6:	e73f      	b.n	8019b58 <_printf_float+0xb8>
 8019cd8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019cda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019cdc:	42b3      	cmp	r3, r6
 8019cde:	db02      	blt.n	8019ce6 <_printf_float+0x246>
 8019ce0:	682b      	ldr	r3, [r5, #0]
 8019ce2:	07db      	lsls	r3, r3, #31
 8019ce4:	d50c      	bpl.n	8019d00 <_printf_float+0x260>
 8019ce6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019cea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019cec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019cf0:	47a0      	blx	r4
 8019cf2:	2400      	movs	r4, #0
 8019cf4:	3001      	adds	r0, #1
 8019cf6:	d100      	bne.n	8019cfa <_printf_float+0x25a>
 8019cf8:	e72e      	b.n	8019b58 <_printf_float+0xb8>
 8019cfa:	1e73      	subs	r3, r6, #1
 8019cfc:	42a3      	cmp	r3, r4
 8019cfe:	dc0a      	bgt.n	8019d16 <_printf_float+0x276>
 8019d00:	682b      	ldr	r3, [r5, #0]
 8019d02:	079b      	lsls	r3, r3, #30
 8019d04:	d500      	bpl.n	8019d08 <_printf_float+0x268>
 8019d06:	e106      	b.n	8019f16 <_printf_float+0x476>
 8019d08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019d0a:	68e8      	ldr	r0, [r5, #12]
 8019d0c:	4298      	cmp	r0, r3
 8019d0e:	db00      	blt.n	8019d12 <_printf_float+0x272>
 8019d10:	e724      	b.n	8019b5c <_printf_float+0xbc>
 8019d12:	0018      	movs	r0, r3
 8019d14:	e722      	b.n	8019b5c <_printf_float+0xbc>
 8019d16:	002a      	movs	r2, r5
 8019d18:	2301      	movs	r3, #1
 8019d1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019d1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d1e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019d20:	321a      	adds	r2, #26
 8019d22:	47b8      	blx	r7
 8019d24:	3001      	adds	r0, #1
 8019d26:	d100      	bne.n	8019d2a <_printf_float+0x28a>
 8019d28:	e716      	b.n	8019b58 <_printf_float+0xb8>
 8019d2a:	3401      	adds	r4, #1
 8019d2c:	e7e5      	b.n	8019cfa <_printf_float+0x25a>
 8019d2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	dc3b      	bgt.n	8019dac <_printf_float+0x30c>
 8019d34:	2301      	movs	r3, #1
 8019d36:	4a1c      	ldr	r2, [pc, #112]	@ (8019da8 <_printf_float+0x308>)
 8019d38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019d3e:	47a0      	blx	r4
 8019d40:	3001      	adds	r0, #1
 8019d42:	d100      	bne.n	8019d46 <_printf_float+0x2a6>
 8019d44:	e708      	b.n	8019b58 <_printf_float+0xb8>
 8019d46:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019d48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019d4a:	4333      	orrs	r3, r6
 8019d4c:	d102      	bne.n	8019d54 <_printf_float+0x2b4>
 8019d4e:	682b      	ldr	r3, [r5, #0]
 8019d50:	07db      	lsls	r3, r3, #31
 8019d52:	d5d5      	bpl.n	8019d00 <_printf_float+0x260>
 8019d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019d58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019d5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d5c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019d5e:	47a0      	blx	r4
 8019d60:	2300      	movs	r3, #0
 8019d62:	3001      	adds	r0, #1
 8019d64:	d100      	bne.n	8019d68 <_printf_float+0x2c8>
 8019d66:	e6f7      	b.n	8019b58 <_printf_float+0xb8>
 8019d68:	930c      	str	r3, [sp, #48]	@ 0x30
 8019d6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019d6c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019d6e:	425b      	negs	r3, r3
 8019d70:	4293      	cmp	r3, r2
 8019d72:	dc01      	bgt.n	8019d78 <_printf_float+0x2d8>
 8019d74:	0033      	movs	r3, r6
 8019d76:	e792      	b.n	8019c9e <_printf_float+0x1fe>
 8019d78:	002a      	movs	r2, r5
 8019d7a:	2301      	movs	r3, #1
 8019d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019d82:	321a      	adds	r2, #26
 8019d84:	47a0      	blx	r4
 8019d86:	3001      	adds	r0, #1
 8019d88:	d100      	bne.n	8019d8c <_printf_float+0x2ec>
 8019d8a:	e6e5      	b.n	8019b58 <_printf_float+0xb8>
 8019d8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d8e:	3301      	adds	r3, #1
 8019d90:	e7ea      	b.n	8019d68 <_printf_float+0x2c8>
 8019d92:	46c0      	nop			@ (mov r8, r8)
 8019d94:	7fefffff 	.word	0x7fefffff
 8019d98:	080204c7 	.word	0x080204c7
 8019d9c:	080204c3 	.word	0x080204c3
 8019da0:	080204cf 	.word	0x080204cf
 8019da4:	080204cb 	.word	0x080204cb
 8019da8:	0801ebbf 	.word	0x0801ebbf
 8019dac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019dae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8019db0:	930c      	str	r3, [sp, #48]	@ 0x30
 8019db2:	429e      	cmp	r6, r3
 8019db4:	dd00      	ble.n	8019db8 <_printf_float+0x318>
 8019db6:	001e      	movs	r6, r3
 8019db8:	2e00      	cmp	r6, #0
 8019dba:	dc31      	bgt.n	8019e20 <_printf_float+0x380>
 8019dbc:	43f3      	mvns	r3, r6
 8019dbe:	2400      	movs	r4, #0
 8019dc0:	17db      	asrs	r3, r3, #31
 8019dc2:	4033      	ands	r3, r6
 8019dc4:	930e      	str	r3, [sp, #56]	@ 0x38
 8019dc6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8019dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019dca:	1af3      	subs	r3, r6, r3
 8019dcc:	42a3      	cmp	r3, r4
 8019dce:	dc30      	bgt.n	8019e32 <_printf_float+0x392>
 8019dd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019dd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019dd4:	429a      	cmp	r2, r3
 8019dd6:	dc38      	bgt.n	8019e4a <_printf_float+0x3aa>
 8019dd8:	682b      	ldr	r3, [r5, #0]
 8019dda:	07db      	lsls	r3, r3, #31
 8019ddc:	d435      	bmi.n	8019e4a <_printf_float+0x3aa>
 8019dde:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019de0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019de2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019de4:	1b9b      	subs	r3, r3, r6
 8019de6:	1b14      	subs	r4, r2, r4
 8019de8:	429c      	cmp	r4, r3
 8019dea:	dd00      	ble.n	8019dee <_printf_float+0x34e>
 8019dec:	001c      	movs	r4, r3
 8019dee:	2c00      	cmp	r4, #0
 8019df0:	dc34      	bgt.n	8019e5c <_printf_float+0x3bc>
 8019df2:	43e3      	mvns	r3, r4
 8019df4:	2600      	movs	r6, #0
 8019df6:	17db      	asrs	r3, r3, #31
 8019df8:	401c      	ands	r4, r3
 8019dfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019dfc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019dfe:	1ad3      	subs	r3, r2, r3
 8019e00:	1b1b      	subs	r3, r3, r4
 8019e02:	42b3      	cmp	r3, r6
 8019e04:	dc00      	bgt.n	8019e08 <_printf_float+0x368>
 8019e06:	e77b      	b.n	8019d00 <_printf_float+0x260>
 8019e08:	002a      	movs	r2, r5
 8019e0a:	2301      	movs	r3, #1
 8019e0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019e12:	321a      	adds	r2, #26
 8019e14:	47b8      	blx	r7
 8019e16:	3001      	adds	r0, #1
 8019e18:	d100      	bne.n	8019e1c <_printf_float+0x37c>
 8019e1a:	e69d      	b.n	8019b58 <_printf_float+0xb8>
 8019e1c:	3601      	adds	r6, #1
 8019e1e:	e7ec      	b.n	8019dfa <_printf_float+0x35a>
 8019e20:	0033      	movs	r3, r6
 8019e22:	003a      	movs	r2, r7
 8019e24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e28:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019e2a:	47a0      	blx	r4
 8019e2c:	3001      	adds	r0, #1
 8019e2e:	d1c5      	bne.n	8019dbc <_printf_float+0x31c>
 8019e30:	e692      	b.n	8019b58 <_printf_float+0xb8>
 8019e32:	002a      	movs	r2, r5
 8019e34:	2301      	movs	r3, #1
 8019e36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019e3c:	321a      	adds	r2, #26
 8019e3e:	47b0      	blx	r6
 8019e40:	3001      	adds	r0, #1
 8019e42:	d100      	bne.n	8019e46 <_printf_float+0x3a6>
 8019e44:	e688      	b.n	8019b58 <_printf_float+0xb8>
 8019e46:	3401      	adds	r4, #1
 8019e48:	e7bd      	b.n	8019dc6 <_printf_float+0x326>
 8019e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019e4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019e4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019e54:	47a0      	blx	r4
 8019e56:	3001      	adds	r0, #1
 8019e58:	d1c1      	bne.n	8019dde <_printf_float+0x33e>
 8019e5a:	e67d      	b.n	8019b58 <_printf_float+0xb8>
 8019e5c:	19ba      	adds	r2, r7, r6
 8019e5e:	0023      	movs	r3, r4
 8019e60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e64:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019e66:	47b0      	blx	r6
 8019e68:	3001      	adds	r0, #1
 8019e6a:	d1c2      	bne.n	8019df2 <_printf_float+0x352>
 8019e6c:	e674      	b.n	8019b58 <_printf_float+0xb8>
 8019e6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019e70:	930c      	str	r3, [sp, #48]	@ 0x30
 8019e72:	2b01      	cmp	r3, #1
 8019e74:	dc02      	bgt.n	8019e7c <_printf_float+0x3dc>
 8019e76:	2301      	movs	r3, #1
 8019e78:	421a      	tst	r2, r3
 8019e7a:	d039      	beq.n	8019ef0 <_printf_float+0x450>
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	003a      	movs	r2, r7
 8019e80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e84:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019e86:	47b0      	blx	r6
 8019e88:	3001      	adds	r0, #1
 8019e8a:	d100      	bne.n	8019e8e <_printf_float+0x3ee>
 8019e8c:	e664      	b.n	8019b58 <_printf_float+0xb8>
 8019e8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019e90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019e92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019e94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e96:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019e98:	47b0      	blx	r6
 8019e9a:	3001      	adds	r0, #1
 8019e9c:	d100      	bne.n	8019ea0 <_printf_float+0x400>
 8019e9e:	e65b      	b.n	8019b58 <_printf_float+0xb8>
 8019ea0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8019ea2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8019ea4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	3b01      	subs	r3, #1
 8019eaa:	930c      	str	r3, [sp, #48]	@ 0x30
 8019eac:	2300      	movs	r3, #0
 8019eae:	f7e6 fae1 	bl	8000474 <__aeabi_dcmpeq>
 8019eb2:	2800      	cmp	r0, #0
 8019eb4:	d11a      	bne.n	8019eec <_printf_float+0x44c>
 8019eb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019eb8:	1c7a      	adds	r2, r7, #1
 8019eba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019ebc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ebe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019ec0:	47b0      	blx	r6
 8019ec2:	3001      	adds	r0, #1
 8019ec4:	d10e      	bne.n	8019ee4 <_printf_float+0x444>
 8019ec6:	e647      	b.n	8019b58 <_printf_float+0xb8>
 8019ec8:	002a      	movs	r2, r5
 8019eca:	2301      	movs	r3, #1
 8019ecc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ed0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019ed2:	321a      	adds	r2, #26
 8019ed4:	47b8      	blx	r7
 8019ed6:	3001      	adds	r0, #1
 8019ed8:	d100      	bne.n	8019edc <_printf_float+0x43c>
 8019eda:	e63d      	b.n	8019b58 <_printf_float+0xb8>
 8019edc:	3601      	adds	r6, #1
 8019ede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ee0:	429e      	cmp	r6, r3
 8019ee2:	dbf1      	blt.n	8019ec8 <_printf_float+0x428>
 8019ee4:	002a      	movs	r2, r5
 8019ee6:	0023      	movs	r3, r4
 8019ee8:	3250      	adds	r2, #80	@ 0x50
 8019eea:	e6d9      	b.n	8019ca0 <_printf_float+0x200>
 8019eec:	2600      	movs	r6, #0
 8019eee:	e7f6      	b.n	8019ede <_printf_float+0x43e>
 8019ef0:	003a      	movs	r2, r7
 8019ef2:	e7e2      	b.n	8019eba <_printf_float+0x41a>
 8019ef4:	002a      	movs	r2, r5
 8019ef6:	2301      	movs	r3, #1
 8019ef8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019efc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019efe:	3219      	adds	r2, #25
 8019f00:	47b0      	blx	r6
 8019f02:	3001      	adds	r0, #1
 8019f04:	d100      	bne.n	8019f08 <_printf_float+0x468>
 8019f06:	e627      	b.n	8019b58 <_printf_float+0xb8>
 8019f08:	3401      	adds	r4, #1
 8019f0a:	68eb      	ldr	r3, [r5, #12]
 8019f0c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019f0e:	1a9b      	subs	r3, r3, r2
 8019f10:	42a3      	cmp	r3, r4
 8019f12:	dcef      	bgt.n	8019ef4 <_printf_float+0x454>
 8019f14:	e6f8      	b.n	8019d08 <_printf_float+0x268>
 8019f16:	2400      	movs	r4, #0
 8019f18:	e7f7      	b.n	8019f0a <_printf_float+0x46a>
 8019f1a:	46c0      	nop			@ (mov r8, r8)

08019f1c <_printf_common>:
 8019f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f1e:	0016      	movs	r6, r2
 8019f20:	9301      	str	r3, [sp, #4]
 8019f22:	688a      	ldr	r2, [r1, #8]
 8019f24:	690b      	ldr	r3, [r1, #16]
 8019f26:	000c      	movs	r4, r1
 8019f28:	9000      	str	r0, [sp, #0]
 8019f2a:	4293      	cmp	r3, r2
 8019f2c:	da00      	bge.n	8019f30 <_printf_common+0x14>
 8019f2e:	0013      	movs	r3, r2
 8019f30:	0022      	movs	r2, r4
 8019f32:	6033      	str	r3, [r6, #0]
 8019f34:	3243      	adds	r2, #67	@ 0x43
 8019f36:	7812      	ldrb	r2, [r2, #0]
 8019f38:	2a00      	cmp	r2, #0
 8019f3a:	d001      	beq.n	8019f40 <_printf_common+0x24>
 8019f3c:	3301      	adds	r3, #1
 8019f3e:	6033      	str	r3, [r6, #0]
 8019f40:	6823      	ldr	r3, [r4, #0]
 8019f42:	069b      	lsls	r3, r3, #26
 8019f44:	d502      	bpl.n	8019f4c <_printf_common+0x30>
 8019f46:	6833      	ldr	r3, [r6, #0]
 8019f48:	3302      	adds	r3, #2
 8019f4a:	6033      	str	r3, [r6, #0]
 8019f4c:	6822      	ldr	r2, [r4, #0]
 8019f4e:	2306      	movs	r3, #6
 8019f50:	0015      	movs	r5, r2
 8019f52:	401d      	ands	r5, r3
 8019f54:	421a      	tst	r2, r3
 8019f56:	d027      	beq.n	8019fa8 <_printf_common+0x8c>
 8019f58:	0023      	movs	r3, r4
 8019f5a:	3343      	adds	r3, #67	@ 0x43
 8019f5c:	781b      	ldrb	r3, [r3, #0]
 8019f5e:	1e5a      	subs	r2, r3, #1
 8019f60:	4193      	sbcs	r3, r2
 8019f62:	6822      	ldr	r2, [r4, #0]
 8019f64:	0692      	lsls	r2, r2, #26
 8019f66:	d430      	bmi.n	8019fca <_printf_common+0xae>
 8019f68:	0022      	movs	r2, r4
 8019f6a:	9901      	ldr	r1, [sp, #4]
 8019f6c:	9800      	ldr	r0, [sp, #0]
 8019f6e:	9d08      	ldr	r5, [sp, #32]
 8019f70:	3243      	adds	r2, #67	@ 0x43
 8019f72:	47a8      	blx	r5
 8019f74:	3001      	adds	r0, #1
 8019f76:	d025      	beq.n	8019fc4 <_printf_common+0xa8>
 8019f78:	2206      	movs	r2, #6
 8019f7a:	6823      	ldr	r3, [r4, #0]
 8019f7c:	2500      	movs	r5, #0
 8019f7e:	4013      	ands	r3, r2
 8019f80:	2b04      	cmp	r3, #4
 8019f82:	d105      	bne.n	8019f90 <_printf_common+0x74>
 8019f84:	6833      	ldr	r3, [r6, #0]
 8019f86:	68e5      	ldr	r5, [r4, #12]
 8019f88:	1aed      	subs	r5, r5, r3
 8019f8a:	43eb      	mvns	r3, r5
 8019f8c:	17db      	asrs	r3, r3, #31
 8019f8e:	401d      	ands	r5, r3
 8019f90:	68a3      	ldr	r3, [r4, #8]
 8019f92:	6922      	ldr	r2, [r4, #16]
 8019f94:	4293      	cmp	r3, r2
 8019f96:	dd01      	ble.n	8019f9c <_printf_common+0x80>
 8019f98:	1a9b      	subs	r3, r3, r2
 8019f9a:	18ed      	adds	r5, r5, r3
 8019f9c:	2600      	movs	r6, #0
 8019f9e:	42b5      	cmp	r5, r6
 8019fa0:	d120      	bne.n	8019fe4 <_printf_common+0xc8>
 8019fa2:	2000      	movs	r0, #0
 8019fa4:	e010      	b.n	8019fc8 <_printf_common+0xac>
 8019fa6:	3501      	adds	r5, #1
 8019fa8:	68e3      	ldr	r3, [r4, #12]
 8019faa:	6832      	ldr	r2, [r6, #0]
 8019fac:	1a9b      	subs	r3, r3, r2
 8019fae:	42ab      	cmp	r3, r5
 8019fb0:	ddd2      	ble.n	8019f58 <_printf_common+0x3c>
 8019fb2:	0022      	movs	r2, r4
 8019fb4:	2301      	movs	r3, #1
 8019fb6:	9901      	ldr	r1, [sp, #4]
 8019fb8:	9800      	ldr	r0, [sp, #0]
 8019fba:	9f08      	ldr	r7, [sp, #32]
 8019fbc:	3219      	adds	r2, #25
 8019fbe:	47b8      	blx	r7
 8019fc0:	3001      	adds	r0, #1
 8019fc2:	d1f0      	bne.n	8019fa6 <_printf_common+0x8a>
 8019fc4:	2001      	movs	r0, #1
 8019fc6:	4240      	negs	r0, r0
 8019fc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019fca:	2030      	movs	r0, #48	@ 0x30
 8019fcc:	18e1      	adds	r1, r4, r3
 8019fce:	3143      	adds	r1, #67	@ 0x43
 8019fd0:	7008      	strb	r0, [r1, #0]
 8019fd2:	0021      	movs	r1, r4
 8019fd4:	1c5a      	adds	r2, r3, #1
 8019fd6:	3145      	adds	r1, #69	@ 0x45
 8019fd8:	7809      	ldrb	r1, [r1, #0]
 8019fda:	18a2      	adds	r2, r4, r2
 8019fdc:	3243      	adds	r2, #67	@ 0x43
 8019fde:	3302      	adds	r3, #2
 8019fe0:	7011      	strb	r1, [r2, #0]
 8019fe2:	e7c1      	b.n	8019f68 <_printf_common+0x4c>
 8019fe4:	0022      	movs	r2, r4
 8019fe6:	2301      	movs	r3, #1
 8019fe8:	9901      	ldr	r1, [sp, #4]
 8019fea:	9800      	ldr	r0, [sp, #0]
 8019fec:	9f08      	ldr	r7, [sp, #32]
 8019fee:	321a      	adds	r2, #26
 8019ff0:	47b8      	blx	r7
 8019ff2:	3001      	adds	r0, #1
 8019ff4:	d0e6      	beq.n	8019fc4 <_printf_common+0xa8>
 8019ff6:	3601      	adds	r6, #1
 8019ff8:	e7d1      	b.n	8019f9e <_printf_common+0x82>
	...

08019ffc <_printf_i>:
 8019ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ffe:	b08b      	sub	sp, #44	@ 0x2c
 801a000:	9206      	str	r2, [sp, #24]
 801a002:	000a      	movs	r2, r1
 801a004:	3243      	adds	r2, #67	@ 0x43
 801a006:	9307      	str	r3, [sp, #28]
 801a008:	9005      	str	r0, [sp, #20]
 801a00a:	9203      	str	r2, [sp, #12]
 801a00c:	7e0a      	ldrb	r2, [r1, #24]
 801a00e:	000c      	movs	r4, r1
 801a010:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a012:	2a78      	cmp	r2, #120	@ 0x78
 801a014:	d809      	bhi.n	801a02a <_printf_i+0x2e>
 801a016:	2a62      	cmp	r2, #98	@ 0x62
 801a018:	d80b      	bhi.n	801a032 <_printf_i+0x36>
 801a01a:	2a00      	cmp	r2, #0
 801a01c:	d100      	bne.n	801a020 <_printf_i+0x24>
 801a01e:	e0ba      	b.n	801a196 <_printf_i+0x19a>
 801a020:	497a      	ldr	r1, [pc, #488]	@ (801a20c <_printf_i+0x210>)
 801a022:	9104      	str	r1, [sp, #16]
 801a024:	2a58      	cmp	r2, #88	@ 0x58
 801a026:	d100      	bne.n	801a02a <_printf_i+0x2e>
 801a028:	e08e      	b.n	801a148 <_printf_i+0x14c>
 801a02a:	0025      	movs	r5, r4
 801a02c:	3542      	adds	r5, #66	@ 0x42
 801a02e:	702a      	strb	r2, [r5, #0]
 801a030:	e022      	b.n	801a078 <_printf_i+0x7c>
 801a032:	0010      	movs	r0, r2
 801a034:	3863      	subs	r0, #99	@ 0x63
 801a036:	2815      	cmp	r0, #21
 801a038:	d8f7      	bhi.n	801a02a <_printf_i+0x2e>
 801a03a:	f7e6 f881 	bl	8000140 <__gnu_thumb1_case_shi>
 801a03e:	0016      	.short	0x0016
 801a040:	fff6001f 	.word	0xfff6001f
 801a044:	fff6fff6 	.word	0xfff6fff6
 801a048:	001ffff6 	.word	0x001ffff6
 801a04c:	fff6fff6 	.word	0xfff6fff6
 801a050:	fff6fff6 	.word	0xfff6fff6
 801a054:	0036009f 	.word	0x0036009f
 801a058:	fff6007e 	.word	0xfff6007e
 801a05c:	00b0fff6 	.word	0x00b0fff6
 801a060:	0036fff6 	.word	0x0036fff6
 801a064:	fff6fff6 	.word	0xfff6fff6
 801a068:	0082      	.short	0x0082
 801a06a:	0025      	movs	r5, r4
 801a06c:	681a      	ldr	r2, [r3, #0]
 801a06e:	3542      	adds	r5, #66	@ 0x42
 801a070:	1d11      	adds	r1, r2, #4
 801a072:	6019      	str	r1, [r3, #0]
 801a074:	6813      	ldr	r3, [r2, #0]
 801a076:	702b      	strb	r3, [r5, #0]
 801a078:	2301      	movs	r3, #1
 801a07a:	e09e      	b.n	801a1ba <_printf_i+0x1be>
 801a07c:	6818      	ldr	r0, [r3, #0]
 801a07e:	6809      	ldr	r1, [r1, #0]
 801a080:	1d02      	adds	r2, r0, #4
 801a082:	060d      	lsls	r5, r1, #24
 801a084:	d50b      	bpl.n	801a09e <_printf_i+0xa2>
 801a086:	6806      	ldr	r6, [r0, #0]
 801a088:	601a      	str	r2, [r3, #0]
 801a08a:	2e00      	cmp	r6, #0
 801a08c:	da03      	bge.n	801a096 <_printf_i+0x9a>
 801a08e:	232d      	movs	r3, #45	@ 0x2d
 801a090:	9a03      	ldr	r2, [sp, #12]
 801a092:	4276      	negs	r6, r6
 801a094:	7013      	strb	r3, [r2, #0]
 801a096:	4b5d      	ldr	r3, [pc, #372]	@ (801a20c <_printf_i+0x210>)
 801a098:	270a      	movs	r7, #10
 801a09a:	9304      	str	r3, [sp, #16]
 801a09c:	e018      	b.n	801a0d0 <_printf_i+0xd4>
 801a09e:	6806      	ldr	r6, [r0, #0]
 801a0a0:	601a      	str	r2, [r3, #0]
 801a0a2:	0649      	lsls	r1, r1, #25
 801a0a4:	d5f1      	bpl.n	801a08a <_printf_i+0x8e>
 801a0a6:	b236      	sxth	r6, r6
 801a0a8:	e7ef      	b.n	801a08a <_printf_i+0x8e>
 801a0aa:	6808      	ldr	r0, [r1, #0]
 801a0ac:	6819      	ldr	r1, [r3, #0]
 801a0ae:	c940      	ldmia	r1!, {r6}
 801a0b0:	0605      	lsls	r5, r0, #24
 801a0b2:	d402      	bmi.n	801a0ba <_printf_i+0xbe>
 801a0b4:	0640      	lsls	r0, r0, #25
 801a0b6:	d500      	bpl.n	801a0ba <_printf_i+0xbe>
 801a0b8:	b2b6      	uxth	r6, r6
 801a0ba:	6019      	str	r1, [r3, #0]
 801a0bc:	4b53      	ldr	r3, [pc, #332]	@ (801a20c <_printf_i+0x210>)
 801a0be:	270a      	movs	r7, #10
 801a0c0:	9304      	str	r3, [sp, #16]
 801a0c2:	2a6f      	cmp	r2, #111	@ 0x6f
 801a0c4:	d100      	bne.n	801a0c8 <_printf_i+0xcc>
 801a0c6:	3f02      	subs	r7, #2
 801a0c8:	0023      	movs	r3, r4
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	3343      	adds	r3, #67	@ 0x43
 801a0ce:	701a      	strb	r2, [r3, #0]
 801a0d0:	6863      	ldr	r3, [r4, #4]
 801a0d2:	60a3      	str	r3, [r4, #8]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	db06      	blt.n	801a0e6 <_printf_i+0xea>
 801a0d8:	2104      	movs	r1, #4
 801a0da:	6822      	ldr	r2, [r4, #0]
 801a0dc:	9d03      	ldr	r5, [sp, #12]
 801a0de:	438a      	bics	r2, r1
 801a0e0:	6022      	str	r2, [r4, #0]
 801a0e2:	4333      	orrs	r3, r6
 801a0e4:	d00c      	beq.n	801a100 <_printf_i+0x104>
 801a0e6:	9d03      	ldr	r5, [sp, #12]
 801a0e8:	0030      	movs	r0, r6
 801a0ea:	0039      	movs	r1, r7
 801a0ec:	f7e6 f8c2 	bl	8000274 <__aeabi_uidivmod>
 801a0f0:	9b04      	ldr	r3, [sp, #16]
 801a0f2:	3d01      	subs	r5, #1
 801a0f4:	5c5b      	ldrb	r3, [r3, r1]
 801a0f6:	702b      	strb	r3, [r5, #0]
 801a0f8:	0033      	movs	r3, r6
 801a0fa:	0006      	movs	r6, r0
 801a0fc:	429f      	cmp	r7, r3
 801a0fe:	d9f3      	bls.n	801a0e8 <_printf_i+0xec>
 801a100:	2f08      	cmp	r7, #8
 801a102:	d109      	bne.n	801a118 <_printf_i+0x11c>
 801a104:	6823      	ldr	r3, [r4, #0]
 801a106:	07db      	lsls	r3, r3, #31
 801a108:	d506      	bpl.n	801a118 <_printf_i+0x11c>
 801a10a:	6862      	ldr	r2, [r4, #4]
 801a10c:	6923      	ldr	r3, [r4, #16]
 801a10e:	429a      	cmp	r2, r3
 801a110:	dc02      	bgt.n	801a118 <_printf_i+0x11c>
 801a112:	2330      	movs	r3, #48	@ 0x30
 801a114:	3d01      	subs	r5, #1
 801a116:	702b      	strb	r3, [r5, #0]
 801a118:	9b03      	ldr	r3, [sp, #12]
 801a11a:	1b5b      	subs	r3, r3, r5
 801a11c:	6123      	str	r3, [r4, #16]
 801a11e:	9b07      	ldr	r3, [sp, #28]
 801a120:	0021      	movs	r1, r4
 801a122:	9300      	str	r3, [sp, #0]
 801a124:	9805      	ldr	r0, [sp, #20]
 801a126:	9b06      	ldr	r3, [sp, #24]
 801a128:	aa09      	add	r2, sp, #36	@ 0x24
 801a12a:	f7ff fef7 	bl	8019f1c <_printf_common>
 801a12e:	3001      	adds	r0, #1
 801a130:	d148      	bne.n	801a1c4 <_printf_i+0x1c8>
 801a132:	2001      	movs	r0, #1
 801a134:	4240      	negs	r0, r0
 801a136:	b00b      	add	sp, #44	@ 0x2c
 801a138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a13a:	2220      	movs	r2, #32
 801a13c:	6809      	ldr	r1, [r1, #0]
 801a13e:	430a      	orrs	r2, r1
 801a140:	6022      	str	r2, [r4, #0]
 801a142:	2278      	movs	r2, #120	@ 0x78
 801a144:	4932      	ldr	r1, [pc, #200]	@ (801a210 <_printf_i+0x214>)
 801a146:	9104      	str	r1, [sp, #16]
 801a148:	0021      	movs	r1, r4
 801a14a:	3145      	adds	r1, #69	@ 0x45
 801a14c:	700a      	strb	r2, [r1, #0]
 801a14e:	6819      	ldr	r1, [r3, #0]
 801a150:	6822      	ldr	r2, [r4, #0]
 801a152:	c940      	ldmia	r1!, {r6}
 801a154:	0610      	lsls	r0, r2, #24
 801a156:	d402      	bmi.n	801a15e <_printf_i+0x162>
 801a158:	0650      	lsls	r0, r2, #25
 801a15a:	d500      	bpl.n	801a15e <_printf_i+0x162>
 801a15c:	b2b6      	uxth	r6, r6
 801a15e:	6019      	str	r1, [r3, #0]
 801a160:	07d3      	lsls	r3, r2, #31
 801a162:	d502      	bpl.n	801a16a <_printf_i+0x16e>
 801a164:	2320      	movs	r3, #32
 801a166:	4313      	orrs	r3, r2
 801a168:	6023      	str	r3, [r4, #0]
 801a16a:	2e00      	cmp	r6, #0
 801a16c:	d001      	beq.n	801a172 <_printf_i+0x176>
 801a16e:	2710      	movs	r7, #16
 801a170:	e7aa      	b.n	801a0c8 <_printf_i+0xcc>
 801a172:	2220      	movs	r2, #32
 801a174:	6823      	ldr	r3, [r4, #0]
 801a176:	4393      	bics	r3, r2
 801a178:	6023      	str	r3, [r4, #0]
 801a17a:	e7f8      	b.n	801a16e <_printf_i+0x172>
 801a17c:	681a      	ldr	r2, [r3, #0]
 801a17e:	680d      	ldr	r5, [r1, #0]
 801a180:	1d10      	adds	r0, r2, #4
 801a182:	6949      	ldr	r1, [r1, #20]
 801a184:	6018      	str	r0, [r3, #0]
 801a186:	6813      	ldr	r3, [r2, #0]
 801a188:	062e      	lsls	r6, r5, #24
 801a18a:	d501      	bpl.n	801a190 <_printf_i+0x194>
 801a18c:	6019      	str	r1, [r3, #0]
 801a18e:	e002      	b.n	801a196 <_printf_i+0x19a>
 801a190:	066d      	lsls	r5, r5, #25
 801a192:	d5fb      	bpl.n	801a18c <_printf_i+0x190>
 801a194:	8019      	strh	r1, [r3, #0]
 801a196:	2300      	movs	r3, #0
 801a198:	9d03      	ldr	r5, [sp, #12]
 801a19a:	6123      	str	r3, [r4, #16]
 801a19c:	e7bf      	b.n	801a11e <_printf_i+0x122>
 801a19e:	681a      	ldr	r2, [r3, #0]
 801a1a0:	1d11      	adds	r1, r2, #4
 801a1a2:	6019      	str	r1, [r3, #0]
 801a1a4:	6815      	ldr	r5, [r2, #0]
 801a1a6:	2100      	movs	r1, #0
 801a1a8:	0028      	movs	r0, r5
 801a1aa:	6862      	ldr	r2, [r4, #4]
 801a1ac:	f000 fb91 	bl	801a8d2 <memchr>
 801a1b0:	2800      	cmp	r0, #0
 801a1b2:	d001      	beq.n	801a1b8 <_printf_i+0x1bc>
 801a1b4:	1b40      	subs	r0, r0, r5
 801a1b6:	6060      	str	r0, [r4, #4]
 801a1b8:	6863      	ldr	r3, [r4, #4]
 801a1ba:	6123      	str	r3, [r4, #16]
 801a1bc:	2300      	movs	r3, #0
 801a1be:	9a03      	ldr	r2, [sp, #12]
 801a1c0:	7013      	strb	r3, [r2, #0]
 801a1c2:	e7ac      	b.n	801a11e <_printf_i+0x122>
 801a1c4:	002a      	movs	r2, r5
 801a1c6:	6923      	ldr	r3, [r4, #16]
 801a1c8:	9906      	ldr	r1, [sp, #24]
 801a1ca:	9805      	ldr	r0, [sp, #20]
 801a1cc:	9d07      	ldr	r5, [sp, #28]
 801a1ce:	47a8      	blx	r5
 801a1d0:	3001      	adds	r0, #1
 801a1d2:	d0ae      	beq.n	801a132 <_printf_i+0x136>
 801a1d4:	6823      	ldr	r3, [r4, #0]
 801a1d6:	079b      	lsls	r3, r3, #30
 801a1d8:	d415      	bmi.n	801a206 <_printf_i+0x20a>
 801a1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1dc:	68e0      	ldr	r0, [r4, #12]
 801a1de:	4298      	cmp	r0, r3
 801a1e0:	daa9      	bge.n	801a136 <_printf_i+0x13a>
 801a1e2:	0018      	movs	r0, r3
 801a1e4:	e7a7      	b.n	801a136 <_printf_i+0x13a>
 801a1e6:	0022      	movs	r2, r4
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	9906      	ldr	r1, [sp, #24]
 801a1ec:	9805      	ldr	r0, [sp, #20]
 801a1ee:	9e07      	ldr	r6, [sp, #28]
 801a1f0:	3219      	adds	r2, #25
 801a1f2:	47b0      	blx	r6
 801a1f4:	3001      	adds	r0, #1
 801a1f6:	d09c      	beq.n	801a132 <_printf_i+0x136>
 801a1f8:	3501      	adds	r5, #1
 801a1fa:	68e3      	ldr	r3, [r4, #12]
 801a1fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1fe:	1a9b      	subs	r3, r3, r2
 801a200:	42ab      	cmp	r3, r5
 801a202:	dcf0      	bgt.n	801a1e6 <_printf_i+0x1ea>
 801a204:	e7e9      	b.n	801a1da <_printf_i+0x1de>
 801a206:	2500      	movs	r5, #0
 801a208:	e7f7      	b.n	801a1fa <_printf_i+0x1fe>
 801a20a:	46c0      	nop			@ (mov r8, r8)
 801a20c:	080204d3 	.word	0x080204d3
 801a210:	080204e4 	.word	0x080204e4

0801a214 <std>:
 801a214:	2300      	movs	r3, #0
 801a216:	b510      	push	{r4, lr}
 801a218:	0004      	movs	r4, r0
 801a21a:	6003      	str	r3, [r0, #0]
 801a21c:	6043      	str	r3, [r0, #4]
 801a21e:	6083      	str	r3, [r0, #8]
 801a220:	8181      	strh	r1, [r0, #12]
 801a222:	6643      	str	r3, [r0, #100]	@ 0x64
 801a224:	81c2      	strh	r2, [r0, #14]
 801a226:	6103      	str	r3, [r0, #16]
 801a228:	6143      	str	r3, [r0, #20]
 801a22a:	6183      	str	r3, [r0, #24]
 801a22c:	0019      	movs	r1, r3
 801a22e:	2208      	movs	r2, #8
 801a230:	305c      	adds	r0, #92	@ 0x5c
 801a232:	f000 fa8f 	bl	801a754 <memset>
 801a236:	4b0b      	ldr	r3, [pc, #44]	@ (801a264 <std+0x50>)
 801a238:	6224      	str	r4, [r4, #32]
 801a23a:	6263      	str	r3, [r4, #36]	@ 0x24
 801a23c:	4b0a      	ldr	r3, [pc, #40]	@ (801a268 <std+0x54>)
 801a23e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a240:	4b0a      	ldr	r3, [pc, #40]	@ (801a26c <std+0x58>)
 801a242:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a244:	4b0a      	ldr	r3, [pc, #40]	@ (801a270 <std+0x5c>)
 801a246:	6323      	str	r3, [r4, #48]	@ 0x30
 801a248:	4b0a      	ldr	r3, [pc, #40]	@ (801a274 <std+0x60>)
 801a24a:	429c      	cmp	r4, r3
 801a24c:	d005      	beq.n	801a25a <std+0x46>
 801a24e:	4b0a      	ldr	r3, [pc, #40]	@ (801a278 <std+0x64>)
 801a250:	429c      	cmp	r4, r3
 801a252:	d002      	beq.n	801a25a <std+0x46>
 801a254:	4b09      	ldr	r3, [pc, #36]	@ (801a27c <std+0x68>)
 801a256:	429c      	cmp	r4, r3
 801a258:	d103      	bne.n	801a262 <std+0x4e>
 801a25a:	0020      	movs	r0, r4
 801a25c:	3058      	adds	r0, #88	@ 0x58
 801a25e:	f000 fb2d 	bl	801a8bc <__retarget_lock_init_recursive>
 801a262:	bd10      	pop	{r4, pc}
 801a264:	0801a561 	.word	0x0801a561
 801a268:	0801a589 	.word	0x0801a589
 801a26c:	0801a5c1 	.word	0x0801a5c1
 801a270:	0801a5ed 	.word	0x0801a5ed
 801a274:	200066b0 	.word	0x200066b0
 801a278:	20006718 	.word	0x20006718
 801a27c:	20006780 	.word	0x20006780

0801a280 <stdio_exit_handler>:
 801a280:	b510      	push	{r4, lr}
 801a282:	4a03      	ldr	r2, [pc, #12]	@ (801a290 <stdio_exit_handler+0x10>)
 801a284:	4903      	ldr	r1, [pc, #12]	@ (801a294 <stdio_exit_handler+0x14>)
 801a286:	4804      	ldr	r0, [pc, #16]	@ (801a298 <stdio_exit_handler+0x18>)
 801a288:	f000 f87c 	bl	801a384 <_fwalk_sglue>
 801a28c:	bd10      	pop	{r4, pc}
 801a28e:	46c0      	nop			@ (mov r8, r8)
 801a290:	200002c0 	.word	0x200002c0
 801a294:	0801c579 	.word	0x0801c579
 801a298:	200002d0 	.word	0x200002d0

0801a29c <cleanup_stdio>:
 801a29c:	6841      	ldr	r1, [r0, #4]
 801a29e:	4b0b      	ldr	r3, [pc, #44]	@ (801a2cc <cleanup_stdio+0x30>)
 801a2a0:	b510      	push	{r4, lr}
 801a2a2:	0004      	movs	r4, r0
 801a2a4:	4299      	cmp	r1, r3
 801a2a6:	d001      	beq.n	801a2ac <cleanup_stdio+0x10>
 801a2a8:	f002 f966 	bl	801c578 <_fflush_r>
 801a2ac:	68a1      	ldr	r1, [r4, #8]
 801a2ae:	4b08      	ldr	r3, [pc, #32]	@ (801a2d0 <cleanup_stdio+0x34>)
 801a2b0:	4299      	cmp	r1, r3
 801a2b2:	d002      	beq.n	801a2ba <cleanup_stdio+0x1e>
 801a2b4:	0020      	movs	r0, r4
 801a2b6:	f002 f95f 	bl	801c578 <_fflush_r>
 801a2ba:	68e1      	ldr	r1, [r4, #12]
 801a2bc:	4b05      	ldr	r3, [pc, #20]	@ (801a2d4 <cleanup_stdio+0x38>)
 801a2be:	4299      	cmp	r1, r3
 801a2c0:	d002      	beq.n	801a2c8 <cleanup_stdio+0x2c>
 801a2c2:	0020      	movs	r0, r4
 801a2c4:	f002 f958 	bl	801c578 <_fflush_r>
 801a2c8:	bd10      	pop	{r4, pc}
 801a2ca:	46c0      	nop			@ (mov r8, r8)
 801a2cc:	200066b0 	.word	0x200066b0
 801a2d0:	20006718 	.word	0x20006718
 801a2d4:	20006780 	.word	0x20006780

0801a2d8 <global_stdio_init.part.0>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	4b09      	ldr	r3, [pc, #36]	@ (801a300 <global_stdio_init.part.0+0x28>)
 801a2dc:	4a09      	ldr	r2, [pc, #36]	@ (801a304 <global_stdio_init.part.0+0x2c>)
 801a2de:	2104      	movs	r1, #4
 801a2e0:	601a      	str	r2, [r3, #0]
 801a2e2:	4809      	ldr	r0, [pc, #36]	@ (801a308 <global_stdio_init.part.0+0x30>)
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	f7ff ff95 	bl	801a214 <std>
 801a2ea:	2201      	movs	r2, #1
 801a2ec:	2109      	movs	r1, #9
 801a2ee:	4807      	ldr	r0, [pc, #28]	@ (801a30c <global_stdio_init.part.0+0x34>)
 801a2f0:	f7ff ff90 	bl	801a214 <std>
 801a2f4:	2202      	movs	r2, #2
 801a2f6:	2112      	movs	r1, #18
 801a2f8:	4805      	ldr	r0, [pc, #20]	@ (801a310 <global_stdio_init.part.0+0x38>)
 801a2fa:	f7ff ff8b 	bl	801a214 <std>
 801a2fe:	bd10      	pop	{r4, pc}
 801a300:	200067e8 	.word	0x200067e8
 801a304:	0801a281 	.word	0x0801a281
 801a308:	200066b0 	.word	0x200066b0
 801a30c:	20006718 	.word	0x20006718
 801a310:	20006780 	.word	0x20006780

0801a314 <__sfp_lock_acquire>:
 801a314:	b510      	push	{r4, lr}
 801a316:	4802      	ldr	r0, [pc, #8]	@ (801a320 <__sfp_lock_acquire+0xc>)
 801a318:	f000 fad1 	bl	801a8be <__retarget_lock_acquire_recursive>
 801a31c:	bd10      	pop	{r4, pc}
 801a31e:	46c0      	nop			@ (mov r8, r8)
 801a320:	200067f1 	.word	0x200067f1

0801a324 <__sfp_lock_release>:
 801a324:	b510      	push	{r4, lr}
 801a326:	4802      	ldr	r0, [pc, #8]	@ (801a330 <__sfp_lock_release+0xc>)
 801a328:	f000 faca 	bl	801a8c0 <__retarget_lock_release_recursive>
 801a32c:	bd10      	pop	{r4, pc}
 801a32e:	46c0      	nop			@ (mov r8, r8)
 801a330:	200067f1 	.word	0x200067f1

0801a334 <__sinit>:
 801a334:	b510      	push	{r4, lr}
 801a336:	0004      	movs	r4, r0
 801a338:	f7ff ffec 	bl	801a314 <__sfp_lock_acquire>
 801a33c:	6a23      	ldr	r3, [r4, #32]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d002      	beq.n	801a348 <__sinit+0x14>
 801a342:	f7ff ffef 	bl	801a324 <__sfp_lock_release>
 801a346:	bd10      	pop	{r4, pc}
 801a348:	4b04      	ldr	r3, [pc, #16]	@ (801a35c <__sinit+0x28>)
 801a34a:	6223      	str	r3, [r4, #32]
 801a34c:	4b04      	ldr	r3, [pc, #16]	@ (801a360 <__sinit+0x2c>)
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d1f6      	bne.n	801a342 <__sinit+0xe>
 801a354:	f7ff ffc0 	bl	801a2d8 <global_stdio_init.part.0>
 801a358:	e7f3      	b.n	801a342 <__sinit+0xe>
 801a35a:	46c0      	nop			@ (mov r8, r8)
 801a35c:	0801a29d 	.word	0x0801a29d
 801a360:	200067e8 	.word	0x200067e8

0801a364 <fiprintf>:
 801a364:	b40e      	push	{r1, r2, r3}
 801a366:	b517      	push	{r0, r1, r2, r4, lr}
 801a368:	4c05      	ldr	r4, [pc, #20]	@ (801a380 <fiprintf+0x1c>)
 801a36a:	ab05      	add	r3, sp, #20
 801a36c:	cb04      	ldmia	r3!, {r2}
 801a36e:	0001      	movs	r1, r0
 801a370:	6820      	ldr	r0, [r4, #0]
 801a372:	9301      	str	r3, [sp, #4]
 801a374:	f001 ff5e 	bl	801c234 <_vfiprintf_r>
 801a378:	bc1e      	pop	{r1, r2, r3, r4}
 801a37a:	bc08      	pop	{r3}
 801a37c:	b003      	add	sp, #12
 801a37e:	4718      	bx	r3
 801a380:	200002cc 	.word	0x200002cc

0801a384 <_fwalk_sglue>:
 801a384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a386:	0014      	movs	r4, r2
 801a388:	2600      	movs	r6, #0
 801a38a:	9000      	str	r0, [sp, #0]
 801a38c:	9101      	str	r1, [sp, #4]
 801a38e:	68a5      	ldr	r5, [r4, #8]
 801a390:	6867      	ldr	r7, [r4, #4]
 801a392:	3f01      	subs	r7, #1
 801a394:	d504      	bpl.n	801a3a0 <_fwalk_sglue+0x1c>
 801a396:	6824      	ldr	r4, [r4, #0]
 801a398:	2c00      	cmp	r4, #0
 801a39a:	d1f8      	bne.n	801a38e <_fwalk_sglue+0xa>
 801a39c:	0030      	movs	r0, r6
 801a39e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a3a0:	89ab      	ldrh	r3, [r5, #12]
 801a3a2:	2b01      	cmp	r3, #1
 801a3a4:	d908      	bls.n	801a3b8 <_fwalk_sglue+0x34>
 801a3a6:	220e      	movs	r2, #14
 801a3a8:	5eab      	ldrsh	r3, [r5, r2]
 801a3aa:	3301      	adds	r3, #1
 801a3ac:	d004      	beq.n	801a3b8 <_fwalk_sglue+0x34>
 801a3ae:	0029      	movs	r1, r5
 801a3b0:	9800      	ldr	r0, [sp, #0]
 801a3b2:	9b01      	ldr	r3, [sp, #4]
 801a3b4:	4798      	blx	r3
 801a3b6:	4306      	orrs	r6, r0
 801a3b8:	3568      	adds	r5, #104	@ 0x68
 801a3ba:	e7ea      	b.n	801a392 <_fwalk_sglue+0xe>

0801a3bc <iprintf>:
 801a3bc:	b40f      	push	{r0, r1, r2, r3}
 801a3be:	b507      	push	{r0, r1, r2, lr}
 801a3c0:	4905      	ldr	r1, [pc, #20]	@ (801a3d8 <iprintf+0x1c>)
 801a3c2:	ab04      	add	r3, sp, #16
 801a3c4:	6808      	ldr	r0, [r1, #0]
 801a3c6:	cb04      	ldmia	r3!, {r2}
 801a3c8:	6881      	ldr	r1, [r0, #8]
 801a3ca:	9301      	str	r3, [sp, #4]
 801a3cc:	f001 ff32 	bl	801c234 <_vfiprintf_r>
 801a3d0:	b003      	add	sp, #12
 801a3d2:	bc08      	pop	{r3}
 801a3d4:	b004      	add	sp, #16
 801a3d6:	4718      	bx	r3
 801a3d8:	200002cc 	.word	0x200002cc

0801a3dc <putchar>:
 801a3dc:	b510      	push	{r4, lr}
 801a3de:	4b03      	ldr	r3, [pc, #12]	@ (801a3ec <putchar+0x10>)
 801a3e0:	0001      	movs	r1, r0
 801a3e2:	6818      	ldr	r0, [r3, #0]
 801a3e4:	6882      	ldr	r2, [r0, #8]
 801a3e6:	f002 f95e 	bl	801c6a6 <_putc_r>
 801a3ea:	bd10      	pop	{r4, pc}
 801a3ec:	200002cc 	.word	0x200002cc

0801a3f0 <_puts_r>:
 801a3f0:	6a03      	ldr	r3, [r0, #32]
 801a3f2:	b570      	push	{r4, r5, r6, lr}
 801a3f4:	0005      	movs	r5, r0
 801a3f6:	000e      	movs	r6, r1
 801a3f8:	6884      	ldr	r4, [r0, #8]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d101      	bne.n	801a402 <_puts_r+0x12>
 801a3fe:	f7ff ff99 	bl	801a334 <__sinit>
 801a402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a404:	07db      	lsls	r3, r3, #31
 801a406:	d405      	bmi.n	801a414 <_puts_r+0x24>
 801a408:	89a3      	ldrh	r3, [r4, #12]
 801a40a:	059b      	lsls	r3, r3, #22
 801a40c:	d402      	bmi.n	801a414 <_puts_r+0x24>
 801a40e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a410:	f000 fa55 	bl	801a8be <__retarget_lock_acquire_recursive>
 801a414:	89a3      	ldrh	r3, [r4, #12]
 801a416:	071b      	lsls	r3, r3, #28
 801a418:	d502      	bpl.n	801a420 <_puts_r+0x30>
 801a41a:	6923      	ldr	r3, [r4, #16]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d11f      	bne.n	801a460 <_puts_r+0x70>
 801a420:	0021      	movs	r1, r4
 801a422:	0028      	movs	r0, r5
 801a424:	f000 f92a 	bl	801a67c <__swsetup_r>
 801a428:	2800      	cmp	r0, #0
 801a42a:	d019      	beq.n	801a460 <_puts_r+0x70>
 801a42c:	2501      	movs	r5, #1
 801a42e:	426d      	negs	r5, r5
 801a430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a432:	07db      	lsls	r3, r3, #31
 801a434:	d405      	bmi.n	801a442 <_puts_r+0x52>
 801a436:	89a3      	ldrh	r3, [r4, #12]
 801a438:	059b      	lsls	r3, r3, #22
 801a43a:	d402      	bmi.n	801a442 <_puts_r+0x52>
 801a43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a43e:	f000 fa3f 	bl	801a8c0 <__retarget_lock_release_recursive>
 801a442:	0028      	movs	r0, r5
 801a444:	bd70      	pop	{r4, r5, r6, pc}
 801a446:	3601      	adds	r6, #1
 801a448:	60a3      	str	r3, [r4, #8]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	da04      	bge.n	801a458 <_puts_r+0x68>
 801a44e:	69a2      	ldr	r2, [r4, #24]
 801a450:	429a      	cmp	r2, r3
 801a452:	dc16      	bgt.n	801a482 <_puts_r+0x92>
 801a454:	290a      	cmp	r1, #10
 801a456:	d014      	beq.n	801a482 <_puts_r+0x92>
 801a458:	6823      	ldr	r3, [r4, #0]
 801a45a:	1c5a      	adds	r2, r3, #1
 801a45c:	6022      	str	r2, [r4, #0]
 801a45e:	7019      	strb	r1, [r3, #0]
 801a460:	68a3      	ldr	r3, [r4, #8]
 801a462:	7831      	ldrb	r1, [r6, #0]
 801a464:	3b01      	subs	r3, #1
 801a466:	2900      	cmp	r1, #0
 801a468:	d1ed      	bne.n	801a446 <_puts_r+0x56>
 801a46a:	60a3      	str	r3, [r4, #8]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	da0f      	bge.n	801a490 <_puts_r+0xa0>
 801a470:	0022      	movs	r2, r4
 801a472:	0028      	movs	r0, r5
 801a474:	310a      	adds	r1, #10
 801a476:	f000 f8bf 	bl	801a5f8 <__swbuf_r>
 801a47a:	3001      	adds	r0, #1
 801a47c:	d0d6      	beq.n	801a42c <_puts_r+0x3c>
 801a47e:	250a      	movs	r5, #10
 801a480:	e7d6      	b.n	801a430 <_puts_r+0x40>
 801a482:	0022      	movs	r2, r4
 801a484:	0028      	movs	r0, r5
 801a486:	f000 f8b7 	bl	801a5f8 <__swbuf_r>
 801a48a:	3001      	adds	r0, #1
 801a48c:	d1e8      	bne.n	801a460 <_puts_r+0x70>
 801a48e:	e7cd      	b.n	801a42c <_puts_r+0x3c>
 801a490:	6823      	ldr	r3, [r4, #0]
 801a492:	1c5a      	adds	r2, r3, #1
 801a494:	6022      	str	r2, [r4, #0]
 801a496:	220a      	movs	r2, #10
 801a498:	701a      	strb	r2, [r3, #0]
 801a49a:	e7f0      	b.n	801a47e <_puts_r+0x8e>

0801a49c <puts>:
 801a49c:	b510      	push	{r4, lr}
 801a49e:	4b03      	ldr	r3, [pc, #12]	@ (801a4ac <puts+0x10>)
 801a4a0:	0001      	movs	r1, r0
 801a4a2:	6818      	ldr	r0, [r3, #0]
 801a4a4:	f7ff ffa4 	bl	801a3f0 <_puts_r>
 801a4a8:	bd10      	pop	{r4, pc}
 801a4aa:	46c0      	nop			@ (mov r8, r8)
 801a4ac:	200002cc 	.word	0x200002cc

0801a4b0 <sniprintf>:
 801a4b0:	b40c      	push	{r2, r3}
 801a4b2:	b530      	push	{r4, r5, lr}
 801a4b4:	4b18      	ldr	r3, [pc, #96]	@ (801a518 <sniprintf+0x68>)
 801a4b6:	000c      	movs	r4, r1
 801a4b8:	681d      	ldr	r5, [r3, #0]
 801a4ba:	b09d      	sub	sp, #116	@ 0x74
 801a4bc:	2900      	cmp	r1, #0
 801a4be:	da08      	bge.n	801a4d2 <sniprintf+0x22>
 801a4c0:	238b      	movs	r3, #139	@ 0x8b
 801a4c2:	2001      	movs	r0, #1
 801a4c4:	602b      	str	r3, [r5, #0]
 801a4c6:	4240      	negs	r0, r0
 801a4c8:	b01d      	add	sp, #116	@ 0x74
 801a4ca:	bc30      	pop	{r4, r5}
 801a4cc:	bc08      	pop	{r3}
 801a4ce:	b002      	add	sp, #8
 801a4d0:	4718      	bx	r3
 801a4d2:	2382      	movs	r3, #130	@ 0x82
 801a4d4:	466a      	mov	r2, sp
 801a4d6:	009b      	lsls	r3, r3, #2
 801a4d8:	8293      	strh	r3, [r2, #20]
 801a4da:	2300      	movs	r3, #0
 801a4dc:	9002      	str	r0, [sp, #8]
 801a4de:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a4e0:	9006      	str	r0, [sp, #24]
 801a4e2:	4299      	cmp	r1, r3
 801a4e4:	d000      	beq.n	801a4e8 <sniprintf+0x38>
 801a4e6:	1e4b      	subs	r3, r1, #1
 801a4e8:	9304      	str	r3, [sp, #16]
 801a4ea:	9307      	str	r3, [sp, #28]
 801a4ec:	2301      	movs	r3, #1
 801a4ee:	466a      	mov	r2, sp
 801a4f0:	425b      	negs	r3, r3
 801a4f2:	82d3      	strh	r3, [r2, #22]
 801a4f4:	0028      	movs	r0, r5
 801a4f6:	ab21      	add	r3, sp, #132	@ 0x84
 801a4f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a4fa:	a902      	add	r1, sp, #8
 801a4fc:	9301      	str	r3, [sp, #4]
 801a4fe:	f001 fd73 	bl	801bfe8 <_svfiprintf_r>
 801a502:	1c43      	adds	r3, r0, #1
 801a504:	da01      	bge.n	801a50a <sniprintf+0x5a>
 801a506:	238b      	movs	r3, #139	@ 0x8b
 801a508:	602b      	str	r3, [r5, #0]
 801a50a:	2c00      	cmp	r4, #0
 801a50c:	d0dc      	beq.n	801a4c8 <sniprintf+0x18>
 801a50e:	2200      	movs	r2, #0
 801a510:	9b02      	ldr	r3, [sp, #8]
 801a512:	701a      	strb	r2, [r3, #0]
 801a514:	e7d8      	b.n	801a4c8 <sniprintf+0x18>
 801a516:	46c0      	nop			@ (mov r8, r8)
 801a518:	200002cc 	.word	0x200002cc

0801a51c <siprintf>:
 801a51c:	b40e      	push	{r1, r2, r3}
 801a51e:	b510      	push	{r4, lr}
 801a520:	2400      	movs	r4, #0
 801a522:	490c      	ldr	r1, [pc, #48]	@ (801a554 <siprintf+0x38>)
 801a524:	b09d      	sub	sp, #116	@ 0x74
 801a526:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a528:	9002      	str	r0, [sp, #8]
 801a52a:	9006      	str	r0, [sp, #24]
 801a52c:	9107      	str	r1, [sp, #28]
 801a52e:	9104      	str	r1, [sp, #16]
 801a530:	4809      	ldr	r0, [pc, #36]	@ (801a558 <siprintf+0x3c>)
 801a532:	490a      	ldr	r1, [pc, #40]	@ (801a55c <siprintf+0x40>)
 801a534:	cb04      	ldmia	r3!, {r2}
 801a536:	9105      	str	r1, [sp, #20]
 801a538:	6800      	ldr	r0, [r0, #0]
 801a53a:	a902      	add	r1, sp, #8
 801a53c:	9301      	str	r3, [sp, #4]
 801a53e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a540:	f001 fd52 	bl	801bfe8 <_svfiprintf_r>
 801a544:	9b02      	ldr	r3, [sp, #8]
 801a546:	701c      	strb	r4, [r3, #0]
 801a548:	b01d      	add	sp, #116	@ 0x74
 801a54a:	bc10      	pop	{r4}
 801a54c:	bc08      	pop	{r3}
 801a54e:	b003      	add	sp, #12
 801a550:	4718      	bx	r3
 801a552:	46c0      	nop			@ (mov r8, r8)
 801a554:	7fffffff 	.word	0x7fffffff
 801a558:	200002cc 	.word	0x200002cc
 801a55c:	ffff0208 	.word	0xffff0208

0801a560 <__sread>:
 801a560:	b570      	push	{r4, r5, r6, lr}
 801a562:	000c      	movs	r4, r1
 801a564:	250e      	movs	r5, #14
 801a566:	5f49      	ldrsh	r1, [r1, r5]
 801a568:	f000 f956 	bl	801a818 <_read_r>
 801a56c:	2800      	cmp	r0, #0
 801a56e:	db03      	blt.n	801a578 <__sread+0x18>
 801a570:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801a572:	181b      	adds	r3, r3, r0
 801a574:	6563      	str	r3, [r4, #84]	@ 0x54
 801a576:	bd70      	pop	{r4, r5, r6, pc}
 801a578:	89a3      	ldrh	r3, [r4, #12]
 801a57a:	4a02      	ldr	r2, [pc, #8]	@ (801a584 <__sread+0x24>)
 801a57c:	4013      	ands	r3, r2
 801a57e:	81a3      	strh	r3, [r4, #12]
 801a580:	e7f9      	b.n	801a576 <__sread+0x16>
 801a582:	46c0      	nop			@ (mov r8, r8)
 801a584:	ffffefff 	.word	0xffffefff

0801a588 <__swrite>:
 801a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a58a:	001f      	movs	r7, r3
 801a58c:	898b      	ldrh	r3, [r1, #12]
 801a58e:	0005      	movs	r5, r0
 801a590:	000c      	movs	r4, r1
 801a592:	0016      	movs	r6, r2
 801a594:	05db      	lsls	r3, r3, #23
 801a596:	d505      	bpl.n	801a5a4 <__swrite+0x1c>
 801a598:	230e      	movs	r3, #14
 801a59a:	5ec9      	ldrsh	r1, [r1, r3]
 801a59c:	2200      	movs	r2, #0
 801a59e:	2302      	movs	r3, #2
 801a5a0:	f000 f926 	bl	801a7f0 <_lseek_r>
 801a5a4:	89a3      	ldrh	r3, [r4, #12]
 801a5a6:	4a05      	ldr	r2, [pc, #20]	@ (801a5bc <__swrite+0x34>)
 801a5a8:	0028      	movs	r0, r5
 801a5aa:	4013      	ands	r3, r2
 801a5ac:	81a3      	strh	r3, [r4, #12]
 801a5ae:	0032      	movs	r2, r6
 801a5b0:	230e      	movs	r3, #14
 801a5b2:	5ee1      	ldrsh	r1, [r4, r3]
 801a5b4:	003b      	movs	r3, r7
 801a5b6:	f000 f943 	bl	801a840 <_write_r>
 801a5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5bc:	ffffefff 	.word	0xffffefff

0801a5c0 <__sseek>:
 801a5c0:	b570      	push	{r4, r5, r6, lr}
 801a5c2:	000c      	movs	r4, r1
 801a5c4:	250e      	movs	r5, #14
 801a5c6:	5f49      	ldrsh	r1, [r1, r5]
 801a5c8:	f000 f912 	bl	801a7f0 <_lseek_r>
 801a5cc:	89a3      	ldrh	r3, [r4, #12]
 801a5ce:	1c42      	adds	r2, r0, #1
 801a5d0:	d103      	bne.n	801a5da <__sseek+0x1a>
 801a5d2:	4a05      	ldr	r2, [pc, #20]	@ (801a5e8 <__sseek+0x28>)
 801a5d4:	4013      	ands	r3, r2
 801a5d6:	81a3      	strh	r3, [r4, #12]
 801a5d8:	bd70      	pop	{r4, r5, r6, pc}
 801a5da:	2280      	movs	r2, #128	@ 0x80
 801a5dc:	0152      	lsls	r2, r2, #5
 801a5de:	4313      	orrs	r3, r2
 801a5e0:	81a3      	strh	r3, [r4, #12]
 801a5e2:	6560      	str	r0, [r4, #84]	@ 0x54
 801a5e4:	e7f8      	b.n	801a5d8 <__sseek+0x18>
 801a5e6:	46c0      	nop			@ (mov r8, r8)
 801a5e8:	ffffefff 	.word	0xffffefff

0801a5ec <__sclose>:
 801a5ec:	b510      	push	{r4, lr}
 801a5ee:	230e      	movs	r3, #14
 801a5f0:	5ec9      	ldrsh	r1, [r1, r3]
 801a5f2:	f000 f8eb 	bl	801a7cc <_close_r>
 801a5f6:	bd10      	pop	{r4, pc}

0801a5f8 <__swbuf_r>:
 801a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5fa:	0006      	movs	r6, r0
 801a5fc:	000d      	movs	r5, r1
 801a5fe:	0014      	movs	r4, r2
 801a600:	2800      	cmp	r0, #0
 801a602:	d004      	beq.n	801a60e <__swbuf_r+0x16>
 801a604:	6a03      	ldr	r3, [r0, #32]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d101      	bne.n	801a60e <__swbuf_r+0x16>
 801a60a:	f7ff fe93 	bl	801a334 <__sinit>
 801a60e:	69a3      	ldr	r3, [r4, #24]
 801a610:	60a3      	str	r3, [r4, #8]
 801a612:	89a3      	ldrh	r3, [r4, #12]
 801a614:	071b      	lsls	r3, r3, #28
 801a616:	d502      	bpl.n	801a61e <__swbuf_r+0x26>
 801a618:	6923      	ldr	r3, [r4, #16]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d109      	bne.n	801a632 <__swbuf_r+0x3a>
 801a61e:	0021      	movs	r1, r4
 801a620:	0030      	movs	r0, r6
 801a622:	f000 f82b 	bl	801a67c <__swsetup_r>
 801a626:	2800      	cmp	r0, #0
 801a628:	d003      	beq.n	801a632 <__swbuf_r+0x3a>
 801a62a:	2501      	movs	r5, #1
 801a62c:	426d      	negs	r5, r5
 801a62e:	0028      	movs	r0, r5
 801a630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a632:	6923      	ldr	r3, [r4, #16]
 801a634:	6820      	ldr	r0, [r4, #0]
 801a636:	b2ef      	uxtb	r7, r5
 801a638:	1ac0      	subs	r0, r0, r3
 801a63a:	6963      	ldr	r3, [r4, #20]
 801a63c:	b2ed      	uxtb	r5, r5
 801a63e:	4283      	cmp	r3, r0
 801a640:	dc05      	bgt.n	801a64e <__swbuf_r+0x56>
 801a642:	0021      	movs	r1, r4
 801a644:	0030      	movs	r0, r6
 801a646:	f001 ff97 	bl	801c578 <_fflush_r>
 801a64a:	2800      	cmp	r0, #0
 801a64c:	d1ed      	bne.n	801a62a <__swbuf_r+0x32>
 801a64e:	68a3      	ldr	r3, [r4, #8]
 801a650:	3001      	adds	r0, #1
 801a652:	3b01      	subs	r3, #1
 801a654:	60a3      	str	r3, [r4, #8]
 801a656:	6823      	ldr	r3, [r4, #0]
 801a658:	1c5a      	adds	r2, r3, #1
 801a65a:	6022      	str	r2, [r4, #0]
 801a65c:	701f      	strb	r7, [r3, #0]
 801a65e:	6963      	ldr	r3, [r4, #20]
 801a660:	4283      	cmp	r3, r0
 801a662:	d004      	beq.n	801a66e <__swbuf_r+0x76>
 801a664:	89a3      	ldrh	r3, [r4, #12]
 801a666:	07db      	lsls	r3, r3, #31
 801a668:	d5e1      	bpl.n	801a62e <__swbuf_r+0x36>
 801a66a:	2d0a      	cmp	r5, #10
 801a66c:	d1df      	bne.n	801a62e <__swbuf_r+0x36>
 801a66e:	0021      	movs	r1, r4
 801a670:	0030      	movs	r0, r6
 801a672:	f001 ff81 	bl	801c578 <_fflush_r>
 801a676:	2800      	cmp	r0, #0
 801a678:	d0d9      	beq.n	801a62e <__swbuf_r+0x36>
 801a67a:	e7d6      	b.n	801a62a <__swbuf_r+0x32>

0801a67c <__swsetup_r>:
 801a67c:	4b2d      	ldr	r3, [pc, #180]	@ (801a734 <__swsetup_r+0xb8>)
 801a67e:	b570      	push	{r4, r5, r6, lr}
 801a680:	0005      	movs	r5, r0
 801a682:	6818      	ldr	r0, [r3, #0]
 801a684:	000c      	movs	r4, r1
 801a686:	2800      	cmp	r0, #0
 801a688:	d004      	beq.n	801a694 <__swsetup_r+0x18>
 801a68a:	6a03      	ldr	r3, [r0, #32]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d101      	bne.n	801a694 <__swsetup_r+0x18>
 801a690:	f7ff fe50 	bl	801a334 <__sinit>
 801a694:	220c      	movs	r2, #12
 801a696:	5ea3      	ldrsh	r3, [r4, r2]
 801a698:	071a      	lsls	r2, r3, #28
 801a69a:	d423      	bmi.n	801a6e4 <__swsetup_r+0x68>
 801a69c:	06da      	lsls	r2, r3, #27
 801a69e:	d407      	bmi.n	801a6b0 <__swsetup_r+0x34>
 801a6a0:	2209      	movs	r2, #9
 801a6a2:	602a      	str	r2, [r5, #0]
 801a6a4:	2240      	movs	r2, #64	@ 0x40
 801a6a6:	2001      	movs	r0, #1
 801a6a8:	4313      	orrs	r3, r2
 801a6aa:	81a3      	strh	r3, [r4, #12]
 801a6ac:	4240      	negs	r0, r0
 801a6ae:	e03a      	b.n	801a726 <__swsetup_r+0xaa>
 801a6b0:	075b      	lsls	r3, r3, #29
 801a6b2:	d513      	bpl.n	801a6dc <__swsetup_r+0x60>
 801a6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a6b6:	2900      	cmp	r1, #0
 801a6b8:	d008      	beq.n	801a6cc <__swsetup_r+0x50>
 801a6ba:	0023      	movs	r3, r4
 801a6bc:	3344      	adds	r3, #68	@ 0x44
 801a6be:	4299      	cmp	r1, r3
 801a6c0:	d002      	beq.n	801a6c8 <__swsetup_r+0x4c>
 801a6c2:	0028      	movs	r0, r5
 801a6c4:	f000 ff8e 	bl	801b5e4 <_free_r>
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	6363      	str	r3, [r4, #52]	@ 0x34
 801a6cc:	2224      	movs	r2, #36	@ 0x24
 801a6ce:	89a3      	ldrh	r3, [r4, #12]
 801a6d0:	4393      	bics	r3, r2
 801a6d2:	81a3      	strh	r3, [r4, #12]
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	6063      	str	r3, [r4, #4]
 801a6d8:	6923      	ldr	r3, [r4, #16]
 801a6da:	6023      	str	r3, [r4, #0]
 801a6dc:	2308      	movs	r3, #8
 801a6de:	89a2      	ldrh	r2, [r4, #12]
 801a6e0:	4313      	orrs	r3, r2
 801a6e2:	81a3      	strh	r3, [r4, #12]
 801a6e4:	6923      	ldr	r3, [r4, #16]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d10b      	bne.n	801a702 <__swsetup_r+0x86>
 801a6ea:	21a0      	movs	r1, #160	@ 0xa0
 801a6ec:	2280      	movs	r2, #128	@ 0x80
 801a6ee:	89a3      	ldrh	r3, [r4, #12]
 801a6f0:	0089      	lsls	r1, r1, #2
 801a6f2:	0092      	lsls	r2, r2, #2
 801a6f4:	400b      	ands	r3, r1
 801a6f6:	4293      	cmp	r3, r2
 801a6f8:	d003      	beq.n	801a702 <__swsetup_r+0x86>
 801a6fa:	0021      	movs	r1, r4
 801a6fc:	0028      	movs	r0, r5
 801a6fe:	f001 ff91 	bl	801c624 <__smakebuf_r>
 801a702:	220c      	movs	r2, #12
 801a704:	5ea3      	ldrsh	r3, [r4, r2]
 801a706:	2101      	movs	r1, #1
 801a708:	001a      	movs	r2, r3
 801a70a:	400a      	ands	r2, r1
 801a70c:	420b      	tst	r3, r1
 801a70e:	d00b      	beq.n	801a728 <__swsetup_r+0xac>
 801a710:	2200      	movs	r2, #0
 801a712:	60a2      	str	r2, [r4, #8]
 801a714:	6962      	ldr	r2, [r4, #20]
 801a716:	4252      	negs	r2, r2
 801a718:	61a2      	str	r2, [r4, #24]
 801a71a:	2000      	movs	r0, #0
 801a71c:	6922      	ldr	r2, [r4, #16]
 801a71e:	4282      	cmp	r2, r0
 801a720:	d101      	bne.n	801a726 <__swsetup_r+0xaa>
 801a722:	061a      	lsls	r2, r3, #24
 801a724:	d4be      	bmi.n	801a6a4 <__swsetup_r+0x28>
 801a726:	bd70      	pop	{r4, r5, r6, pc}
 801a728:	0799      	lsls	r1, r3, #30
 801a72a:	d400      	bmi.n	801a72e <__swsetup_r+0xb2>
 801a72c:	6962      	ldr	r2, [r4, #20]
 801a72e:	60a2      	str	r2, [r4, #8]
 801a730:	e7f3      	b.n	801a71a <__swsetup_r+0x9e>
 801a732:	46c0      	nop			@ (mov r8, r8)
 801a734:	200002cc 	.word	0x200002cc

0801a738 <memcmp>:
 801a738:	b530      	push	{r4, r5, lr}
 801a73a:	2400      	movs	r4, #0
 801a73c:	3901      	subs	r1, #1
 801a73e:	42a2      	cmp	r2, r4
 801a740:	d101      	bne.n	801a746 <memcmp+0xe>
 801a742:	2000      	movs	r0, #0
 801a744:	e005      	b.n	801a752 <memcmp+0x1a>
 801a746:	5d03      	ldrb	r3, [r0, r4]
 801a748:	3401      	adds	r4, #1
 801a74a:	5d0d      	ldrb	r5, [r1, r4]
 801a74c:	42ab      	cmp	r3, r5
 801a74e:	d0f6      	beq.n	801a73e <memcmp+0x6>
 801a750:	1b58      	subs	r0, r3, r5
 801a752:	bd30      	pop	{r4, r5, pc}

0801a754 <memset>:
 801a754:	0003      	movs	r3, r0
 801a756:	1882      	adds	r2, r0, r2
 801a758:	4293      	cmp	r3, r2
 801a75a:	d100      	bne.n	801a75e <memset+0xa>
 801a75c:	4770      	bx	lr
 801a75e:	7019      	strb	r1, [r3, #0]
 801a760:	3301      	adds	r3, #1
 801a762:	e7f9      	b.n	801a758 <memset+0x4>

0801a764 <strcat>:
 801a764:	0002      	movs	r2, r0
 801a766:	b510      	push	{r4, lr}
 801a768:	7813      	ldrb	r3, [r2, #0]
 801a76a:	0014      	movs	r4, r2
 801a76c:	3201      	adds	r2, #1
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d1fa      	bne.n	801a768 <strcat+0x4>
 801a772:	5cca      	ldrb	r2, [r1, r3]
 801a774:	54e2      	strb	r2, [r4, r3]
 801a776:	3301      	adds	r3, #1
 801a778:	2a00      	cmp	r2, #0
 801a77a:	d1fa      	bne.n	801a772 <strcat+0xe>
 801a77c:	bd10      	pop	{r4, pc}

0801a77e <strchr>:
 801a77e:	b2c9      	uxtb	r1, r1
 801a780:	7803      	ldrb	r3, [r0, #0]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d004      	beq.n	801a790 <strchr+0x12>
 801a786:	428b      	cmp	r3, r1
 801a788:	d100      	bne.n	801a78c <strchr+0xe>
 801a78a:	4770      	bx	lr
 801a78c:	3001      	adds	r0, #1
 801a78e:	e7f7      	b.n	801a780 <strchr+0x2>
 801a790:	424b      	negs	r3, r1
 801a792:	4159      	adcs	r1, r3
 801a794:	4249      	negs	r1, r1
 801a796:	4008      	ands	r0, r1
 801a798:	e7f7      	b.n	801a78a <strchr+0xc>

0801a79a <strncpy>:
 801a79a:	0003      	movs	r3, r0
 801a79c:	b530      	push	{r4, r5, lr}
 801a79e:	001d      	movs	r5, r3
 801a7a0:	2a00      	cmp	r2, #0
 801a7a2:	d006      	beq.n	801a7b2 <strncpy+0x18>
 801a7a4:	780c      	ldrb	r4, [r1, #0]
 801a7a6:	3a01      	subs	r2, #1
 801a7a8:	3301      	adds	r3, #1
 801a7aa:	702c      	strb	r4, [r5, #0]
 801a7ac:	3101      	adds	r1, #1
 801a7ae:	2c00      	cmp	r4, #0
 801a7b0:	d1f5      	bne.n	801a79e <strncpy+0x4>
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	189a      	adds	r2, r3, r2
 801a7b6:	4293      	cmp	r3, r2
 801a7b8:	d100      	bne.n	801a7bc <strncpy+0x22>
 801a7ba:	bd30      	pop	{r4, r5, pc}
 801a7bc:	7019      	strb	r1, [r3, #0]
 801a7be:	3301      	adds	r3, #1
 801a7c0:	e7f9      	b.n	801a7b6 <strncpy+0x1c>
	...

0801a7c4 <_localeconv_r>:
 801a7c4:	4800      	ldr	r0, [pc, #0]	@ (801a7c8 <_localeconv_r+0x4>)
 801a7c6:	4770      	bx	lr
 801a7c8:	2000040c 	.word	0x2000040c

0801a7cc <_close_r>:
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	b570      	push	{r4, r5, r6, lr}
 801a7d0:	4d06      	ldr	r5, [pc, #24]	@ (801a7ec <_close_r+0x20>)
 801a7d2:	0004      	movs	r4, r0
 801a7d4:	0008      	movs	r0, r1
 801a7d6:	602b      	str	r3, [r5, #0]
 801a7d8:	f7f0 f940 	bl	800aa5c <_close>
 801a7dc:	1c43      	adds	r3, r0, #1
 801a7de:	d103      	bne.n	801a7e8 <_close_r+0x1c>
 801a7e0:	682b      	ldr	r3, [r5, #0]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d000      	beq.n	801a7e8 <_close_r+0x1c>
 801a7e6:	6023      	str	r3, [r4, #0]
 801a7e8:	bd70      	pop	{r4, r5, r6, pc}
 801a7ea:	46c0      	nop			@ (mov r8, r8)
 801a7ec:	200067ec 	.word	0x200067ec

0801a7f0 <_lseek_r>:
 801a7f0:	b570      	push	{r4, r5, r6, lr}
 801a7f2:	0004      	movs	r4, r0
 801a7f4:	0008      	movs	r0, r1
 801a7f6:	0011      	movs	r1, r2
 801a7f8:	001a      	movs	r2, r3
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	4d05      	ldr	r5, [pc, #20]	@ (801a814 <_lseek_r+0x24>)
 801a7fe:	602b      	str	r3, [r5, #0]
 801a800:	f7f0 f936 	bl	800aa70 <_lseek>
 801a804:	1c43      	adds	r3, r0, #1
 801a806:	d103      	bne.n	801a810 <_lseek_r+0x20>
 801a808:	682b      	ldr	r3, [r5, #0]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d000      	beq.n	801a810 <_lseek_r+0x20>
 801a80e:	6023      	str	r3, [r4, #0]
 801a810:	bd70      	pop	{r4, r5, r6, pc}
 801a812:	46c0      	nop			@ (mov r8, r8)
 801a814:	200067ec 	.word	0x200067ec

0801a818 <_read_r>:
 801a818:	b570      	push	{r4, r5, r6, lr}
 801a81a:	0004      	movs	r4, r0
 801a81c:	0008      	movs	r0, r1
 801a81e:	0011      	movs	r1, r2
 801a820:	001a      	movs	r2, r3
 801a822:	2300      	movs	r3, #0
 801a824:	4d05      	ldr	r5, [pc, #20]	@ (801a83c <_read_r+0x24>)
 801a826:	602b      	str	r3, [r5, #0]
 801a828:	f7f0 f8fe 	bl	800aa28 <_read>
 801a82c:	1c43      	adds	r3, r0, #1
 801a82e:	d103      	bne.n	801a838 <_read_r+0x20>
 801a830:	682b      	ldr	r3, [r5, #0]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d000      	beq.n	801a838 <_read_r+0x20>
 801a836:	6023      	str	r3, [r4, #0]
 801a838:	bd70      	pop	{r4, r5, r6, pc}
 801a83a:	46c0      	nop			@ (mov r8, r8)
 801a83c:	200067ec 	.word	0x200067ec

0801a840 <_write_r>:
 801a840:	b570      	push	{r4, r5, r6, lr}
 801a842:	0004      	movs	r4, r0
 801a844:	0008      	movs	r0, r1
 801a846:	0011      	movs	r1, r2
 801a848:	001a      	movs	r2, r3
 801a84a:	2300      	movs	r3, #0
 801a84c:	4d05      	ldr	r5, [pc, #20]	@ (801a864 <_write_r+0x24>)
 801a84e:	602b      	str	r3, [r5, #0]
 801a850:	f7f0 f8f7 	bl	800aa42 <_write>
 801a854:	1c43      	adds	r3, r0, #1
 801a856:	d103      	bne.n	801a860 <_write_r+0x20>
 801a858:	682b      	ldr	r3, [r5, #0]
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d000      	beq.n	801a860 <_write_r+0x20>
 801a85e:	6023      	str	r3, [r4, #0]
 801a860:	bd70      	pop	{r4, r5, r6, pc}
 801a862:	46c0      	nop			@ (mov r8, r8)
 801a864:	200067ec 	.word	0x200067ec

0801a868 <__errno>:
 801a868:	4b01      	ldr	r3, [pc, #4]	@ (801a870 <__errno+0x8>)
 801a86a:	6818      	ldr	r0, [r3, #0]
 801a86c:	4770      	bx	lr
 801a86e:	46c0      	nop			@ (mov r8, r8)
 801a870:	200002cc 	.word	0x200002cc

0801a874 <__libc_init_array>:
 801a874:	b570      	push	{r4, r5, r6, lr}
 801a876:	2600      	movs	r6, #0
 801a878:	4c0c      	ldr	r4, [pc, #48]	@ (801a8ac <__libc_init_array+0x38>)
 801a87a:	4d0d      	ldr	r5, [pc, #52]	@ (801a8b0 <__libc_init_array+0x3c>)
 801a87c:	1b64      	subs	r4, r4, r5
 801a87e:	10a4      	asrs	r4, r4, #2
 801a880:	42a6      	cmp	r6, r4
 801a882:	d109      	bne.n	801a898 <__libc_init_array+0x24>
 801a884:	2600      	movs	r6, #0
 801a886:	f002 f9e1 	bl	801cc4c <_init>
 801a88a:	4c0a      	ldr	r4, [pc, #40]	@ (801a8b4 <__libc_init_array+0x40>)
 801a88c:	4d0a      	ldr	r5, [pc, #40]	@ (801a8b8 <__libc_init_array+0x44>)
 801a88e:	1b64      	subs	r4, r4, r5
 801a890:	10a4      	asrs	r4, r4, #2
 801a892:	42a6      	cmp	r6, r4
 801a894:	d105      	bne.n	801a8a2 <__libc_init_array+0x2e>
 801a896:	bd70      	pop	{r4, r5, r6, pc}
 801a898:	00b3      	lsls	r3, r6, #2
 801a89a:	58eb      	ldr	r3, [r5, r3]
 801a89c:	4798      	blx	r3
 801a89e:	3601      	adds	r6, #1
 801a8a0:	e7ee      	b.n	801a880 <__libc_init_array+0xc>
 801a8a2:	00b3      	lsls	r3, r6, #2
 801a8a4:	58eb      	ldr	r3, [r5, r3]
 801a8a6:	4798      	blx	r3
 801a8a8:	3601      	adds	r6, #1
 801a8aa:	e7f2      	b.n	801a892 <__libc_init_array+0x1e>
 801a8ac:	080209c4 	.word	0x080209c4
 801a8b0:	080209c4 	.word	0x080209c4
 801a8b4:	080209c8 	.word	0x080209c8
 801a8b8:	080209c4 	.word	0x080209c4

0801a8bc <__retarget_lock_init_recursive>:
 801a8bc:	4770      	bx	lr

0801a8be <__retarget_lock_acquire_recursive>:
 801a8be:	4770      	bx	lr

0801a8c0 <__retarget_lock_release_recursive>:
 801a8c0:	4770      	bx	lr

0801a8c2 <strcpy>:
 801a8c2:	0003      	movs	r3, r0
 801a8c4:	780a      	ldrb	r2, [r1, #0]
 801a8c6:	3101      	adds	r1, #1
 801a8c8:	701a      	strb	r2, [r3, #0]
 801a8ca:	3301      	adds	r3, #1
 801a8cc:	2a00      	cmp	r2, #0
 801a8ce:	d1f9      	bne.n	801a8c4 <strcpy+0x2>
 801a8d0:	4770      	bx	lr

0801a8d2 <memchr>:
 801a8d2:	b2c9      	uxtb	r1, r1
 801a8d4:	1882      	adds	r2, r0, r2
 801a8d6:	4290      	cmp	r0, r2
 801a8d8:	d101      	bne.n	801a8de <memchr+0xc>
 801a8da:	2000      	movs	r0, #0
 801a8dc:	4770      	bx	lr
 801a8de:	7803      	ldrb	r3, [r0, #0]
 801a8e0:	428b      	cmp	r3, r1
 801a8e2:	d0fb      	beq.n	801a8dc <memchr+0xa>
 801a8e4:	3001      	adds	r0, #1
 801a8e6:	e7f6      	b.n	801a8d6 <memchr+0x4>

0801a8e8 <memcpy>:
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	b510      	push	{r4, lr}
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	d100      	bne.n	801a8f2 <memcpy+0xa>
 801a8f0:	bd10      	pop	{r4, pc}
 801a8f2:	5ccc      	ldrb	r4, [r1, r3]
 801a8f4:	54c4      	strb	r4, [r0, r3]
 801a8f6:	3301      	adds	r3, #1
 801a8f8:	e7f8      	b.n	801a8ec <memcpy+0x4>

0801a8fa <quorem>:
 801a8fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8fc:	6903      	ldr	r3, [r0, #16]
 801a8fe:	690c      	ldr	r4, [r1, #16]
 801a900:	b089      	sub	sp, #36	@ 0x24
 801a902:	9003      	str	r0, [sp, #12]
 801a904:	9106      	str	r1, [sp, #24]
 801a906:	2000      	movs	r0, #0
 801a908:	42a3      	cmp	r3, r4
 801a90a:	db63      	blt.n	801a9d4 <quorem+0xda>
 801a90c:	000b      	movs	r3, r1
 801a90e:	3c01      	subs	r4, #1
 801a910:	3314      	adds	r3, #20
 801a912:	00a5      	lsls	r5, r4, #2
 801a914:	9304      	str	r3, [sp, #16]
 801a916:	195b      	adds	r3, r3, r5
 801a918:	9305      	str	r3, [sp, #20]
 801a91a:	9b03      	ldr	r3, [sp, #12]
 801a91c:	3314      	adds	r3, #20
 801a91e:	9301      	str	r3, [sp, #4]
 801a920:	195d      	adds	r5, r3, r5
 801a922:	9b05      	ldr	r3, [sp, #20]
 801a924:	682f      	ldr	r7, [r5, #0]
 801a926:	681e      	ldr	r6, [r3, #0]
 801a928:	0038      	movs	r0, r7
 801a92a:	3601      	adds	r6, #1
 801a92c:	0031      	movs	r1, r6
 801a92e:	f7e5 fc1b 	bl	8000168 <__udivsi3>
 801a932:	9002      	str	r0, [sp, #8]
 801a934:	42b7      	cmp	r7, r6
 801a936:	d327      	bcc.n	801a988 <quorem+0x8e>
 801a938:	9b04      	ldr	r3, [sp, #16]
 801a93a:	2700      	movs	r7, #0
 801a93c:	469c      	mov	ip, r3
 801a93e:	9e01      	ldr	r6, [sp, #4]
 801a940:	9707      	str	r7, [sp, #28]
 801a942:	4662      	mov	r2, ip
 801a944:	ca08      	ldmia	r2!, {r3}
 801a946:	6830      	ldr	r0, [r6, #0]
 801a948:	4694      	mov	ip, r2
 801a94a:	9a02      	ldr	r2, [sp, #8]
 801a94c:	b299      	uxth	r1, r3
 801a94e:	4351      	muls	r1, r2
 801a950:	0c1b      	lsrs	r3, r3, #16
 801a952:	4353      	muls	r3, r2
 801a954:	19c9      	adds	r1, r1, r7
 801a956:	0c0a      	lsrs	r2, r1, #16
 801a958:	189b      	adds	r3, r3, r2
 801a95a:	b289      	uxth	r1, r1
 801a95c:	b282      	uxth	r2, r0
 801a95e:	1a52      	subs	r2, r2, r1
 801a960:	9907      	ldr	r1, [sp, #28]
 801a962:	0c1f      	lsrs	r7, r3, #16
 801a964:	1852      	adds	r2, r2, r1
 801a966:	0c00      	lsrs	r0, r0, #16
 801a968:	b29b      	uxth	r3, r3
 801a96a:	1411      	asrs	r1, r2, #16
 801a96c:	1ac3      	subs	r3, r0, r3
 801a96e:	185b      	adds	r3, r3, r1
 801a970:	1419      	asrs	r1, r3, #16
 801a972:	b292      	uxth	r2, r2
 801a974:	041b      	lsls	r3, r3, #16
 801a976:	431a      	orrs	r2, r3
 801a978:	9b05      	ldr	r3, [sp, #20]
 801a97a:	9107      	str	r1, [sp, #28]
 801a97c:	c604      	stmia	r6!, {r2}
 801a97e:	4563      	cmp	r3, ip
 801a980:	d2df      	bcs.n	801a942 <quorem+0x48>
 801a982:	682b      	ldr	r3, [r5, #0]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d02b      	beq.n	801a9e0 <quorem+0xe6>
 801a988:	9906      	ldr	r1, [sp, #24]
 801a98a:	9803      	ldr	r0, [sp, #12]
 801a98c:	f001 f9b6 	bl	801bcfc <__mcmp>
 801a990:	2800      	cmp	r0, #0
 801a992:	db1e      	blt.n	801a9d2 <quorem+0xd8>
 801a994:	2600      	movs	r6, #0
 801a996:	9d01      	ldr	r5, [sp, #4]
 801a998:	9904      	ldr	r1, [sp, #16]
 801a99a:	c901      	ldmia	r1!, {r0}
 801a99c:	682b      	ldr	r3, [r5, #0]
 801a99e:	b287      	uxth	r7, r0
 801a9a0:	b29a      	uxth	r2, r3
 801a9a2:	1bd2      	subs	r2, r2, r7
 801a9a4:	1992      	adds	r2, r2, r6
 801a9a6:	0c00      	lsrs	r0, r0, #16
 801a9a8:	0c1b      	lsrs	r3, r3, #16
 801a9aa:	1a1b      	subs	r3, r3, r0
 801a9ac:	1410      	asrs	r0, r2, #16
 801a9ae:	181b      	adds	r3, r3, r0
 801a9b0:	141e      	asrs	r6, r3, #16
 801a9b2:	b292      	uxth	r2, r2
 801a9b4:	041b      	lsls	r3, r3, #16
 801a9b6:	431a      	orrs	r2, r3
 801a9b8:	9b05      	ldr	r3, [sp, #20]
 801a9ba:	c504      	stmia	r5!, {r2}
 801a9bc:	428b      	cmp	r3, r1
 801a9be:	d2ec      	bcs.n	801a99a <quorem+0xa0>
 801a9c0:	9a01      	ldr	r2, [sp, #4]
 801a9c2:	00a3      	lsls	r3, r4, #2
 801a9c4:	18d3      	adds	r3, r2, r3
 801a9c6:	681a      	ldr	r2, [r3, #0]
 801a9c8:	2a00      	cmp	r2, #0
 801a9ca:	d014      	beq.n	801a9f6 <quorem+0xfc>
 801a9cc:	9b02      	ldr	r3, [sp, #8]
 801a9ce:	3301      	adds	r3, #1
 801a9d0:	9302      	str	r3, [sp, #8]
 801a9d2:	9802      	ldr	r0, [sp, #8]
 801a9d4:	b009      	add	sp, #36	@ 0x24
 801a9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9d8:	682b      	ldr	r3, [r5, #0]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d104      	bne.n	801a9e8 <quorem+0xee>
 801a9de:	3c01      	subs	r4, #1
 801a9e0:	9b01      	ldr	r3, [sp, #4]
 801a9e2:	3d04      	subs	r5, #4
 801a9e4:	42ab      	cmp	r3, r5
 801a9e6:	d3f7      	bcc.n	801a9d8 <quorem+0xde>
 801a9e8:	9b03      	ldr	r3, [sp, #12]
 801a9ea:	611c      	str	r4, [r3, #16]
 801a9ec:	e7cc      	b.n	801a988 <quorem+0x8e>
 801a9ee:	681a      	ldr	r2, [r3, #0]
 801a9f0:	2a00      	cmp	r2, #0
 801a9f2:	d104      	bne.n	801a9fe <quorem+0x104>
 801a9f4:	3c01      	subs	r4, #1
 801a9f6:	9a01      	ldr	r2, [sp, #4]
 801a9f8:	3b04      	subs	r3, #4
 801a9fa:	429a      	cmp	r2, r3
 801a9fc:	d3f7      	bcc.n	801a9ee <quorem+0xf4>
 801a9fe:	9b03      	ldr	r3, [sp, #12]
 801aa00:	611c      	str	r4, [r3, #16]
 801aa02:	e7e3      	b.n	801a9cc <quorem+0xd2>

0801aa04 <_dtoa_r>:
 801aa04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa06:	0014      	movs	r4, r2
 801aa08:	001d      	movs	r5, r3
 801aa0a:	69c6      	ldr	r6, [r0, #28]
 801aa0c:	b09d      	sub	sp, #116	@ 0x74
 801aa0e:	940a      	str	r4, [sp, #40]	@ 0x28
 801aa10:	950b      	str	r5, [sp, #44]	@ 0x2c
 801aa12:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801aa14:	9003      	str	r0, [sp, #12]
 801aa16:	2e00      	cmp	r6, #0
 801aa18:	d10f      	bne.n	801aa3a <_dtoa_r+0x36>
 801aa1a:	2010      	movs	r0, #16
 801aa1c:	f000 fe2c 	bl	801b678 <malloc>
 801aa20:	9b03      	ldr	r3, [sp, #12]
 801aa22:	1e02      	subs	r2, r0, #0
 801aa24:	61d8      	str	r0, [r3, #28]
 801aa26:	d104      	bne.n	801aa32 <_dtoa_r+0x2e>
 801aa28:	21ef      	movs	r1, #239	@ 0xef
 801aa2a:	4bc7      	ldr	r3, [pc, #796]	@ (801ad48 <_dtoa_r+0x344>)
 801aa2c:	48c7      	ldr	r0, [pc, #796]	@ (801ad4c <_dtoa_r+0x348>)
 801aa2e:	f001 feb9 	bl	801c7a4 <__assert_func>
 801aa32:	6046      	str	r6, [r0, #4]
 801aa34:	6086      	str	r6, [r0, #8]
 801aa36:	6006      	str	r6, [r0, #0]
 801aa38:	60c6      	str	r6, [r0, #12]
 801aa3a:	9b03      	ldr	r3, [sp, #12]
 801aa3c:	69db      	ldr	r3, [r3, #28]
 801aa3e:	6819      	ldr	r1, [r3, #0]
 801aa40:	2900      	cmp	r1, #0
 801aa42:	d00b      	beq.n	801aa5c <_dtoa_r+0x58>
 801aa44:	685a      	ldr	r2, [r3, #4]
 801aa46:	2301      	movs	r3, #1
 801aa48:	4093      	lsls	r3, r2
 801aa4a:	604a      	str	r2, [r1, #4]
 801aa4c:	608b      	str	r3, [r1, #8]
 801aa4e:	9803      	ldr	r0, [sp, #12]
 801aa50:	f000 ff12 	bl	801b878 <_Bfree>
 801aa54:	2200      	movs	r2, #0
 801aa56:	9b03      	ldr	r3, [sp, #12]
 801aa58:	69db      	ldr	r3, [r3, #28]
 801aa5a:	601a      	str	r2, [r3, #0]
 801aa5c:	2d00      	cmp	r5, #0
 801aa5e:	da1e      	bge.n	801aa9e <_dtoa_r+0x9a>
 801aa60:	2301      	movs	r3, #1
 801aa62:	603b      	str	r3, [r7, #0]
 801aa64:	006b      	lsls	r3, r5, #1
 801aa66:	085b      	lsrs	r3, r3, #1
 801aa68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa6a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801aa6c:	4bb8      	ldr	r3, [pc, #736]	@ (801ad50 <_dtoa_r+0x34c>)
 801aa6e:	4ab8      	ldr	r2, [pc, #736]	@ (801ad50 <_dtoa_r+0x34c>)
 801aa70:	403b      	ands	r3, r7
 801aa72:	4293      	cmp	r3, r2
 801aa74:	d116      	bne.n	801aaa4 <_dtoa_r+0xa0>
 801aa76:	4bb7      	ldr	r3, [pc, #732]	@ (801ad54 <_dtoa_r+0x350>)
 801aa78:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801aa7a:	6013      	str	r3, [r2, #0]
 801aa7c:	033b      	lsls	r3, r7, #12
 801aa7e:	0b1b      	lsrs	r3, r3, #12
 801aa80:	4323      	orrs	r3, r4
 801aa82:	d101      	bne.n	801aa88 <_dtoa_r+0x84>
 801aa84:	f000 fd80 	bl	801b588 <_dtoa_r+0xb84>
 801aa88:	4bb3      	ldr	r3, [pc, #716]	@ (801ad58 <_dtoa_r+0x354>)
 801aa8a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801aa8c:	9308      	str	r3, [sp, #32]
 801aa8e:	2a00      	cmp	r2, #0
 801aa90:	d002      	beq.n	801aa98 <_dtoa_r+0x94>
 801aa92:	4bb2      	ldr	r3, [pc, #712]	@ (801ad5c <_dtoa_r+0x358>)
 801aa94:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801aa96:	6013      	str	r3, [r2, #0]
 801aa98:	9808      	ldr	r0, [sp, #32]
 801aa9a:	b01d      	add	sp, #116	@ 0x74
 801aa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	603b      	str	r3, [r7, #0]
 801aaa2:	e7e2      	b.n	801aa6a <_dtoa_r+0x66>
 801aaa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aaa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aaa8:	9212      	str	r2, [sp, #72]	@ 0x48
 801aaaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aaac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801aaae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801aab0:	2200      	movs	r2, #0
 801aab2:	2300      	movs	r3, #0
 801aab4:	f7e5 fcde 	bl	8000474 <__aeabi_dcmpeq>
 801aab8:	1e06      	subs	r6, r0, #0
 801aaba:	d00b      	beq.n	801aad4 <_dtoa_r+0xd0>
 801aabc:	2301      	movs	r3, #1
 801aabe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801aac0:	6013      	str	r3, [r2, #0]
 801aac2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d002      	beq.n	801aace <_dtoa_r+0xca>
 801aac8:	4ba5      	ldr	r3, [pc, #660]	@ (801ad60 <_dtoa_r+0x35c>)
 801aaca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801aacc:	6013      	str	r3, [r2, #0]
 801aace:	4ba5      	ldr	r3, [pc, #660]	@ (801ad64 <_dtoa_r+0x360>)
 801aad0:	9308      	str	r3, [sp, #32]
 801aad2:	e7e1      	b.n	801aa98 <_dtoa_r+0x94>
 801aad4:	ab1a      	add	r3, sp, #104	@ 0x68
 801aad6:	9301      	str	r3, [sp, #4]
 801aad8:	ab1b      	add	r3, sp, #108	@ 0x6c
 801aada:	9300      	str	r3, [sp, #0]
 801aadc:	9803      	ldr	r0, [sp, #12]
 801aade:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aae0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801aae2:	f001 f9c1 	bl	801be68 <__d2b>
 801aae6:	007a      	lsls	r2, r7, #1
 801aae8:	9005      	str	r0, [sp, #20]
 801aaea:	0d52      	lsrs	r2, r2, #21
 801aaec:	d100      	bne.n	801aaf0 <_dtoa_r+0xec>
 801aaee:	e07b      	b.n	801abe8 <_dtoa_r+0x1e4>
 801aaf0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801aaf2:	9618      	str	r6, [sp, #96]	@ 0x60
 801aaf4:	0319      	lsls	r1, r3, #12
 801aaf6:	4b9c      	ldr	r3, [pc, #624]	@ (801ad68 <_dtoa_r+0x364>)
 801aaf8:	0b09      	lsrs	r1, r1, #12
 801aafa:	430b      	orrs	r3, r1
 801aafc:	499b      	ldr	r1, [pc, #620]	@ (801ad6c <_dtoa_r+0x368>)
 801aafe:	1857      	adds	r7, r2, r1
 801ab00:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ab02:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ab04:	0019      	movs	r1, r3
 801ab06:	2200      	movs	r2, #0
 801ab08:	4b99      	ldr	r3, [pc, #612]	@ (801ad70 <_dtoa_r+0x36c>)
 801ab0a:	f7e8 f98b 	bl	8002e24 <__aeabi_dsub>
 801ab0e:	4a99      	ldr	r2, [pc, #612]	@ (801ad74 <_dtoa_r+0x370>)
 801ab10:	4b99      	ldr	r3, [pc, #612]	@ (801ad78 <_dtoa_r+0x374>)
 801ab12:	f7e7 fea1 	bl	8002858 <__aeabi_dmul>
 801ab16:	4a99      	ldr	r2, [pc, #612]	@ (801ad7c <_dtoa_r+0x378>)
 801ab18:	4b99      	ldr	r3, [pc, #612]	@ (801ad80 <_dtoa_r+0x37c>)
 801ab1a:	f7e6 fe9d 	bl	8001858 <__aeabi_dadd>
 801ab1e:	0004      	movs	r4, r0
 801ab20:	0038      	movs	r0, r7
 801ab22:	000d      	movs	r5, r1
 801ab24:	f7e8 fde6 	bl	80036f4 <__aeabi_i2d>
 801ab28:	4a96      	ldr	r2, [pc, #600]	@ (801ad84 <_dtoa_r+0x380>)
 801ab2a:	4b97      	ldr	r3, [pc, #604]	@ (801ad88 <_dtoa_r+0x384>)
 801ab2c:	f7e7 fe94 	bl	8002858 <__aeabi_dmul>
 801ab30:	0002      	movs	r2, r0
 801ab32:	000b      	movs	r3, r1
 801ab34:	0020      	movs	r0, r4
 801ab36:	0029      	movs	r1, r5
 801ab38:	f7e6 fe8e 	bl	8001858 <__aeabi_dadd>
 801ab3c:	0004      	movs	r4, r0
 801ab3e:	000d      	movs	r5, r1
 801ab40:	f7e8 fd9c 	bl	800367c <__aeabi_d2iz>
 801ab44:	2200      	movs	r2, #0
 801ab46:	9004      	str	r0, [sp, #16]
 801ab48:	2300      	movs	r3, #0
 801ab4a:	0020      	movs	r0, r4
 801ab4c:	0029      	movs	r1, r5
 801ab4e:	f7e5 fc97 	bl	8000480 <__aeabi_dcmplt>
 801ab52:	2800      	cmp	r0, #0
 801ab54:	d00b      	beq.n	801ab6e <_dtoa_r+0x16a>
 801ab56:	9804      	ldr	r0, [sp, #16]
 801ab58:	f7e8 fdcc 	bl	80036f4 <__aeabi_i2d>
 801ab5c:	002b      	movs	r3, r5
 801ab5e:	0022      	movs	r2, r4
 801ab60:	f7e5 fc88 	bl	8000474 <__aeabi_dcmpeq>
 801ab64:	4243      	negs	r3, r0
 801ab66:	4158      	adcs	r0, r3
 801ab68:	9b04      	ldr	r3, [sp, #16]
 801ab6a:	1a1b      	subs	r3, r3, r0
 801ab6c:	9304      	str	r3, [sp, #16]
 801ab6e:	2301      	movs	r3, #1
 801ab70:	9315      	str	r3, [sp, #84]	@ 0x54
 801ab72:	9b04      	ldr	r3, [sp, #16]
 801ab74:	2b16      	cmp	r3, #22
 801ab76:	d810      	bhi.n	801ab9a <_dtoa_r+0x196>
 801ab78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ab7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ab7c:	9a04      	ldr	r2, [sp, #16]
 801ab7e:	4b83      	ldr	r3, [pc, #524]	@ (801ad8c <_dtoa_r+0x388>)
 801ab80:	00d2      	lsls	r2, r2, #3
 801ab82:	189b      	adds	r3, r3, r2
 801ab84:	681a      	ldr	r2, [r3, #0]
 801ab86:	685b      	ldr	r3, [r3, #4]
 801ab88:	f7e5 fc7a 	bl	8000480 <__aeabi_dcmplt>
 801ab8c:	2800      	cmp	r0, #0
 801ab8e:	d047      	beq.n	801ac20 <_dtoa_r+0x21c>
 801ab90:	9b04      	ldr	r3, [sp, #16]
 801ab92:	3b01      	subs	r3, #1
 801ab94:	9304      	str	r3, [sp, #16]
 801ab96:	2300      	movs	r3, #0
 801ab98:	9315      	str	r3, [sp, #84]	@ 0x54
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ab9e:	9206      	str	r2, [sp, #24]
 801aba0:	1bdb      	subs	r3, r3, r7
 801aba2:	1e5a      	subs	r2, r3, #1
 801aba4:	d53e      	bpl.n	801ac24 <_dtoa_r+0x220>
 801aba6:	2201      	movs	r2, #1
 801aba8:	1ad3      	subs	r3, r2, r3
 801abaa:	9306      	str	r3, [sp, #24]
 801abac:	2300      	movs	r3, #0
 801abae:	930d      	str	r3, [sp, #52]	@ 0x34
 801abb0:	9b04      	ldr	r3, [sp, #16]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	db38      	blt.n	801ac28 <_dtoa_r+0x224>
 801abb6:	9a04      	ldr	r2, [sp, #16]
 801abb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801abba:	4694      	mov	ip, r2
 801abbc:	4463      	add	r3, ip
 801abbe:	930d      	str	r3, [sp, #52]	@ 0x34
 801abc0:	2300      	movs	r3, #0
 801abc2:	9214      	str	r2, [sp, #80]	@ 0x50
 801abc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801abc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801abc8:	2401      	movs	r4, #1
 801abca:	2b09      	cmp	r3, #9
 801abcc:	d862      	bhi.n	801ac94 <_dtoa_r+0x290>
 801abce:	2b05      	cmp	r3, #5
 801abd0:	dd02      	ble.n	801abd8 <_dtoa_r+0x1d4>
 801abd2:	2400      	movs	r4, #0
 801abd4:	3b04      	subs	r3, #4
 801abd6:	9322      	str	r3, [sp, #136]	@ 0x88
 801abd8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801abda:	1e98      	subs	r0, r3, #2
 801abdc:	2803      	cmp	r0, #3
 801abde:	d863      	bhi.n	801aca8 <_dtoa_r+0x2a4>
 801abe0:	f7e5 faa4 	bl	800012c <__gnu_thumb1_case_uqi>
 801abe4:	2b385654 	.word	0x2b385654
 801abe8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801abea:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801abec:	18f6      	adds	r6, r6, r3
 801abee:	4b68      	ldr	r3, [pc, #416]	@ (801ad90 <_dtoa_r+0x38c>)
 801abf0:	18f2      	adds	r2, r6, r3
 801abf2:	2a20      	cmp	r2, #32
 801abf4:	dd0f      	ble.n	801ac16 <_dtoa_r+0x212>
 801abf6:	2340      	movs	r3, #64	@ 0x40
 801abf8:	1a9b      	subs	r3, r3, r2
 801abfa:	409f      	lsls	r7, r3
 801abfc:	4b65      	ldr	r3, [pc, #404]	@ (801ad94 <_dtoa_r+0x390>)
 801abfe:	0038      	movs	r0, r7
 801ac00:	18f3      	adds	r3, r6, r3
 801ac02:	40dc      	lsrs	r4, r3
 801ac04:	4320      	orrs	r0, r4
 801ac06:	f7e8 fda3 	bl	8003750 <__aeabi_ui2d>
 801ac0a:	2201      	movs	r2, #1
 801ac0c:	4b62      	ldr	r3, [pc, #392]	@ (801ad98 <_dtoa_r+0x394>)
 801ac0e:	1e77      	subs	r7, r6, #1
 801ac10:	18cb      	adds	r3, r1, r3
 801ac12:	9218      	str	r2, [sp, #96]	@ 0x60
 801ac14:	e776      	b.n	801ab04 <_dtoa_r+0x100>
 801ac16:	2320      	movs	r3, #32
 801ac18:	0020      	movs	r0, r4
 801ac1a:	1a9b      	subs	r3, r3, r2
 801ac1c:	4098      	lsls	r0, r3
 801ac1e:	e7f2      	b.n	801ac06 <_dtoa_r+0x202>
 801ac20:	9015      	str	r0, [sp, #84]	@ 0x54
 801ac22:	e7ba      	b.n	801ab9a <_dtoa_r+0x196>
 801ac24:	920d      	str	r2, [sp, #52]	@ 0x34
 801ac26:	e7c3      	b.n	801abb0 <_dtoa_r+0x1ac>
 801ac28:	9b06      	ldr	r3, [sp, #24]
 801ac2a:	9a04      	ldr	r2, [sp, #16]
 801ac2c:	1a9b      	subs	r3, r3, r2
 801ac2e:	9306      	str	r3, [sp, #24]
 801ac30:	4253      	negs	r3, r2
 801ac32:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac34:	2300      	movs	r3, #0
 801ac36:	9314      	str	r3, [sp, #80]	@ 0x50
 801ac38:	e7c5      	b.n	801abc6 <_dtoa_r+0x1c2>
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ac3e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ac40:	4694      	mov	ip, r2
 801ac42:	9b04      	ldr	r3, [sp, #16]
 801ac44:	4463      	add	r3, ip
 801ac46:	930e      	str	r3, [sp, #56]	@ 0x38
 801ac48:	3301      	adds	r3, #1
 801ac4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	dc08      	bgt.n	801ac62 <_dtoa_r+0x25e>
 801ac50:	2301      	movs	r3, #1
 801ac52:	e006      	b.n	801ac62 <_dtoa_r+0x25e>
 801ac54:	2301      	movs	r3, #1
 801ac56:	9310      	str	r3, [sp, #64]	@ 0x40
 801ac58:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	dd28      	ble.n	801acb0 <_dtoa_r+0x2ac>
 801ac5e:	930e      	str	r3, [sp, #56]	@ 0x38
 801ac60:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac62:	9a03      	ldr	r2, [sp, #12]
 801ac64:	2100      	movs	r1, #0
 801ac66:	69d0      	ldr	r0, [r2, #28]
 801ac68:	2204      	movs	r2, #4
 801ac6a:	0015      	movs	r5, r2
 801ac6c:	3514      	adds	r5, #20
 801ac6e:	429d      	cmp	r5, r3
 801ac70:	d923      	bls.n	801acba <_dtoa_r+0x2b6>
 801ac72:	6041      	str	r1, [r0, #4]
 801ac74:	9803      	ldr	r0, [sp, #12]
 801ac76:	f000 fdbb 	bl	801b7f0 <_Balloc>
 801ac7a:	9008      	str	r0, [sp, #32]
 801ac7c:	2800      	cmp	r0, #0
 801ac7e:	d11f      	bne.n	801acc0 <_dtoa_r+0x2bc>
 801ac80:	21b0      	movs	r1, #176	@ 0xb0
 801ac82:	4b46      	ldr	r3, [pc, #280]	@ (801ad9c <_dtoa_r+0x398>)
 801ac84:	4831      	ldr	r0, [pc, #196]	@ (801ad4c <_dtoa_r+0x348>)
 801ac86:	9a08      	ldr	r2, [sp, #32]
 801ac88:	31ff      	adds	r1, #255	@ 0xff
 801ac8a:	e6d0      	b.n	801aa2e <_dtoa_r+0x2a>
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	e7e2      	b.n	801ac56 <_dtoa_r+0x252>
 801ac90:	2300      	movs	r3, #0
 801ac92:	e7d3      	b.n	801ac3c <_dtoa_r+0x238>
 801ac94:	2300      	movs	r3, #0
 801ac96:	9410      	str	r4, [sp, #64]	@ 0x40
 801ac98:	9322      	str	r3, [sp, #136]	@ 0x88
 801ac9a:	3b01      	subs	r3, #1
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	930e      	str	r3, [sp, #56]	@ 0x38
 801aca0:	9309      	str	r3, [sp, #36]	@ 0x24
 801aca2:	3313      	adds	r3, #19
 801aca4:	9223      	str	r2, [sp, #140]	@ 0x8c
 801aca6:	e7dc      	b.n	801ac62 <_dtoa_r+0x25e>
 801aca8:	2301      	movs	r3, #1
 801acaa:	9310      	str	r3, [sp, #64]	@ 0x40
 801acac:	3b02      	subs	r3, #2
 801acae:	e7f5      	b.n	801ac9c <_dtoa_r+0x298>
 801acb0:	2301      	movs	r3, #1
 801acb2:	001a      	movs	r2, r3
 801acb4:	930e      	str	r3, [sp, #56]	@ 0x38
 801acb6:	9309      	str	r3, [sp, #36]	@ 0x24
 801acb8:	e7f4      	b.n	801aca4 <_dtoa_r+0x2a0>
 801acba:	3101      	adds	r1, #1
 801acbc:	0052      	lsls	r2, r2, #1
 801acbe:	e7d4      	b.n	801ac6a <_dtoa_r+0x266>
 801acc0:	9b03      	ldr	r3, [sp, #12]
 801acc2:	9a08      	ldr	r2, [sp, #32]
 801acc4:	69db      	ldr	r3, [r3, #28]
 801acc6:	601a      	str	r2, [r3, #0]
 801acc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acca:	2b0e      	cmp	r3, #14
 801accc:	d900      	bls.n	801acd0 <_dtoa_r+0x2cc>
 801acce:	e0d6      	b.n	801ae7e <_dtoa_r+0x47a>
 801acd0:	2c00      	cmp	r4, #0
 801acd2:	d100      	bne.n	801acd6 <_dtoa_r+0x2d2>
 801acd4:	e0d3      	b.n	801ae7e <_dtoa_r+0x47a>
 801acd6:	9b04      	ldr	r3, [sp, #16]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	dd63      	ble.n	801ada4 <_dtoa_r+0x3a0>
 801acdc:	210f      	movs	r1, #15
 801acde:	9a04      	ldr	r2, [sp, #16]
 801ace0:	4b2a      	ldr	r3, [pc, #168]	@ (801ad8c <_dtoa_r+0x388>)
 801ace2:	400a      	ands	r2, r1
 801ace4:	00d2      	lsls	r2, r2, #3
 801ace6:	189b      	adds	r3, r3, r2
 801ace8:	681e      	ldr	r6, [r3, #0]
 801acea:	685f      	ldr	r7, [r3, #4]
 801acec:	9b04      	ldr	r3, [sp, #16]
 801acee:	2402      	movs	r4, #2
 801acf0:	111d      	asrs	r5, r3, #4
 801acf2:	05db      	lsls	r3, r3, #23
 801acf4:	d50a      	bpl.n	801ad0c <_dtoa_r+0x308>
 801acf6:	4b2a      	ldr	r3, [pc, #168]	@ (801ada0 <_dtoa_r+0x39c>)
 801acf8:	400d      	ands	r5, r1
 801acfa:	6a1a      	ldr	r2, [r3, #32]
 801acfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801acfe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ad00:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ad02:	f7e7 f96f 	bl	8001fe4 <__aeabi_ddiv>
 801ad06:	900a      	str	r0, [sp, #40]	@ 0x28
 801ad08:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ad0a:	3401      	adds	r4, #1
 801ad0c:	4b24      	ldr	r3, [pc, #144]	@ (801ada0 <_dtoa_r+0x39c>)
 801ad0e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ad10:	2d00      	cmp	r5, #0
 801ad12:	d108      	bne.n	801ad26 <_dtoa_r+0x322>
 801ad14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ad16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ad18:	0032      	movs	r2, r6
 801ad1a:	003b      	movs	r3, r7
 801ad1c:	f7e7 f962 	bl	8001fe4 <__aeabi_ddiv>
 801ad20:	900a      	str	r0, [sp, #40]	@ 0x28
 801ad22:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ad24:	e059      	b.n	801adda <_dtoa_r+0x3d6>
 801ad26:	2301      	movs	r3, #1
 801ad28:	421d      	tst	r5, r3
 801ad2a:	d009      	beq.n	801ad40 <_dtoa_r+0x33c>
 801ad2c:	18e4      	adds	r4, r4, r3
 801ad2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad30:	0030      	movs	r0, r6
 801ad32:	681a      	ldr	r2, [r3, #0]
 801ad34:	685b      	ldr	r3, [r3, #4]
 801ad36:	0039      	movs	r1, r7
 801ad38:	f7e7 fd8e 	bl	8002858 <__aeabi_dmul>
 801ad3c:	0006      	movs	r6, r0
 801ad3e:	000f      	movs	r7, r1
 801ad40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad42:	106d      	asrs	r5, r5, #1
 801ad44:	3308      	adds	r3, #8
 801ad46:	e7e2      	b.n	801ad0e <_dtoa_r+0x30a>
 801ad48:	08020502 	.word	0x08020502
 801ad4c:	08020519 	.word	0x08020519
 801ad50:	7ff00000 	.word	0x7ff00000
 801ad54:	0000270f 	.word	0x0000270f
 801ad58:	080204fe 	.word	0x080204fe
 801ad5c:	08020501 	.word	0x08020501
 801ad60:	0801ebc0 	.word	0x0801ebc0
 801ad64:	0801ebbf 	.word	0x0801ebbf
 801ad68:	3ff00000 	.word	0x3ff00000
 801ad6c:	fffffc01 	.word	0xfffffc01
 801ad70:	3ff80000 	.word	0x3ff80000
 801ad74:	636f4361 	.word	0x636f4361
 801ad78:	3fd287a7 	.word	0x3fd287a7
 801ad7c:	8b60c8b3 	.word	0x8b60c8b3
 801ad80:	3fc68a28 	.word	0x3fc68a28
 801ad84:	509f79fb 	.word	0x509f79fb
 801ad88:	3fd34413 	.word	0x3fd34413
 801ad8c:	080207f0 	.word	0x080207f0
 801ad90:	00000432 	.word	0x00000432
 801ad94:	00000412 	.word	0x00000412
 801ad98:	fe100000 	.word	0xfe100000
 801ad9c:	08020571 	.word	0x08020571
 801ada0:	080207c8 	.word	0x080207c8
 801ada4:	9b04      	ldr	r3, [sp, #16]
 801ada6:	2402      	movs	r4, #2
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d016      	beq.n	801adda <_dtoa_r+0x3d6>
 801adac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801adae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801adb0:	220f      	movs	r2, #15
 801adb2:	425d      	negs	r5, r3
 801adb4:	402a      	ands	r2, r5
 801adb6:	4bd5      	ldr	r3, [pc, #852]	@ (801b10c <_dtoa_r+0x708>)
 801adb8:	00d2      	lsls	r2, r2, #3
 801adba:	189b      	adds	r3, r3, r2
 801adbc:	681a      	ldr	r2, [r3, #0]
 801adbe:	685b      	ldr	r3, [r3, #4]
 801adc0:	f7e7 fd4a 	bl	8002858 <__aeabi_dmul>
 801adc4:	2701      	movs	r7, #1
 801adc6:	2300      	movs	r3, #0
 801adc8:	900a      	str	r0, [sp, #40]	@ 0x28
 801adca:	910b      	str	r1, [sp, #44]	@ 0x2c
 801adcc:	4ed0      	ldr	r6, [pc, #832]	@ (801b110 <_dtoa_r+0x70c>)
 801adce:	112d      	asrs	r5, r5, #4
 801add0:	2d00      	cmp	r5, #0
 801add2:	d000      	beq.n	801add6 <_dtoa_r+0x3d2>
 801add4:	e095      	b.n	801af02 <_dtoa_r+0x4fe>
 801add6:	2b00      	cmp	r3, #0
 801add8:	d1a2      	bne.n	801ad20 <_dtoa_r+0x31c>
 801adda:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801addc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801adde:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d100      	bne.n	801ade6 <_dtoa_r+0x3e2>
 801ade4:	e098      	b.n	801af18 <_dtoa_r+0x514>
 801ade6:	2200      	movs	r2, #0
 801ade8:	0030      	movs	r0, r6
 801adea:	0039      	movs	r1, r7
 801adec:	4bc9      	ldr	r3, [pc, #804]	@ (801b114 <_dtoa_r+0x710>)
 801adee:	f7e5 fb47 	bl	8000480 <__aeabi_dcmplt>
 801adf2:	2800      	cmp	r0, #0
 801adf4:	d100      	bne.n	801adf8 <_dtoa_r+0x3f4>
 801adf6:	e08f      	b.n	801af18 <_dtoa_r+0x514>
 801adf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d100      	bne.n	801ae00 <_dtoa_r+0x3fc>
 801adfe:	e08b      	b.n	801af18 <_dtoa_r+0x514>
 801ae00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	dd37      	ble.n	801ae76 <_dtoa_r+0x472>
 801ae06:	9b04      	ldr	r3, [sp, #16]
 801ae08:	2200      	movs	r2, #0
 801ae0a:	3b01      	subs	r3, #1
 801ae0c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ae0e:	0030      	movs	r0, r6
 801ae10:	4bc1      	ldr	r3, [pc, #772]	@ (801b118 <_dtoa_r+0x714>)
 801ae12:	0039      	movs	r1, r7
 801ae14:	f7e7 fd20 	bl	8002858 <__aeabi_dmul>
 801ae18:	900a      	str	r0, [sp, #40]	@ 0x28
 801ae1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ae1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae1e:	3401      	adds	r4, #1
 801ae20:	0020      	movs	r0, r4
 801ae22:	9311      	str	r3, [sp, #68]	@ 0x44
 801ae24:	f7e8 fc66 	bl	80036f4 <__aeabi_i2d>
 801ae28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ae2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ae2c:	f7e7 fd14 	bl	8002858 <__aeabi_dmul>
 801ae30:	4bba      	ldr	r3, [pc, #744]	@ (801b11c <_dtoa_r+0x718>)
 801ae32:	2200      	movs	r2, #0
 801ae34:	f7e6 fd10 	bl	8001858 <__aeabi_dadd>
 801ae38:	4bb9      	ldr	r3, [pc, #740]	@ (801b120 <_dtoa_r+0x71c>)
 801ae3a:	0006      	movs	r6, r0
 801ae3c:	18cf      	adds	r7, r1, r3
 801ae3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d16d      	bne.n	801af20 <_dtoa_r+0x51c>
 801ae44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ae46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ae48:	2200      	movs	r2, #0
 801ae4a:	4bb6      	ldr	r3, [pc, #728]	@ (801b124 <_dtoa_r+0x720>)
 801ae4c:	f7e7 ffea 	bl	8002e24 <__aeabi_dsub>
 801ae50:	0032      	movs	r2, r6
 801ae52:	003b      	movs	r3, r7
 801ae54:	0004      	movs	r4, r0
 801ae56:	000d      	movs	r5, r1
 801ae58:	f7e5 fb26 	bl	80004a8 <__aeabi_dcmpgt>
 801ae5c:	2800      	cmp	r0, #0
 801ae5e:	d000      	beq.n	801ae62 <_dtoa_r+0x45e>
 801ae60:	e2b6      	b.n	801b3d0 <_dtoa_r+0x9cc>
 801ae62:	2180      	movs	r1, #128	@ 0x80
 801ae64:	0609      	lsls	r1, r1, #24
 801ae66:	187b      	adds	r3, r7, r1
 801ae68:	0032      	movs	r2, r6
 801ae6a:	0020      	movs	r0, r4
 801ae6c:	0029      	movs	r1, r5
 801ae6e:	f7e5 fb07 	bl	8000480 <__aeabi_dcmplt>
 801ae72:	2800      	cmp	r0, #0
 801ae74:	d128      	bne.n	801aec8 <_dtoa_r+0x4c4>
 801ae76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ae78:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ae7a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae7c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ae7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	da00      	bge.n	801ae86 <_dtoa_r+0x482>
 801ae84:	e174      	b.n	801b170 <_dtoa_r+0x76c>
 801ae86:	9a04      	ldr	r2, [sp, #16]
 801ae88:	2a0e      	cmp	r2, #14
 801ae8a:	dd00      	ble.n	801ae8e <_dtoa_r+0x48a>
 801ae8c:	e170      	b.n	801b170 <_dtoa_r+0x76c>
 801ae8e:	4b9f      	ldr	r3, [pc, #636]	@ (801b10c <_dtoa_r+0x708>)
 801ae90:	00d2      	lsls	r2, r2, #3
 801ae92:	189b      	adds	r3, r3, r2
 801ae94:	685c      	ldr	r4, [r3, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	9306      	str	r3, [sp, #24]
 801ae9a:	9407      	str	r4, [sp, #28]
 801ae9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	db00      	blt.n	801aea4 <_dtoa_r+0x4a0>
 801aea2:	e0e7      	b.n	801b074 <_dtoa_r+0x670>
 801aea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	dd00      	ble.n	801aeac <_dtoa_r+0x4a8>
 801aeaa:	e0e3      	b.n	801b074 <_dtoa_r+0x670>
 801aeac:	d10c      	bne.n	801aec8 <_dtoa_r+0x4c4>
 801aeae:	9806      	ldr	r0, [sp, #24]
 801aeb0:	9907      	ldr	r1, [sp, #28]
 801aeb2:	2200      	movs	r2, #0
 801aeb4:	4b9b      	ldr	r3, [pc, #620]	@ (801b124 <_dtoa_r+0x720>)
 801aeb6:	f7e7 fccf 	bl	8002858 <__aeabi_dmul>
 801aeba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aebe:	f7e5 fafd 	bl	80004bc <__aeabi_dcmpge>
 801aec2:	2800      	cmp	r0, #0
 801aec4:	d100      	bne.n	801aec8 <_dtoa_r+0x4c4>
 801aec6:	e286      	b.n	801b3d6 <_dtoa_r+0x9d2>
 801aec8:	2600      	movs	r6, #0
 801aeca:	0037      	movs	r7, r6
 801aecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801aece:	9c08      	ldr	r4, [sp, #32]
 801aed0:	43db      	mvns	r3, r3
 801aed2:	930c      	str	r3, [sp, #48]	@ 0x30
 801aed4:	9704      	str	r7, [sp, #16]
 801aed6:	2700      	movs	r7, #0
 801aed8:	0031      	movs	r1, r6
 801aeda:	9803      	ldr	r0, [sp, #12]
 801aedc:	f000 fccc 	bl	801b878 <_Bfree>
 801aee0:	9b04      	ldr	r3, [sp, #16]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d100      	bne.n	801aee8 <_dtoa_r+0x4e4>
 801aee6:	e0bb      	b.n	801b060 <_dtoa_r+0x65c>
 801aee8:	2f00      	cmp	r7, #0
 801aeea:	d005      	beq.n	801aef8 <_dtoa_r+0x4f4>
 801aeec:	429f      	cmp	r7, r3
 801aeee:	d003      	beq.n	801aef8 <_dtoa_r+0x4f4>
 801aef0:	0039      	movs	r1, r7
 801aef2:	9803      	ldr	r0, [sp, #12]
 801aef4:	f000 fcc0 	bl	801b878 <_Bfree>
 801aef8:	9904      	ldr	r1, [sp, #16]
 801aefa:	9803      	ldr	r0, [sp, #12]
 801aefc:	f000 fcbc 	bl	801b878 <_Bfree>
 801af00:	e0ae      	b.n	801b060 <_dtoa_r+0x65c>
 801af02:	423d      	tst	r5, r7
 801af04:	d005      	beq.n	801af12 <_dtoa_r+0x50e>
 801af06:	6832      	ldr	r2, [r6, #0]
 801af08:	6873      	ldr	r3, [r6, #4]
 801af0a:	f7e7 fca5 	bl	8002858 <__aeabi_dmul>
 801af0e:	003b      	movs	r3, r7
 801af10:	3401      	adds	r4, #1
 801af12:	106d      	asrs	r5, r5, #1
 801af14:	3608      	adds	r6, #8
 801af16:	e75b      	b.n	801add0 <_dtoa_r+0x3cc>
 801af18:	9b04      	ldr	r3, [sp, #16]
 801af1a:	930c      	str	r3, [sp, #48]	@ 0x30
 801af1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af1e:	e77f      	b.n	801ae20 <_dtoa_r+0x41c>
 801af20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801af22:	4b7a      	ldr	r3, [pc, #488]	@ (801b10c <_dtoa_r+0x708>)
 801af24:	3a01      	subs	r2, #1
 801af26:	00d2      	lsls	r2, r2, #3
 801af28:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801af2a:	189b      	adds	r3, r3, r2
 801af2c:	681a      	ldr	r2, [r3, #0]
 801af2e:	685b      	ldr	r3, [r3, #4]
 801af30:	2900      	cmp	r1, #0
 801af32:	d04c      	beq.n	801afce <_dtoa_r+0x5ca>
 801af34:	2000      	movs	r0, #0
 801af36:	497c      	ldr	r1, [pc, #496]	@ (801b128 <_dtoa_r+0x724>)
 801af38:	f7e7 f854 	bl	8001fe4 <__aeabi_ddiv>
 801af3c:	0032      	movs	r2, r6
 801af3e:	003b      	movs	r3, r7
 801af40:	f7e7 ff70 	bl	8002e24 <__aeabi_dsub>
 801af44:	9a08      	ldr	r2, [sp, #32]
 801af46:	0006      	movs	r6, r0
 801af48:	4694      	mov	ip, r2
 801af4a:	000f      	movs	r7, r1
 801af4c:	9b08      	ldr	r3, [sp, #32]
 801af4e:	9316      	str	r3, [sp, #88]	@ 0x58
 801af50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801af52:	4463      	add	r3, ip
 801af54:	9311      	str	r3, [sp, #68]	@ 0x44
 801af56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801af58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801af5a:	f7e8 fb8f 	bl	800367c <__aeabi_d2iz>
 801af5e:	0005      	movs	r5, r0
 801af60:	f7e8 fbc8 	bl	80036f4 <__aeabi_i2d>
 801af64:	0002      	movs	r2, r0
 801af66:	000b      	movs	r3, r1
 801af68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801af6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801af6c:	f7e7 ff5a 	bl	8002e24 <__aeabi_dsub>
 801af70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801af72:	3530      	adds	r5, #48	@ 0x30
 801af74:	1c5c      	adds	r4, r3, #1
 801af76:	701d      	strb	r5, [r3, #0]
 801af78:	0032      	movs	r2, r6
 801af7a:	003b      	movs	r3, r7
 801af7c:	900a      	str	r0, [sp, #40]	@ 0x28
 801af7e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801af80:	f7e5 fa7e 	bl	8000480 <__aeabi_dcmplt>
 801af84:	2800      	cmp	r0, #0
 801af86:	d16b      	bne.n	801b060 <_dtoa_r+0x65c>
 801af88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801af8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af8c:	2000      	movs	r0, #0
 801af8e:	4961      	ldr	r1, [pc, #388]	@ (801b114 <_dtoa_r+0x710>)
 801af90:	f7e7 ff48 	bl	8002e24 <__aeabi_dsub>
 801af94:	0032      	movs	r2, r6
 801af96:	003b      	movs	r3, r7
 801af98:	f7e5 fa72 	bl	8000480 <__aeabi_dcmplt>
 801af9c:	2800      	cmp	r0, #0
 801af9e:	d000      	beq.n	801afa2 <_dtoa_r+0x59e>
 801afa0:	e0c6      	b.n	801b130 <_dtoa_r+0x72c>
 801afa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801afa4:	42a3      	cmp	r3, r4
 801afa6:	d100      	bne.n	801afaa <_dtoa_r+0x5a6>
 801afa8:	e765      	b.n	801ae76 <_dtoa_r+0x472>
 801afaa:	2200      	movs	r2, #0
 801afac:	0030      	movs	r0, r6
 801afae:	0039      	movs	r1, r7
 801afb0:	4b59      	ldr	r3, [pc, #356]	@ (801b118 <_dtoa_r+0x714>)
 801afb2:	f7e7 fc51 	bl	8002858 <__aeabi_dmul>
 801afb6:	2200      	movs	r2, #0
 801afb8:	0006      	movs	r6, r0
 801afba:	000f      	movs	r7, r1
 801afbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801afbe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801afc0:	4b55      	ldr	r3, [pc, #340]	@ (801b118 <_dtoa_r+0x714>)
 801afc2:	f7e7 fc49 	bl	8002858 <__aeabi_dmul>
 801afc6:	9416      	str	r4, [sp, #88]	@ 0x58
 801afc8:	900a      	str	r0, [sp, #40]	@ 0x28
 801afca:	910b      	str	r1, [sp, #44]	@ 0x2c
 801afcc:	e7c3      	b.n	801af56 <_dtoa_r+0x552>
 801afce:	0030      	movs	r0, r6
 801afd0:	0039      	movs	r1, r7
 801afd2:	f7e7 fc41 	bl	8002858 <__aeabi_dmul>
 801afd6:	9d08      	ldr	r5, [sp, #32]
 801afd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801afda:	002b      	movs	r3, r5
 801afdc:	4694      	mov	ip, r2
 801afde:	9016      	str	r0, [sp, #88]	@ 0x58
 801afe0:	9117      	str	r1, [sp, #92]	@ 0x5c
 801afe2:	4463      	add	r3, ip
 801afe4:	9319      	str	r3, [sp, #100]	@ 0x64
 801afe6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801afe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801afea:	f7e8 fb47 	bl	800367c <__aeabi_d2iz>
 801afee:	0004      	movs	r4, r0
 801aff0:	f7e8 fb80 	bl	80036f4 <__aeabi_i2d>
 801aff4:	000b      	movs	r3, r1
 801aff6:	0002      	movs	r2, r0
 801aff8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801affa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801affc:	f7e7 ff12 	bl	8002e24 <__aeabi_dsub>
 801b000:	3430      	adds	r4, #48	@ 0x30
 801b002:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b004:	702c      	strb	r4, [r5, #0]
 801b006:	3501      	adds	r5, #1
 801b008:	0006      	movs	r6, r0
 801b00a:	000f      	movs	r7, r1
 801b00c:	42ab      	cmp	r3, r5
 801b00e:	d12a      	bne.n	801b066 <_dtoa_r+0x662>
 801b010:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801b012:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b014:	9b08      	ldr	r3, [sp, #32]
 801b016:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b018:	469c      	mov	ip, r3
 801b01a:	2200      	movs	r2, #0
 801b01c:	4b42      	ldr	r3, [pc, #264]	@ (801b128 <_dtoa_r+0x724>)
 801b01e:	4464      	add	r4, ip
 801b020:	f7e6 fc1a 	bl	8001858 <__aeabi_dadd>
 801b024:	0002      	movs	r2, r0
 801b026:	000b      	movs	r3, r1
 801b028:	0030      	movs	r0, r6
 801b02a:	0039      	movs	r1, r7
 801b02c:	f7e5 fa3c 	bl	80004a8 <__aeabi_dcmpgt>
 801b030:	2800      	cmp	r0, #0
 801b032:	d000      	beq.n	801b036 <_dtoa_r+0x632>
 801b034:	e07c      	b.n	801b130 <_dtoa_r+0x72c>
 801b036:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b038:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b03a:	2000      	movs	r0, #0
 801b03c:	493a      	ldr	r1, [pc, #232]	@ (801b128 <_dtoa_r+0x724>)
 801b03e:	f7e7 fef1 	bl	8002e24 <__aeabi_dsub>
 801b042:	0002      	movs	r2, r0
 801b044:	000b      	movs	r3, r1
 801b046:	0030      	movs	r0, r6
 801b048:	0039      	movs	r1, r7
 801b04a:	f7e5 fa19 	bl	8000480 <__aeabi_dcmplt>
 801b04e:	2800      	cmp	r0, #0
 801b050:	d100      	bne.n	801b054 <_dtoa_r+0x650>
 801b052:	e710      	b.n	801ae76 <_dtoa_r+0x472>
 801b054:	0023      	movs	r3, r4
 801b056:	3c01      	subs	r4, #1
 801b058:	7822      	ldrb	r2, [r4, #0]
 801b05a:	2a30      	cmp	r2, #48	@ 0x30
 801b05c:	d0fa      	beq.n	801b054 <_dtoa_r+0x650>
 801b05e:	001c      	movs	r4, r3
 801b060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b062:	9304      	str	r3, [sp, #16]
 801b064:	e042      	b.n	801b0ec <_dtoa_r+0x6e8>
 801b066:	2200      	movs	r2, #0
 801b068:	4b2b      	ldr	r3, [pc, #172]	@ (801b118 <_dtoa_r+0x714>)
 801b06a:	f7e7 fbf5 	bl	8002858 <__aeabi_dmul>
 801b06e:	900a      	str	r0, [sp, #40]	@ 0x28
 801b070:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b072:	e7b8      	b.n	801afe6 <_dtoa_r+0x5e2>
 801b074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b076:	9d08      	ldr	r5, [sp, #32]
 801b078:	3b01      	subs	r3, #1
 801b07a:	195b      	adds	r3, r3, r5
 801b07c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801b07e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b080:	930a      	str	r3, [sp, #40]	@ 0x28
 801b082:	9a06      	ldr	r2, [sp, #24]
 801b084:	9b07      	ldr	r3, [sp, #28]
 801b086:	0030      	movs	r0, r6
 801b088:	0039      	movs	r1, r7
 801b08a:	f7e6 ffab 	bl	8001fe4 <__aeabi_ddiv>
 801b08e:	f7e8 faf5 	bl	800367c <__aeabi_d2iz>
 801b092:	9009      	str	r0, [sp, #36]	@ 0x24
 801b094:	f7e8 fb2e 	bl	80036f4 <__aeabi_i2d>
 801b098:	9a06      	ldr	r2, [sp, #24]
 801b09a:	9b07      	ldr	r3, [sp, #28]
 801b09c:	f7e7 fbdc 	bl	8002858 <__aeabi_dmul>
 801b0a0:	0002      	movs	r2, r0
 801b0a2:	000b      	movs	r3, r1
 801b0a4:	0030      	movs	r0, r6
 801b0a6:	0039      	movs	r1, r7
 801b0a8:	f7e7 febc 	bl	8002e24 <__aeabi_dsub>
 801b0ac:	002b      	movs	r3, r5
 801b0ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b0b0:	3501      	adds	r5, #1
 801b0b2:	3230      	adds	r2, #48	@ 0x30
 801b0b4:	701a      	strb	r2, [r3, #0]
 801b0b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b0b8:	002c      	movs	r4, r5
 801b0ba:	429a      	cmp	r2, r3
 801b0bc:	d14b      	bne.n	801b156 <_dtoa_r+0x752>
 801b0be:	0002      	movs	r2, r0
 801b0c0:	000b      	movs	r3, r1
 801b0c2:	f7e6 fbc9 	bl	8001858 <__aeabi_dadd>
 801b0c6:	9a06      	ldr	r2, [sp, #24]
 801b0c8:	9b07      	ldr	r3, [sp, #28]
 801b0ca:	0006      	movs	r6, r0
 801b0cc:	000f      	movs	r7, r1
 801b0ce:	f7e5 f9eb 	bl	80004a8 <__aeabi_dcmpgt>
 801b0d2:	2800      	cmp	r0, #0
 801b0d4:	d12a      	bne.n	801b12c <_dtoa_r+0x728>
 801b0d6:	9a06      	ldr	r2, [sp, #24]
 801b0d8:	9b07      	ldr	r3, [sp, #28]
 801b0da:	0030      	movs	r0, r6
 801b0dc:	0039      	movs	r1, r7
 801b0de:	f7e5 f9c9 	bl	8000474 <__aeabi_dcmpeq>
 801b0e2:	2800      	cmp	r0, #0
 801b0e4:	d002      	beq.n	801b0ec <_dtoa_r+0x6e8>
 801b0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0e8:	07dd      	lsls	r5, r3, #31
 801b0ea:	d41f      	bmi.n	801b12c <_dtoa_r+0x728>
 801b0ec:	9905      	ldr	r1, [sp, #20]
 801b0ee:	9803      	ldr	r0, [sp, #12]
 801b0f0:	f000 fbc2 	bl	801b878 <_Bfree>
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	7023      	strb	r3, [r4, #0]
 801b0f8:	9b04      	ldr	r3, [sp, #16]
 801b0fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b0fc:	3301      	adds	r3, #1
 801b0fe:	6013      	str	r3, [r2, #0]
 801b100:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b102:	2b00      	cmp	r3, #0
 801b104:	d100      	bne.n	801b108 <_dtoa_r+0x704>
 801b106:	e4c7      	b.n	801aa98 <_dtoa_r+0x94>
 801b108:	601c      	str	r4, [r3, #0]
 801b10a:	e4c5      	b.n	801aa98 <_dtoa_r+0x94>
 801b10c:	080207f0 	.word	0x080207f0
 801b110:	080207c8 	.word	0x080207c8
 801b114:	3ff00000 	.word	0x3ff00000
 801b118:	40240000 	.word	0x40240000
 801b11c:	401c0000 	.word	0x401c0000
 801b120:	fcc00000 	.word	0xfcc00000
 801b124:	40140000 	.word	0x40140000
 801b128:	3fe00000 	.word	0x3fe00000
 801b12c:	9b04      	ldr	r3, [sp, #16]
 801b12e:	930c      	str	r3, [sp, #48]	@ 0x30
 801b130:	0023      	movs	r3, r4
 801b132:	001c      	movs	r4, r3
 801b134:	3b01      	subs	r3, #1
 801b136:	781a      	ldrb	r2, [r3, #0]
 801b138:	2a39      	cmp	r2, #57	@ 0x39
 801b13a:	d108      	bne.n	801b14e <_dtoa_r+0x74a>
 801b13c:	9a08      	ldr	r2, [sp, #32]
 801b13e:	429a      	cmp	r2, r3
 801b140:	d1f7      	bne.n	801b132 <_dtoa_r+0x72e>
 801b142:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b144:	9908      	ldr	r1, [sp, #32]
 801b146:	3201      	adds	r2, #1
 801b148:	920c      	str	r2, [sp, #48]	@ 0x30
 801b14a:	2230      	movs	r2, #48	@ 0x30
 801b14c:	700a      	strb	r2, [r1, #0]
 801b14e:	781a      	ldrb	r2, [r3, #0]
 801b150:	3201      	adds	r2, #1
 801b152:	701a      	strb	r2, [r3, #0]
 801b154:	e784      	b.n	801b060 <_dtoa_r+0x65c>
 801b156:	2200      	movs	r2, #0
 801b158:	4bc6      	ldr	r3, [pc, #792]	@ (801b474 <_dtoa_r+0xa70>)
 801b15a:	f7e7 fb7d 	bl	8002858 <__aeabi_dmul>
 801b15e:	2200      	movs	r2, #0
 801b160:	2300      	movs	r3, #0
 801b162:	0006      	movs	r6, r0
 801b164:	000f      	movs	r7, r1
 801b166:	f7e5 f985 	bl	8000474 <__aeabi_dcmpeq>
 801b16a:	2800      	cmp	r0, #0
 801b16c:	d089      	beq.n	801b082 <_dtoa_r+0x67e>
 801b16e:	e7bd      	b.n	801b0ec <_dtoa_r+0x6e8>
 801b170:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b172:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801b174:	9c06      	ldr	r4, [sp, #24]
 801b176:	2f00      	cmp	r7, #0
 801b178:	d014      	beq.n	801b1a4 <_dtoa_r+0x7a0>
 801b17a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801b17c:	2a01      	cmp	r2, #1
 801b17e:	dd00      	ble.n	801b182 <_dtoa_r+0x77e>
 801b180:	e0e4      	b.n	801b34c <_dtoa_r+0x948>
 801b182:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b184:	2a00      	cmp	r2, #0
 801b186:	d100      	bne.n	801b18a <_dtoa_r+0x786>
 801b188:	e0da      	b.n	801b340 <_dtoa_r+0x93c>
 801b18a:	4abb      	ldr	r2, [pc, #748]	@ (801b478 <_dtoa_r+0xa74>)
 801b18c:	189b      	adds	r3, r3, r2
 801b18e:	9a06      	ldr	r2, [sp, #24]
 801b190:	2101      	movs	r1, #1
 801b192:	18d2      	adds	r2, r2, r3
 801b194:	9206      	str	r2, [sp, #24]
 801b196:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b198:	9803      	ldr	r0, [sp, #12]
 801b19a:	18d3      	adds	r3, r2, r3
 801b19c:	930d      	str	r3, [sp, #52]	@ 0x34
 801b19e:	f000 fc23 	bl	801b9e8 <__i2b>
 801b1a2:	0007      	movs	r7, r0
 801b1a4:	2c00      	cmp	r4, #0
 801b1a6:	d00e      	beq.n	801b1c6 <_dtoa_r+0x7c2>
 801b1a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	dd0b      	ble.n	801b1c6 <_dtoa_r+0x7c2>
 801b1ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b1b0:	0023      	movs	r3, r4
 801b1b2:	4294      	cmp	r4, r2
 801b1b4:	dd00      	ble.n	801b1b8 <_dtoa_r+0x7b4>
 801b1b6:	0013      	movs	r3, r2
 801b1b8:	9a06      	ldr	r2, [sp, #24]
 801b1ba:	1ae4      	subs	r4, r4, r3
 801b1bc:	1ad2      	subs	r2, r2, r3
 801b1be:	9206      	str	r2, [sp, #24]
 801b1c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b1c2:	1ad3      	subs	r3, r2, r3
 801b1c4:	930d      	str	r3, [sp, #52]	@ 0x34
 801b1c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d021      	beq.n	801b210 <_dtoa_r+0x80c>
 801b1cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d100      	bne.n	801b1d4 <_dtoa_r+0x7d0>
 801b1d2:	e0d3      	b.n	801b37c <_dtoa_r+0x978>
 801b1d4:	9e05      	ldr	r6, [sp, #20]
 801b1d6:	2d00      	cmp	r5, #0
 801b1d8:	d014      	beq.n	801b204 <_dtoa_r+0x800>
 801b1da:	0039      	movs	r1, r7
 801b1dc:	002a      	movs	r2, r5
 801b1de:	9803      	ldr	r0, [sp, #12]
 801b1e0:	f000 fcc4 	bl	801bb6c <__pow5mult>
 801b1e4:	9a05      	ldr	r2, [sp, #20]
 801b1e6:	0001      	movs	r1, r0
 801b1e8:	0007      	movs	r7, r0
 801b1ea:	9803      	ldr	r0, [sp, #12]
 801b1ec:	f000 fc14 	bl	801ba18 <__multiply>
 801b1f0:	0006      	movs	r6, r0
 801b1f2:	9905      	ldr	r1, [sp, #20]
 801b1f4:	9803      	ldr	r0, [sp, #12]
 801b1f6:	f000 fb3f 	bl	801b878 <_Bfree>
 801b1fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1fc:	9605      	str	r6, [sp, #20]
 801b1fe:	1b5b      	subs	r3, r3, r5
 801b200:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b202:	d005      	beq.n	801b210 <_dtoa_r+0x80c>
 801b204:	0031      	movs	r1, r6
 801b206:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b208:	9803      	ldr	r0, [sp, #12]
 801b20a:	f000 fcaf 	bl	801bb6c <__pow5mult>
 801b20e:	9005      	str	r0, [sp, #20]
 801b210:	2101      	movs	r1, #1
 801b212:	9803      	ldr	r0, [sp, #12]
 801b214:	f000 fbe8 	bl	801b9e8 <__i2b>
 801b218:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b21a:	0006      	movs	r6, r0
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d100      	bne.n	801b222 <_dtoa_r+0x81e>
 801b220:	e1bc      	b.n	801b59c <_dtoa_r+0xb98>
 801b222:	001a      	movs	r2, r3
 801b224:	0001      	movs	r1, r0
 801b226:	9803      	ldr	r0, [sp, #12]
 801b228:	f000 fca0 	bl	801bb6c <__pow5mult>
 801b22c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b22e:	0006      	movs	r6, r0
 801b230:	2500      	movs	r5, #0
 801b232:	2b01      	cmp	r3, #1
 801b234:	dc16      	bgt.n	801b264 <_dtoa_r+0x860>
 801b236:	2500      	movs	r5, #0
 801b238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b23a:	42ab      	cmp	r3, r5
 801b23c:	d10e      	bne.n	801b25c <_dtoa_r+0x858>
 801b23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b240:	031b      	lsls	r3, r3, #12
 801b242:	42ab      	cmp	r3, r5
 801b244:	d10a      	bne.n	801b25c <_dtoa_r+0x858>
 801b246:	4b8d      	ldr	r3, [pc, #564]	@ (801b47c <_dtoa_r+0xa78>)
 801b248:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b24a:	4213      	tst	r3, r2
 801b24c:	d006      	beq.n	801b25c <_dtoa_r+0x858>
 801b24e:	9b06      	ldr	r3, [sp, #24]
 801b250:	3501      	adds	r5, #1
 801b252:	3301      	adds	r3, #1
 801b254:	9306      	str	r3, [sp, #24]
 801b256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b258:	3301      	adds	r3, #1
 801b25a:	930d      	str	r3, [sp, #52]	@ 0x34
 801b25c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b25e:	2001      	movs	r0, #1
 801b260:	2b00      	cmp	r3, #0
 801b262:	d008      	beq.n	801b276 <_dtoa_r+0x872>
 801b264:	6933      	ldr	r3, [r6, #16]
 801b266:	3303      	adds	r3, #3
 801b268:	009b      	lsls	r3, r3, #2
 801b26a:	18f3      	adds	r3, r6, r3
 801b26c:	6858      	ldr	r0, [r3, #4]
 801b26e:	f000 fb6b 	bl	801b948 <__hi0bits>
 801b272:	2320      	movs	r3, #32
 801b274:	1a18      	subs	r0, r3, r0
 801b276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b278:	1818      	adds	r0, r3, r0
 801b27a:	0002      	movs	r2, r0
 801b27c:	231f      	movs	r3, #31
 801b27e:	401a      	ands	r2, r3
 801b280:	4218      	tst	r0, r3
 801b282:	d100      	bne.n	801b286 <_dtoa_r+0x882>
 801b284:	e081      	b.n	801b38a <_dtoa_r+0x986>
 801b286:	3301      	adds	r3, #1
 801b288:	1a9b      	subs	r3, r3, r2
 801b28a:	2b04      	cmp	r3, #4
 801b28c:	dd79      	ble.n	801b382 <_dtoa_r+0x97e>
 801b28e:	231c      	movs	r3, #28
 801b290:	1a9b      	subs	r3, r3, r2
 801b292:	9a06      	ldr	r2, [sp, #24]
 801b294:	18e4      	adds	r4, r4, r3
 801b296:	18d2      	adds	r2, r2, r3
 801b298:	9206      	str	r2, [sp, #24]
 801b29a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b29c:	18d3      	adds	r3, r2, r3
 801b29e:	930d      	str	r3, [sp, #52]	@ 0x34
 801b2a0:	9b06      	ldr	r3, [sp, #24]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	dd05      	ble.n	801b2b2 <_dtoa_r+0x8ae>
 801b2a6:	001a      	movs	r2, r3
 801b2a8:	9905      	ldr	r1, [sp, #20]
 801b2aa:	9803      	ldr	r0, [sp, #12]
 801b2ac:	f000 fcba 	bl	801bc24 <__lshift>
 801b2b0:	9005      	str	r0, [sp, #20]
 801b2b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	dd05      	ble.n	801b2c4 <_dtoa_r+0x8c0>
 801b2b8:	0031      	movs	r1, r6
 801b2ba:	001a      	movs	r2, r3
 801b2bc:	9803      	ldr	r0, [sp, #12]
 801b2be:	f000 fcb1 	bl	801bc24 <__lshift>
 801b2c2:	0006      	movs	r6, r0
 801b2c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d061      	beq.n	801b38e <_dtoa_r+0x98a>
 801b2ca:	0031      	movs	r1, r6
 801b2cc:	9805      	ldr	r0, [sp, #20]
 801b2ce:	f000 fd15 	bl	801bcfc <__mcmp>
 801b2d2:	2800      	cmp	r0, #0
 801b2d4:	da5b      	bge.n	801b38e <_dtoa_r+0x98a>
 801b2d6:	9b04      	ldr	r3, [sp, #16]
 801b2d8:	220a      	movs	r2, #10
 801b2da:	3b01      	subs	r3, #1
 801b2dc:	930c      	str	r3, [sp, #48]	@ 0x30
 801b2de:	9905      	ldr	r1, [sp, #20]
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	9803      	ldr	r0, [sp, #12]
 801b2e4:	f000 faec 	bl	801b8c0 <__multadd>
 801b2e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b2ea:	9005      	str	r0, [sp, #20]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d100      	bne.n	801b2f2 <_dtoa_r+0x8ee>
 801b2f0:	e15b      	b.n	801b5aa <_dtoa_r+0xba6>
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	0039      	movs	r1, r7
 801b2f6:	220a      	movs	r2, #10
 801b2f8:	9803      	ldr	r0, [sp, #12]
 801b2fa:	f000 fae1 	bl	801b8c0 <__multadd>
 801b2fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b300:	0007      	movs	r7, r0
 801b302:	2b00      	cmp	r3, #0
 801b304:	dc4d      	bgt.n	801b3a2 <_dtoa_r+0x99e>
 801b306:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b308:	2b02      	cmp	r3, #2
 801b30a:	dd46      	ble.n	801b39a <_dtoa_r+0x996>
 801b30c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d000      	beq.n	801b314 <_dtoa_r+0x910>
 801b312:	e5db      	b.n	801aecc <_dtoa_r+0x4c8>
 801b314:	0031      	movs	r1, r6
 801b316:	2205      	movs	r2, #5
 801b318:	9803      	ldr	r0, [sp, #12]
 801b31a:	f000 fad1 	bl	801b8c0 <__multadd>
 801b31e:	0006      	movs	r6, r0
 801b320:	0001      	movs	r1, r0
 801b322:	9805      	ldr	r0, [sp, #20]
 801b324:	f000 fcea 	bl	801bcfc <__mcmp>
 801b328:	2800      	cmp	r0, #0
 801b32a:	dc00      	bgt.n	801b32e <_dtoa_r+0x92a>
 801b32c:	e5ce      	b.n	801aecc <_dtoa_r+0x4c8>
 801b32e:	9b08      	ldr	r3, [sp, #32]
 801b330:	9a08      	ldr	r2, [sp, #32]
 801b332:	1c5c      	adds	r4, r3, #1
 801b334:	2331      	movs	r3, #49	@ 0x31
 801b336:	7013      	strb	r3, [r2, #0]
 801b338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b33a:	3301      	adds	r3, #1
 801b33c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b33e:	e5c9      	b.n	801aed4 <_dtoa_r+0x4d0>
 801b340:	2336      	movs	r3, #54	@ 0x36
 801b342:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b344:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801b346:	1a9b      	subs	r3, r3, r2
 801b348:	9c06      	ldr	r4, [sp, #24]
 801b34a:	e720      	b.n	801b18e <_dtoa_r+0x78a>
 801b34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b34e:	1e5d      	subs	r5, r3, #1
 801b350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b352:	42ab      	cmp	r3, r5
 801b354:	db08      	blt.n	801b368 <_dtoa_r+0x964>
 801b356:	1b5d      	subs	r5, r3, r5
 801b358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	daf4      	bge.n	801b348 <_dtoa_r+0x944>
 801b35e:	9b06      	ldr	r3, [sp, #24]
 801b360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b362:	1a9c      	subs	r4, r3, r2
 801b364:	2300      	movs	r3, #0
 801b366:	e712      	b.n	801b18e <_dtoa_r+0x78a>
 801b368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b36a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b36c:	1aeb      	subs	r3, r5, r3
 801b36e:	18d3      	adds	r3, r2, r3
 801b370:	9314      	str	r3, [sp, #80]	@ 0x50
 801b372:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b374:	9c06      	ldr	r4, [sp, #24]
 801b376:	2500      	movs	r5, #0
 801b378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b37a:	e708      	b.n	801b18e <_dtoa_r+0x78a>
 801b37c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b37e:	9905      	ldr	r1, [sp, #20]
 801b380:	e742      	b.n	801b208 <_dtoa_r+0x804>
 801b382:	2b04      	cmp	r3, #4
 801b384:	d08c      	beq.n	801b2a0 <_dtoa_r+0x89c>
 801b386:	331c      	adds	r3, #28
 801b388:	e783      	b.n	801b292 <_dtoa_r+0x88e>
 801b38a:	0013      	movs	r3, r2
 801b38c:	e7fb      	b.n	801b386 <_dtoa_r+0x982>
 801b38e:	9b04      	ldr	r3, [sp, #16]
 801b390:	930c      	str	r3, [sp, #48]	@ 0x30
 801b392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b394:	930e      	str	r3, [sp, #56]	@ 0x38
 801b396:	2b00      	cmp	r3, #0
 801b398:	ddb5      	ble.n	801b306 <_dtoa_r+0x902>
 801b39a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d100      	bne.n	801b3a2 <_dtoa_r+0x99e>
 801b3a0:	e107      	b.n	801b5b2 <_dtoa_r+0xbae>
 801b3a2:	2c00      	cmp	r4, #0
 801b3a4:	dd05      	ble.n	801b3b2 <_dtoa_r+0x9ae>
 801b3a6:	0039      	movs	r1, r7
 801b3a8:	0022      	movs	r2, r4
 801b3aa:	9803      	ldr	r0, [sp, #12]
 801b3ac:	f000 fc3a 	bl	801bc24 <__lshift>
 801b3b0:	0007      	movs	r7, r0
 801b3b2:	9704      	str	r7, [sp, #16]
 801b3b4:	2d00      	cmp	r5, #0
 801b3b6:	d020      	beq.n	801b3fa <_dtoa_r+0x9f6>
 801b3b8:	6879      	ldr	r1, [r7, #4]
 801b3ba:	9803      	ldr	r0, [sp, #12]
 801b3bc:	f000 fa18 	bl	801b7f0 <_Balloc>
 801b3c0:	1e04      	subs	r4, r0, #0
 801b3c2:	d10c      	bne.n	801b3de <_dtoa_r+0x9da>
 801b3c4:	0022      	movs	r2, r4
 801b3c6:	4b2e      	ldr	r3, [pc, #184]	@ (801b480 <_dtoa_r+0xa7c>)
 801b3c8:	482e      	ldr	r0, [pc, #184]	@ (801b484 <_dtoa_r+0xa80>)
 801b3ca:	492f      	ldr	r1, [pc, #188]	@ (801b488 <_dtoa_r+0xa84>)
 801b3cc:	f7ff fb2f 	bl	801aa2e <_dtoa_r+0x2a>
 801b3d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b3d2:	0037      	movs	r7, r6
 801b3d4:	e7ab      	b.n	801b32e <_dtoa_r+0x92a>
 801b3d6:	9b04      	ldr	r3, [sp, #16]
 801b3d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b3da:	930c      	str	r3, [sp, #48]	@ 0x30
 801b3dc:	e7f9      	b.n	801b3d2 <_dtoa_r+0x9ce>
 801b3de:	0039      	movs	r1, r7
 801b3e0:	693a      	ldr	r2, [r7, #16]
 801b3e2:	310c      	adds	r1, #12
 801b3e4:	3202      	adds	r2, #2
 801b3e6:	0092      	lsls	r2, r2, #2
 801b3e8:	300c      	adds	r0, #12
 801b3ea:	f7ff fa7d 	bl	801a8e8 <memcpy>
 801b3ee:	2201      	movs	r2, #1
 801b3f0:	0021      	movs	r1, r4
 801b3f2:	9803      	ldr	r0, [sp, #12]
 801b3f4:	f000 fc16 	bl	801bc24 <__lshift>
 801b3f8:	9004      	str	r0, [sp, #16]
 801b3fa:	9b08      	ldr	r3, [sp, #32]
 801b3fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b3fe:	9306      	str	r3, [sp, #24]
 801b400:	3b01      	subs	r3, #1
 801b402:	189b      	adds	r3, r3, r2
 801b404:	2201      	movs	r2, #1
 801b406:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b40a:	4013      	ands	r3, r2
 801b40c:	930e      	str	r3, [sp, #56]	@ 0x38
 801b40e:	0031      	movs	r1, r6
 801b410:	9805      	ldr	r0, [sp, #20]
 801b412:	f7ff fa72 	bl	801a8fa <quorem>
 801b416:	0039      	movs	r1, r7
 801b418:	0005      	movs	r5, r0
 801b41a:	900a      	str	r0, [sp, #40]	@ 0x28
 801b41c:	9805      	ldr	r0, [sp, #20]
 801b41e:	f000 fc6d 	bl	801bcfc <__mcmp>
 801b422:	9a04      	ldr	r2, [sp, #16]
 801b424:	900d      	str	r0, [sp, #52]	@ 0x34
 801b426:	0031      	movs	r1, r6
 801b428:	9803      	ldr	r0, [sp, #12]
 801b42a:	f000 fc83 	bl	801bd34 <__mdiff>
 801b42e:	2201      	movs	r2, #1
 801b430:	68c3      	ldr	r3, [r0, #12]
 801b432:	0004      	movs	r4, r0
 801b434:	3530      	adds	r5, #48	@ 0x30
 801b436:	9209      	str	r2, [sp, #36]	@ 0x24
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d104      	bne.n	801b446 <_dtoa_r+0xa42>
 801b43c:	0001      	movs	r1, r0
 801b43e:	9805      	ldr	r0, [sp, #20]
 801b440:	f000 fc5c 	bl	801bcfc <__mcmp>
 801b444:	9009      	str	r0, [sp, #36]	@ 0x24
 801b446:	0021      	movs	r1, r4
 801b448:	9803      	ldr	r0, [sp, #12]
 801b44a:	f000 fa15 	bl	801b878 <_Bfree>
 801b44e:	9b06      	ldr	r3, [sp, #24]
 801b450:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801b452:	1c5c      	adds	r4, r3, #1
 801b454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b456:	4313      	orrs	r3, r2
 801b458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b45a:	4313      	orrs	r3, r2
 801b45c:	d116      	bne.n	801b48c <_dtoa_r+0xa88>
 801b45e:	2d39      	cmp	r5, #57	@ 0x39
 801b460:	d02f      	beq.n	801b4c2 <_dtoa_r+0xabe>
 801b462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b464:	2b00      	cmp	r3, #0
 801b466:	dd01      	ble.n	801b46c <_dtoa_r+0xa68>
 801b468:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b46a:	3531      	adds	r5, #49	@ 0x31
 801b46c:	9b06      	ldr	r3, [sp, #24]
 801b46e:	701d      	strb	r5, [r3, #0]
 801b470:	e532      	b.n	801aed8 <_dtoa_r+0x4d4>
 801b472:	46c0      	nop			@ (mov r8, r8)
 801b474:	40240000 	.word	0x40240000
 801b478:	00000433 	.word	0x00000433
 801b47c:	7ff00000 	.word	0x7ff00000
 801b480:	08020571 	.word	0x08020571
 801b484:	08020519 	.word	0x08020519
 801b488:	000002ef 	.word	0x000002ef
 801b48c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b48e:	2b00      	cmp	r3, #0
 801b490:	db04      	blt.n	801b49c <_dtoa_r+0xa98>
 801b492:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801b494:	4313      	orrs	r3, r2
 801b496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b498:	4313      	orrs	r3, r2
 801b49a:	d11e      	bne.n	801b4da <_dtoa_r+0xad6>
 801b49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	dde4      	ble.n	801b46c <_dtoa_r+0xa68>
 801b4a2:	9905      	ldr	r1, [sp, #20]
 801b4a4:	2201      	movs	r2, #1
 801b4a6:	9803      	ldr	r0, [sp, #12]
 801b4a8:	f000 fbbc 	bl	801bc24 <__lshift>
 801b4ac:	0031      	movs	r1, r6
 801b4ae:	9005      	str	r0, [sp, #20]
 801b4b0:	f000 fc24 	bl	801bcfc <__mcmp>
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	dc02      	bgt.n	801b4be <_dtoa_r+0xaba>
 801b4b8:	d1d8      	bne.n	801b46c <_dtoa_r+0xa68>
 801b4ba:	07eb      	lsls	r3, r5, #31
 801b4bc:	d5d6      	bpl.n	801b46c <_dtoa_r+0xa68>
 801b4be:	2d39      	cmp	r5, #57	@ 0x39
 801b4c0:	d1d2      	bne.n	801b468 <_dtoa_r+0xa64>
 801b4c2:	2339      	movs	r3, #57	@ 0x39
 801b4c4:	9a06      	ldr	r2, [sp, #24]
 801b4c6:	7013      	strb	r3, [r2, #0]
 801b4c8:	0023      	movs	r3, r4
 801b4ca:	001c      	movs	r4, r3
 801b4cc:	3b01      	subs	r3, #1
 801b4ce:	781a      	ldrb	r2, [r3, #0]
 801b4d0:	2a39      	cmp	r2, #57	@ 0x39
 801b4d2:	d050      	beq.n	801b576 <_dtoa_r+0xb72>
 801b4d4:	3201      	adds	r2, #1
 801b4d6:	701a      	strb	r2, [r3, #0]
 801b4d8:	e4fe      	b.n	801aed8 <_dtoa_r+0x4d4>
 801b4da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	dd03      	ble.n	801b4e8 <_dtoa_r+0xae4>
 801b4e0:	2d39      	cmp	r5, #57	@ 0x39
 801b4e2:	d0ee      	beq.n	801b4c2 <_dtoa_r+0xabe>
 801b4e4:	3501      	adds	r5, #1
 801b4e6:	e7c1      	b.n	801b46c <_dtoa_r+0xa68>
 801b4e8:	9b06      	ldr	r3, [sp, #24]
 801b4ea:	9a06      	ldr	r2, [sp, #24]
 801b4ec:	701d      	strb	r5, [r3, #0]
 801b4ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b4f0:	4293      	cmp	r3, r2
 801b4f2:	d02b      	beq.n	801b54c <_dtoa_r+0xb48>
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	220a      	movs	r2, #10
 801b4f8:	9905      	ldr	r1, [sp, #20]
 801b4fa:	9803      	ldr	r0, [sp, #12]
 801b4fc:	f000 f9e0 	bl	801b8c0 <__multadd>
 801b500:	9b04      	ldr	r3, [sp, #16]
 801b502:	9005      	str	r0, [sp, #20]
 801b504:	429f      	cmp	r7, r3
 801b506:	d109      	bne.n	801b51c <_dtoa_r+0xb18>
 801b508:	0039      	movs	r1, r7
 801b50a:	2300      	movs	r3, #0
 801b50c:	220a      	movs	r2, #10
 801b50e:	9803      	ldr	r0, [sp, #12]
 801b510:	f000 f9d6 	bl	801b8c0 <__multadd>
 801b514:	0007      	movs	r7, r0
 801b516:	9004      	str	r0, [sp, #16]
 801b518:	9406      	str	r4, [sp, #24]
 801b51a:	e778      	b.n	801b40e <_dtoa_r+0xa0a>
 801b51c:	0039      	movs	r1, r7
 801b51e:	2300      	movs	r3, #0
 801b520:	220a      	movs	r2, #10
 801b522:	9803      	ldr	r0, [sp, #12]
 801b524:	f000 f9cc 	bl	801b8c0 <__multadd>
 801b528:	2300      	movs	r3, #0
 801b52a:	0007      	movs	r7, r0
 801b52c:	220a      	movs	r2, #10
 801b52e:	9904      	ldr	r1, [sp, #16]
 801b530:	9803      	ldr	r0, [sp, #12]
 801b532:	f000 f9c5 	bl	801b8c0 <__multadd>
 801b536:	9004      	str	r0, [sp, #16]
 801b538:	e7ee      	b.n	801b518 <_dtoa_r+0xb14>
 801b53a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b53c:	2401      	movs	r4, #1
 801b53e:	2b00      	cmp	r3, #0
 801b540:	dd00      	ble.n	801b544 <_dtoa_r+0xb40>
 801b542:	001c      	movs	r4, r3
 801b544:	9704      	str	r7, [sp, #16]
 801b546:	2700      	movs	r7, #0
 801b548:	9b08      	ldr	r3, [sp, #32]
 801b54a:	191c      	adds	r4, r3, r4
 801b54c:	9905      	ldr	r1, [sp, #20]
 801b54e:	2201      	movs	r2, #1
 801b550:	9803      	ldr	r0, [sp, #12]
 801b552:	f000 fb67 	bl	801bc24 <__lshift>
 801b556:	0031      	movs	r1, r6
 801b558:	9005      	str	r0, [sp, #20]
 801b55a:	f000 fbcf 	bl	801bcfc <__mcmp>
 801b55e:	2800      	cmp	r0, #0
 801b560:	dcb2      	bgt.n	801b4c8 <_dtoa_r+0xac4>
 801b562:	d101      	bne.n	801b568 <_dtoa_r+0xb64>
 801b564:	07ed      	lsls	r5, r5, #31
 801b566:	d4af      	bmi.n	801b4c8 <_dtoa_r+0xac4>
 801b568:	0023      	movs	r3, r4
 801b56a:	001c      	movs	r4, r3
 801b56c:	3b01      	subs	r3, #1
 801b56e:	781a      	ldrb	r2, [r3, #0]
 801b570:	2a30      	cmp	r2, #48	@ 0x30
 801b572:	d0fa      	beq.n	801b56a <_dtoa_r+0xb66>
 801b574:	e4b0      	b.n	801aed8 <_dtoa_r+0x4d4>
 801b576:	9a08      	ldr	r2, [sp, #32]
 801b578:	429a      	cmp	r2, r3
 801b57a:	d1a6      	bne.n	801b4ca <_dtoa_r+0xac6>
 801b57c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b57e:	3301      	adds	r3, #1
 801b580:	930c      	str	r3, [sp, #48]	@ 0x30
 801b582:	2331      	movs	r3, #49	@ 0x31
 801b584:	7013      	strb	r3, [r2, #0]
 801b586:	e4a7      	b.n	801aed8 <_dtoa_r+0x4d4>
 801b588:	4b14      	ldr	r3, [pc, #80]	@ (801b5dc <_dtoa_r+0xbd8>)
 801b58a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b58c:	9308      	str	r3, [sp, #32]
 801b58e:	4b14      	ldr	r3, [pc, #80]	@ (801b5e0 <_dtoa_r+0xbdc>)
 801b590:	2a00      	cmp	r2, #0
 801b592:	d001      	beq.n	801b598 <_dtoa_r+0xb94>
 801b594:	f7ff fa7e 	bl	801aa94 <_dtoa_r+0x90>
 801b598:	f7ff fa7e 	bl	801aa98 <_dtoa_r+0x94>
 801b59c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b59e:	2b01      	cmp	r3, #1
 801b5a0:	dc00      	bgt.n	801b5a4 <_dtoa_r+0xba0>
 801b5a2:	e648      	b.n	801b236 <_dtoa_r+0x832>
 801b5a4:	2001      	movs	r0, #1
 801b5a6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b5a8:	e665      	b.n	801b276 <_dtoa_r+0x872>
 801b5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	dc00      	bgt.n	801b5b2 <_dtoa_r+0xbae>
 801b5b0:	e6a9      	b.n	801b306 <_dtoa_r+0x902>
 801b5b2:	2400      	movs	r4, #0
 801b5b4:	0031      	movs	r1, r6
 801b5b6:	9805      	ldr	r0, [sp, #20]
 801b5b8:	f7ff f99f 	bl	801a8fa <quorem>
 801b5bc:	9b08      	ldr	r3, [sp, #32]
 801b5be:	3030      	adds	r0, #48	@ 0x30
 801b5c0:	5518      	strb	r0, [r3, r4]
 801b5c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5c4:	3401      	adds	r4, #1
 801b5c6:	0005      	movs	r5, r0
 801b5c8:	42a3      	cmp	r3, r4
 801b5ca:	ddb6      	ble.n	801b53a <_dtoa_r+0xb36>
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	220a      	movs	r2, #10
 801b5d0:	9905      	ldr	r1, [sp, #20]
 801b5d2:	9803      	ldr	r0, [sp, #12]
 801b5d4:	f000 f974 	bl	801b8c0 <__multadd>
 801b5d8:	9005      	str	r0, [sp, #20]
 801b5da:	e7eb      	b.n	801b5b4 <_dtoa_r+0xbb0>
 801b5dc:	080204f5 	.word	0x080204f5
 801b5e0:	080204fd 	.word	0x080204fd

0801b5e4 <_free_r>:
 801b5e4:	b570      	push	{r4, r5, r6, lr}
 801b5e6:	0005      	movs	r5, r0
 801b5e8:	1e0c      	subs	r4, r1, #0
 801b5ea:	d010      	beq.n	801b60e <_free_r+0x2a>
 801b5ec:	3c04      	subs	r4, #4
 801b5ee:	6823      	ldr	r3, [r4, #0]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	da00      	bge.n	801b5f6 <_free_r+0x12>
 801b5f4:	18e4      	adds	r4, r4, r3
 801b5f6:	0028      	movs	r0, r5
 801b5f8:	f000 f8ea 	bl	801b7d0 <__malloc_lock>
 801b5fc:	4a1d      	ldr	r2, [pc, #116]	@ (801b674 <_free_r+0x90>)
 801b5fe:	6813      	ldr	r3, [r2, #0]
 801b600:	2b00      	cmp	r3, #0
 801b602:	d105      	bne.n	801b610 <_free_r+0x2c>
 801b604:	6063      	str	r3, [r4, #4]
 801b606:	6014      	str	r4, [r2, #0]
 801b608:	0028      	movs	r0, r5
 801b60a:	f000 f8e9 	bl	801b7e0 <__malloc_unlock>
 801b60e:	bd70      	pop	{r4, r5, r6, pc}
 801b610:	42a3      	cmp	r3, r4
 801b612:	d908      	bls.n	801b626 <_free_r+0x42>
 801b614:	6820      	ldr	r0, [r4, #0]
 801b616:	1821      	adds	r1, r4, r0
 801b618:	428b      	cmp	r3, r1
 801b61a:	d1f3      	bne.n	801b604 <_free_r+0x20>
 801b61c:	6819      	ldr	r1, [r3, #0]
 801b61e:	685b      	ldr	r3, [r3, #4]
 801b620:	1809      	adds	r1, r1, r0
 801b622:	6021      	str	r1, [r4, #0]
 801b624:	e7ee      	b.n	801b604 <_free_r+0x20>
 801b626:	001a      	movs	r2, r3
 801b628:	685b      	ldr	r3, [r3, #4]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d001      	beq.n	801b632 <_free_r+0x4e>
 801b62e:	42a3      	cmp	r3, r4
 801b630:	d9f9      	bls.n	801b626 <_free_r+0x42>
 801b632:	6811      	ldr	r1, [r2, #0]
 801b634:	1850      	adds	r0, r2, r1
 801b636:	42a0      	cmp	r0, r4
 801b638:	d10b      	bne.n	801b652 <_free_r+0x6e>
 801b63a:	6820      	ldr	r0, [r4, #0]
 801b63c:	1809      	adds	r1, r1, r0
 801b63e:	1850      	adds	r0, r2, r1
 801b640:	6011      	str	r1, [r2, #0]
 801b642:	4283      	cmp	r3, r0
 801b644:	d1e0      	bne.n	801b608 <_free_r+0x24>
 801b646:	6818      	ldr	r0, [r3, #0]
 801b648:	685b      	ldr	r3, [r3, #4]
 801b64a:	1841      	adds	r1, r0, r1
 801b64c:	6011      	str	r1, [r2, #0]
 801b64e:	6053      	str	r3, [r2, #4]
 801b650:	e7da      	b.n	801b608 <_free_r+0x24>
 801b652:	42a0      	cmp	r0, r4
 801b654:	d902      	bls.n	801b65c <_free_r+0x78>
 801b656:	230c      	movs	r3, #12
 801b658:	602b      	str	r3, [r5, #0]
 801b65a:	e7d5      	b.n	801b608 <_free_r+0x24>
 801b65c:	6820      	ldr	r0, [r4, #0]
 801b65e:	1821      	adds	r1, r4, r0
 801b660:	428b      	cmp	r3, r1
 801b662:	d103      	bne.n	801b66c <_free_r+0x88>
 801b664:	6819      	ldr	r1, [r3, #0]
 801b666:	685b      	ldr	r3, [r3, #4]
 801b668:	1809      	adds	r1, r1, r0
 801b66a:	6021      	str	r1, [r4, #0]
 801b66c:	6063      	str	r3, [r4, #4]
 801b66e:	6054      	str	r4, [r2, #4]
 801b670:	e7ca      	b.n	801b608 <_free_r+0x24>
 801b672:	46c0      	nop			@ (mov r8, r8)
 801b674:	200067f8 	.word	0x200067f8

0801b678 <malloc>:
 801b678:	b510      	push	{r4, lr}
 801b67a:	4b03      	ldr	r3, [pc, #12]	@ (801b688 <malloc+0x10>)
 801b67c:	0001      	movs	r1, r0
 801b67e:	6818      	ldr	r0, [r3, #0]
 801b680:	f000 f826 	bl	801b6d0 <_malloc_r>
 801b684:	bd10      	pop	{r4, pc}
 801b686:	46c0      	nop			@ (mov r8, r8)
 801b688:	200002cc 	.word	0x200002cc

0801b68c <sbrk_aligned>:
 801b68c:	b570      	push	{r4, r5, r6, lr}
 801b68e:	4e0f      	ldr	r6, [pc, #60]	@ (801b6cc <sbrk_aligned+0x40>)
 801b690:	000d      	movs	r5, r1
 801b692:	6831      	ldr	r1, [r6, #0]
 801b694:	0004      	movs	r4, r0
 801b696:	2900      	cmp	r1, #0
 801b698:	d102      	bne.n	801b6a0 <sbrk_aligned+0x14>
 801b69a:	f001 f871 	bl	801c780 <_sbrk_r>
 801b69e:	6030      	str	r0, [r6, #0]
 801b6a0:	0029      	movs	r1, r5
 801b6a2:	0020      	movs	r0, r4
 801b6a4:	f001 f86c 	bl	801c780 <_sbrk_r>
 801b6a8:	1c43      	adds	r3, r0, #1
 801b6aa:	d103      	bne.n	801b6b4 <sbrk_aligned+0x28>
 801b6ac:	2501      	movs	r5, #1
 801b6ae:	426d      	negs	r5, r5
 801b6b0:	0028      	movs	r0, r5
 801b6b2:	bd70      	pop	{r4, r5, r6, pc}
 801b6b4:	2303      	movs	r3, #3
 801b6b6:	1cc5      	adds	r5, r0, #3
 801b6b8:	439d      	bics	r5, r3
 801b6ba:	42a8      	cmp	r0, r5
 801b6bc:	d0f8      	beq.n	801b6b0 <sbrk_aligned+0x24>
 801b6be:	1a29      	subs	r1, r5, r0
 801b6c0:	0020      	movs	r0, r4
 801b6c2:	f001 f85d 	bl	801c780 <_sbrk_r>
 801b6c6:	3001      	adds	r0, #1
 801b6c8:	d1f2      	bne.n	801b6b0 <sbrk_aligned+0x24>
 801b6ca:	e7ef      	b.n	801b6ac <sbrk_aligned+0x20>
 801b6cc:	200067f4 	.word	0x200067f4

0801b6d0 <_malloc_r>:
 801b6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b6d2:	2203      	movs	r2, #3
 801b6d4:	1ccb      	adds	r3, r1, #3
 801b6d6:	4393      	bics	r3, r2
 801b6d8:	3308      	adds	r3, #8
 801b6da:	0005      	movs	r5, r0
 801b6dc:	001f      	movs	r7, r3
 801b6de:	2b0c      	cmp	r3, #12
 801b6e0:	d234      	bcs.n	801b74c <_malloc_r+0x7c>
 801b6e2:	270c      	movs	r7, #12
 801b6e4:	42b9      	cmp	r1, r7
 801b6e6:	d833      	bhi.n	801b750 <_malloc_r+0x80>
 801b6e8:	0028      	movs	r0, r5
 801b6ea:	f000 f871 	bl	801b7d0 <__malloc_lock>
 801b6ee:	4e37      	ldr	r6, [pc, #220]	@ (801b7cc <_malloc_r+0xfc>)
 801b6f0:	6833      	ldr	r3, [r6, #0]
 801b6f2:	001c      	movs	r4, r3
 801b6f4:	2c00      	cmp	r4, #0
 801b6f6:	d12f      	bne.n	801b758 <_malloc_r+0x88>
 801b6f8:	0039      	movs	r1, r7
 801b6fa:	0028      	movs	r0, r5
 801b6fc:	f7ff ffc6 	bl	801b68c <sbrk_aligned>
 801b700:	0004      	movs	r4, r0
 801b702:	1c43      	adds	r3, r0, #1
 801b704:	d15f      	bne.n	801b7c6 <_malloc_r+0xf6>
 801b706:	6834      	ldr	r4, [r6, #0]
 801b708:	9400      	str	r4, [sp, #0]
 801b70a:	9b00      	ldr	r3, [sp, #0]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d14a      	bne.n	801b7a6 <_malloc_r+0xd6>
 801b710:	2c00      	cmp	r4, #0
 801b712:	d052      	beq.n	801b7ba <_malloc_r+0xea>
 801b714:	6823      	ldr	r3, [r4, #0]
 801b716:	0028      	movs	r0, r5
 801b718:	18e3      	adds	r3, r4, r3
 801b71a:	9900      	ldr	r1, [sp, #0]
 801b71c:	9301      	str	r3, [sp, #4]
 801b71e:	f001 f82f 	bl	801c780 <_sbrk_r>
 801b722:	9b01      	ldr	r3, [sp, #4]
 801b724:	4283      	cmp	r3, r0
 801b726:	d148      	bne.n	801b7ba <_malloc_r+0xea>
 801b728:	6823      	ldr	r3, [r4, #0]
 801b72a:	0028      	movs	r0, r5
 801b72c:	1aff      	subs	r7, r7, r3
 801b72e:	0039      	movs	r1, r7
 801b730:	f7ff ffac 	bl	801b68c <sbrk_aligned>
 801b734:	3001      	adds	r0, #1
 801b736:	d040      	beq.n	801b7ba <_malloc_r+0xea>
 801b738:	6823      	ldr	r3, [r4, #0]
 801b73a:	19db      	adds	r3, r3, r7
 801b73c:	6023      	str	r3, [r4, #0]
 801b73e:	6833      	ldr	r3, [r6, #0]
 801b740:	685a      	ldr	r2, [r3, #4]
 801b742:	2a00      	cmp	r2, #0
 801b744:	d133      	bne.n	801b7ae <_malloc_r+0xde>
 801b746:	9b00      	ldr	r3, [sp, #0]
 801b748:	6033      	str	r3, [r6, #0]
 801b74a:	e019      	b.n	801b780 <_malloc_r+0xb0>
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	dac9      	bge.n	801b6e4 <_malloc_r+0x14>
 801b750:	230c      	movs	r3, #12
 801b752:	602b      	str	r3, [r5, #0]
 801b754:	2000      	movs	r0, #0
 801b756:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b758:	6821      	ldr	r1, [r4, #0]
 801b75a:	1bc9      	subs	r1, r1, r7
 801b75c:	d420      	bmi.n	801b7a0 <_malloc_r+0xd0>
 801b75e:	290b      	cmp	r1, #11
 801b760:	d90a      	bls.n	801b778 <_malloc_r+0xa8>
 801b762:	19e2      	adds	r2, r4, r7
 801b764:	6027      	str	r7, [r4, #0]
 801b766:	42a3      	cmp	r3, r4
 801b768:	d104      	bne.n	801b774 <_malloc_r+0xa4>
 801b76a:	6032      	str	r2, [r6, #0]
 801b76c:	6863      	ldr	r3, [r4, #4]
 801b76e:	6011      	str	r1, [r2, #0]
 801b770:	6053      	str	r3, [r2, #4]
 801b772:	e005      	b.n	801b780 <_malloc_r+0xb0>
 801b774:	605a      	str	r2, [r3, #4]
 801b776:	e7f9      	b.n	801b76c <_malloc_r+0x9c>
 801b778:	6862      	ldr	r2, [r4, #4]
 801b77a:	42a3      	cmp	r3, r4
 801b77c:	d10e      	bne.n	801b79c <_malloc_r+0xcc>
 801b77e:	6032      	str	r2, [r6, #0]
 801b780:	0028      	movs	r0, r5
 801b782:	f000 f82d 	bl	801b7e0 <__malloc_unlock>
 801b786:	0020      	movs	r0, r4
 801b788:	2207      	movs	r2, #7
 801b78a:	300b      	adds	r0, #11
 801b78c:	1d23      	adds	r3, r4, #4
 801b78e:	4390      	bics	r0, r2
 801b790:	1ac2      	subs	r2, r0, r3
 801b792:	4298      	cmp	r0, r3
 801b794:	d0df      	beq.n	801b756 <_malloc_r+0x86>
 801b796:	1a1b      	subs	r3, r3, r0
 801b798:	50a3      	str	r3, [r4, r2]
 801b79a:	e7dc      	b.n	801b756 <_malloc_r+0x86>
 801b79c:	605a      	str	r2, [r3, #4]
 801b79e:	e7ef      	b.n	801b780 <_malloc_r+0xb0>
 801b7a0:	0023      	movs	r3, r4
 801b7a2:	6864      	ldr	r4, [r4, #4]
 801b7a4:	e7a6      	b.n	801b6f4 <_malloc_r+0x24>
 801b7a6:	9c00      	ldr	r4, [sp, #0]
 801b7a8:	6863      	ldr	r3, [r4, #4]
 801b7aa:	9300      	str	r3, [sp, #0]
 801b7ac:	e7ad      	b.n	801b70a <_malloc_r+0x3a>
 801b7ae:	001a      	movs	r2, r3
 801b7b0:	685b      	ldr	r3, [r3, #4]
 801b7b2:	42a3      	cmp	r3, r4
 801b7b4:	d1fb      	bne.n	801b7ae <_malloc_r+0xde>
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	e7da      	b.n	801b770 <_malloc_r+0xa0>
 801b7ba:	230c      	movs	r3, #12
 801b7bc:	0028      	movs	r0, r5
 801b7be:	602b      	str	r3, [r5, #0]
 801b7c0:	f000 f80e 	bl	801b7e0 <__malloc_unlock>
 801b7c4:	e7c6      	b.n	801b754 <_malloc_r+0x84>
 801b7c6:	6007      	str	r7, [r0, #0]
 801b7c8:	e7da      	b.n	801b780 <_malloc_r+0xb0>
 801b7ca:	46c0      	nop			@ (mov r8, r8)
 801b7cc:	200067f8 	.word	0x200067f8

0801b7d0 <__malloc_lock>:
 801b7d0:	b510      	push	{r4, lr}
 801b7d2:	4802      	ldr	r0, [pc, #8]	@ (801b7dc <__malloc_lock+0xc>)
 801b7d4:	f7ff f873 	bl	801a8be <__retarget_lock_acquire_recursive>
 801b7d8:	bd10      	pop	{r4, pc}
 801b7da:	46c0      	nop			@ (mov r8, r8)
 801b7dc:	200067f0 	.word	0x200067f0

0801b7e0 <__malloc_unlock>:
 801b7e0:	b510      	push	{r4, lr}
 801b7e2:	4802      	ldr	r0, [pc, #8]	@ (801b7ec <__malloc_unlock+0xc>)
 801b7e4:	f7ff f86c 	bl	801a8c0 <__retarget_lock_release_recursive>
 801b7e8:	bd10      	pop	{r4, pc}
 801b7ea:	46c0      	nop			@ (mov r8, r8)
 801b7ec:	200067f0 	.word	0x200067f0

0801b7f0 <_Balloc>:
 801b7f0:	b570      	push	{r4, r5, r6, lr}
 801b7f2:	69c5      	ldr	r5, [r0, #28]
 801b7f4:	0006      	movs	r6, r0
 801b7f6:	000c      	movs	r4, r1
 801b7f8:	2d00      	cmp	r5, #0
 801b7fa:	d10e      	bne.n	801b81a <_Balloc+0x2a>
 801b7fc:	2010      	movs	r0, #16
 801b7fe:	f7ff ff3b 	bl	801b678 <malloc>
 801b802:	1e02      	subs	r2, r0, #0
 801b804:	61f0      	str	r0, [r6, #28]
 801b806:	d104      	bne.n	801b812 <_Balloc+0x22>
 801b808:	216b      	movs	r1, #107	@ 0x6b
 801b80a:	4b19      	ldr	r3, [pc, #100]	@ (801b870 <_Balloc+0x80>)
 801b80c:	4819      	ldr	r0, [pc, #100]	@ (801b874 <_Balloc+0x84>)
 801b80e:	f000 ffc9 	bl	801c7a4 <__assert_func>
 801b812:	6045      	str	r5, [r0, #4]
 801b814:	6085      	str	r5, [r0, #8]
 801b816:	6005      	str	r5, [r0, #0]
 801b818:	60c5      	str	r5, [r0, #12]
 801b81a:	69f5      	ldr	r5, [r6, #28]
 801b81c:	68eb      	ldr	r3, [r5, #12]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d013      	beq.n	801b84a <_Balloc+0x5a>
 801b822:	69f3      	ldr	r3, [r6, #28]
 801b824:	00a2      	lsls	r2, r4, #2
 801b826:	68db      	ldr	r3, [r3, #12]
 801b828:	189b      	adds	r3, r3, r2
 801b82a:	6818      	ldr	r0, [r3, #0]
 801b82c:	2800      	cmp	r0, #0
 801b82e:	d118      	bne.n	801b862 <_Balloc+0x72>
 801b830:	2101      	movs	r1, #1
 801b832:	000d      	movs	r5, r1
 801b834:	40a5      	lsls	r5, r4
 801b836:	1d6a      	adds	r2, r5, #5
 801b838:	0030      	movs	r0, r6
 801b83a:	0092      	lsls	r2, r2, #2
 801b83c:	f000 ffd0 	bl	801c7e0 <_calloc_r>
 801b840:	2800      	cmp	r0, #0
 801b842:	d00c      	beq.n	801b85e <_Balloc+0x6e>
 801b844:	6044      	str	r4, [r0, #4]
 801b846:	6085      	str	r5, [r0, #8]
 801b848:	e00d      	b.n	801b866 <_Balloc+0x76>
 801b84a:	2221      	movs	r2, #33	@ 0x21
 801b84c:	2104      	movs	r1, #4
 801b84e:	0030      	movs	r0, r6
 801b850:	f000 ffc6 	bl	801c7e0 <_calloc_r>
 801b854:	69f3      	ldr	r3, [r6, #28]
 801b856:	60e8      	str	r0, [r5, #12]
 801b858:	68db      	ldr	r3, [r3, #12]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d1e1      	bne.n	801b822 <_Balloc+0x32>
 801b85e:	2000      	movs	r0, #0
 801b860:	bd70      	pop	{r4, r5, r6, pc}
 801b862:	6802      	ldr	r2, [r0, #0]
 801b864:	601a      	str	r2, [r3, #0]
 801b866:	2300      	movs	r3, #0
 801b868:	6103      	str	r3, [r0, #16]
 801b86a:	60c3      	str	r3, [r0, #12]
 801b86c:	e7f8      	b.n	801b860 <_Balloc+0x70>
 801b86e:	46c0      	nop			@ (mov r8, r8)
 801b870:	08020502 	.word	0x08020502
 801b874:	08020582 	.word	0x08020582

0801b878 <_Bfree>:
 801b878:	b570      	push	{r4, r5, r6, lr}
 801b87a:	69c6      	ldr	r6, [r0, #28]
 801b87c:	0005      	movs	r5, r0
 801b87e:	000c      	movs	r4, r1
 801b880:	2e00      	cmp	r6, #0
 801b882:	d10e      	bne.n	801b8a2 <_Bfree+0x2a>
 801b884:	2010      	movs	r0, #16
 801b886:	f7ff fef7 	bl	801b678 <malloc>
 801b88a:	1e02      	subs	r2, r0, #0
 801b88c:	61e8      	str	r0, [r5, #28]
 801b88e:	d104      	bne.n	801b89a <_Bfree+0x22>
 801b890:	218f      	movs	r1, #143	@ 0x8f
 801b892:	4b09      	ldr	r3, [pc, #36]	@ (801b8b8 <_Bfree+0x40>)
 801b894:	4809      	ldr	r0, [pc, #36]	@ (801b8bc <_Bfree+0x44>)
 801b896:	f000 ff85 	bl	801c7a4 <__assert_func>
 801b89a:	6046      	str	r6, [r0, #4]
 801b89c:	6086      	str	r6, [r0, #8]
 801b89e:	6006      	str	r6, [r0, #0]
 801b8a0:	60c6      	str	r6, [r0, #12]
 801b8a2:	2c00      	cmp	r4, #0
 801b8a4:	d007      	beq.n	801b8b6 <_Bfree+0x3e>
 801b8a6:	69eb      	ldr	r3, [r5, #28]
 801b8a8:	6862      	ldr	r2, [r4, #4]
 801b8aa:	68db      	ldr	r3, [r3, #12]
 801b8ac:	0092      	lsls	r2, r2, #2
 801b8ae:	189b      	adds	r3, r3, r2
 801b8b0:	681a      	ldr	r2, [r3, #0]
 801b8b2:	6022      	str	r2, [r4, #0]
 801b8b4:	601c      	str	r4, [r3, #0]
 801b8b6:	bd70      	pop	{r4, r5, r6, pc}
 801b8b8:	08020502 	.word	0x08020502
 801b8bc:	08020582 	.word	0x08020582

0801b8c0 <__multadd>:
 801b8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b8c2:	000f      	movs	r7, r1
 801b8c4:	9001      	str	r0, [sp, #4]
 801b8c6:	000c      	movs	r4, r1
 801b8c8:	001e      	movs	r6, r3
 801b8ca:	2000      	movs	r0, #0
 801b8cc:	690d      	ldr	r5, [r1, #16]
 801b8ce:	3714      	adds	r7, #20
 801b8d0:	683b      	ldr	r3, [r7, #0]
 801b8d2:	3001      	adds	r0, #1
 801b8d4:	b299      	uxth	r1, r3
 801b8d6:	4351      	muls	r1, r2
 801b8d8:	0c1b      	lsrs	r3, r3, #16
 801b8da:	4353      	muls	r3, r2
 801b8dc:	1989      	adds	r1, r1, r6
 801b8de:	0c0e      	lsrs	r6, r1, #16
 801b8e0:	199b      	adds	r3, r3, r6
 801b8e2:	0c1e      	lsrs	r6, r3, #16
 801b8e4:	b289      	uxth	r1, r1
 801b8e6:	041b      	lsls	r3, r3, #16
 801b8e8:	185b      	adds	r3, r3, r1
 801b8ea:	c708      	stmia	r7!, {r3}
 801b8ec:	4285      	cmp	r5, r0
 801b8ee:	dcef      	bgt.n	801b8d0 <__multadd+0x10>
 801b8f0:	2e00      	cmp	r6, #0
 801b8f2:	d022      	beq.n	801b93a <__multadd+0x7a>
 801b8f4:	68a3      	ldr	r3, [r4, #8]
 801b8f6:	42ab      	cmp	r3, r5
 801b8f8:	dc19      	bgt.n	801b92e <__multadd+0x6e>
 801b8fa:	6861      	ldr	r1, [r4, #4]
 801b8fc:	9801      	ldr	r0, [sp, #4]
 801b8fe:	3101      	adds	r1, #1
 801b900:	f7ff ff76 	bl	801b7f0 <_Balloc>
 801b904:	1e07      	subs	r7, r0, #0
 801b906:	d105      	bne.n	801b914 <__multadd+0x54>
 801b908:	003a      	movs	r2, r7
 801b90a:	21ba      	movs	r1, #186	@ 0xba
 801b90c:	4b0c      	ldr	r3, [pc, #48]	@ (801b940 <__multadd+0x80>)
 801b90e:	480d      	ldr	r0, [pc, #52]	@ (801b944 <__multadd+0x84>)
 801b910:	f000 ff48 	bl	801c7a4 <__assert_func>
 801b914:	0021      	movs	r1, r4
 801b916:	6922      	ldr	r2, [r4, #16]
 801b918:	310c      	adds	r1, #12
 801b91a:	3202      	adds	r2, #2
 801b91c:	0092      	lsls	r2, r2, #2
 801b91e:	300c      	adds	r0, #12
 801b920:	f7fe ffe2 	bl	801a8e8 <memcpy>
 801b924:	0021      	movs	r1, r4
 801b926:	9801      	ldr	r0, [sp, #4]
 801b928:	f7ff ffa6 	bl	801b878 <_Bfree>
 801b92c:	003c      	movs	r4, r7
 801b92e:	1d2b      	adds	r3, r5, #4
 801b930:	009b      	lsls	r3, r3, #2
 801b932:	18e3      	adds	r3, r4, r3
 801b934:	3501      	adds	r5, #1
 801b936:	605e      	str	r6, [r3, #4]
 801b938:	6125      	str	r5, [r4, #16]
 801b93a:	0020      	movs	r0, r4
 801b93c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b93e:	46c0      	nop			@ (mov r8, r8)
 801b940:	08020571 	.word	0x08020571
 801b944:	08020582 	.word	0x08020582

0801b948 <__hi0bits>:
 801b948:	2280      	movs	r2, #128	@ 0x80
 801b94a:	0003      	movs	r3, r0
 801b94c:	0252      	lsls	r2, r2, #9
 801b94e:	2000      	movs	r0, #0
 801b950:	4293      	cmp	r3, r2
 801b952:	d201      	bcs.n	801b958 <__hi0bits+0x10>
 801b954:	041b      	lsls	r3, r3, #16
 801b956:	3010      	adds	r0, #16
 801b958:	2280      	movs	r2, #128	@ 0x80
 801b95a:	0452      	lsls	r2, r2, #17
 801b95c:	4293      	cmp	r3, r2
 801b95e:	d201      	bcs.n	801b964 <__hi0bits+0x1c>
 801b960:	3008      	adds	r0, #8
 801b962:	021b      	lsls	r3, r3, #8
 801b964:	2280      	movs	r2, #128	@ 0x80
 801b966:	0552      	lsls	r2, r2, #21
 801b968:	4293      	cmp	r3, r2
 801b96a:	d201      	bcs.n	801b970 <__hi0bits+0x28>
 801b96c:	3004      	adds	r0, #4
 801b96e:	011b      	lsls	r3, r3, #4
 801b970:	2280      	movs	r2, #128	@ 0x80
 801b972:	05d2      	lsls	r2, r2, #23
 801b974:	4293      	cmp	r3, r2
 801b976:	d201      	bcs.n	801b97c <__hi0bits+0x34>
 801b978:	3002      	adds	r0, #2
 801b97a:	009b      	lsls	r3, r3, #2
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	db03      	blt.n	801b988 <__hi0bits+0x40>
 801b980:	3001      	adds	r0, #1
 801b982:	4213      	tst	r3, r2
 801b984:	d100      	bne.n	801b988 <__hi0bits+0x40>
 801b986:	2020      	movs	r0, #32
 801b988:	4770      	bx	lr

0801b98a <__lo0bits>:
 801b98a:	6803      	ldr	r3, [r0, #0]
 801b98c:	0001      	movs	r1, r0
 801b98e:	2207      	movs	r2, #7
 801b990:	0018      	movs	r0, r3
 801b992:	4010      	ands	r0, r2
 801b994:	4213      	tst	r3, r2
 801b996:	d00d      	beq.n	801b9b4 <__lo0bits+0x2a>
 801b998:	3a06      	subs	r2, #6
 801b99a:	2000      	movs	r0, #0
 801b99c:	4213      	tst	r3, r2
 801b99e:	d105      	bne.n	801b9ac <__lo0bits+0x22>
 801b9a0:	3002      	adds	r0, #2
 801b9a2:	4203      	tst	r3, r0
 801b9a4:	d003      	beq.n	801b9ae <__lo0bits+0x24>
 801b9a6:	40d3      	lsrs	r3, r2
 801b9a8:	0010      	movs	r0, r2
 801b9aa:	600b      	str	r3, [r1, #0]
 801b9ac:	4770      	bx	lr
 801b9ae:	089b      	lsrs	r3, r3, #2
 801b9b0:	600b      	str	r3, [r1, #0]
 801b9b2:	e7fb      	b.n	801b9ac <__lo0bits+0x22>
 801b9b4:	b29a      	uxth	r2, r3
 801b9b6:	2a00      	cmp	r2, #0
 801b9b8:	d101      	bne.n	801b9be <__lo0bits+0x34>
 801b9ba:	2010      	movs	r0, #16
 801b9bc:	0c1b      	lsrs	r3, r3, #16
 801b9be:	b2da      	uxtb	r2, r3
 801b9c0:	2a00      	cmp	r2, #0
 801b9c2:	d101      	bne.n	801b9c8 <__lo0bits+0x3e>
 801b9c4:	3008      	adds	r0, #8
 801b9c6:	0a1b      	lsrs	r3, r3, #8
 801b9c8:	071a      	lsls	r2, r3, #28
 801b9ca:	d101      	bne.n	801b9d0 <__lo0bits+0x46>
 801b9cc:	3004      	adds	r0, #4
 801b9ce:	091b      	lsrs	r3, r3, #4
 801b9d0:	079a      	lsls	r2, r3, #30
 801b9d2:	d101      	bne.n	801b9d8 <__lo0bits+0x4e>
 801b9d4:	3002      	adds	r0, #2
 801b9d6:	089b      	lsrs	r3, r3, #2
 801b9d8:	07da      	lsls	r2, r3, #31
 801b9da:	d4e9      	bmi.n	801b9b0 <__lo0bits+0x26>
 801b9dc:	3001      	adds	r0, #1
 801b9de:	085b      	lsrs	r3, r3, #1
 801b9e0:	d1e6      	bne.n	801b9b0 <__lo0bits+0x26>
 801b9e2:	2020      	movs	r0, #32
 801b9e4:	e7e2      	b.n	801b9ac <__lo0bits+0x22>
	...

0801b9e8 <__i2b>:
 801b9e8:	b510      	push	{r4, lr}
 801b9ea:	000c      	movs	r4, r1
 801b9ec:	2101      	movs	r1, #1
 801b9ee:	f7ff feff 	bl	801b7f0 <_Balloc>
 801b9f2:	2800      	cmp	r0, #0
 801b9f4:	d107      	bne.n	801ba06 <__i2b+0x1e>
 801b9f6:	2146      	movs	r1, #70	@ 0x46
 801b9f8:	4c05      	ldr	r4, [pc, #20]	@ (801ba10 <__i2b+0x28>)
 801b9fa:	0002      	movs	r2, r0
 801b9fc:	4b05      	ldr	r3, [pc, #20]	@ (801ba14 <__i2b+0x2c>)
 801b9fe:	0020      	movs	r0, r4
 801ba00:	31ff      	adds	r1, #255	@ 0xff
 801ba02:	f000 fecf 	bl	801c7a4 <__assert_func>
 801ba06:	2301      	movs	r3, #1
 801ba08:	6144      	str	r4, [r0, #20]
 801ba0a:	6103      	str	r3, [r0, #16]
 801ba0c:	bd10      	pop	{r4, pc}
 801ba0e:	46c0      	nop			@ (mov r8, r8)
 801ba10:	08020582 	.word	0x08020582
 801ba14:	08020571 	.word	0x08020571

0801ba18 <__multiply>:
 801ba18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba1a:	0014      	movs	r4, r2
 801ba1c:	690a      	ldr	r2, [r1, #16]
 801ba1e:	6923      	ldr	r3, [r4, #16]
 801ba20:	000d      	movs	r5, r1
 801ba22:	b089      	sub	sp, #36	@ 0x24
 801ba24:	429a      	cmp	r2, r3
 801ba26:	db02      	blt.n	801ba2e <__multiply+0x16>
 801ba28:	0023      	movs	r3, r4
 801ba2a:	000c      	movs	r4, r1
 801ba2c:	001d      	movs	r5, r3
 801ba2e:	6927      	ldr	r7, [r4, #16]
 801ba30:	692e      	ldr	r6, [r5, #16]
 801ba32:	6861      	ldr	r1, [r4, #4]
 801ba34:	19bb      	adds	r3, r7, r6
 801ba36:	9300      	str	r3, [sp, #0]
 801ba38:	68a3      	ldr	r3, [r4, #8]
 801ba3a:	19ba      	adds	r2, r7, r6
 801ba3c:	4293      	cmp	r3, r2
 801ba3e:	da00      	bge.n	801ba42 <__multiply+0x2a>
 801ba40:	3101      	adds	r1, #1
 801ba42:	f7ff fed5 	bl	801b7f0 <_Balloc>
 801ba46:	4684      	mov	ip, r0
 801ba48:	2800      	cmp	r0, #0
 801ba4a:	d106      	bne.n	801ba5a <__multiply+0x42>
 801ba4c:	21b1      	movs	r1, #177	@ 0xb1
 801ba4e:	4662      	mov	r2, ip
 801ba50:	4b44      	ldr	r3, [pc, #272]	@ (801bb64 <__multiply+0x14c>)
 801ba52:	4845      	ldr	r0, [pc, #276]	@ (801bb68 <__multiply+0x150>)
 801ba54:	0049      	lsls	r1, r1, #1
 801ba56:	f000 fea5 	bl	801c7a4 <__assert_func>
 801ba5a:	0002      	movs	r2, r0
 801ba5c:	19bb      	adds	r3, r7, r6
 801ba5e:	3214      	adds	r2, #20
 801ba60:	009b      	lsls	r3, r3, #2
 801ba62:	18d3      	adds	r3, r2, r3
 801ba64:	9301      	str	r3, [sp, #4]
 801ba66:	2100      	movs	r1, #0
 801ba68:	0013      	movs	r3, r2
 801ba6a:	9801      	ldr	r0, [sp, #4]
 801ba6c:	4283      	cmp	r3, r0
 801ba6e:	d328      	bcc.n	801bac2 <__multiply+0xaa>
 801ba70:	0023      	movs	r3, r4
 801ba72:	00bf      	lsls	r7, r7, #2
 801ba74:	3314      	adds	r3, #20
 801ba76:	9304      	str	r3, [sp, #16]
 801ba78:	3514      	adds	r5, #20
 801ba7a:	19db      	adds	r3, r3, r7
 801ba7c:	00b6      	lsls	r6, r6, #2
 801ba7e:	9302      	str	r3, [sp, #8]
 801ba80:	19ab      	adds	r3, r5, r6
 801ba82:	9307      	str	r3, [sp, #28]
 801ba84:	2304      	movs	r3, #4
 801ba86:	9305      	str	r3, [sp, #20]
 801ba88:	0023      	movs	r3, r4
 801ba8a:	9902      	ldr	r1, [sp, #8]
 801ba8c:	3315      	adds	r3, #21
 801ba8e:	4299      	cmp	r1, r3
 801ba90:	d305      	bcc.n	801ba9e <__multiply+0x86>
 801ba92:	1b0c      	subs	r4, r1, r4
 801ba94:	3c15      	subs	r4, #21
 801ba96:	08a4      	lsrs	r4, r4, #2
 801ba98:	3401      	adds	r4, #1
 801ba9a:	00a3      	lsls	r3, r4, #2
 801ba9c:	9305      	str	r3, [sp, #20]
 801ba9e:	9b07      	ldr	r3, [sp, #28]
 801baa0:	429d      	cmp	r5, r3
 801baa2:	d310      	bcc.n	801bac6 <__multiply+0xae>
 801baa4:	9b00      	ldr	r3, [sp, #0]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	dd05      	ble.n	801bab6 <__multiply+0x9e>
 801baaa:	9b01      	ldr	r3, [sp, #4]
 801baac:	3b04      	subs	r3, #4
 801baae:	9301      	str	r3, [sp, #4]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d052      	beq.n	801bb5c <__multiply+0x144>
 801bab6:	4663      	mov	r3, ip
 801bab8:	4660      	mov	r0, ip
 801baba:	9a00      	ldr	r2, [sp, #0]
 801babc:	611a      	str	r2, [r3, #16]
 801babe:	b009      	add	sp, #36	@ 0x24
 801bac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bac2:	c302      	stmia	r3!, {r1}
 801bac4:	e7d1      	b.n	801ba6a <__multiply+0x52>
 801bac6:	682c      	ldr	r4, [r5, #0]
 801bac8:	b2a4      	uxth	r4, r4
 801baca:	2c00      	cmp	r4, #0
 801bacc:	d01f      	beq.n	801bb0e <__multiply+0xf6>
 801bace:	2300      	movs	r3, #0
 801bad0:	0017      	movs	r7, r2
 801bad2:	9e04      	ldr	r6, [sp, #16]
 801bad4:	9303      	str	r3, [sp, #12]
 801bad6:	ce08      	ldmia	r6!, {r3}
 801bad8:	6839      	ldr	r1, [r7, #0]
 801bada:	9306      	str	r3, [sp, #24]
 801badc:	466b      	mov	r3, sp
 801bade:	8b1b      	ldrh	r3, [r3, #24]
 801bae0:	b288      	uxth	r0, r1
 801bae2:	4363      	muls	r3, r4
 801bae4:	181b      	adds	r3, r3, r0
 801bae6:	9803      	ldr	r0, [sp, #12]
 801bae8:	0c09      	lsrs	r1, r1, #16
 801baea:	181b      	adds	r3, r3, r0
 801baec:	9806      	ldr	r0, [sp, #24]
 801baee:	0c00      	lsrs	r0, r0, #16
 801baf0:	4360      	muls	r0, r4
 801baf2:	1840      	adds	r0, r0, r1
 801baf4:	0c19      	lsrs	r1, r3, #16
 801baf6:	1841      	adds	r1, r0, r1
 801baf8:	0c08      	lsrs	r0, r1, #16
 801bafa:	b29b      	uxth	r3, r3
 801bafc:	0409      	lsls	r1, r1, #16
 801bafe:	4319      	orrs	r1, r3
 801bb00:	9b02      	ldr	r3, [sp, #8]
 801bb02:	9003      	str	r0, [sp, #12]
 801bb04:	c702      	stmia	r7!, {r1}
 801bb06:	42b3      	cmp	r3, r6
 801bb08:	d8e5      	bhi.n	801bad6 <__multiply+0xbe>
 801bb0a:	9b05      	ldr	r3, [sp, #20]
 801bb0c:	50d0      	str	r0, [r2, r3]
 801bb0e:	682c      	ldr	r4, [r5, #0]
 801bb10:	0c24      	lsrs	r4, r4, #16
 801bb12:	d020      	beq.n	801bb56 <__multiply+0x13e>
 801bb14:	2100      	movs	r1, #0
 801bb16:	0010      	movs	r0, r2
 801bb18:	6813      	ldr	r3, [r2, #0]
 801bb1a:	9e04      	ldr	r6, [sp, #16]
 801bb1c:	9103      	str	r1, [sp, #12]
 801bb1e:	6831      	ldr	r1, [r6, #0]
 801bb20:	6807      	ldr	r7, [r0, #0]
 801bb22:	b289      	uxth	r1, r1
 801bb24:	4361      	muls	r1, r4
 801bb26:	0c3f      	lsrs	r7, r7, #16
 801bb28:	19c9      	adds	r1, r1, r7
 801bb2a:	9f03      	ldr	r7, [sp, #12]
 801bb2c:	b29b      	uxth	r3, r3
 801bb2e:	19c9      	adds	r1, r1, r7
 801bb30:	040f      	lsls	r7, r1, #16
 801bb32:	431f      	orrs	r7, r3
 801bb34:	6007      	str	r7, [r0, #0]
 801bb36:	ce80      	ldmia	r6!, {r7}
 801bb38:	6843      	ldr	r3, [r0, #4]
 801bb3a:	0c3f      	lsrs	r7, r7, #16
 801bb3c:	4367      	muls	r7, r4
 801bb3e:	b29b      	uxth	r3, r3
 801bb40:	0c09      	lsrs	r1, r1, #16
 801bb42:	18fb      	adds	r3, r7, r3
 801bb44:	185b      	adds	r3, r3, r1
 801bb46:	0c19      	lsrs	r1, r3, #16
 801bb48:	9103      	str	r1, [sp, #12]
 801bb4a:	9902      	ldr	r1, [sp, #8]
 801bb4c:	3004      	adds	r0, #4
 801bb4e:	42b1      	cmp	r1, r6
 801bb50:	d8e5      	bhi.n	801bb1e <__multiply+0x106>
 801bb52:	9905      	ldr	r1, [sp, #20]
 801bb54:	5053      	str	r3, [r2, r1]
 801bb56:	3504      	adds	r5, #4
 801bb58:	3204      	adds	r2, #4
 801bb5a:	e7a0      	b.n	801ba9e <__multiply+0x86>
 801bb5c:	9b00      	ldr	r3, [sp, #0]
 801bb5e:	3b01      	subs	r3, #1
 801bb60:	9300      	str	r3, [sp, #0]
 801bb62:	e79f      	b.n	801baa4 <__multiply+0x8c>
 801bb64:	08020571 	.word	0x08020571
 801bb68:	08020582 	.word	0x08020582

0801bb6c <__pow5mult>:
 801bb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb6e:	2303      	movs	r3, #3
 801bb70:	0015      	movs	r5, r2
 801bb72:	0007      	movs	r7, r0
 801bb74:	000e      	movs	r6, r1
 801bb76:	401a      	ands	r2, r3
 801bb78:	421d      	tst	r5, r3
 801bb7a:	d008      	beq.n	801bb8e <__pow5mult+0x22>
 801bb7c:	4925      	ldr	r1, [pc, #148]	@ (801bc14 <__pow5mult+0xa8>)
 801bb7e:	3a01      	subs	r2, #1
 801bb80:	0092      	lsls	r2, r2, #2
 801bb82:	5852      	ldr	r2, [r2, r1]
 801bb84:	2300      	movs	r3, #0
 801bb86:	0031      	movs	r1, r6
 801bb88:	f7ff fe9a 	bl	801b8c0 <__multadd>
 801bb8c:	0006      	movs	r6, r0
 801bb8e:	10ad      	asrs	r5, r5, #2
 801bb90:	d03d      	beq.n	801bc0e <__pow5mult+0xa2>
 801bb92:	69fc      	ldr	r4, [r7, #28]
 801bb94:	2c00      	cmp	r4, #0
 801bb96:	d10f      	bne.n	801bbb8 <__pow5mult+0x4c>
 801bb98:	2010      	movs	r0, #16
 801bb9a:	f7ff fd6d 	bl	801b678 <malloc>
 801bb9e:	1e02      	subs	r2, r0, #0
 801bba0:	61f8      	str	r0, [r7, #28]
 801bba2:	d105      	bne.n	801bbb0 <__pow5mult+0x44>
 801bba4:	21b4      	movs	r1, #180	@ 0xb4
 801bba6:	4b1c      	ldr	r3, [pc, #112]	@ (801bc18 <__pow5mult+0xac>)
 801bba8:	481c      	ldr	r0, [pc, #112]	@ (801bc1c <__pow5mult+0xb0>)
 801bbaa:	31ff      	adds	r1, #255	@ 0xff
 801bbac:	f000 fdfa 	bl	801c7a4 <__assert_func>
 801bbb0:	6044      	str	r4, [r0, #4]
 801bbb2:	6084      	str	r4, [r0, #8]
 801bbb4:	6004      	str	r4, [r0, #0]
 801bbb6:	60c4      	str	r4, [r0, #12]
 801bbb8:	69fb      	ldr	r3, [r7, #28]
 801bbba:	689c      	ldr	r4, [r3, #8]
 801bbbc:	9301      	str	r3, [sp, #4]
 801bbbe:	2c00      	cmp	r4, #0
 801bbc0:	d108      	bne.n	801bbd4 <__pow5mult+0x68>
 801bbc2:	0038      	movs	r0, r7
 801bbc4:	4916      	ldr	r1, [pc, #88]	@ (801bc20 <__pow5mult+0xb4>)
 801bbc6:	f7ff ff0f 	bl	801b9e8 <__i2b>
 801bbca:	9b01      	ldr	r3, [sp, #4]
 801bbcc:	0004      	movs	r4, r0
 801bbce:	6098      	str	r0, [r3, #8]
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	6003      	str	r3, [r0, #0]
 801bbd4:	2301      	movs	r3, #1
 801bbd6:	421d      	tst	r5, r3
 801bbd8:	d00a      	beq.n	801bbf0 <__pow5mult+0x84>
 801bbda:	0031      	movs	r1, r6
 801bbdc:	0022      	movs	r2, r4
 801bbde:	0038      	movs	r0, r7
 801bbe0:	f7ff ff1a 	bl	801ba18 <__multiply>
 801bbe4:	0031      	movs	r1, r6
 801bbe6:	9001      	str	r0, [sp, #4]
 801bbe8:	0038      	movs	r0, r7
 801bbea:	f7ff fe45 	bl	801b878 <_Bfree>
 801bbee:	9e01      	ldr	r6, [sp, #4]
 801bbf0:	106d      	asrs	r5, r5, #1
 801bbf2:	d00c      	beq.n	801bc0e <__pow5mult+0xa2>
 801bbf4:	6820      	ldr	r0, [r4, #0]
 801bbf6:	2800      	cmp	r0, #0
 801bbf8:	d107      	bne.n	801bc0a <__pow5mult+0x9e>
 801bbfa:	0022      	movs	r2, r4
 801bbfc:	0021      	movs	r1, r4
 801bbfe:	0038      	movs	r0, r7
 801bc00:	f7ff ff0a 	bl	801ba18 <__multiply>
 801bc04:	2300      	movs	r3, #0
 801bc06:	6020      	str	r0, [r4, #0]
 801bc08:	6003      	str	r3, [r0, #0]
 801bc0a:	0004      	movs	r4, r0
 801bc0c:	e7e2      	b.n	801bbd4 <__pow5mult+0x68>
 801bc0e:	0030      	movs	r0, r6
 801bc10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bc12:	46c0      	nop			@ (mov r8, r8)
 801bc14:	080207b8 	.word	0x080207b8
 801bc18:	08020502 	.word	0x08020502
 801bc1c:	08020582 	.word	0x08020582
 801bc20:	00000271 	.word	0x00000271

0801bc24 <__lshift>:
 801bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc26:	000c      	movs	r4, r1
 801bc28:	0016      	movs	r6, r2
 801bc2a:	6923      	ldr	r3, [r4, #16]
 801bc2c:	1157      	asrs	r7, r2, #5
 801bc2e:	b085      	sub	sp, #20
 801bc30:	18fb      	adds	r3, r7, r3
 801bc32:	9301      	str	r3, [sp, #4]
 801bc34:	3301      	adds	r3, #1
 801bc36:	9300      	str	r3, [sp, #0]
 801bc38:	6849      	ldr	r1, [r1, #4]
 801bc3a:	68a3      	ldr	r3, [r4, #8]
 801bc3c:	9002      	str	r0, [sp, #8]
 801bc3e:	9a00      	ldr	r2, [sp, #0]
 801bc40:	4293      	cmp	r3, r2
 801bc42:	db10      	blt.n	801bc66 <__lshift+0x42>
 801bc44:	9802      	ldr	r0, [sp, #8]
 801bc46:	f7ff fdd3 	bl	801b7f0 <_Balloc>
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	0001      	movs	r1, r0
 801bc4e:	0005      	movs	r5, r0
 801bc50:	001a      	movs	r2, r3
 801bc52:	3114      	adds	r1, #20
 801bc54:	4298      	cmp	r0, r3
 801bc56:	d10c      	bne.n	801bc72 <__lshift+0x4e>
 801bc58:	21ef      	movs	r1, #239	@ 0xef
 801bc5a:	002a      	movs	r2, r5
 801bc5c:	4b25      	ldr	r3, [pc, #148]	@ (801bcf4 <__lshift+0xd0>)
 801bc5e:	4826      	ldr	r0, [pc, #152]	@ (801bcf8 <__lshift+0xd4>)
 801bc60:	0049      	lsls	r1, r1, #1
 801bc62:	f000 fd9f 	bl	801c7a4 <__assert_func>
 801bc66:	3101      	adds	r1, #1
 801bc68:	005b      	lsls	r3, r3, #1
 801bc6a:	e7e8      	b.n	801bc3e <__lshift+0x1a>
 801bc6c:	0098      	lsls	r0, r3, #2
 801bc6e:	500a      	str	r2, [r1, r0]
 801bc70:	3301      	adds	r3, #1
 801bc72:	42bb      	cmp	r3, r7
 801bc74:	dbfa      	blt.n	801bc6c <__lshift+0x48>
 801bc76:	43fb      	mvns	r3, r7
 801bc78:	17db      	asrs	r3, r3, #31
 801bc7a:	401f      	ands	r7, r3
 801bc7c:	00bf      	lsls	r7, r7, #2
 801bc7e:	0023      	movs	r3, r4
 801bc80:	201f      	movs	r0, #31
 801bc82:	19c9      	adds	r1, r1, r7
 801bc84:	0037      	movs	r7, r6
 801bc86:	6922      	ldr	r2, [r4, #16]
 801bc88:	3314      	adds	r3, #20
 801bc8a:	0092      	lsls	r2, r2, #2
 801bc8c:	189a      	adds	r2, r3, r2
 801bc8e:	4007      	ands	r7, r0
 801bc90:	4206      	tst	r6, r0
 801bc92:	d029      	beq.n	801bce8 <__lshift+0xc4>
 801bc94:	3001      	adds	r0, #1
 801bc96:	1bc0      	subs	r0, r0, r7
 801bc98:	9003      	str	r0, [sp, #12]
 801bc9a:	468c      	mov	ip, r1
 801bc9c:	2000      	movs	r0, #0
 801bc9e:	681e      	ldr	r6, [r3, #0]
 801bca0:	40be      	lsls	r6, r7
 801bca2:	4306      	orrs	r6, r0
 801bca4:	4660      	mov	r0, ip
 801bca6:	c040      	stmia	r0!, {r6}
 801bca8:	4684      	mov	ip, r0
 801bcaa:	9e03      	ldr	r6, [sp, #12]
 801bcac:	cb01      	ldmia	r3!, {r0}
 801bcae:	40f0      	lsrs	r0, r6
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d8f4      	bhi.n	801bc9e <__lshift+0x7a>
 801bcb4:	0026      	movs	r6, r4
 801bcb6:	3615      	adds	r6, #21
 801bcb8:	2304      	movs	r3, #4
 801bcba:	42b2      	cmp	r2, r6
 801bcbc:	d304      	bcc.n	801bcc8 <__lshift+0xa4>
 801bcbe:	1b13      	subs	r3, r2, r4
 801bcc0:	3b15      	subs	r3, #21
 801bcc2:	089b      	lsrs	r3, r3, #2
 801bcc4:	3301      	adds	r3, #1
 801bcc6:	009b      	lsls	r3, r3, #2
 801bcc8:	50c8      	str	r0, [r1, r3]
 801bcca:	2800      	cmp	r0, #0
 801bccc:	d002      	beq.n	801bcd4 <__lshift+0xb0>
 801bcce:	9b01      	ldr	r3, [sp, #4]
 801bcd0:	3302      	adds	r3, #2
 801bcd2:	9300      	str	r3, [sp, #0]
 801bcd4:	9b00      	ldr	r3, [sp, #0]
 801bcd6:	9802      	ldr	r0, [sp, #8]
 801bcd8:	3b01      	subs	r3, #1
 801bcda:	0021      	movs	r1, r4
 801bcdc:	612b      	str	r3, [r5, #16]
 801bcde:	f7ff fdcb 	bl	801b878 <_Bfree>
 801bce2:	0028      	movs	r0, r5
 801bce4:	b005      	add	sp, #20
 801bce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bce8:	cb01      	ldmia	r3!, {r0}
 801bcea:	c101      	stmia	r1!, {r0}
 801bcec:	429a      	cmp	r2, r3
 801bcee:	d8fb      	bhi.n	801bce8 <__lshift+0xc4>
 801bcf0:	e7f0      	b.n	801bcd4 <__lshift+0xb0>
 801bcf2:	46c0      	nop			@ (mov r8, r8)
 801bcf4:	08020571 	.word	0x08020571
 801bcf8:	08020582 	.word	0x08020582

0801bcfc <__mcmp>:
 801bcfc:	b530      	push	{r4, r5, lr}
 801bcfe:	690b      	ldr	r3, [r1, #16]
 801bd00:	6904      	ldr	r4, [r0, #16]
 801bd02:	0002      	movs	r2, r0
 801bd04:	1ae0      	subs	r0, r4, r3
 801bd06:	429c      	cmp	r4, r3
 801bd08:	d10f      	bne.n	801bd2a <__mcmp+0x2e>
 801bd0a:	3214      	adds	r2, #20
 801bd0c:	009b      	lsls	r3, r3, #2
 801bd0e:	3114      	adds	r1, #20
 801bd10:	0014      	movs	r4, r2
 801bd12:	18c9      	adds	r1, r1, r3
 801bd14:	18d2      	adds	r2, r2, r3
 801bd16:	3a04      	subs	r2, #4
 801bd18:	3904      	subs	r1, #4
 801bd1a:	6815      	ldr	r5, [r2, #0]
 801bd1c:	680b      	ldr	r3, [r1, #0]
 801bd1e:	429d      	cmp	r5, r3
 801bd20:	d004      	beq.n	801bd2c <__mcmp+0x30>
 801bd22:	2001      	movs	r0, #1
 801bd24:	429d      	cmp	r5, r3
 801bd26:	d200      	bcs.n	801bd2a <__mcmp+0x2e>
 801bd28:	3802      	subs	r0, #2
 801bd2a:	bd30      	pop	{r4, r5, pc}
 801bd2c:	4294      	cmp	r4, r2
 801bd2e:	d3f2      	bcc.n	801bd16 <__mcmp+0x1a>
 801bd30:	e7fb      	b.n	801bd2a <__mcmp+0x2e>
	...

0801bd34 <__mdiff>:
 801bd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd36:	000c      	movs	r4, r1
 801bd38:	b087      	sub	sp, #28
 801bd3a:	9000      	str	r0, [sp, #0]
 801bd3c:	0011      	movs	r1, r2
 801bd3e:	0020      	movs	r0, r4
 801bd40:	0017      	movs	r7, r2
 801bd42:	f7ff ffdb 	bl	801bcfc <__mcmp>
 801bd46:	1e05      	subs	r5, r0, #0
 801bd48:	d110      	bne.n	801bd6c <__mdiff+0x38>
 801bd4a:	0001      	movs	r1, r0
 801bd4c:	9800      	ldr	r0, [sp, #0]
 801bd4e:	f7ff fd4f 	bl	801b7f0 <_Balloc>
 801bd52:	1e02      	subs	r2, r0, #0
 801bd54:	d104      	bne.n	801bd60 <__mdiff+0x2c>
 801bd56:	4b40      	ldr	r3, [pc, #256]	@ (801be58 <__mdiff+0x124>)
 801bd58:	4840      	ldr	r0, [pc, #256]	@ (801be5c <__mdiff+0x128>)
 801bd5a:	4941      	ldr	r1, [pc, #260]	@ (801be60 <__mdiff+0x12c>)
 801bd5c:	f000 fd22 	bl	801c7a4 <__assert_func>
 801bd60:	2301      	movs	r3, #1
 801bd62:	6145      	str	r5, [r0, #20]
 801bd64:	6103      	str	r3, [r0, #16]
 801bd66:	0010      	movs	r0, r2
 801bd68:	b007      	add	sp, #28
 801bd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd6c:	2600      	movs	r6, #0
 801bd6e:	42b0      	cmp	r0, r6
 801bd70:	da03      	bge.n	801bd7a <__mdiff+0x46>
 801bd72:	0023      	movs	r3, r4
 801bd74:	003c      	movs	r4, r7
 801bd76:	001f      	movs	r7, r3
 801bd78:	3601      	adds	r6, #1
 801bd7a:	6861      	ldr	r1, [r4, #4]
 801bd7c:	9800      	ldr	r0, [sp, #0]
 801bd7e:	f7ff fd37 	bl	801b7f0 <_Balloc>
 801bd82:	1e02      	subs	r2, r0, #0
 801bd84:	d103      	bne.n	801bd8e <__mdiff+0x5a>
 801bd86:	4b34      	ldr	r3, [pc, #208]	@ (801be58 <__mdiff+0x124>)
 801bd88:	4834      	ldr	r0, [pc, #208]	@ (801be5c <__mdiff+0x128>)
 801bd8a:	4936      	ldr	r1, [pc, #216]	@ (801be64 <__mdiff+0x130>)
 801bd8c:	e7e6      	b.n	801bd5c <__mdiff+0x28>
 801bd8e:	6923      	ldr	r3, [r4, #16]
 801bd90:	3414      	adds	r4, #20
 801bd92:	9300      	str	r3, [sp, #0]
 801bd94:	009b      	lsls	r3, r3, #2
 801bd96:	18e3      	adds	r3, r4, r3
 801bd98:	0021      	movs	r1, r4
 801bd9a:	9401      	str	r4, [sp, #4]
 801bd9c:	003c      	movs	r4, r7
 801bd9e:	9302      	str	r3, [sp, #8]
 801bda0:	693b      	ldr	r3, [r7, #16]
 801bda2:	3414      	adds	r4, #20
 801bda4:	009b      	lsls	r3, r3, #2
 801bda6:	18e3      	adds	r3, r4, r3
 801bda8:	9303      	str	r3, [sp, #12]
 801bdaa:	0003      	movs	r3, r0
 801bdac:	60c6      	str	r6, [r0, #12]
 801bdae:	468c      	mov	ip, r1
 801bdb0:	2000      	movs	r0, #0
 801bdb2:	3314      	adds	r3, #20
 801bdb4:	9304      	str	r3, [sp, #16]
 801bdb6:	9305      	str	r3, [sp, #20]
 801bdb8:	4663      	mov	r3, ip
 801bdba:	cb20      	ldmia	r3!, {r5}
 801bdbc:	b2a9      	uxth	r1, r5
 801bdbe:	000e      	movs	r6, r1
 801bdc0:	469c      	mov	ip, r3
 801bdc2:	cc08      	ldmia	r4!, {r3}
 801bdc4:	0c2d      	lsrs	r5, r5, #16
 801bdc6:	b299      	uxth	r1, r3
 801bdc8:	1a71      	subs	r1, r6, r1
 801bdca:	1809      	adds	r1, r1, r0
 801bdcc:	0c1b      	lsrs	r3, r3, #16
 801bdce:	1408      	asrs	r0, r1, #16
 801bdd0:	1aeb      	subs	r3, r5, r3
 801bdd2:	181b      	adds	r3, r3, r0
 801bdd4:	1418      	asrs	r0, r3, #16
 801bdd6:	b289      	uxth	r1, r1
 801bdd8:	041b      	lsls	r3, r3, #16
 801bdda:	4319      	orrs	r1, r3
 801bddc:	9b05      	ldr	r3, [sp, #20]
 801bdde:	c302      	stmia	r3!, {r1}
 801bde0:	9305      	str	r3, [sp, #20]
 801bde2:	9b03      	ldr	r3, [sp, #12]
 801bde4:	42a3      	cmp	r3, r4
 801bde6:	d8e7      	bhi.n	801bdb8 <__mdiff+0x84>
 801bde8:	0039      	movs	r1, r7
 801bdea:	9c03      	ldr	r4, [sp, #12]
 801bdec:	3115      	adds	r1, #21
 801bdee:	2304      	movs	r3, #4
 801bdf0:	428c      	cmp	r4, r1
 801bdf2:	d304      	bcc.n	801bdfe <__mdiff+0xca>
 801bdf4:	1be3      	subs	r3, r4, r7
 801bdf6:	3b15      	subs	r3, #21
 801bdf8:	089b      	lsrs	r3, r3, #2
 801bdfa:	3301      	adds	r3, #1
 801bdfc:	009b      	lsls	r3, r3, #2
 801bdfe:	9901      	ldr	r1, [sp, #4]
 801be00:	18cd      	adds	r5, r1, r3
 801be02:	9904      	ldr	r1, [sp, #16]
 801be04:	002e      	movs	r6, r5
 801be06:	18cb      	adds	r3, r1, r3
 801be08:	001f      	movs	r7, r3
 801be0a:	9902      	ldr	r1, [sp, #8]
 801be0c:	428e      	cmp	r6, r1
 801be0e:	d311      	bcc.n	801be34 <__mdiff+0x100>
 801be10:	9c02      	ldr	r4, [sp, #8]
 801be12:	1ee9      	subs	r1, r5, #3
 801be14:	2000      	movs	r0, #0
 801be16:	428c      	cmp	r4, r1
 801be18:	d304      	bcc.n	801be24 <__mdiff+0xf0>
 801be1a:	0021      	movs	r1, r4
 801be1c:	3103      	adds	r1, #3
 801be1e:	1b49      	subs	r1, r1, r5
 801be20:	0889      	lsrs	r1, r1, #2
 801be22:	0088      	lsls	r0, r1, #2
 801be24:	181b      	adds	r3, r3, r0
 801be26:	3b04      	subs	r3, #4
 801be28:	6819      	ldr	r1, [r3, #0]
 801be2a:	2900      	cmp	r1, #0
 801be2c:	d010      	beq.n	801be50 <__mdiff+0x11c>
 801be2e:	9b00      	ldr	r3, [sp, #0]
 801be30:	6113      	str	r3, [r2, #16]
 801be32:	e798      	b.n	801bd66 <__mdiff+0x32>
 801be34:	4684      	mov	ip, r0
 801be36:	ce02      	ldmia	r6!, {r1}
 801be38:	b288      	uxth	r0, r1
 801be3a:	4460      	add	r0, ip
 801be3c:	1400      	asrs	r0, r0, #16
 801be3e:	0c0c      	lsrs	r4, r1, #16
 801be40:	1904      	adds	r4, r0, r4
 801be42:	4461      	add	r1, ip
 801be44:	1420      	asrs	r0, r4, #16
 801be46:	b289      	uxth	r1, r1
 801be48:	0424      	lsls	r4, r4, #16
 801be4a:	4321      	orrs	r1, r4
 801be4c:	c702      	stmia	r7!, {r1}
 801be4e:	e7dc      	b.n	801be0a <__mdiff+0xd6>
 801be50:	9900      	ldr	r1, [sp, #0]
 801be52:	3901      	subs	r1, #1
 801be54:	9100      	str	r1, [sp, #0]
 801be56:	e7e6      	b.n	801be26 <__mdiff+0xf2>
 801be58:	08020571 	.word	0x08020571
 801be5c:	08020582 	.word	0x08020582
 801be60:	00000237 	.word	0x00000237
 801be64:	00000245 	.word	0x00000245

0801be68 <__d2b>:
 801be68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801be6a:	2101      	movs	r1, #1
 801be6c:	0016      	movs	r6, r2
 801be6e:	001f      	movs	r7, r3
 801be70:	f7ff fcbe 	bl	801b7f0 <_Balloc>
 801be74:	1e04      	subs	r4, r0, #0
 801be76:	d105      	bne.n	801be84 <__d2b+0x1c>
 801be78:	0022      	movs	r2, r4
 801be7a:	4b25      	ldr	r3, [pc, #148]	@ (801bf10 <__d2b+0xa8>)
 801be7c:	4825      	ldr	r0, [pc, #148]	@ (801bf14 <__d2b+0xac>)
 801be7e:	4926      	ldr	r1, [pc, #152]	@ (801bf18 <__d2b+0xb0>)
 801be80:	f000 fc90 	bl	801c7a4 <__assert_func>
 801be84:	033b      	lsls	r3, r7, #12
 801be86:	007d      	lsls	r5, r7, #1
 801be88:	0b1b      	lsrs	r3, r3, #12
 801be8a:	0d6d      	lsrs	r5, r5, #21
 801be8c:	d002      	beq.n	801be94 <__d2b+0x2c>
 801be8e:	2280      	movs	r2, #128	@ 0x80
 801be90:	0352      	lsls	r2, r2, #13
 801be92:	4313      	orrs	r3, r2
 801be94:	9301      	str	r3, [sp, #4]
 801be96:	2e00      	cmp	r6, #0
 801be98:	d025      	beq.n	801bee6 <__d2b+0x7e>
 801be9a:	4668      	mov	r0, sp
 801be9c:	9600      	str	r6, [sp, #0]
 801be9e:	f7ff fd74 	bl	801b98a <__lo0bits>
 801bea2:	9b01      	ldr	r3, [sp, #4]
 801bea4:	9900      	ldr	r1, [sp, #0]
 801bea6:	2800      	cmp	r0, #0
 801bea8:	d01b      	beq.n	801bee2 <__d2b+0x7a>
 801beaa:	2220      	movs	r2, #32
 801beac:	001e      	movs	r6, r3
 801beae:	1a12      	subs	r2, r2, r0
 801beb0:	4096      	lsls	r6, r2
 801beb2:	0032      	movs	r2, r6
 801beb4:	40c3      	lsrs	r3, r0
 801beb6:	430a      	orrs	r2, r1
 801beb8:	6162      	str	r2, [r4, #20]
 801beba:	9301      	str	r3, [sp, #4]
 801bebc:	9e01      	ldr	r6, [sp, #4]
 801bebe:	61a6      	str	r6, [r4, #24]
 801bec0:	1e73      	subs	r3, r6, #1
 801bec2:	419e      	sbcs	r6, r3
 801bec4:	3601      	adds	r6, #1
 801bec6:	6126      	str	r6, [r4, #16]
 801bec8:	2d00      	cmp	r5, #0
 801beca:	d014      	beq.n	801bef6 <__d2b+0x8e>
 801becc:	2635      	movs	r6, #53	@ 0x35
 801bece:	4b13      	ldr	r3, [pc, #76]	@ (801bf1c <__d2b+0xb4>)
 801bed0:	18ed      	adds	r5, r5, r3
 801bed2:	9b08      	ldr	r3, [sp, #32]
 801bed4:	182d      	adds	r5, r5, r0
 801bed6:	601d      	str	r5, [r3, #0]
 801bed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801beda:	1a36      	subs	r6, r6, r0
 801bedc:	601e      	str	r6, [r3, #0]
 801bede:	0020      	movs	r0, r4
 801bee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bee2:	6161      	str	r1, [r4, #20]
 801bee4:	e7ea      	b.n	801bebc <__d2b+0x54>
 801bee6:	a801      	add	r0, sp, #4
 801bee8:	f7ff fd4f 	bl	801b98a <__lo0bits>
 801beec:	9b01      	ldr	r3, [sp, #4]
 801beee:	2601      	movs	r6, #1
 801bef0:	6163      	str	r3, [r4, #20]
 801bef2:	3020      	adds	r0, #32
 801bef4:	e7e7      	b.n	801bec6 <__d2b+0x5e>
 801bef6:	4b0a      	ldr	r3, [pc, #40]	@ (801bf20 <__d2b+0xb8>)
 801bef8:	18c0      	adds	r0, r0, r3
 801befa:	9b08      	ldr	r3, [sp, #32]
 801befc:	6018      	str	r0, [r3, #0]
 801befe:	4b09      	ldr	r3, [pc, #36]	@ (801bf24 <__d2b+0xbc>)
 801bf00:	18f3      	adds	r3, r6, r3
 801bf02:	009b      	lsls	r3, r3, #2
 801bf04:	18e3      	adds	r3, r4, r3
 801bf06:	6958      	ldr	r0, [r3, #20]
 801bf08:	f7ff fd1e 	bl	801b948 <__hi0bits>
 801bf0c:	0176      	lsls	r6, r6, #5
 801bf0e:	e7e3      	b.n	801bed8 <__d2b+0x70>
 801bf10:	08020571 	.word	0x08020571
 801bf14:	08020582 	.word	0x08020582
 801bf18:	0000030f 	.word	0x0000030f
 801bf1c:	fffffbcd 	.word	0xfffffbcd
 801bf20:	fffffbce 	.word	0xfffffbce
 801bf24:	3fffffff 	.word	0x3fffffff

0801bf28 <__ssputs_r>:
 801bf28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf2a:	688e      	ldr	r6, [r1, #8]
 801bf2c:	b085      	sub	sp, #20
 801bf2e:	001f      	movs	r7, r3
 801bf30:	000c      	movs	r4, r1
 801bf32:	680b      	ldr	r3, [r1, #0]
 801bf34:	9002      	str	r0, [sp, #8]
 801bf36:	9203      	str	r2, [sp, #12]
 801bf38:	42be      	cmp	r6, r7
 801bf3a:	d830      	bhi.n	801bf9e <__ssputs_r+0x76>
 801bf3c:	210c      	movs	r1, #12
 801bf3e:	5e62      	ldrsh	r2, [r4, r1]
 801bf40:	2190      	movs	r1, #144	@ 0x90
 801bf42:	00c9      	lsls	r1, r1, #3
 801bf44:	420a      	tst	r2, r1
 801bf46:	d028      	beq.n	801bf9a <__ssputs_r+0x72>
 801bf48:	2003      	movs	r0, #3
 801bf4a:	6921      	ldr	r1, [r4, #16]
 801bf4c:	1a5b      	subs	r3, r3, r1
 801bf4e:	9301      	str	r3, [sp, #4]
 801bf50:	6963      	ldr	r3, [r4, #20]
 801bf52:	4343      	muls	r3, r0
 801bf54:	9801      	ldr	r0, [sp, #4]
 801bf56:	0fdd      	lsrs	r5, r3, #31
 801bf58:	18ed      	adds	r5, r5, r3
 801bf5a:	1c7b      	adds	r3, r7, #1
 801bf5c:	181b      	adds	r3, r3, r0
 801bf5e:	106d      	asrs	r5, r5, #1
 801bf60:	42ab      	cmp	r3, r5
 801bf62:	d900      	bls.n	801bf66 <__ssputs_r+0x3e>
 801bf64:	001d      	movs	r5, r3
 801bf66:	0552      	lsls	r2, r2, #21
 801bf68:	d528      	bpl.n	801bfbc <__ssputs_r+0x94>
 801bf6a:	0029      	movs	r1, r5
 801bf6c:	9802      	ldr	r0, [sp, #8]
 801bf6e:	f7ff fbaf 	bl	801b6d0 <_malloc_r>
 801bf72:	1e06      	subs	r6, r0, #0
 801bf74:	d02c      	beq.n	801bfd0 <__ssputs_r+0xa8>
 801bf76:	9a01      	ldr	r2, [sp, #4]
 801bf78:	6921      	ldr	r1, [r4, #16]
 801bf7a:	f7fe fcb5 	bl	801a8e8 <memcpy>
 801bf7e:	89a2      	ldrh	r2, [r4, #12]
 801bf80:	4b18      	ldr	r3, [pc, #96]	@ (801bfe4 <__ssputs_r+0xbc>)
 801bf82:	401a      	ands	r2, r3
 801bf84:	2380      	movs	r3, #128	@ 0x80
 801bf86:	4313      	orrs	r3, r2
 801bf88:	81a3      	strh	r3, [r4, #12]
 801bf8a:	9b01      	ldr	r3, [sp, #4]
 801bf8c:	6126      	str	r6, [r4, #16]
 801bf8e:	18f6      	adds	r6, r6, r3
 801bf90:	6026      	str	r6, [r4, #0]
 801bf92:	003e      	movs	r6, r7
 801bf94:	6165      	str	r5, [r4, #20]
 801bf96:	1aed      	subs	r5, r5, r3
 801bf98:	60a5      	str	r5, [r4, #8]
 801bf9a:	42be      	cmp	r6, r7
 801bf9c:	d900      	bls.n	801bfa0 <__ssputs_r+0x78>
 801bf9e:	003e      	movs	r6, r7
 801bfa0:	0032      	movs	r2, r6
 801bfa2:	9903      	ldr	r1, [sp, #12]
 801bfa4:	6820      	ldr	r0, [r4, #0]
 801bfa6:	f000 fbb4 	bl	801c712 <memmove>
 801bfaa:	2000      	movs	r0, #0
 801bfac:	68a3      	ldr	r3, [r4, #8]
 801bfae:	1b9b      	subs	r3, r3, r6
 801bfb0:	60a3      	str	r3, [r4, #8]
 801bfb2:	6823      	ldr	r3, [r4, #0]
 801bfb4:	199b      	adds	r3, r3, r6
 801bfb6:	6023      	str	r3, [r4, #0]
 801bfb8:	b005      	add	sp, #20
 801bfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfbc:	002a      	movs	r2, r5
 801bfbe:	9802      	ldr	r0, [sp, #8]
 801bfc0:	f000 fc4d 	bl	801c85e <_realloc_r>
 801bfc4:	1e06      	subs	r6, r0, #0
 801bfc6:	d1e0      	bne.n	801bf8a <__ssputs_r+0x62>
 801bfc8:	6921      	ldr	r1, [r4, #16]
 801bfca:	9802      	ldr	r0, [sp, #8]
 801bfcc:	f7ff fb0a 	bl	801b5e4 <_free_r>
 801bfd0:	230c      	movs	r3, #12
 801bfd2:	2001      	movs	r0, #1
 801bfd4:	9a02      	ldr	r2, [sp, #8]
 801bfd6:	4240      	negs	r0, r0
 801bfd8:	6013      	str	r3, [r2, #0]
 801bfda:	89a2      	ldrh	r2, [r4, #12]
 801bfdc:	3334      	adds	r3, #52	@ 0x34
 801bfde:	4313      	orrs	r3, r2
 801bfe0:	81a3      	strh	r3, [r4, #12]
 801bfe2:	e7e9      	b.n	801bfb8 <__ssputs_r+0x90>
 801bfe4:	fffffb7f 	.word	0xfffffb7f

0801bfe8 <_svfiprintf_r>:
 801bfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfea:	b0a1      	sub	sp, #132	@ 0x84
 801bfec:	9003      	str	r0, [sp, #12]
 801bfee:	001d      	movs	r5, r3
 801bff0:	898b      	ldrh	r3, [r1, #12]
 801bff2:	000f      	movs	r7, r1
 801bff4:	0016      	movs	r6, r2
 801bff6:	061b      	lsls	r3, r3, #24
 801bff8:	d511      	bpl.n	801c01e <_svfiprintf_r+0x36>
 801bffa:	690b      	ldr	r3, [r1, #16]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d10e      	bne.n	801c01e <_svfiprintf_r+0x36>
 801c000:	2140      	movs	r1, #64	@ 0x40
 801c002:	f7ff fb65 	bl	801b6d0 <_malloc_r>
 801c006:	6038      	str	r0, [r7, #0]
 801c008:	6138      	str	r0, [r7, #16]
 801c00a:	2800      	cmp	r0, #0
 801c00c:	d105      	bne.n	801c01a <_svfiprintf_r+0x32>
 801c00e:	230c      	movs	r3, #12
 801c010:	9a03      	ldr	r2, [sp, #12]
 801c012:	6013      	str	r3, [r2, #0]
 801c014:	2001      	movs	r0, #1
 801c016:	4240      	negs	r0, r0
 801c018:	e0cf      	b.n	801c1ba <_svfiprintf_r+0x1d2>
 801c01a:	2340      	movs	r3, #64	@ 0x40
 801c01c:	617b      	str	r3, [r7, #20]
 801c01e:	2300      	movs	r3, #0
 801c020:	ac08      	add	r4, sp, #32
 801c022:	6163      	str	r3, [r4, #20]
 801c024:	3320      	adds	r3, #32
 801c026:	7663      	strb	r3, [r4, #25]
 801c028:	3310      	adds	r3, #16
 801c02a:	76a3      	strb	r3, [r4, #26]
 801c02c:	9507      	str	r5, [sp, #28]
 801c02e:	0035      	movs	r5, r6
 801c030:	782b      	ldrb	r3, [r5, #0]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d001      	beq.n	801c03a <_svfiprintf_r+0x52>
 801c036:	2b25      	cmp	r3, #37	@ 0x25
 801c038:	d148      	bne.n	801c0cc <_svfiprintf_r+0xe4>
 801c03a:	1bab      	subs	r3, r5, r6
 801c03c:	9305      	str	r3, [sp, #20]
 801c03e:	42b5      	cmp	r5, r6
 801c040:	d00b      	beq.n	801c05a <_svfiprintf_r+0x72>
 801c042:	0032      	movs	r2, r6
 801c044:	0039      	movs	r1, r7
 801c046:	9803      	ldr	r0, [sp, #12]
 801c048:	f7ff ff6e 	bl	801bf28 <__ssputs_r>
 801c04c:	3001      	adds	r0, #1
 801c04e:	d100      	bne.n	801c052 <_svfiprintf_r+0x6a>
 801c050:	e0ae      	b.n	801c1b0 <_svfiprintf_r+0x1c8>
 801c052:	6963      	ldr	r3, [r4, #20]
 801c054:	9a05      	ldr	r2, [sp, #20]
 801c056:	189b      	adds	r3, r3, r2
 801c058:	6163      	str	r3, [r4, #20]
 801c05a:	782b      	ldrb	r3, [r5, #0]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d100      	bne.n	801c062 <_svfiprintf_r+0x7a>
 801c060:	e0a6      	b.n	801c1b0 <_svfiprintf_r+0x1c8>
 801c062:	2201      	movs	r2, #1
 801c064:	2300      	movs	r3, #0
 801c066:	4252      	negs	r2, r2
 801c068:	6062      	str	r2, [r4, #4]
 801c06a:	a904      	add	r1, sp, #16
 801c06c:	3254      	adds	r2, #84	@ 0x54
 801c06e:	1852      	adds	r2, r2, r1
 801c070:	1c6e      	adds	r6, r5, #1
 801c072:	6023      	str	r3, [r4, #0]
 801c074:	60e3      	str	r3, [r4, #12]
 801c076:	60a3      	str	r3, [r4, #8]
 801c078:	7013      	strb	r3, [r2, #0]
 801c07a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801c07c:	4b54      	ldr	r3, [pc, #336]	@ (801c1d0 <_svfiprintf_r+0x1e8>)
 801c07e:	2205      	movs	r2, #5
 801c080:	0018      	movs	r0, r3
 801c082:	7831      	ldrb	r1, [r6, #0]
 801c084:	9305      	str	r3, [sp, #20]
 801c086:	f7fe fc24 	bl	801a8d2 <memchr>
 801c08a:	1c75      	adds	r5, r6, #1
 801c08c:	2800      	cmp	r0, #0
 801c08e:	d11f      	bne.n	801c0d0 <_svfiprintf_r+0xe8>
 801c090:	6822      	ldr	r2, [r4, #0]
 801c092:	06d3      	lsls	r3, r2, #27
 801c094:	d504      	bpl.n	801c0a0 <_svfiprintf_r+0xb8>
 801c096:	2353      	movs	r3, #83	@ 0x53
 801c098:	a904      	add	r1, sp, #16
 801c09a:	185b      	adds	r3, r3, r1
 801c09c:	2120      	movs	r1, #32
 801c09e:	7019      	strb	r1, [r3, #0]
 801c0a0:	0713      	lsls	r3, r2, #28
 801c0a2:	d504      	bpl.n	801c0ae <_svfiprintf_r+0xc6>
 801c0a4:	2353      	movs	r3, #83	@ 0x53
 801c0a6:	a904      	add	r1, sp, #16
 801c0a8:	185b      	adds	r3, r3, r1
 801c0aa:	212b      	movs	r1, #43	@ 0x2b
 801c0ac:	7019      	strb	r1, [r3, #0]
 801c0ae:	7833      	ldrb	r3, [r6, #0]
 801c0b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801c0b2:	d016      	beq.n	801c0e2 <_svfiprintf_r+0xfa>
 801c0b4:	0035      	movs	r5, r6
 801c0b6:	2100      	movs	r1, #0
 801c0b8:	200a      	movs	r0, #10
 801c0ba:	68e3      	ldr	r3, [r4, #12]
 801c0bc:	782a      	ldrb	r2, [r5, #0]
 801c0be:	1c6e      	adds	r6, r5, #1
 801c0c0:	3a30      	subs	r2, #48	@ 0x30
 801c0c2:	2a09      	cmp	r2, #9
 801c0c4:	d950      	bls.n	801c168 <_svfiprintf_r+0x180>
 801c0c6:	2900      	cmp	r1, #0
 801c0c8:	d111      	bne.n	801c0ee <_svfiprintf_r+0x106>
 801c0ca:	e017      	b.n	801c0fc <_svfiprintf_r+0x114>
 801c0cc:	3501      	adds	r5, #1
 801c0ce:	e7af      	b.n	801c030 <_svfiprintf_r+0x48>
 801c0d0:	9b05      	ldr	r3, [sp, #20]
 801c0d2:	6822      	ldr	r2, [r4, #0]
 801c0d4:	1ac0      	subs	r0, r0, r3
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	4083      	lsls	r3, r0
 801c0da:	4313      	orrs	r3, r2
 801c0dc:	002e      	movs	r6, r5
 801c0de:	6023      	str	r3, [r4, #0]
 801c0e0:	e7cc      	b.n	801c07c <_svfiprintf_r+0x94>
 801c0e2:	9b07      	ldr	r3, [sp, #28]
 801c0e4:	1d19      	adds	r1, r3, #4
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	9107      	str	r1, [sp, #28]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	db01      	blt.n	801c0f2 <_svfiprintf_r+0x10a>
 801c0ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c0f0:	e004      	b.n	801c0fc <_svfiprintf_r+0x114>
 801c0f2:	425b      	negs	r3, r3
 801c0f4:	60e3      	str	r3, [r4, #12]
 801c0f6:	2302      	movs	r3, #2
 801c0f8:	4313      	orrs	r3, r2
 801c0fa:	6023      	str	r3, [r4, #0]
 801c0fc:	782b      	ldrb	r3, [r5, #0]
 801c0fe:	2b2e      	cmp	r3, #46	@ 0x2e
 801c100:	d10c      	bne.n	801c11c <_svfiprintf_r+0x134>
 801c102:	786b      	ldrb	r3, [r5, #1]
 801c104:	2b2a      	cmp	r3, #42	@ 0x2a
 801c106:	d134      	bne.n	801c172 <_svfiprintf_r+0x18a>
 801c108:	9b07      	ldr	r3, [sp, #28]
 801c10a:	3502      	adds	r5, #2
 801c10c:	1d1a      	adds	r2, r3, #4
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	9207      	str	r2, [sp, #28]
 801c112:	2b00      	cmp	r3, #0
 801c114:	da01      	bge.n	801c11a <_svfiprintf_r+0x132>
 801c116:	2301      	movs	r3, #1
 801c118:	425b      	negs	r3, r3
 801c11a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c11c:	4e2d      	ldr	r6, [pc, #180]	@ (801c1d4 <_svfiprintf_r+0x1ec>)
 801c11e:	2203      	movs	r2, #3
 801c120:	0030      	movs	r0, r6
 801c122:	7829      	ldrb	r1, [r5, #0]
 801c124:	f7fe fbd5 	bl	801a8d2 <memchr>
 801c128:	2800      	cmp	r0, #0
 801c12a:	d006      	beq.n	801c13a <_svfiprintf_r+0x152>
 801c12c:	2340      	movs	r3, #64	@ 0x40
 801c12e:	1b80      	subs	r0, r0, r6
 801c130:	4083      	lsls	r3, r0
 801c132:	6822      	ldr	r2, [r4, #0]
 801c134:	3501      	adds	r5, #1
 801c136:	4313      	orrs	r3, r2
 801c138:	6023      	str	r3, [r4, #0]
 801c13a:	7829      	ldrb	r1, [r5, #0]
 801c13c:	2206      	movs	r2, #6
 801c13e:	4826      	ldr	r0, [pc, #152]	@ (801c1d8 <_svfiprintf_r+0x1f0>)
 801c140:	1c6e      	adds	r6, r5, #1
 801c142:	7621      	strb	r1, [r4, #24]
 801c144:	f7fe fbc5 	bl	801a8d2 <memchr>
 801c148:	2800      	cmp	r0, #0
 801c14a:	d038      	beq.n	801c1be <_svfiprintf_r+0x1d6>
 801c14c:	4b23      	ldr	r3, [pc, #140]	@ (801c1dc <_svfiprintf_r+0x1f4>)
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d122      	bne.n	801c198 <_svfiprintf_r+0x1b0>
 801c152:	2207      	movs	r2, #7
 801c154:	9b07      	ldr	r3, [sp, #28]
 801c156:	3307      	adds	r3, #7
 801c158:	4393      	bics	r3, r2
 801c15a:	3308      	adds	r3, #8
 801c15c:	9307      	str	r3, [sp, #28]
 801c15e:	6963      	ldr	r3, [r4, #20]
 801c160:	9a04      	ldr	r2, [sp, #16]
 801c162:	189b      	adds	r3, r3, r2
 801c164:	6163      	str	r3, [r4, #20]
 801c166:	e762      	b.n	801c02e <_svfiprintf_r+0x46>
 801c168:	4343      	muls	r3, r0
 801c16a:	0035      	movs	r5, r6
 801c16c:	2101      	movs	r1, #1
 801c16e:	189b      	adds	r3, r3, r2
 801c170:	e7a4      	b.n	801c0bc <_svfiprintf_r+0xd4>
 801c172:	2300      	movs	r3, #0
 801c174:	200a      	movs	r0, #10
 801c176:	0019      	movs	r1, r3
 801c178:	3501      	adds	r5, #1
 801c17a:	6063      	str	r3, [r4, #4]
 801c17c:	782a      	ldrb	r2, [r5, #0]
 801c17e:	1c6e      	adds	r6, r5, #1
 801c180:	3a30      	subs	r2, #48	@ 0x30
 801c182:	2a09      	cmp	r2, #9
 801c184:	d903      	bls.n	801c18e <_svfiprintf_r+0x1a6>
 801c186:	2b00      	cmp	r3, #0
 801c188:	d0c8      	beq.n	801c11c <_svfiprintf_r+0x134>
 801c18a:	9109      	str	r1, [sp, #36]	@ 0x24
 801c18c:	e7c6      	b.n	801c11c <_svfiprintf_r+0x134>
 801c18e:	4341      	muls	r1, r0
 801c190:	0035      	movs	r5, r6
 801c192:	2301      	movs	r3, #1
 801c194:	1889      	adds	r1, r1, r2
 801c196:	e7f1      	b.n	801c17c <_svfiprintf_r+0x194>
 801c198:	aa07      	add	r2, sp, #28
 801c19a:	9200      	str	r2, [sp, #0]
 801c19c:	0021      	movs	r1, r4
 801c19e:	003a      	movs	r2, r7
 801c1a0:	4b0f      	ldr	r3, [pc, #60]	@ (801c1e0 <_svfiprintf_r+0x1f8>)
 801c1a2:	9803      	ldr	r0, [sp, #12]
 801c1a4:	f7fd fc7c 	bl	8019aa0 <_printf_float>
 801c1a8:	9004      	str	r0, [sp, #16]
 801c1aa:	9b04      	ldr	r3, [sp, #16]
 801c1ac:	3301      	adds	r3, #1
 801c1ae:	d1d6      	bne.n	801c15e <_svfiprintf_r+0x176>
 801c1b0:	89bb      	ldrh	r3, [r7, #12]
 801c1b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c1b4:	065b      	lsls	r3, r3, #25
 801c1b6:	d500      	bpl.n	801c1ba <_svfiprintf_r+0x1d2>
 801c1b8:	e72c      	b.n	801c014 <_svfiprintf_r+0x2c>
 801c1ba:	b021      	add	sp, #132	@ 0x84
 801c1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1be:	aa07      	add	r2, sp, #28
 801c1c0:	9200      	str	r2, [sp, #0]
 801c1c2:	0021      	movs	r1, r4
 801c1c4:	003a      	movs	r2, r7
 801c1c6:	4b06      	ldr	r3, [pc, #24]	@ (801c1e0 <_svfiprintf_r+0x1f8>)
 801c1c8:	9803      	ldr	r0, [sp, #12]
 801c1ca:	f7fd ff17 	bl	8019ffc <_printf_i>
 801c1ce:	e7eb      	b.n	801c1a8 <_svfiprintf_r+0x1c0>
 801c1d0:	080205db 	.word	0x080205db
 801c1d4:	080205e1 	.word	0x080205e1
 801c1d8:	080205e5 	.word	0x080205e5
 801c1dc:	08019aa1 	.word	0x08019aa1
 801c1e0:	0801bf29 	.word	0x0801bf29

0801c1e4 <__sfputc_r>:
 801c1e4:	6893      	ldr	r3, [r2, #8]
 801c1e6:	b510      	push	{r4, lr}
 801c1e8:	3b01      	subs	r3, #1
 801c1ea:	6093      	str	r3, [r2, #8]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	da04      	bge.n	801c1fa <__sfputc_r+0x16>
 801c1f0:	6994      	ldr	r4, [r2, #24]
 801c1f2:	42a3      	cmp	r3, r4
 801c1f4:	db07      	blt.n	801c206 <__sfputc_r+0x22>
 801c1f6:	290a      	cmp	r1, #10
 801c1f8:	d005      	beq.n	801c206 <__sfputc_r+0x22>
 801c1fa:	6813      	ldr	r3, [r2, #0]
 801c1fc:	1c58      	adds	r0, r3, #1
 801c1fe:	6010      	str	r0, [r2, #0]
 801c200:	7019      	strb	r1, [r3, #0]
 801c202:	0008      	movs	r0, r1
 801c204:	bd10      	pop	{r4, pc}
 801c206:	f7fe f9f7 	bl	801a5f8 <__swbuf_r>
 801c20a:	0001      	movs	r1, r0
 801c20c:	e7f9      	b.n	801c202 <__sfputc_r+0x1e>

0801c20e <__sfputs_r>:
 801c20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c210:	0006      	movs	r6, r0
 801c212:	000f      	movs	r7, r1
 801c214:	0014      	movs	r4, r2
 801c216:	18d5      	adds	r5, r2, r3
 801c218:	42ac      	cmp	r4, r5
 801c21a:	d101      	bne.n	801c220 <__sfputs_r+0x12>
 801c21c:	2000      	movs	r0, #0
 801c21e:	e007      	b.n	801c230 <__sfputs_r+0x22>
 801c220:	7821      	ldrb	r1, [r4, #0]
 801c222:	003a      	movs	r2, r7
 801c224:	0030      	movs	r0, r6
 801c226:	f7ff ffdd 	bl	801c1e4 <__sfputc_r>
 801c22a:	3401      	adds	r4, #1
 801c22c:	1c43      	adds	r3, r0, #1
 801c22e:	d1f3      	bne.n	801c218 <__sfputs_r+0xa>
 801c230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c234 <_vfiprintf_r>:
 801c234:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c236:	b0a1      	sub	sp, #132	@ 0x84
 801c238:	000f      	movs	r7, r1
 801c23a:	0015      	movs	r5, r2
 801c23c:	001e      	movs	r6, r3
 801c23e:	9003      	str	r0, [sp, #12]
 801c240:	2800      	cmp	r0, #0
 801c242:	d004      	beq.n	801c24e <_vfiprintf_r+0x1a>
 801c244:	6a03      	ldr	r3, [r0, #32]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d101      	bne.n	801c24e <_vfiprintf_r+0x1a>
 801c24a:	f7fe f873 	bl	801a334 <__sinit>
 801c24e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c250:	07db      	lsls	r3, r3, #31
 801c252:	d405      	bmi.n	801c260 <_vfiprintf_r+0x2c>
 801c254:	89bb      	ldrh	r3, [r7, #12]
 801c256:	059b      	lsls	r3, r3, #22
 801c258:	d402      	bmi.n	801c260 <_vfiprintf_r+0x2c>
 801c25a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801c25c:	f7fe fb2f 	bl	801a8be <__retarget_lock_acquire_recursive>
 801c260:	89bb      	ldrh	r3, [r7, #12]
 801c262:	071b      	lsls	r3, r3, #28
 801c264:	d502      	bpl.n	801c26c <_vfiprintf_r+0x38>
 801c266:	693b      	ldr	r3, [r7, #16]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d113      	bne.n	801c294 <_vfiprintf_r+0x60>
 801c26c:	0039      	movs	r1, r7
 801c26e:	9803      	ldr	r0, [sp, #12]
 801c270:	f7fe fa04 	bl	801a67c <__swsetup_r>
 801c274:	2800      	cmp	r0, #0
 801c276:	d00d      	beq.n	801c294 <_vfiprintf_r+0x60>
 801c278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c27a:	07db      	lsls	r3, r3, #31
 801c27c:	d503      	bpl.n	801c286 <_vfiprintf_r+0x52>
 801c27e:	2001      	movs	r0, #1
 801c280:	4240      	negs	r0, r0
 801c282:	b021      	add	sp, #132	@ 0x84
 801c284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c286:	89bb      	ldrh	r3, [r7, #12]
 801c288:	059b      	lsls	r3, r3, #22
 801c28a:	d4f8      	bmi.n	801c27e <_vfiprintf_r+0x4a>
 801c28c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801c28e:	f7fe fb17 	bl	801a8c0 <__retarget_lock_release_recursive>
 801c292:	e7f4      	b.n	801c27e <_vfiprintf_r+0x4a>
 801c294:	2300      	movs	r3, #0
 801c296:	ac08      	add	r4, sp, #32
 801c298:	6163      	str	r3, [r4, #20]
 801c29a:	3320      	adds	r3, #32
 801c29c:	7663      	strb	r3, [r4, #25]
 801c29e:	3310      	adds	r3, #16
 801c2a0:	76a3      	strb	r3, [r4, #26]
 801c2a2:	9607      	str	r6, [sp, #28]
 801c2a4:	002e      	movs	r6, r5
 801c2a6:	7833      	ldrb	r3, [r6, #0]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d001      	beq.n	801c2b0 <_vfiprintf_r+0x7c>
 801c2ac:	2b25      	cmp	r3, #37	@ 0x25
 801c2ae:	d148      	bne.n	801c342 <_vfiprintf_r+0x10e>
 801c2b0:	1b73      	subs	r3, r6, r5
 801c2b2:	9305      	str	r3, [sp, #20]
 801c2b4:	42ae      	cmp	r6, r5
 801c2b6:	d00b      	beq.n	801c2d0 <_vfiprintf_r+0x9c>
 801c2b8:	002a      	movs	r2, r5
 801c2ba:	0039      	movs	r1, r7
 801c2bc:	9803      	ldr	r0, [sp, #12]
 801c2be:	f7ff ffa6 	bl	801c20e <__sfputs_r>
 801c2c2:	3001      	adds	r0, #1
 801c2c4:	d100      	bne.n	801c2c8 <_vfiprintf_r+0x94>
 801c2c6:	e0ae      	b.n	801c426 <_vfiprintf_r+0x1f2>
 801c2c8:	6963      	ldr	r3, [r4, #20]
 801c2ca:	9a05      	ldr	r2, [sp, #20]
 801c2cc:	189b      	adds	r3, r3, r2
 801c2ce:	6163      	str	r3, [r4, #20]
 801c2d0:	7833      	ldrb	r3, [r6, #0]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d100      	bne.n	801c2d8 <_vfiprintf_r+0xa4>
 801c2d6:	e0a6      	b.n	801c426 <_vfiprintf_r+0x1f2>
 801c2d8:	2201      	movs	r2, #1
 801c2da:	2300      	movs	r3, #0
 801c2dc:	4252      	negs	r2, r2
 801c2de:	6062      	str	r2, [r4, #4]
 801c2e0:	a904      	add	r1, sp, #16
 801c2e2:	3254      	adds	r2, #84	@ 0x54
 801c2e4:	1852      	adds	r2, r2, r1
 801c2e6:	1c75      	adds	r5, r6, #1
 801c2e8:	6023      	str	r3, [r4, #0]
 801c2ea:	60e3      	str	r3, [r4, #12]
 801c2ec:	60a3      	str	r3, [r4, #8]
 801c2ee:	7013      	strb	r3, [r2, #0]
 801c2f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 801c2f2:	4b59      	ldr	r3, [pc, #356]	@ (801c458 <_vfiprintf_r+0x224>)
 801c2f4:	2205      	movs	r2, #5
 801c2f6:	0018      	movs	r0, r3
 801c2f8:	7829      	ldrb	r1, [r5, #0]
 801c2fa:	9305      	str	r3, [sp, #20]
 801c2fc:	f7fe fae9 	bl	801a8d2 <memchr>
 801c300:	1c6e      	adds	r6, r5, #1
 801c302:	2800      	cmp	r0, #0
 801c304:	d11f      	bne.n	801c346 <_vfiprintf_r+0x112>
 801c306:	6822      	ldr	r2, [r4, #0]
 801c308:	06d3      	lsls	r3, r2, #27
 801c30a:	d504      	bpl.n	801c316 <_vfiprintf_r+0xe2>
 801c30c:	2353      	movs	r3, #83	@ 0x53
 801c30e:	a904      	add	r1, sp, #16
 801c310:	185b      	adds	r3, r3, r1
 801c312:	2120      	movs	r1, #32
 801c314:	7019      	strb	r1, [r3, #0]
 801c316:	0713      	lsls	r3, r2, #28
 801c318:	d504      	bpl.n	801c324 <_vfiprintf_r+0xf0>
 801c31a:	2353      	movs	r3, #83	@ 0x53
 801c31c:	a904      	add	r1, sp, #16
 801c31e:	185b      	adds	r3, r3, r1
 801c320:	212b      	movs	r1, #43	@ 0x2b
 801c322:	7019      	strb	r1, [r3, #0]
 801c324:	782b      	ldrb	r3, [r5, #0]
 801c326:	2b2a      	cmp	r3, #42	@ 0x2a
 801c328:	d016      	beq.n	801c358 <_vfiprintf_r+0x124>
 801c32a:	002e      	movs	r6, r5
 801c32c:	2100      	movs	r1, #0
 801c32e:	200a      	movs	r0, #10
 801c330:	68e3      	ldr	r3, [r4, #12]
 801c332:	7832      	ldrb	r2, [r6, #0]
 801c334:	1c75      	adds	r5, r6, #1
 801c336:	3a30      	subs	r2, #48	@ 0x30
 801c338:	2a09      	cmp	r2, #9
 801c33a:	d950      	bls.n	801c3de <_vfiprintf_r+0x1aa>
 801c33c:	2900      	cmp	r1, #0
 801c33e:	d111      	bne.n	801c364 <_vfiprintf_r+0x130>
 801c340:	e017      	b.n	801c372 <_vfiprintf_r+0x13e>
 801c342:	3601      	adds	r6, #1
 801c344:	e7af      	b.n	801c2a6 <_vfiprintf_r+0x72>
 801c346:	9b05      	ldr	r3, [sp, #20]
 801c348:	6822      	ldr	r2, [r4, #0]
 801c34a:	1ac0      	subs	r0, r0, r3
 801c34c:	2301      	movs	r3, #1
 801c34e:	4083      	lsls	r3, r0
 801c350:	4313      	orrs	r3, r2
 801c352:	0035      	movs	r5, r6
 801c354:	6023      	str	r3, [r4, #0]
 801c356:	e7cc      	b.n	801c2f2 <_vfiprintf_r+0xbe>
 801c358:	9b07      	ldr	r3, [sp, #28]
 801c35a:	1d19      	adds	r1, r3, #4
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	9107      	str	r1, [sp, #28]
 801c360:	2b00      	cmp	r3, #0
 801c362:	db01      	blt.n	801c368 <_vfiprintf_r+0x134>
 801c364:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c366:	e004      	b.n	801c372 <_vfiprintf_r+0x13e>
 801c368:	425b      	negs	r3, r3
 801c36a:	60e3      	str	r3, [r4, #12]
 801c36c:	2302      	movs	r3, #2
 801c36e:	4313      	orrs	r3, r2
 801c370:	6023      	str	r3, [r4, #0]
 801c372:	7833      	ldrb	r3, [r6, #0]
 801c374:	2b2e      	cmp	r3, #46	@ 0x2e
 801c376:	d10c      	bne.n	801c392 <_vfiprintf_r+0x15e>
 801c378:	7873      	ldrb	r3, [r6, #1]
 801c37a:	2b2a      	cmp	r3, #42	@ 0x2a
 801c37c:	d134      	bne.n	801c3e8 <_vfiprintf_r+0x1b4>
 801c37e:	9b07      	ldr	r3, [sp, #28]
 801c380:	3602      	adds	r6, #2
 801c382:	1d1a      	adds	r2, r3, #4
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	9207      	str	r2, [sp, #28]
 801c388:	2b00      	cmp	r3, #0
 801c38a:	da01      	bge.n	801c390 <_vfiprintf_r+0x15c>
 801c38c:	2301      	movs	r3, #1
 801c38e:	425b      	negs	r3, r3
 801c390:	9309      	str	r3, [sp, #36]	@ 0x24
 801c392:	4d32      	ldr	r5, [pc, #200]	@ (801c45c <_vfiprintf_r+0x228>)
 801c394:	2203      	movs	r2, #3
 801c396:	0028      	movs	r0, r5
 801c398:	7831      	ldrb	r1, [r6, #0]
 801c39a:	f7fe fa9a 	bl	801a8d2 <memchr>
 801c39e:	2800      	cmp	r0, #0
 801c3a0:	d006      	beq.n	801c3b0 <_vfiprintf_r+0x17c>
 801c3a2:	2340      	movs	r3, #64	@ 0x40
 801c3a4:	1b40      	subs	r0, r0, r5
 801c3a6:	4083      	lsls	r3, r0
 801c3a8:	6822      	ldr	r2, [r4, #0]
 801c3aa:	3601      	adds	r6, #1
 801c3ac:	4313      	orrs	r3, r2
 801c3ae:	6023      	str	r3, [r4, #0]
 801c3b0:	7831      	ldrb	r1, [r6, #0]
 801c3b2:	2206      	movs	r2, #6
 801c3b4:	482a      	ldr	r0, [pc, #168]	@ (801c460 <_vfiprintf_r+0x22c>)
 801c3b6:	1c75      	adds	r5, r6, #1
 801c3b8:	7621      	strb	r1, [r4, #24]
 801c3ba:	f7fe fa8a 	bl	801a8d2 <memchr>
 801c3be:	2800      	cmp	r0, #0
 801c3c0:	d040      	beq.n	801c444 <_vfiprintf_r+0x210>
 801c3c2:	4b28      	ldr	r3, [pc, #160]	@ (801c464 <_vfiprintf_r+0x230>)
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d122      	bne.n	801c40e <_vfiprintf_r+0x1da>
 801c3c8:	2207      	movs	r2, #7
 801c3ca:	9b07      	ldr	r3, [sp, #28]
 801c3cc:	3307      	adds	r3, #7
 801c3ce:	4393      	bics	r3, r2
 801c3d0:	3308      	adds	r3, #8
 801c3d2:	9307      	str	r3, [sp, #28]
 801c3d4:	6963      	ldr	r3, [r4, #20]
 801c3d6:	9a04      	ldr	r2, [sp, #16]
 801c3d8:	189b      	adds	r3, r3, r2
 801c3da:	6163      	str	r3, [r4, #20]
 801c3dc:	e762      	b.n	801c2a4 <_vfiprintf_r+0x70>
 801c3de:	4343      	muls	r3, r0
 801c3e0:	002e      	movs	r6, r5
 801c3e2:	2101      	movs	r1, #1
 801c3e4:	189b      	adds	r3, r3, r2
 801c3e6:	e7a4      	b.n	801c332 <_vfiprintf_r+0xfe>
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	200a      	movs	r0, #10
 801c3ec:	0019      	movs	r1, r3
 801c3ee:	3601      	adds	r6, #1
 801c3f0:	6063      	str	r3, [r4, #4]
 801c3f2:	7832      	ldrb	r2, [r6, #0]
 801c3f4:	1c75      	adds	r5, r6, #1
 801c3f6:	3a30      	subs	r2, #48	@ 0x30
 801c3f8:	2a09      	cmp	r2, #9
 801c3fa:	d903      	bls.n	801c404 <_vfiprintf_r+0x1d0>
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d0c8      	beq.n	801c392 <_vfiprintf_r+0x15e>
 801c400:	9109      	str	r1, [sp, #36]	@ 0x24
 801c402:	e7c6      	b.n	801c392 <_vfiprintf_r+0x15e>
 801c404:	4341      	muls	r1, r0
 801c406:	002e      	movs	r6, r5
 801c408:	2301      	movs	r3, #1
 801c40a:	1889      	adds	r1, r1, r2
 801c40c:	e7f1      	b.n	801c3f2 <_vfiprintf_r+0x1be>
 801c40e:	aa07      	add	r2, sp, #28
 801c410:	9200      	str	r2, [sp, #0]
 801c412:	0021      	movs	r1, r4
 801c414:	003a      	movs	r2, r7
 801c416:	4b14      	ldr	r3, [pc, #80]	@ (801c468 <_vfiprintf_r+0x234>)
 801c418:	9803      	ldr	r0, [sp, #12]
 801c41a:	f7fd fb41 	bl	8019aa0 <_printf_float>
 801c41e:	9004      	str	r0, [sp, #16]
 801c420:	9b04      	ldr	r3, [sp, #16]
 801c422:	3301      	adds	r3, #1
 801c424:	d1d6      	bne.n	801c3d4 <_vfiprintf_r+0x1a0>
 801c426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c428:	07db      	lsls	r3, r3, #31
 801c42a:	d405      	bmi.n	801c438 <_vfiprintf_r+0x204>
 801c42c:	89bb      	ldrh	r3, [r7, #12]
 801c42e:	059b      	lsls	r3, r3, #22
 801c430:	d402      	bmi.n	801c438 <_vfiprintf_r+0x204>
 801c432:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801c434:	f7fe fa44 	bl	801a8c0 <__retarget_lock_release_recursive>
 801c438:	89bb      	ldrh	r3, [r7, #12]
 801c43a:	065b      	lsls	r3, r3, #25
 801c43c:	d500      	bpl.n	801c440 <_vfiprintf_r+0x20c>
 801c43e:	e71e      	b.n	801c27e <_vfiprintf_r+0x4a>
 801c440:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c442:	e71e      	b.n	801c282 <_vfiprintf_r+0x4e>
 801c444:	aa07      	add	r2, sp, #28
 801c446:	9200      	str	r2, [sp, #0]
 801c448:	0021      	movs	r1, r4
 801c44a:	003a      	movs	r2, r7
 801c44c:	4b06      	ldr	r3, [pc, #24]	@ (801c468 <_vfiprintf_r+0x234>)
 801c44e:	9803      	ldr	r0, [sp, #12]
 801c450:	f7fd fdd4 	bl	8019ffc <_printf_i>
 801c454:	e7e3      	b.n	801c41e <_vfiprintf_r+0x1ea>
 801c456:	46c0      	nop			@ (mov r8, r8)
 801c458:	080205db 	.word	0x080205db
 801c45c:	080205e1 	.word	0x080205e1
 801c460:	080205e5 	.word	0x080205e5
 801c464:	08019aa1 	.word	0x08019aa1
 801c468:	0801c20f 	.word	0x0801c20f

0801c46c <__sflush_r>:
 801c46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c46e:	220c      	movs	r2, #12
 801c470:	5e8b      	ldrsh	r3, [r1, r2]
 801c472:	0005      	movs	r5, r0
 801c474:	000c      	movs	r4, r1
 801c476:	071a      	lsls	r2, r3, #28
 801c478:	d456      	bmi.n	801c528 <__sflush_r+0xbc>
 801c47a:	684a      	ldr	r2, [r1, #4]
 801c47c:	2a00      	cmp	r2, #0
 801c47e:	dc02      	bgt.n	801c486 <__sflush_r+0x1a>
 801c480:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801c482:	2a00      	cmp	r2, #0
 801c484:	dd4e      	ble.n	801c524 <__sflush_r+0xb8>
 801c486:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801c488:	2f00      	cmp	r7, #0
 801c48a:	d04b      	beq.n	801c524 <__sflush_r+0xb8>
 801c48c:	2200      	movs	r2, #0
 801c48e:	2080      	movs	r0, #128	@ 0x80
 801c490:	682e      	ldr	r6, [r5, #0]
 801c492:	602a      	str	r2, [r5, #0]
 801c494:	001a      	movs	r2, r3
 801c496:	0140      	lsls	r0, r0, #5
 801c498:	6a21      	ldr	r1, [r4, #32]
 801c49a:	4002      	ands	r2, r0
 801c49c:	4203      	tst	r3, r0
 801c49e:	d033      	beq.n	801c508 <__sflush_r+0x9c>
 801c4a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c4a2:	89a3      	ldrh	r3, [r4, #12]
 801c4a4:	075b      	lsls	r3, r3, #29
 801c4a6:	d506      	bpl.n	801c4b6 <__sflush_r+0x4a>
 801c4a8:	6863      	ldr	r3, [r4, #4]
 801c4aa:	1ad2      	subs	r2, r2, r3
 801c4ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d001      	beq.n	801c4b6 <__sflush_r+0x4a>
 801c4b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c4b4:	1ad2      	subs	r2, r2, r3
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	0028      	movs	r0, r5
 801c4ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801c4bc:	6a21      	ldr	r1, [r4, #32]
 801c4be:	47b8      	blx	r7
 801c4c0:	89a2      	ldrh	r2, [r4, #12]
 801c4c2:	1c43      	adds	r3, r0, #1
 801c4c4:	d106      	bne.n	801c4d4 <__sflush_r+0x68>
 801c4c6:	6829      	ldr	r1, [r5, #0]
 801c4c8:	291d      	cmp	r1, #29
 801c4ca:	d846      	bhi.n	801c55a <__sflush_r+0xee>
 801c4cc:	4b29      	ldr	r3, [pc, #164]	@ (801c574 <__sflush_r+0x108>)
 801c4ce:	40cb      	lsrs	r3, r1
 801c4d0:	07db      	lsls	r3, r3, #31
 801c4d2:	d542      	bpl.n	801c55a <__sflush_r+0xee>
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	6063      	str	r3, [r4, #4]
 801c4d8:	6923      	ldr	r3, [r4, #16]
 801c4da:	6023      	str	r3, [r4, #0]
 801c4dc:	04d2      	lsls	r2, r2, #19
 801c4de:	d505      	bpl.n	801c4ec <__sflush_r+0x80>
 801c4e0:	1c43      	adds	r3, r0, #1
 801c4e2:	d102      	bne.n	801c4ea <__sflush_r+0x7e>
 801c4e4:	682b      	ldr	r3, [r5, #0]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d100      	bne.n	801c4ec <__sflush_r+0x80>
 801c4ea:	6560      	str	r0, [r4, #84]	@ 0x54
 801c4ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c4ee:	602e      	str	r6, [r5, #0]
 801c4f0:	2900      	cmp	r1, #0
 801c4f2:	d017      	beq.n	801c524 <__sflush_r+0xb8>
 801c4f4:	0023      	movs	r3, r4
 801c4f6:	3344      	adds	r3, #68	@ 0x44
 801c4f8:	4299      	cmp	r1, r3
 801c4fa:	d002      	beq.n	801c502 <__sflush_r+0x96>
 801c4fc:	0028      	movs	r0, r5
 801c4fe:	f7ff f871 	bl	801b5e4 <_free_r>
 801c502:	2300      	movs	r3, #0
 801c504:	6363      	str	r3, [r4, #52]	@ 0x34
 801c506:	e00d      	b.n	801c524 <__sflush_r+0xb8>
 801c508:	2301      	movs	r3, #1
 801c50a:	0028      	movs	r0, r5
 801c50c:	47b8      	blx	r7
 801c50e:	0002      	movs	r2, r0
 801c510:	1c43      	adds	r3, r0, #1
 801c512:	d1c6      	bne.n	801c4a2 <__sflush_r+0x36>
 801c514:	682b      	ldr	r3, [r5, #0]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d0c3      	beq.n	801c4a2 <__sflush_r+0x36>
 801c51a:	2b1d      	cmp	r3, #29
 801c51c:	d001      	beq.n	801c522 <__sflush_r+0xb6>
 801c51e:	2b16      	cmp	r3, #22
 801c520:	d11a      	bne.n	801c558 <__sflush_r+0xec>
 801c522:	602e      	str	r6, [r5, #0]
 801c524:	2000      	movs	r0, #0
 801c526:	e01e      	b.n	801c566 <__sflush_r+0xfa>
 801c528:	690e      	ldr	r6, [r1, #16]
 801c52a:	2e00      	cmp	r6, #0
 801c52c:	d0fa      	beq.n	801c524 <__sflush_r+0xb8>
 801c52e:	680f      	ldr	r7, [r1, #0]
 801c530:	600e      	str	r6, [r1, #0]
 801c532:	1bba      	subs	r2, r7, r6
 801c534:	9201      	str	r2, [sp, #4]
 801c536:	2200      	movs	r2, #0
 801c538:	079b      	lsls	r3, r3, #30
 801c53a:	d100      	bne.n	801c53e <__sflush_r+0xd2>
 801c53c:	694a      	ldr	r2, [r1, #20]
 801c53e:	60a2      	str	r2, [r4, #8]
 801c540:	9b01      	ldr	r3, [sp, #4]
 801c542:	2b00      	cmp	r3, #0
 801c544:	ddee      	ble.n	801c524 <__sflush_r+0xb8>
 801c546:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c548:	0032      	movs	r2, r6
 801c54a:	001f      	movs	r7, r3
 801c54c:	0028      	movs	r0, r5
 801c54e:	9b01      	ldr	r3, [sp, #4]
 801c550:	6a21      	ldr	r1, [r4, #32]
 801c552:	47b8      	blx	r7
 801c554:	2800      	cmp	r0, #0
 801c556:	dc07      	bgt.n	801c568 <__sflush_r+0xfc>
 801c558:	89a2      	ldrh	r2, [r4, #12]
 801c55a:	2340      	movs	r3, #64	@ 0x40
 801c55c:	2001      	movs	r0, #1
 801c55e:	4313      	orrs	r3, r2
 801c560:	b21b      	sxth	r3, r3
 801c562:	81a3      	strh	r3, [r4, #12]
 801c564:	4240      	negs	r0, r0
 801c566:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c568:	9b01      	ldr	r3, [sp, #4]
 801c56a:	1836      	adds	r6, r6, r0
 801c56c:	1a1b      	subs	r3, r3, r0
 801c56e:	9301      	str	r3, [sp, #4]
 801c570:	e7e6      	b.n	801c540 <__sflush_r+0xd4>
 801c572:	46c0      	nop			@ (mov r8, r8)
 801c574:	20400001 	.word	0x20400001

0801c578 <_fflush_r>:
 801c578:	690b      	ldr	r3, [r1, #16]
 801c57a:	b570      	push	{r4, r5, r6, lr}
 801c57c:	0005      	movs	r5, r0
 801c57e:	000c      	movs	r4, r1
 801c580:	2b00      	cmp	r3, #0
 801c582:	d102      	bne.n	801c58a <_fflush_r+0x12>
 801c584:	2500      	movs	r5, #0
 801c586:	0028      	movs	r0, r5
 801c588:	bd70      	pop	{r4, r5, r6, pc}
 801c58a:	2800      	cmp	r0, #0
 801c58c:	d004      	beq.n	801c598 <_fflush_r+0x20>
 801c58e:	6a03      	ldr	r3, [r0, #32]
 801c590:	2b00      	cmp	r3, #0
 801c592:	d101      	bne.n	801c598 <_fflush_r+0x20>
 801c594:	f7fd fece 	bl	801a334 <__sinit>
 801c598:	220c      	movs	r2, #12
 801c59a:	5ea3      	ldrsh	r3, [r4, r2]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d0f1      	beq.n	801c584 <_fflush_r+0xc>
 801c5a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c5a2:	07d2      	lsls	r2, r2, #31
 801c5a4:	d404      	bmi.n	801c5b0 <_fflush_r+0x38>
 801c5a6:	059b      	lsls	r3, r3, #22
 801c5a8:	d402      	bmi.n	801c5b0 <_fflush_r+0x38>
 801c5aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5ac:	f7fe f987 	bl	801a8be <__retarget_lock_acquire_recursive>
 801c5b0:	0028      	movs	r0, r5
 801c5b2:	0021      	movs	r1, r4
 801c5b4:	f7ff ff5a 	bl	801c46c <__sflush_r>
 801c5b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c5ba:	0005      	movs	r5, r0
 801c5bc:	07db      	lsls	r3, r3, #31
 801c5be:	d4e2      	bmi.n	801c586 <_fflush_r+0xe>
 801c5c0:	89a3      	ldrh	r3, [r4, #12]
 801c5c2:	059b      	lsls	r3, r3, #22
 801c5c4:	d4df      	bmi.n	801c586 <_fflush_r+0xe>
 801c5c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5c8:	f7fe f97a 	bl	801a8c0 <__retarget_lock_release_recursive>
 801c5cc:	e7db      	b.n	801c586 <_fflush_r+0xe>
	...

0801c5d0 <__swhatbuf_r>:
 801c5d0:	b570      	push	{r4, r5, r6, lr}
 801c5d2:	000e      	movs	r6, r1
 801c5d4:	001d      	movs	r5, r3
 801c5d6:	230e      	movs	r3, #14
 801c5d8:	5ec9      	ldrsh	r1, [r1, r3]
 801c5da:	0014      	movs	r4, r2
 801c5dc:	b096      	sub	sp, #88	@ 0x58
 801c5de:	2900      	cmp	r1, #0
 801c5e0:	da0c      	bge.n	801c5fc <__swhatbuf_r+0x2c>
 801c5e2:	89b2      	ldrh	r2, [r6, #12]
 801c5e4:	2380      	movs	r3, #128	@ 0x80
 801c5e6:	0011      	movs	r1, r2
 801c5e8:	4019      	ands	r1, r3
 801c5ea:	421a      	tst	r2, r3
 801c5ec:	d114      	bne.n	801c618 <__swhatbuf_r+0x48>
 801c5ee:	2380      	movs	r3, #128	@ 0x80
 801c5f0:	00db      	lsls	r3, r3, #3
 801c5f2:	2000      	movs	r0, #0
 801c5f4:	6029      	str	r1, [r5, #0]
 801c5f6:	6023      	str	r3, [r4, #0]
 801c5f8:	b016      	add	sp, #88	@ 0x58
 801c5fa:	bd70      	pop	{r4, r5, r6, pc}
 801c5fc:	466a      	mov	r2, sp
 801c5fe:	f000 f89b 	bl	801c738 <_fstat_r>
 801c602:	2800      	cmp	r0, #0
 801c604:	dbed      	blt.n	801c5e2 <__swhatbuf_r+0x12>
 801c606:	23f0      	movs	r3, #240	@ 0xf0
 801c608:	9901      	ldr	r1, [sp, #4]
 801c60a:	021b      	lsls	r3, r3, #8
 801c60c:	4019      	ands	r1, r3
 801c60e:	4b04      	ldr	r3, [pc, #16]	@ (801c620 <__swhatbuf_r+0x50>)
 801c610:	18c9      	adds	r1, r1, r3
 801c612:	424b      	negs	r3, r1
 801c614:	4159      	adcs	r1, r3
 801c616:	e7ea      	b.n	801c5ee <__swhatbuf_r+0x1e>
 801c618:	2100      	movs	r1, #0
 801c61a:	2340      	movs	r3, #64	@ 0x40
 801c61c:	e7e9      	b.n	801c5f2 <__swhatbuf_r+0x22>
 801c61e:	46c0      	nop			@ (mov r8, r8)
 801c620:	ffffe000 	.word	0xffffe000

0801c624 <__smakebuf_r>:
 801c624:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c626:	2602      	movs	r6, #2
 801c628:	898b      	ldrh	r3, [r1, #12]
 801c62a:	0005      	movs	r5, r0
 801c62c:	000c      	movs	r4, r1
 801c62e:	b085      	sub	sp, #20
 801c630:	4233      	tst	r3, r6
 801c632:	d007      	beq.n	801c644 <__smakebuf_r+0x20>
 801c634:	0023      	movs	r3, r4
 801c636:	3347      	adds	r3, #71	@ 0x47
 801c638:	6023      	str	r3, [r4, #0]
 801c63a:	6123      	str	r3, [r4, #16]
 801c63c:	2301      	movs	r3, #1
 801c63e:	6163      	str	r3, [r4, #20]
 801c640:	b005      	add	sp, #20
 801c642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c644:	ab03      	add	r3, sp, #12
 801c646:	aa02      	add	r2, sp, #8
 801c648:	f7ff ffc2 	bl	801c5d0 <__swhatbuf_r>
 801c64c:	9f02      	ldr	r7, [sp, #8]
 801c64e:	9001      	str	r0, [sp, #4]
 801c650:	0039      	movs	r1, r7
 801c652:	0028      	movs	r0, r5
 801c654:	f7ff f83c 	bl	801b6d0 <_malloc_r>
 801c658:	2800      	cmp	r0, #0
 801c65a:	d108      	bne.n	801c66e <__smakebuf_r+0x4a>
 801c65c:	220c      	movs	r2, #12
 801c65e:	5ea3      	ldrsh	r3, [r4, r2]
 801c660:	059a      	lsls	r2, r3, #22
 801c662:	d4ed      	bmi.n	801c640 <__smakebuf_r+0x1c>
 801c664:	2203      	movs	r2, #3
 801c666:	4393      	bics	r3, r2
 801c668:	431e      	orrs	r6, r3
 801c66a:	81a6      	strh	r6, [r4, #12]
 801c66c:	e7e2      	b.n	801c634 <__smakebuf_r+0x10>
 801c66e:	2380      	movs	r3, #128	@ 0x80
 801c670:	89a2      	ldrh	r2, [r4, #12]
 801c672:	6020      	str	r0, [r4, #0]
 801c674:	4313      	orrs	r3, r2
 801c676:	81a3      	strh	r3, [r4, #12]
 801c678:	9b03      	ldr	r3, [sp, #12]
 801c67a:	6120      	str	r0, [r4, #16]
 801c67c:	6167      	str	r7, [r4, #20]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d00c      	beq.n	801c69c <__smakebuf_r+0x78>
 801c682:	0028      	movs	r0, r5
 801c684:	230e      	movs	r3, #14
 801c686:	5ee1      	ldrsh	r1, [r4, r3]
 801c688:	f000 f868 	bl	801c75c <_isatty_r>
 801c68c:	2800      	cmp	r0, #0
 801c68e:	d005      	beq.n	801c69c <__smakebuf_r+0x78>
 801c690:	2303      	movs	r3, #3
 801c692:	89a2      	ldrh	r2, [r4, #12]
 801c694:	439a      	bics	r2, r3
 801c696:	3b02      	subs	r3, #2
 801c698:	4313      	orrs	r3, r2
 801c69a:	81a3      	strh	r3, [r4, #12]
 801c69c:	89a3      	ldrh	r3, [r4, #12]
 801c69e:	9a01      	ldr	r2, [sp, #4]
 801c6a0:	4313      	orrs	r3, r2
 801c6a2:	81a3      	strh	r3, [r4, #12]
 801c6a4:	e7cc      	b.n	801c640 <__smakebuf_r+0x1c>

0801c6a6 <_putc_r>:
 801c6a6:	b570      	push	{r4, r5, r6, lr}
 801c6a8:	0006      	movs	r6, r0
 801c6aa:	000d      	movs	r5, r1
 801c6ac:	0014      	movs	r4, r2
 801c6ae:	2800      	cmp	r0, #0
 801c6b0:	d004      	beq.n	801c6bc <_putc_r+0x16>
 801c6b2:	6a03      	ldr	r3, [r0, #32]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d101      	bne.n	801c6bc <_putc_r+0x16>
 801c6b8:	f7fd fe3c 	bl	801a334 <__sinit>
 801c6bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c6be:	07db      	lsls	r3, r3, #31
 801c6c0:	d405      	bmi.n	801c6ce <_putc_r+0x28>
 801c6c2:	89a3      	ldrh	r3, [r4, #12]
 801c6c4:	059b      	lsls	r3, r3, #22
 801c6c6:	d402      	bmi.n	801c6ce <_putc_r+0x28>
 801c6c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6ca:	f7fe f8f8 	bl	801a8be <__retarget_lock_acquire_recursive>
 801c6ce:	68a3      	ldr	r3, [r4, #8]
 801c6d0:	3b01      	subs	r3, #1
 801c6d2:	60a3      	str	r3, [r4, #8]
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	da05      	bge.n	801c6e4 <_putc_r+0x3e>
 801c6d8:	69a2      	ldr	r2, [r4, #24]
 801c6da:	4293      	cmp	r3, r2
 801c6dc:	db12      	blt.n	801c704 <_putc_r+0x5e>
 801c6de:	b2eb      	uxtb	r3, r5
 801c6e0:	2b0a      	cmp	r3, #10
 801c6e2:	d00f      	beq.n	801c704 <_putc_r+0x5e>
 801c6e4:	6823      	ldr	r3, [r4, #0]
 801c6e6:	1c5a      	adds	r2, r3, #1
 801c6e8:	6022      	str	r2, [r4, #0]
 801c6ea:	701d      	strb	r5, [r3, #0]
 801c6ec:	b2ed      	uxtb	r5, r5
 801c6ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c6f0:	07db      	lsls	r3, r3, #31
 801c6f2:	d405      	bmi.n	801c700 <_putc_r+0x5a>
 801c6f4:	89a3      	ldrh	r3, [r4, #12]
 801c6f6:	059b      	lsls	r3, r3, #22
 801c6f8:	d402      	bmi.n	801c700 <_putc_r+0x5a>
 801c6fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6fc:	f7fe f8e0 	bl	801a8c0 <__retarget_lock_release_recursive>
 801c700:	0028      	movs	r0, r5
 801c702:	bd70      	pop	{r4, r5, r6, pc}
 801c704:	0029      	movs	r1, r5
 801c706:	0022      	movs	r2, r4
 801c708:	0030      	movs	r0, r6
 801c70a:	f7fd ff75 	bl	801a5f8 <__swbuf_r>
 801c70e:	0005      	movs	r5, r0
 801c710:	e7ed      	b.n	801c6ee <_putc_r+0x48>

0801c712 <memmove>:
 801c712:	b510      	push	{r4, lr}
 801c714:	4288      	cmp	r0, r1
 801c716:	d902      	bls.n	801c71e <memmove+0xc>
 801c718:	188b      	adds	r3, r1, r2
 801c71a:	4298      	cmp	r0, r3
 801c71c:	d308      	bcc.n	801c730 <memmove+0x1e>
 801c71e:	2300      	movs	r3, #0
 801c720:	429a      	cmp	r2, r3
 801c722:	d007      	beq.n	801c734 <memmove+0x22>
 801c724:	5ccc      	ldrb	r4, [r1, r3]
 801c726:	54c4      	strb	r4, [r0, r3]
 801c728:	3301      	adds	r3, #1
 801c72a:	e7f9      	b.n	801c720 <memmove+0xe>
 801c72c:	5c8b      	ldrb	r3, [r1, r2]
 801c72e:	5483      	strb	r3, [r0, r2]
 801c730:	3a01      	subs	r2, #1
 801c732:	d2fb      	bcs.n	801c72c <memmove+0x1a>
 801c734:	bd10      	pop	{r4, pc}
	...

0801c738 <_fstat_r>:
 801c738:	2300      	movs	r3, #0
 801c73a:	b570      	push	{r4, r5, r6, lr}
 801c73c:	4d06      	ldr	r5, [pc, #24]	@ (801c758 <_fstat_r+0x20>)
 801c73e:	0004      	movs	r4, r0
 801c740:	0008      	movs	r0, r1
 801c742:	0011      	movs	r1, r2
 801c744:	602b      	str	r3, [r5, #0]
 801c746:	f7ee f98c 	bl	800aa62 <_fstat>
 801c74a:	1c43      	adds	r3, r0, #1
 801c74c:	d103      	bne.n	801c756 <_fstat_r+0x1e>
 801c74e:	682b      	ldr	r3, [r5, #0]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d000      	beq.n	801c756 <_fstat_r+0x1e>
 801c754:	6023      	str	r3, [r4, #0]
 801c756:	bd70      	pop	{r4, r5, r6, pc}
 801c758:	200067ec 	.word	0x200067ec

0801c75c <_isatty_r>:
 801c75c:	2300      	movs	r3, #0
 801c75e:	b570      	push	{r4, r5, r6, lr}
 801c760:	4d06      	ldr	r5, [pc, #24]	@ (801c77c <_isatty_r+0x20>)
 801c762:	0004      	movs	r4, r0
 801c764:	0008      	movs	r0, r1
 801c766:	602b      	str	r3, [r5, #0]
 801c768:	f7ee f980 	bl	800aa6c <_isatty>
 801c76c:	1c43      	adds	r3, r0, #1
 801c76e:	d103      	bne.n	801c778 <_isatty_r+0x1c>
 801c770:	682b      	ldr	r3, [r5, #0]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d000      	beq.n	801c778 <_isatty_r+0x1c>
 801c776:	6023      	str	r3, [r4, #0]
 801c778:	bd70      	pop	{r4, r5, r6, pc}
 801c77a:	46c0      	nop			@ (mov r8, r8)
 801c77c:	200067ec 	.word	0x200067ec

0801c780 <_sbrk_r>:
 801c780:	2300      	movs	r3, #0
 801c782:	b570      	push	{r4, r5, r6, lr}
 801c784:	4d06      	ldr	r5, [pc, #24]	@ (801c7a0 <_sbrk_r+0x20>)
 801c786:	0004      	movs	r4, r0
 801c788:	0008      	movs	r0, r1
 801c78a:	602b      	str	r3, [r5, #0]
 801c78c:	f7ee f972 	bl	800aa74 <_sbrk>
 801c790:	1c43      	adds	r3, r0, #1
 801c792:	d103      	bne.n	801c79c <_sbrk_r+0x1c>
 801c794:	682b      	ldr	r3, [r5, #0]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d000      	beq.n	801c79c <_sbrk_r+0x1c>
 801c79a:	6023      	str	r3, [r4, #0]
 801c79c:	bd70      	pop	{r4, r5, r6, pc}
 801c79e:	46c0      	nop			@ (mov r8, r8)
 801c7a0:	200067ec 	.word	0x200067ec

0801c7a4 <__assert_func>:
 801c7a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c7a6:	0014      	movs	r4, r2
 801c7a8:	001a      	movs	r2, r3
 801c7aa:	4b09      	ldr	r3, [pc, #36]	@ (801c7d0 <__assert_func+0x2c>)
 801c7ac:	0005      	movs	r5, r0
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	000e      	movs	r6, r1
 801c7b2:	68d8      	ldr	r0, [r3, #12]
 801c7b4:	4b07      	ldr	r3, [pc, #28]	@ (801c7d4 <__assert_func+0x30>)
 801c7b6:	2c00      	cmp	r4, #0
 801c7b8:	d101      	bne.n	801c7be <__assert_func+0x1a>
 801c7ba:	4b07      	ldr	r3, [pc, #28]	@ (801c7d8 <__assert_func+0x34>)
 801c7bc:	001c      	movs	r4, r3
 801c7be:	4907      	ldr	r1, [pc, #28]	@ (801c7dc <__assert_func+0x38>)
 801c7c0:	9301      	str	r3, [sp, #4]
 801c7c2:	9402      	str	r4, [sp, #8]
 801c7c4:	002b      	movs	r3, r5
 801c7c6:	9600      	str	r6, [sp, #0]
 801c7c8:	f7fd fdcc 	bl	801a364 <fiprintf>
 801c7cc:	f000 f884 	bl	801c8d8 <abort>
 801c7d0:	200002cc 	.word	0x200002cc
 801c7d4:	080205f2 	.word	0x080205f2
 801c7d8:	0801f5e0 	.word	0x0801f5e0
 801c7dc:	080205ff 	.word	0x080205ff

0801c7e0 <_calloc_r>:
 801c7e0:	b570      	push	{r4, r5, r6, lr}
 801c7e2:	0c0b      	lsrs	r3, r1, #16
 801c7e4:	0c15      	lsrs	r5, r2, #16
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d11e      	bne.n	801c828 <_calloc_r+0x48>
 801c7ea:	2d00      	cmp	r5, #0
 801c7ec:	d10c      	bne.n	801c808 <_calloc_r+0x28>
 801c7ee:	b289      	uxth	r1, r1
 801c7f0:	b294      	uxth	r4, r2
 801c7f2:	434c      	muls	r4, r1
 801c7f4:	0021      	movs	r1, r4
 801c7f6:	f7fe ff6b 	bl	801b6d0 <_malloc_r>
 801c7fa:	1e05      	subs	r5, r0, #0
 801c7fc:	d01b      	beq.n	801c836 <_calloc_r+0x56>
 801c7fe:	0022      	movs	r2, r4
 801c800:	2100      	movs	r1, #0
 801c802:	f7fd ffa7 	bl	801a754 <memset>
 801c806:	e016      	b.n	801c836 <_calloc_r+0x56>
 801c808:	1c2b      	adds	r3, r5, #0
 801c80a:	1c0c      	adds	r4, r1, #0
 801c80c:	b289      	uxth	r1, r1
 801c80e:	b292      	uxth	r2, r2
 801c810:	434a      	muls	r2, r1
 801c812:	b29b      	uxth	r3, r3
 801c814:	b2a1      	uxth	r1, r4
 801c816:	4359      	muls	r1, r3
 801c818:	0c14      	lsrs	r4, r2, #16
 801c81a:	190c      	adds	r4, r1, r4
 801c81c:	0c23      	lsrs	r3, r4, #16
 801c81e:	d107      	bne.n	801c830 <_calloc_r+0x50>
 801c820:	0424      	lsls	r4, r4, #16
 801c822:	b292      	uxth	r2, r2
 801c824:	4314      	orrs	r4, r2
 801c826:	e7e5      	b.n	801c7f4 <_calloc_r+0x14>
 801c828:	2d00      	cmp	r5, #0
 801c82a:	d101      	bne.n	801c830 <_calloc_r+0x50>
 801c82c:	1c14      	adds	r4, r2, #0
 801c82e:	e7ed      	b.n	801c80c <_calloc_r+0x2c>
 801c830:	230c      	movs	r3, #12
 801c832:	2500      	movs	r5, #0
 801c834:	6003      	str	r3, [r0, #0]
 801c836:	0028      	movs	r0, r5
 801c838:	bd70      	pop	{r4, r5, r6, pc}

0801c83a <__ascii_mbtowc>:
 801c83a:	b082      	sub	sp, #8
 801c83c:	2900      	cmp	r1, #0
 801c83e:	d100      	bne.n	801c842 <__ascii_mbtowc+0x8>
 801c840:	a901      	add	r1, sp, #4
 801c842:	1e10      	subs	r0, r2, #0
 801c844:	d006      	beq.n	801c854 <__ascii_mbtowc+0x1a>
 801c846:	2b00      	cmp	r3, #0
 801c848:	d006      	beq.n	801c858 <__ascii_mbtowc+0x1e>
 801c84a:	7813      	ldrb	r3, [r2, #0]
 801c84c:	600b      	str	r3, [r1, #0]
 801c84e:	7810      	ldrb	r0, [r2, #0]
 801c850:	1e43      	subs	r3, r0, #1
 801c852:	4198      	sbcs	r0, r3
 801c854:	b002      	add	sp, #8
 801c856:	4770      	bx	lr
 801c858:	2002      	movs	r0, #2
 801c85a:	4240      	negs	r0, r0
 801c85c:	e7fa      	b.n	801c854 <__ascii_mbtowc+0x1a>

0801c85e <_realloc_r>:
 801c85e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c860:	0006      	movs	r6, r0
 801c862:	000c      	movs	r4, r1
 801c864:	0015      	movs	r5, r2
 801c866:	2900      	cmp	r1, #0
 801c868:	d105      	bne.n	801c876 <_realloc_r+0x18>
 801c86a:	0011      	movs	r1, r2
 801c86c:	f7fe ff30 	bl	801b6d0 <_malloc_r>
 801c870:	0004      	movs	r4, r0
 801c872:	0020      	movs	r0, r4
 801c874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c876:	2a00      	cmp	r2, #0
 801c878:	d103      	bne.n	801c882 <_realloc_r+0x24>
 801c87a:	f7fe feb3 	bl	801b5e4 <_free_r>
 801c87e:	002c      	movs	r4, r5
 801c880:	e7f7      	b.n	801c872 <_realloc_r+0x14>
 801c882:	f000 f830 	bl	801c8e6 <_malloc_usable_size_r>
 801c886:	0007      	movs	r7, r0
 801c888:	4285      	cmp	r5, r0
 801c88a:	d802      	bhi.n	801c892 <_realloc_r+0x34>
 801c88c:	0843      	lsrs	r3, r0, #1
 801c88e:	42ab      	cmp	r3, r5
 801c890:	d3ef      	bcc.n	801c872 <_realloc_r+0x14>
 801c892:	0029      	movs	r1, r5
 801c894:	0030      	movs	r0, r6
 801c896:	f7fe ff1b 	bl	801b6d0 <_malloc_r>
 801c89a:	9001      	str	r0, [sp, #4]
 801c89c:	2800      	cmp	r0, #0
 801c89e:	d101      	bne.n	801c8a4 <_realloc_r+0x46>
 801c8a0:	9c01      	ldr	r4, [sp, #4]
 801c8a2:	e7e6      	b.n	801c872 <_realloc_r+0x14>
 801c8a4:	002a      	movs	r2, r5
 801c8a6:	42bd      	cmp	r5, r7
 801c8a8:	d900      	bls.n	801c8ac <_realloc_r+0x4e>
 801c8aa:	003a      	movs	r2, r7
 801c8ac:	0021      	movs	r1, r4
 801c8ae:	9801      	ldr	r0, [sp, #4]
 801c8b0:	f7fe f81a 	bl	801a8e8 <memcpy>
 801c8b4:	0021      	movs	r1, r4
 801c8b6:	0030      	movs	r0, r6
 801c8b8:	f7fe fe94 	bl	801b5e4 <_free_r>
 801c8bc:	e7f0      	b.n	801c8a0 <_realloc_r+0x42>

0801c8be <__ascii_wctomb>:
 801c8be:	0003      	movs	r3, r0
 801c8c0:	1e08      	subs	r0, r1, #0
 801c8c2:	d005      	beq.n	801c8d0 <__ascii_wctomb+0x12>
 801c8c4:	2aff      	cmp	r2, #255	@ 0xff
 801c8c6:	d904      	bls.n	801c8d2 <__ascii_wctomb+0x14>
 801c8c8:	228a      	movs	r2, #138	@ 0x8a
 801c8ca:	2001      	movs	r0, #1
 801c8cc:	601a      	str	r2, [r3, #0]
 801c8ce:	4240      	negs	r0, r0
 801c8d0:	4770      	bx	lr
 801c8d2:	2001      	movs	r0, #1
 801c8d4:	700a      	strb	r2, [r1, #0]
 801c8d6:	e7fb      	b.n	801c8d0 <__ascii_wctomb+0x12>

0801c8d8 <abort>:
 801c8d8:	2006      	movs	r0, #6
 801c8da:	b510      	push	{r4, lr}
 801c8dc:	f000 f834 	bl	801c948 <raise>
 801c8e0:	2001      	movs	r0, #1
 801c8e2:	f7ee f89b 	bl	800aa1c <_exit>

0801c8e6 <_malloc_usable_size_r>:
 801c8e6:	1f0b      	subs	r3, r1, #4
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	1f18      	subs	r0, r3, #4
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	da01      	bge.n	801c8f4 <_malloc_usable_size_r+0xe>
 801c8f0:	580b      	ldr	r3, [r1, r0]
 801c8f2:	18c0      	adds	r0, r0, r3
 801c8f4:	4770      	bx	lr

0801c8f6 <_raise_r>:
 801c8f6:	b570      	push	{r4, r5, r6, lr}
 801c8f8:	0004      	movs	r4, r0
 801c8fa:	000d      	movs	r5, r1
 801c8fc:	291f      	cmp	r1, #31
 801c8fe:	d904      	bls.n	801c90a <_raise_r+0x14>
 801c900:	2316      	movs	r3, #22
 801c902:	6003      	str	r3, [r0, #0]
 801c904:	2001      	movs	r0, #1
 801c906:	4240      	negs	r0, r0
 801c908:	bd70      	pop	{r4, r5, r6, pc}
 801c90a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d004      	beq.n	801c91a <_raise_r+0x24>
 801c910:	008a      	lsls	r2, r1, #2
 801c912:	189b      	adds	r3, r3, r2
 801c914:	681a      	ldr	r2, [r3, #0]
 801c916:	2a00      	cmp	r2, #0
 801c918:	d108      	bne.n	801c92c <_raise_r+0x36>
 801c91a:	0020      	movs	r0, r4
 801c91c:	f000 f830 	bl	801c980 <_getpid_r>
 801c920:	002a      	movs	r2, r5
 801c922:	0001      	movs	r1, r0
 801c924:	0020      	movs	r0, r4
 801c926:	f000 f819 	bl	801c95c <_kill_r>
 801c92a:	e7ed      	b.n	801c908 <_raise_r+0x12>
 801c92c:	2a01      	cmp	r2, #1
 801c92e:	d009      	beq.n	801c944 <_raise_r+0x4e>
 801c930:	1c51      	adds	r1, r2, #1
 801c932:	d103      	bne.n	801c93c <_raise_r+0x46>
 801c934:	2316      	movs	r3, #22
 801c936:	6003      	str	r3, [r0, #0]
 801c938:	2001      	movs	r0, #1
 801c93a:	e7e5      	b.n	801c908 <_raise_r+0x12>
 801c93c:	2100      	movs	r1, #0
 801c93e:	0028      	movs	r0, r5
 801c940:	6019      	str	r1, [r3, #0]
 801c942:	4790      	blx	r2
 801c944:	2000      	movs	r0, #0
 801c946:	e7df      	b.n	801c908 <_raise_r+0x12>

0801c948 <raise>:
 801c948:	b510      	push	{r4, lr}
 801c94a:	4b03      	ldr	r3, [pc, #12]	@ (801c958 <raise+0x10>)
 801c94c:	0001      	movs	r1, r0
 801c94e:	6818      	ldr	r0, [r3, #0]
 801c950:	f7ff ffd1 	bl	801c8f6 <_raise_r>
 801c954:	bd10      	pop	{r4, pc}
 801c956:	46c0      	nop			@ (mov r8, r8)
 801c958:	200002cc 	.word	0x200002cc

0801c95c <_kill_r>:
 801c95c:	2300      	movs	r3, #0
 801c95e:	b570      	push	{r4, r5, r6, lr}
 801c960:	4d06      	ldr	r5, [pc, #24]	@ (801c97c <_kill_r+0x20>)
 801c962:	0004      	movs	r4, r0
 801c964:	0008      	movs	r0, r1
 801c966:	0011      	movs	r1, r2
 801c968:	602b      	str	r3, [r5, #0]
 801c96a:	f7ee f84f 	bl	800aa0c <_kill>
 801c96e:	1c43      	adds	r3, r0, #1
 801c970:	d103      	bne.n	801c97a <_kill_r+0x1e>
 801c972:	682b      	ldr	r3, [r5, #0]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d000      	beq.n	801c97a <_kill_r+0x1e>
 801c978:	6023      	str	r3, [r4, #0]
 801c97a:	bd70      	pop	{r4, r5, r6, pc}
 801c97c:	200067ec 	.word	0x200067ec

0801c980 <_getpid_r>:
 801c980:	b510      	push	{r4, lr}
 801c982:	f7ee f841 	bl	800aa08 <_getpid>
 801c986:	bd10      	pop	{r4, pc}

0801c988 <logf>:
 801c988:	b570      	push	{r4, r5, r6, lr}
 801c98a:	1c05      	adds	r5, r0, #0
 801c98c:	f000 f82c 	bl	801c9e8 <__ieee754_logf>
 801c990:	1c29      	adds	r1, r5, #0
 801c992:	1c04      	adds	r4, r0, #0
 801c994:	1c28      	adds	r0, r5, #0
 801c996:	f7e4 fe93 	bl	80016c0 <__aeabi_fcmpun>
 801c99a:	2800      	cmp	r0, #0
 801c99c:	d110      	bne.n	801c9c0 <logf+0x38>
 801c99e:	2100      	movs	r1, #0
 801c9a0:	1c28      	adds	r0, r5, #0
 801c9a2:	f7e3 fdbb 	bl	800051c <__aeabi_fcmpgt>
 801c9a6:	2800      	cmp	r0, #0
 801c9a8:	d10a      	bne.n	801c9c0 <logf+0x38>
 801c9aa:	2100      	movs	r1, #0
 801c9ac:	1c28      	adds	r0, r5, #0
 801c9ae:	f7e3 fd9b 	bl	80004e8 <__aeabi_fcmpeq>
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	d006      	beq.n	801c9c4 <logf+0x3c>
 801c9b6:	f7fd ff57 	bl	801a868 <__errno>
 801c9ba:	2322      	movs	r3, #34	@ 0x22
 801c9bc:	4c06      	ldr	r4, [pc, #24]	@ (801c9d8 <logf+0x50>)
 801c9be:	6003      	str	r3, [r0, #0]
 801c9c0:	1c20      	adds	r0, r4, #0
 801c9c2:	bd70      	pop	{r4, r5, r6, pc}
 801c9c4:	f7fd ff50 	bl	801a868 <__errno>
 801c9c8:	2321      	movs	r3, #33	@ 0x21
 801c9ca:	6003      	str	r3, [r0, #0]
 801c9cc:	4803      	ldr	r0, [pc, #12]	@ (801c9dc <logf+0x54>)
 801c9ce:	f000 f807 	bl	801c9e0 <nanf>
 801c9d2:	1c04      	adds	r4, r0, #0
 801c9d4:	e7f4      	b.n	801c9c0 <logf+0x38>
 801c9d6:	46c0      	nop			@ (mov r8, r8)
 801c9d8:	ff800000 	.word	0xff800000
 801c9dc:	0801f5e0 	.word	0x0801f5e0

0801c9e0 <nanf>:
 801c9e0:	4800      	ldr	r0, [pc, #0]	@ (801c9e4 <nanf+0x4>)
 801c9e2:	4770      	bx	lr
 801c9e4:	7fc00000 	.word	0x7fc00000

0801c9e8 <__ieee754_logf>:
 801c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9ea:	0043      	lsls	r3, r0, #1
 801c9ec:	b085      	sub	sp, #20
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d106      	bne.n	801ca00 <__ieee754_logf+0x18>
 801c9f2:	20cc      	movs	r0, #204	@ 0xcc
 801c9f4:	2100      	movs	r1, #0
 801c9f6:	0600      	lsls	r0, r0, #24
 801c9f8:	f7e4 f8d6 	bl	8000ba8 <__aeabi_fdiv>
 801c9fc:	b005      	add	sp, #20
 801c9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca00:	1e03      	subs	r3, r0, #0
 801ca02:	da04      	bge.n	801ca0e <__ieee754_logf+0x26>
 801ca04:	1c01      	adds	r1, r0, #0
 801ca06:	f7e4 fbf7 	bl	80011f8 <__aeabi_fsub>
 801ca0a:	2100      	movs	r1, #0
 801ca0c:	e7f4      	b.n	801c9f8 <__ieee754_logf+0x10>
 801ca0e:	21ff      	movs	r1, #255	@ 0xff
 801ca10:	05c9      	lsls	r1, r1, #23
 801ca12:	4288      	cmp	r0, r1
 801ca14:	db03      	blt.n	801ca1e <__ieee754_logf+0x36>
 801ca16:	1c01      	adds	r1, r0, #0
 801ca18:	f7e3 fed4 	bl	80007c4 <__aeabi_fadd>
 801ca1c:	e7ee      	b.n	801c9fc <__ieee754_logf+0x14>
 801ca1e:	2280      	movs	r2, #128	@ 0x80
 801ca20:	2100      	movs	r1, #0
 801ca22:	0412      	lsls	r2, r2, #16
 801ca24:	4290      	cmp	r0, r2
 801ca26:	da06      	bge.n	801ca36 <__ieee754_logf+0x4e>
 801ca28:	2198      	movs	r1, #152	@ 0x98
 801ca2a:	05c9      	lsls	r1, r1, #23
 801ca2c:	f7e4 fa8a 	bl	8000f44 <__aeabi_fmul>
 801ca30:	2119      	movs	r1, #25
 801ca32:	0003      	movs	r3, r0
 801ca34:	4249      	negs	r1, r1
 801ca36:	15da      	asrs	r2, r3, #23
 801ca38:	3a7f      	subs	r2, #127	@ 0x7f
 801ca3a:	1852      	adds	r2, r2, r1
 801ca3c:	2180      	movs	r1, #128	@ 0x80
 801ca3e:	025b      	lsls	r3, r3, #9
 801ca40:	0a5e      	lsrs	r6, r3, #9
 801ca42:	4b74      	ldr	r3, [pc, #464]	@ (801cc14 <__ieee754_logf+0x22c>)
 801ca44:	20fe      	movs	r0, #254	@ 0xfe
 801ca46:	0409      	lsls	r1, r1, #16
 801ca48:	18f3      	adds	r3, r6, r3
 801ca4a:	400b      	ands	r3, r1
 801ca4c:	21fe      	movs	r1, #254	@ 0xfe
 801ca4e:	0580      	lsls	r0, r0, #22
 801ca50:	4058      	eors	r0, r3
 801ca52:	15dd      	asrs	r5, r3, #23
 801ca54:	4330      	orrs	r0, r6
 801ca56:	0589      	lsls	r1, r1, #22
 801ca58:	18ad      	adds	r5, r5, r2
 801ca5a:	f7e4 fbcd 	bl	80011f8 <__aeabi_fsub>
 801ca5e:	0032      	movs	r2, r6
 801ca60:	4b6d      	ldr	r3, [pc, #436]	@ (801cc18 <__ieee754_logf+0x230>)
 801ca62:	320f      	adds	r2, #15
 801ca64:	1c04      	adds	r4, r0, #0
 801ca66:	421a      	tst	r2, r3
 801ca68:	d145      	bne.n	801caf6 <__ieee754_logf+0x10e>
 801ca6a:	2100      	movs	r1, #0
 801ca6c:	f7e3 fd3c 	bl	80004e8 <__aeabi_fcmpeq>
 801ca70:	2800      	cmp	r0, #0
 801ca72:	d011      	beq.n	801ca98 <__ieee754_logf+0xb0>
 801ca74:	2000      	movs	r0, #0
 801ca76:	2d00      	cmp	r5, #0
 801ca78:	d0c0      	beq.n	801c9fc <__ieee754_logf+0x14>
 801ca7a:	0028      	movs	r0, r5
 801ca7c:	f7e4 fe56 	bl	800172c <__aeabi_i2f>
 801ca80:	4966      	ldr	r1, [pc, #408]	@ (801cc1c <__ieee754_logf+0x234>)
 801ca82:	1c04      	adds	r4, r0, #0
 801ca84:	f7e4 fa5e 	bl	8000f44 <__aeabi_fmul>
 801ca88:	4965      	ldr	r1, [pc, #404]	@ (801cc20 <__ieee754_logf+0x238>)
 801ca8a:	1c05      	adds	r5, r0, #0
 801ca8c:	1c20      	adds	r0, r4, #0
 801ca8e:	f7e4 fa59 	bl	8000f44 <__aeabi_fmul>
 801ca92:	1c01      	adds	r1, r0, #0
 801ca94:	1c28      	adds	r0, r5, #0
 801ca96:	e7bf      	b.n	801ca18 <__ieee754_logf+0x30>
 801ca98:	4962      	ldr	r1, [pc, #392]	@ (801cc24 <__ieee754_logf+0x23c>)
 801ca9a:	1c20      	adds	r0, r4, #0
 801ca9c:	f7e4 fa52 	bl	8000f44 <__aeabi_fmul>
 801caa0:	1c01      	adds	r1, r0, #0
 801caa2:	20fc      	movs	r0, #252	@ 0xfc
 801caa4:	0580      	lsls	r0, r0, #22
 801caa6:	f7e4 fba7 	bl	80011f8 <__aeabi_fsub>
 801caaa:	1c21      	adds	r1, r4, #0
 801caac:	1c06      	adds	r6, r0, #0
 801caae:	1c20      	adds	r0, r4, #0
 801cab0:	f7e4 fa48 	bl	8000f44 <__aeabi_fmul>
 801cab4:	1c01      	adds	r1, r0, #0
 801cab6:	1c30      	adds	r0, r6, #0
 801cab8:	f7e4 fa44 	bl	8000f44 <__aeabi_fmul>
 801cabc:	1c06      	adds	r6, r0, #0
 801cabe:	2d00      	cmp	r5, #0
 801cac0:	d101      	bne.n	801cac6 <__ieee754_logf+0xde>
 801cac2:	1c31      	adds	r1, r6, #0
 801cac4:	e079      	b.n	801cbba <__ieee754_logf+0x1d2>
 801cac6:	0028      	movs	r0, r5
 801cac8:	f7e4 fe30 	bl	800172c <__aeabi_i2f>
 801cacc:	4953      	ldr	r1, [pc, #332]	@ (801cc1c <__ieee754_logf+0x234>)
 801cace:	1c05      	adds	r5, r0, #0
 801cad0:	f7e4 fa38 	bl	8000f44 <__aeabi_fmul>
 801cad4:	4952      	ldr	r1, [pc, #328]	@ (801cc20 <__ieee754_logf+0x238>)
 801cad6:	1c07      	adds	r7, r0, #0
 801cad8:	1c28      	adds	r0, r5, #0
 801cada:	f7e4 fa33 	bl	8000f44 <__aeabi_fmul>
 801cade:	1c01      	adds	r1, r0, #0
 801cae0:	1c30      	adds	r0, r6, #0
 801cae2:	f7e4 fb89 	bl	80011f8 <__aeabi_fsub>
 801cae6:	1c21      	adds	r1, r4, #0
 801cae8:	f7e4 fb86 	bl	80011f8 <__aeabi_fsub>
 801caec:	1c01      	adds	r1, r0, #0
 801caee:	1c38      	adds	r0, r7, #0
 801caf0:	f7e4 fb82 	bl	80011f8 <__aeabi_fsub>
 801caf4:	e782      	b.n	801c9fc <__ieee754_logf+0x14>
 801caf6:	2180      	movs	r1, #128	@ 0x80
 801caf8:	05c9      	lsls	r1, r1, #23
 801cafa:	f7e3 fe63 	bl	80007c4 <__aeabi_fadd>
 801cafe:	1c01      	adds	r1, r0, #0
 801cb00:	1c20      	adds	r0, r4, #0
 801cb02:	f7e4 f851 	bl	8000ba8 <__aeabi_fdiv>
 801cb06:	9000      	str	r0, [sp, #0]
 801cb08:	0028      	movs	r0, r5
 801cb0a:	f7e4 fe0f 	bl	800172c <__aeabi_i2f>
 801cb0e:	9900      	ldr	r1, [sp, #0]
 801cb10:	9001      	str	r0, [sp, #4]
 801cb12:	1c08      	adds	r0, r1, #0
 801cb14:	f7e4 fa16 	bl	8000f44 <__aeabi_fmul>
 801cb18:	4b43      	ldr	r3, [pc, #268]	@ (801cc28 <__ieee754_logf+0x240>)
 801cb1a:	1c01      	adds	r1, r0, #0
 801cb1c:	18f3      	adds	r3, r6, r3
 801cb1e:	9303      	str	r3, [sp, #12]
 801cb20:	9002      	str	r0, [sp, #8]
 801cb22:	f7e4 fa0f 	bl	8000f44 <__aeabi_fmul>
 801cb26:	4941      	ldr	r1, [pc, #260]	@ (801cc2c <__ieee754_logf+0x244>)
 801cb28:	1c07      	adds	r7, r0, #0
 801cb2a:	f7e4 fa0b 	bl	8000f44 <__aeabi_fmul>
 801cb2e:	4940      	ldr	r1, [pc, #256]	@ (801cc30 <__ieee754_logf+0x248>)
 801cb30:	f7e3 fe48 	bl	80007c4 <__aeabi_fadd>
 801cb34:	1c39      	adds	r1, r7, #0
 801cb36:	f7e4 fa05 	bl	8000f44 <__aeabi_fmul>
 801cb3a:	493e      	ldr	r1, [pc, #248]	@ (801cc34 <__ieee754_logf+0x24c>)
 801cb3c:	f7e3 fe42 	bl	80007c4 <__aeabi_fadd>
 801cb40:	1c39      	adds	r1, r7, #0
 801cb42:	f7e4 f9ff 	bl	8000f44 <__aeabi_fmul>
 801cb46:	493c      	ldr	r1, [pc, #240]	@ (801cc38 <__ieee754_logf+0x250>)
 801cb48:	f7e3 fe3c 	bl	80007c4 <__aeabi_fadd>
 801cb4c:	9902      	ldr	r1, [sp, #8]
 801cb4e:	f7e4 f9f9 	bl	8000f44 <__aeabi_fmul>
 801cb52:	493a      	ldr	r1, [pc, #232]	@ (801cc3c <__ieee754_logf+0x254>)
 801cb54:	9002      	str	r0, [sp, #8]
 801cb56:	1c38      	adds	r0, r7, #0
 801cb58:	f7e4 f9f4 	bl	8000f44 <__aeabi_fmul>
 801cb5c:	4938      	ldr	r1, [pc, #224]	@ (801cc40 <__ieee754_logf+0x258>)
 801cb5e:	f7e3 fe31 	bl	80007c4 <__aeabi_fadd>
 801cb62:	1c39      	adds	r1, r7, #0
 801cb64:	f7e4 f9ee 	bl	8000f44 <__aeabi_fmul>
 801cb68:	4936      	ldr	r1, [pc, #216]	@ (801cc44 <__ieee754_logf+0x25c>)
 801cb6a:	f7e3 fe2b 	bl	80007c4 <__aeabi_fadd>
 801cb6e:	1c39      	adds	r1, r7, #0
 801cb70:	f7e4 f9e8 	bl	8000f44 <__aeabi_fmul>
 801cb74:	1c01      	adds	r1, r0, #0
 801cb76:	9802      	ldr	r0, [sp, #8]
 801cb78:	f7e3 fe24 	bl	80007c4 <__aeabi_fadd>
 801cb7c:	4b32      	ldr	r3, [pc, #200]	@ (801cc48 <__ieee754_logf+0x260>)
 801cb7e:	9a03      	ldr	r2, [sp, #12]
 801cb80:	1b9b      	subs	r3, r3, r6
 801cb82:	1c07      	adds	r7, r0, #0
 801cb84:	4313      	orrs	r3, r2
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	dd2f      	ble.n	801cbea <__ieee754_logf+0x202>
 801cb8a:	21fc      	movs	r1, #252	@ 0xfc
 801cb8c:	1c20      	adds	r0, r4, #0
 801cb8e:	0589      	lsls	r1, r1, #22
 801cb90:	f7e4 f9d8 	bl	8000f44 <__aeabi_fmul>
 801cb94:	1c21      	adds	r1, r4, #0
 801cb96:	f7e4 f9d5 	bl	8000f44 <__aeabi_fmul>
 801cb9a:	1c01      	adds	r1, r0, #0
 801cb9c:	1c06      	adds	r6, r0, #0
 801cb9e:	1c38      	adds	r0, r7, #0
 801cba0:	f7e3 fe10 	bl	80007c4 <__aeabi_fadd>
 801cba4:	9900      	ldr	r1, [sp, #0]
 801cba6:	f7e4 f9cd 	bl	8000f44 <__aeabi_fmul>
 801cbaa:	1c07      	adds	r7, r0, #0
 801cbac:	2d00      	cmp	r5, #0
 801cbae:	d106      	bne.n	801cbbe <__ieee754_logf+0x1d6>
 801cbb0:	1c01      	adds	r1, r0, #0
 801cbb2:	1c30      	adds	r0, r6, #0
 801cbb4:	f7e4 fb20 	bl	80011f8 <__aeabi_fsub>
 801cbb8:	1c01      	adds	r1, r0, #0
 801cbba:	1c20      	adds	r0, r4, #0
 801cbbc:	e798      	b.n	801caf0 <__ieee754_logf+0x108>
 801cbbe:	4917      	ldr	r1, [pc, #92]	@ (801cc1c <__ieee754_logf+0x234>)
 801cbc0:	9801      	ldr	r0, [sp, #4]
 801cbc2:	f7e4 f9bf 	bl	8000f44 <__aeabi_fmul>
 801cbc6:	4916      	ldr	r1, [pc, #88]	@ (801cc20 <__ieee754_logf+0x238>)
 801cbc8:	1c05      	adds	r5, r0, #0
 801cbca:	9801      	ldr	r0, [sp, #4]
 801cbcc:	f7e4 f9ba 	bl	8000f44 <__aeabi_fmul>
 801cbd0:	1c39      	adds	r1, r7, #0
 801cbd2:	f7e3 fdf7 	bl	80007c4 <__aeabi_fadd>
 801cbd6:	1c01      	adds	r1, r0, #0
 801cbd8:	1c30      	adds	r0, r6, #0
 801cbda:	f7e4 fb0d 	bl	80011f8 <__aeabi_fsub>
 801cbde:	1c21      	adds	r1, r4, #0
 801cbe0:	f7e4 fb0a 	bl	80011f8 <__aeabi_fsub>
 801cbe4:	1c01      	adds	r1, r0, #0
 801cbe6:	1c28      	adds	r0, r5, #0
 801cbe8:	e782      	b.n	801caf0 <__ieee754_logf+0x108>
 801cbea:	1c01      	adds	r1, r0, #0
 801cbec:	1c20      	adds	r0, r4, #0
 801cbee:	f7e4 fb03 	bl	80011f8 <__aeabi_fsub>
 801cbf2:	9900      	ldr	r1, [sp, #0]
 801cbf4:	f7e4 f9a6 	bl	8000f44 <__aeabi_fmul>
 801cbf8:	1c06      	adds	r6, r0, #0
 801cbfa:	2d00      	cmp	r5, #0
 801cbfc:	d100      	bne.n	801cc00 <__ieee754_logf+0x218>
 801cbfe:	e760      	b.n	801cac2 <__ieee754_logf+0xda>
 801cc00:	4906      	ldr	r1, [pc, #24]	@ (801cc1c <__ieee754_logf+0x234>)
 801cc02:	9801      	ldr	r0, [sp, #4]
 801cc04:	f7e4 f99e 	bl	8000f44 <__aeabi_fmul>
 801cc08:	4905      	ldr	r1, [pc, #20]	@ (801cc20 <__ieee754_logf+0x238>)
 801cc0a:	1c05      	adds	r5, r0, #0
 801cc0c:	9801      	ldr	r0, [sp, #4]
 801cc0e:	f7e4 f999 	bl	8000f44 <__aeabi_fmul>
 801cc12:	e7e0      	b.n	801cbd6 <__ieee754_logf+0x1ee>
 801cc14:	004afb20 	.word	0x004afb20
 801cc18:	007ffff0 	.word	0x007ffff0
 801cc1c:	3f317180 	.word	0x3f317180
 801cc20:	3717f7d1 	.word	0x3717f7d1
 801cc24:	3eaaaaab 	.word	0x3eaaaaab
 801cc28:	ffcf5c30 	.word	0xffcf5c30
 801cc2c:	3e178897 	.word	0x3e178897
 801cc30:	3e3a3325 	.word	0x3e3a3325
 801cc34:	3e924925 	.word	0x3e924925
 801cc38:	3f2aaaab 	.word	0x3f2aaaab
 801cc3c:	3e1cd04f 	.word	0x3e1cd04f
 801cc40:	3e638e29 	.word	0x3e638e29
 801cc44:	3ecccccd 	.word	0x3ecccccd
 801cc48:	0035c288 	.word	0x0035c288

0801cc4c <_init>:
 801cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc4e:	46c0      	nop			@ (mov r8, r8)
 801cc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc52:	bc08      	pop	{r3}
 801cc54:	469e      	mov	lr, r3
 801cc56:	4770      	bx	lr

0801cc58 <_fini>:
 801cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc5a:	46c0      	nop			@ (mov r8, r8)
 801cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc5e:	bc08      	pop	{r3}
 801cc60:	469e      	mov	lr, r3
 801cc62:	4770      	bx	lr
 801cc64:	0000      	movs	r0, r0
	...

0801cc68 <__FLASH_Program_Fast_veneer>:
 801cc68:	b401      	push	{r0}
 801cc6a:	4802      	ldr	r0, [pc, #8]	@ (801cc74 <__FLASH_Program_Fast_veneer+0xc>)
 801cc6c:	4684      	mov	ip, r0
 801cc6e:	bc01      	pop	{r0}
 801cc70:	4760      	bx	ip
 801cc72:	bf00      	nop
 801cc74:	20000489 	.word	0x20000489

Disassembly of section .data:

20000000 <P.2>:
20000000:	00000000 3ff00000                       .......?

20000008 <use_sensor1.6>:
20000008:	                                         ..

2000000a <rad_ratio>:
2000000a:	                                         ..

2000000c <USB_rev_buff>:
2000000c:	000000ff 00000000 00000000 00000000     ................
	...

2000004c <Index_num>:
2000004c:	00000001                                ....

20000050 <SystemCoreClock>:
20000050:	003d0900                                ..=.

20000054 <csv_file_name>:
20000054:	0801f5e1                                ....

20000058 <log_csv>:
20000058:	0801f5ee 0801ed3f 08020250 08020250     ....?...P...P...
20000068:	08020250 00000000 0801f5f6 00000000     P...............
20000078:	00000000 0801eea1 0801eea8 00000000     ................
20000088:	00000100 00000000 00314852 00000000     ........RH1.....
	...
200000b8:	00000001 00324852 00000000 00000000     ....RH2.........
	...
200000e4:	00000001 00314854 00000000 00000000     ....TH1.........
	...
20000110:	00000001 00324854 00000000 00000000     ....TH2.........
	...
2000013c:	00000001 00314c54 00000000 00000000     ....TL1.........
	...
2000016c:	00324c54 00000000 00000000 00000000     TL2.............
	...

200001fc <pdf_file_name>:
200001fc:	08020202                                ....

20000200 <g_temp_axis_min>:
20000200:	c1200000                                .. .

20000204 <uwTickFreq>:
20000204:	00000001                                ....

20000208 <uwTickPrio>:
20000208:	00000004                                ....

2000020c <_ux_system_slave_class_hid_name>:
2000020c:	735f7875 6576616c 616c635f 685f7373     ux_slave_class_h
2000021c:	                                         id.

2000021f <_ux_system_slave_class_storage_name>:
2000021f:	735f7875 6576616c 616c635f 735f7373     ux_slave_class_s
2000022f:	61726f74                                 torage.

20000236 <_ux_system_bos_descriptor_structure>:
20000236:	01020101                                ....

2000023a <_ux_system_interface_descriptor_structure>:
2000023a:	01010101 01010101                        .........

20000243 <_ux_system_configuration_descriptor_structure>:
20000243:	01020101 01010101                       ........

2000024b <_ux_system_device_descriptor_structure>:
2000024b:	01020101 02010101 01010202               ..............

20000259 <_ux_system_endpoint_descriptor_structure>:
20000259:	01010101                                 ......

2000025f <_ux_system_slave_class_storage_product_serial>:
2000025f:	34333231 38373635 32313039 36353433     1234567890123456
2000026f:	30393837                                 7890.

20000274 <_ux_system_slave_class_storage_product_rev>:
20000274:	30303032                                 2000.

20000279 <_ux_system_slave_class_storage_product_id>:
20000279:	58425355 6f747320 65676172 76656420     USBX storage dev
	...

2000028a <_ux_system_slave_class_storage_vendor_id>:
2000028a:	72757a41 4f545265                        AzureRTO..

20000294 <USBD_CustomHID_ReportDesc>:
20000294:	09ff0006 1501a101 00ff2600 40950875     .........&..u..@
200002a4:	02810109 01094095 01950291 02b10109     .....@..........
200002b4:	                                         .

200002b5 <UserClassInstance>:
200002b5:	00000103 00000000                        ...........

200002c0 <__sglue>:
200002c0:	00000000 00000003 200066b0              .........f. 

200002cc <_impure_ptr>:
200002cc:	200002d0                                ... 

200002d0 <_impure_data>:
200002d0:	00000000 200066b0 20006718 20006780     .....f. .g. .g. 
	...

2000031c <__global_locale>:
2000031c:	00000043 00000000 00000000 00000000     C...............
	...
2000033c:	00000043 00000000 00000000 00000000     C...............
	...
2000035c:	00000043 00000000 00000000 00000000     C...............
	...
2000037c:	00000043 00000000 00000000 00000000     C...............
	...
2000039c:	00000043 00000000 00000000 00000000     C...............
	...
200003bc:	00000043 00000000 00000000 00000000     C...............
	...
200003dc:	00000043 00000000 00000000 00000000     C...............
	...
200003fc:	0801c8bf 0801c83b 00000000 080208b8     ....;...........
2000040c:	0802034d 0801f5e0 0801f5e0 0801f5e0     M...............
2000041c:	0801f5e0 0801f5e0 0801f5e0 0801f5e0     ................
2000042c:	0801f5e0 0801f5e0 ffffffff ffffffff     ................
2000043c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000464:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000488 <FLASH_Program_Fast>:
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000488:	2280      	movs	r2, #128	@ 0x80
2000048a:	4b0c      	ldr	r3, [pc, #48]	@ (200004bc <FLASH_Program_Fast+0x34>)
{
2000048c:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048e:	695c      	ldr	r4, [r3, #20]
20000490:	02d2      	lsls	r2, r2, #11
20000492:	4322      	orrs	r2, r4
20000494:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20000496:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000049a:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000049c:	1c4c      	adds	r4, r1, #1
2000049e:	34ff      	adds	r4, #255	@ 0xff
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a0:	1a40      	subs	r0, r0, r1
200004a2:	680d      	ldr	r5, [r1, #0]
200004a4:	5045      	str	r5, [r0, r1]
    src += 4U;
200004a6:	3104      	adds	r1, #4
  while (index < 64U)
200004a8:	42a1      	cmp	r1, r4
200004aa:	d1fa      	bne.n	200004a2 <FLASH_Program_Fast+0x1a>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ac:	2180      	movs	r1, #128	@ 0x80
200004ae:	0249      	lsls	r1, r1, #9
200004b0:	6918      	ldr	r0, [r3, #16]
200004b2:	4208      	tst	r0, r1
200004b4:	d1fc      	bne.n	200004b0 <FLASH_Program_Fast+0x28>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004b6:	f382 8810 	msr	PRIMASK, r2
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ba:	bd30      	pop	{r4, r5, pc}
200004bc:	40022000 	.word	0x40022000
