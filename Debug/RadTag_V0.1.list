
RadTag_V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d88  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  08011e48  08011e48  00012e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801252c  0801252c  000141d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801252c  0801252c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012534  08012534  000141d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012534  08012534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012538  08012538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0801253c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  200001d8  08012714  000141d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08012714  000148b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffaf  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c0  00000000  00000000  000341af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00038470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001456  00000000  00000000  00039ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e32  00000000  00000000  0003b2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f850  00000000  00000000  0005e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6170  00000000  00000000  0007d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c8  00000000  00000000  00153b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0015adfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011e30 	.word	0x08011e30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08011e30 	.word	0x08011e30

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f953 	bl	80026e8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f002 f897 	bl	8002580 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f945 	bl	80026e8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f93b 	bl	80026e8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f8c1 	bl	8002608 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f002 f8b7 	bl	8002608 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcb5 	bl	8000e20 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc3d 	bl	8000d40 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fca7 	bl	8000e20 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc9d 	bl	8000e20 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc4b 	bl	8000d90 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc41 	bl	8000d90 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__clzsi2>:
 800051c:	211c      	movs	r1, #28
 800051e:	2301      	movs	r3, #1
 8000520:	041b      	lsls	r3, r3, #16
 8000522:	4298      	cmp	r0, r3
 8000524:	d301      	bcc.n	800052a <__clzsi2+0xe>
 8000526:	0c00      	lsrs	r0, r0, #16
 8000528:	3910      	subs	r1, #16
 800052a:	0a1b      	lsrs	r3, r3, #8
 800052c:	4298      	cmp	r0, r3
 800052e:	d301      	bcc.n	8000534 <__clzsi2+0x18>
 8000530:	0a00      	lsrs	r0, r0, #8
 8000532:	3908      	subs	r1, #8
 8000534:	091b      	lsrs	r3, r3, #4
 8000536:	4298      	cmp	r0, r3
 8000538:	d301      	bcc.n	800053e <__clzsi2+0x22>
 800053a:	0900      	lsrs	r0, r0, #4
 800053c:	3904      	subs	r1, #4
 800053e:	a202      	add	r2, pc, #8	@ (adr r2, 8000548 <__clzsi2+0x2c>)
 8000540:	5c10      	ldrb	r0, [r2, r0]
 8000542:	1840      	adds	r0, r0, r1
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	02020304 	.word	0x02020304
 800054c:	01010101 	.word	0x01010101
	...

08000558 <__aeabi_uldivmod>:
 8000558:	2b00      	cmp	r3, #0
 800055a:	d111      	bne.n	8000580 <__aeabi_uldivmod+0x28>
 800055c:	2a00      	cmp	r2, #0
 800055e:	d10f      	bne.n	8000580 <__aeabi_uldivmod+0x28>
 8000560:	2900      	cmp	r1, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_uldivmod+0xe>
 8000564:	2800      	cmp	r0, #0
 8000566:	d002      	beq.n	800056e <__aeabi_uldivmod+0x16>
 8000568:	2100      	movs	r1, #0
 800056a:	43c9      	mvns	r1, r1
 800056c:	0008      	movs	r0, r1
 800056e:	b407      	push	{r0, r1, r2}
 8000570:	4802      	ldr	r0, [pc, #8]	@ (800057c <__aeabi_uldivmod+0x24>)
 8000572:	a102      	add	r1, pc, #8	@ (adr r1, 800057c <__aeabi_uldivmod+0x24>)
 8000574:	1840      	adds	r0, r0, r1
 8000576:	9002      	str	r0, [sp, #8]
 8000578:	bd03      	pop	{r0, r1, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	fffffead 	.word	0xfffffead
 8000580:	b403      	push	{r0, r1}
 8000582:	4668      	mov	r0, sp
 8000584:	b501      	push	{r0, lr}
 8000586:	9802      	ldr	r0, [sp, #8]
 8000588:	f000 f806 	bl	8000598 <__udivmoddi4>
 800058c:	9b01      	ldr	r3, [sp, #4]
 800058e:	469e      	mov	lr, r3
 8000590:	b002      	add	sp, #8
 8000592:	bc0c      	pop	{r2, r3}
 8000594:	4770      	bx	lr
 8000596:	46c0      	nop			@ (mov r8, r8)

08000598 <__udivmoddi4>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	4657      	mov	r7, sl
 800059c:	464e      	mov	r6, r9
 800059e:	4645      	mov	r5, r8
 80005a0:	46de      	mov	lr, fp
 80005a2:	b5e0      	push	{r5, r6, r7, lr}
 80005a4:	0004      	movs	r4, r0
 80005a6:	000d      	movs	r5, r1
 80005a8:	4692      	mov	sl, r2
 80005aa:	4699      	mov	r9, r3
 80005ac:	b083      	sub	sp, #12
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d830      	bhi.n	8000614 <__udivmoddi4+0x7c>
 80005b2:	d02d      	beq.n	8000610 <__udivmoddi4+0x78>
 80005b4:	4649      	mov	r1, r9
 80005b6:	4650      	mov	r0, sl
 80005b8:	f003 f8ec 	bl	8003794 <__clzdi2>
 80005bc:	0029      	movs	r1, r5
 80005be:	0006      	movs	r6, r0
 80005c0:	0020      	movs	r0, r4
 80005c2:	f003 f8e7 	bl	8003794 <__clzdi2>
 80005c6:	1a33      	subs	r3, r6, r0
 80005c8:	4698      	mov	r8, r3
 80005ca:	3b20      	subs	r3, #32
 80005cc:	d434      	bmi.n	8000638 <__udivmoddi4+0xa0>
 80005ce:	469b      	mov	fp, r3
 80005d0:	4653      	mov	r3, sl
 80005d2:	465a      	mov	r2, fp
 80005d4:	4093      	lsls	r3, r2
 80005d6:	4642      	mov	r2, r8
 80005d8:	001f      	movs	r7, r3
 80005da:	4653      	mov	r3, sl
 80005dc:	4093      	lsls	r3, r2
 80005de:	001e      	movs	r6, r3
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d83b      	bhi.n	800065c <__udivmoddi4+0xc4>
 80005e4:	42af      	cmp	r7, r5
 80005e6:	d100      	bne.n	80005ea <__udivmoddi4+0x52>
 80005e8:	e079      	b.n	80006de <__udivmoddi4+0x146>
 80005ea:	465b      	mov	r3, fp
 80005ec:	1ba4      	subs	r4, r4, r6
 80005ee:	41bd      	sbcs	r5, r7
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	da00      	bge.n	80005f6 <__udivmoddi4+0x5e>
 80005f4:	e076      	b.n	80006e4 <__udivmoddi4+0x14c>
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2301      	movs	r3, #1
 8000600:	465a      	mov	r2, fp
 8000602:	4093      	lsls	r3, r2
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2301      	movs	r3, #1
 8000608:	4642      	mov	r2, r8
 800060a:	4093      	lsls	r3, r2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	e029      	b.n	8000664 <__udivmoddi4+0xcc>
 8000610:	4282      	cmp	r2, r0
 8000612:	d9cf      	bls.n	80005b4 <__udivmoddi4+0x1c>
 8000614:	2200      	movs	r2, #0
 8000616:	2300      	movs	r3, #0
 8000618:	9200      	str	r2, [sp, #0]
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <__udivmoddi4+0x8e>
 8000622:	601c      	str	r4, [r3, #0]
 8000624:	605d      	str	r5, [r3, #4]
 8000626:	9800      	ldr	r0, [sp, #0]
 8000628:	9901      	ldr	r1, [sp, #4]
 800062a:	b003      	add	sp, #12
 800062c:	bcf0      	pop	{r4, r5, r6, r7}
 800062e:	46bb      	mov	fp, r7
 8000630:	46b2      	mov	sl, r6
 8000632:	46a9      	mov	r9, r5
 8000634:	46a0      	mov	r8, r4
 8000636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000638:	4642      	mov	r2, r8
 800063a:	469b      	mov	fp, r3
 800063c:	2320      	movs	r3, #32
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	4652      	mov	r2, sl
 8000642:	40da      	lsrs	r2, r3
 8000644:	4641      	mov	r1, r8
 8000646:	0013      	movs	r3, r2
 8000648:	464a      	mov	r2, r9
 800064a:	408a      	lsls	r2, r1
 800064c:	0017      	movs	r7, r2
 800064e:	4642      	mov	r2, r8
 8000650:	431f      	orrs	r7, r3
 8000652:	4653      	mov	r3, sl
 8000654:	4093      	lsls	r3, r2
 8000656:	001e      	movs	r6, r3
 8000658:	42af      	cmp	r7, r5
 800065a:	d9c3      	bls.n	80005e4 <__udivmoddi4+0x4c>
 800065c:	2200      	movs	r2, #0
 800065e:	2300      	movs	r3, #0
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	4643      	mov	r3, r8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0d8      	beq.n	800061c <__udivmoddi4+0x84>
 800066a:	07fb      	lsls	r3, r7, #31
 800066c:	0872      	lsrs	r2, r6, #1
 800066e:	431a      	orrs	r2, r3
 8000670:	4646      	mov	r6, r8
 8000672:	087b      	lsrs	r3, r7, #1
 8000674:	e00e      	b.n	8000694 <__udivmoddi4+0xfc>
 8000676:	42ab      	cmp	r3, r5
 8000678:	d101      	bne.n	800067e <__udivmoddi4+0xe6>
 800067a:	42a2      	cmp	r2, r4
 800067c:	d80c      	bhi.n	8000698 <__udivmoddi4+0x100>
 800067e:	1aa4      	subs	r4, r4, r2
 8000680:	419d      	sbcs	r5, r3
 8000682:	2001      	movs	r0, #1
 8000684:	1924      	adds	r4, r4, r4
 8000686:	416d      	adcs	r5, r5
 8000688:	2100      	movs	r1, #0
 800068a:	3e01      	subs	r6, #1
 800068c:	1824      	adds	r4, r4, r0
 800068e:	414d      	adcs	r5, r1
 8000690:	2e00      	cmp	r6, #0
 8000692:	d006      	beq.n	80006a2 <__udivmoddi4+0x10a>
 8000694:	42ab      	cmp	r3, r5
 8000696:	d9ee      	bls.n	8000676 <__udivmoddi4+0xde>
 8000698:	3e01      	subs	r6, #1
 800069a:	1924      	adds	r4, r4, r4
 800069c:	416d      	adcs	r5, r5
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d1f8      	bne.n	8000694 <__udivmoddi4+0xfc>
 80006a2:	9800      	ldr	r0, [sp, #0]
 80006a4:	9901      	ldr	r1, [sp, #4]
 80006a6:	465b      	mov	r3, fp
 80006a8:	1900      	adds	r0, r0, r4
 80006aa:	4169      	adcs	r1, r5
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db24      	blt.n	80006fa <__udivmoddi4+0x162>
 80006b0:	002b      	movs	r3, r5
 80006b2:	465a      	mov	r2, fp
 80006b4:	4644      	mov	r4, r8
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db2a      	blt.n	800071c <__udivmoddi4+0x184>
 80006c6:	0026      	movs	r6, r4
 80006c8:	409e      	lsls	r6, r3
 80006ca:	0033      	movs	r3, r6
 80006cc:	0026      	movs	r6, r4
 80006ce:	4647      	mov	r7, r8
 80006d0:	40be      	lsls	r6, r7
 80006d2:	0032      	movs	r2, r6
 80006d4:	1a80      	subs	r0, r0, r2
 80006d6:	4199      	sbcs	r1, r3
 80006d8:	9000      	str	r0, [sp, #0]
 80006da:	9101      	str	r1, [sp, #4]
 80006dc:	e79e      	b.n	800061c <__udivmoddi4+0x84>
 80006de:	42a3      	cmp	r3, r4
 80006e0:	d8bc      	bhi.n	800065c <__udivmoddi4+0xc4>
 80006e2:	e782      	b.n	80005ea <__udivmoddi4+0x52>
 80006e4:	4642      	mov	r2, r8
 80006e6:	2320      	movs	r3, #32
 80006e8:	2100      	movs	r1, #0
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	2200      	movs	r2, #0
 80006ee:	9100      	str	r1, [sp, #0]
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	2201      	movs	r2, #1
 80006f4:	40da      	lsrs	r2, r3
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	e785      	b.n	8000606 <__udivmoddi4+0x6e>
 80006fa:	4642      	mov	r2, r8
 80006fc:	2320      	movs	r3, #32
 80006fe:	1a9b      	subs	r3, r3, r2
 8000700:	002a      	movs	r2, r5
 8000702:	4646      	mov	r6, r8
 8000704:	409a      	lsls	r2, r3
 8000706:	0023      	movs	r3, r4
 8000708:	40f3      	lsrs	r3, r6
 800070a:	4644      	mov	r4, r8
 800070c:	4313      	orrs	r3, r2
 800070e:	002a      	movs	r2, r5
 8000710:	40e2      	lsrs	r2, r4
 8000712:	001c      	movs	r4, r3
 8000714:	465b      	mov	r3, fp
 8000716:	0015      	movs	r5, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	dad4      	bge.n	80006c6 <__udivmoddi4+0x12e>
 800071c:	4642      	mov	r2, r8
 800071e:	002f      	movs	r7, r5
 8000720:	2320      	movs	r3, #32
 8000722:	0026      	movs	r6, r4
 8000724:	4097      	lsls	r7, r2
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	40de      	lsrs	r6, r3
 800072a:	003b      	movs	r3, r7
 800072c:	4333      	orrs	r3, r6
 800072e:	e7cd      	b.n	80006cc <__udivmoddi4+0x134>

08000730 <__aeabi_fadd>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	024b      	lsls	r3, r1, #9
 8000734:	0a5a      	lsrs	r2, r3, #9
 8000736:	4694      	mov	ip, r2
 8000738:	004a      	lsls	r2, r1, #1
 800073a:	0fc9      	lsrs	r1, r1, #31
 800073c:	46ce      	mov	lr, r9
 800073e:	4647      	mov	r7, r8
 8000740:	4689      	mov	r9, r1
 8000742:	0045      	lsls	r5, r0, #1
 8000744:	0246      	lsls	r6, r0, #9
 8000746:	0e2d      	lsrs	r5, r5, #24
 8000748:	0e12      	lsrs	r2, r2, #24
 800074a:	b580      	push	{r7, lr}
 800074c:	0999      	lsrs	r1, r3, #6
 800074e:	0a77      	lsrs	r7, r6, #9
 8000750:	0fc4      	lsrs	r4, r0, #31
 8000752:	09b6      	lsrs	r6, r6, #6
 8000754:	1aab      	subs	r3, r5, r2
 8000756:	454c      	cmp	r4, r9
 8000758:	d020      	beq.n	800079c <__aeabi_fadd+0x6c>
 800075a:	2b00      	cmp	r3, #0
 800075c:	dd0c      	ble.n	8000778 <__aeabi_fadd+0x48>
 800075e:	2a00      	cmp	r2, #0
 8000760:	d134      	bne.n	80007cc <__aeabi_fadd+0x9c>
 8000762:	2900      	cmp	r1, #0
 8000764:	d02a      	beq.n	80007bc <__aeabi_fadd+0x8c>
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	2b01      	cmp	r3, #1
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x3e>
 800076c:	e08f      	b.n	800088e <__aeabi_fadd+0x15e>
 800076e:	2bff      	cmp	r3, #255	@ 0xff
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x44>
 8000772:	e0cd      	b.n	8000910 <__aeabi_fadd+0x1e0>
 8000774:	0013      	movs	r3, r2
 8000776:	e02f      	b.n	80007d8 <__aeabi_fadd+0xa8>
 8000778:	2b00      	cmp	r3, #0
 800077a:	d060      	beq.n	800083e <__aeabi_fadd+0x10e>
 800077c:	1b53      	subs	r3, r2, r5
 800077e:	2d00      	cmp	r5, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x54>
 8000782:	e0ee      	b.n	8000962 <__aeabi_fadd+0x232>
 8000784:	2e00      	cmp	r6, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0x5a>
 8000788:	e13e      	b.n	8000a08 <__aeabi_fadd+0x2d8>
 800078a:	1e5c      	subs	r4, r3, #1
 800078c:	2b01      	cmp	r3, #1
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x62>
 8000790:	e16b      	b.n	8000a6a <__aeabi_fadd+0x33a>
 8000792:	2bff      	cmp	r3, #255	@ 0xff
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x68>
 8000796:	e0b9      	b.n	800090c <__aeabi_fadd+0x1dc>
 8000798:	0023      	movs	r3, r4
 800079a:	e0e7      	b.n	800096c <__aeabi_fadd+0x23c>
 800079c:	2b00      	cmp	r3, #0
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_fadd+0x72>
 80007a0:	e0a4      	b.n	80008ec <__aeabi_fadd+0x1bc>
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d069      	beq.n	800087a <__aeabi_fadd+0x14a>
 80007a6:	2dff      	cmp	r5, #255	@ 0xff
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x7c>
 80007aa:	e0b1      	b.n	8000910 <__aeabi_fadd+0x1e0>
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	04d2      	lsls	r2, r2, #19
 80007b0:	4311      	orrs	r1, r2
 80007b2:	2b1b      	cmp	r3, #27
 80007b4:	dc00      	bgt.n	80007b8 <__aeabi_fadd+0x88>
 80007b6:	e0e9      	b.n	800098c <__aeabi_fadd+0x25c>
 80007b8:	002b      	movs	r3, r5
 80007ba:	3605      	adds	r6, #5
 80007bc:	08f7      	lsrs	r7, r6, #3
 80007be:	2bff      	cmp	r3, #255	@ 0xff
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x94>
 80007c2:	e0a5      	b.n	8000910 <__aeabi_fadd+0x1e0>
 80007c4:	027a      	lsls	r2, r7, #9
 80007c6:	0a52      	lsrs	r2, r2, #9
 80007c8:	b2d8      	uxtb	r0, r3
 80007ca:	e030      	b.n	800082e <__aeabi_fadd+0xfe>
 80007cc:	2dff      	cmp	r5, #255	@ 0xff
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fadd+0xa2>
 80007d0:	e09e      	b.n	8000910 <__aeabi_fadd+0x1e0>
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	04d2      	lsls	r2, r2, #19
 80007d6:	4311      	orrs	r1, r2
 80007d8:	2001      	movs	r0, #1
 80007da:	2b1b      	cmp	r3, #27
 80007dc:	dc08      	bgt.n	80007f0 <__aeabi_fadd+0xc0>
 80007de:	0008      	movs	r0, r1
 80007e0:	2220      	movs	r2, #32
 80007e2:	40d8      	lsrs	r0, r3
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	4099      	lsls	r1, r3
 80007e8:	000b      	movs	r3, r1
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	4193      	sbcs	r3, r2
 80007ee:	4318      	orrs	r0, r3
 80007f0:	1a36      	subs	r6, r6, r0
 80007f2:	0173      	lsls	r3, r6, #5
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fadd+0xc8>
 80007f6:	e071      	b.n	80008dc <__aeabi_fadd+0x1ac>
 80007f8:	01b6      	lsls	r6, r6, #6
 80007fa:	09b7      	lsrs	r7, r6, #6
 80007fc:	0038      	movs	r0, r7
 80007fe:	f7ff fe8d 	bl	800051c <__clzsi2>
 8000802:	003b      	movs	r3, r7
 8000804:	3805      	subs	r0, #5
 8000806:	4083      	lsls	r3, r0
 8000808:	4285      	cmp	r5, r0
 800080a:	dd4d      	ble.n	80008a8 <__aeabi_fadd+0x178>
 800080c:	4eb4      	ldr	r6, [pc, #720]	@ (8000ae0 <__aeabi_fadd+0x3b0>)
 800080e:	1a2d      	subs	r5, r5, r0
 8000810:	401e      	ands	r6, r3
 8000812:	075a      	lsls	r2, r3, #29
 8000814:	d068      	beq.n	80008e8 <__aeabi_fadd+0x1b8>
 8000816:	220f      	movs	r2, #15
 8000818:	4013      	ands	r3, r2
 800081a:	2b04      	cmp	r3, #4
 800081c:	d064      	beq.n	80008e8 <__aeabi_fadd+0x1b8>
 800081e:	3604      	adds	r6, #4
 8000820:	0173      	lsls	r3, r6, #5
 8000822:	d561      	bpl.n	80008e8 <__aeabi_fadd+0x1b8>
 8000824:	1c68      	adds	r0, r5, #1
 8000826:	2dfe      	cmp	r5, #254	@ 0xfe
 8000828:	d154      	bne.n	80008d4 <__aeabi_fadd+0x1a4>
 800082a:	20ff      	movs	r0, #255	@ 0xff
 800082c:	2200      	movs	r2, #0
 800082e:	05c0      	lsls	r0, r0, #23
 8000830:	4310      	orrs	r0, r2
 8000832:	07e4      	lsls	r4, r4, #31
 8000834:	4320      	orrs	r0, r4
 8000836:	bcc0      	pop	{r6, r7}
 8000838:	46b9      	mov	r9, r7
 800083a:	46b0      	mov	r8, r6
 800083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083e:	22fe      	movs	r2, #254	@ 0xfe
 8000840:	4690      	mov	r8, r2
 8000842:	1c68      	adds	r0, r5, #1
 8000844:	0002      	movs	r2, r0
 8000846:	4640      	mov	r0, r8
 8000848:	4210      	tst	r0, r2
 800084a:	d16b      	bne.n	8000924 <__aeabi_fadd+0x1f4>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0x122>
 8000850:	e0dd      	b.n	8000a0e <__aeabi_fadd+0x2de>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x128>
 8000856:	e102      	b.n	8000a5e <__aeabi_fadd+0x32e>
 8000858:	2900      	cmp	r1, #0
 800085a:	d0b3      	beq.n	80007c4 <__aeabi_fadd+0x94>
 800085c:	2280      	movs	r2, #128	@ 0x80
 800085e:	1a77      	subs	r7, r6, r1
 8000860:	04d2      	lsls	r2, r2, #19
 8000862:	4217      	tst	r7, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x138>
 8000866:	e136      	b.n	8000ad6 <__aeabi_fadd+0x3a6>
 8000868:	464c      	mov	r4, r9
 800086a:	1b8e      	subs	r6, r1, r6
 800086c:	d061      	beq.n	8000932 <__aeabi_fadd+0x202>
 800086e:	2001      	movs	r0, #1
 8000870:	4216      	tst	r6, r2
 8000872:	d130      	bne.n	80008d6 <__aeabi_fadd+0x1a6>
 8000874:	2300      	movs	r3, #0
 8000876:	08f7      	lsrs	r7, r6, #3
 8000878:	e7a4      	b.n	80007c4 <__aeabi_fadd+0x94>
 800087a:	2900      	cmp	r1, #0
 800087c:	d09e      	beq.n	80007bc <__aeabi_fadd+0x8c>
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	2b01      	cmp	r3, #1
 8000882:	d100      	bne.n	8000886 <__aeabi_fadd+0x156>
 8000884:	e0ca      	b.n	8000a1c <__aeabi_fadd+0x2ec>
 8000886:	2bff      	cmp	r3, #255	@ 0xff
 8000888:	d042      	beq.n	8000910 <__aeabi_fadd+0x1e0>
 800088a:	0013      	movs	r3, r2
 800088c:	e791      	b.n	80007b2 <__aeabi_fadd+0x82>
 800088e:	1a71      	subs	r1, r6, r1
 8000890:	014b      	lsls	r3, r1, #5
 8000892:	d400      	bmi.n	8000896 <__aeabi_fadd+0x166>
 8000894:	e0d1      	b.n	8000a3a <__aeabi_fadd+0x30a>
 8000896:	018f      	lsls	r7, r1, #6
 8000898:	09bf      	lsrs	r7, r7, #6
 800089a:	0038      	movs	r0, r7
 800089c:	f7ff fe3e 	bl	800051c <__clzsi2>
 80008a0:	003b      	movs	r3, r7
 80008a2:	3805      	subs	r0, #5
 80008a4:	4083      	lsls	r3, r0
 80008a6:	2501      	movs	r5, #1
 80008a8:	2220      	movs	r2, #32
 80008aa:	1b40      	subs	r0, r0, r5
 80008ac:	3001      	adds	r0, #1
 80008ae:	1a12      	subs	r2, r2, r0
 80008b0:	001e      	movs	r6, r3
 80008b2:	4093      	lsls	r3, r2
 80008b4:	40c6      	lsrs	r6, r0
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	4193      	sbcs	r3, r2
 80008ba:	431e      	orrs	r6, r3
 80008bc:	d039      	beq.n	8000932 <__aeabi_fadd+0x202>
 80008be:	0773      	lsls	r3, r6, #29
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fadd+0x194>
 80008c2:	e11b      	b.n	8000afc <__aeabi_fadd+0x3cc>
 80008c4:	230f      	movs	r3, #15
 80008c6:	2500      	movs	r5, #0
 80008c8:	4033      	ands	r3, r6
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d1a7      	bne.n	800081e <__aeabi_fadd+0xee>
 80008ce:	2001      	movs	r0, #1
 80008d0:	0172      	lsls	r2, r6, #5
 80008d2:	d57c      	bpl.n	80009ce <__aeabi_fadd+0x29e>
 80008d4:	b2c0      	uxtb	r0, r0
 80008d6:	01b2      	lsls	r2, r6, #6
 80008d8:	0a52      	lsrs	r2, r2, #9
 80008da:	e7a8      	b.n	800082e <__aeabi_fadd+0xfe>
 80008dc:	0773      	lsls	r3, r6, #29
 80008de:	d003      	beq.n	80008e8 <__aeabi_fadd+0x1b8>
 80008e0:	230f      	movs	r3, #15
 80008e2:	4033      	ands	r3, r6
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d19a      	bne.n	800081e <__aeabi_fadd+0xee>
 80008e8:	002b      	movs	r3, r5
 80008ea:	e767      	b.n	80007bc <__aeabi_fadd+0x8c>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d023      	beq.n	8000938 <__aeabi_fadd+0x208>
 80008f0:	1b53      	subs	r3, r2, r5
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d17b      	bne.n	80009ee <__aeabi_fadd+0x2be>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x1cc>
 80008fa:	e086      	b.n	8000a0a <__aeabi_fadd+0x2da>
 80008fc:	1e5d      	subs	r5, r3, #1
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x1d4>
 8000902:	e08b      	b.n	8000a1c <__aeabi_fadd+0x2ec>
 8000904:	2bff      	cmp	r3, #255	@ 0xff
 8000906:	d002      	beq.n	800090e <__aeabi_fadd+0x1de>
 8000908:	002b      	movs	r3, r5
 800090a:	e075      	b.n	80009f8 <__aeabi_fadd+0x2c8>
 800090c:	464c      	mov	r4, r9
 800090e:	4667      	mov	r7, ip
 8000910:	2f00      	cmp	r7, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x1e6>
 8000914:	e789      	b.n	800082a <__aeabi_fadd+0xfa>
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	03d2      	lsls	r2, r2, #15
 800091a:	433a      	orrs	r2, r7
 800091c:	0252      	lsls	r2, r2, #9
 800091e:	20ff      	movs	r0, #255	@ 0xff
 8000920:	0a52      	lsrs	r2, r2, #9
 8000922:	e784      	b.n	800082e <__aeabi_fadd+0xfe>
 8000924:	1a77      	subs	r7, r6, r1
 8000926:	017b      	lsls	r3, r7, #5
 8000928:	d46b      	bmi.n	8000a02 <__aeabi_fadd+0x2d2>
 800092a:	2f00      	cmp	r7, #0
 800092c:	d000      	beq.n	8000930 <__aeabi_fadd+0x200>
 800092e:	e765      	b.n	80007fc <__aeabi_fadd+0xcc>
 8000930:	2400      	movs	r4, #0
 8000932:	2000      	movs	r0, #0
 8000934:	2200      	movs	r2, #0
 8000936:	e77a      	b.n	800082e <__aeabi_fadd+0xfe>
 8000938:	22fe      	movs	r2, #254	@ 0xfe
 800093a:	1c6b      	adds	r3, r5, #1
 800093c:	421a      	tst	r2, r3
 800093e:	d149      	bne.n	80009d4 <__aeabi_fadd+0x2a4>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d000      	beq.n	8000946 <__aeabi_fadd+0x216>
 8000944:	e09f      	b.n	8000a86 <__aeabi_fadd+0x356>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d100      	bne.n	800094c <__aeabi_fadd+0x21c>
 800094a:	e0ba      	b.n	8000ac2 <__aeabi_fadd+0x392>
 800094c:	2900      	cmp	r1, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_fadd+0x222>
 8000950:	e0cf      	b.n	8000af2 <__aeabi_fadd+0x3c2>
 8000952:	1872      	adds	r2, r6, r1
 8000954:	0153      	lsls	r3, r2, #5
 8000956:	d400      	bmi.n	800095a <__aeabi_fadd+0x22a>
 8000958:	e0cd      	b.n	8000af6 <__aeabi_fadd+0x3c6>
 800095a:	0192      	lsls	r2, r2, #6
 800095c:	2001      	movs	r0, #1
 800095e:	0a52      	lsrs	r2, r2, #9
 8000960:	e765      	b.n	800082e <__aeabi_fadd+0xfe>
 8000962:	2aff      	cmp	r2, #255	@ 0xff
 8000964:	d0d2      	beq.n	800090c <__aeabi_fadd+0x1dc>
 8000966:	2080      	movs	r0, #128	@ 0x80
 8000968:	04c0      	lsls	r0, r0, #19
 800096a:	4306      	orrs	r6, r0
 800096c:	2001      	movs	r0, #1
 800096e:	2b1b      	cmp	r3, #27
 8000970:	dc08      	bgt.n	8000984 <__aeabi_fadd+0x254>
 8000972:	0030      	movs	r0, r6
 8000974:	2420      	movs	r4, #32
 8000976:	40d8      	lsrs	r0, r3
 8000978:	1ae3      	subs	r3, r4, r3
 800097a:	409e      	lsls	r6, r3
 800097c:	0033      	movs	r3, r6
 800097e:	1e5c      	subs	r4, r3, #1
 8000980:	41a3      	sbcs	r3, r4
 8000982:	4318      	orrs	r0, r3
 8000984:	464c      	mov	r4, r9
 8000986:	0015      	movs	r5, r2
 8000988:	1a0e      	subs	r6, r1, r0
 800098a:	e732      	b.n	80007f2 <__aeabi_fadd+0xc2>
 800098c:	0008      	movs	r0, r1
 800098e:	2220      	movs	r2, #32
 8000990:	40d8      	lsrs	r0, r3
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	4099      	lsls	r1, r3
 8000996:	000b      	movs	r3, r1
 8000998:	1e5a      	subs	r2, r3, #1
 800099a:	4193      	sbcs	r3, r2
 800099c:	4303      	orrs	r3, r0
 800099e:	18f6      	adds	r6, r6, r3
 80009a0:	0173      	lsls	r3, r6, #5
 80009a2:	d59b      	bpl.n	80008dc <__aeabi_fadd+0x1ac>
 80009a4:	3501      	adds	r5, #1
 80009a6:	2dff      	cmp	r5, #255	@ 0xff
 80009a8:	d100      	bne.n	80009ac <__aeabi_fadd+0x27c>
 80009aa:	e73e      	b.n	800082a <__aeabi_fadd+0xfa>
 80009ac:	2301      	movs	r3, #1
 80009ae:	494d      	ldr	r1, [pc, #308]	@ (8000ae4 <__aeabi_fadd+0x3b4>)
 80009b0:	0872      	lsrs	r2, r6, #1
 80009b2:	4033      	ands	r3, r6
 80009b4:	400a      	ands	r2, r1
 80009b6:	431a      	orrs	r2, r3
 80009b8:	0016      	movs	r6, r2
 80009ba:	0753      	lsls	r3, r2, #29
 80009bc:	d004      	beq.n	80009c8 <__aeabi_fadd+0x298>
 80009be:	230f      	movs	r3, #15
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fadd+0x298>
 80009c6:	e72a      	b.n	800081e <__aeabi_fadd+0xee>
 80009c8:	0173      	lsls	r3, r6, #5
 80009ca:	d500      	bpl.n	80009ce <__aeabi_fadd+0x29e>
 80009cc:	e72a      	b.n	8000824 <__aeabi_fadd+0xf4>
 80009ce:	002b      	movs	r3, r5
 80009d0:	08f7      	lsrs	r7, r6, #3
 80009d2:	e6f7      	b.n	80007c4 <__aeabi_fadd+0x94>
 80009d4:	2bff      	cmp	r3, #255	@ 0xff
 80009d6:	d100      	bne.n	80009da <__aeabi_fadd+0x2aa>
 80009d8:	e727      	b.n	800082a <__aeabi_fadd+0xfa>
 80009da:	1871      	adds	r1, r6, r1
 80009dc:	0849      	lsrs	r1, r1, #1
 80009de:	074a      	lsls	r2, r1, #29
 80009e0:	d02f      	beq.n	8000a42 <__aeabi_fadd+0x312>
 80009e2:	220f      	movs	r2, #15
 80009e4:	400a      	ands	r2, r1
 80009e6:	2a04      	cmp	r2, #4
 80009e8:	d02b      	beq.n	8000a42 <__aeabi_fadd+0x312>
 80009ea:	1d0e      	adds	r6, r1, #4
 80009ec:	e6e6      	b.n	80007bc <__aeabi_fadd+0x8c>
 80009ee:	2aff      	cmp	r2, #255	@ 0xff
 80009f0:	d08d      	beq.n	800090e <__aeabi_fadd+0x1de>
 80009f2:	2080      	movs	r0, #128	@ 0x80
 80009f4:	04c0      	lsls	r0, r0, #19
 80009f6:	4306      	orrs	r6, r0
 80009f8:	2b1b      	cmp	r3, #27
 80009fa:	dd24      	ble.n	8000a46 <__aeabi_fadd+0x316>
 80009fc:	0013      	movs	r3, r2
 80009fe:	1d4e      	adds	r6, r1, #5
 8000a00:	e6dc      	b.n	80007bc <__aeabi_fadd+0x8c>
 8000a02:	464c      	mov	r4, r9
 8000a04:	1b8f      	subs	r7, r1, r6
 8000a06:	e6f9      	b.n	80007fc <__aeabi_fadd+0xcc>
 8000a08:	464c      	mov	r4, r9
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	e6d6      	b.n	80007bc <__aeabi_fadd+0x8c>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d149      	bne.n	8000aa6 <__aeabi_fadd+0x376>
 8000a12:	2900      	cmp	r1, #0
 8000a14:	d068      	beq.n	8000ae8 <__aeabi_fadd+0x3b8>
 8000a16:	4667      	mov	r7, ip
 8000a18:	464c      	mov	r4, r9
 8000a1a:	e77c      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000a1c:	1870      	adds	r0, r6, r1
 8000a1e:	0143      	lsls	r3, r0, #5
 8000a20:	d574      	bpl.n	8000b0c <__aeabi_fadd+0x3dc>
 8000a22:	4930      	ldr	r1, [pc, #192]	@ (8000ae4 <__aeabi_fadd+0x3b4>)
 8000a24:	0840      	lsrs	r0, r0, #1
 8000a26:	4001      	ands	r1, r0
 8000a28:	0743      	lsls	r3, r0, #29
 8000a2a:	d009      	beq.n	8000a40 <__aeabi_fadd+0x310>
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	4003      	ands	r3, r0
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d005      	beq.n	8000a40 <__aeabi_fadd+0x310>
 8000a34:	2302      	movs	r3, #2
 8000a36:	1d0e      	adds	r6, r1, #4
 8000a38:	e6c0      	b.n	80007bc <__aeabi_fadd+0x8c>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	08cf      	lsrs	r7, r1, #3
 8000a3e:	e6c1      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000a40:	2302      	movs	r3, #2
 8000a42:	08cf      	lsrs	r7, r1, #3
 8000a44:	e6be      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000a46:	2520      	movs	r5, #32
 8000a48:	0030      	movs	r0, r6
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	1aeb      	subs	r3, r5, r3
 8000a4e:	409e      	lsls	r6, r3
 8000a50:	0033      	movs	r3, r6
 8000a52:	1e5d      	subs	r5, r3, #1
 8000a54:	41ab      	sbcs	r3, r5
 8000a56:	4303      	orrs	r3, r0
 8000a58:	0015      	movs	r5, r2
 8000a5a:	185e      	adds	r6, r3, r1
 8000a5c:	e7a0      	b.n	80009a0 <__aeabi_fadd+0x270>
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fadd+0x334>
 8000a62:	e765      	b.n	8000930 <__aeabi_fadd+0x200>
 8000a64:	464c      	mov	r4, r9
 8000a66:	4667      	mov	r7, ip
 8000a68:	e6ac      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000a6a:	1b8f      	subs	r7, r1, r6
 8000a6c:	017b      	lsls	r3, r7, #5
 8000a6e:	d52e      	bpl.n	8000ace <__aeabi_fadd+0x39e>
 8000a70:	01bf      	lsls	r7, r7, #6
 8000a72:	09bf      	lsrs	r7, r7, #6
 8000a74:	0038      	movs	r0, r7
 8000a76:	f7ff fd51 	bl	800051c <__clzsi2>
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	3805      	subs	r0, #5
 8000a7e:	4083      	lsls	r3, r0
 8000a80:	464c      	mov	r4, r9
 8000a82:	3501      	adds	r5, #1
 8000a84:	e710      	b.n	80008a8 <__aeabi_fadd+0x178>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x35c>
 8000a8a:	e740      	b.n	800090e <__aeabi_fadd+0x1de>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fadd+0x362>
 8000a90:	e741      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000a92:	2380      	movs	r3, #128	@ 0x80
 8000a94:	03db      	lsls	r3, r3, #15
 8000a96:	429f      	cmp	r7, r3
 8000a98:	d200      	bcs.n	8000a9c <__aeabi_fadd+0x36c>
 8000a9a:	e73c      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000a9c:	459c      	cmp	ip, r3
 8000a9e:	d300      	bcc.n	8000aa2 <__aeabi_fadd+0x372>
 8000aa0:	e739      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000aa2:	4667      	mov	r7, ip
 8000aa4:	e737      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fadd+0x37c>
 8000aaa:	e734      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	03db      	lsls	r3, r3, #15
 8000ab0:	429f      	cmp	r7, r3
 8000ab2:	d200      	bcs.n	8000ab6 <__aeabi_fadd+0x386>
 8000ab4:	e72f      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000ab6:	459c      	cmp	ip, r3
 8000ab8:	d300      	bcc.n	8000abc <__aeabi_fadd+0x38c>
 8000aba:	e72c      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000abc:	464c      	mov	r4, r9
 8000abe:	4667      	mov	r7, ip
 8000ac0:	e729      	b.n	8000916 <__aeabi_fadd+0x1e6>
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fadd+0x398>
 8000ac6:	e734      	b.n	8000932 <__aeabi_fadd+0x202>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	08cf      	lsrs	r7, r1, #3
 8000acc:	e67a      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000ace:	464c      	mov	r4, r9
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	08ff      	lsrs	r7, r7, #3
 8000ad4:	e676      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000ad6:	2f00      	cmp	r7, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x3ac>
 8000ada:	e729      	b.n	8000930 <__aeabi_fadd+0x200>
 8000adc:	08ff      	lsrs	r7, r7, #3
 8000ade:	e671      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000ae0:	fbffffff 	.word	0xfbffffff
 8000ae4:	7dffffff 	.word	0x7dffffff
 8000ae8:	2280      	movs	r2, #128	@ 0x80
 8000aea:	2400      	movs	r4, #0
 8000aec:	20ff      	movs	r0, #255	@ 0xff
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	e69d      	b.n	800082e <__aeabi_fadd+0xfe>
 8000af2:	2300      	movs	r3, #0
 8000af4:	e666      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000af6:	2300      	movs	r3, #0
 8000af8:	08d7      	lsrs	r7, r2, #3
 8000afa:	e663      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000afc:	2001      	movs	r0, #1
 8000afe:	0172      	lsls	r2, r6, #5
 8000b00:	d500      	bpl.n	8000b04 <__aeabi_fadd+0x3d4>
 8000b02:	e6e7      	b.n	80008d4 <__aeabi_fadd+0x1a4>
 8000b04:	0031      	movs	r1, r6
 8000b06:	2300      	movs	r3, #0
 8000b08:	08cf      	lsrs	r7, r1, #3
 8000b0a:	e65b      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	08c7      	lsrs	r7, r0, #3
 8000b10:	e658      	b.n	80007c4 <__aeabi_fadd+0x94>
 8000b12:	46c0      	nop			@ (mov r8, r8)

08000b14 <__aeabi_fdiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	4646      	mov	r6, r8
 8000b18:	464f      	mov	r7, r9
 8000b1a:	46d6      	mov	lr, sl
 8000b1c:	0245      	lsls	r5, r0, #9
 8000b1e:	b5c0      	push	{r6, r7, lr}
 8000b20:	0fc3      	lsrs	r3, r0, #31
 8000b22:	0047      	lsls	r7, r0, #1
 8000b24:	4698      	mov	r8, r3
 8000b26:	1c0e      	adds	r6, r1, #0
 8000b28:	0a6d      	lsrs	r5, r5, #9
 8000b2a:	0e3f      	lsrs	r7, r7, #24
 8000b2c:	d05b      	beq.n	8000be6 <__aeabi_fdiv+0xd2>
 8000b2e:	2fff      	cmp	r7, #255	@ 0xff
 8000b30:	d021      	beq.n	8000b76 <__aeabi_fdiv+0x62>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	00ed      	lsls	r5, r5, #3
 8000b36:	04db      	lsls	r3, r3, #19
 8000b38:	431d      	orrs	r5, r3
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	469a      	mov	sl, r3
 8000b40:	3f7f      	subs	r7, #127	@ 0x7f
 8000b42:	0274      	lsls	r4, r6, #9
 8000b44:	0073      	lsls	r3, r6, #1
 8000b46:	0a64      	lsrs	r4, r4, #9
 8000b48:	0e1b      	lsrs	r3, r3, #24
 8000b4a:	0ff6      	lsrs	r6, r6, #31
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d020      	beq.n	8000b92 <__aeabi_fdiv+0x7e>
 8000b50:	2bff      	cmp	r3, #255	@ 0xff
 8000b52:	d043      	beq.n	8000bdc <__aeabi_fdiv+0xc8>
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	2000      	movs	r0, #0
 8000b58:	00e4      	lsls	r4, r4, #3
 8000b5a:	04d2      	lsls	r2, r2, #19
 8000b5c:	4314      	orrs	r4, r2
 8000b5e:	3b7f      	subs	r3, #127	@ 0x7f
 8000b60:	4642      	mov	r2, r8
 8000b62:	1aff      	subs	r7, r7, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	4072      	eors	r2, r6
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d900      	bls.n	8000b6e <__aeabi_fdiv+0x5a>
 8000b6c:	e09d      	b.n	8000caa <__aeabi_fdiv+0x196>
 8000b6e:	4971      	ldr	r1, [pc, #452]	@ (8000d34 <__aeabi_fdiv+0x220>)
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	58cb      	ldr	r3, [r1, r3]
 8000b74:	469f      	mov	pc, r3
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d15a      	bne.n	8000c30 <__aeabi_fdiv+0x11c>
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	3b06      	subs	r3, #6
 8000b80:	0274      	lsls	r4, r6, #9
 8000b82:	469a      	mov	sl, r3
 8000b84:	0073      	lsls	r3, r6, #1
 8000b86:	27ff      	movs	r7, #255	@ 0xff
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	0e1b      	lsrs	r3, r3, #24
 8000b8c:	0ff6      	lsrs	r6, r6, #31
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1de      	bne.n	8000b50 <__aeabi_fdiv+0x3c>
 8000b92:	2c00      	cmp	r4, #0
 8000b94:	d13b      	bne.n	8000c0e <__aeabi_fdiv+0xfa>
 8000b96:	2301      	movs	r3, #1
 8000b98:	4642      	mov	r2, r8
 8000b9a:	4649      	mov	r1, r9
 8000b9c:	4072      	eors	r2, r6
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	290e      	cmp	r1, #14
 8000ba2:	d818      	bhi.n	8000bd6 <__aeabi_fdiv+0xc2>
 8000ba4:	4864      	ldr	r0, [pc, #400]	@ (8000d38 <__aeabi_fdiv+0x224>)
 8000ba6:	0089      	lsls	r1, r1, #2
 8000ba8:	5841      	ldr	r1, [r0, r1]
 8000baa:	468f      	mov	pc, r1
 8000bac:	4653      	mov	r3, sl
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fdiv+0xa0>
 8000bb2:	e0b8      	b.n	8000d26 <__aeabi_fdiv+0x212>
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d06e      	beq.n	8000c96 <__aeabi_fdiv+0x182>
 8000bb8:	4642      	mov	r2, r8
 8000bba:	002c      	movs	r4, r5
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d140      	bne.n	8000c42 <__aeabi_fdiv+0x12e>
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	2400      	movs	r4, #0
 8000bc4:	05c0      	lsls	r0, r0, #23
 8000bc6:	4320      	orrs	r0, r4
 8000bc8:	07d2      	lsls	r2, r2, #31
 8000bca:	4310      	orrs	r0, r2
 8000bcc:	bce0      	pop	{r5, r6, r7}
 8000bce:	46ba      	mov	sl, r7
 8000bd0:	46b1      	mov	r9, r6
 8000bd2:	46a8      	mov	r8, r5
 8000bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd6:	20ff      	movs	r0, #255	@ 0xff
 8000bd8:	2400      	movs	r4, #0
 8000bda:	e7f3      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d120      	bne.n	8000c22 <__aeabi_fdiv+0x10e>
 8000be0:	2302      	movs	r3, #2
 8000be2:	3fff      	subs	r7, #255	@ 0xff
 8000be4:	e7d8      	b.n	8000b98 <__aeabi_fdiv+0x84>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d105      	bne.n	8000bf6 <__aeabi_fdiv+0xe2>
 8000bea:	2304      	movs	r3, #4
 8000bec:	4699      	mov	r9, r3
 8000bee:	3b03      	subs	r3, #3
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	e7a5      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	f7ff fc90 	bl	800051c <__clzsi2>
 8000bfc:	2776      	movs	r7, #118	@ 0x76
 8000bfe:	1f43      	subs	r3, r0, #5
 8000c00:	409d      	lsls	r5, r3
 8000c02:	2300      	movs	r3, #0
 8000c04:	427f      	negs	r7, r7
 8000c06:	4699      	mov	r9, r3
 8000c08:	469a      	mov	sl, r3
 8000c0a:	1a3f      	subs	r7, r7, r0
 8000c0c:	e799      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f7ff fc84 	bl	800051c <__clzsi2>
 8000c14:	1f43      	subs	r3, r0, #5
 8000c16:	409c      	lsls	r4, r3
 8000c18:	2376      	movs	r3, #118	@ 0x76
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	1a1b      	subs	r3, r3, r0
 8000c1e:	2000      	movs	r0, #0
 8000c20:	e79e      	b.n	8000b60 <__aeabi_fdiv+0x4c>
 8000c22:	2303      	movs	r3, #3
 8000c24:	464a      	mov	r2, r9
 8000c26:	431a      	orrs	r2, r3
 8000c28:	4691      	mov	r9, r2
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	33fc      	adds	r3, #252	@ 0xfc
 8000c2e:	e797      	b.n	8000b60 <__aeabi_fdiv+0x4c>
 8000c30:	230c      	movs	r3, #12
 8000c32:	4699      	mov	r9, r3
 8000c34:	3b09      	subs	r3, #9
 8000c36:	27ff      	movs	r7, #255	@ 0xff
 8000c38:	469a      	mov	sl, r3
 8000c3a:	e782      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000c3c:	2803      	cmp	r0, #3
 8000c3e:	d02c      	beq.n	8000c9a <__aeabi_fdiv+0x186>
 8000c40:	0032      	movs	r2, r6
 8000c42:	0038      	movs	r0, r7
 8000c44:	307f      	adds	r0, #127	@ 0x7f
 8000c46:	2800      	cmp	r0, #0
 8000c48:	dd47      	ble.n	8000cda <__aeabi_fdiv+0x1c6>
 8000c4a:	0763      	lsls	r3, r4, #29
 8000c4c:	d004      	beq.n	8000c58 <__aeabi_fdiv+0x144>
 8000c4e:	230f      	movs	r3, #15
 8000c50:	4023      	ands	r3, r4
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d000      	beq.n	8000c58 <__aeabi_fdiv+0x144>
 8000c56:	3404      	adds	r4, #4
 8000c58:	0123      	lsls	r3, r4, #4
 8000c5a:	d503      	bpl.n	8000c64 <__aeabi_fdiv+0x150>
 8000c5c:	0038      	movs	r0, r7
 8000c5e:	4b37      	ldr	r3, [pc, #220]	@ (8000d3c <__aeabi_fdiv+0x228>)
 8000c60:	3080      	adds	r0, #128	@ 0x80
 8000c62:	401c      	ands	r4, r3
 8000c64:	28fe      	cmp	r0, #254	@ 0xfe
 8000c66:	dcb6      	bgt.n	8000bd6 <__aeabi_fdiv+0xc2>
 8000c68:	01a4      	lsls	r4, r4, #6
 8000c6a:	0a64      	lsrs	r4, r4, #9
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	e7a9      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000c70:	2480      	movs	r4, #128	@ 0x80
 8000c72:	2200      	movs	r2, #0
 8000c74:	20ff      	movs	r0, #255	@ 0xff
 8000c76:	03e4      	lsls	r4, r4, #15
 8000c78:	e7a4      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000c7a:	2380      	movs	r3, #128	@ 0x80
 8000c7c:	03db      	lsls	r3, r3, #15
 8000c7e:	421d      	tst	r5, r3
 8000c80:	d001      	beq.n	8000c86 <__aeabi_fdiv+0x172>
 8000c82:	421c      	tst	r4, r3
 8000c84:	d00b      	beq.n	8000c9e <__aeabi_fdiv+0x18a>
 8000c86:	2480      	movs	r4, #128	@ 0x80
 8000c88:	03e4      	lsls	r4, r4, #15
 8000c8a:	432c      	orrs	r4, r5
 8000c8c:	0264      	lsls	r4, r4, #9
 8000c8e:	4642      	mov	r2, r8
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	0a64      	lsrs	r4, r4, #9
 8000c94:	e796      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000c96:	4646      	mov	r6, r8
 8000c98:	002c      	movs	r4, r5
 8000c9a:	2380      	movs	r3, #128	@ 0x80
 8000c9c:	03db      	lsls	r3, r3, #15
 8000c9e:	431c      	orrs	r4, r3
 8000ca0:	0264      	lsls	r4, r4, #9
 8000ca2:	0032      	movs	r2, r6
 8000ca4:	20ff      	movs	r0, #255	@ 0xff
 8000ca6:	0a64      	lsrs	r4, r4, #9
 8000ca8:	e78c      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000caa:	016d      	lsls	r5, r5, #5
 8000cac:	0160      	lsls	r0, r4, #5
 8000cae:	4285      	cmp	r5, r0
 8000cb0:	d22d      	bcs.n	8000d0e <__aeabi_fdiv+0x1fa>
 8000cb2:	231b      	movs	r3, #27
 8000cb4:	2400      	movs	r4, #0
 8000cb6:	3f01      	subs	r7, #1
 8000cb8:	2601      	movs	r6, #1
 8000cba:	0029      	movs	r1, r5
 8000cbc:	0064      	lsls	r4, r4, #1
 8000cbe:	006d      	lsls	r5, r5, #1
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	db01      	blt.n	8000cc8 <__aeabi_fdiv+0x1b4>
 8000cc4:	4285      	cmp	r5, r0
 8000cc6:	d301      	bcc.n	8000ccc <__aeabi_fdiv+0x1b8>
 8000cc8:	1a2d      	subs	r5, r5, r0
 8000cca:	4334      	orrs	r4, r6
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f3      	bne.n	8000cba <__aeabi_fdiv+0x1a6>
 8000cd2:	1e6b      	subs	r3, r5, #1
 8000cd4:	419d      	sbcs	r5, r3
 8000cd6:	432c      	orrs	r4, r5
 8000cd8:	e7b3      	b.n	8000c42 <__aeabi_fdiv+0x12e>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	1a1b      	subs	r3, r3, r0
 8000cde:	2b1b      	cmp	r3, #27
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_fdiv+0x1d0>
 8000ce2:	e76d      	b.n	8000bc0 <__aeabi_fdiv+0xac>
 8000ce4:	0021      	movs	r1, r4
 8000ce6:	379e      	adds	r7, #158	@ 0x9e
 8000ce8:	40d9      	lsrs	r1, r3
 8000cea:	40bc      	lsls	r4, r7
 8000cec:	000b      	movs	r3, r1
 8000cee:	1e61      	subs	r1, r4, #1
 8000cf0:	418c      	sbcs	r4, r1
 8000cf2:	4323      	orrs	r3, r4
 8000cf4:	0759      	lsls	r1, r3, #29
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_fdiv+0x1ee>
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	4019      	ands	r1, r3
 8000cfc:	2904      	cmp	r1, #4
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_fdiv+0x1ee>
 8000d00:	3304      	adds	r3, #4
 8000d02:	0159      	lsls	r1, r3, #5
 8000d04:	d413      	bmi.n	8000d2e <__aeabi_fdiv+0x21a>
 8000d06:	019b      	lsls	r3, r3, #6
 8000d08:	2000      	movs	r0, #0
 8000d0a:	0a5c      	lsrs	r4, r3, #9
 8000d0c:	e75a      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000d0e:	231a      	movs	r3, #26
 8000d10:	2401      	movs	r4, #1
 8000d12:	1a2d      	subs	r5, r5, r0
 8000d14:	e7d0      	b.n	8000cb8 <__aeabi_fdiv+0x1a4>
 8000d16:	1e98      	subs	r0, r3, #2
 8000d18:	4243      	negs	r3, r0
 8000d1a:	4158      	adcs	r0, r3
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	0032      	movs	r2, r6
 8000d20:	2400      	movs	r4, #0
 8000d22:	b2c0      	uxtb	r0, r0
 8000d24:	e74e      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000d26:	4642      	mov	r2, r8
 8000d28:	20ff      	movs	r0, #255	@ 0xff
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	e74a      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	2400      	movs	r4, #0
 8000d32:	e747      	b.n	8000bc4 <__aeabi_fdiv+0xb0>
 8000d34:	08012004 	.word	0x08012004
 8000d38:	08012044 	.word	0x08012044
 8000d3c:	f7ffffff 	.word	0xf7ffffff

08000d40 <__eqsf2>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	0042      	lsls	r2, r0, #1
 8000d44:	024e      	lsls	r6, r1, #9
 8000d46:	004c      	lsls	r4, r1, #1
 8000d48:	0245      	lsls	r5, r0, #9
 8000d4a:	0a6d      	lsrs	r5, r5, #9
 8000d4c:	0e12      	lsrs	r2, r2, #24
 8000d4e:	0fc3      	lsrs	r3, r0, #31
 8000d50:	0a76      	lsrs	r6, r6, #9
 8000d52:	0e24      	lsrs	r4, r4, #24
 8000d54:	0fc9      	lsrs	r1, r1, #31
 8000d56:	2aff      	cmp	r2, #255	@ 0xff
 8000d58:	d010      	beq.n	8000d7c <__eqsf2+0x3c>
 8000d5a:	2cff      	cmp	r4, #255	@ 0xff
 8000d5c:	d00c      	beq.n	8000d78 <__eqsf2+0x38>
 8000d5e:	2001      	movs	r0, #1
 8000d60:	42a2      	cmp	r2, r4
 8000d62:	d10a      	bne.n	8000d7a <__eqsf2+0x3a>
 8000d64:	42b5      	cmp	r5, r6
 8000d66:	d108      	bne.n	8000d7a <__eqsf2+0x3a>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d00f      	beq.n	8000d8c <__eqsf2+0x4c>
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d104      	bne.n	8000d7a <__eqsf2+0x3a>
 8000d70:	0028      	movs	r0, r5
 8000d72:	1e43      	subs	r3, r0, #1
 8000d74:	4198      	sbcs	r0, r3
 8000d76:	e000      	b.n	8000d7a <__eqsf2+0x3a>
 8000d78:	2001      	movs	r0, #1
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	2cff      	cmp	r4, #255	@ 0xff
 8000d80:	d1fb      	bne.n	8000d7a <__eqsf2+0x3a>
 8000d82:	4335      	orrs	r5, r6
 8000d84:	d1f9      	bne.n	8000d7a <__eqsf2+0x3a>
 8000d86:	404b      	eors	r3, r1
 8000d88:	0018      	movs	r0, r3
 8000d8a:	e7f6      	b.n	8000d7a <__eqsf2+0x3a>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e7f4      	b.n	8000d7a <__eqsf2+0x3a>

08000d90 <__gesf2>:
 8000d90:	b530      	push	{r4, r5, lr}
 8000d92:	0042      	lsls	r2, r0, #1
 8000d94:	0244      	lsls	r4, r0, #9
 8000d96:	024d      	lsls	r5, r1, #9
 8000d98:	0fc3      	lsrs	r3, r0, #31
 8000d9a:	0048      	lsls	r0, r1, #1
 8000d9c:	0a64      	lsrs	r4, r4, #9
 8000d9e:	0e12      	lsrs	r2, r2, #24
 8000da0:	0a6d      	lsrs	r5, r5, #9
 8000da2:	0e00      	lsrs	r0, r0, #24
 8000da4:	0fc9      	lsrs	r1, r1, #31
 8000da6:	2aff      	cmp	r2, #255	@ 0xff
 8000da8:	d018      	beq.n	8000ddc <__gesf2+0x4c>
 8000daa:	28ff      	cmp	r0, #255	@ 0xff
 8000dac:	d00a      	beq.n	8000dc4 <__gesf2+0x34>
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d11e      	bne.n	8000df0 <__gesf2+0x60>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d10a      	bne.n	8000dcc <__gesf2+0x3c>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d029      	beq.n	8000e0e <__gesf2+0x7e>
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	d12d      	bne.n	8000e1a <__gesf2+0x8a>
 8000dbe:	0048      	lsls	r0, r1, #1
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	bd30      	pop	{r4, r5, pc}
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	d125      	bne.n	8000e14 <__gesf2+0x84>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d101      	bne.n	8000dd0 <__gesf2+0x40>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d0f6      	beq.n	8000dbe <__gesf2+0x2e>
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d019      	beq.n	8000e08 <__gesf2+0x78>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	4318      	orrs	r0, r3
 8000dda:	e7f2      	b.n	8000dc2 <__gesf2+0x32>
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d119      	bne.n	8000e14 <__gesf2+0x84>
 8000de0:	28ff      	cmp	r0, #255	@ 0xff
 8000de2:	d1f7      	bne.n	8000dd4 <__gesf2+0x44>
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	d115      	bne.n	8000e14 <__gesf2+0x84>
 8000de8:	2000      	movs	r0, #0
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d1f2      	bne.n	8000dd4 <__gesf2+0x44>
 8000dee:	e7e8      	b.n	8000dc2 <__gesf2+0x32>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d0ef      	beq.n	8000dd4 <__gesf2+0x44>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d1ed      	bne.n	8000dd4 <__gesf2+0x44>
 8000df8:	4282      	cmp	r2, r0
 8000dfa:	dceb      	bgt.n	8000dd4 <__gesf2+0x44>
 8000dfc:	db04      	blt.n	8000e08 <__gesf2+0x78>
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	d8e8      	bhi.n	8000dd4 <__gesf2+0x44>
 8000e02:	2000      	movs	r0, #0
 8000e04:	42ac      	cmp	r4, r5
 8000e06:	d2dc      	bcs.n	8000dc2 <__gesf2+0x32>
 8000e08:	0058      	lsls	r0, r3, #1
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	e7d9      	b.n	8000dc2 <__gesf2+0x32>
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d0d7      	beq.n	8000dc2 <__gesf2+0x32>
 8000e12:	e7df      	b.n	8000dd4 <__gesf2+0x44>
 8000e14:	2002      	movs	r0, #2
 8000e16:	4240      	negs	r0, r0
 8000e18:	e7d3      	b.n	8000dc2 <__gesf2+0x32>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d1da      	bne.n	8000dd4 <__gesf2+0x44>
 8000e1e:	e7ee      	b.n	8000dfe <__gesf2+0x6e>

08000e20 <__lesf2>:
 8000e20:	b530      	push	{r4, r5, lr}
 8000e22:	0042      	lsls	r2, r0, #1
 8000e24:	0244      	lsls	r4, r0, #9
 8000e26:	024d      	lsls	r5, r1, #9
 8000e28:	0fc3      	lsrs	r3, r0, #31
 8000e2a:	0048      	lsls	r0, r1, #1
 8000e2c:	0a64      	lsrs	r4, r4, #9
 8000e2e:	0e12      	lsrs	r2, r2, #24
 8000e30:	0a6d      	lsrs	r5, r5, #9
 8000e32:	0e00      	lsrs	r0, r0, #24
 8000e34:	0fc9      	lsrs	r1, r1, #31
 8000e36:	2aff      	cmp	r2, #255	@ 0xff
 8000e38:	d017      	beq.n	8000e6a <__lesf2+0x4a>
 8000e3a:	28ff      	cmp	r0, #255	@ 0xff
 8000e3c:	d00a      	beq.n	8000e54 <__lesf2+0x34>
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d11b      	bne.n	8000e7a <__lesf2+0x5a>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d10a      	bne.n	8000e5c <__lesf2+0x3c>
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d01d      	beq.n	8000e86 <__lesf2+0x66>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d12d      	bne.n	8000eaa <__lesf2+0x8a>
 8000e4e:	0048      	lsls	r0, r1, #1
 8000e50:	3801      	subs	r0, #1
 8000e52:	e011      	b.n	8000e78 <__lesf2+0x58>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d10e      	bne.n	8000e76 <__lesf2+0x56>
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d101      	bne.n	8000e60 <__lesf2+0x40>
 8000e5c:	2c00      	cmp	r4, #0
 8000e5e:	d0f6      	beq.n	8000e4e <__lesf2+0x2e>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d10c      	bne.n	8000e7e <__lesf2+0x5e>
 8000e64:	0058      	lsls	r0, r3, #1
 8000e66:	3801      	subs	r0, #1
 8000e68:	e006      	b.n	8000e78 <__lesf2+0x58>
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	d103      	bne.n	8000e76 <__lesf2+0x56>
 8000e6e:	28ff      	cmp	r0, #255	@ 0xff
 8000e70:	d105      	bne.n	8000e7e <__lesf2+0x5e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d015      	beq.n	8000ea2 <__lesf2+0x82>
 8000e76:	2002      	movs	r0, #2
 8000e78:	bd30      	pop	{r4, r5, pc}
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d106      	bne.n	8000e8c <__lesf2+0x6c>
 8000e7e:	2001      	movs	r0, #1
 8000e80:	425b      	negs	r3, r3
 8000e82:	4318      	orrs	r0, r3
 8000e84:	e7f8      	b.n	8000e78 <__lesf2+0x58>
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d0f6      	beq.n	8000e78 <__lesf2+0x58>
 8000e8a:	e7f8      	b.n	8000e7e <__lesf2+0x5e>
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d1f6      	bne.n	8000e7e <__lesf2+0x5e>
 8000e90:	4282      	cmp	r2, r0
 8000e92:	dcf4      	bgt.n	8000e7e <__lesf2+0x5e>
 8000e94:	dbe6      	blt.n	8000e64 <__lesf2+0x44>
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	d8f1      	bhi.n	8000e7e <__lesf2+0x5e>
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	42ac      	cmp	r4, r5
 8000e9e:	d2eb      	bcs.n	8000e78 <__lesf2+0x58>
 8000ea0:	e7e0      	b.n	8000e64 <__lesf2+0x44>
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d1ea      	bne.n	8000e7e <__lesf2+0x5e>
 8000ea8:	e7e6      	b.n	8000e78 <__lesf2+0x58>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d1e7      	bne.n	8000e7e <__lesf2+0x5e>
 8000eae:	e7f2      	b.n	8000e96 <__lesf2+0x76>

08000eb0 <__aeabi_fmul>:
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	464f      	mov	r7, r9
 8000eb4:	4646      	mov	r6, r8
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	0044      	lsls	r4, r0, #1
 8000eba:	b5c0      	push	{r6, r7, lr}
 8000ebc:	0246      	lsls	r6, r0, #9
 8000ebe:	1c0f      	adds	r7, r1, #0
 8000ec0:	0a76      	lsrs	r6, r6, #9
 8000ec2:	0e24      	lsrs	r4, r4, #24
 8000ec4:	0fc5      	lsrs	r5, r0, #31
 8000ec6:	2c00      	cmp	r4, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fmul+0x1c>
 8000eca:	e0da      	b.n	8001082 <__aeabi_fmul+0x1d2>
 8000ecc:	2cff      	cmp	r4, #255	@ 0xff
 8000ece:	d074      	beq.n	8000fba <__aeabi_fmul+0x10a>
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	00f6      	lsls	r6, r6, #3
 8000ed4:	04db      	lsls	r3, r3, #19
 8000ed6:	431e      	orrs	r6, r3
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4699      	mov	r9, r3
 8000edc:	469a      	mov	sl, r3
 8000ede:	3c7f      	subs	r4, #127	@ 0x7f
 8000ee0:	027b      	lsls	r3, r7, #9
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	4698      	mov	r8, r3
 8000ee6:	007b      	lsls	r3, r7, #1
 8000ee8:	0e1b      	lsrs	r3, r3, #24
 8000eea:	0fff      	lsrs	r7, r7, #31
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d074      	beq.n	8000fda <__aeabi_fmul+0x12a>
 8000ef0:	2bff      	cmp	r3, #255	@ 0xff
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_fmul+0x46>
 8000ef4:	e08e      	b.n	8001014 <__aeabi_fmul+0x164>
 8000ef6:	4642      	mov	r2, r8
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	00d2      	lsls	r2, r2, #3
 8000efc:	04c9      	lsls	r1, r1, #19
 8000efe:	4311      	orrs	r1, r2
 8000f00:	3b7f      	subs	r3, #127	@ 0x7f
 8000f02:	002a      	movs	r2, r5
 8000f04:	18e4      	adds	r4, r4, r3
 8000f06:	464b      	mov	r3, r9
 8000f08:	407a      	eors	r2, r7
 8000f0a:	4688      	mov	r8, r1
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	2b0a      	cmp	r3, #10
 8000f10:	dc75      	bgt.n	8000ffe <__aeabi_fmul+0x14e>
 8000f12:	464b      	mov	r3, r9
 8000f14:	2000      	movs	r0, #0
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	dd0f      	ble.n	8000f3a <__aeabi_fmul+0x8a>
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	408b      	lsls	r3, r1
 8000f20:	21a6      	movs	r1, #166	@ 0xa6
 8000f22:	00c9      	lsls	r1, r1, #3
 8000f24:	420b      	tst	r3, r1
 8000f26:	d169      	bne.n	8000ffc <__aeabi_fmul+0x14c>
 8000f28:	2190      	movs	r1, #144	@ 0x90
 8000f2a:	0089      	lsls	r1, r1, #2
 8000f2c:	420b      	tst	r3, r1
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_fmul+0x82>
 8000f30:	e100      	b.n	8001134 <__aeabi_fmul+0x284>
 8000f32:	2188      	movs	r1, #136	@ 0x88
 8000f34:	4219      	tst	r1, r3
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fmul+0x8a>
 8000f38:	e0f5      	b.n	8001126 <__aeabi_fmul+0x276>
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	0409      	lsls	r1, r1, #16
 8000f3e:	0c09      	lsrs	r1, r1, #16
 8000f40:	4643      	mov	r3, r8
 8000f42:	0008      	movs	r0, r1
 8000f44:	0c35      	lsrs	r5, r6, #16
 8000f46:	0436      	lsls	r6, r6, #16
 8000f48:	0c1b      	lsrs	r3, r3, #16
 8000f4a:	0c36      	lsrs	r6, r6, #16
 8000f4c:	4370      	muls	r0, r6
 8000f4e:	4369      	muls	r1, r5
 8000f50:	435e      	muls	r6, r3
 8000f52:	435d      	muls	r5, r3
 8000f54:	1876      	adds	r6, r6, r1
 8000f56:	0c03      	lsrs	r3, r0, #16
 8000f58:	199b      	adds	r3, r3, r6
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d903      	bls.n	8000f66 <__aeabi_fmul+0xb6>
 8000f5e:	2180      	movs	r1, #128	@ 0x80
 8000f60:	0249      	lsls	r1, r1, #9
 8000f62:	468c      	mov	ip, r1
 8000f64:	4465      	add	r5, ip
 8000f66:	0400      	lsls	r0, r0, #16
 8000f68:	0419      	lsls	r1, r3, #16
 8000f6a:	0c00      	lsrs	r0, r0, #16
 8000f6c:	1809      	adds	r1, r1, r0
 8000f6e:	018e      	lsls	r6, r1, #6
 8000f70:	1e70      	subs	r0, r6, #1
 8000f72:	4186      	sbcs	r6, r0
 8000f74:	0c1b      	lsrs	r3, r3, #16
 8000f76:	0e89      	lsrs	r1, r1, #26
 8000f78:	195b      	adds	r3, r3, r5
 8000f7a:	430e      	orrs	r6, r1
 8000f7c:	019b      	lsls	r3, r3, #6
 8000f7e:	431e      	orrs	r6, r3
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	d46c      	bmi.n	800105e <__aeabi_fmul+0x1ae>
 8000f84:	0023      	movs	r3, r4
 8000f86:	337f      	adds	r3, #127	@ 0x7f
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dc00      	bgt.n	8000f8e <__aeabi_fmul+0xde>
 8000f8c:	e0b1      	b.n	80010f2 <__aeabi_fmul+0x242>
 8000f8e:	0015      	movs	r5, r2
 8000f90:	0771      	lsls	r1, r6, #29
 8000f92:	d00b      	beq.n	8000fac <__aeabi_fmul+0xfc>
 8000f94:	200f      	movs	r0, #15
 8000f96:	0021      	movs	r1, r4
 8000f98:	4030      	ands	r0, r6
 8000f9a:	2804      	cmp	r0, #4
 8000f9c:	d006      	beq.n	8000fac <__aeabi_fmul+0xfc>
 8000f9e:	3604      	adds	r6, #4
 8000fa0:	0132      	lsls	r2, r6, #4
 8000fa2:	d503      	bpl.n	8000fac <__aeabi_fmul+0xfc>
 8000fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8001160 <__aeabi_fmul+0x2b0>)
 8000fa6:	401e      	ands	r6, r3
 8000fa8:	000b      	movs	r3, r1
 8000faa:	3380      	adds	r3, #128	@ 0x80
 8000fac:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fae:	dd00      	ble.n	8000fb2 <__aeabi_fmul+0x102>
 8000fb0:	e0bd      	b.n	800112e <__aeabi_fmul+0x27e>
 8000fb2:	01b2      	lsls	r2, r6, #6
 8000fb4:	0a52      	lsrs	r2, r2, #9
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	e048      	b.n	800104c <__aeabi_fmul+0x19c>
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_fmul+0x110>
 8000fbe:	e092      	b.n	80010e6 <__aeabi_fmul+0x236>
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	3b06      	subs	r3, #6
 8000fc6:	469a      	mov	sl, r3
 8000fc8:	027b      	lsls	r3, r7, #9
 8000fca:	0a5b      	lsrs	r3, r3, #9
 8000fcc:	4698      	mov	r8, r3
 8000fce:	007b      	lsls	r3, r7, #1
 8000fd0:	24ff      	movs	r4, #255	@ 0xff
 8000fd2:	0e1b      	lsrs	r3, r3, #24
 8000fd4:	0fff      	lsrs	r7, r7, #31
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d18a      	bne.n	8000ef0 <__aeabi_fmul+0x40>
 8000fda:	4642      	mov	r2, r8
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d164      	bne.n	80010aa <__aeabi_fmul+0x1fa>
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	3201      	adds	r2, #1
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	4689      	mov	r9, r1
 8000fe8:	290a      	cmp	r1, #10
 8000fea:	dc08      	bgt.n	8000ffe <__aeabi_fmul+0x14e>
 8000fec:	407d      	eors	r5, r7
 8000fee:	2001      	movs	r0, #1
 8000ff0:	b2ea      	uxtb	r2, r5
 8000ff2:	2902      	cmp	r1, #2
 8000ff4:	dc91      	bgt.n	8000f1a <__aeabi_fmul+0x6a>
 8000ff6:	0015      	movs	r5, r2
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	e027      	b.n	800104c <__aeabi_fmul+0x19c>
 8000ffc:	0015      	movs	r5, r2
 8000ffe:	4653      	mov	r3, sl
 8001000:	2b02      	cmp	r3, #2
 8001002:	d100      	bne.n	8001006 <__aeabi_fmul+0x156>
 8001004:	e093      	b.n	800112e <__aeabi_fmul+0x27e>
 8001006:	2b03      	cmp	r3, #3
 8001008:	d01a      	beq.n	8001040 <__aeabi_fmul+0x190>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d12c      	bne.n	8001068 <__aeabi_fmul+0x1b8>
 800100e:	2300      	movs	r3, #0
 8001010:	2200      	movs	r2, #0
 8001012:	e01b      	b.n	800104c <__aeabi_fmul+0x19c>
 8001014:	4643      	mov	r3, r8
 8001016:	34ff      	adds	r4, #255	@ 0xff
 8001018:	2b00      	cmp	r3, #0
 800101a:	d055      	beq.n	80010c8 <__aeabi_fmul+0x218>
 800101c:	2103      	movs	r1, #3
 800101e:	464b      	mov	r3, r9
 8001020:	430b      	orrs	r3, r1
 8001022:	0019      	movs	r1, r3
 8001024:	2b0a      	cmp	r3, #10
 8001026:	dc00      	bgt.n	800102a <__aeabi_fmul+0x17a>
 8001028:	e092      	b.n	8001150 <__aeabi_fmul+0x2a0>
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d000      	beq.n	8001030 <__aeabi_fmul+0x180>
 800102e:	e08c      	b.n	800114a <__aeabi_fmul+0x29a>
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	03d2      	lsls	r2, r2, #15
 8001034:	4216      	tst	r6, r2
 8001036:	d003      	beq.n	8001040 <__aeabi_fmul+0x190>
 8001038:	4643      	mov	r3, r8
 800103a:	4213      	tst	r3, r2
 800103c:	d100      	bne.n	8001040 <__aeabi_fmul+0x190>
 800103e:	e07d      	b.n	800113c <__aeabi_fmul+0x28c>
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	03d2      	lsls	r2, r2, #15
 8001044:	4332      	orrs	r2, r6
 8001046:	0252      	lsls	r2, r2, #9
 8001048:	0a52      	lsrs	r2, r2, #9
 800104a:	23ff      	movs	r3, #255	@ 0xff
 800104c:	05d8      	lsls	r0, r3, #23
 800104e:	07ed      	lsls	r5, r5, #31
 8001050:	4310      	orrs	r0, r2
 8001052:	4328      	orrs	r0, r5
 8001054:	bce0      	pop	{r5, r6, r7}
 8001056:	46ba      	mov	sl, r7
 8001058:	46b1      	mov	r9, r6
 800105a:	46a8      	mov	r8, r5
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105e:	2301      	movs	r3, #1
 8001060:	0015      	movs	r5, r2
 8001062:	0871      	lsrs	r1, r6, #1
 8001064:	401e      	ands	r6, r3
 8001066:	430e      	orrs	r6, r1
 8001068:	0023      	movs	r3, r4
 800106a:	3380      	adds	r3, #128	@ 0x80
 800106c:	1c61      	adds	r1, r4, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd41      	ble.n	80010f6 <__aeabi_fmul+0x246>
 8001072:	0772      	lsls	r2, r6, #29
 8001074:	d094      	beq.n	8000fa0 <__aeabi_fmul+0xf0>
 8001076:	220f      	movs	r2, #15
 8001078:	4032      	ands	r2, r6
 800107a:	2a04      	cmp	r2, #4
 800107c:	d000      	beq.n	8001080 <__aeabi_fmul+0x1d0>
 800107e:	e78e      	b.n	8000f9e <__aeabi_fmul+0xee>
 8001080:	e78e      	b.n	8000fa0 <__aeabi_fmul+0xf0>
 8001082:	2e00      	cmp	r6, #0
 8001084:	d105      	bne.n	8001092 <__aeabi_fmul+0x1e2>
 8001086:	2304      	movs	r3, #4
 8001088:	4699      	mov	r9, r3
 800108a:	3b03      	subs	r3, #3
 800108c:	2400      	movs	r4, #0
 800108e:	469a      	mov	sl, r3
 8001090:	e726      	b.n	8000ee0 <__aeabi_fmul+0x30>
 8001092:	0030      	movs	r0, r6
 8001094:	f7ff fa42 	bl	800051c <__clzsi2>
 8001098:	2476      	movs	r4, #118	@ 0x76
 800109a:	1f43      	subs	r3, r0, #5
 800109c:	409e      	lsls	r6, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	4264      	negs	r4, r4
 80010a2:	4699      	mov	r9, r3
 80010a4:	469a      	mov	sl, r3
 80010a6:	1a24      	subs	r4, r4, r0
 80010a8:	e71a      	b.n	8000ee0 <__aeabi_fmul+0x30>
 80010aa:	4640      	mov	r0, r8
 80010ac:	f7ff fa36 	bl	800051c <__clzsi2>
 80010b0:	464b      	mov	r3, r9
 80010b2:	1a24      	subs	r4, r4, r0
 80010b4:	3c76      	subs	r4, #118	@ 0x76
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	dca1      	bgt.n	8000ffe <__aeabi_fmul+0x14e>
 80010ba:	4643      	mov	r3, r8
 80010bc:	3805      	subs	r0, #5
 80010be:	4083      	lsls	r3, r0
 80010c0:	407d      	eors	r5, r7
 80010c2:	4698      	mov	r8, r3
 80010c4:	b2ea      	uxtb	r2, r5
 80010c6:	e724      	b.n	8000f12 <__aeabi_fmul+0x62>
 80010c8:	464a      	mov	r2, r9
 80010ca:	3302      	adds	r3, #2
 80010cc:	4313      	orrs	r3, r2
 80010ce:	002a      	movs	r2, r5
 80010d0:	407a      	eors	r2, r7
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	2b0a      	cmp	r3, #10
 80010d6:	dc92      	bgt.n	8000ffe <__aeabi_fmul+0x14e>
 80010d8:	4649      	mov	r1, r9
 80010da:	0015      	movs	r5, r2
 80010dc:	2900      	cmp	r1, #0
 80010de:	d026      	beq.n	800112e <__aeabi_fmul+0x27e>
 80010e0:	4699      	mov	r9, r3
 80010e2:	2002      	movs	r0, #2
 80010e4:	e719      	b.n	8000f1a <__aeabi_fmul+0x6a>
 80010e6:	230c      	movs	r3, #12
 80010e8:	4699      	mov	r9, r3
 80010ea:	3b09      	subs	r3, #9
 80010ec:	24ff      	movs	r4, #255	@ 0xff
 80010ee:	469a      	mov	sl, r3
 80010f0:	e6f6      	b.n	8000ee0 <__aeabi_fmul+0x30>
 80010f2:	0015      	movs	r5, r2
 80010f4:	0021      	movs	r1, r4
 80010f6:	2201      	movs	r2, #1
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b1b      	cmp	r3, #27
 80010fc:	dd00      	ble.n	8001100 <__aeabi_fmul+0x250>
 80010fe:	e786      	b.n	800100e <__aeabi_fmul+0x15e>
 8001100:	319e      	adds	r1, #158	@ 0x9e
 8001102:	0032      	movs	r2, r6
 8001104:	408e      	lsls	r6, r1
 8001106:	40da      	lsrs	r2, r3
 8001108:	1e73      	subs	r3, r6, #1
 800110a:	419e      	sbcs	r6, r3
 800110c:	4332      	orrs	r2, r6
 800110e:	0753      	lsls	r3, r2, #29
 8001110:	d004      	beq.n	800111c <__aeabi_fmul+0x26c>
 8001112:	230f      	movs	r3, #15
 8001114:	4013      	ands	r3, r2
 8001116:	2b04      	cmp	r3, #4
 8001118:	d000      	beq.n	800111c <__aeabi_fmul+0x26c>
 800111a:	3204      	adds	r2, #4
 800111c:	0153      	lsls	r3, r2, #5
 800111e:	d510      	bpl.n	8001142 <__aeabi_fmul+0x292>
 8001120:	2301      	movs	r3, #1
 8001122:	2200      	movs	r2, #0
 8001124:	e792      	b.n	800104c <__aeabi_fmul+0x19c>
 8001126:	003d      	movs	r5, r7
 8001128:	4646      	mov	r6, r8
 800112a:	4682      	mov	sl, r0
 800112c:	e767      	b.n	8000ffe <__aeabi_fmul+0x14e>
 800112e:	23ff      	movs	r3, #255	@ 0xff
 8001130:	2200      	movs	r2, #0
 8001132:	e78b      	b.n	800104c <__aeabi_fmul+0x19c>
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	2500      	movs	r5, #0
 8001138:	03d2      	lsls	r2, r2, #15
 800113a:	e786      	b.n	800104a <__aeabi_fmul+0x19a>
 800113c:	003d      	movs	r5, r7
 800113e:	431a      	orrs	r2, r3
 8001140:	e783      	b.n	800104a <__aeabi_fmul+0x19a>
 8001142:	0192      	lsls	r2, r2, #6
 8001144:	2300      	movs	r3, #0
 8001146:	0a52      	lsrs	r2, r2, #9
 8001148:	e780      	b.n	800104c <__aeabi_fmul+0x19c>
 800114a:	003d      	movs	r5, r7
 800114c:	4646      	mov	r6, r8
 800114e:	e777      	b.n	8001040 <__aeabi_fmul+0x190>
 8001150:	002a      	movs	r2, r5
 8001152:	2301      	movs	r3, #1
 8001154:	407a      	eors	r2, r7
 8001156:	408b      	lsls	r3, r1
 8001158:	2003      	movs	r0, #3
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	e6e9      	b.n	8000f32 <__aeabi_fmul+0x82>
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	f7ffffff 	.word	0xf7ffffff

08001164 <__aeabi_fsub>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	4647      	mov	r7, r8
 8001168:	46ce      	mov	lr, r9
 800116a:	0243      	lsls	r3, r0, #9
 800116c:	b580      	push	{r7, lr}
 800116e:	0a5f      	lsrs	r7, r3, #9
 8001170:	099b      	lsrs	r3, r3, #6
 8001172:	0045      	lsls	r5, r0, #1
 8001174:	004a      	lsls	r2, r1, #1
 8001176:	469c      	mov	ip, r3
 8001178:	024b      	lsls	r3, r1, #9
 800117a:	0fc4      	lsrs	r4, r0, #31
 800117c:	0fce      	lsrs	r6, r1, #31
 800117e:	0e2d      	lsrs	r5, r5, #24
 8001180:	0a58      	lsrs	r0, r3, #9
 8001182:	0e12      	lsrs	r2, r2, #24
 8001184:	0999      	lsrs	r1, r3, #6
 8001186:	2aff      	cmp	r2, #255	@ 0xff
 8001188:	d06b      	beq.n	8001262 <__aeabi_fsub+0xfe>
 800118a:	2301      	movs	r3, #1
 800118c:	405e      	eors	r6, r3
 800118e:	1aab      	subs	r3, r5, r2
 8001190:	42b4      	cmp	r4, r6
 8001192:	d04b      	beq.n	800122c <__aeabi_fsub+0xc8>
 8001194:	2b00      	cmp	r3, #0
 8001196:	dc00      	bgt.n	800119a <__aeabi_fsub+0x36>
 8001198:	e0ff      	b.n	800139a <__aeabi_fsub+0x236>
 800119a:	2a00      	cmp	r2, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x3c>
 800119e:	e088      	b.n	80012b2 <__aeabi_fsub+0x14e>
 80011a0:	2dff      	cmp	r5, #255	@ 0xff
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x42>
 80011a4:	e0ef      	b.n	8001386 <__aeabi_fsub+0x222>
 80011a6:	2280      	movs	r2, #128	@ 0x80
 80011a8:	04d2      	lsls	r2, r2, #19
 80011aa:	4311      	orrs	r1, r2
 80011ac:	2001      	movs	r0, #1
 80011ae:	2b1b      	cmp	r3, #27
 80011b0:	dc08      	bgt.n	80011c4 <__aeabi_fsub+0x60>
 80011b2:	0008      	movs	r0, r1
 80011b4:	2220      	movs	r2, #32
 80011b6:	40d8      	lsrs	r0, r3
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	4099      	lsls	r1, r3
 80011bc:	000b      	movs	r3, r1
 80011be:	1e5a      	subs	r2, r3, #1
 80011c0:	4193      	sbcs	r3, r2
 80011c2:	4318      	orrs	r0, r3
 80011c4:	4663      	mov	r3, ip
 80011c6:	1a1b      	subs	r3, r3, r0
 80011c8:	469c      	mov	ip, r3
 80011ca:	4663      	mov	r3, ip
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	d400      	bmi.n	80011d2 <__aeabi_fsub+0x6e>
 80011d0:	e0cd      	b.n	800136e <__aeabi_fsub+0x20a>
 80011d2:	4663      	mov	r3, ip
 80011d4:	019f      	lsls	r7, r3, #6
 80011d6:	09bf      	lsrs	r7, r7, #6
 80011d8:	0038      	movs	r0, r7
 80011da:	f7ff f99f 	bl	800051c <__clzsi2>
 80011de:	003b      	movs	r3, r7
 80011e0:	3805      	subs	r0, #5
 80011e2:	4083      	lsls	r3, r0
 80011e4:	4285      	cmp	r5, r0
 80011e6:	dc00      	bgt.n	80011ea <__aeabi_fsub+0x86>
 80011e8:	e0a2      	b.n	8001330 <__aeabi_fsub+0x1cc>
 80011ea:	4ab7      	ldr	r2, [pc, #732]	@ (80014c8 <__aeabi_fsub+0x364>)
 80011ec:	1a2d      	subs	r5, r5, r0
 80011ee:	401a      	ands	r2, r3
 80011f0:	4694      	mov	ip, r2
 80011f2:	075a      	lsls	r2, r3, #29
 80011f4:	d100      	bne.n	80011f8 <__aeabi_fsub+0x94>
 80011f6:	e0c3      	b.n	8001380 <__aeabi_fsub+0x21c>
 80011f8:	220f      	movs	r2, #15
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d100      	bne.n	8001202 <__aeabi_fsub+0x9e>
 8001200:	e0be      	b.n	8001380 <__aeabi_fsub+0x21c>
 8001202:	2304      	movs	r3, #4
 8001204:	4698      	mov	r8, r3
 8001206:	44c4      	add	ip, r8
 8001208:	4663      	mov	r3, ip
 800120a:	015b      	lsls	r3, r3, #5
 800120c:	d400      	bmi.n	8001210 <__aeabi_fsub+0xac>
 800120e:	e0b7      	b.n	8001380 <__aeabi_fsub+0x21c>
 8001210:	1c68      	adds	r0, r5, #1
 8001212:	2dfe      	cmp	r5, #254	@ 0xfe
 8001214:	d000      	beq.n	8001218 <__aeabi_fsub+0xb4>
 8001216:	e0a5      	b.n	8001364 <__aeabi_fsub+0x200>
 8001218:	20ff      	movs	r0, #255	@ 0xff
 800121a:	2200      	movs	r2, #0
 800121c:	05c0      	lsls	r0, r0, #23
 800121e:	4310      	orrs	r0, r2
 8001220:	07e4      	lsls	r4, r4, #31
 8001222:	4320      	orrs	r0, r4
 8001224:	bcc0      	pop	{r6, r7}
 8001226:	46b9      	mov	r9, r7
 8001228:	46b0      	mov	r8, r6
 800122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800122c:	2b00      	cmp	r3, #0
 800122e:	dc00      	bgt.n	8001232 <__aeabi_fsub+0xce>
 8001230:	e1eb      	b.n	800160a <__aeabi_fsub+0x4a6>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d046      	beq.n	80012c4 <__aeabi_fsub+0x160>
 8001236:	2dff      	cmp	r5, #255	@ 0xff
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0xd8>
 800123a:	e0a4      	b.n	8001386 <__aeabi_fsub+0x222>
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	04d2      	lsls	r2, r2, #19
 8001240:	4311      	orrs	r1, r2
 8001242:	2b1b      	cmp	r3, #27
 8001244:	dc00      	bgt.n	8001248 <__aeabi_fsub+0xe4>
 8001246:	e0fb      	b.n	8001440 <__aeabi_fsub+0x2dc>
 8001248:	2305      	movs	r3, #5
 800124a:	4698      	mov	r8, r3
 800124c:	002b      	movs	r3, r5
 800124e:	44c4      	add	ip, r8
 8001250:	4662      	mov	r2, ip
 8001252:	08d7      	lsrs	r7, r2, #3
 8001254:	2bff      	cmp	r3, #255	@ 0xff
 8001256:	d100      	bne.n	800125a <__aeabi_fsub+0xf6>
 8001258:	e095      	b.n	8001386 <__aeabi_fsub+0x222>
 800125a:	027a      	lsls	r2, r7, #9
 800125c:	0a52      	lsrs	r2, r2, #9
 800125e:	b2d8      	uxtb	r0, r3
 8001260:	e7dc      	b.n	800121c <__aeabi_fsub+0xb8>
 8001262:	002b      	movs	r3, r5
 8001264:	3bff      	subs	r3, #255	@ 0xff
 8001266:	4699      	mov	r9, r3
 8001268:	2900      	cmp	r1, #0
 800126a:	d118      	bne.n	800129e <__aeabi_fsub+0x13a>
 800126c:	2301      	movs	r3, #1
 800126e:	405e      	eors	r6, r3
 8001270:	42b4      	cmp	r4, r6
 8001272:	d100      	bne.n	8001276 <__aeabi_fsub+0x112>
 8001274:	e0ca      	b.n	800140c <__aeabi_fsub+0x2a8>
 8001276:	464b      	mov	r3, r9
 8001278:	2b00      	cmp	r3, #0
 800127a:	d02d      	beq.n	80012d8 <__aeabi_fsub+0x174>
 800127c:	2d00      	cmp	r5, #0
 800127e:	d000      	beq.n	8001282 <__aeabi_fsub+0x11e>
 8001280:	e13c      	b.n	80014fc <__aeabi_fsub+0x398>
 8001282:	23ff      	movs	r3, #255	@ 0xff
 8001284:	4664      	mov	r4, ip
 8001286:	2c00      	cmp	r4, #0
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x128>
 800128a:	e15f      	b.n	800154c <__aeabi_fsub+0x3e8>
 800128c:	1e5d      	subs	r5, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d100      	bne.n	8001294 <__aeabi_fsub+0x130>
 8001292:	e174      	b.n	800157e <__aeabi_fsub+0x41a>
 8001294:	0034      	movs	r4, r6
 8001296:	2bff      	cmp	r3, #255	@ 0xff
 8001298:	d074      	beq.n	8001384 <__aeabi_fsub+0x220>
 800129a:	002b      	movs	r3, r5
 800129c:	e103      	b.n	80014a6 <__aeabi_fsub+0x342>
 800129e:	42b4      	cmp	r4, r6
 80012a0:	d100      	bne.n	80012a4 <__aeabi_fsub+0x140>
 80012a2:	e09c      	b.n	80013de <__aeabi_fsub+0x27a>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d017      	beq.n	80012d8 <__aeabi_fsub+0x174>
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d0ea      	beq.n	8001282 <__aeabi_fsub+0x11e>
 80012ac:	0007      	movs	r7, r0
 80012ae:	0034      	movs	r4, r6
 80012b0:	e06c      	b.n	800138c <__aeabi_fsub+0x228>
 80012b2:	2900      	cmp	r1, #0
 80012b4:	d0cc      	beq.n	8001250 <__aeabi_fsub+0xec>
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d02b      	beq.n	8001314 <__aeabi_fsub+0x1b0>
 80012bc:	2bff      	cmp	r3, #255	@ 0xff
 80012be:	d062      	beq.n	8001386 <__aeabi_fsub+0x222>
 80012c0:	0013      	movs	r3, r2
 80012c2:	e773      	b.n	80011ac <__aeabi_fsub+0x48>
 80012c4:	2900      	cmp	r1, #0
 80012c6:	d0c3      	beq.n	8001250 <__aeabi_fsub+0xec>
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d100      	bne.n	80012d0 <__aeabi_fsub+0x16c>
 80012ce:	e11e      	b.n	800150e <__aeabi_fsub+0x3aa>
 80012d0:	2bff      	cmp	r3, #255	@ 0xff
 80012d2:	d058      	beq.n	8001386 <__aeabi_fsub+0x222>
 80012d4:	0013      	movs	r3, r2
 80012d6:	e7b4      	b.n	8001242 <__aeabi_fsub+0xde>
 80012d8:	22fe      	movs	r2, #254	@ 0xfe
 80012da:	1c6b      	adds	r3, r5, #1
 80012dc:	421a      	tst	r2, r3
 80012de:	d10d      	bne.n	80012fc <__aeabi_fsub+0x198>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d060      	beq.n	80013a6 <__aeabi_fsub+0x242>
 80012e4:	4663      	mov	r3, ip
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d000      	beq.n	80012ec <__aeabi_fsub+0x188>
 80012ea:	e120      	b.n	800152e <__aeabi_fsub+0x3ca>
 80012ec:	2900      	cmp	r1, #0
 80012ee:	d000      	beq.n	80012f2 <__aeabi_fsub+0x18e>
 80012f0:	e128      	b.n	8001544 <__aeabi_fsub+0x3e0>
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	2400      	movs	r4, #0
 80012f6:	20ff      	movs	r0, #255	@ 0xff
 80012f8:	03d2      	lsls	r2, r2, #15
 80012fa:	e78f      	b.n	800121c <__aeabi_fsub+0xb8>
 80012fc:	4663      	mov	r3, ip
 80012fe:	1a5f      	subs	r7, r3, r1
 8001300:	017b      	lsls	r3, r7, #5
 8001302:	d500      	bpl.n	8001306 <__aeabi_fsub+0x1a2>
 8001304:	e0fe      	b.n	8001504 <__aeabi_fsub+0x3a0>
 8001306:	2f00      	cmp	r7, #0
 8001308:	d000      	beq.n	800130c <__aeabi_fsub+0x1a8>
 800130a:	e765      	b.n	80011d8 <__aeabi_fsub+0x74>
 800130c:	2400      	movs	r4, #0
 800130e:	2000      	movs	r0, #0
 8001310:	2200      	movs	r2, #0
 8001312:	e783      	b.n	800121c <__aeabi_fsub+0xb8>
 8001314:	4663      	mov	r3, ip
 8001316:	1a59      	subs	r1, r3, r1
 8001318:	014b      	lsls	r3, r1, #5
 800131a:	d400      	bmi.n	800131e <__aeabi_fsub+0x1ba>
 800131c:	e119      	b.n	8001552 <__aeabi_fsub+0x3ee>
 800131e:	018f      	lsls	r7, r1, #6
 8001320:	09bf      	lsrs	r7, r7, #6
 8001322:	0038      	movs	r0, r7
 8001324:	f7ff f8fa 	bl	800051c <__clzsi2>
 8001328:	003b      	movs	r3, r7
 800132a:	3805      	subs	r0, #5
 800132c:	4083      	lsls	r3, r0
 800132e:	2501      	movs	r5, #1
 8001330:	2220      	movs	r2, #32
 8001332:	1b40      	subs	r0, r0, r5
 8001334:	3001      	adds	r0, #1
 8001336:	1a12      	subs	r2, r2, r0
 8001338:	0019      	movs	r1, r3
 800133a:	4093      	lsls	r3, r2
 800133c:	40c1      	lsrs	r1, r0
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	4193      	sbcs	r3, r2
 8001342:	4319      	orrs	r1, r3
 8001344:	468c      	mov	ip, r1
 8001346:	1e0b      	subs	r3, r1, #0
 8001348:	d0e1      	beq.n	800130e <__aeabi_fsub+0x1aa>
 800134a:	075b      	lsls	r3, r3, #29
 800134c:	d100      	bne.n	8001350 <__aeabi_fsub+0x1ec>
 800134e:	e152      	b.n	80015f6 <__aeabi_fsub+0x492>
 8001350:	230f      	movs	r3, #15
 8001352:	2500      	movs	r5, #0
 8001354:	400b      	ands	r3, r1
 8001356:	2b04      	cmp	r3, #4
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x1f8>
 800135a:	e752      	b.n	8001202 <__aeabi_fsub+0x9e>
 800135c:	2001      	movs	r0, #1
 800135e:	014a      	lsls	r2, r1, #5
 8001360:	d400      	bmi.n	8001364 <__aeabi_fsub+0x200>
 8001362:	e092      	b.n	800148a <__aeabi_fsub+0x326>
 8001364:	b2c0      	uxtb	r0, r0
 8001366:	4663      	mov	r3, ip
 8001368:	019a      	lsls	r2, r3, #6
 800136a:	0a52      	lsrs	r2, r2, #9
 800136c:	e756      	b.n	800121c <__aeabi_fsub+0xb8>
 800136e:	4663      	mov	r3, ip
 8001370:	075b      	lsls	r3, r3, #29
 8001372:	d005      	beq.n	8001380 <__aeabi_fsub+0x21c>
 8001374:	230f      	movs	r3, #15
 8001376:	4662      	mov	r2, ip
 8001378:	4013      	ands	r3, r2
 800137a:	2b04      	cmp	r3, #4
 800137c:	d000      	beq.n	8001380 <__aeabi_fsub+0x21c>
 800137e:	e740      	b.n	8001202 <__aeabi_fsub+0x9e>
 8001380:	002b      	movs	r3, r5
 8001382:	e765      	b.n	8001250 <__aeabi_fsub+0xec>
 8001384:	0007      	movs	r7, r0
 8001386:	2f00      	cmp	r7, #0
 8001388:	d100      	bne.n	800138c <__aeabi_fsub+0x228>
 800138a:	e745      	b.n	8001218 <__aeabi_fsub+0xb4>
 800138c:	2280      	movs	r2, #128	@ 0x80
 800138e:	03d2      	lsls	r2, r2, #15
 8001390:	433a      	orrs	r2, r7
 8001392:	0252      	lsls	r2, r2, #9
 8001394:	20ff      	movs	r0, #255	@ 0xff
 8001396:	0a52      	lsrs	r2, r2, #9
 8001398:	e740      	b.n	800121c <__aeabi_fsub+0xb8>
 800139a:	2b00      	cmp	r3, #0
 800139c:	d179      	bne.n	8001492 <__aeabi_fsub+0x32e>
 800139e:	22fe      	movs	r2, #254	@ 0xfe
 80013a0:	1c6b      	adds	r3, r5, #1
 80013a2:	421a      	tst	r2, r3
 80013a4:	d1aa      	bne.n	80012fc <__aeabi_fsub+0x198>
 80013a6:	4663      	mov	r3, ip
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d100      	bne.n	80013ae <__aeabi_fsub+0x24a>
 80013ac:	e0f5      	b.n	800159a <__aeabi_fsub+0x436>
 80013ae:	2900      	cmp	r1, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_fsub+0x250>
 80013b2:	e0d1      	b.n	8001558 <__aeabi_fsub+0x3f4>
 80013b4:	1a5f      	subs	r7, r3, r1
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	04db      	lsls	r3, r3, #19
 80013ba:	421f      	tst	r7, r3
 80013bc:	d100      	bne.n	80013c0 <__aeabi_fsub+0x25c>
 80013be:	e10e      	b.n	80015de <__aeabi_fsub+0x47a>
 80013c0:	4662      	mov	r2, ip
 80013c2:	2401      	movs	r4, #1
 80013c4:	1a8a      	subs	r2, r1, r2
 80013c6:	4694      	mov	ip, r2
 80013c8:	2000      	movs	r0, #0
 80013ca:	4034      	ands	r4, r6
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_fsub+0x26e>
 80013d0:	e724      	b.n	800121c <__aeabi_fsub+0xb8>
 80013d2:	2001      	movs	r0, #1
 80013d4:	421a      	tst	r2, r3
 80013d6:	d1c6      	bne.n	8001366 <__aeabi_fsub+0x202>
 80013d8:	2300      	movs	r3, #0
 80013da:	08d7      	lsrs	r7, r2, #3
 80013dc:	e73d      	b.n	800125a <__aeabi_fsub+0xf6>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d017      	beq.n	8001412 <__aeabi_fsub+0x2ae>
 80013e2:	2d00      	cmp	r5, #0
 80013e4:	d000      	beq.n	80013e8 <__aeabi_fsub+0x284>
 80013e6:	e0af      	b.n	8001548 <__aeabi_fsub+0x3e4>
 80013e8:	23ff      	movs	r3, #255	@ 0xff
 80013ea:	4665      	mov	r5, ip
 80013ec:	2d00      	cmp	r5, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_fsub+0x28e>
 80013f0:	e0ad      	b.n	800154e <__aeabi_fsub+0x3ea>
 80013f2:	1e5e      	subs	r6, r3, #1
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d100      	bne.n	80013fa <__aeabi_fsub+0x296>
 80013f8:	e089      	b.n	800150e <__aeabi_fsub+0x3aa>
 80013fa:	2bff      	cmp	r3, #255	@ 0xff
 80013fc:	d0c2      	beq.n	8001384 <__aeabi_fsub+0x220>
 80013fe:	2e1b      	cmp	r6, #27
 8001400:	dc00      	bgt.n	8001404 <__aeabi_fsub+0x2a0>
 8001402:	e0ab      	b.n	800155c <__aeabi_fsub+0x3f8>
 8001404:	1d4b      	adds	r3, r1, #5
 8001406:	469c      	mov	ip, r3
 8001408:	0013      	movs	r3, r2
 800140a:	e721      	b.n	8001250 <__aeabi_fsub+0xec>
 800140c:	464b      	mov	r3, r9
 800140e:	2b00      	cmp	r3, #0
 8001410:	d170      	bne.n	80014f4 <__aeabi_fsub+0x390>
 8001412:	22fe      	movs	r2, #254	@ 0xfe
 8001414:	1c6b      	adds	r3, r5, #1
 8001416:	421a      	tst	r2, r3
 8001418:	d15e      	bne.n	80014d8 <__aeabi_fsub+0x374>
 800141a:	2d00      	cmp	r5, #0
 800141c:	d000      	beq.n	8001420 <__aeabi_fsub+0x2bc>
 800141e:	e0c3      	b.n	80015a8 <__aeabi_fsub+0x444>
 8001420:	4663      	mov	r3, ip
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_fsub+0x2c4>
 8001426:	e0d0      	b.n	80015ca <__aeabi_fsub+0x466>
 8001428:	2900      	cmp	r1, #0
 800142a:	d100      	bne.n	800142e <__aeabi_fsub+0x2ca>
 800142c:	e094      	b.n	8001558 <__aeabi_fsub+0x3f4>
 800142e:	000a      	movs	r2, r1
 8001430:	4462      	add	r2, ip
 8001432:	0153      	lsls	r3, r2, #5
 8001434:	d400      	bmi.n	8001438 <__aeabi_fsub+0x2d4>
 8001436:	e0d8      	b.n	80015ea <__aeabi_fsub+0x486>
 8001438:	0192      	lsls	r2, r2, #6
 800143a:	2001      	movs	r0, #1
 800143c:	0a52      	lsrs	r2, r2, #9
 800143e:	e6ed      	b.n	800121c <__aeabi_fsub+0xb8>
 8001440:	0008      	movs	r0, r1
 8001442:	2220      	movs	r2, #32
 8001444:	40d8      	lsrs	r0, r3
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4099      	lsls	r1, r3
 800144a:	000b      	movs	r3, r1
 800144c:	1e5a      	subs	r2, r3, #1
 800144e:	4193      	sbcs	r3, r2
 8001450:	4303      	orrs	r3, r0
 8001452:	449c      	add	ip, r3
 8001454:	4663      	mov	r3, ip
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	d589      	bpl.n	800136e <__aeabi_fsub+0x20a>
 800145a:	3501      	adds	r5, #1
 800145c:	2dff      	cmp	r5, #255	@ 0xff
 800145e:	d100      	bne.n	8001462 <__aeabi_fsub+0x2fe>
 8001460:	e6da      	b.n	8001218 <__aeabi_fsub+0xb4>
 8001462:	4662      	mov	r2, ip
 8001464:	2301      	movs	r3, #1
 8001466:	4919      	ldr	r1, [pc, #100]	@ (80014cc <__aeabi_fsub+0x368>)
 8001468:	4013      	ands	r3, r2
 800146a:	0852      	lsrs	r2, r2, #1
 800146c:	400a      	ands	r2, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	4694      	mov	ip, r2
 8001474:	075b      	lsls	r3, r3, #29
 8001476:	d004      	beq.n	8001482 <__aeabi_fsub+0x31e>
 8001478:	230f      	movs	r3, #15
 800147a:	4013      	ands	r3, r2
 800147c:	2b04      	cmp	r3, #4
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x31e>
 8001480:	e6bf      	b.n	8001202 <__aeabi_fsub+0x9e>
 8001482:	4663      	mov	r3, ip
 8001484:	015b      	lsls	r3, r3, #5
 8001486:	d500      	bpl.n	800148a <__aeabi_fsub+0x326>
 8001488:	e6c2      	b.n	8001210 <__aeabi_fsub+0xac>
 800148a:	4663      	mov	r3, ip
 800148c:	08df      	lsrs	r7, r3, #3
 800148e:	002b      	movs	r3, r5
 8001490:	e6e3      	b.n	800125a <__aeabi_fsub+0xf6>
 8001492:	1b53      	subs	r3, r2, r5
 8001494:	2d00      	cmp	r5, #0
 8001496:	d100      	bne.n	800149a <__aeabi_fsub+0x336>
 8001498:	e6f4      	b.n	8001284 <__aeabi_fsub+0x120>
 800149a:	2080      	movs	r0, #128	@ 0x80
 800149c:	4664      	mov	r4, ip
 800149e:	04c0      	lsls	r0, r0, #19
 80014a0:	4304      	orrs	r4, r0
 80014a2:	46a4      	mov	ip, r4
 80014a4:	0034      	movs	r4, r6
 80014a6:	2001      	movs	r0, #1
 80014a8:	2b1b      	cmp	r3, #27
 80014aa:	dc09      	bgt.n	80014c0 <__aeabi_fsub+0x35c>
 80014ac:	2520      	movs	r5, #32
 80014ae:	4660      	mov	r0, ip
 80014b0:	40d8      	lsrs	r0, r3
 80014b2:	1aeb      	subs	r3, r5, r3
 80014b4:	4665      	mov	r5, ip
 80014b6:	409d      	lsls	r5, r3
 80014b8:	002b      	movs	r3, r5
 80014ba:	1e5d      	subs	r5, r3, #1
 80014bc:	41ab      	sbcs	r3, r5
 80014be:	4318      	orrs	r0, r3
 80014c0:	1a0b      	subs	r3, r1, r0
 80014c2:	469c      	mov	ip, r3
 80014c4:	0015      	movs	r5, r2
 80014c6:	e680      	b.n	80011ca <__aeabi_fsub+0x66>
 80014c8:	fbffffff 	.word	0xfbffffff
 80014cc:	7dffffff 	.word	0x7dffffff
 80014d0:	22fe      	movs	r2, #254	@ 0xfe
 80014d2:	1c6b      	adds	r3, r5, #1
 80014d4:	4213      	tst	r3, r2
 80014d6:	d0a3      	beq.n	8001420 <__aeabi_fsub+0x2bc>
 80014d8:	2bff      	cmp	r3, #255	@ 0xff
 80014da:	d100      	bne.n	80014de <__aeabi_fsub+0x37a>
 80014dc:	e69c      	b.n	8001218 <__aeabi_fsub+0xb4>
 80014de:	4461      	add	r1, ip
 80014e0:	0849      	lsrs	r1, r1, #1
 80014e2:	074a      	lsls	r2, r1, #29
 80014e4:	d049      	beq.n	800157a <__aeabi_fsub+0x416>
 80014e6:	220f      	movs	r2, #15
 80014e8:	400a      	ands	r2, r1
 80014ea:	2a04      	cmp	r2, #4
 80014ec:	d045      	beq.n	800157a <__aeabi_fsub+0x416>
 80014ee:	1d0a      	adds	r2, r1, #4
 80014f0:	4694      	mov	ip, r2
 80014f2:	e6ad      	b.n	8001250 <__aeabi_fsub+0xec>
 80014f4:	2d00      	cmp	r5, #0
 80014f6:	d100      	bne.n	80014fa <__aeabi_fsub+0x396>
 80014f8:	e776      	b.n	80013e8 <__aeabi_fsub+0x284>
 80014fa:	e68d      	b.n	8001218 <__aeabi_fsub+0xb4>
 80014fc:	0034      	movs	r4, r6
 80014fe:	20ff      	movs	r0, #255	@ 0xff
 8001500:	2200      	movs	r2, #0
 8001502:	e68b      	b.n	800121c <__aeabi_fsub+0xb8>
 8001504:	4663      	mov	r3, ip
 8001506:	2401      	movs	r4, #1
 8001508:	1acf      	subs	r7, r1, r3
 800150a:	4034      	ands	r4, r6
 800150c:	e664      	b.n	80011d8 <__aeabi_fsub+0x74>
 800150e:	4461      	add	r1, ip
 8001510:	014b      	lsls	r3, r1, #5
 8001512:	d56d      	bpl.n	80015f0 <__aeabi_fsub+0x48c>
 8001514:	0848      	lsrs	r0, r1, #1
 8001516:	4944      	ldr	r1, [pc, #272]	@ (8001628 <__aeabi_fsub+0x4c4>)
 8001518:	4001      	ands	r1, r0
 800151a:	0743      	lsls	r3, r0, #29
 800151c:	d02c      	beq.n	8001578 <__aeabi_fsub+0x414>
 800151e:	230f      	movs	r3, #15
 8001520:	4003      	ands	r3, r0
 8001522:	2b04      	cmp	r3, #4
 8001524:	d028      	beq.n	8001578 <__aeabi_fsub+0x414>
 8001526:	1d0b      	adds	r3, r1, #4
 8001528:	469c      	mov	ip, r3
 800152a:	2302      	movs	r3, #2
 800152c:	e690      	b.n	8001250 <__aeabi_fsub+0xec>
 800152e:	2900      	cmp	r1, #0
 8001530:	d100      	bne.n	8001534 <__aeabi_fsub+0x3d0>
 8001532:	e72b      	b.n	800138c <__aeabi_fsub+0x228>
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	03db      	lsls	r3, r3, #15
 8001538:	429f      	cmp	r7, r3
 800153a:	d200      	bcs.n	800153e <__aeabi_fsub+0x3da>
 800153c:	e726      	b.n	800138c <__aeabi_fsub+0x228>
 800153e:	4298      	cmp	r0, r3
 8001540:	d300      	bcc.n	8001544 <__aeabi_fsub+0x3e0>
 8001542:	e723      	b.n	800138c <__aeabi_fsub+0x228>
 8001544:	2401      	movs	r4, #1
 8001546:	4034      	ands	r4, r6
 8001548:	0007      	movs	r7, r0
 800154a:	e71f      	b.n	800138c <__aeabi_fsub+0x228>
 800154c:	0034      	movs	r4, r6
 800154e:	468c      	mov	ip, r1
 8001550:	e67e      	b.n	8001250 <__aeabi_fsub+0xec>
 8001552:	2301      	movs	r3, #1
 8001554:	08cf      	lsrs	r7, r1, #3
 8001556:	e680      	b.n	800125a <__aeabi_fsub+0xf6>
 8001558:	2300      	movs	r3, #0
 800155a:	e67e      	b.n	800125a <__aeabi_fsub+0xf6>
 800155c:	2020      	movs	r0, #32
 800155e:	4665      	mov	r5, ip
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	4085      	lsls	r5, r0
 8001564:	4663      	mov	r3, ip
 8001566:	0028      	movs	r0, r5
 8001568:	40f3      	lsrs	r3, r6
 800156a:	1e45      	subs	r5, r0, #1
 800156c:	41a8      	sbcs	r0, r5
 800156e:	4303      	orrs	r3, r0
 8001570:	469c      	mov	ip, r3
 8001572:	0015      	movs	r5, r2
 8001574:	448c      	add	ip, r1
 8001576:	e76d      	b.n	8001454 <__aeabi_fsub+0x2f0>
 8001578:	2302      	movs	r3, #2
 800157a:	08cf      	lsrs	r7, r1, #3
 800157c:	e66d      	b.n	800125a <__aeabi_fsub+0xf6>
 800157e:	1b0f      	subs	r7, r1, r4
 8001580:	017b      	lsls	r3, r7, #5
 8001582:	d528      	bpl.n	80015d6 <__aeabi_fsub+0x472>
 8001584:	01bf      	lsls	r7, r7, #6
 8001586:	09bf      	lsrs	r7, r7, #6
 8001588:	0038      	movs	r0, r7
 800158a:	f7fe ffc7 	bl	800051c <__clzsi2>
 800158e:	003b      	movs	r3, r7
 8001590:	3805      	subs	r0, #5
 8001592:	4083      	lsls	r3, r0
 8001594:	0034      	movs	r4, r6
 8001596:	2501      	movs	r5, #1
 8001598:	e6ca      	b.n	8001330 <__aeabi_fsub+0x1cc>
 800159a:	2900      	cmp	r1, #0
 800159c:	d100      	bne.n	80015a0 <__aeabi_fsub+0x43c>
 800159e:	e6b5      	b.n	800130c <__aeabi_fsub+0x1a8>
 80015a0:	2401      	movs	r4, #1
 80015a2:	0007      	movs	r7, r0
 80015a4:	4034      	ands	r4, r6
 80015a6:	e658      	b.n	800125a <__aeabi_fsub+0xf6>
 80015a8:	4663      	mov	r3, ip
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d100      	bne.n	80015b0 <__aeabi_fsub+0x44c>
 80015ae:	e6e9      	b.n	8001384 <__aeabi_fsub+0x220>
 80015b0:	2900      	cmp	r1, #0
 80015b2:	d100      	bne.n	80015b6 <__aeabi_fsub+0x452>
 80015b4:	e6ea      	b.n	800138c <__aeabi_fsub+0x228>
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	03db      	lsls	r3, r3, #15
 80015ba:	429f      	cmp	r7, r3
 80015bc:	d200      	bcs.n	80015c0 <__aeabi_fsub+0x45c>
 80015be:	e6e5      	b.n	800138c <__aeabi_fsub+0x228>
 80015c0:	4298      	cmp	r0, r3
 80015c2:	d300      	bcc.n	80015c6 <__aeabi_fsub+0x462>
 80015c4:	e6e2      	b.n	800138c <__aeabi_fsub+0x228>
 80015c6:	0007      	movs	r7, r0
 80015c8:	e6e0      	b.n	800138c <__aeabi_fsub+0x228>
 80015ca:	2900      	cmp	r1, #0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_fsub+0x46c>
 80015ce:	e69e      	b.n	800130e <__aeabi_fsub+0x1aa>
 80015d0:	2300      	movs	r3, #0
 80015d2:	08cf      	lsrs	r7, r1, #3
 80015d4:	e641      	b.n	800125a <__aeabi_fsub+0xf6>
 80015d6:	0034      	movs	r4, r6
 80015d8:	2301      	movs	r3, #1
 80015da:	08ff      	lsrs	r7, r7, #3
 80015dc:	e63d      	b.n	800125a <__aeabi_fsub+0xf6>
 80015de:	2f00      	cmp	r7, #0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_fsub+0x480>
 80015e2:	e693      	b.n	800130c <__aeabi_fsub+0x1a8>
 80015e4:	2300      	movs	r3, #0
 80015e6:	08ff      	lsrs	r7, r7, #3
 80015e8:	e637      	b.n	800125a <__aeabi_fsub+0xf6>
 80015ea:	2300      	movs	r3, #0
 80015ec:	08d7      	lsrs	r7, r2, #3
 80015ee:	e634      	b.n	800125a <__aeabi_fsub+0xf6>
 80015f0:	2301      	movs	r3, #1
 80015f2:	08cf      	lsrs	r7, r1, #3
 80015f4:	e631      	b.n	800125a <__aeabi_fsub+0xf6>
 80015f6:	2280      	movs	r2, #128	@ 0x80
 80015f8:	000b      	movs	r3, r1
 80015fa:	04d2      	lsls	r2, r2, #19
 80015fc:	2001      	movs	r0, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	4211      	tst	r1, r2
 8001602:	d000      	beq.n	8001606 <__aeabi_fsub+0x4a2>
 8001604:	e6ae      	b.n	8001364 <__aeabi_fsub+0x200>
 8001606:	08cf      	lsrs	r7, r1, #3
 8001608:	e627      	b.n	800125a <__aeabi_fsub+0xf6>
 800160a:	2b00      	cmp	r3, #0
 800160c:	d100      	bne.n	8001610 <__aeabi_fsub+0x4ac>
 800160e:	e75f      	b.n	80014d0 <__aeabi_fsub+0x36c>
 8001610:	1b56      	subs	r6, r2, r5
 8001612:	2d00      	cmp	r5, #0
 8001614:	d101      	bne.n	800161a <__aeabi_fsub+0x4b6>
 8001616:	0033      	movs	r3, r6
 8001618:	e6e7      	b.n	80013ea <__aeabi_fsub+0x286>
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	4660      	mov	r0, ip
 800161e:	04db      	lsls	r3, r3, #19
 8001620:	4318      	orrs	r0, r3
 8001622:	4684      	mov	ip, r0
 8001624:	e6eb      	b.n	80013fe <__aeabi_fsub+0x29a>
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	7dffffff 	.word	0x7dffffff

0800162c <__aeabi_fcmpun>:
 800162c:	0243      	lsls	r3, r0, #9
 800162e:	024a      	lsls	r2, r1, #9
 8001630:	0040      	lsls	r0, r0, #1
 8001632:	0049      	lsls	r1, r1, #1
 8001634:	0a5b      	lsrs	r3, r3, #9
 8001636:	0a52      	lsrs	r2, r2, #9
 8001638:	0e09      	lsrs	r1, r1, #24
 800163a:	0e00      	lsrs	r0, r0, #24
 800163c:	28ff      	cmp	r0, #255	@ 0xff
 800163e:	d006      	beq.n	800164e <__aeabi_fcmpun+0x22>
 8001640:	2000      	movs	r0, #0
 8001642:	29ff      	cmp	r1, #255	@ 0xff
 8001644:	d102      	bne.n	800164c <__aeabi_fcmpun+0x20>
 8001646:	1e53      	subs	r3, r2, #1
 8001648:	419a      	sbcs	r2, r3
 800164a:	0010      	movs	r0, r2
 800164c:	4770      	bx	lr
 800164e:	38fe      	subs	r0, #254	@ 0xfe
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1fb      	bne.n	800164c <__aeabi_fcmpun+0x20>
 8001654:	e7f4      	b.n	8001640 <__aeabi_fcmpun+0x14>
 8001656:	46c0      	nop			@ (mov r8, r8)

08001658 <__aeabi_f2iz>:
 8001658:	0241      	lsls	r1, r0, #9
 800165a:	0042      	lsls	r2, r0, #1
 800165c:	0fc3      	lsrs	r3, r0, #31
 800165e:	0a49      	lsrs	r1, r1, #9
 8001660:	2000      	movs	r0, #0
 8001662:	0e12      	lsrs	r2, r2, #24
 8001664:	2a7e      	cmp	r2, #126	@ 0x7e
 8001666:	dd03      	ble.n	8001670 <__aeabi_f2iz+0x18>
 8001668:	2a9d      	cmp	r2, #157	@ 0x9d
 800166a:	dd02      	ble.n	8001672 <__aeabi_f2iz+0x1a>
 800166c:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <__aeabi_f2iz+0x3c>)
 800166e:	1898      	adds	r0, r3, r2
 8001670:	4770      	bx	lr
 8001672:	2080      	movs	r0, #128	@ 0x80
 8001674:	0400      	lsls	r0, r0, #16
 8001676:	4301      	orrs	r1, r0
 8001678:	2a95      	cmp	r2, #149	@ 0x95
 800167a:	dc07      	bgt.n	800168c <__aeabi_f2iz+0x34>
 800167c:	2096      	movs	r0, #150	@ 0x96
 800167e:	1a82      	subs	r2, r0, r2
 8001680:	40d1      	lsrs	r1, r2
 8001682:	4248      	negs	r0, r1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f3      	bne.n	8001670 <__aeabi_f2iz+0x18>
 8001688:	0008      	movs	r0, r1
 800168a:	e7f1      	b.n	8001670 <__aeabi_f2iz+0x18>
 800168c:	3a96      	subs	r2, #150	@ 0x96
 800168e:	4091      	lsls	r1, r2
 8001690:	e7f7      	b.n	8001682 <__aeabi_f2iz+0x2a>
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	7fffffff 	.word	0x7fffffff

08001698 <__aeabi_i2f>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	2800      	cmp	r0, #0
 800169c:	d012      	beq.n	80016c4 <__aeabi_i2f+0x2c>
 800169e:	17c3      	asrs	r3, r0, #31
 80016a0:	18c5      	adds	r5, r0, r3
 80016a2:	405d      	eors	r5, r3
 80016a4:	0fc4      	lsrs	r4, r0, #31
 80016a6:	0028      	movs	r0, r5
 80016a8:	f7fe ff38 	bl	800051c <__clzsi2>
 80016ac:	239e      	movs	r3, #158	@ 0x9e
 80016ae:	1a1b      	subs	r3, r3, r0
 80016b0:	2b96      	cmp	r3, #150	@ 0x96
 80016b2:	dc0f      	bgt.n	80016d4 <__aeabi_i2f+0x3c>
 80016b4:	2808      	cmp	r0, #8
 80016b6:	d038      	beq.n	800172a <__aeabi_i2f+0x92>
 80016b8:	3808      	subs	r0, #8
 80016ba:	4085      	lsls	r5, r0
 80016bc:	026d      	lsls	r5, r5, #9
 80016be:	0a6d      	lsrs	r5, r5, #9
 80016c0:	b2d8      	uxtb	r0, r3
 80016c2:	e002      	b.n	80016ca <__aeabi_i2f+0x32>
 80016c4:	2400      	movs	r4, #0
 80016c6:	2000      	movs	r0, #0
 80016c8:	2500      	movs	r5, #0
 80016ca:	05c0      	lsls	r0, r0, #23
 80016cc:	4328      	orrs	r0, r5
 80016ce:	07e4      	lsls	r4, r4, #31
 80016d0:	4320      	orrs	r0, r4
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
 80016d4:	2b99      	cmp	r3, #153	@ 0x99
 80016d6:	dc14      	bgt.n	8001702 <__aeabi_i2f+0x6a>
 80016d8:	1f42      	subs	r2, r0, #5
 80016da:	4095      	lsls	r5, r2
 80016dc:	002a      	movs	r2, r5
 80016de:	4915      	ldr	r1, [pc, #84]	@ (8001734 <__aeabi_i2f+0x9c>)
 80016e0:	4011      	ands	r1, r2
 80016e2:	0755      	lsls	r5, r2, #29
 80016e4:	d01c      	beq.n	8001720 <__aeabi_i2f+0x88>
 80016e6:	250f      	movs	r5, #15
 80016e8:	402a      	ands	r2, r5
 80016ea:	2a04      	cmp	r2, #4
 80016ec:	d018      	beq.n	8001720 <__aeabi_i2f+0x88>
 80016ee:	3104      	adds	r1, #4
 80016f0:	08ca      	lsrs	r2, r1, #3
 80016f2:	0149      	lsls	r1, r1, #5
 80016f4:	d515      	bpl.n	8001722 <__aeabi_i2f+0x8a>
 80016f6:	239f      	movs	r3, #159	@ 0x9f
 80016f8:	0252      	lsls	r2, r2, #9
 80016fa:	1a18      	subs	r0, r3, r0
 80016fc:	0a55      	lsrs	r5, r2, #9
 80016fe:	b2c0      	uxtb	r0, r0
 8001700:	e7e3      	b.n	80016ca <__aeabi_i2f+0x32>
 8001702:	2205      	movs	r2, #5
 8001704:	0029      	movs	r1, r5
 8001706:	1a12      	subs	r2, r2, r0
 8001708:	40d1      	lsrs	r1, r2
 800170a:	0002      	movs	r2, r0
 800170c:	321b      	adds	r2, #27
 800170e:	4095      	lsls	r5, r2
 8001710:	002a      	movs	r2, r5
 8001712:	1e55      	subs	r5, r2, #1
 8001714:	41aa      	sbcs	r2, r5
 8001716:	430a      	orrs	r2, r1
 8001718:	4906      	ldr	r1, [pc, #24]	@ (8001734 <__aeabi_i2f+0x9c>)
 800171a:	4011      	ands	r1, r2
 800171c:	0755      	lsls	r5, r2, #29
 800171e:	d1e2      	bne.n	80016e6 <__aeabi_i2f+0x4e>
 8001720:	08ca      	lsrs	r2, r1, #3
 8001722:	0252      	lsls	r2, r2, #9
 8001724:	0a55      	lsrs	r5, r2, #9
 8001726:	b2d8      	uxtb	r0, r3
 8001728:	e7cf      	b.n	80016ca <__aeabi_i2f+0x32>
 800172a:	026d      	lsls	r5, r5, #9
 800172c:	0a6d      	lsrs	r5, r5, #9
 800172e:	308e      	adds	r0, #142	@ 0x8e
 8001730:	e7cb      	b.n	80016ca <__aeabi_i2f+0x32>
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	fbffffff 	.word	0xfbffffff

08001738 <__aeabi_ui2f>:
 8001738:	b510      	push	{r4, lr}
 800173a:	1e04      	subs	r4, r0, #0
 800173c:	d00d      	beq.n	800175a <__aeabi_ui2f+0x22>
 800173e:	f7fe feed 	bl	800051c <__clzsi2>
 8001742:	239e      	movs	r3, #158	@ 0x9e
 8001744:	1a1b      	subs	r3, r3, r0
 8001746:	2b96      	cmp	r3, #150	@ 0x96
 8001748:	dc0c      	bgt.n	8001764 <__aeabi_ui2f+0x2c>
 800174a:	2808      	cmp	r0, #8
 800174c:	d034      	beq.n	80017b8 <__aeabi_ui2f+0x80>
 800174e:	3808      	subs	r0, #8
 8001750:	4084      	lsls	r4, r0
 8001752:	0264      	lsls	r4, r4, #9
 8001754:	0a64      	lsrs	r4, r4, #9
 8001756:	b2d8      	uxtb	r0, r3
 8001758:	e001      	b.n	800175e <__aeabi_ui2f+0x26>
 800175a:	2000      	movs	r0, #0
 800175c:	2400      	movs	r4, #0
 800175e:	05c0      	lsls	r0, r0, #23
 8001760:	4320      	orrs	r0, r4
 8001762:	bd10      	pop	{r4, pc}
 8001764:	2b99      	cmp	r3, #153	@ 0x99
 8001766:	dc13      	bgt.n	8001790 <__aeabi_ui2f+0x58>
 8001768:	1f42      	subs	r2, r0, #5
 800176a:	4094      	lsls	r4, r2
 800176c:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <__aeabi_ui2f+0x88>)
 800176e:	4022      	ands	r2, r4
 8001770:	0761      	lsls	r1, r4, #29
 8001772:	d01c      	beq.n	80017ae <__aeabi_ui2f+0x76>
 8001774:	210f      	movs	r1, #15
 8001776:	4021      	ands	r1, r4
 8001778:	2904      	cmp	r1, #4
 800177a:	d018      	beq.n	80017ae <__aeabi_ui2f+0x76>
 800177c:	3204      	adds	r2, #4
 800177e:	08d4      	lsrs	r4, r2, #3
 8001780:	0152      	lsls	r2, r2, #5
 8001782:	d515      	bpl.n	80017b0 <__aeabi_ui2f+0x78>
 8001784:	239f      	movs	r3, #159	@ 0x9f
 8001786:	0264      	lsls	r4, r4, #9
 8001788:	1a18      	subs	r0, r3, r0
 800178a:	0a64      	lsrs	r4, r4, #9
 800178c:	b2c0      	uxtb	r0, r0
 800178e:	e7e6      	b.n	800175e <__aeabi_ui2f+0x26>
 8001790:	0002      	movs	r2, r0
 8001792:	0021      	movs	r1, r4
 8001794:	321b      	adds	r2, #27
 8001796:	4091      	lsls	r1, r2
 8001798:	000a      	movs	r2, r1
 800179a:	1e51      	subs	r1, r2, #1
 800179c:	418a      	sbcs	r2, r1
 800179e:	2105      	movs	r1, #5
 80017a0:	1a09      	subs	r1, r1, r0
 80017a2:	40cc      	lsrs	r4, r1
 80017a4:	4314      	orrs	r4, r2
 80017a6:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <__aeabi_ui2f+0x88>)
 80017a8:	4022      	ands	r2, r4
 80017aa:	0761      	lsls	r1, r4, #29
 80017ac:	d1e2      	bne.n	8001774 <__aeabi_ui2f+0x3c>
 80017ae:	08d4      	lsrs	r4, r2, #3
 80017b0:	0264      	lsls	r4, r4, #9
 80017b2:	0a64      	lsrs	r4, r4, #9
 80017b4:	b2d8      	uxtb	r0, r3
 80017b6:	e7d2      	b.n	800175e <__aeabi_ui2f+0x26>
 80017b8:	0264      	lsls	r4, r4, #9
 80017ba:	0a64      	lsrs	r4, r4, #9
 80017bc:	308e      	adds	r0, #142	@ 0x8e
 80017be:	e7ce      	b.n	800175e <__aeabi_ui2f+0x26>
 80017c0:	fbffffff 	.word	0xfbffffff

080017c4 <__aeabi_dadd>:
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	464f      	mov	r7, r9
 80017c8:	4646      	mov	r6, r8
 80017ca:	46d6      	mov	lr, sl
 80017cc:	b5c0      	push	{r6, r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	9000      	str	r0, [sp, #0]
 80017d2:	9101      	str	r1, [sp, #4]
 80017d4:	030e      	lsls	r6, r1, #12
 80017d6:	004c      	lsls	r4, r1, #1
 80017d8:	0fcd      	lsrs	r5, r1, #31
 80017da:	0a71      	lsrs	r1, r6, #9
 80017dc:	9e00      	ldr	r6, [sp, #0]
 80017de:	005f      	lsls	r7, r3, #1
 80017e0:	0f76      	lsrs	r6, r6, #29
 80017e2:	430e      	orrs	r6, r1
 80017e4:	9900      	ldr	r1, [sp, #0]
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	00c9      	lsls	r1, r1, #3
 80017ec:	4689      	mov	r9, r1
 80017ee:	0319      	lsls	r1, r3, #12
 80017f0:	0d7b      	lsrs	r3, r7, #21
 80017f2:	4698      	mov	r8, r3
 80017f4:	9b01      	ldr	r3, [sp, #4]
 80017f6:	0a49      	lsrs	r1, r1, #9
 80017f8:	0fdb      	lsrs	r3, r3, #31
 80017fa:	469c      	mov	ip, r3
 80017fc:	9b00      	ldr	r3, [sp, #0]
 80017fe:	9a00      	ldr	r2, [sp, #0]
 8001800:	0f5b      	lsrs	r3, r3, #29
 8001802:	430b      	orrs	r3, r1
 8001804:	4641      	mov	r1, r8
 8001806:	0d64      	lsrs	r4, r4, #21
 8001808:	00d2      	lsls	r2, r2, #3
 800180a:	1a61      	subs	r1, r4, r1
 800180c:	4565      	cmp	r5, ip
 800180e:	d100      	bne.n	8001812 <__aeabi_dadd+0x4e>
 8001810:	e0a6      	b.n	8001960 <__aeabi_dadd+0x19c>
 8001812:	2900      	cmp	r1, #0
 8001814:	dd72      	ble.n	80018fc <__aeabi_dadd+0x138>
 8001816:	4647      	mov	r7, r8
 8001818:	2f00      	cmp	r7, #0
 800181a:	d100      	bne.n	800181e <__aeabi_dadd+0x5a>
 800181c:	e0dd      	b.n	80019da <__aeabi_dadd+0x216>
 800181e:	4fcc      	ldr	r7, [pc, #816]	@ (8001b50 <__aeabi_dadd+0x38c>)
 8001820:	42bc      	cmp	r4, r7
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x62>
 8001824:	e19a      	b.n	8001b5c <__aeabi_dadd+0x398>
 8001826:	2701      	movs	r7, #1
 8001828:	2938      	cmp	r1, #56	@ 0x38
 800182a:	dc17      	bgt.n	800185c <__aeabi_dadd+0x98>
 800182c:	2780      	movs	r7, #128	@ 0x80
 800182e:	043f      	lsls	r7, r7, #16
 8001830:	433b      	orrs	r3, r7
 8001832:	291f      	cmp	r1, #31
 8001834:	dd00      	ble.n	8001838 <__aeabi_dadd+0x74>
 8001836:	e1dd      	b.n	8001bf4 <__aeabi_dadd+0x430>
 8001838:	2720      	movs	r7, #32
 800183a:	1a78      	subs	r0, r7, r1
 800183c:	001f      	movs	r7, r3
 800183e:	4087      	lsls	r7, r0
 8001840:	46ba      	mov	sl, r7
 8001842:	0017      	movs	r7, r2
 8001844:	40cf      	lsrs	r7, r1
 8001846:	4684      	mov	ip, r0
 8001848:	0038      	movs	r0, r7
 800184a:	4657      	mov	r7, sl
 800184c:	4307      	orrs	r7, r0
 800184e:	4660      	mov	r0, ip
 8001850:	4082      	lsls	r2, r0
 8001852:	40cb      	lsrs	r3, r1
 8001854:	1e50      	subs	r0, r2, #1
 8001856:	4182      	sbcs	r2, r0
 8001858:	1af6      	subs	r6, r6, r3
 800185a:	4317      	orrs	r7, r2
 800185c:	464b      	mov	r3, r9
 800185e:	1bdf      	subs	r7, r3, r7
 8001860:	45b9      	cmp	r9, r7
 8001862:	4180      	sbcs	r0, r0
 8001864:	4240      	negs	r0, r0
 8001866:	1a36      	subs	r6, r6, r0
 8001868:	0233      	lsls	r3, r6, #8
 800186a:	d400      	bmi.n	800186e <__aeabi_dadd+0xaa>
 800186c:	e0ff      	b.n	8001a6e <__aeabi_dadd+0x2aa>
 800186e:	0276      	lsls	r6, r6, #9
 8001870:	0a76      	lsrs	r6, r6, #9
 8001872:	2e00      	cmp	r6, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_dadd+0xb4>
 8001876:	e13c      	b.n	8001af2 <__aeabi_dadd+0x32e>
 8001878:	0030      	movs	r0, r6
 800187a:	f7fe fe4f 	bl	800051c <__clzsi2>
 800187e:	0003      	movs	r3, r0
 8001880:	3b08      	subs	r3, #8
 8001882:	2120      	movs	r1, #32
 8001884:	0038      	movs	r0, r7
 8001886:	1aca      	subs	r2, r1, r3
 8001888:	40d0      	lsrs	r0, r2
 800188a:	409e      	lsls	r6, r3
 800188c:	0002      	movs	r2, r0
 800188e:	409f      	lsls	r7, r3
 8001890:	4332      	orrs	r2, r6
 8001892:	429c      	cmp	r4, r3
 8001894:	dd00      	ble.n	8001898 <__aeabi_dadd+0xd4>
 8001896:	e1a6      	b.n	8001be6 <__aeabi_dadd+0x422>
 8001898:	1b18      	subs	r0, r3, r4
 800189a:	3001      	adds	r0, #1
 800189c:	1a09      	subs	r1, r1, r0
 800189e:	003e      	movs	r6, r7
 80018a0:	408f      	lsls	r7, r1
 80018a2:	40c6      	lsrs	r6, r0
 80018a4:	1e7b      	subs	r3, r7, #1
 80018a6:	419f      	sbcs	r7, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	408b      	lsls	r3, r1
 80018ac:	4337      	orrs	r7, r6
 80018ae:	431f      	orrs	r7, r3
 80018b0:	40c2      	lsrs	r2, r0
 80018b2:	003b      	movs	r3, r7
 80018b4:	0016      	movs	r6, r2
 80018b6:	2400      	movs	r4, #0
 80018b8:	4313      	orrs	r3, r2
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0xfa>
 80018bc:	e1df      	b.n	8001c7e <__aeabi_dadd+0x4ba>
 80018be:	077b      	lsls	r3, r7, #29
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dadd+0x100>
 80018c2:	e332      	b.n	8001f2a <__aeabi_dadd+0x766>
 80018c4:	230f      	movs	r3, #15
 80018c6:	003a      	movs	r2, r7
 80018c8:	403b      	ands	r3, r7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d004      	beq.n	80018d8 <__aeabi_dadd+0x114>
 80018ce:	1d3a      	adds	r2, r7, #4
 80018d0:	42ba      	cmp	r2, r7
 80018d2:	41bf      	sbcs	r7, r7
 80018d4:	427f      	negs	r7, r7
 80018d6:	19f6      	adds	r6, r6, r7
 80018d8:	0233      	lsls	r3, r6, #8
 80018da:	d400      	bmi.n	80018de <__aeabi_dadd+0x11a>
 80018dc:	e323      	b.n	8001f26 <__aeabi_dadd+0x762>
 80018de:	4b9c      	ldr	r3, [pc, #624]	@ (8001b50 <__aeabi_dadd+0x38c>)
 80018e0:	3401      	adds	r4, #1
 80018e2:	429c      	cmp	r4, r3
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dadd+0x124>
 80018e6:	e0b4      	b.n	8001a52 <__aeabi_dadd+0x28e>
 80018e8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b54 <__aeabi_dadd+0x390>)
 80018ea:	0564      	lsls	r4, r4, #21
 80018ec:	401e      	ands	r6, r3
 80018ee:	0d64      	lsrs	r4, r4, #21
 80018f0:	0777      	lsls	r7, r6, #29
 80018f2:	08d2      	lsrs	r2, r2, #3
 80018f4:	0276      	lsls	r6, r6, #9
 80018f6:	4317      	orrs	r7, r2
 80018f8:	0b36      	lsrs	r6, r6, #12
 80018fa:	e0ac      	b.n	8001a56 <__aeabi_dadd+0x292>
 80018fc:	2900      	cmp	r1, #0
 80018fe:	d100      	bne.n	8001902 <__aeabi_dadd+0x13e>
 8001900:	e07e      	b.n	8001a00 <__aeabi_dadd+0x23c>
 8001902:	4641      	mov	r1, r8
 8001904:	1b09      	subs	r1, r1, r4
 8001906:	2c00      	cmp	r4, #0
 8001908:	d000      	beq.n	800190c <__aeabi_dadd+0x148>
 800190a:	e160      	b.n	8001bce <__aeabi_dadd+0x40a>
 800190c:	0034      	movs	r4, r6
 800190e:	4648      	mov	r0, r9
 8001910:	4304      	orrs	r4, r0
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x152>
 8001914:	e1c9      	b.n	8001caa <__aeabi_dadd+0x4e6>
 8001916:	1e4c      	subs	r4, r1, #1
 8001918:	2901      	cmp	r1, #1
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x15a>
 800191c:	e22e      	b.n	8001d7c <__aeabi_dadd+0x5b8>
 800191e:	4d8c      	ldr	r5, [pc, #560]	@ (8001b50 <__aeabi_dadd+0x38c>)
 8001920:	42a9      	cmp	r1, r5
 8001922:	d100      	bne.n	8001926 <__aeabi_dadd+0x162>
 8001924:	e224      	b.n	8001d70 <__aeabi_dadd+0x5ac>
 8001926:	2701      	movs	r7, #1
 8001928:	2c38      	cmp	r4, #56	@ 0x38
 800192a:	dc11      	bgt.n	8001950 <__aeabi_dadd+0x18c>
 800192c:	0021      	movs	r1, r4
 800192e:	291f      	cmp	r1, #31
 8001930:	dd00      	ble.n	8001934 <__aeabi_dadd+0x170>
 8001932:	e20b      	b.n	8001d4c <__aeabi_dadd+0x588>
 8001934:	2420      	movs	r4, #32
 8001936:	0037      	movs	r7, r6
 8001938:	4648      	mov	r0, r9
 800193a:	1a64      	subs	r4, r4, r1
 800193c:	40a7      	lsls	r7, r4
 800193e:	40c8      	lsrs	r0, r1
 8001940:	4307      	orrs	r7, r0
 8001942:	4648      	mov	r0, r9
 8001944:	40a0      	lsls	r0, r4
 8001946:	40ce      	lsrs	r6, r1
 8001948:	1e44      	subs	r4, r0, #1
 800194a:	41a0      	sbcs	r0, r4
 800194c:	1b9b      	subs	r3, r3, r6
 800194e:	4307      	orrs	r7, r0
 8001950:	1bd7      	subs	r7, r2, r7
 8001952:	42ba      	cmp	r2, r7
 8001954:	4192      	sbcs	r2, r2
 8001956:	4252      	negs	r2, r2
 8001958:	4665      	mov	r5, ip
 800195a:	4644      	mov	r4, r8
 800195c:	1a9e      	subs	r6, r3, r2
 800195e:	e783      	b.n	8001868 <__aeabi_dadd+0xa4>
 8001960:	2900      	cmp	r1, #0
 8001962:	dc00      	bgt.n	8001966 <__aeabi_dadd+0x1a2>
 8001964:	e09c      	b.n	8001aa0 <__aeabi_dadd+0x2dc>
 8001966:	4647      	mov	r7, r8
 8001968:	2f00      	cmp	r7, #0
 800196a:	d167      	bne.n	8001a3c <__aeabi_dadd+0x278>
 800196c:	001f      	movs	r7, r3
 800196e:	4317      	orrs	r7, r2
 8001970:	d100      	bne.n	8001974 <__aeabi_dadd+0x1b0>
 8001972:	e0e4      	b.n	8001b3e <__aeabi_dadd+0x37a>
 8001974:	1e48      	subs	r0, r1, #1
 8001976:	2901      	cmp	r1, #1
 8001978:	d100      	bne.n	800197c <__aeabi_dadd+0x1b8>
 800197a:	e19b      	b.n	8001cb4 <__aeabi_dadd+0x4f0>
 800197c:	4f74      	ldr	r7, [pc, #464]	@ (8001b50 <__aeabi_dadd+0x38c>)
 800197e:	42b9      	cmp	r1, r7
 8001980:	d100      	bne.n	8001984 <__aeabi_dadd+0x1c0>
 8001982:	e0eb      	b.n	8001b5c <__aeabi_dadd+0x398>
 8001984:	2701      	movs	r7, #1
 8001986:	0001      	movs	r1, r0
 8001988:	2838      	cmp	r0, #56	@ 0x38
 800198a:	dc11      	bgt.n	80019b0 <__aeabi_dadd+0x1ec>
 800198c:	291f      	cmp	r1, #31
 800198e:	dd00      	ble.n	8001992 <__aeabi_dadd+0x1ce>
 8001990:	e1c7      	b.n	8001d22 <__aeabi_dadd+0x55e>
 8001992:	2720      	movs	r7, #32
 8001994:	1a78      	subs	r0, r7, r1
 8001996:	001f      	movs	r7, r3
 8001998:	4684      	mov	ip, r0
 800199a:	4087      	lsls	r7, r0
 800199c:	0010      	movs	r0, r2
 800199e:	40c8      	lsrs	r0, r1
 80019a0:	4307      	orrs	r7, r0
 80019a2:	4660      	mov	r0, ip
 80019a4:	4082      	lsls	r2, r0
 80019a6:	40cb      	lsrs	r3, r1
 80019a8:	1e50      	subs	r0, r2, #1
 80019aa:	4182      	sbcs	r2, r0
 80019ac:	18f6      	adds	r6, r6, r3
 80019ae:	4317      	orrs	r7, r2
 80019b0:	444f      	add	r7, r9
 80019b2:	454f      	cmp	r7, r9
 80019b4:	4180      	sbcs	r0, r0
 80019b6:	4240      	negs	r0, r0
 80019b8:	1836      	adds	r6, r6, r0
 80019ba:	0233      	lsls	r3, r6, #8
 80019bc:	d557      	bpl.n	8001a6e <__aeabi_dadd+0x2aa>
 80019be:	4b64      	ldr	r3, [pc, #400]	@ (8001b50 <__aeabi_dadd+0x38c>)
 80019c0:	3401      	adds	r4, #1
 80019c2:	429c      	cmp	r4, r3
 80019c4:	d045      	beq.n	8001a52 <__aeabi_dadd+0x28e>
 80019c6:	2101      	movs	r1, #1
 80019c8:	4b62      	ldr	r3, [pc, #392]	@ (8001b54 <__aeabi_dadd+0x390>)
 80019ca:	087a      	lsrs	r2, r7, #1
 80019cc:	401e      	ands	r6, r3
 80019ce:	4039      	ands	r1, r7
 80019d0:	430a      	orrs	r2, r1
 80019d2:	07f7      	lsls	r7, r6, #31
 80019d4:	4317      	orrs	r7, r2
 80019d6:	0876      	lsrs	r6, r6, #1
 80019d8:	e771      	b.n	80018be <__aeabi_dadd+0xfa>
 80019da:	001f      	movs	r7, r3
 80019dc:	4317      	orrs	r7, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dadd+0x21e>
 80019e0:	e0ad      	b.n	8001b3e <__aeabi_dadd+0x37a>
 80019e2:	1e4f      	subs	r7, r1, #1
 80019e4:	46bc      	mov	ip, r7
 80019e6:	2901      	cmp	r1, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dadd+0x228>
 80019ea:	e182      	b.n	8001cf2 <__aeabi_dadd+0x52e>
 80019ec:	4f58      	ldr	r7, [pc, #352]	@ (8001b50 <__aeabi_dadd+0x38c>)
 80019ee:	42b9      	cmp	r1, r7
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dadd+0x230>
 80019f2:	e190      	b.n	8001d16 <__aeabi_dadd+0x552>
 80019f4:	4661      	mov	r1, ip
 80019f6:	2701      	movs	r7, #1
 80019f8:	2938      	cmp	r1, #56	@ 0x38
 80019fa:	dd00      	ble.n	80019fe <__aeabi_dadd+0x23a>
 80019fc:	e72e      	b.n	800185c <__aeabi_dadd+0x98>
 80019fe:	e718      	b.n	8001832 <__aeabi_dadd+0x6e>
 8001a00:	4f55      	ldr	r7, [pc, #340]	@ (8001b58 <__aeabi_dadd+0x394>)
 8001a02:	1c61      	adds	r1, r4, #1
 8001a04:	4239      	tst	r1, r7
 8001a06:	d000      	beq.n	8001a0a <__aeabi_dadd+0x246>
 8001a08:	e0d0      	b.n	8001bac <__aeabi_dadd+0x3e8>
 8001a0a:	0031      	movs	r1, r6
 8001a0c:	4648      	mov	r0, r9
 8001a0e:	001f      	movs	r7, r3
 8001a10:	4301      	orrs	r1, r0
 8001a12:	4317      	orrs	r7, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d000      	beq.n	8001a1a <__aeabi_dadd+0x256>
 8001a18:	e13d      	b.n	8001c96 <__aeabi_dadd+0x4d2>
 8001a1a:	2900      	cmp	r1, #0
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dadd+0x25c>
 8001a1e:	e1bc      	b.n	8001d9a <__aeabi_dadd+0x5d6>
 8001a20:	2f00      	cmp	r7, #0
 8001a22:	d000      	beq.n	8001a26 <__aeabi_dadd+0x262>
 8001a24:	e1bf      	b.n	8001da6 <__aeabi_dadd+0x5e2>
 8001a26:	464b      	mov	r3, r9
 8001a28:	2100      	movs	r1, #0
 8001a2a:	08d8      	lsrs	r0, r3, #3
 8001a2c:	0777      	lsls	r7, r6, #29
 8001a2e:	4307      	orrs	r7, r0
 8001a30:	08f0      	lsrs	r0, r6, #3
 8001a32:	0306      	lsls	r6, r0, #12
 8001a34:	054c      	lsls	r4, r1, #21
 8001a36:	0b36      	lsrs	r6, r6, #12
 8001a38:	0d64      	lsrs	r4, r4, #21
 8001a3a:	e00c      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001a3c:	4f44      	ldr	r7, [pc, #272]	@ (8001b50 <__aeabi_dadd+0x38c>)
 8001a3e:	42bc      	cmp	r4, r7
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dadd+0x280>
 8001a42:	e08b      	b.n	8001b5c <__aeabi_dadd+0x398>
 8001a44:	2701      	movs	r7, #1
 8001a46:	2938      	cmp	r1, #56	@ 0x38
 8001a48:	dcb2      	bgt.n	80019b0 <__aeabi_dadd+0x1ec>
 8001a4a:	2780      	movs	r7, #128	@ 0x80
 8001a4c:	043f      	lsls	r7, r7, #16
 8001a4e:	433b      	orrs	r3, r7
 8001a50:	e79c      	b.n	800198c <__aeabi_dadd+0x1c8>
 8001a52:	2600      	movs	r6, #0
 8001a54:	2700      	movs	r7, #0
 8001a56:	0524      	lsls	r4, r4, #20
 8001a58:	4334      	orrs	r4, r6
 8001a5a:	07ed      	lsls	r5, r5, #31
 8001a5c:	432c      	orrs	r4, r5
 8001a5e:	0038      	movs	r0, r7
 8001a60:	0021      	movs	r1, r4
 8001a62:	b002      	add	sp, #8
 8001a64:	bce0      	pop	{r5, r6, r7}
 8001a66:	46ba      	mov	sl, r7
 8001a68:	46b1      	mov	r9, r6
 8001a6a:	46a8      	mov	r8, r5
 8001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6e:	077b      	lsls	r3, r7, #29
 8001a70:	d004      	beq.n	8001a7c <__aeabi_dadd+0x2b8>
 8001a72:	230f      	movs	r3, #15
 8001a74:	403b      	ands	r3, r7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dadd+0x2b8>
 8001a7a:	e728      	b.n	80018ce <__aeabi_dadd+0x10a>
 8001a7c:	08f8      	lsrs	r0, r7, #3
 8001a7e:	4b34      	ldr	r3, [pc, #208]	@ (8001b50 <__aeabi_dadd+0x38c>)
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	4307      	orrs	r7, r0
 8001a84:	08f0      	lsrs	r0, r6, #3
 8001a86:	429c      	cmp	r4, r3
 8001a88:	d000      	beq.n	8001a8c <__aeabi_dadd+0x2c8>
 8001a8a:	e24a      	b.n	8001f22 <__aeabi_dadd+0x75e>
 8001a8c:	003b      	movs	r3, r7
 8001a8e:	4303      	orrs	r3, r0
 8001a90:	d059      	beq.n	8001b46 <__aeabi_dadd+0x382>
 8001a92:	2680      	movs	r6, #128	@ 0x80
 8001a94:	0336      	lsls	r6, r6, #12
 8001a96:	4306      	orrs	r6, r0
 8001a98:	0336      	lsls	r6, r6, #12
 8001a9a:	4c2d      	ldr	r4, [pc, #180]	@ (8001b50 <__aeabi_dadd+0x38c>)
 8001a9c:	0b36      	lsrs	r6, r6, #12
 8001a9e:	e7da      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	d061      	beq.n	8001b68 <__aeabi_dadd+0x3a4>
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	1b09      	subs	r1, r1, r4
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x2ea>
 8001aac:	e0b9      	b.n	8001c22 <__aeabi_dadd+0x45e>
 8001aae:	4c28      	ldr	r4, [pc, #160]	@ (8001b50 <__aeabi_dadd+0x38c>)
 8001ab0:	45a0      	cmp	r8, r4
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x2f2>
 8001ab4:	e1a5      	b.n	8001e02 <__aeabi_dadd+0x63e>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2938      	cmp	r1, #56	@ 0x38
 8001aba:	dc13      	bgt.n	8001ae4 <__aeabi_dadd+0x320>
 8001abc:	2480      	movs	r4, #128	@ 0x80
 8001abe:	0424      	lsls	r4, r4, #16
 8001ac0:	4326      	orrs	r6, r4
 8001ac2:	291f      	cmp	r1, #31
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dadd+0x304>
 8001ac6:	e1c8      	b.n	8001e5a <__aeabi_dadd+0x696>
 8001ac8:	2420      	movs	r4, #32
 8001aca:	0037      	movs	r7, r6
 8001acc:	4648      	mov	r0, r9
 8001ace:	1a64      	subs	r4, r4, r1
 8001ad0:	40a7      	lsls	r7, r4
 8001ad2:	40c8      	lsrs	r0, r1
 8001ad4:	4307      	orrs	r7, r0
 8001ad6:	4648      	mov	r0, r9
 8001ad8:	40a0      	lsls	r0, r4
 8001ada:	40ce      	lsrs	r6, r1
 8001adc:	1e44      	subs	r4, r0, #1
 8001ade:	41a0      	sbcs	r0, r4
 8001ae0:	199b      	adds	r3, r3, r6
 8001ae2:	4307      	orrs	r7, r0
 8001ae4:	18bf      	adds	r7, r7, r2
 8001ae6:	4297      	cmp	r7, r2
 8001ae8:	4192      	sbcs	r2, r2
 8001aea:	4252      	negs	r2, r2
 8001aec:	4644      	mov	r4, r8
 8001aee:	18d6      	adds	r6, r2, r3
 8001af0:	e763      	b.n	80019ba <__aeabi_dadd+0x1f6>
 8001af2:	0038      	movs	r0, r7
 8001af4:	f7fe fd12 	bl	800051c <__clzsi2>
 8001af8:	0003      	movs	r3, r0
 8001afa:	3318      	adds	r3, #24
 8001afc:	2b1f      	cmp	r3, #31
 8001afe:	dc00      	bgt.n	8001b02 <__aeabi_dadd+0x33e>
 8001b00:	e6bf      	b.n	8001882 <__aeabi_dadd+0xbe>
 8001b02:	003a      	movs	r2, r7
 8001b04:	3808      	subs	r0, #8
 8001b06:	4082      	lsls	r2, r0
 8001b08:	429c      	cmp	r4, r3
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_dadd+0x34a>
 8001b0c:	e083      	b.n	8001c16 <__aeabi_dadd+0x452>
 8001b0e:	1b1b      	subs	r3, r3, r4
 8001b10:	1c58      	adds	r0, r3, #1
 8001b12:	281f      	cmp	r0, #31
 8001b14:	dc00      	bgt.n	8001b18 <__aeabi_dadd+0x354>
 8001b16:	e1b4      	b.n	8001e82 <__aeabi_dadd+0x6be>
 8001b18:	0017      	movs	r7, r2
 8001b1a:	3b1f      	subs	r3, #31
 8001b1c:	40df      	lsrs	r7, r3
 8001b1e:	2820      	cmp	r0, #32
 8001b20:	d005      	beq.n	8001b2e <__aeabi_dadd+0x36a>
 8001b22:	2340      	movs	r3, #64	@ 0x40
 8001b24:	1a1b      	subs	r3, r3, r0
 8001b26:	409a      	lsls	r2, r3
 8001b28:	1e53      	subs	r3, r2, #1
 8001b2a:	419a      	sbcs	r2, r3
 8001b2c:	4317      	orrs	r7, r2
 8001b2e:	2400      	movs	r4, #0
 8001b30:	2f00      	cmp	r7, #0
 8001b32:	d00a      	beq.n	8001b4a <__aeabi_dadd+0x386>
 8001b34:	077b      	lsls	r3, r7, #29
 8001b36:	d000      	beq.n	8001b3a <__aeabi_dadd+0x376>
 8001b38:	e6c4      	b.n	80018c4 <__aeabi_dadd+0x100>
 8001b3a:	0026      	movs	r6, r4
 8001b3c:	e79e      	b.n	8001a7c <__aeabi_dadd+0x2b8>
 8001b3e:	464b      	mov	r3, r9
 8001b40:	000c      	movs	r4, r1
 8001b42:	08d8      	lsrs	r0, r3, #3
 8001b44:	e79b      	b.n	8001a7e <__aeabi_dadd+0x2ba>
 8001b46:	2700      	movs	r7, #0
 8001b48:	4c01      	ldr	r4, [pc, #4]	@ (8001b50 <__aeabi_dadd+0x38c>)
 8001b4a:	2600      	movs	r6, #0
 8001b4c:	e783      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	ff7fffff 	.word	0xff7fffff
 8001b58:	000007fe 	.word	0x000007fe
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	0777      	lsls	r7, r6, #29
 8001b60:	08d8      	lsrs	r0, r3, #3
 8001b62:	4307      	orrs	r7, r0
 8001b64:	08f0      	lsrs	r0, r6, #3
 8001b66:	e791      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001b68:	4fcd      	ldr	r7, [pc, #820]	@ (8001ea0 <__aeabi_dadd+0x6dc>)
 8001b6a:	1c61      	adds	r1, r4, #1
 8001b6c:	4239      	tst	r1, r7
 8001b6e:	d16b      	bne.n	8001c48 <__aeabi_dadd+0x484>
 8001b70:	0031      	movs	r1, r6
 8001b72:	4648      	mov	r0, r9
 8001b74:	4301      	orrs	r1, r0
 8001b76:	2c00      	cmp	r4, #0
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dadd+0x3b8>
 8001b7a:	e14b      	b.n	8001e14 <__aeabi_dadd+0x650>
 8001b7c:	001f      	movs	r7, r3
 8001b7e:	4317      	orrs	r7, r2
 8001b80:	2900      	cmp	r1, #0
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dadd+0x3c2>
 8001b84:	e181      	b.n	8001e8a <__aeabi_dadd+0x6c6>
 8001b86:	2f00      	cmp	r7, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dadd+0x3c8>
 8001b8a:	e74c      	b.n	8001a26 <__aeabi_dadd+0x262>
 8001b8c:	444a      	add	r2, r9
 8001b8e:	454a      	cmp	r2, r9
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	18f6      	adds	r6, r6, r3
 8001b94:	4240      	negs	r0, r0
 8001b96:	1836      	adds	r6, r6, r0
 8001b98:	0233      	lsls	r3, r6, #8
 8001b9a:	d500      	bpl.n	8001b9e <__aeabi_dadd+0x3da>
 8001b9c:	e1b0      	b.n	8001f00 <__aeabi_dadd+0x73c>
 8001b9e:	0017      	movs	r7, r2
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	4337      	orrs	r7, r6
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_dadd+0x3e4>
 8001ba6:	e73e      	b.n	8001a26 <__aeabi_dadd+0x262>
 8001ba8:	2600      	movs	r6, #0
 8001baa:	e754      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001bac:	4649      	mov	r1, r9
 8001bae:	1a89      	subs	r1, r1, r2
 8001bb0:	4688      	mov	r8, r1
 8001bb2:	45c1      	cmp	r9, r8
 8001bb4:	41bf      	sbcs	r7, r7
 8001bb6:	1af1      	subs	r1, r6, r3
 8001bb8:	427f      	negs	r7, r7
 8001bba:	1bc9      	subs	r1, r1, r7
 8001bbc:	020f      	lsls	r7, r1, #8
 8001bbe:	d461      	bmi.n	8001c84 <__aeabi_dadd+0x4c0>
 8001bc0:	4647      	mov	r7, r8
 8001bc2:	430f      	orrs	r7, r1
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dadd+0x404>
 8001bc6:	e0bd      	b.n	8001d44 <__aeabi_dadd+0x580>
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4647      	mov	r7, r8
 8001bcc:	e651      	b.n	8001872 <__aeabi_dadd+0xae>
 8001bce:	4cb5      	ldr	r4, [pc, #724]	@ (8001ea4 <__aeabi_dadd+0x6e0>)
 8001bd0:	45a0      	cmp	r8, r4
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dadd+0x412>
 8001bd4:	e100      	b.n	8001dd8 <__aeabi_dadd+0x614>
 8001bd6:	2701      	movs	r7, #1
 8001bd8:	2938      	cmp	r1, #56	@ 0x38
 8001bda:	dd00      	ble.n	8001bde <__aeabi_dadd+0x41a>
 8001bdc:	e6b8      	b.n	8001950 <__aeabi_dadd+0x18c>
 8001bde:	2480      	movs	r4, #128	@ 0x80
 8001be0:	0424      	lsls	r4, r4, #16
 8001be2:	4326      	orrs	r6, r4
 8001be4:	e6a3      	b.n	800192e <__aeabi_dadd+0x16a>
 8001be6:	4eb0      	ldr	r6, [pc, #704]	@ (8001ea8 <__aeabi_dadd+0x6e4>)
 8001be8:	1ae4      	subs	r4, r4, r3
 8001bea:	4016      	ands	r6, r2
 8001bec:	077b      	lsls	r3, r7, #29
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_dadd+0x42e>
 8001bf0:	e73f      	b.n	8001a72 <__aeabi_dadd+0x2ae>
 8001bf2:	e743      	b.n	8001a7c <__aeabi_dadd+0x2b8>
 8001bf4:	000f      	movs	r7, r1
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	3f20      	subs	r7, #32
 8001bfa:	40f8      	lsrs	r0, r7
 8001bfc:	4684      	mov	ip, r0
 8001bfe:	2920      	cmp	r1, #32
 8001c00:	d003      	beq.n	8001c0a <__aeabi_dadd+0x446>
 8001c02:	2740      	movs	r7, #64	@ 0x40
 8001c04:	1a79      	subs	r1, r7, r1
 8001c06:	408b      	lsls	r3, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	1e53      	subs	r3, r2, #1
 8001c0c:	419a      	sbcs	r2, r3
 8001c0e:	4663      	mov	r3, ip
 8001c10:	0017      	movs	r7, r2
 8001c12:	431f      	orrs	r7, r3
 8001c14:	e622      	b.n	800185c <__aeabi_dadd+0x98>
 8001c16:	48a4      	ldr	r0, [pc, #656]	@ (8001ea8 <__aeabi_dadd+0x6e4>)
 8001c18:	1ae1      	subs	r1, r4, r3
 8001c1a:	4010      	ands	r0, r2
 8001c1c:	0747      	lsls	r7, r0, #29
 8001c1e:	08c0      	lsrs	r0, r0, #3
 8001c20:	e707      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001c22:	0034      	movs	r4, r6
 8001c24:	4648      	mov	r0, r9
 8001c26:	4304      	orrs	r4, r0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dadd+0x468>
 8001c2a:	e0fa      	b.n	8001e22 <__aeabi_dadd+0x65e>
 8001c2c:	1e4c      	subs	r4, r1, #1
 8001c2e:	2901      	cmp	r1, #1
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dadd+0x470>
 8001c32:	e0d7      	b.n	8001de4 <__aeabi_dadd+0x620>
 8001c34:	4f9b      	ldr	r7, [pc, #620]	@ (8001ea4 <__aeabi_dadd+0x6e0>)
 8001c36:	42b9      	cmp	r1, r7
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dadd+0x478>
 8001c3a:	e0e2      	b.n	8001e02 <__aeabi_dadd+0x63e>
 8001c3c:	2701      	movs	r7, #1
 8001c3e:	2c38      	cmp	r4, #56	@ 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dadd+0x480>
 8001c42:	e74f      	b.n	8001ae4 <__aeabi_dadd+0x320>
 8001c44:	0021      	movs	r1, r4
 8001c46:	e73c      	b.n	8001ac2 <__aeabi_dadd+0x2fe>
 8001c48:	4c96      	ldr	r4, [pc, #600]	@ (8001ea4 <__aeabi_dadd+0x6e0>)
 8001c4a:	42a1      	cmp	r1, r4
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dadd+0x48c>
 8001c4e:	e0dd      	b.n	8001e0c <__aeabi_dadd+0x648>
 8001c50:	444a      	add	r2, r9
 8001c52:	454a      	cmp	r2, r9
 8001c54:	4180      	sbcs	r0, r0
 8001c56:	18f3      	adds	r3, r6, r3
 8001c58:	4240      	negs	r0, r0
 8001c5a:	1818      	adds	r0, r3, r0
 8001c5c:	07c7      	lsls	r7, r0, #31
 8001c5e:	0852      	lsrs	r2, r2, #1
 8001c60:	4317      	orrs	r7, r2
 8001c62:	0846      	lsrs	r6, r0, #1
 8001c64:	0752      	lsls	r2, r2, #29
 8001c66:	d005      	beq.n	8001c74 <__aeabi_dadd+0x4b0>
 8001c68:	220f      	movs	r2, #15
 8001c6a:	000c      	movs	r4, r1
 8001c6c:	403a      	ands	r2, r7
 8001c6e:	2a04      	cmp	r2, #4
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dadd+0x4b0>
 8001c72:	e62c      	b.n	80018ce <__aeabi_dadd+0x10a>
 8001c74:	0776      	lsls	r6, r6, #29
 8001c76:	08ff      	lsrs	r7, r7, #3
 8001c78:	4337      	orrs	r7, r6
 8001c7a:	0900      	lsrs	r0, r0, #4
 8001c7c:	e6d9      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001c7e:	2700      	movs	r7, #0
 8001c80:	2600      	movs	r6, #0
 8001c82:	e6e8      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001c84:	4649      	mov	r1, r9
 8001c86:	1a57      	subs	r7, r2, r1
 8001c88:	42ba      	cmp	r2, r7
 8001c8a:	4192      	sbcs	r2, r2
 8001c8c:	1b9e      	subs	r6, r3, r6
 8001c8e:	4252      	negs	r2, r2
 8001c90:	4665      	mov	r5, ip
 8001c92:	1ab6      	subs	r6, r6, r2
 8001c94:	e5ed      	b.n	8001872 <__aeabi_dadd+0xae>
 8001c96:	2900      	cmp	r1, #0
 8001c98:	d000      	beq.n	8001c9c <__aeabi_dadd+0x4d8>
 8001c9a:	e0c6      	b.n	8001e2a <__aeabi_dadd+0x666>
 8001c9c:	2f00      	cmp	r7, #0
 8001c9e:	d167      	bne.n	8001d70 <__aeabi_dadd+0x5ac>
 8001ca0:	2680      	movs	r6, #128	@ 0x80
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	4c7f      	ldr	r4, [pc, #508]	@ (8001ea4 <__aeabi_dadd+0x6e0>)
 8001ca6:	0336      	lsls	r6, r6, #12
 8001ca8:	e6d5      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001caa:	4665      	mov	r5, ip
 8001cac:	000c      	movs	r4, r1
 8001cae:	001e      	movs	r6, r3
 8001cb0:	08d0      	lsrs	r0, r2, #3
 8001cb2:	e6e4      	b.n	8001a7e <__aeabi_dadd+0x2ba>
 8001cb4:	444a      	add	r2, r9
 8001cb6:	454a      	cmp	r2, r9
 8001cb8:	4180      	sbcs	r0, r0
 8001cba:	18f3      	adds	r3, r6, r3
 8001cbc:	4240      	negs	r0, r0
 8001cbe:	1818      	adds	r0, r3, r0
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	0203      	lsls	r3, r0, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dadd+0x504>
 8001cc6:	e096      	b.n	8001df6 <__aeabi_dadd+0x632>
 8001cc8:	4b77      	ldr	r3, [pc, #476]	@ (8001ea8 <__aeabi_dadd+0x6e4>)
 8001cca:	0849      	lsrs	r1, r1, #1
 8001ccc:	4018      	ands	r0, r3
 8001cce:	07c3      	lsls	r3, r0, #31
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	0844      	lsrs	r4, r0, #1
 8001cd4:	0749      	lsls	r1, r1, #29
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dadd+0x516>
 8001cd8:	e129      	b.n	8001f2e <__aeabi_dadd+0x76a>
 8001cda:	220f      	movs	r2, #15
 8001cdc:	401a      	ands	r2, r3
 8001cde:	2a04      	cmp	r2, #4
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dadd+0x520>
 8001ce2:	e0ea      	b.n	8001eba <__aeabi_dadd+0x6f6>
 8001ce4:	1d1f      	adds	r7, r3, #4
 8001ce6:	429f      	cmp	r7, r3
 8001ce8:	41b6      	sbcs	r6, r6
 8001cea:	4276      	negs	r6, r6
 8001cec:	1936      	adds	r6, r6, r4
 8001cee:	2402      	movs	r4, #2
 8001cf0:	e6c4      	b.n	8001a7c <__aeabi_dadd+0x2b8>
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	1a8f      	subs	r7, r1, r2
 8001cf6:	45b9      	cmp	r9, r7
 8001cf8:	4180      	sbcs	r0, r0
 8001cfa:	1af6      	subs	r6, r6, r3
 8001cfc:	4240      	negs	r0, r0
 8001cfe:	1a36      	subs	r6, r6, r0
 8001d00:	0233      	lsls	r3, r6, #8
 8001d02:	d406      	bmi.n	8001d12 <__aeabi_dadd+0x54e>
 8001d04:	0773      	lsls	r3, r6, #29
 8001d06:	08ff      	lsrs	r7, r7, #3
 8001d08:	2101      	movs	r1, #1
 8001d0a:	431f      	orrs	r7, r3
 8001d0c:	08f0      	lsrs	r0, r6, #3
 8001d0e:	e690      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001d10:	4665      	mov	r5, ip
 8001d12:	2401      	movs	r4, #1
 8001d14:	e5ab      	b.n	800186e <__aeabi_dadd+0xaa>
 8001d16:	464b      	mov	r3, r9
 8001d18:	0777      	lsls	r7, r6, #29
 8001d1a:	08d8      	lsrs	r0, r3, #3
 8001d1c:	4307      	orrs	r7, r0
 8001d1e:	08f0      	lsrs	r0, r6, #3
 8001d20:	e6b4      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001d22:	000f      	movs	r7, r1
 8001d24:	0018      	movs	r0, r3
 8001d26:	3f20      	subs	r7, #32
 8001d28:	40f8      	lsrs	r0, r7
 8001d2a:	4684      	mov	ip, r0
 8001d2c:	2920      	cmp	r1, #32
 8001d2e:	d003      	beq.n	8001d38 <__aeabi_dadd+0x574>
 8001d30:	2740      	movs	r7, #64	@ 0x40
 8001d32:	1a79      	subs	r1, r7, r1
 8001d34:	408b      	lsls	r3, r1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	1e53      	subs	r3, r2, #1
 8001d3a:	419a      	sbcs	r2, r3
 8001d3c:	4663      	mov	r3, ip
 8001d3e:	0017      	movs	r7, r2
 8001d40:	431f      	orrs	r7, r3
 8001d42:	e635      	b.n	80019b0 <__aeabi_dadd+0x1ec>
 8001d44:	2500      	movs	r5, #0
 8001d46:	2400      	movs	r4, #0
 8001d48:	2600      	movs	r6, #0
 8001d4a:	e684      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001d4c:	000c      	movs	r4, r1
 8001d4e:	0035      	movs	r5, r6
 8001d50:	3c20      	subs	r4, #32
 8001d52:	40e5      	lsrs	r5, r4
 8001d54:	2920      	cmp	r1, #32
 8001d56:	d005      	beq.n	8001d64 <__aeabi_dadd+0x5a0>
 8001d58:	2440      	movs	r4, #64	@ 0x40
 8001d5a:	1a61      	subs	r1, r4, r1
 8001d5c:	408e      	lsls	r6, r1
 8001d5e:	4649      	mov	r1, r9
 8001d60:	4331      	orrs	r1, r6
 8001d62:	4689      	mov	r9, r1
 8001d64:	4648      	mov	r0, r9
 8001d66:	1e41      	subs	r1, r0, #1
 8001d68:	4188      	sbcs	r0, r1
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	432f      	orrs	r7, r5
 8001d6e:	e5ef      	b.n	8001950 <__aeabi_dadd+0x18c>
 8001d70:	08d2      	lsrs	r2, r2, #3
 8001d72:	075f      	lsls	r7, r3, #29
 8001d74:	4665      	mov	r5, ip
 8001d76:	4317      	orrs	r7, r2
 8001d78:	08d8      	lsrs	r0, r3, #3
 8001d7a:	e687      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001d7c:	1a17      	subs	r7, r2, r0
 8001d7e:	42ba      	cmp	r2, r7
 8001d80:	4192      	sbcs	r2, r2
 8001d82:	1b9e      	subs	r6, r3, r6
 8001d84:	4252      	negs	r2, r2
 8001d86:	1ab6      	subs	r6, r6, r2
 8001d88:	0233      	lsls	r3, r6, #8
 8001d8a:	d4c1      	bmi.n	8001d10 <__aeabi_dadd+0x54c>
 8001d8c:	0773      	lsls	r3, r6, #29
 8001d8e:	08ff      	lsrs	r7, r7, #3
 8001d90:	4665      	mov	r5, ip
 8001d92:	2101      	movs	r1, #1
 8001d94:	431f      	orrs	r7, r3
 8001d96:	08f0      	lsrs	r0, r6, #3
 8001d98:	e64b      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d07b      	beq.n	8001e96 <__aeabi_dadd+0x6d2>
 8001d9e:	4665      	mov	r5, ip
 8001da0:	001e      	movs	r6, r3
 8001da2:	4691      	mov	r9, r2
 8001da4:	e63f      	b.n	8001a26 <__aeabi_dadd+0x262>
 8001da6:	1a81      	subs	r1, r0, r2
 8001da8:	4688      	mov	r8, r1
 8001daa:	45c1      	cmp	r9, r8
 8001dac:	41a4      	sbcs	r4, r4
 8001dae:	1af1      	subs	r1, r6, r3
 8001db0:	4264      	negs	r4, r4
 8001db2:	1b09      	subs	r1, r1, r4
 8001db4:	2480      	movs	r4, #128	@ 0x80
 8001db6:	0424      	lsls	r4, r4, #16
 8001db8:	4221      	tst	r1, r4
 8001dba:	d077      	beq.n	8001eac <__aeabi_dadd+0x6e8>
 8001dbc:	1a10      	subs	r0, r2, r0
 8001dbe:	4282      	cmp	r2, r0
 8001dc0:	4192      	sbcs	r2, r2
 8001dc2:	0007      	movs	r7, r0
 8001dc4:	1b9e      	subs	r6, r3, r6
 8001dc6:	4252      	negs	r2, r2
 8001dc8:	1ab6      	subs	r6, r6, r2
 8001dca:	4337      	orrs	r7, r6
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dadd+0x60c>
 8001dce:	e0a0      	b.n	8001f12 <__aeabi_dadd+0x74e>
 8001dd0:	4665      	mov	r5, ip
 8001dd2:	2400      	movs	r4, #0
 8001dd4:	2600      	movs	r6, #0
 8001dd6:	e63e      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001dd8:	075f      	lsls	r7, r3, #29
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	4665      	mov	r5, ip
 8001dde:	4317      	orrs	r7, r2
 8001de0:	08d8      	lsrs	r0, r3, #3
 8001de2:	e653      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001de4:	1881      	adds	r1, r0, r2
 8001de6:	4291      	cmp	r1, r2
 8001de8:	4192      	sbcs	r2, r2
 8001dea:	18f0      	adds	r0, r6, r3
 8001dec:	4252      	negs	r2, r2
 8001dee:	1880      	adds	r0, r0, r2
 8001df0:	0203      	lsls	r3, r0, #8
 8001df2:	d500      	bpl.n	8001df6 <__aeabi_dadd+0x632>
 8001df4:	e768      	b.n	8001cc8 <__aeabi_dadd+0x504>
 8001df6:	0747      	lsls	r7, r0, #29
 8001df8:	08c9      	lsrs	r1, r1, #3
 8001dfa:	430f      	orrs	r7, r1
 8001dfc:	08c0      	lsrs	r0, r0, #3
 8001dfe:	2101      	movs	r1, #1
 8001e00:	e617      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001e02:	08d2      	lsrs	r2, r2, #3
 8001e04:	075f      	lsls	r7, r3, #29
 8001e06:	4317      	orrs	r7, r2
 8001e08:	08d8      	lsrs	r0, r3, #3
 8001e0a:	e63f      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	2600      	movs	r6, #0
 8001e10:	2700      	movs	r7, #0
 8001e12:	e620      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001e14:	2900      	cmp	r1, #0
 8001e16:	d156      	bne.n	8001ec6 <__aeabi_dadd+0x702>
 8001e18:	075f      	lsls	r7, r3, #29
 8001e1a:	08d2      	lsrs	r2, r2, #3
 8001e1c:	4317      	orrs	r7, r2
 8001e1e:	08d8      	lsrs	r0, r3, #3
 8001e20:	e634      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001e22:	000c      	movs	r4, r1
 8001e24:	001e      	movs	r6, r3
 8001e26:	08d0      	lsrs	r0, r2, #3
 8001e28:	e629      	b.n	8001a7e <__aeabi_dadd+0x2ba>
 8001e2a:	08c1      	lsrs	r1, r0, #3
 8001e2c:	0770      	lsls	r0, r6, #29
 8001e2e:	4301      	orrs	r1, r0
 8001e30:	08f0      	lsrs	r0, r6, #3
 8001e32:	2f00      	cmp	r7, #0
 8001e34:	d062      	beq.n	8001efc <__aeabi_dadd+0x738>
 8001e36:	2480      	movs	r4, #128	@ 0x80
 8001e38:	0324      	lsls	r4, r4, #12
 8001e3a:	4220      	tst	r0, r4
 8001e3c:	d007      	beq.n	8001e4e <__aeabi_dadd+0x68a>
 8001e3e:	08de      	lsrs	r6, r3, #3
 8001e40:	4226      	tst	r6, r4
 8001e42:	d104      	bne.n	8001e4e <__aeabi_dadd+0x68a>
 8001e44:	4665      	mov	r5, ip
 8001e46:	0030      	movs	r0, r6
 8001e48:	08d1      	lsrs	r1, r2, #3
 8001e4a:	075b      	lsls	r3, r3, #29
 8001e4c:	4319      	orrs	r1, r3
 8001e4e:	0f4f      	lsrs	r7, r1, #29
 8001e50:	00c9      	lsls	r1, r1, #3
 8001e52:	08c9      	lsrs	r1, r1, #3
 8001e54:	077f      	lsls	r7, r7, #29
 8001e56:	430f      	orrs	r7, r1
 8001e58:	e618      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001e5a:	000c      	movs	r4, r1
 8001e5c:	0030      	movs	r0, r6
 8001e5e:	3c20      	subs	r4, #32
 8001e60:	40e0      	lsrs	r0, r4
 8001e62:	4684      	mov	ip, r0
 8001e64:	2920      	cmp	r1, #32
 8001e66:	d005      	beq.n	8001e74 <__aeabi_dadd+0x6b0>
 8001e68:	2440      	movs	r4, #64	@ 0x40
 8001e6a:	1a61      	subs	r1, r4, r1
 8001e6c:	408e      	lsls	r6, r1
 8001e6e:	4649      	mov	r1, r9
 8001e70:	4331      	orrs	r1, r6
 8001e72:	4689      	mov	r9, r1
 8001e74:	4648      	mov	r0, r9
 8001e76:	1e41      	subs	r1, r0, #1
 8001e78:	4188      	sbcs	r0, r1
 8001e7a:	4661      	mov	r1, ip
 8001e7c:	0007      	movs	r7, r0
 8001e7e:	430f      	orrs	r7, r1
 8001e80:	e630      	b.n	8001ae4 <__aeabi_dadd+0x320>
 8001e82:	2120      	movs	r1, #32
 8001e84:	2700      	movs	r7, #0
 8001e86:	1a09      	subs	r1, r1, r0
 8001e88:	e50e      	b.n	80018a8 <__aeabi_dadd+0xe4>
 8001e8a:	001e      	movs	r6, r3
 8001e8c:	2f00      	cmp	r7, #0
 8001e8e:	d000      	beq.n	8001e92 <__aeabi_dadd+0x6ce>
 8001e90:	e522      	b.n	80018d8 <__aeabi_dadd+0x114>
 8001e92:	2400      	movs	r4, #0
 8001e94:	e758      	b.n	8001d48 <__aeabi_dadd+0x584>
 8001e96:	2500      	movs	r5, #0
 8001e98:	2400      	movs	r4, #0
 8001e9a:	2600      	movs	r6, #0
 8001e9c:	e5db      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	000007fe 	.word	0x000007fe
 8001ea4:	000007ff 	.word	0x000007ff
 8001ea8:	ff7fffff 	.word	0xff7fffff
 8001eac:	4647      	mov	r7, r8
 8001eae:	430f      	orrs	r7, r1
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dadd+0x6f0>
 8001eb2:	e747      	b.n	8001d44 <__aeabi_dadd+0x580>
 8001eb4:	000e      	movs	r6, r1
 8001eb6:	46c1      	mov	r9, r8
 8001eb8:	e5b5      	b.n	8001a26 <__aeabi_dadd+0x262>
 8001eba:	08df      	lsrs	r7, r3, #3
 8001ebc:	0764      	lsls	r4, r4, #29
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4327      	orrs	r7, r4
 8001ec2:	0900      	lsrs	r0, r0, #4
 8001ec4:	e5b5      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	08c0      	lsrs	r0, r0, #3
 8001eca:	0777      	lsls	r7, r6, #29
 8001ecc:	4307      	orrs	r7, r0
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	08f0      	lsrs	r0, r6, #3
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dadd+0x714>
 8001ed6:	e5d9      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	0309      	lsls	r1, r1, #12
 8001edc:	4208      	tst	r0, r1
 8001ede:	d007      	beq.n	8001ef0 <__aeabi_dadd+0x72c>
 8001ee0:	08dc      	lsrs	r4, r3, #3
 8001ee2:	420c      	tst	r4, r1
 8001ee4:	d104      	bne.n	8001ef0 <__aeabi_dadd+0x72c>
 8001ee6:	08d2      	lsrs	r2, r2, #3
 8001ee8:	075b      	lsls	r3, r3, #29
 8001eea:	431a      	orrs	r2, r3
 8001eec:	0017      	movs	r7, r2
 8001eee:	0020      	movs	r0, r4
 8001ef0:	0f7b      	lsrs	r3, r7, #29
 8001ef2:	00ff      	lsls	r7, r7, #3
 8001ef4:	08ff      	lsrs	r7, r7, #3
 8001ef6:	075b      	lsls	r3, r3, #29
 8001ef8:	431f      	orrs	r7, r3
 8001efa:	e5c7      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001efc:	000f      	movs	r7, r1
 8001efe:	e5c5      	b.n	8001a8c <__aeabi_dadd+0x2c8>
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <__aeabi_dadd+0x788>)
 8001f02:	08d2      	lsrs	r2, r2, #3
 8001f04:	4033      	ands	r3, r6
 8001f06:	075f      	lsls	r7, r3, #29
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	2401      	movs	r4, #1
 8001f0c:	4317      	orrs	r7, r2
 8001f0e:	0b1e      	lsrs	r6, r3, #12
 8001f10:	e5a1      	b.n	8001a56 <__aeabi_dadd+0x292>
 8001f12:	4226      	tst	r6, r4
 8001f14:	d012      	beq.n	8001f3c <__aeabi_dadd+0x778>
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <__aeabi_dadd+0x788>)
 8001f18:	4665      	mov	r5, ip
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	2401      	movs	r4, #1
 8001f1e:	401e      	ands	r6, r3
 8001f20:	e4e6      	b.n	80018f0 <__aeabi_dadd+0x12c>
 8001f22:	0021      	movs	r1, r4
 8001f24:	e585      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001f26:	0017      	movs	r7, r2
 8001f28:	e5a8      	b.n	8001a7c <__aeabi_dadd+0x2b8>
 8001f2a:	003a      	movs	r2, r7
 8001f2c:	e4d4      	b.n	80018d8 <__aeabi_dadd+0x114>
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	0764      	lsls	r4, r4, #29
 8001f32:	431c      	orrs	r4, r3
 8001f34:	0027      	movs	r7, r4
 8001f36:	2102      	movs	r1, #2
 8001f38:	0900      	lsrs	r0, r0, #4
 8001f3a:	e57a      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001f3c:	08c0      	lsrs	r0, r0, #3
 8001f3e:	0777      	lsls	r7, r6, #29
 8001f40:	4307      	orrs	r7, r0
 8001f42:	4665      	mov	r5, ip
 8001f44:	2100      	movs	r1, #0
 8001f46:	08f0      	lsrs	r0, r6, #3
 8001f48:	e573      	b.n	8001a32 <__aeabi_dadd+0x26e>
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	ff7fffff 	.word	0xff7fffff

08001f50 <__aeabi_ddiv>:
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f52:	46de      	mov	lr, fp
 8001f54:	4645      	mov	r5, r8
 8001f56:	4657      	mov	r7, sl
 8001f58:	464e      	mov	r6, r9
 8001f5a:	b5e0      	push	{r5, r6, r7, lr}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	030b      	lsls	r3, r1, #12
 8001f64:	0b1b      	lsrs	r3, r3, #12
 8001f66:	469b      	mov	fp, r3
 8001f68:	0fca      	lsrs	r2, r1, #31
 8001f6a:	004b      	lsls	r3, r1, #1
 8001f6c:	0004      	movs	r4, r0
 8001f6e:	4680      	mov	r8, r0
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	9202      	str	r2, [sp, #8]
 8001f74:	d100      	bne.n	8001f78 <__aeabi_ddiv+0x28>
 8001f76:	e098      	b.n	80020aa <__aeabi_ddiv+0x15a>
 8001f78:	4a7c      	ldr	r2, [pc, #496]	@ (800216c <__aeabi_ddiv+0x21c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d037      	beq.n	8001fee <__aeabi_ddiv+0x9e>
 8001f7e:	4659      	mov	r1, fp
 8001f80:	0f42      	lsrs	r2, r0, #29
 8001f82:	00c9      	lsls	r1, r1, #3
 8001f84:	430a      	orrs	r2, r1
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	0409      	lsls	r1, r1, #16
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	00c2      	lsls	r2, r0, #3
 8001f8e:	4690      	mov	r8, r2
 8001f90:	4a77      	ldr	r2, [pc, #476]	@ (8002170 <__aeabi_ddiv+0x220>)
 8001f92:	4689      	mov	r9, r1
 8001f94:	4692      	mov	sl, r2
 8001f96:	449a      	add	sl, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2400      	movs	r4, #0
 8001f9c:	9303      	str	r3, [sp, #12]
 8001f9e:	9e00      	ldr	r6, [sp, #0]
 8001fa0:	9f01      	ldr	r7, [sp, #4]
 8001fa2:	033b      	lsls	r3, r7, #12
 8001fa4:	0b1b      	lsrs	r3, r3, #12
 8001fa6:	469b      	mov	fp, r3
 8001fa8:	007b      	lsls	r3, r7, #1
 8001faa:	0030      	movs	r0, r6
 8001fac:	0d5b      	lsrs	r3, r3, #21
 8001fae:	0ffd      	lsrs	r5, r7, #31
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d059      	beq.n	8002068 <__aeabi_ddiv+0x118>
 8001fb4:	4a6d      	ldr	r2, [pc, #436]	@ (800216c <__aeabi_ddiv+0x21c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d048      	beq.n	800204c <__aeabi_ddiv+0xfc>
 8001fba:	4659      	mov	r1, fp
 8001fbc:	0f72      	lsrs	r2, r6, #29
 8001fbe:	00c9      	lsls	r1, r1, #3
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	0409      	lsls	r1, r1, #16
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	468b      	mov	fp, r1
 8001fca:	4969      	ldr	r1, [pc, #420]	@ (8002170 <__aeabi_ddiv+0x220>)
 8001fcc:	00f2      	lsls	r2, r6, #3
 8001fce:	468c      	mov	ip, r1
 8001fd0:	4651      	mov	r1, sl
 8001fd2:	4463      	add	r3, ip
 8001fd4:	1acb      	subs	r3, r1, r3
 8001fd6:	469a      	mov	sl, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	9e02      	ldr	r6, [sp, #8]
 8001fdc:	406e      	eors	r6, r5
 8001fde:	b2f6      	uxtb	r6, r6
 8001fe0:	2c0f      	cmp	r4, #15
 8001fe2:	d900      	bls.n	8001fe6 <__aeabi_ddiv+0x96>
 8001fe4:	e0ce      	b.n	8002184 <__aeabi_ddiv+0x234>
 8001fe6:	4b63      	ldr	r3, [pc, #396]	@ (8002174 <__aeabi_ddiv+0x224>)
 8001fe8:	00a4      	lsls	r4, r4, #2
 8001fea:	591b      	ldr	r3, [r3, r4]
 8001fec:	469f      	mov	pc, r3
 8001fee:	465a      	mov	r2, fp
 8001ff0:	4302      	orrs	r2, r0
 8001ff2:	4691      	mov	r9, r2
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_ddiv+0xa8>
 8001ff6:	e090      	b.n	800211a <__aeabi_ddiv+0x1ca>
 8001ff8:	469a      	mov	sl, r3
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	4690      	mov	r8, r2
 8001ffe:	2408      	movs	r4, #8
 8002000:	9303      	str	r3, [sp, #12]
 8002002:	e7cc      	b.n	8001f9e <__aeabi_ddiv+0x4e>
 8002004:	46cb      	mov	fp, r9
 8002006:	4642      	mov	r2, r8
 8002008:	9d02      	ldr	r5, [sp, #8]
 800200a:	9903      	ldr	r1, [sp, #12]
 800200c:	2902      	cmp	r1, #2
 800200e:	d100      	bne.n	8002012 <__aeabi_ddiv+0xc2>
 8002010:	e1de      	b.n	80023d0 <__aeabi_ddiv+0x480>
 8002012:	2903      	cmp	r1, #3
 8002014:	d100      	bne.n	8002018 <__aeabi_ddiv+0xc8>
 8002016:	e08d      	b.n	8002134 <__aeabi_ddiv+0x1e4>
 8002018:	2901      	cmp	r1, #1
 800201a:	d000      	beq.n	800201e <__aeabi_ddiv+0xce>
 800201c:	e179      	b.n	8002312 <__aeabi_ddiv+0x3c2>
 800201e:	002e      	movs	r6, r5
 8002020:	2200      	movs	r2, #0
 8002022:	2300      	movs	r3, #0
 8002024:	2400      	movs	r4, #0
 8002026:	4690      	mov	r8, r2
 8002028:	051b      	lsls	r3, r3, #20
 800202a:	4323      	orrs	r3, r4
 800202c:	07f6      	lsls	r6, r6, #31
 800202e:	4333      	orrs	r3, r6
 8002030:	4640      	mov	r0, r8
 8002032:	0019      	movs	r1, r3
 8002034:	b007      	add	sp, #28
 8002036:	bcf0      	pop	{r4, r5, r6, r7}
 8002038:	46bb      	mov	fp, r7
 800203a:	46b2      	mov	sl, r6
 800203c:	46a9      	mov	r9, r5
 800203e:	46a0      	mov	r8, r4
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002042:	2200      	movs	r2, #0
 8002044:	2400      	movs	r4, #0
 8002046:	4690      	mov	r8, r2
 8002048:	4b48      	ldr	r3, [pc, #288]	@ (800216c <__aeabi_ddiv+0x21c>)
 800204a:	e7ed      	b.n	8002028 <__aeabi_ddiv+0xd8>
 800204c:	465a      	mov	r2, fp
 800204e:	9b00      	ldr	r3, [sp, #0]
 8002050:	431a      	orrs	r2, r3
 8002052:	4b49      	ldr	r3, [pc, #292]	@ (8002178 <__aeabi_ddiv+0x228>)
 8002054:	469c      	mov	ip, r3
 8002056:	44e2      	add	sl, ip
 8002058:	2a00      	cmp	r2, #0
 800205a:	d159      	bne.n	8002110 <__aeabi_ddiv+0x1c0>
 800205c:	2302      	movs	r3, #2
 800205e:	431c      	orrs	r4, r3
 8002060:	2300      	movs	r3, #0
 8002062:	2102      	movs	r1, #2
 8002064:	469b      	mov	fp, r3
 8002066:	e7b8      	b.n	8001fda <__aeabi_ddiv+0x8a>
 8002068:	465a      	mov	r2, fp
 800206a:	9b00      	ldr	r3, [sp, #0]
 800206c:	431a      	orrs	r2, r3
 800206e:	d049      	beq.n	8002104 <__aeabi_ddiv+0x1b4>
 8002070:	465b      	mov	r3, fp
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x128>
 8002076:	e19c      	b.n	80023b2 <__aeabi_ddiv+0x462>
 8002078:	4658      	mov	r0, fp
 800207a:	f7fe fa4f 	bl	800051c <__clzsi2>
 800207e:	0002      	movs	r2, r0
 8002080:	0003      	movs	r3, r0
 8002082:	3a0b      	subs	r2, #11
 8002084:	271d      	movs	r7, #29
 8002086:	9e00      	ldr	r6, [sp, #0]
 8002088:	1aba      	subs	r2, r7, r2
 800208a:	0019      	movs	r1, r3
 800208c:	4658      	mov	r0, fp
 800208e:	40d6      	lsrs	r6, r2
 8002090:	3908      	subs	r1, #8
 8002092:	4088      	lsls	r0, r1
 8002094:	0032      	movs	r2, r6
 8002096:	4302      	orrs	r2, r0
 8002098:	4693      	mov	fp, r2
 800209a:	9a00      	ldr	r2, [sp, #0]
 800209c:	408a      	lsls	r2, r1
 800209e:	4937      	ldr	r1, [pc, #220]	@ (800217c <__aeabi_ddiv+0x22c>)
 80020a0:	4453      	add	r3, sl
 80020a2:	468a      	mov	sl, r1
 80020a4:	2100      	movs	r1, #0
 80020a6:	449a      	add	sl, r3
 80020a8:	e797      	b.n	8001fda <__aeabi_ddiv+0x8a>
 80020aa:	465b      	mov	r3, fp
 80020ac:	4303      	orrs	r3, r0
 80020ae:	4699      	mov	r9, r3
 80020b0:	d021      	beq.n	80020f6 <__aeabi_ddiv+0x1a6>
 80020b2:	465b      	mov	r3, fp
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_ddiv+0x16a>
 80020b8:	e169      	b.n	800238e <__aeabi_ddiv+0x43e>
 80020ba:	4658      	mov	r0, fp
 80020bc:	f7fe fa2e 	bl	800051c <__clzsi2>
 80020c0:	230b      	movs	r3, #11
 80020c2:	425b      	negs	r3, r3
 80020c4:	469c      	mov	ip, r3
 80020c6:	0002      	movs	r2, r0
 80020c8:	4484      	add	ip, r0
 80020ca:	4666      	mov	r6, ip
 80020cc:	231d      	movs	r3, #29
 80020ce:	1b9b      	subs	r3, r3, r6
 80020d0:	0026      	movs	r6, r4
 80020d2:	0011      	movs	r1, r2
 80020d4:	4658      	mov	r0, fp
 80020d6:	40de      	lsrs	r6, r3
 80020d8:	3908      	subs	r1, #8
 80020da:	4088      	lsls	r0, r1
 80020dc:	0033      	movs	r3, r6
 80020de:	4303      	orrs	r3, r0
 80020e0:	4699      	mov	r9, r3
 80020e2:	0023      	movs	r3, r4
 80020e4:	408b      	lsls	r3, r1
 80020e6:	4698      	mov	r8, r3
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <__aeabi_ddiv+0x230>)
 80020ea:	2400      	movs	r4, #0
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	469a      	mov	sl, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	9303      	str	r3, [sp, #12]
 80020f4:	e753      	b.n	8001f9e <__aeabi_ddiv+0x4e>
 80020f6:	2300      	movs	r3, #0
 80020f8:	4698      	mov	r8, r3
 80020fa:	469a      	mov	sl, r3
 80020fc:	3301      	adds	r3, #1
 80020fe:	2404      	movs	r4, #4
 8002100:	9303      	str	r3, [sp, #12]
 8002102:	e74c      	b.n	8001f9e <__aeabi_ddiv+0x4e>
 8002104:	2301      	movs	r3, #1
 8002106:	431c      	orrs	r4, r3
 8002108:	2300      	movs	r3, #0
 800210a:	2101      	movs	r1, #1
 800210c:	469b      	mov	fp, r3
 800210e:	e764      	b.n	8001fda <__aeabi_ddiv+0x8a>
 8002110:	2303      	movs	r3, #3
 8002112:	0032      	movs	r2, r6
 8002114:	2103      	movs	r1, #3
 8002116:	431c      	orrs	r4, r3
 8002118:	e75f      	b.n	8001fda <__aeabi_ddiv+0x8a>
 800211a:	469a      	mov	sl, r3
 800211c:	2303      	movs	r3, #3
 800211e:	46d9      	mov	r9, fp
 8002120:	240c      	movs	r4, #12
 8002122:	9303      	str	r3, [sp, #12]
 8002124:	e73b      	b.n	8001f9e <__aeabi_ddiv+0x4e>
 8002126:	2300      	movs	r3, #0
 8002128:	2480      	movs	r4, #128	@ 0x80
 800212a:	4698      	mov	r8, r3
 800212c:	2600      	movs	r6, #0
 800212e:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <__aeabi_ddiv+0x21c>)
 8002130:	0324      	lsls	r4, r4, #12
 8002132:	e779      	b.n	8002028 <__aeabi_ddiv+0xd8>
 8002134:	2480      	movs	r4, #128	@ 0x80
 8002136:	465b      	mov	r3, fp
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	431c      	orrs	r4, r3
 800213c:	0324      	lsls	r4, r4, #12
 800213e:	002e      	movs	r6, r5
 8002140:	4690      	mov	r8, r2
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <__aeabi_ddiv+0x21c>)
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	e76f      	b.n	8002028 <__aeabi_ddiv+0xd8>
 8002148:	2480      	movs	r4, #128	@ 0x80
 800214a:	464b      	mov	r3, r9
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	4223      	tst	r3, r4
 8002150:	d002      	beq.n	8002158 <__aeabi_ddiv+0x208>
 8002152:	465b      	mov	r3, fp
 8002154:	4223      	tst	r3, r4
 8002156:	d0f0      	beq.n	800213a <__aeabi_ddiv+0x1ea>
 8002158:	2480      	movs	r4, #128	@ 0x80
 800215a:	464b      	mov	r3, r9
 800215c:	0324      	lsls	r4, r4, #12
 800215e:	431c      	orrs	r4, r3
 8002160:	0324      	lsls	r4, r4, #12
 8002162:	9e02      	ldr	r6, [sp, #8]
 8002164:	4b01      	ldr	r3, [pc, #4]	@ (800216c <__aeabi_ddiv+0x21c>)
 8002166:	0b24      	lsrs	r4, r4, #12
 8002168:	e75e      	b.n	8002028 <__aeabi_ddiv+0xd8>
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	000007ff 	.word	0x000007ff
 8002170:	fffffc01 	.word	0xfffffc01
 8002174:	08012080 	.word	0x08012080
 8002178:	fffff801 	.word	0xfffff801
 800217c:	000003f3 	.word	0x000003f3
 8002180:	fffffc0d 	.word	0xfffffc0d
 8002184:	45cb      	cmp	fp, r9
 8002186:	d200      	bcs.n	800218a <__aeabi_ddiv+0x23a>
 8002188:	e0f8      	b.n	800237c <__aeabi_ddiv+0x42c>
 800218a:	d100      	bne.n	800218e <__aeabi_ddiv+0x23e>
 800218c:	e0f3      	b.n	8002376 <__aeabi_ddiv+0x426>
 800218e:	2301      	movs	r3, #1
 8002190:	425b      	negs	r3, r3
 8002192:	469c      	mov	ip, r3
 8002194:	4644      	mov	r4, r8
 8002196:	4648      	mov	r0, r9
 8002198:	2500      	movs	r5, #0
 800219a:	44e2      	add	sl, ip
 800219c:	465b      	mov	r3, fp
 800219e:	0e17      	lsrs	r7, r2, #24
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	431f      	orrs	r7, r3
 80021a4:	0c19      	lsrs	r1, r3, #16
 80021a6:	043b      	lsls	r3, r7, #16
 80021a8:	0212      	lsls	r2, r2, #8
 80021aa:	9700      	str	r7, [sp, #0]
 80021ac:	0c1f      	lsrs	r7, r3, #16
 80021ae:	4691      	mov	r9, r2
 80021b0:	9102      	str	r1, [sp, #8]
 80021b2:	9703      	str	r7, [sp, #12]
 80021b4:	f7fe f84a 	bl	800024c <__aeabi_uidivmod>
 80021b8:	0002      	movs	r2, r0
 80021ba:	437a      	muls	r2, r7
 80021bc:	040b      	lsls	r3, r1, #16
 80021be:	0c21      	lsrs	r1, r4, #16
 80021c0:	4680      	mov	r8, r0
 80021c2:	4319      	orrs	r1, r3
 80021c4:	428a      	cmp	r2, r1
 80021c6:	d909      	bls.n	80021dc <__aeabi_ddiv+0x28c>
 80021c8:	9f00      	ldr	r7, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	46bc      	mov	ip, r7
 80021ce:	425b      	negs	r3, r3
 80021d0:	4461      	add	r1, ip
 80021d2:	469c      	mov	ip, r3
 80021d4:	44e0      	add	r8, ip
 80021d6:	428f      	cmp	r7, r1
 80021d8:	d800      	bhi.n	80021dc <__aeabi_ddiv+0x28c>
 80021da:	e15c      	b.n	8002496 <__aeabi_ddiv+0x546>
 80021dc:	1a88      	subs	r0, r1, r2
 80021de:	9902      	ldr	r1, [sp, #8]
 80021e0:	f7fe f834 	bl	800024c <__aeabi_uidivmod>
 80021e4:	9a03      	ldr	r2, [sp, #12]
 80021e6:	0424      	lsls	r4, r4, #16
 80021e8:	4342      	muls	r2, r0
 80021ea:	0409      	lsls	r1, r1, #16
 80021ec:	0c24      	lsrs	r4, r4, #16
 80021ee:	0003      	movs	r3, r0
 80021f0:	430c      	orrs	r4, r1
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d906      	bls.n	8002204 <__aeabi_ddiv+0x2b4>
 80021f6:	9900      	ldr	r1, [sp, #0]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	468c      	mov	ip, r1
 80021fc:	4464      	add	r4, ip
 80021fe:	42a1      	cmp	r1, r4
 8002200:	d800      	bhi.n	8002204 <__aeabi_ddiv+0x2b4>
 8002202:	e142      	b.n	800248a <__aeabi_ddiv+0x53a>
 8002204:	1aa0      	subs	r0, r4, r2
 8002206:	4642      	mov	r2, r8
 8002208:	0412      	lsls	r2, r2, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	4693      	mov	fp, r2
 800220e:	464b      	mov	r3, r9
 8002210:	4659      	mov	r1, fp
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	001f      	movs	r7, r3
 8002216:	9304      	str	r3, [sp, #16]
 8002218:	040b      	lsls	r3, r1, #16
 800221a:	4649      	mov	r1, r9
 800221c:	0409      	lsls	r1, r1, #16
 800221e:	0c09      	lsrs	r1, r1, #16
 8002220:	000c      	movs	r4, r1
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	435c      	muls	r4, r3
 8002226:	0c12      	lsrs	r2, r2, #16
 8002228:	437b      	muls	r3, r7
 800222a:	4688      	mov	r8, r1
 800222c:	4351      	muls	r1, r2
 800222e:	437a      	muls	r2, r7
 8002230:	0c27      	lsrs	r7, r4, #16
 8002232:	46bc      	mov	ip, r7
 8002234:	185b      	adds	r3, r3, r1
 8002236:	4463      	add	r3, ip
 8002238:	4299      	cmp	r1, r3
 800223a:	d903      	bls.n	8002244 <__aeabi_ddiv+0x2f4>
 800223c:	2180      	movs	r1, #128	@ 0x80
 800223e:	0249      	lsls	r1, r1, #9
 8002240:	468c      	mov	ip, r1
 8002242:	4462      	add	r2, ip
 8002244:	0c19      	lsrs	r1, r3, #16
 8002246:	0424      	lsls	r4, r4, #16
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	0c24      	lsrs	r4, r4, #16
 800224c:	188a      	adds	r2, r1, r2
 800224e:	191c      	adds	r4, r3, r4
 8002250:	4290      	cmp	r0, r2
 8002252:	d302      	bcc.n	800225a <__aeabi_ddiv+0x30a>
 8002254:	d116      	bne.n	8002284 <__aeabi_ddiv+0x334>
 8002256:	42a5      	cmp	r5, r4
 8002258:	d214      	bcs.n	8002284 <__aeabi_ddiv+0x334>
 800225a:	465b      	mov	r3, fp
 800225c:	9f00      	ldr	r7, [sp, #0]
 800225e:	3b01      	subs	r3, #1
 8002260:	444d      	add	r5, r9
 8002262:	9305      	str	r3, [sp, #20]
 8002264:	454d      	cmp	r5, r9
 8002266:	419b      	sbcs	r3, r3
 8002268:	46bc      	mov	ip, r7
 800226a:	425b      	negs	r3, r3
 800226c:	4463      	add	r3, ip
 800226e:	18c0      	adds	r0, r0, r3
 8002270:	4287      	cmp	r7, r0
 8002272:	d300      	bcc.n	8002276 <__aeabi_ddiv+0x326>
 8002274:	e102      	b.n	800247c <__aeabi_ddiv+0x52c>
 8002276:	4282      	cmp	r2, r0
 8002278:	d900      	bls.n	800227c <__aeabi_ddiv+0x32c>
 800227a:	e129      	b.n	80024d0 <__aeabi_ddiv+0x580>
 800227c:	d100      	bne.n	8002280 <__aeabi_ddiv+0x330>
 800227e:	e124      	b.n	80024ca <__aeabi_ddiv+0x57a>
 8002280:	9b05      	ldr	r3, [sp, #20]
 8002282:	469b      	mov	fp, r3
 8002284:	1b2c      	subs	r4, r5, r4
 8002286:	42a5      	cmp	r5, r4
 8002288:	41ad      	sbcs	r5, r5
 800228a:	9b00      	ldr	r3, [sp, #0]
 800228c:	1a80      	subs	r0, r0, r2
 800228e:	426d      	negs	r5, r5
 8002290:	1b40      	subs	r0, r0, r5
 8002292:	4283      	cmp	r3, r0
 8002294:	d100      	bne.n	8002298 <__aeabi_ddiv+0x348>
 8002296:	e10f      	b.n	80024b8 <__aeabi_ddiv+0x568>
 8002298:	9902      	ldr	r1, [sp, #8]
 800229a:	f7fd ffd7 	bl	800024c <__aeabi_uidivmod>
 800229e:	9a03      	ldr	r2, [sp, #12]
 80022a0:	040b      	lsls	r3, r1, #16
 80022a2:	4342      	muls	r2, r0
 80022a4:	0c21      	lsrs	r1, r4, #16
 80022a6:	0005      	movs	r5, r0
 80022a8:	4319      	orrs	r1, r3
 80022aa:	428a      	cmp	r2, r1
 80022ac:	d900      	bls.n	80022b0 <__aeabi_ddiv+0x360>
 80022ae:	e0cb      	b.n	8002448 <__aeabi_ddiv+0x4f8>
 80022b0:	1a88      	subs	r0, r1, r2
 80022b2:	9902      	ldr	r1, [sp, #8]
 80022b4:	f7fd ffca 	bl	800024c <__aeabi_uidivmod>
 80022b8:	9a03      	ldr	r2, [sp, #12]
 80022ba:	0424      	lsls	r4, r4, #16
 80022bc:	4342      	muls	r2, r0
 80022be:	0409      	lsls	r1, r1, #16
 80022c0:	0c24      	lsrs	r4, r4, #16
 80022c2:	0003      	movs	r3, r0
 80022c4:	430c      	orrs	r4, r1
 80022c6:	42a2      	cmp	r2, r4
 80022c8:	d900      	bls.n	80022cc <__aeabi_ddiv+0x37c>
 80022ca:	e0ca      	b.n	8002462 <__aeabi_ddiv+0x512>
 80022cc:	4641      	mov	r1, r8
 80022ce:	1aa4      	subs	r4, r4, r2
 80022d0:	042a      	lsls	r2, r5, #16
 80022d2:	431a      	orrs	r2, r3
 80022d4:	9f04      	ldr	r7, [sp, #16]
 80022d6:	0413      	lsls	r3, r2, #16
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	4359      	muls	r1, r3
 80022dc:	4640      	mov	r0, r8
 80022de:	437b      	muls	r3, r7
 80022e0:	469c      	mov	ip, r3
 80022e2:	0c15      	lsrs	r5, r2, #16
 80022e4:	4368      	muls	r0, r5
 80022e6:	0c0b      	lsrs	r3, r1, #16
 80022e8:	4484      	add	ip, r0
 80022ea:	4463      	add	r3, ip
 80022ec:	437d      	muls	r5, r7
 80022ee:	4298      	cmp	r0, r3
 80022f0:	d903      	bls.n	80022fa <__aeabi_ddiv+0x3aa>
 80022f2:	2080      	movs	r0, #128	@ 0x80
 80022f4:	0240      	lsls	r0, r0, #9
 80022f6:	4684      	mov	ip, r0
 80022f8:	4465      	add	r5, ip
 80022fa:	0c18      	lsrs	r0, r3, #16
 80022fc:	0409      	lsls	r1, r1, #16
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	0c09      	lsrs	r1, r1, #16
 8002302:	1940      	adds	r0, r0, r5
 8002304:	185b      	adds	r3, r3, r1
 8002306:	4284      	cmp	r4, r0
 8002308:	d327      	bcc.n	800235a <__aeabi_ddiv+0x40a>
 800230a:	d023      	beq.n	8002354 <__aeabi_ddiv+0x404>
 800230c:	2301      	movs	r3, #1
 800230e:	0035      	movs	r5, r6
 8002310:	431a      	orrs	r2, r3
 8002312:	4b94      	ldr	r3, [pc, #592]	@ (8002564 <__aeabi_ddiv+0x614>)
 8002314:	4453      	add	r3, sl
 8002316:	2b00      	cmp	r3, #0
 8002318:	dd60      	ble.n	80023dc <__aeabi_ddiv+0x48c>
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d000      	beq.n	8002320 <__aeabi_ddiv+0x3d0>
 800231e:	e086      	b.n	800242e <__aeabi_ddiv+0x4de>
 8002320:	002e      	movs	r6, r5
 8002322:	08d1      	lsrs	r1, r2, #3
 8002324:	465a      	mov	r2, fp
 8002326:	01d2      	lsls	r2, r2, #7
 8002328:	d506      	bpl.n	8002338 <__aeabi_ddiv+0x3e8>
 800232a:	465a      	mov	r2, fp
 800232c:	4b8e      	ldr	r3, [pc, #568]	@ (8002568 <__aeabi_ddiv+0x618>)
 800232e:	401a      	ands	r2, r3
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	4693      	mov	fp, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4453      	add	r3, sl
 8002338:	4a8c      	ldr	r2, [pc, #560]	@ (800256c <__aeabi_ddiv+0x61c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	dd00      	ble.n	8002340 <__aeabi_ddiv+0x3f0>
 800233e:	e680      	b.n	8002042 <__aeabi_ddiv+0xf2>
 8002340:	465a      	mov	r2, fp
 8002342:	0752      	lsls	r2, r2, #29
 8002344:	430a      	orrs	r2, r1
 8002346:	4690      	mov	r8, r2
 8002348:	465a      	mov	r2, fp
 800234a:	055b      	lsls	r3, r3, #21
 800234c:	0254      	lsls	r4, r2, #9
 800234e:	0b24      	lsrs	r4, r4, #12
 8002350:	0d5b      	lsrs	r3, r3, #21
 8002352:	e669      	b.n	8002028 <__aeabi_ddiv+0xd8>
 8002354:	0035      	movs	r5, r6
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0db      	beq.n	8002312 <__aeabi_ddiv+0x3c2>
 800235a:	9d00      	ldr	r5, [sp, #0]
 800235c:	1e51      	subs	r1, r2, #1
 800235e:	46ac      	mov	ip, r5
 8002360:	4464      	add	r4, ip
 8002362:	42ac      	cmp	r4, r5
 8002364:	d200      	bcs.n	8002368 <__aeabi_ddiv+0x418>
 8002366:	e09e      	b.n	80024a6 <__aeabi_ddiv+0x556>
 8002368:	4284      	cmp	r4, r0
 800236a:	d200      	bcs.n	800236e <__aeabi_ddiv+0x41e>
 800236c:	e0e1      	b.n	8002532 <__aeabi_ddiv+0x5e2>
 800236e:	d100      	bne.n	8002372 <__aeabi_ddiv+0x422>
 8002370:	e0ee      	b.n	8002550 <__aeabi_ddiv+0x600>
 8002372:	000a      	movs	r2, r1
 8002374:	e7ca      	b.n	800230c <__aeabi_ddiv+0x3bc>
 8002376:	4542      	cmp	r2, r8
 8002378:	d900      	bls.n	800237c <__aeabi_ddiv+0x42c>
 800237a:	e708      	b.n	800218e <__aeabi_ddiv+0x23e>
 800237c:	464b      	mov	r3, r9
 800237e:	07dc      	lsls	r4, r3, #31
 8002380:	0858      	lsrs	r0, r3, #1
 8002382:	4643      	mov	r3, r8
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	431c      	orrs	r4, r3
 8002388:	4643      	mov	r3, r8
 800238a:	07dd      	lsls	r5, r3, #31
 800238c:	e706      	b.n	800219c <__aeabi_ddiv+0x24c>
 800238e:	f7fe f8c5 	bl	800051c <__clzsi2>
 8002392:	2315      	movs	r3, #21
 8002394:	469c      	mov	ip, r3
 8002396:	4484      	add	ip, r0
 8002398:	0002      	movs	r2, r0
 800239a:	4663      	mov	r3, ip
 800239c:	3220      	adds	r2, #32
 800239e:	2b1c      	cmp	r3, #28
 80023a0:	dc00      	bgt.n	80023a4 <__aeabi_ddiv+0x454>
 80023a2:	e692      	b.n	80020ca <__aeabi_ddiv+0x17a>
 80023a4:	0023      	movs	r3, r4
 80023a6:	3808      	subs	r0, #8
 80023a8:	4083      	lsls	r3, r0
 80023aa:	4699      	mov	r9, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	4698      	mov	r8, r3
 80023b0:	e69a      	b.n	80020e8 <__aeabi_ddiv+0x198>
 80023b2:	f7fe f8b3 	bl	800051c <__clzsi2>
 80023b6:	0002      	movs	r2, r0
 80023b8:	0003      	movs	r3, r0
 80023ba:	3215      	adds	r2, #21
 80023bc:	3320      	adds	r3, #32
 80023be:	2a1c      	cmp	r2, #28
 80023c0:	dc00      	bgt.n	80023c4 <__aeabi_ddiv+0x474>
 80023c2:	e65f      	b.n	8002084 <__aeabi_ddiv+0x134>
 80023c4:	9900      	ldr	r1, [sp, #0]
 80023c6:	3808      	subs	r0, #8
 80023c8:	4081      	lsls	r1, r0
 80023ca:	2200      	movs	r2, #0
 80023cc:	468b      	mov	fp, r1
 80023ce:	e666      	b.n	800209e <__aeabi_ddiv+0x14e>
 80023d0:	2200      	movs	r2, #0
 80023d2:	002e      	movs	r6, r5
 80023d4:	2400      	movs	r4, #0
 80023d6:	4690      	mov	r8, r2
 80023d8:	4b65      	ldr	r3, [pc, #404]	@ (8002570 <__aeabi_ddiv+0x620>)
 80023da:	e625      	b.n	8002028 <__aeabi_ddiv+0xd8>
 80023dc:	002e      	movs	r6, r5
 80023de:	2101      	movs	r1, #1
 80023e0:	1ac9      	subs	r1, r1, r3
 80023e2:	2938      	cmp	r1, #56	@ 0x38
 80023e4:	dd00      	ble.n	80023e8 <__aeabi_ddiv+0x498>
 80023e6:	e61b      	b.n	8002020 <__aeabi_ddiv+0xd0>
 80023e8:	291f      	cmp	r1, #31
 80023ea:	dc7e      	bgt.n	80024ea <__aeabi_ddiv+0x59a>
 80023ec:	4861      	ldr	r0, [pc, #388]	@ (8002574 <__aeabi_ddiv+0x624>)
 80023ee:	0014      	movs	r4, r2
 80023f0:	4450      	add	r0, sl
 80023f2:	465b      	mov	r3, fp
 80023f4:	4082      	lsls	r2, r0
 80023f6:	4083      	lsls	r3, r0
 80023f8:	40cc      	lsrs	r4, r1
 80023fa:	1e50      	subs	r0, r2, #1
 80023fc:	4182      	sbcs	r2, r0
 80023fe:	4323      	orrs	r3, r4
 8002400:	431a      	orrs	r2, r3
 8002402:	465b      	mov	r3, fp
 8002404:	40cb      	lsrs	r3, r1
 8002406:	0751      	lsls	r1, r2, #29
 8002408:	d009      	beq.n	800241e <__aeabi_ddiv+0x4ce>
 800240a:	210f      	movs	r1, #15
 800240c:	4011      	ands	r1, r2
 800240e:	2904      	cmp	r1, #4
 8002410:	d005      	beq.n	800241e <__aeabi_ddiv+0x4ce>
 8002412:	1d11      	adds	r1, r2, #4
 8002414:	4291      	cmp	r1, r2
 8002416:	4192      	sbcs	r2, r2
 8002418:	4252      	negs	r2, r2
 800241a:	189b      	adds	r3, r3, r2
 800241c:	000a      	movs	r2, r1
 800241e:	0219      	lsls	r1, r3, #8
 8002420:	d400      	bmi.n	8002424 <__aeabi_ddiv+0x4d4>
 8002422:	e09b      	b.n	800255c <__aeabi_ddiv+0x60c>
 8002424:	2200      	movs	r2, #0
 8002426:	2301      	movs	r3, #1
 8002428:	2400      	movs	r4, #0
 800242a:	4690      	mov	r8, r2
 800242c:	e5fc      	b.n	8002028 <__aeabi_ddiv+0xd8>
 800242e:	210f      	movs	r1, #15
 8002430:	4011      	ands	r1, r2
 8002432:	2904      	cmp	r1, #4
 8002434:	d100      	bne.n	8002438 <__aeabi_ddiv+0x4e8>
 8002436:	e773      	b.n	8002320 <__aeabi_ddiv+0x3d0>
 8002438:	1d11      	adds	r1, r2, #4
 800243a:	4291      	cmp	r1, r2
 800243c:	4192      	sbcs	r2, r2
 800243e:	4252      	negs	r2, r2
 8002440:	002e      	movs	r6, r5
 8002442:	08c9      	lsrs	r1, r1, #3
 8002444:	4493      	add	fp, r2
 8002446:	e76d      	b.n	8002324 <__aeabi_ddiv+0x3d4>
 8002448:	9b00      	ldr	r3, [sp, #0]
 800244a:	3d01      	subs	r5, #1
 800244c:	469c      	mov	ip, r3
 800244e:	4461      	add	r1, ip
 8002450:	428b      	cmp	r3, r1
 8002452:	d900      	bls.n	8002456 <__aeabi_ddiv+0x506>
 8002454:	e72c      	b.n	80022b0 <__aeabi_ddiv+0x360>
 8002456:	428a      	cmp	r2, r1
 8002458:	d800      	bhi.n	800245c <__aeabi_ddiv+0x50c>
 800245a:	e729      	b.n	80022b0 <__aeabi_ddiv+0x360>
 800245c:	1e85      	subs	r5, r0, #2
 800245e:	4461      	add	r1, ip
 8002460:	e726      	b.n	80022b0 <__aeabi_ddiv+0x360>
 8002462:	9900      	ldr	r1, [sp, #0]
 8002464:	3b01      	subs	r3, #1
 8002466:	468c      	mov	ip, r1
 8002468:	4464      	add	r4, ip
 800246a:	42a1      	cmp	r1, r4
 800246c:	d900      	bls.n	8002470 <__aeabi_ddiv+0x520>
 800246e:	e72d      	b.n	80022cc <__aeabi_ddiv+0x37c>
 8002470:	42a2      	cmp	r2, r4
 8002472:	d800      	bhi.n	8002476 <__aeabi_ddiv+0x526>
 8002474:	e72a      	b.n	80022cc <__aeabi_ddiv+0x37c>
 8002476:	1e83      	subs	r3, r0, #2
 8002478:	4464      	add	r4, ip
 800247a:	e727      	b.n	80022cc <__aeabi_ddiv+0x37c>
 800247c:	4287      	cmp	r7, r0
 800247e:	d000      	beq.n	8002482 <__aeabi_ddiv+0x532>
 8002480:	e6fe      	b.n	8002280 <__aeabi_ddiv+0x330>
 8002482:	45a9      	cmp	r9, r5
 8002484:	d900      	bls.n	8002488 <__aeabi_ddiv+0x538>
 8002486:	e6fb      	b.n	8002280 <__aeabi_ddiv+0x330>
 8002488:	e6f5      	b.n	8002276 <__aeabi_ddiv+0x326>
 800248a:	42a2      	cmp	r2, r4
 800248c:	d800      	bhi.n	8002490 <__aeabi_ddiv+0x540>
 800248e:	e6b9      	b.n	8002204 <__aeabi_ddiv+0x2b4>
 8002490:	1e83      	subs	r3, r0, #2
 8002492:	4464      	add	r4, ip
 8002494:	e6b6      	b.n	8002204 <__aeabi_ddiv+0x2b4>
 8002496:	428a      	cmp	r2, r1
 8002498:	d800      	bhi.n	800249c <__aeabi_ddiv+0x54c>
 800249a:	e69f      	b.n	80021dc <__aeabi_ddiv+0x28c>
 800249c:	46bc      	mov	ip, r7
 800249e:	1e83      	subs	r3, r0, #2
 80024a0:	4698      	mov	r8, r3
 80024a2:	4461      	add	r1, ip
 80024a4:	e69a      	b.n	80021dc <__aeabi_ddiv+0x28c>
 80024a6:	000a      	movs	r2, r1
 80024a8:	4284      	cmp	r4, r0
 80024aa:	d000      	beq.n	80024ae <__aeabi_ddiv+0x55e>
 80024ac:	e72e      	b.n	800230c <__aeabi_ddiv+0x3bc>
 80024ae:	454b      	cmp	r3, r9
 80024b0:	d000      	beq.n	80024b4 <__aeabi_ddiv+0x564>
 80024b2:	e72b      	b.n	800230c <__aeabi_ddiv+0x3bc>
 80024b4:	0035      	movs	r5, r6
 80024b6:	e72c      	b.n	8002312 <__aeabi_ddiv+0x3c2>
 80024b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <__aeabi_ddiv+0x614>)
 80024ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002578 <__aeabi_ddiv+0x628>)
 80024bc:	4453      	add	r3, sl
 80024be:	4592      	cmp	sl, r2
 80024c0:	db43      	blt.n	800254a <__aeabi_ddiv+0x5fa>
 80024c2:	2201      	movs	r2, #1
 80024c4:	2100      	movs	r1, #0
 80024c6:	4493      	add	fp, r2
 80024c8:	e72c      	b.n	8002324 <__aeabi_ddiv+0x3d4>
 80024ca:	42ac      	cmp	r4, r5
 80024cc:	d800      	bhi.n	80024d0 <__aeabi_ddiv+0x580>
 80024ce:	e6d7      	b.n	8002280 <__aeabi_ddiv+0x330>
 80024d0:	2302      	movs	r3, #2
 80024d2:	425b      	negs	r3, r3
 80024d4:	469c      	mov	ip, r3
 80024d6:	9900      	ldr	r1, [sp, #0]
 80024d8:	444d      	add	r5, r9
 80024da:	454d      	cmp	r5, r9
 80024dc:	419b      	sbcs	r3, r3
 80024de:	44e3      	add	fp, ip
 80024e0:	468c      	mov	ip, r1
 80024e2:	425b      	negs	r3, r3
 80024e4:	4463      	add	r3, ip
 80024e6:	18c0      	adds	r0, r0, r3
 80024e8:	e6cc      	b.n	8002284 <__aeabi_ddiv+0x334>
 80024ea:	201f      	movs	r0, #31
 80024ec:	4240      	negs	r0, r0
 80024ee:	1ac3      	subs	r3, r0, r3
 80024f0:	4658      	mov	r0, fp
 80024f2:	40d8      	lsrs	r0, r3
 80024f4:	2920      	cmp	r1, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_ddiv+0x5b2>
 80024f8:	4659      	mov	r1, fp
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <__aeabi_ddiv+0x62c>)
 80024fc:	4453      	add	r3, sl
 80024fe:	4099      	lsls	r1, r3
 8002500:	430a      	orrs	r2, r1
 8002502:	1e53      	subs	r3, r2, #1
 8002504:	419a      	sbcs	r2, r3
 8002506:	2307      	movs	r3, #7
 8002508:	0019      	movs	r1, r3
 800250a:	4302      	orrs	r2, r0
 800250c:	2400      	movs	r4, #0
 800250e:	4011      	ands	r1, r2
 8002510:	4213      	tst	r3, r2
 8002512:	d009      	beq.n	8002528 <__aeabi_ddiv+0x5d8>
 8002514:	3308      	adds	r3, #8
 8002516:	4013      	ands	r3, r2
 8002518:	2b04      	cmp	r3, #4
 800251a:	d01d      	beq.n	8002558 <__aeabi_ddiv+0x608>
 800251c:	1d13      	adds	r3, r2, #4
 800251e:	4293      	cmp	r3, r2
 8002520:	4189      	sbcs	r1, r1
 8002522:	001a      	movs	r2, r3
 8002524:	4249      	negs	r1, r1
 8002526:	0749      	lsls	r1, r1, #29
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	430a      	orrs	r2, r1
 800252c:	4690      	mov	r8, r2
 800252e:	2300      	movs	r3, #0
 8002530:	e57a      	b.n	8002028 <__aeabi_ddiv+0xd8>
 8002532:	4649      	mov	r1, r9
 8002534:	9f00      	ldr	r7, [sp, #0]
 8002536:	004d      	lsls	r5, r1, #1
 8002538:	454d      	cmp	r5, r9
 800253a:	4189      	sbcs	r1, r1
 800253c:	46bc      	mov	ip, r7
 800253e:	4249      	negs	r1, r1
 8002540:	4461      	add	r1, ip
 8002542:	46a9      	mov	r9, r5
 8002544:	3a02      	subs	r2, #2
 8002546:	1864      	adds	r4, r4, r1
 8002548:	e7ae      	b.n	80024a8 <__aeabi_ddiv+0x558>
 800254a:	2201      	movs	r2, #1
 800254c:	4252      	negs	r2, r2
 800254e:	e746      	b.n	80023de <__aeabi_ddiv+0x48e>
 8002550:	4599      	cmp	r9, r3
 8002552:	d3ee      	bcc.n	8002532 <__aeabi_ddiv+0x5e2>
 8002554:	000a      	movs	r2, r1
 8002556:	e7aa      	b.n	80024ae <__aeabi_ddiv+0x55e>
 8002558:	2100      	movs	r1, #0
 800255a:	e7e5      	b.n	8002528 <__aeabi_ddiv+0x5d8>
 800255c:	0759      	lsls	r1, r3, #29
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	0b1c      	lsrs	r4, r3, #12
 8002562:	e7e1      	b.n	8002528 <__aeabi_ddiv+0x5d8>
 8002564:	000003ff 	.word	0x000003ff
 8002568:	feffffff 	.word	0xfeffffff
 800256c:	000007fe 	.word	0x000007fe
 8002570:	000007ff 	.word	0x000007ff
 8002574:	0000041e 	.word	0x0000041e
 8002578:	fffffc02 	.word	0xfffffc02
 800257c:	0000043e 	.word	0x0000043e

08002580 <__eqdf2>:
 8002580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002582:	4657      	mov	r7, sl
 8002584:	46de      	mov	lr, fp
 8002586:	464e      	mov	r6, r9
 8002588:	4645      	mov	r5, r8
 800258a:	b5e0      	push	{r5, r6, r7, lr}
 800258c:	000d      	movs	r5, r1
 800258e:	0004      	movs	r4, r0
 8002590:	0fe8      	lsrs	r0, r5, #31
 8002592:	4683      	mov	fp, r0
 8002594:	0309      	lsls	r1, r1, #12
 8002596:	0fd8      	lsrs	r0, r3, #31
 8002598:	0b09      	lsrs	r1, r1, #12
 800259a:	4682      	mov	sl, r0
 800259c:	4819      	ldr	r0, [pc, #100]	@ (8002604 <__eqdf2+0x84>)
 800259e:	468c      	mov	ip, r1
 80025a0:	031f      	lsls	r7, r3, #12
 80025a2:	0069      	lsls	r1, r5, #1
 80025a4:	005e      	lsls	r6, r3, #1
 80025a6:	0d49      	lsrs	r1, r1, #21
 80025a8:	0b3f      	lsrs	r7, r7, #12
 80025aa:	0d76      	lsrs	r6, r6, #21
 80025ac:	4281      	cmp	r1, r0
 80025ae:	d018      	beq.n	80025e2 <__eqdf2+0x62>
 80025b0:	4286      	cmp	r6, r0
 80025b2:	d00f      	beq.n	80025d4 <__eqdf2+0x54>
 80025b4:	2001      	movs	r0, #1
 80025b6:	42b1      	cmp	r1, r6
 80025b8:	d10d      	bne.n	80025d6 <__eqdf2+0x56>
 80025ba:	45bc      	cmp	ip, r7
 80025bc:	d10b      	bne.n	80025d6 <__eqdf2+0x56>
 80025be:	4294      	cmp	r4, r2
 80025c0:	d109      	bne.n	80025d6 <__eqdf2+0x56>
 80025c2:	45d3      	cmp	fp, sl
 80025c4:	d01c      	beq.n	8002600 <__eqdf2+0x80>
 80025c6:	2900      	cmp	r1, #0
 80025c8:	d105      	bne.n	80025d6 <__eqdf2+0x56>
 80025ca:	4660      	mov	r0, ip
 80025cc:	4320      	orrs	r0, r4
 80025ce:	1e43      	subs	r3, r0, #1
 80025d0:	4198      	sbcs	r0, r3
 80025d2:	e000      	b.n	80025d6 <__eqdf2+0x56>
 80025d4:	2001      	movs	r0, #1
 80025d6:	bcf0      	pop	{r4, r5, r6, r7}
 80025d8:	46bb      	mov	fp, r7
 80025da:	46b2      	mov	sl, r6
 80025dc:	46a9      	mov	r9, r5
 80025de:	46a0      	mov	r8, r4
 80025e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e2:	2001      	movs	r0, #1
 80025e4:	428e      	cmp	r6, r1
 80025e6:	d1f6      	bne.n	80025d6 <__eqdf2+0x56>
 80025e8:	4661      	mov	r1, ip
 80025ea:	4339      	orrs	r1, r7
 80025ec:	000f      	movs	r7, r1
 80025ee:	4317      	orrs	r7, r2
 80025f0:	4327      	orrs	r7, r4
 80025f2:	d1f0      	bne.n	80025d6 <__eqdf2+0x56>
 80025f4:	465b      	mov	r3, fp
 80025f6:	4652      	mov	r2, sl
 80025f8:	1a98      	subs	r0, r3, r2
 80025fa:	1e43      	subs	r3, r0, #1
 80025fc:	4198      	sbcs	r0, r3
 80025fe:	e7ea      	b.n	80025d6 <__eqdf2+0x56>
 8002600:	2000      	movs	r0, #0
 8002602:	e7e8      	b.n	80025d6 <__eqdf2+0x56>
 8002604:	000007ff 	.word	0x000007ff

08002608 <__gedf2>:
 8002608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260a:	4657      	mov	r7, sl
 800260c:	464e      	mov	r6, r9
 800260e:	4645      	mov	r5, r8
 8002610:	46de      	mov	lr, fp
 8002612:	b5e0      	push	{r5, r6, r7, lr}
 8002614:	000d      	movs	r5, r1
 8002616:	030e      	lsls	r6, r1, #12
 8002618:	0049      	lsls	r1, r1, #1
 800261a:	0d49      	lsrs	r1, r1, #21
 800261c:	468a      	mov	sl, r1
 800261e:	0fdf      	lsrs	r7, r3, #31
 8002620:	0fe9      	lsrs	r1, r5, #31
 8002622:	46bc      	mov	ip, r7
 8002624:	b083      	sub	sp, #12
 8002626:	4f2f      	ldr	r7, [pc, #188]	@ (80026e4 <__gedf2+0xdc>)
 8002628:	0004      	movs	r4, r0
 800262a:	4680      	mov	r8, r0
 800262c:	9101      	str	r1, [sp, #4]
 800262e:	0058      	lsls	r0, r3, #1
 8002630:	0319      	lsls	r1, r3, #12
 8002632:	4691      	mov	r9, r2
 8002634:	0b36      	lsrs	r6, r6, #12
 8002636:	0b09      	lsrs	r1, r1, #12
 8002638:	0d40      	lsrs	r0, r0, #21
 800263a:	45ba      	cmp	sl, r7
 800263c:	d01d      	beq.n	800267a <__gedf2+0x72>
 800263e:	42b8      	cmp	r0, r7
 8002640:	d00d      	beq.n	800265e <__gedf2+0x56>
 8002642:	4657      	mov	r7, sl
 8002644:	2f00      	cmp	r7, #0
 8002646:	d12a      	bne.n	800269e <__gedf2+0x96>
 8002648:	4334      	orrs	r4, r6
 800264a:	2800      	cmp	r0, #0
 800264c:	d124      	bne.n	8002698 <__gedf2+0x90>
 800264e:	430a      	orrs	r2, r1
 8002650:	d036      	beq.n	80026c0 <__gedf2+0xb8>
 8002652:	2c00      	cmp	r4, #0
 8002654:	d141      	bne.n	80026da <__gedf2+0xd2>
 8002656:	4663      	mov	r3, ip
 8002658:	0058      	lsls	r0, r3, #1
 800265a:	3801      	subs	r0, #1
 800265c:	e015      	b.n	800268a <__gedf2+0x82>
 800265e:	4311      	orrs	r1, r2
 8002660:	d138      	bne.n	80026d4 <__gedf2+0xcc>
 8002662:	4653      	mov	r3, sl
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <__gedf2+0x64>
 8002668:	4326      	orrs	r6, r4
 800266a:	d0f4      	beq.n	8002656 <__gedf2+0x4e>
 800266c:	9b01      	ldr	r3, [sp, #4]
 800266e:	4563      	cmp	r3, ip
 8002670:	d107      	bne.n	8002682 <__gedf2+0x7a>
 8002672:	9b01      	ldr	r3, [sp, #4]
 8002674:	0058      	lsls	r0, r3, #1
 8002676:	3801      	subs	r0, #1
 8002678:	e007      	b.n	800268a <__gedf2+0x82>
 800267a:	4326      	orrs	r6, r4
 800267c:	d12a      	bne.n	80026d4 <__gedf2+0xcc>
 800267e:	4550      	cmp	r0, sl
 8002680:	d021      	beq.n	80026c6 <__gedf2+0xbe>
 8002682:	2001      	movs	r0, #1
 8002684:	9b01      	ldr	r3, [sp, #4]
 8002686:	425f      	negs	r7, r3
 8002688:	4338      	orrs	r0, r7
 800268a:	b003      	add	sp, #12
 800268c:	bcf0      	pop	{r4, r5, r6, r7}
 800268e:	46bb      	mov	fp, r7
 8002690:	46b2      	mov	sl, r6
 8002692:	46a9      	mov	r9, r5
 8002694:	46a0      	mov	r8, r4
 8002696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002698:	2c00      	cmp	r4, #0
 800269a:	d0dc      	beq.n	8002656 <__gedf2+0x4e>
 800269c:	e7e6      	b.n	800266c <__gedf2+0x64>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d0ef      	beq.n	8002682 <__gedf2+0x7a>
 80026a2:	9b01      	ldr	r3, [sp, #4]
 80026a4:	4563      	cmp	r3, ip
 80026a6:	d1ec      	bne.n	8002682 <__gedf2+0x7a>
 80026a8:	4582      	cmp	sl, r0
 80026aa:	dcea      	bgt.n	8002682 <__gedf2+0x7a>
 80026ac:	dbe1      	blt.n	8002672 <__gedf2+0x6a>
 80026ae:	428e      	cmp	r6, r1
 80026b0:	d8e7      	bhi.n	8002682 <__gedf2+0x7a>
 80026b2:	d1de      	bne.n	8002672 <__gedf2+0x6a>
 80026b4:	45c8      	cmp	r8, r9
 80026b6:	d8e4      	bhi.n	8002682 <__gedf2+0x7a>
 80026b8:	2000      	movs	r0, #0
 80026ba:	45c8      	cmp	r8, r9
 80026bc:	d2e5      	bcs.n	800268a <__gedf2+0x82>
 80026be:	e7d8      	b.n	8002672 <__gedf2+0x6a>
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d0e2      	beq.n	800268a <__gedf2+0x82>
 80026c4:	e7dd      	b.n	8002682 <__gedf2+0x7a>
 80026c6:	4311      	orrs	r1, r2
 80026c8:	d104      	bne.n	80026d4 <__gedf2+0xcc>
 80026ca:	9b01      	ldr	r3, [sp, #4]
 80026cc:	4563      	cmp	r3, ip
 80026ce:	d1d8      	bne.n	8002682 <__gedf2+0x7a>
 80026d0:	2000      	movs	r0, #0
 80026d2:	e7da      	b.n	800268a <__gedf2+0x82>
 80026d4:	2002      	movs	r0, #2
 80026d6:	4240      	negs	r0, r0
 80026d8:	e7d7      	b.n	800268a <__gedf2+0x82>
 80026da:	9b01      	ldr	r3, [sp, #4]
 80026dc:	4563      	cmp	r3, ip
 80026de:	d0e6      	beq.n	80026ae <__gedf2+0xa6>
 80026e0:	e7cf      	b.n	8002682 <__gedf2+0x7a>
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	000007ff 	.word	0x000007ff

080026e8 <__ledf2>:
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	4657      	mov	r7, sl
 80026ec:	464e      	mov	r6, r9
 80026ee:	4645      	mov	r5, r8
 80026f0:	46de      	mov	lr, fp
 80026f2:	b5e0      	push	{r5, r6, r7, lr}
 80026f4:	000d      	movs	r5, r1
 80026f6:	030e      	lsls	r6, r1, #12
 80026f8:	0049      	lsls	r1, r1, #1
 80026fa:	0d49      	lsrs	r1, r1, #21
 80026fc:	468a      	mov	sl, r1
 80026fe:	0fdf      	lsrs	r7, r3, #31
 8002700:	0fe9      	lsrs	r1, r5, #31
 8002702:	46bc      	mov	ip, r7
 8002704:	b083      	sub	sp, #12
 8002706:	4f2e      	ldr	r7, [pc, #184]	@ (80027c0 <__ledf2+0xd8>)
 8002708:	0004      	movs	r4, r0
 800270a:	4680      	mov	r8, r0
 800270c:	9101      	str	r1, [sp, #4]
 800270e:	0058      	lsls	r0, r3, #1
 8002710:	0319      	lsls	r1, r3, #12
 8002712:	4691      	mov	r9, r2
 8002714:	0b36      	lsrs	r6, r6, #12
 8002716:	0b09      	lsrs	r1, r1, #12
 8002718:	0d40      	lsrs	r0, r0, #21
 800271a:	45ba      	cmp	sl, r7
 800271c:	d01e      	beq.n	800275c <__ledf2+0x74>
 800271e:	42b8      	cmp	r0, r7
 8002720:	d00d      	beq.n	800273e <__ledf2+0x56>
 8002722:	4657      	mov	r7, sl
 8002724:	2f00      	cmp	r7, #0
 8002726:	d127      	bne.n	8002778 <__ledf2+0x90>
 8002728:	4334      	orrs	r4, r6
 800272a:	2800      	cmp	r0, #0
 800272c:	d133      	bne.n	8002796 <__ledf2+0xae>
 800272e:	430a      	orrs	r2, r1
 8002730:	d034      	beq.n	800279c <__ledf2+0xb4>
 8002732:	2c00      	cmp	r4, #0
 8002734:	d140      	bne.n	80027b8 <__ledf2+0xd0>
 8002736:	4663      	mov	r3, ip
 8002738:	0058      	lsls	r0, r3, #1
 800273a:	3801      	subs	r0, #1
 800273c:	e015      	b.n	800276a <__ledf2+0x82>
 800273e:	4311      	orrs	r1, r2
 8002740:	d112      	bne.n	8002768 <__ledf2+0x80>
 8002742:	4653      	mov	r3, sl
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <__ledf2+0x64>
 8002748:	4326      	orrs	r6, r4
 800274a:	d0f4      	beq.n	8002736 <__ledf2+0x4e>
 800274c:	9b01      	ldr	r3, [sp, #4]
 800274e:	4563      	cmp	r3, ip
 8002750:	d01d      	beq.n	800278e <__ledf2+0xa6>
 8002752:	2001      	movs	r0, #1
 8002754:	9b01      	ldr	r3, [sp, #4]
 8002756:	425f      	negs	r7, r3
 8002758:	4338      	orrs	r0, r7
 800275a:	e006      	b.n	800276a <__ledf2+0x82>
 800275c:	4326      	orrs	r6, r4
 800275e:	d103      	bne.n	8002768 <__ledf2+0x80>
 8002760:	4550      	cmp	r0, sl
 8002762:	d1f6      	bne.n	8002752 <__ledf2+0x6a>
 8002764:	4311      	orrs	r1, r2
 8002766:	d01c      	beq.n	80027a2 <__ledf2+0xba>
 8002768:	2002      	movs	r0, #2
 800276a:	b003      	add	sp, #12
 800276c:	bcf0      	pop	{r4, r5, r6, r7}
 800276e:	46bb      	mov	fp, r7
 8002770:	46b2      	mov	sl, r6
 8002772:	46a9      	mov	r9, r5
 8002774:	46a0      	mov	r8, r4
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002778:	2800      	cmp	r0, #0
 800277a:	d0ea      	beq.n	8002752 <__ledf2+0x6a>
 800277c:	9b01      	ldr	r3, [sp, #4]
 800277e:	4563      	cmp	r3, ip
 8002780:	d1e7      	bne.n	8002752 <__ledf2+0x6a>
 8002782:	4582      	cmp	sl, r0
 8002784:	dce5      	bgt.n	8002752 <__ledf2+0x6a>
 8002786:	db02      	blt.n	800278e <__ledf2+0xa6>
 8002788:	428e      	cmp	r6, r1
 800278a:	d8e2      	bhi.n	8002752 <__ledf2+0x6a>
 800278c:	d00e      	beq.n	80027ac <__ledf2+0xc4>
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	0058      	lsls	r0, r3, #1
 8002792:	3801      	subs	r0, #1
 8002794:	e7e9      	b.n	800276a <__ledf2+0x82>
 8002796:	2c00      	cmp	r4, #0
 8002798:	d0cd      	beq.n	8002736 <__ledf2+0x4e>
 800279a:	e7d7      	b.n	800274c <__ledf2+0x64>
 800279c:	2c00      	cmp	r4, #0
 800279e:	d0e4      	beq.n	800276a <__ledf2+0x82>
 80027a0:	e7d7      	b.n	8002752 <__ledf2+0x6a>
 80027a2:	9b01      	ldr	r3, [sp, #4]
 80027a4:	2000      	movs	r0, #0
 80027a6:	4563      	cmp	r3, ip
 80027a8:	d0df      	beq.n	800276a <__ledf2+0x82>
 80027aa:	e7d2      	b.n	8002752 <__ledf2+0x6a>
 80027ac:	45c8      	cmp	r8, r9
 80027ae:	d8d0      	bhi.n	8002752 <__ledf2+0x6a>
 80027b0:	2000      	movs	r0, #0
 80027b2:	45c8      	cmp	r8, r9
 80027b4:	d2d9      	bcs.n	800276a <__ledf2+0x82>
 80027b6:	e7ea      	b.n	800278e <__ledf2+0xa6>
 80027b8:	9b01      	ldr	r3, [sp, #4]
 80027ba:	4563      	cmp	r3, ip
 80027bc:	d0e4      	beq.n	8002788 <__ledf2+0xa0>
 80027be:	e7c8      	b.n	8002752 <__ledf2+0x6a>
 80027c0:	000007ff 	.word	0x000007ff

080027c4 <__aeabi_dmul>:
 80027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c6:	4657      	mov	r7, sl
 80027c8:	464e      	mov	r6, r9
 80027ca:	46de      	mov	lr, fp
 80027cc:	4645      	mov	r5, r8
 80027ce:	b5e0      	push	{r5, r6, r7, lr}
 80027d0:	001f      	movs	r7, r3
 80027d2:	030b      	lsls	r3, r1, #12
 80027d4:	0b1b      	lsrs	r3, r3, #12
 80027d6:	0016      	movs	r6, r2
 80027d8:	469a      	mov	sl, r3
 80027da:	0fca      	lsrs	r2, r1, #31
 80027dc:	004b      	lsls	r3, r1, #1
 80027de:	0004      	movs	r4, r0
 80027e0:	4691      	mov	r9, r2
 80027e2:	b085      	sub	sp, #20
 80027e4:	0d5b      	lsrs	r3, r3, #21
 80027e6:	d100      	bne.n	80027ea <__aeabi_dmul+0x26>
 80027e8:	e1cf      	b.n	8002b8a <__aeabi_dmul+0x3c6>
 80027ea:	4acd      	ldr	r2, [pc, #820]	@ (8002b20 <__aeabi_dmul+0x35c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d055      	beq.n	800289c <__aeabi_dmul+0xd8>
 80027f0:	4651      	mov	r1, sl
 80027f2:	0f42      	lsrs	r2, r0, #29
 80027f4:	00c9      	lsls	r1, r1, #3
 80027f6:	430a      	orrs	r2, r1
 80027f8:	2180      	movs	r1, #128	@ 0x80
 80027fa:	0409      	lsls	r1, r1, #16
 80027fc:	4311      	orrs	r1, r2
 80027fe:	00c2      	lsls	r2, r0, #3
 8002800:	4690      	mov	r8, r2
 8002802:	4ac8      	ldr	r2, [pc, #800]	@ (8002b24 <__aeabi_dmul+0x360>)
 8002804:	468a      	mov	sl, r1
 8002806:	4693      	mov	fp, r2
 8002808:	449b      	add	fp, r3
 800280a:	2300      	movs	r3, #0
 800280c:	2500      	movs	r5, #0
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	033c      	lsls	r4, r7, #12
 8002812:	007b      	lsls	r3, r7, #1
 8002814:	0ffa      	lsrs	r2, r7, #31
 8002816:	9601      	str	r6, [sp, #4]
 8002818:	0b24      	lsrs	r4, r4, #12
 800281a:	0d5b      	lsrs	r3, r3, #21
 800281c:	9200      	str	r2, [sp, #0]
 800281e:	d100      	bne.n	8002822 <__aeabi_dmul+0x5e>
 8002820:	e188      	b.n	8002b34 <__aeabi_dmul+0x370>
 8002822:	4abf      	ldr	r2, [pc, #764]	@ (8002b20 <__aeabi_dmul+0x35c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d100      	bne.n	800282a <__aeabi_dmul+0x66>
 8002828:	e092      	b.n	8002950 <__aeabi_dmul+0x18c>
 800282a:	4abe      	ldr	r2, [pc, #760]	@ (8002b24 <__aeabi_dmul+0x360>)
 800282c:	4694      	mov	ip, r2
 800282e:	4463      	add	r3, ip
 8002830:	449b      	add	fp, r3
 8002832:	2d0a      	cmp	r5, #10
 8002834:	dc42      	bgt.n	80028bc <__aeabi_dmul+0xf8>
 8002836:	00e4      	lsls	r4, r4, #3
 8002838:	0f73      	lsrs	r3, r6, #29
 800283a:	4323      	orrs	r3, r4
 800283c:	2480      	movs	r4, #128	@ 0x80
 800283e:	4649      	mov	r1, r9
 8002840:	0424      	lsls	r4, r4, #16
 8002842:	431c      	orrs	r4, r3
 8002844:	00f3      	lsls	r3, r6, #3
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	9b00      	ldr	r3, [sp, #0]
 800284a:	2000      	movs	r0, #0
 800284c:	4059      	eors	r1, r3
 800284e:	b2cb      	uxtb	r3, r1
 8002850:	9303      	str	r3, [sp, #12]
 8002852:	2d02      	cmp	r5, #2
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dmul+0x94>
 8002856:	e094      	b.n	8002982 <__aeabi_dmul+0x1be>
 8002858:	2301      	movs	r3, #1
 800285a:	40ab      	lsls	r3, r5
 800285c:	001d      	movs	r5, r3
 800285e:	23a6      	movs	r3, #166	@ 0xa6
 8002860:	002a      	movs	r2, r5
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	401a      	ands	r2, r3
 8002866:	421d      	tst	r5, r3
 8002868:	d000      	beq.n	800286c <__aeabi_dmul+0xa8>
 800286a:	e229      	b.n	8002cc0 <__aeabi_dmul+0x4fc>
 800286c:	2390      	movs	r3, #144	@ 0x90
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	421d      	tst	r5, r3
 8002872:	d100      	bne.n	8002876 <__aeabi_dmul+0xb2>
 8002874:	e24d      	b.n	8002d12 <__aeabi_dmul+0x54e>
 8002876:	2300      	movs	r3, #0
 8002878:	2480      	movs	r4, #128	@ 0x80
 800287a:	4699      	mov	r9, r3
 800287c:	0324      	lsls	r4, r4, #12
 800287e:	4ba8      	ldr	r3, [pc, #672]	@ (8002b20 <__aeabi_dmul+0x35c>)
 8002880:	0010      	movs	r0, r2
 8002882:	464a      	mov	r2, r9
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	4323      	orrs	r3, r4
 8002888:	07d2      	lsls	r2, r2, #31
 800288a:	4313      	orrs	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	b005      	add	sp, #20
 8002890:	bcf0      	pop	{r4, r5, r6, r7}
 8002892:	46bb      	mov	fp, r7
 8002894:	46b2      	mov	sl, r6
 8002896:	46a9      	mov	r9, r5
 8002898:	46a0      	mov	r8, r4
 800289a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289c:	4652      	mov	r2, sl
 800289e:	4302      	orrs	r2, r0
 80028a0:	4690      	mov	r8, r2
 80028a2:	d000      	beq.n	80028a6 <__aeabi_dmul+0xe2>
 80028a4:	e1ac      	b.n	8002c00 <__aeabi_dmul+0x43c>
 80028a6:	469b      	mov	fp, r3
 80028a8:	2302      	movs	r3, #2
 80028aa:	4692      	mov	sl, r2
 80028ac:	2508      	movs	r5, #8
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	e7ae      	b.n	8002810 <__aeabi_dmul+0x4c>
 80028b2:	9b00      	ldr	r3, [sp, #0]
 80028b4:	46a2      	mov	sl, r4
 80028b6:	4699      	mov	r9, r3
 80028b8:	9b01      	ldr	r3, [sp, #4]
 80028ba:	4698      	mov	r8, r3
 80028bc:	9b02      	ldr	r3, [sp, #8]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d100      	bne.n	80028c4 <__aeabi_dmul+0x100>
 80028c2:	e1ca      	b.n	8002c5a <__aeabi_dmul+0x496>
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d100      	bne.n	80028ca <__aeabi_dmul+0x106>
 80028c8:	e192      	b.n	8002bf0 <__aeabi_dmul+0x42c>
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d110      	bne.n	80028f0 <__aeabi_dmul+0x12c>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2400      	movs	r4, #0
 80028d2:	2200      	movs	r2, #0
 80028d4:	e7d4      	b.n	8002880 <__aeabi_dmul+0xbc>
 80028d6:	2201      	movs	r2, #1
 80028d8:	087b      	lsrs	r3, r7, #1
 80028da:	403a      	ands	r2, r7
 80028dc:	4313      	orrs	r3, r2
 80028de:	4652      	mov	r2, sl
 80028e0:	07d2      	lsls	r2, r2, #31
 80028e2:	4313      	orrs	r3, r2
 80028e4:	4698      	mov	r8, r3
 80028e6:	4653      	mov	r3, sl
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	469a      	mov	sl, r3
 80028ec:	9b03      	ldr	r3, [sp, #12]
 80028ee:	4699      	mov	r9, r3
 80028f0:	465b      	mov	r3, fp
 80028f2:	1c58      	adds	r0, r3, #1
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	445b      	add	r3, fp
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	dc00      	bgt.n	8002900 <__aeabi_dmul+0x13c>
 80028fe:	e1b1      	b.n	8002c64 <__aeabi_dmul+0x4a0>
 8002900:	4642      	mov	r2, r8
 8002902:	0752      	lsls	r2, r2, #29
 8002904:	d00b      	beq.n	800291e <__aeabi_dmul+0x15a>
 8002906:	220f      	movs	r2, #15
 8002908:	4641      	mov	r1, r8
 800290a:	400a      	ands	r2, r1
 800290c:	2a04      	cmp	r2, #4
 800290e:	d006      	beq.n	800291e <__aeabi_dmul+0x15a>
 8002910:	4642      	mov	r2, r8
 8002912:	1d11      	adds	r1, r2, #4
 8002914:	4541      	cmp	r1, r8
 8002916:	4192      	sbcs	r2, r2
 8002918:	4688      	mov	r8, r1
 800291a:	4252      	negs	r2, r2
 800291c:	4492      	add	sl, r2
 800291e:	4652      	mov	r2, sl
 8002920:	01d2      	lsls	r2, r2, #7
 8002922:	d506      	bpl.n	8002932 <__aeabi_dmul+0x16e>
 8002924:	4652      	mov	r2, sl
 8002926:	4b80      	ldr	r3, [pc, #512]	@ (8002b28 <__aeabi_dmul+0x364>)
 8002928:	401a      	ands	r2, r3
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	4692      	mov	sl, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	18c3      	adds	r3, r0, r3
 8002932:	4a7e      	ldr	r2, [pc, #504]	@ (8002b2c <__aeabi_dmul+0x368>)
 8002934:	4293      	cmp	r3, r2
 8002936:	dd00      	ble.n	800293a <__aeabi_dmul+0x176>
 8002938:	e18f      	b.n	8002c5a <__aeabi_dmul+0x496>
 800293a:	4642      	mov	r2, r8
 800293c:	08d1      	lsrs	r1, r2, #3
 800293e:	4652      	mov	r2, sl
 8002940:	0752      	lsls	r2, r2, #29
 8002942:	430a      	orrs	r2, r1
 8002944:	4651      	mov	r1, sl
 8002946:	055b      	lsls	r3, r3, #21
 8002948:	024c      	lsls	r4, r1, #9
 800294a:	0b24      	lsrs	r4, r4, #12
 800294c:	0d5b      	lsrs	r3, r3, #21
 800294e:	e797      	b.n	8002880 <__aeabi_dmul+0xbc>
 8002950:	4b73      	ldr	r3, [pc, #460]	@ (8002b20 <__aeabi_dmul+0x35c>)
 8002952:	4326      	orrs	r6, r4
 8002954:	469c      	mov	ip, r3
 8002956:	44e3      	add	fp, ip
 8002958:	2e00      	cmp	r6, #0
 800295a:	d100      	bne.n	800295e <__aeabi_dmul+0x19a>
 800295c:	e16f      	b.n	8002c3e <__aeabi_dmul+0x47a>
 800295e:	2303      	movs	r3, #3
 8002960:	4649      	mov	r1, r9
 8002962:	431d      	orrs	r5, r3
 8002964:	9b00      	ldr	r3, [sp, #0]
 8002966:	4059      	eors	r1, r3
 8002968:	b2cb      	uxtb	r3, r1
 800296a:	9303      	str	r3, [sp, #12]
 800296c:	2d0a      	cmp	r5, #10
 800296e:	dd00      	ble.n	8002972 <__aeabi_dmul+0x1ae>
 8002970:	e133      	b.n	8002bda <__aeabi_dmul+0x416>
 8002972:	2301      	movs	r3, #1
 8002974:	40ab      	lsls	r3, r5
 8002976:	001d      	movs	r5, r3
 8002978:	2303      	movs	r3, #3
 800297a:	9302      	str	r3, [sp, #8]
 800297c:	2288      	movs	r2, #136	@ 0x88
 800297e:	422a      	tst	r2, r5
 8002980:	d197      	bne.n	80028b2 <__aeabi_dmul+0xee>
 8002982:	4642      	mov	r2, r8
 8002984:	4643      	mov	r3, r8
 8002986:	0412      	lsls	r2, r2, #16
 8002988:	0c12      	lsrs	r2, r2, #16
 800298a:	0016      	movs	r6, r2
 800298c:	9801      	ldr	r0, [sp, #4]
 800298e:	0c1d      	lsrs	r5, r3, #16
 8002990:	0c03      	lsrs	r3, r0, #16
 8002992:	0400      	lsls	r0, r0, #16
 8002994:	0c00      	lsrs	r0, r0, #16
 8002996:	4346      	muls	r6, r0
 8002998:	46b4      	mov	ip, r6
 800299a:	001e      	movs	r6, r3
 800299c:	436e      	muls	r6, r5
 800299e:	9600      	str	r6, [sp, #0]
 80029a0:	0016      	movs	r6, r2
 80029a2:	0007      	movs	r7, r0
 80029a4:	435e      	muls	r6, r3
 80029a6:	4661      	mov	r1, ip
 80029a8:	46b0      	mov	r8, r6
 80029aa:	436f      	muls	r7, r5
 80029ac:	0c0e      	lsrs	r6, r1, #16
 80029ae:	44b8      	add	r8, r7
 80029b0:	4446      	add	r6, r8
 80029b2:	42b7      	cmp	r7, r6
 80029b4:	d905      	bls.n	80029c2 <__aeabi_dmul+0x1fe>
 80029b6:	2180      	movs	r1, #128	@ 0x80
 80029b8:	0249      	lsls	r1, r1, #9
 80029ba:	4688      	mov	r8, r1
 80029bc:	9f00      	ldr	r7, [sp, #0]
 80029be:	4447      	add	r7, r8
 80029c0:	9700      	str	r7, [sp, #0]
 80029c2:	4661      	mov	r1, ip
 80029c4:	0409      	lsls	r1, r1, #16
 80029c6:	0c09      	lsrs	r1, r1, #16
 80029c8:	0c37      	lsrs	r7, r6, #16
 80029ca:	0436      	lsls	r6, r6, #16
 80029cc:	468c      	mov	ip, r1
 80029ce:	0031      	movs	r1, r6
 80029d0:	4461      	add	r1, ip
 80029d2:	9101      	str	r1, [sp, #4]
 80029d4:	0011      	movs	r1, r2
 80029d6:	0c26      	lsrs	r6, r4, #16
 80029d8:	0424      	lsls	r4, r4, #16
 80029da:	0c24      	lsrs	r4, r4, #16
 80029dc:	4361      	muls	r1, r4
 80029de:	468c      	mov	ip, r1
 80029e0:	0021      	movs	r1, r4
 80029e2:	4369      	muls	r1, r5
 80029e4:	4689      	mov	r9, r1
 80029e6:	4661      	mov	r1, ip
 80029e8:	0c09      	lsrs	r1, r1, #16
 80029ea:	4688      	mov	r8, r1
 80029ec:	4372      	muls	r2, r6
 80029ee:	444a      	add	r2, r9
 80029f0:	4442      	add	r2, r8
 80029f2:	4375      	muls	r5, r6
 80029f4:	4591      	cmp	r9, r2
 80029f6:	d903      	bls.n	8002a00 <__aeabi_dmul+0x23c>
 80029f8:	2180      	movs	r1, #128	@ 0x80
 80029fa:	0249      	lsls	r1, r1, #9
 80029fc:	4688      	mov	r8, r1
 80029fe:	4445      	add	r5, r8
 8002a00:	0c11      	lsrs	r1, r2, #16
 8002a02:	4688      	mov	r8, r1
 8002a04:	4661      	mov	r1, ip
 8002a06:	0409      	lsls	r1, r1, #16
 8002a08:	0c09      	lsrs	r1, r1, #16
 8002a0a:	468c      	mov	ip, r1
 8002a0c:	0412      	lsls	r2, r2, #16
 8002a0e:	4462      	add	r2, ip
 8002a10:	18b9      	adds	r1, r7, r2
 8002a12:	9102      	str	r1, [sp, #8]
 8002a14:	4651      	mov	r1, sl
 8002a16:	0c09      	lsrs	r1, r1, #16
 8002a18:	468c      	mov	ip, r1
 8002a1a:	4651      	mov	r1, sl
 8002a1c:	040f      	lsls	r7, r1, #16
 8002a1e:	0c3f      	lsrs	r7, r7, #16
 8002a20:	0039      	movs	r1, r7
 8002a22:	4341      	muls	r1, r0
 8002a24:	4445      	add	r5, r8
 8002a26:	4688      	mov	r8, r1
 8002a28:	4661      	mov	r1, ip
 8002a2a:	4341      	muls	r1, r0
 8002a2c:	468a      	mov	sl, r1
 8002a2e:	4641      	mov	r1, r8
 8002a30:	4660      	mov	r0, ip
 8002a32:	0c09      	lsrs	r1, r1, #16
 8002a34:	4689      	mov	r9, r1
 8002a36:	4358      	muls	r0, r3
 8002a38:	437b      	muls	r3, r7
 8002a3a:	4453      	add	r3, sl
 8002a3c:	444b      	add	r3, r9
 8002a3e:	459a      	cmp	sl, r3
 8002a40:	d903      	bls.n	8002a4a <__aeabi_dmul+0x286>
 8002a42:	2180      	movs	r1, #128	@ 0x80
 8002a44:	0249      	lsls	r1, r1, #9
 8002a46:	4689      	mov	r9, r1
 8002a48:	4448      	add	r0, r9
 8002a4a:	0c19      	lsrs	r1, r3, #16
 8002a4c:	4689      	mov	r9, r1
 8002a4e:	4641      	mov	r1, r8
 8002a50:	0409      	lsls	r1, r1, #16
 8002a52:	0c09      	lsrs	r1, r1, #16
 8002a54:	4688      	mov	r8, r1
 8002a56:	0039      	movs	r1, r7
 8002a58:	4361      	muls	r1, r4
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	4443      	add	r3, r8
 8002a5e:	4688      	mov	r8, r1
 8002a60:	4661      	mov	r1, ip
 8002a62:	434c      	muls	r4, r1
 8002a64:	4371      	muls	r1, r6
 8002a66:	468c      	mov	ip, r1
 8002a68:	4641      	mov	r1, r8
 8002a6a:	4377      	muls	r7, r6
 8002a6c:	0c0e      	lsrs	r6, r1, #16
 8002a6e:	193f      	adds	r7, r7, r4
 8002a70:	19f6      	adds	r6, r6, r7
 8002a72:	4448      	add	r0, r9
 8002a74:	42b4      	cmp	r4, r6
 8002a76:	d903      	bls.n	8002a80 <__aeabi_dmul+0x2bc>
 8002a78:	2180      	movs	r1, #128	@ 0x80
 8002a7a:	0249      	lsls	r1, r1, #9
 8002a7c:	4689      	mov	r9, r1
 8002a7e:	44cc      	add	ip, r9
 8002a80:	9902      	ldr	r1, [sp, #8]
 8002a82:	9f00      	ldr	r7, [sp, #0]
 8002a84:	4689      	mov	r9, r1
 8002a86:	0431      	lsls	r1, r6, #16
 8002a88:	444f      	add	r7, r9
 8002a8a:	4689      	mov	r9, r1
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	4297      	cmp	r7, r2
 8002a90:	4192      	sbcs	r2, r2
 8002a92:	040c      	lsls	r4, r1, #16
 8002a94:	0c24      	lsrs	r4, r4, #16
 8002a96:	444c      	add	r4, r9
 8002a98:	18ff      	adds	r7, r7, r3
 8002a9a:	4252      	negs	r2, r2
 8002a9c:	1964      	adds	r4, r4, r5
 8002a9e:	18a1      	adds	r1, r4, r2
 8002aa0:	429f      	cmp	r7, r3
 8002aa2:	419b      	sbcs	r3, r3
 8002aa4:	4688      	mov	r8, r1
 8002aa6:	4682      	mov	sl, r0
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	4699      	mov	r9, r3
 8002aac:	4590      	cmp	r8, r2
 8002aae:	4192      	sbcs	r2, r2
 8002ab0:	42ac      	cmp	r4, r5
 8002ab2:	41a4      	sbcs	r4, r4
 8002ab4:	44c2      	add	sl, r8
 8002ab6:	44d1      	add	r9, sl
 8002ab8:	4252      	negs	r2, r2
 8002aba:	4264      	negs	r4, r4
 8002abc:	4314      	orrs	r4, r2
 8002abe:	4599      	cmp	r9, r3
 8002ac0:	419b      	sbcs	r3, r3
 8002ac2:	4582      	cmp	sl, r0
 8002ac4:	4192      	sbcs	r2, r2
 8002ac6:	425b      	negs	r3, r3
 8002ac8:	4252      	negs	r2, r2
 8002aca:	4313      	orrs	r3, r2
 8002acc:	464a      	mov	r2, r9
 8002ace:	0c36      	lsrs	r6, r6, #16
 8002ad0:	19a4      	adds	r4, r4, r6
 8002ad2:	18e3      	adds	r3, r4, r3
 8002ad4:	4463      	add	r3, ip
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	0dd2      	lsrs	r2, r2, #23
 8002ada:	431a      	orrs	r2, r3
 8002adc:	9901      	ldr	r1, [sp, #4]
 8002ade:	4692      	mov	sl, r2
 8002ae0:	027a      	lsls	r2, r7, #9
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	1e50      	subs	r0, r2, #1
 8002ae6:	4182      	sbcs	r2, r0
 8002ae8:	0dff      	lsrs	r7, r7, #23
 8002aea:	4317      	orrs	r7, r2
 8002aec:	464a      	mov	r2, r9
 8002aee:	0252      	lsls	r2, r2, #9
 8002af0:	4317      	orrs	r7, r2
 8002af2:	46b8      	mov	r8, r7
 8002af4:	01db      	lsls	r3, r3, #7
 8002af6:	d500      	bpl.n	8002afa <__aeabi_dmul+0x336>
 8002af8:	e6ed      	b.n	80028d6 <__aeabi_dmul+0x112>
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <__aeabi_dmul+0x36c>)
 8002afc:	9a03      	ldr	r2, [sp, #12]
 8002afe:	445b      	add	r3, fp
 8002b00:	4691      	mov	r9, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	dc00      	bgt.n	8002b08 <__aeabi_dmul+0x344>
 8002b06:	e0ac      	b.n	8002c62 <__aeabi_dmul+0x49e>
 8002b08:	003a      	movs	r2, r7
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dmul+0x34c>
 8002b0e:	e710      	b.n	8002932 <__aeabi_dmul+0x16e>
 8002b10:	220f      	movs	r2, #15
 8002b12:	4658      	mov	r0, fp
 8002b14:	403a      	ands	r2, r7
 8002b16:	2a04      	cmp	r2, #4
 8002b18:	d000      	beq.n	8002b1c <__aeabi_dmul+0x358>
 8002b1a:	e6f9      	b.n	8002910 <__aeabi_dmul+0x14c>
 8002b1c:	e709      	b.n	8002932 <__aeabi_dmul+0x16e>
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	000007ff 	.word	0x000007ff
 8002b24:	fffffc01 	.word	0xfffffc01
 8002b28:	feffffff 	.word	0xfeffffff
 8002b2c:	000007fe 	.word	0x000007fe
 8002b30:	000003ff 	.word	0x000003ff
 8002b34:	0022      	movs	r2, r4
 8002b36:	4332      	orrs	r2, r6
 8002b38:	d06f      	beq.n	8002c1a <__aeabi_dmul+0x456>
 8002b3a:	2c00      	cmp	r4, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dmul+0x37c>
 8002b3e:	e0c2      	b.n	8002cc6 <__aeabi_dmul+0x502>
 8002b40:	0020      	movs	r0, r4
 8002b42:	f7fd fceb 	bl	800051c <__clzsi2>
 8002b46:	0002      	movs	r2, r0
 8002b48:	0003      	movs	r3, r0
 8002b4a:	3a0b      	subs	r2, #11
 8002b4c:	201d      	movs	r0, #29
 8002b4e:	1a82      	subs	r2, r0, r2
 8002b50:	0030      	movs	r0, r6
 8002b52:	0019      	movs	r1, r3
 8002b54:	40d0      	lsrs	r0, r2
 8002b56:	3908      	subs	r1, #8
 8002b58:	408c      	lsls	r4, r1
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	4322      	orrs	r2, r4
 8002b5e:	0034      	movs	r4, r6
 8002b60:	408c      	lsls	r4, r1
 8002b62:	4659      	mov	r1, fp
 8002b64:	1acb      	subs	r3, r1, r3
 8002b66:	4986      	ldr	r1, [pc, #536]	@ (8002d80 <__aeabi_dmul+0x5bc>)
 8002b68:	468b      	mov	fp, r1
 8002b6a:	449b      	add	fp, r3
 8002b6c:	2d0a      	cmp	r5, #10
 8002b6e:	dd00      	ble.n	8002b72 <__aeabi_dmul+0x3ae>
 8002b70:	e6a4      	b.n	80028bc <__aeabi_dmul+0xf8>
 8002b72:	4649      	mov	r1, r9
 8002b74:	9b00      	ldr	r3, [sp, #0]
 8002b76:	9401      	str	r4, [sp, #4]
 8002b78:	4059      	eors	r1, r3
 8002b7a:	b2cb      	uxtb	r3, r1
 8002b7c:	0014      	movs	r4, r2
 8002b7e:	2000      	movs	r0, #0
 8002b80:	9303      	str	r3, [sp, #12]
 8002b82:	2d02      	cmp	r5, #2
 8002b84:	dd00      	ble.n	8002b88 <__aeabi_dmul+0x3c4>
 8002b86:	e667      	b.n	8002858 <__aeabi_dmul+0x94>
 8002b88:	e6fb      	b.n	8002982 <__aeabi_dmul+0x1be>
 8002b8a:	4653      	mov	r3, sl
 8002b8c:	4303      	orrs	r3, r0
 8002b8e:	4698      	mov	r8, r3
 8002b90:	d03c      	beq.n	8002c0c <__aeabi_dmul+0x448>
 8002b92:	4653      	mov	r3, sl
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <__aeabi_dmul+0x3d6>
 8002b98:	e0a3      	b.n	8002ce2 <__aeabi_dmul+0x51e>
 8002b9a:	4650      	mov	r0, sl
 8002b9c:	f7fd fcbe 	bl	800051c <__clzsi2>
 8002ba0:	230b      	movs	r3, #11
 8002ba2:	425b      	negs	r3, r3
 8002ba4:	469c      	mov	ip, r3
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	4484      	add	ip, r0
 8002baa:	0011      	movs	r1, r2
 8002bac:	4650      	mov	r0, sl
 8002bae:	3908      	subs	r1, #8
 8002bb0:	4088      	lsls	r0, r1
 8002bb2:	231d      	movs	r3, #29
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	4660      	mov	r0, ip
 8002bb8:	1a1b      	subs	r3, r3, r0
 8002bba:	0020      	movs	r0, r4
 8002bbc:	40d8      	lsrs	r0, r3
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	4640      	mov	r0, r8
 8002bc2:	4303      	orrs	r3, r0
 8002bc4:	469a      	mov	sl, r3
 8002bc6:	0023      	movs	r3, r4
 8002bc8:	408b      	lsls	r3, r1
 8002bca:	4698      	mov	r8, r3
 8002bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d80 <__aeabi_dmul+0x5bc>)
 8002bce:	2500      	movs	r5, #0
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	469b      	mov	fp, r3
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	e61a      	b.n	8002810 <__aeabi_dmul+0x4c>
 8002bda:	2d0f      	cmp	r5, #15
 8002bdc:	d000      	beq.n	8002be0 <__aeabi_dmul+0x41c>
 8002bde:	e0c9      	b.n	8002d74 <__aeabi_dmul+0x5b0>
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	4652      	mov	r2, sl
 8002be4:	031b      	lsls	r3, r3, #12
 8002be6:	421a      	tst	r2, r3
 8002be8:	d002      	beq.n	8002bf0 <__aeabi_dmul+0x42c>
 8002bea:	421c      	tst	r4, r3
 8002bec:	d100      	bne.n	8002bf0 <__aeabi_dmul+0x42c>
 8002bee:	e092      	b.n	8002d16 <__aeabi_dmul+0x552>
 8002bf0:	2480      	movs	r4, #128	@ 0x80
 8002bf2:	4653      	mov	r3, sl
 8002bf4:	0324      	lsls	r4, r4, #12
 8002bf6:	431c      	orrs	r4, r3
 8002bf8:	0324      	lsls	r4, r4, #12
 8002bfa:	4642      	mov	r2, r8
 8002bfc:	0b24      	lsrs	r4, r4, #12
 8002bfe:	e63e      	b.n	800287e <__aeabi_dmul+0xba>
 8002c00:	469b      	mov	fp, r3
 8002c02:	2303      	movs	r3, #3
 8002c04:	4680      	mov	r8, r0
 8002c06:	250c      	movs	r5, #12
 8002c08:	9302      	str	r3, [sp, #8]
 8002c0a:	e601      	b.n	8002810 <__aeabi_dmul+0x4c>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	469a      	mov	sl, r3
 8002c10:	469b      	mov	fp, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	2504      	movs	r5, #4
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	e5fa      	b.n	8002810 <__aeabi_dmul+0x4c>
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	430d      	orrs	r5, r1
 8002c1e:	2d0a      	cmp	r5, #10
 8002c20:	dd00      	ble.n	8002c24 <__aeabi_dmul+0x460>
 8002c22:	e64b      	b.n	80028bc <__aeabi_dmul+0xf8>
 8002c24:	4649      	mov	r1, r9
 8002c26:	9800      	ldr	r0, [sp, #0]
 8002c28:	4041      	eors	r1, r0
 8002c2a:	b2c9      	uxtb	r1, r1
 8002c2c:	9103      	str	r1, [sp, #12]
 8002c2e:	2d02      	cmp	r5, #2
 8002c30:	dc00      	bgt.n	8002c34 <__aeabi_dmul+0x470>
 8002c32:	e096      	b.n	8002d62 <__aeabi_dmul+0x59e>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2400      	movs	r4, #0
 8002c38:	2001      	movs	r0, #1
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	e60c      	b.n	8002858 <__aeabi_dmul+0x94>
 8002c3e:	4649      	mov	r1, r9
 8002c40:	2302      	movs	r3, #2
 8002c42:	9a00      	ldr	r2, [sp, #0]
 8002c44:	432b      	orrs	r3, r5
 8002c46:	4051      	eors	r1, r2
 8002c48:	b2ca      	uxtb	r2, r1
 8002c4a:	9203      	str	r2, [sp, #12]
 8002c4c:	2b0a      	cmp	r3, #10
 8002c4e:	dd00      	ble.n	8002c52 <__aeabi_dmul+0x48e>
 8002c50:	e634      	b.n	80028bc <__aeabi_dmul+0xf8>
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d157      	bne.n	8002d06 <__aeabi_dmul+0x542>
 8002c56:	9b03      	ldr	r3, [sp, #12]
 8002c58:	4699      	mov	r9, r3
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4b49      	ldr	r3, [pc, #292]	@ (8002d84 <__aeabi_dmul+0x5c0>)
 8002c60:	e60e      	b.n	8002880 <__aeabi_dmul+0xbc>
 8002c62:	4658      	mov	r0, fp
 8002c64:	2101      	movs	r1, #1
 8002c66:	1ac9      	subs	r1, r1, r3
 8002c68:	2938      	cmp	r1, #56	@ 0x38
 8002c6a:	dd00      	ble.n	8002c6e <__aeabi_dmul+0x4aa>
 8002c6c:	e62f      	b.n	80028ce <__aeabi_dmul+0x10a>
 8002c6e:	291f      	cmp	r1, #31
 8002c70:	dd56      	ble.n	8002d20 <__aeabi_dmul+0x55c>
 8002c72:	221f      	movs	r2, #31
 8002c74:	4654      	mov	r4, sl
 8002c76:	4252      	negs	r2, r2
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	40dc      	lsrs	r4, r3
 8002c7c:	2920      	cmp	r1, #32
 8002c7e:	d007      	beq.n	8002c90 <__aeabi_dmul+0x4cc>
 8002c80:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <__aeabi_dmul+0x5c4>)
 8002c82:	4642      	mov	r2, r8
 8002c84:	469c      	mov	ip, r3
 8002c86:	4653      	mov	r3, sl
 8002c88:	4460      	add	r0, ip
 8002c8a:	4083      	lsls	r3, r0
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	4690      	mov	r8, r2
 8002c90:	4642      	mov	r2, r8
 8002c92:	2107      	movs	r1, #7
 8002c94:	1e53      	subs	r3, r2, #1
 8002c96:	419a      	sbcs	r2, r3
 8002c98:	000b      	movs	r3, r1
 8002c9a:	4322      	orrs	r2, r4
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2400      	movs	r4, #0
 8002ca0:	4211      	tst	r1, r2
 8002ca2:	d009      	beq.n	8002cb8 <__aeabi_dmul+0x4f4>
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d05d      	beq.n	8002d68 <__aeabi_dmul+0x5a4>
 8002cac:	1d11      	adds	r1, r2, #4
 8002cae:	4291      	cmp	r1, r2
 8002cb0:	419b      	sbcs	r3, r3
 8002cb2:	000a      	movs	r2, r1
 8002cb4:	425b      	negs	r3, r3
 8002cb6:	075b      	lsls	r3, r3, #29
 8002cb8:	08d2      	lsrs	r2, r2, #3
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e5df      	b.n	8002880 <__aeabi_dmul+0xbc>
 8002cc0:	9b03      	ldr	r3, [sp, #12]
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	e5fa      	b.n	80028bc <__aeabi_dmul+0xf8>
 8002cc6:	9801      	ldr	r0, [sp, #4]
 8002cc8:	f7fd fc28 	bl	800051c <__clzsi2>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	0003      	movs	r3, r0
 8002cd0:	3215      	adds	r2, #21
 8002cd2:	3320      	adds	r3, #32
 8002cd4:	2a1c      	cmp	r2, #28
 8002cd6:	dc00      	bgt.n	8002cda <__aeabi_dmul+0x516>
 8002cd8:	e738      	b.n	8002b4c <__aeabi_dmul+0x388>
 8002cda:	9a01      	ldr	r2, [sp, #4]
 8002cdc:	3808      	subs	r0, #8
 8002cde:	4082      	lsls	r2, r0
 8002ce0:	e73f      	b.n	8002b62 <__aeabi_dmul+0x39e>
 8002ce2:	f7fd fc1b 	bl	800051c <__clzsi2>
 8002ce6:	2315      	movs	r3, #21
 8002ce8:	469c      	mov	ip, r3
 8002cea:	4484      	add	ip, r0
 8002cec:	0002      	movs	r2, r0
 8002cee:	4663      	mov	r3, ip
 8002cf0:	3220      	adds	r2, #32
 8002cf2:	2b1c      	cmp	r3, #28
 8002cf4:	dc00      	bgt.n	8002cf8 <__aeabi_dmul+0x534>
 8002cf6:	e758      	b.n	8002baa <__aeabi_dmul+0x3e6>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	4698      	mov	r8, r3
 8002cfc:	0023      	movs	r3, r4
 8002cfe:	3808      	subs	r0, #8
 8002d00:	4083      	lsls	r3, r0
 8002d02:	469a      	mov	sl, r3
 8002d04:	e762      	b.n	8002bcc <__aeabi_dmul+0x408>
 8002d06:	001d      	movs	r5, r3
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2400      	movs	r4, #0
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	e5a2      	b.n	8002858 <__aeabi_dmul+0x94>
 8002d12:	9002      	str	r0, [sp, #8]
 8002d14:	e632      	b.n	800297c <__aeabi_dmul+0x1b8>
 8002d16:	431c      	orrs	r4, r3
 8002d18:	9b00      	ldr	r3, [sp, #0]
 8002d1a:	9a01      	ldr	r2, [sp, #4]
 8002d1c:	4699      	mov	r9, r3
 8002d1e:	e5ae      	b.n	800287e <__aeabi_dmul+0xba>
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <__aeabi_dmul+0x5c8>)
 8002d22:	4652      	mov	r2, sl
 8002d24:	18c3      	adds	r3, r0, r3
 8002d26:	4640      	mov	r0, r8
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	40c8      	lsrs	r0, r1
 8002d2c:	4302      	orrs	r2, r0
 8002d2e:	4640      	mov	r0, r8
 8002d30:	4098      	lsls	r0, r3
 8002d32:	0003      	movs	r3, r0
 8002d34:	1e58      	subs	r0, r3, #1
 8002d36:	4183      	sbcs	r3, r0
 8002d38:	4654      	mov	r4, sl
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	40cc      	lsrs	r4, r1
 8002d3e:	0753      	lsls	r3, r2, #29
 8002d40:	d009      	beq.n	8002d56 <__aeabi_dmul+0x592>
 8002d42:	230f      	movs	r3, #15
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d005      	beq.n	8002d56 <__aeabi_dmul+0x592>
 8002d4a:	1d13      	adds	r3, r2, #4
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	4192      	sbcs	r2, r2
 8002d50:	4252      	negs	r2, r2
 8002d52:	18a4      	adds	r4, r4, r2
 8002d54:	001a      	movs	r2, r3
 8002d56:	0223      	lsls	r3, r4, #8
 8002d58:	d508      	bpl.n	8002d6c <__aeabi_dmul+0x5a8>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	2400      	movs	r4, #0
 8002d5e:	2200      	movs	r2, #0
 8002d60:	e58e      	b.n	8002880 <__aeabi_dmul+0xbc>
 8002d62:	4689      	mov	r9, r1
 8002d64:	2400      	movs	r4, #0
 8002d66:	e58b      	b.n	8002880 <__aeabi_dmul+0xbc>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e7a5      	b.n	8002cb8 <__aeabi_dmul+0x4f4>
 8002d6c:	0763      	lsls	r3, r4, #29
 8002d6e:	0264      	lsls	r4, r4, #9
 8002d70:	0b24      	lsrs	r4, r4, #12
 8002d72:	e7a1      	b.n	8002cb8 <__aeabi_dmul+0x4f4>
 8002d74:	9b00      	ldr	r3, [sp, #0]
 8002d76:	46a2      	mov	sl, r4
 8002d78:	4699      	mov	r9, r3
 8002d7a:	9b01      	ldr	r3, [sp, #4]
 8002d7c:	4698      	mov	r8, r3
 8002d7e:	e737      	b.n	8002bf0 <__aeabi_dmul+0x42c>
 8002d80:	fffffc0d 	.word	0xfffffc0d
 8002d84:	000007ff 	.word	0x000007ff
 8002d88:	0000043e 	.word	0x0000043e
 8002d8c:	0000041e 	.word	0x0000041e

08002d90 <__aeabi_dsub>:
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	4657      	mov	r7, sl
 8002d94:	464e      	mov	r6, r9
 8002d96:	4645      	mov	r5, r8
 8002d98:	46de      	mov	lr, fp
 8002d9a:	b5e0      	push	{r5, r6, r7, lr}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	9000      	str	r0, [sp, #0]
 8002da0:	9101      	str	r1, [sp, #4]
 8002da2:	030c      	lsls	r4, r1, #12
 8002da4:	004d      	lsls	r5, r1, #1
 8002da6:	0fce      	lsrs	r6, r1, #31
 8002da8:	0a61      	lsrs	r1, r4, #9
 8002daa:	9c00      	ldr	r4, [sp, #0]
 8002dac:	005f      	lsls	r7, r3, #1
 8002dae:	0f64      	lsrs	r4, r4, #29
 8002db0:	430c      	orrs	r4, r1
 8002db2:	9900      	ldr	r1, [sp, #0]
 8002db4:	9200      	str	r2, [sp, #0]
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	00c8      	lsls	r0, r1, #3
 8002dba:	0319      	lsls	r1, r3, #12
 8002dbc:	0d7b      	lsrs	r3, r7, #21
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	9b01      	ldr	r3, [sp, #4]
 8002dc2:	4fcc      	ldr	r7, [pc, #816]	@ (80030f4 <__aeabi_dsub+0x364>)
 8002dc4:	0fdb      	lsrs	r3, r3, #31
 8002dc6:	469c      	mov	ip, r3
 8002dc8:	0a4b      	lsrs	r3, r1, #9
 8002dca:	9900      	ldr	r1, [sp, #0]
 8002dcc:	4680      	mov	r8, r0
 8002dce:	0f49      	lsrs	r1, r1, #29
 8002dd0:	4319      	orrs	r1, r3
 8002dd2:	9b00      	ldr	r3, [sp, #0]
 8002dd4:	468b      	mov	fp, r1
 8002dd6:	00da      	lsls	r2, r3, #3
 8002dd8:	4692      	mov	sl, r2
 8002dda:	0d6d      	lsrs	r5, r5, #21
 8002ddc:	45b9      	cmp	r9, r7
 8002dde:	d100      	bne.n	8002de2 <__aeabi_dsub+0x52>
 8002de0:	e0bf      	b.n	8002f62 <__aeabi_dsub+0x1d2>
 8002de2:	2301      	movs	r3, #1
 8002de4:	4661      	mov	r1, ip
 8002de6:	4059      	eors	r1, r3
 8002de8:	464b      	mov	r3, r9
 8002dea:	468c      	mov	ip, r1
 8002dec:	1aeb      	subs	r3, r5, r3
 8002dee:	428e      	cmp	r6, r1
 8002df0:	d075      	beq.n	8002ede <__aeabi_dsub+0x14e>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	dc00      	bgt.n	8002df8 <__aeabi_dsub+0x68>
 8002df6:	e2a3      	b.n	8003340 <__aeabi_dsub+0x5b0>
 8002df8:	4649      	mov	r1, r9
 8002dfa:	2900      	cmp	r1, #0
 8002dfc:	d100      	bne.n	8002e00 <__aeabi_dsub+0x70>
 8002dfe:	e0ce      	b.n	8002f9e <__aeabi_dsub+0x20e>
 8002e00:	42bd      	cmp	r5, r7
 8002e02:	d100      	bne.n	8002e06 <__aeabi_dsub+0x76>
 8002e04:	e200      	b.n	8003208 <__aeabi_dsub+0x478>
 8002e06:	2701      	movs	r7, #1
 8002e08:	2b38      	cmp	r3, #56	@ 0x38
 8002e0a:	dc19      	bgt.n	8002e40 <__aeabi_dsub+0xb0>
 8002e0c:	2780      	movs	r7, #128	@ 0x80
 8002e0e:	4659      	mov	r1, fp
 8002e10:	043f      	lsls	r7, r7, #16
 8002e12:	4339      	orrs	r1, r7
 8002e14:	468b      	mov	fp, r1
 8002e16:	2b1f      	cmp	r3, #31
 8002e18:	dd00      	ble.n	8002e1c <__aeabi_dsub+0x8c>
 8002e1a:	e1fa      	b.n	8003212 <__aeabi_dsub+0x482>
 8002e1c:	2720      	movs	r7, #32
 8002e1e:	1af9      	subs	r1, r7, r3
 8002e20:	468c      	mov	ip, r1
 8002e22:	4659      	mov	r1, fp
 8002e24:	4667      	mov	r7, ip
 8002e26:	40b9      	lsls	r1, r7
 8002e28:	000f      	movs	r7, r1
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	40d9      	lsrs	r1, r3
 8002e2e:	430f      	orrs	r7, r1
 8002e30:	4661      	mov	r1, ip
 8002e32:	408a      	lsls	r2, r1
 8002e34:	1e51      	subs	r1, r2, #1
 8002e36:	418a      	sbcs	r2, r1
 8002e38:	4659      	mov	r1, fp
 8002e3a:	40d9      	lsrs	r1, r3
 8002e3c:	4317      	orrs	r7, r2
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	1bc7      	subs	r7, r0, r7
 8002e42:	42b8      	cmp	r0, r7
 8002e44:	4180      	sbcs	r0, r0
 8002e46:	4240      	negs	r0, r0
 8002e48:	1a24      	subs	r4, r4, r0
 8002e4a:	0223      	lsls	r3, r4, #8
 8002e4c:	d400      	bmi.n	8002e50 <__aeabi_dsub+0xc0>
 8002e4e:	e140      	b.n	80030d2 <__aeabi_dsub+0x342>
 8002e50:	0264      	lsls	r4, r4, #9
 8002e52:	0a64      	lsrs	r4, r4, #9
 8002e54:	2c00      	cmp	r4, #0
 8002e56:	d100      	bne.n	8002e5a <__aeabi_dsub+0xca>
 8002e58:	e154      	b.n	8003104 <__aeabi_dsub+0x374>
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f7fd fb5e 	bl	800051c <__clzsi2>
 8002e60:	0003      	movs	r3, r0
 8002e62:	3b08      	subs	r3, #8
 8002e64:	2120      	movs	r1, #32
 8002e66:	0038      	movs	r0, r7
 8002e68:	1aca      	subs	r2, r1, r3
 8002e6a:	40d0      	lsrs	r0, r2
 8002e6c:	409c      	lsls	r4, r3
 8002e6e:	0002      	movs	r2, r0
 8002e70:	409f      	lsls	r7, r3
 8002e72:	4322      	orrs	r2, r4
 8002e74:	429d      	cmp	r5, r3
 8002e76:	dd00      	ble.n	8002e7a <__aeabi_dsub+0xea>
 8002e78:	e1a6      	b.n	80031c8 <__aeabi_dsub+0x438>
 8002e7a:	1b58      	subs	r0, r3, r5
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	1a09      	subs	r1, r1, r0
 8002e80:	003c      	movs	r4, r7
 8002e82:	408f      	lsls	r7, r1
 8002e84:	40c4      	lsrs	r4, r0
 8002e86:	1e7b      	subs	r3, r7, #1
 8002e88:	419f      	sbcs	r7, r3
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	408b      	lsls	r3, r1
 8002e8e:	4327      	orrs	r7, r4
 8002e90:	431f      	orrs	r7, r3
 8002e92:	40c2      	lsrs	r2, r0
 8002e94:	003b      	movs	r3, r7
 8002e96:	0014      	movs	r4, r2
 8002e98:	2500      	movs	r5, #0
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	d100      	bne.n	8002ea0 <__aeabi_dsub+0x110>
 8002e9e:	e1f7      	b.n	8003290 <__aeabi_dsub+0x500>
 8002ea0:	077b      	lsls	r3, r7, #29
 8002ea2:	d100      	bne.n	8002ea6 <__aeabi_dsub+0x116>
 8002ea4:	e377      	b.n	8003596 <__aeabi_dsub+0x806>
 8002ea6:	230f      	movs	r3, #15
 8002ea8:	0038      	movs	r0, r7
 8002eaa:	403b      	ands	r3, r7
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d004      	beq.n	8002eba <__aeabi_dsub+0x12a>
 8002eb0:	1d38      	adds	r0, r7, #4
 8002eb2:	42b8      	cmp	r0, r7
 8002eb4:	41bf      	sbcs	r7, r7
 8002eb6:	427f      	negs	r7, r7
 8002eb8:	19e4      	adds	r4, r4, r7
 8002eba:	0223      	lsls	r3, r4, #8
 8002ebc:	d400      	bmi.n	8002ec0 <__aeabi_dsub+0x130>
 8002ebe:	e368      	b.n	8003592 <__aeabi_dsub+0x802>
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80030f4 <__aeabi_dsub+0x364>)
 8002ec2:	3501      	adds	r5, #1
 8002ec4:	429d      	cmp	r5, r3
 8002ec6:	d100      	bne.n	8002eca <__aeabi_dsub+0x13a>
 8002ec8:	e0f4      	b.n	80030b4 <__aeabi_dsub+0x324>
 8002eca:	4b8b      	ldr	r3, [pc, #556]	@ (80030f8 <__aeabi_dsub+0x368>)
 8002ecc:	056d      	lsls	r5, r5, #21
 8002ece:	401c      	ands	r4, r3
 8002ed0:	0d6d      	lsrs	r5, r5, #21
 8002ed2:	0767      	lsls	r7, r4, #29
 8002ed4:	08c0      	lsrs	r0, r0, #3
 8002ed6:	0264      	lsls	r4, r4, #9
 8002ed8:	4307      	orrs	r7, r0
 8002eda:	0b24      	lsrs	r4, r4, #12
 8002edc:	e0ec      	b.n	80030b8 <__aeabi_dsub+0x328>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	dc00      	bgt.n	8002ee4 <__aeabi_dsub+0x154>
 8002ee2:	e329      	b.n	8003538 <__aeabi_dsub+0x7a8>
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	2900      	cmp	r1, #0
 8002ee8:	d000      	beq.n	8002eec <__aeabi_dsub+0x15c>
 8002eea:	e0d6      	b.n	800309a <__aeabi_dsub+0x30a>
 8002eec:	4659      	mov	r1, fp
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	d100      	bne.n	8002ef4 <__aeabi_dsub+0x164>
 8002ef2:	e12e      	b.n	8003152 <__aeabi_dsub+0x3c2>
 8002ef4:	1e59      	subs	r1, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d100      	bne.n	8002efc <__aeabi_dsub+0x16c>
 8002efa:	e1e6      	b.n	80032ca <__aeabi_dsub+0x53a>
 8002efc:	42bb      	cmp	r3, r7
 8002efe:	d100      	bne.n	8002f02 <__aeabi_dsub+0x172>
 8002f00:	e182      	b.n	8003208 <__aeabi_dsub+0x478>
 8002f02:	2701      	movs	r7, #1
 8002f04:	000b      	movs	r3, r1
 8002f06:	2938      	cmp	r1, #56	@ 0x38
 8002f08:	dc14      	bgt.n	8002f34 <__aeabi_dsub+0x1a4>
 8002f0a:	2b1f      	cmp	r3, #31
 8002f0c:	dd00      	ble.n	8002f10 <__aeabi_dsub+0x180>
 8002f0e:	e23c      	b.n	800338a <__aeabi_dsub+0x5fa>
 8002f10:	2720      	movs	r7, #32
 8002f12:	1af9      	subs	r1, r7, r3
 8002f14:	468c      	mov	ip, r1
 8002f16:	4659      	mov	r1, fp
 8002f18:	4667      	mov	r7, ip
 8002f1a:	40b9      	lsls	r1, r7
 8002f1c:	000f      	movs	r7, r1
 8002f1e:	0011      	movs	r1, r2
 8002f20:	40d9      	lsrs	r1, r3
 8002f22:	430f      	orrs	r7, r1
 8002f24:	4661      	mov	r1, ip
 8002f26:	408a      	lsls	r2, r1
 8002f28:	1e51      	subs	r1, r2, #1
 8002f2a:	418a      	sbcs	r2, r1
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	40d9      	lsrs	r1, r3
 8002f30:	4317      	orrs	r7, r2
 8002f32:	1864      	adds	r4, r4, r1
 8002f34:	183f      	adds	r7, r7, r0
 8002f36:	4287      	cmp	r7, r0
 8002f38:	4180      	sbcs	r0, r0
 8002f3a:	4240      	negs	r0, r0
 8002f3c:	1824      	adds	r4, r4, r0
 8002f3e:	0223      	lsls	r3, r4, #8
 8002f40:	d400      	bmi.n	8002f44 <__aeabi_dsub+0x1b4>
 8002f42:	e0c6      	b.n	80030d2 <__aeabi_dsub+0x342>
 8002f44:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <__aeabi_dsub+0x364>)
 8002f46:	3501      	adds	r5, #1
 8002f48:	429d      	cmp	r5, r3
 8002f4a:	d100      	bne.n	8002f4e <__aeabi_dsub+0x1be>
 8002f4c:	e0b2      	b.n	80030b4 <__aeabi_dsub+0x324>
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4b69      	ldr	r3, [pc, #420]	@ (80030f8 <__aeabi_dsub+0x368>)
 8002f52:	087a      	lsrs	r2, r7, #1
 8002f54:	401c      	ands	r4, r3
 8002f56:	4039      	ands	r1, r7
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	07e7      	lsls	r7, r4, #31
 8002f5c:	4317      	orrs	r7, r2
 8002f5e:	0864      	lsrs	r4, r4, #1
 8002f60:	e79e      	b.n	8002ea0 <__aeabi_dsub+0x110>
 8002f62:	4b66      	ldr	r3, [pc, #408]	@ (80030fc <__aeabi_dsub+0x36c>)
 8002f64:	4311      	orrs	r1, r2
 8002f66:	468a      	mov	sl, r1
 8002f68:	18eb      	adds	r3, r5, r3
 8002f6a:	2900      	cmp	r1, #0
 8002f6c:	d028      	beq.n	8002fc0 <__aeabi_dsub+0x230>
 8002f6e:	4566      	cmp	r6, ip
 8002f70:	d02c      	beq.n	8002fcc <__aeabi_dsub+0x23c>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d05b      	beq.n	800302e <__aeabi_dsub+0x29e>
 8002f76:	2d00      	cmp	r5, #0
 8002f78:	d100      	bne.n	8002f7c <__aeabi_dsub+0x1ec>
 8002f7a:	e12c      	b.n	80031d6 <__aeabi_dsub+0x446>
 8002f7c:	465b      	mov	r3, fp
 8002f7e:	4666      	mov	r6, ip
 8002f80:	075f      	lsls	r7, r3, #29
 8002f82:	08d2      	lsrs	r2, r2, #3
 8002f84:	4317      	orrs	r7, r2
 8002f86:	08dd      	lsrs	r5, r3, #3
 8002f88:	003b      	movs	r3, r7
 8002f8a:	432b      	orrs	r3, r5
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x200>
 8002f8e:	e0e2      	b.n	8003156 <__aeabi_dsub+0x3c6>
 8002f90:	2480      	movs	r4, #128	@ 0x80
 8002f92:	0324      	lsls	r4, r4, #12
 8002f94:	432c      	orrs	r4, r5
 8002f96:	0324      	lsls	r4, r4, #12
 8002f98:	4d56      	ldr	r5, [pc, #344]	@ (80030f4 <__aeabi_dsub+0x364>)
 8002f9a:	0b24      	lsrs	r4, r4, #12
 8002f9c:	e08c      	b.n	80030b8 <__aeabi_dsub+0x328>
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	4311      	orrs	r1, r2
 8002fa2:	d100      	bne.n	8002fa6 <__aeabi_dsub+0x216>
 8002fa4:	e0d5      	b.n	8003152 <__aeabi_dsub+0x3c2>
 8002fa6:	1e59      	subs	r1, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d100      	bne.n	8002fae <__aeabi_dsub+0x21e>
 8002fac:	e1b9      	b.n	8003322 <__aeabi_dsub+0x592>
 8002fae:	42bb      	cmp	r3, r7
 8002fb0:	d100      	bne.n	8002fb4 <__aeabi_dsub+0x224>
 8002fb2:	e1b1      	b.n	8003318 <__aeabi_dsub+0x588>
 8002fb4:	2701      	movs	r7, #1
 8002fb6:	000b      	movs	r3, r1
 8002fb8:	2938      	cmp	r1, #56	@ 0x38
 8002fba:	dd00      	ble.n	8002fbe <__aeabi_dsub+0x22e>
 8002fbc:	e740      	b.n	8002e40 <__aeabi_dsub+0xb0>
 8002fbe:	e72a      	b.n	8002e16 <__aeabi_dsub+0x86>
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	2701      	movs	r7, #1
 8002fc4:	4079      	eors	r1, r7
 8002fc6:	468c      	mov	ip, r1
 8002fc8:	4566      	cmp	r6, ip
 8002fca:	d1d2      	bne.n	8002f72 <__aeabi_dsub+0x1e2>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x242>
 8002fd0:	e0c5      	b.n	800315e <__aeabi_dsub+0x3ce>
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	d000      	beq.n	8002fd8 <__aeabi_dsub+0x248>
 8002fd6:	e155      	b.n	8003284 <__aeabi_dsub+0x4f4>
 8002fd8:	464b      	mov	r3, r9
 8002fda:	0025      	movs	r5, r4
 8002fdc:	4305      	orrs	r5, r0
 8002fde:	d100      	bne.n	8002fe2 <__aeabi_dsub+0x252>
 8002fe0:	e212      	b.n	8003408 <__aeabi_dsub+0x678>
 8002fe2:	1e59      	subs	r1, r3, #1
 8002fe4:	468c      	mov	ip, r1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d100      	bne.n	8002fec <__aeabi_dsub+0x25c>
 8002fea:	e249      	b.n	8003480 <__aeabi_dsub+0x6f0>
 8002fec:	4d41      	ldr	r5, [pc, #260]	@ (80030f4 <__aeabi_dsub+0x364>)
 8002fee:	42ab      	cmp	r3, r5
 8002ff0:	d100      	bne.n	8002ff4 <__aeabi_dsub+0x264>
 8002ff2:	e28f      	b.n	8003514 <__aeabi_dsub+0x784>
 8002ff4:	2701      	movs	r7, #1
 8002ff6:	2938      	cmp	r1, #56	@ 0x38
 8002ff8:	dc11      	bgt.n	800301e <__aeabi_dsub+0x28e>
 8002ffa:	4663      	mov	r3, ip
 8002ffc:	2b1f      	cmp	r3, #31
 8002ffe:	dd00      	ble.n	8003002 <__aeabi_dsub+0x272>
 8003000:	e25b      	b.n	80034ba <__aeabi_dsub+0x72a>
 8003002:	4661      	mov	r1, ip
 8003004:	2320      	movs	r3, #32
 8003006:	0027      	movs	r7, r4
 8003008:	1a5b      	subs	r3, r3, r1
 800300a:	0005      	movs	r5, r0
 800300c:	4098      	lsls	r0, r3
 800300e:	409f      	lsls	r7, r3
 8003010:	40cd      	lsrs	r5, r1
 8003012:	1e43      	subs	r3, r0, #1
 8003014:	4198      	sbcs	r0, r3
 8003016:	40cc      	lsrs	r4, r1
 8003018:	432f      	orrs	r7, r5
 800301a:	4307      	orrs	r7, r0
 800301c:	44a3      	add	fp, r4
 800301e:	18bf      	adds	r7, r7, r2
 8003020:	4297      	cmp	r7, r2
 8003022:	4192      	sbcs	r2, r2
 8003024:	4252      	negs	r2, r2
 8003026:	445a      	add	r2, fp
 8003028:	0014      	movs	r4, r2
 800302a:	464d      	mov	r5, r9
 800302c:	e787      	b.n	8002f3e <__aeabi_dsub+0x1ae>
 800302e:	4f34      	ldr	r7, [pc, #208]	@ (8003100 <__aeabi_dsub+0x370>)
 8003030:	1c6b      	adds	r3, r5, #1
 8003032:	423b      	tst	r3, r7
 8003034:	d000      	beq.n	8003038 <__aeabi_dsub+0x2a8>
 8003036:	e0b6      	b.n	80031a6 <__aeabi_dsub+0x416>
 8003038:	4659      	mov	r1, fp
 800303a:	0023      	movs	r3, r4
 800303c:	4311      	orrs	r1, r2
 800303e:	000f      	movs	r7, r1
 8003040:	4303      	orrs	r3, r0
 8003042:	2d00      	cmp	r5, #0
 8003044:	d000      	beq.n	8003048 <__aeabi_dsub+0x2b8>
 8003046:	e126      	b.n	8003296 <__aeabi_dsub+0x506>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d100      	bne.n	800304e <__aeabi_dsub+0x2be>
 800304c:	e1c0      	b.n	80033d0 <__aeabi_dsub+0x640>
 800304e:	2900      	cmp	r1, #0
 8003050:	d100      	bne.n	8003054 <__aeabi_dsub+0x2c4>
 8003052:	e0a1      	b.n	8003198 <__aeabi_dsub+0x408>
 8003054:	1a83      	subs	r3, r0, r2
 8003056:	4698      	mov	r8, r3
 8003058:	465b      	mov	r3, fp
 800305a:	4540      	cmp	r0, r8
 800305c:	41ad      	sbcs	r5, r5
 800305e:	1ae3      	subs	r3, r4, r3
 8003060:	426d      	negs	r5, r5
 8003062:	1b5b      	subs	r3, r3, r5
 8003064:	2580      	movs	r5, #128	@ 0x80
 8003066:	042d      	lsls	r5, r5, #16
 8003068:	422b      	tst	r3, r5
 800306a:	d100      	bne.n	800306e <__aeabi_dsub+0x2de>
 800306c:	e14b      	b.n	8003306 <__aeabi_dsub+0x576>
 800306e:	465b      	mov	r3, fp
 8003070:	1a10      	subs	r0, r2, r0
 8003072:	4282      	cmp	r2, r0
 8003074:	4192      	sbcs	r2, r2
 8003076:	1b1c      	subs	r4, r3, r4
 8003078:	0007      	movs	r7, r0
 800307a:	2601      	movs	r6, #1
 800307c:	4663      	mov	r3, ip
 800307e:	4252      	negs	r2, r2
 8003080:	1aa4      	subs	r4, r4, r2
 8003082:	4327      	orrs	r7, r4
 8003084:	401e      	ands	r6, r3
 8003086:	2f00      	cmp	r7, #0
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x2fc>
 800308a:	e142      	b.n	8003312 <__aeabi_dsub+0x582>
 800308c:	422c      	tst	r4, r5
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x302>
 8003090:	e26d      	b.n	800356e <__aeabi_dsub+0x7de>
 8003092:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <__aeabi_dsub+0x368>)
 8003094:	2501      	movs	r5, #1
 8003096:	401c      	ands	r4, r3
 8003098:	e71b      	b.n	8002ed2 <__aeabi_dsub+0x142>
 800309a:	42bd      	cmp	r5, r7
 800309c:	d100      	bne.n	80030a0 <__aeabi_dsub+0x310>
 800309e:	e13b      	b.n	8003318 <__aeabi_dsub+0x588>
 80030a0:	2701      	movs	r7, #1
 80030a2:	2b38      	cmp	r3, #56	@ 0x38
 80030a4:	dd00      	ble.n	80030a8 <__aeabi_dsub+0x318>
 80030a6:	e745      	b.n	8002f34 <__aeabi_dsub+0x1a4>
 80030a8:	2780      	movs	r7, #128	@ 0x80
 80030aa:	4659      	mov	r1, fp
 80030ac:	043f      	lsls	r7, r7, #16
 80030ae:	4339      	orrs	r1, r7
 80030b0:	468b      	mov	fp, r1
 80030b2:	e72a      	b.n	8002f0a <__aeabi_dsub+0x17a>
 80030b4:	2400      	movs	r4, #0
 80030b6:	2700      	movs	r7, #0
 80030b8:	052d      	lsls	r5, r5, #20
 80030ba:	4325      	orrs	r5, r4
 80030bc:	07f6      	lsls	r6, r6, #31
 80030be:	4335      	orrs	r5, r6
 80030c0:	0038      	movs	r0, r7
 80030c2:	0029      	movs	r1, r5
 80030c4:	b003      	add	sp, #12
 80030c6:	bcf0      	pop	{r4, r5, r6, r7}
 80030c8:	46bb      	mov	fp, r7
 80030ca:	46b2      	mov	sl, r6
 80030cc:	46a9      	mov	r9, r5
 80030ce:	46a0      	mov	r8, r4
 80030d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d2:	077b      	lsls	r3, r7, #29
 80030d4:	d004      	beq.n	80030e0 <__aeabi_dsub+0x350>
 80030d6:	230f      	movs	r3, #15
 80030d8:	403b      	ands	r3, r7
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d000      	beq.n	80030e0 <__aeabi_dsub+0x350>
 80030de:	e6e7      	b.n	8002eb0 <__aeabi_dsub+0x120>
 80030e0:	002b      	movs	r3, r5
 80030e2:	08f8      	lsrs	r0, r7, #3
 80030e4:	4a03      	ldr	r2, [pc, #12]	@ (80030f4 <__aeabi_dsub+0x364>)
 80030e6:	0767      	lsls	r7, r4, #29
 80030e8:	4307      	orrs	r7, r0
 80030ea:	08e5      	lsrs	r5, r4, #3
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d100      	bne.n	80030f2 <__aeabi_dsub+0x362>
 80030f0:	e74a      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 80030f2:	e0a5      	b.n	8003240 <__aeabi_dsub+0x4b0>
 80030f4:	000007ff 	.word	0x000007ff
 80030f8:	ff7fffff 	.word	0xff7fffff
 80030fc:	fffff801 	.word	0xfffff801
 8003100:	000007fe 	.word	0x000007fe
 8003104:	0038      	movs	r0, r7
 8003106:	f7fd fa09 	bl	800051c <__clzsi2>
 800310a:	0003      	movs	r3, r0
 800310c:	3318      	adds	r3, #24
 800310e:	2b1f      	cmp	r3, #31
 8003110:	dc00      	bgt.n	8003114 <__aeabi_dsub+0x384>
 8003112:	e6a7      	b.n	8002e64 <__aeabi_dsub+0xd4>
 8003114:	003a      	movs	r2, r7
 8003116:	3808      	subs	r0, #8
 8003118:	4082      	lsls	r2, r0
 800311a:	429d      	cmp	r5, r3
 800311c:	dd00      	ble.n	8003120 <__aeabi_dsub+0x390>
 800311e:	e08a      	b.n	8003236 <__aeabi_dsub+0x4a6>
 8003120:	1b5b      	subs	r3, r3, r5
 8003122:	1c58      	adds	r0, r3, #1
 8003124:	281f      	cmp	r0, #31
 8003126:	dc00      	bgt.n	800312a <__aeabi_dsub+0x39a>
 8003128:	e1d8      	b.n	80034dc <__aeabi_dsub+0x74c>
 800312a:	0017      	movs	r7, r2
 800312c:	3b1f      	subs	r3, #31
 800312e:	40df      	lsrs	r7, r3
 8003130:	2820      	cmp	r0, #32
 8003132:	d005      	beq.n	8003140 <__aeabi_dsub+0x3b0>
 8003134:	2340      	movs	r3, #64	@ 0x40
 8003136:	1a1b      	subs	r3, r3, r0
 8003138:	409a      	lsls	r2, r3
 800313a:	1e53      	subs	r3, r2, #1
 800313c:	419a      	sbcs	r2, r3
 800313e:	4317      	orrs	r7, r2
 8003140:	2500      	movs	r5, #0
 8003142:	2f00      	cmp	r7, #0
 8003144:	d100      	bne.n	8003148 <__aeabi_dsub+0x3b8>
 8003146:	e0e5      	b.n	8003314 <__aeabi_dsub+0x584>
 8003148:	077b      	lsls	r3, r7, #29
 800314a:	d000      	beq.n	800314e <__aeabi_dsub+0x3be>
 800314c:	e6ab      	b.n	8002ea6 <__aeabi_dsub+0x116>
 800314e:	002c      	movs	r4, r5
 8003150:	e7c6      	b.n	80030e0 <__aeabi_dsub+0x350>
 8003152:	08c0      	lsrs	r0, r0, #3
 8003154:	e7c6      	b.n	80030e4 <__aeabi_dsub+0x354>
 8003156:	2700      	movs	r7, #0
 8003158:	2400      	movs	r4, #0
 800315a:	4dd1      	ldr	r5, [pc, #836]	@ (80034a0 <__aeabi_dsub+0x710>)
 800315c:	e7ac      	b.n	80030b8 <__aeabi_dsub+0x328>
 800315e:	4fd1      	ldr	r7, [pc, #836]	@ (80034a4 <__aeabi_dsub+0x714>)
 8003160:	1c6b      	adds	r3, r5, #1
 8003162:	423b      	tst	r3, r7
 8003164:	d171      	bne.n	800324a <__aeabi_dsub+0x4ba>
 8003166:	0023      	movs	r3, r4
 8003168:	4303      	orrs	r3, r0
 800316a:	2d00      	cmp	r5, #0
 800316c:	d000      	beq.n	8003170 <__aeabi_dsub+0x3e0>
 800316e:	e14e      	b.n	800340e <__aeabi_dsub+0x67e>
 8003170:	4657      	mov	r7, sl
 8003172:	2b00      	cmp	r3, #0
 8003174:	d100      	bne.n	8003178 <__aeabi_dsub+0x3e8>
 8003176:	e1b5      	b.n	80034e4 <__aeabi_dsub+0x754>
 8003178:	2f00      	cmp	r7, #0
 800317a:	d00d      	beq.n	8003198 <__aeabi_dsub+0x408>
 800317c:	1883      	adds	r3, r0, r2
 800317e:	4283      	cmp	r3, r0
 8003180:	4180      	sbcs	r0, r0
 8003182:	445c      	add	r4, fp
 8003184:	4240      	negs	r0, r0
 8003186:	1824      	adds	r4, r4, r0
 8003188:	0222      	lsls	r2, r4, #8
 800318a:	d500      	bpl.n	800318e <__aeabi_dsub+0x3fe>
 800318c:	e1c8      	b.n	8003520 <__aeabi_dsub+0x790>
 800318e:	001f      	movs	r7, r3
 8003190:	4698      	mov	r8, r3
 8003192:	4327      	orrs	r7, r4
 8003194:	d100      	bne.n	8003198 <__aeabi_dsub+0x408>
 8003196:	e0bc      	b.n	8003312 <__aeabi_dsub+0x582>
 8003198:	4643      	mov	r3, r8
 800319a:	0767      	lsls	r7, r4, #29
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	431f      	orrs	r7, r3
 80031a0:	08e5      	lsrs	r5, r4, #3
 80031a2:	2300      	movs	r3, #0
 80031a4:	e04c      	b.n	8003240 <__aeabi_dsub+0x4b0>
 80031a6:	1a83      	subs	r3, r0, r2
 80031a8:	4698      	mov	r8, r3
 80031aa:	465b      	mov	r3, fp
 80031ac:	4540      	cmp	r0, r8
 80031ae:	41bf      	sbcs	r7, r7
 80031b0:	1ae3      	subs	r3, r4, r3
 80031b2:	427f      	negs	r7, r7
 80031b4:	1bdb      	subs	r3, r3, r7
 80031b6:	021f      	lsls	r7, r3, #8
 80031b8:	d47c      	bmi.n	80032b4 <__aeabi_dsub+0x524>
 80031ba:	4647      	mov	r7, r8
 80031bc:	431f      	orrs	r7, r3
 80031be:	d100      	bne.n	80031c2 <__aeabi_dsub+0x432>
 80031c0:	e0a6      	b.n	8003310 <__aeabi_dsub+0x580>
 80031c2:	001c      	movs	r4, r3
 80031c4:	4647      	mov	r7, r8
 80031c6:	e645      	b.n	8002e54 <__aeabi_dsub+0xc4>
 80031c8:	4cb7      	ldr	r4, [pc, #732]	@ (80034a8 <__aeabi_dsub+0x718>)
 80031ca:	1aed      	subs	r5, r5, r3
 80031cc:	4014      	ands	r4, r2
 80031ce:	077b      	lsls	r3, r7, #29
 80031d0:	d000      	beq.n	80031d4 <__aeabi_dsub+0x444>
 80031d2:	e780      	b.n	80030d6 <__aeabi_dsub+0x346>
 80031d4:	e784      	b.n	80030e0 <__aeabi_dsub+0x350>
 80031d6:	464b      	mov	r3, r9
 80031d8:	0025      	movs	r5, r4
 80031da:	4305      	orrs	r5, r0
 80031dc:	d066      	beq.n	80032ac <__aeabi_dsub+0x51c>
 80031de:	1e5f      	subs	r7, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d100      	bne.n	80031e6 <__aeabi_dsub+0x456>
 80031e4:	e0fc      	b.n	80033e0 <__aeabi_dsub+0x650>
 80031e6:	4dae      	ldr	r5, [pc, #696]	@ (80034a0 <__aeabi_dsub+0x710>)
 80031e8:	42ab      	cmp	r3, r5
 80031ea:	d100      	bne.n	80031ee <__aeabi_dsub+0x45e>
 80031ec:	e15e      	b.n	80034ac <__aeabi_dsub+0x71c>
 80031ee:	4666      	mov	r6, ip
 80031f0:	2f38      	cmp	r7, #56	@ 0x38
 80031f2:	dc00      	bgt.n	80031f6 <__aeabi_dsub+0x466>
 80031f4:	e0b4      	b.n	8003360 <__aeabi_dsub+0x5d0>
 80031f6:	2001      	movs	r0, #1
 80031f8:	1a17      	subs	r7, r2, r0
 80031fa:	42ba      	cmp	r2, r7
 80031fc:	4192      	sbcs	r2, r2
 80031fe:	465b      	mov	r3, fp
 8003200:	4252      	negs	r2, r2
 8003202:	464d      	mov	r5, r9
 8003204:	1a9c      	subs	r4, r3, r2
 8003206:	e620      	b.n	8002e4a <__aeabi_dsub+0xba>
 8003208:	0767      	lsls	r7, r4, #29
 800320a:	08c0      	lsrs	r0, r0, #3
 800320c:	4307      	orrs	r7, r0
 800320e:	08e5      	lsrs	r5, r4, #3
 8003210:	e6ba      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003212:	001f      	movs	r7, r3
 8003214:	4659      	mov	r1, fp
 8003216:	3f20      	subs	r7, #32
 8003218:	40f9      	lsrs	r1, r7
 800321a:	000f      	movs	r7, r1
 800321c:	2b20      	cmp	r3, #32
 800321e:	d005      	beq.n	800322c <__aeabi_dsub+0x49c>
 8003220:	2140      	movs	r1, #64	@ 0x40
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	4659      	mov	r1, fp
 8003226:	4099      	lsls	r1, r3
 8003228:	430a      	orrs	r2, r1
 800322a:	4692      	mov	sl, r2
 800322c:	4653      	mov	r3, sl
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	4193      	sbcs	r3, r2
 8003232:	431f      	orrs	r7, r3
 8003234:	e604      	b.n	8002e40 <__aeabi_dsub+0xb0>
 8003236:	1aeb      	subs	r3, r5, r3
 8003238:	4d9b      	ldr	r5, [pc, #620]	@ (80034a8 <__aeabi_dsub+0x718>)
 800323a:	4015      	ands	r5, r2
 800323c:	076f      	lsls	r7, r5, #29
 800323e:	08ed      	lsrs	r5, r5, #3
 8003240:	032c      	lsls	r4, r5, #12
 8003242:	055d      	lsls	r5, r3, #21
 8003244:	0b24      	lsrs	r4, r4, #12
 8003246:	0d6d      	lsrs	r5, r5, #21
 8003248:	e736      	b.n	80030b8 <__aeabi_dsub+0x328>
 800324a:	4d95      	ldr	r5, [pc, #596]	@ (80034a0 <__aeabi_dsub+0x710>)
 800324c:	42ab      	cmp	r3, r5
 800324e:	d100      	bne.n	8003252 <__aeabi_dsub+0x4c2>
 8003250:	e0d6      	b.n	8003400 <__aeabi_dsub+0x670>
 8003252:	1882      	adds	r2, r0, r2
 8003254:	0021      	movs	r1, r4
 8003256:	4282      	cmp	r2, r0
 8003258:	4180      	sbcs	r0, r0
 800325a:	4459      	add	r1, fp
 800325c:	4240      	negs	r0, r0
 800325e:	1808      	adds	r0, r1, r0
 8003260:	07c7      	lsls	r7, r0, #31
 8003262:	0852      	lsrs	r2, r2, #1
 8003264:	4317      	orrs	r7, r2
 8003266:	0844      	lsrs	r4, r0, #1
 8003268:	0752      	lsls	r2, r2, #29
 800326a:	d400      	bmi.n	800326e <__aeabi_dsub+0x4de>
 800326c:	e185      	b.n	800357a <__aeabi_dsub+0x7ea>
 800326e:	220f      	movs	r2, #15
 8003270:	001d      	movs	r5, r3
 8003272:	403a      	ands	r2, r7
 8003274:	2a04      	cmp	r2, #4
 8003276:	d000      	beq.n	800327a <__aeabi_dsub+0x4ea>
 8003278:	e61a      	b.n	8002eb0 <__aeabi_dsub+0x120>
 800327a:	08ff      	lsrs	r7, r7, #3
 800327c:	0764      	lsls	r4, r4, #29
 800327e:	4327      	orrs	r7, r4
 8003280:	0905      	lsrs	r5, r0, #4
 8003282:	e7dd      	b.n	8003240 <__aeabi_dsub+0x4b0>
 8003284:	465b      	mov	r3, fp
 8003286:	08d2      	lsrs	r2, r2, #3
 8003288:	075f      	lsls	r7, r3, #29
 800328a:	4317      	orrs	r7, r2
 800328c:	08dd      	lsrs	r5, r3, #3
 800328e:	e67b      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003290:	2700      	movs	r7, #0
 8003292:	2400      	movs	r4, #0
 8003294:	e710      	b.n	80030b8 <__aeabi_dsub+0x328>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d000      	beq.n	800329c <__aeabi_dsub+0x50c>
 800329a:	e0d6      	b.n	800344a <__aeabi_dsub+0x6ba>
 800329c:	2900      	cmp	r1, #0
 800329e:	d000      	beq.n	80032a2 <__aeabi_dsub+0x512>
 80032a0:	e12f      	b.n	8003502 <__aeabi_dsub+0x772>
 80032a2:	2480      	movs	r4, #128	@ 0x80
 80032a4:	2600      	movs	r6, #0
 80032a6:	4d7e      	ldr	r5, [pc, #504]	@ (80034a0 <__aeabi_dsub+0x710>)
 80032a8:	0324      	lsls	r4, r4, #12
 80032aa:	e705      	b.n	80030b8 <__aeabi_dsub+0x328>
 80032ac:	4666      	mov	r6, ip
 80032ae:	465c      	mov	r4, fp
 80032b0:	08d0      	lsrs	r0, r2, #3
 80032b2:	e717      	b.n	80030e4 <__aeabi_dsub+0x354>
 80032b4:	465b      	mov	r3, fp
 80032b6:	1a17      	subs	r7, r2, r0
 80032b8:	42ba      	cmp	r2, r7
 80032ba:	4192      	sbcs	r2, r2
 80032bc:	1b1c      	subs	r4, r3, r4
 80032be:	2601      	movs	r6, #1
 80032c0:	4663      	mov	r3, ip
 80032c2:	4252      	negs	r2, r2
 80032c4:	1aa4      	subs	r4, r4, r2
 80032c6:	401e      	ands	r6, r3
 80032c8:	e5c4      	b.n	8002e54 <__aeabi_dsub+0xc4>
 80032ca:	1883      	adds	r3, r0, r2
 80032cc:	4283      	cmp	r3, r0
 80032ce:	4180      	sbcs	r0, r0
 80032d0:	445c      	add	r4, fp
 80032d2:	4240      	negs	r0, r0
 80032d4:	1825      	adds	r5, r4, r0
 80032d6:	022a      	lsls	r2, r5, #8
 80032d8:	d400      	bmi.n	80032dc <__aeabi_dsub+0x54c>
 80032da:	e0da      	b.n	8003492 <__aeabi_dsub+0x702>
 80032dc:	4a72      	ldr	r2, [pc, #456]	@ (80034a8 <__aeabi_dsub+0x718>)
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	4015      	ands	r5, r2
 80032e2:	07ea      	lsls	r2, r5, #31
 80032e4:	431a      	orrs	r2, r3
 80032e6:	0869      	lsrs	r1, r5, #1
 80032e8:	075b      	lsls	r3, r3, #29
 80032ea:	d400      	bmi.n	80032ee <__aeabi_dsub+0x55e>
 80032ec:	e14a      	b.n	8003584 <__aeabi_dsub+0x7f4>
 80032ee:	230f      	movs	r3, #15
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d100      	bne.n	80032f8 <__aeabi_dsub+0x568>
 80032f6:	e0fc      	b.n	80034f2 <__aeabi_dsub+0x762>
 80032f8:	1d17      	adds	r7, r2, #4
 80032fa:	4297      	cmp	r7, r2
 80032fc:	41a4      	sbcs	r4, r4
 80032fe:	4264      	negs	r4, r4
 8003300:	2502      	movs	r5, #2
 8003302:	1864      	adds	r4, r4, r1
 8003304:	e6ec      	b.n	80030e0 <__aeabi_dsub+0x350>
 8003306:	4647      	mov	r7, r8
 8003308:	001c      	movs	r4, r3
 800330a:	431f      	orrs	r7, r3
 800330c:	d000      	beq.n	8003310 <__aeabi_dsub+0x580>
 800330e:	e743      	b.n	8003198 <__aeabi_dsub+0x408>
 8003310:	2600      	movs	r6, #0
 8003312:	2500      	movs	r5, #0
 8003314:	2400      	movs	r4, #0
 8003316:	e6cf      	b.n	80030b8 <__aeabi_dsub+0x328>
 8003318:	08c0      	lsrs	r0, r0, #3
 800331a:	0767      	lsls	r7, r4, #29
 800331c:	4307      	orrs	r7, r0
 800331e:	08e5      	lsrs	r5, r4, #3
 8003320:	e632      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003322:	1a87      	subs	r7, r0, r2
 8003324:	465b      	mov	r3, fp
 8003326:	42b8      	cmp	r0, r7
 8003328:	4180      	sbcs	r0, r0
 800332a:	1ae4      	subs	r4, r4, r3
 800332c:	4240      	negs	r0, r0
 800332e:	1a24      	subs	r4, r4, r0
 8003330:	0223      	lsls	r3, r4, #8
 8003332:	d428      	bmi.n	8003386 <__aeabi_dsub+0x5f6>
 8003334:	0763      	lsls	r3, r4, #29
 8003336:	08ff      	lsrs	r7, r7, #3
 8003338:	431f      	orrs	r7, r3
 800333a:	08e5      	lsrs	r5, r4, #3
 800333c:	2301      	movs	r3, #1
 800333e:	e77f      	b.n	8003240 <__aeabi_dsub+0x4b0>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d100      	bne.n	8003346 <__aeabi_dsub+0x5b6>
 8003344:	e673      	b.n	800302e <__aeabi_dsub+0x29e>
 8003346:	464b      	mov	r3, r9
 8003348:	1b5f      	subs	r7, r3, r5
 800334a:	003b      	movs	r3, r7
 800334c:	2d00      	cmp	r5, #0
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x5c2>
 8003350:	e742      	b.n	80031d8 <__aeabi_dsub+0x448>
 8003352:	2f38      	cmp	r7, #56	@ 0x38
 8003354:	dd00      	ble.n	8003358 <__aeabi_dsub+0x5c8>
 8003356:	e0ec      	b.n	8003532 <__aeabi_dsub+0x7a2>
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	000e      	movs	r6, r1
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431c      	orrs	r4, r3
 8003360:	2f1f      	cmp	r7, #31
 8003362:	dc25      	bgt.n	80033b0 <__aeabi_dsub+0x620>
 8003364:	2520      	movs	r5, #32
 8003366:	0023      	movs	r3, r4
 8003368:	1bed      	subs	r5, r5, r7
 800336a:	0001      	movs	r1, r0
 800336c:	40a8      	lsls	r0, r5
 800336e:	40ab      	lsls	r3, r5
 8003370:	40f9      	lsrs	r1, r7
 8003372:	1e45      	subs	r5, r0, #1
 8003374:	41a8      	sbcs	r0, r5
 8003376:	430b      	orrs	r3, r1
 8003378:	40fc      	lsrs	r4, r7
 800337a:	4318      	orrs	r0, r3
 800337c:	465b      	mov	r3, fp
 800337e:	1b1b      	subs	r3, r3, r4
 8003380:	469b      	mov	fp, r3
 8003382:	e739      	b.n	80031f8 <__aeabi_dsub+0x468>
 8003384:	4666      	mov	r6, ip
 8003386:	2501      	movs	r5, #1
 8003388:	e562      	b.n	8002e50 <__aeabi_dsub+0xc0>
 800338a:	001f      	movs	r7, r3
 800338c:	4659      	mov	r1, fp
 800338e:	3f20      	subs	r7, #32
 8003390:	40f9      	lsrs	r1, r7
 8003392:	468c      	mov	ip, r1
 8003394:	2b20      	cmp	r3, #32
 8003396:	d005      	beq.n	80033a4 <__aeabi_dsub+0x614>
 8003398:	2740      	movs	r7, #64	@ 0x40
 800339a:	4659      	mov	r1, fp
 800339c:	1afb      	subs	r3, r7, r3
 800339e:	4099      	lsls	r1, r3
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4692      	mov	sl, r2
 80033a4:	4657      	mov	r7, sl
 80033a6:	1e7b      	subs	r3, r7, #1
 80033a8:	419f      	sbcs	r7, r3
 80033aa:	4663      	mov	r3, ip
 80033ac:	431f      	orrs	r7, r3
 80033ae:	e5c1      	b.n	8002f34 <__aeabi_dsub+0x1a4>
 80033b0:	003b      	movs	r3, r7
 80033b2:	0025      	movs	r5, r4
 80033b4:	3b20      	subs	r3, #32
 80033b6:	40dd      	lsrs	r5, r3
 80033b8:	2f20      	cmp	r7, #32
 80033ba:	d004      	beq.n	80033c6 <__aeabi_dsub+0x636>
 80033bc:	2340      	movs	r3, #64	@ 0x40
 80033be:	1bdb      	subs	r3, r3, r7
 80033c0:	409c      	lsls	r4, r3
 80033c2:	4320      	orrs	r0, r4
 80033c4:	4680      	mov	r8, r0
 80033c6:	4640      	mov	r0, r8
 80033c8:	1e43      	subs	r3, r0, #1
 80033ca:	4198      	sbcs	r0, r3
 80033cc:	4328      	orrs	r0, r5
 80033ce:	e713      	b.n	80031f8 <__aeabi_dsub+0x468>
 80033d0:	2900      	cmp	r1, #0
 80033d2:	d09d      	beq.n	8003310 <__aeabi_dsub+0x580>
 80033d4:	2601      	movs	r6, #1
 80033d6:	4663      	mov	r3, ip
 80033d8:	465c      	mov	r4, fp
 80033da:	4690      	mov	r8, r2
 80033dc:	401e      	ands	r6, r3
 80033de:	e6db      	b.n	8003198 <__aeabi_dsub+0x408>
 80033e0:	1a17      	subs	r7, r2, r0
 80033e2:	465b      	mov	r3, fp
 80033e4:	42ba      	cmp	r2, r7
 80033e6:	4192      	sbcs	r2, r2
 80033e8:	1b1c      	subs	r4, r3, r4
 80033ea:	4252      	negs	r2, r2
 80033ec:	1aa4      	subs	r4, r4, r2
 80033ee:	0223      	lsls	r3, r4, #8
 80033f0:	d4c8      	bmi.n	8003384 <__aeabi_dsub+0x5f4>
 80033f2:	0763      	lsls	r3, r4, #29
 80033f4:	08ff      	lsrs	r7, r7, #3
 80033f6:	431f      	orrs	r7, r3
 80033f8:	4666      	mov	r6, ip
 80033fa:	2301      	movs	r3, #1
 80033fc:	08e5      	lsrs	r5, r4, #3
 80033fe:	e71f      	b.n	8003240 <__aeabi_dsub+0x4b0>
 8003400:	001d      	movs	r5, r3
 8003402:	2400      	movs	r4, #0
 8003404:	2700      	movs	r7, #0
 8003406:	e657      	b.n	80030b8 <__aeabi_dsub+0x328>
 8003408:	465c      	mov	r4, fp
 800340a:	08d0      	lsrs	r0, r2, #3
 800340c:	e66a      	b.n	80030e4 <__aeabi_dsub+0x354>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d100      	bne.n	8003414 <__aeabi_dsub+0x684>
 8003412:	e737      	b.n	8003284 <__aeabi_dsub+0x4f4>
 8003414:	4653      	mov	r3, sl
 8003416:	08c0      	lsrs	r0, r0, #3
 8003418:	0767      	lsls	r7, r4, #29
 800341a:	4307      	orrs	r7, r0
 800341c:	08e5      	lsrs	r5, r4, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d100      	bne.n	8003424 <__aeabi_dsub+0x694>
 8003422:	e5b1      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	031b      	lsls	r3, r3, #12
 8003428:	421d      	tst	r5, r3
 800342a:	d008      	beq.n	800343e <__aeabi_dsub+0x6ae>
 800342c:	4659      	mov	r1, fp
 800342e:	08c8      	lsrs	r0, r1, #3
 8003430:	4218      	tst	r0, r3
 8003432:	d104      	bne.n	800343e <__aeabi_dsub+0x6ae>
 8003434:	08d2      	lsrs	r2, r2, #3
 8003436:	0749      	lsls	r1, r1, #29
 8003438:	430a      	orrs	r2, r1
 800343a:	0017      	movs	r7, r2
 800343c:	0005      	movs	r5, r0
 800343e:	0f7b      	lsrs	r3, r7, #29
 8003440:	00ff      	lsls	r7, r7, #3
 8003442:	08ff      	lsrs	r7, r7, #3
 8003444:	075b      	lsls	r3, r3, #29
 8003446:	431f      	orrs	r7, r3
 8003448:	e59e      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 800344a:	08c0      	lsrs	r0, r0, #3
 800344c:	0763      	lsls	r3, r4, #29
 800344e:	4318      	orrs	r0, r3
 8003450:	08e5      	lsrs	r5, r4, #3
 8003452:	2900      	cmp	r1, #0
 8003454:	d053      	beq.n	80034fe <__aeabi_dsub+0x76e>
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	031b      	lsls	r3, r3, #12
 800345a:	421d      	tst	r5, r3
 800345c:	d00a      	beq.n	8003474 <__aeabi_dsub+0x6e4>
 800345e:	4659      	mov	r1, fp
 8003460:	08cc      	lsrs	r4, r1, #3
 8003462:	421c      	tst	r4, r3
 8003464:	d106      	bne.n	8003474 <__aeabi_dsub+0x6e4>
 8003466:	2601      	movs	r6, #1
 8003468:	4663      	mov	r3, ip
 800346a:	0025      	movs	r5, r4
 800346c:	08d0      	lsrs	r0, r2, #3
 800346e:	0749      	lsls	r1, r1, #29
 8003470:	4308      	orrs	r0, r1
 8003472:	401e      	ands	r6, r3
 8003474:	0f47      	lsrs	r7, r0, #29
 8003476:	00c0      	lsls	r0, r0, #3
 8003478:	08c0      	lsrs	r0, r0, #3
 800347a:	077f      	lsls	r7, r7, #29
 800347c:	4307      	orrs	r7, r0
 800347e:	e583      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003480:	1883      	adds	r3, r0, r2
 8003482:	4293      	cmp	r3, r2
 8003484:	4192      	sbcs	r2, r2
 8003486:	445c      	add	r4, fp
 8003488:	4252      	negs	r2, r2
 800348a:	18a5      	adds	r5, r4, r2
 800348c:	022a      	lsls	r2, r5, #8
 800348e:	d500      	bpl.n	8003492 <__aeabi_dsub+0x702>
 8003490:	e724      	b.n	80032dc <__aeabi_dsub+0x54c>
 8003492:	076f      	lsls	r7, r5, #29
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	431f      	orrs	r7, r3
 8003498:	08ed      	lsrs	r5, r5, #3
 800349a:	2301      	movs	r3, #1
 800349c:	e6d0      	b.n	8003240 <__aeabi_dsub+0x4b0>
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	000007ff 	.word	0x000007ff
 80034a4:	000007fe 	.word	0x000007fe
 80034a8:	ff7fffff 	.word	0xff7fffff
 80034ac:	465b      	mov	r3, fp
 80034ae:	08d2      	lsrs	r2, r2, #3
 80034b0:	075f      	lsls	r7, r3, #29
 80034b2:	4666      	mov	r6, ip
 80034b4:	4317      	orrs	r7, r2
 80034b6:	08dd      	lsrs	r5, r3, #3
 80034b8:	e566      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 80034ba:	0025      	movs	r5, r4
 80034bc:	3b20      	subs	r3, #32
 80034be:	40dd      	lsrs	r5, r3
 80034c0:	4663      	mov	r3, ip
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d005      	beq.n	80034d2 <__aeabi_dsub+0x742>
 80034c6:	2340      	movs	r3, #64	@ 0x40
 80034c8:	4661      	mov	r1, ip
 80034ca:	1a5b      	subs	r3, r3, r1
 80034cc:	409c      	lsls	r4, r3
 80034ce:	4320      	orrs	r0, r4
 80034d0:	4680      	mov	r8, r0
 80034d2:	4647      	mov	r7, r8
 80034d4:	1e7b      	subs	r3, r7, #1
 80034d6:	419f      	sbcs	r7, r3
 80034d8:	432f      	orrs	r7, r5
 80034da:	e5a0      	b.n	800301e <__aeabi_dsub+0x28e>
 80034dc:	2120      	movs	r1, #32
 80034de:	2700      	movs	r7, #0
 80034e0:	1a09      	subs	r1, r1, r0
 80034e2:	e4d2      	b.n	8002e8a <__aeabi_dsub+0xfa>
 80034e4:	2f00      	cmp	r7, #0
 80034e6:	d100      	bne.n	80034ea <__aeabi_dsub+0x75a>
 80034e8:	e713      	b.n	8003312 <__aeabi_dsub+0x582>
 80034ea:	465c      	mov	r4, fp
 80034ec:	0017      	movs	r7, r2
 80034ee:	2500      	movs	r5, #0
 80034f0:	e5f6      	b.n	80030e0 <__aeabi_dsub+0x350>
 80034f2:	08d7      	lsrs	r7, r2, #3
 80034f4:	0749      	lsls	r1, r1, #29
 80034f6:	2302      	movs	r3, #2
 80034f8:	430f      	orrs	r7, r1
 80034fa:	092d      	lsrs	r5, r5, #4
 80034fc:	e6a0      	b.n	8003240 <__aeabi_dsub+0x4b0>
 80034fe:	0007      	movs	r7, r0
 8003500:	e542      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003502:	465b      	mov	r3, fp
 8003504:	2601      	movs	r6, #1
 8003506:	075f      	lsls	r7, r3, #29
 8003508:	08dd      	lsrs	r5, r3, #3
 800350a:	4663      	mov	r3, ip
 800350c:	08d2      	lsrs	r2, r2, #3
 800350e:	4317      	orrs	r7, r2
 8003510:	401e      	ands	r6, r3
 8003512:	e539      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003514:	465b      	mov	r3, fp
 8003516:	08d2      	lsrs	r2, r2, #3
 8003518:	075f      	lsls	r7, r3, #29
 800351a:	4317      	orrs	r7, r2
 800351c:	08dd      	lsrs	r5, r3, #3
 800351e:	e533      	b.n	8002f88 <__aeabi_dsub+0x1f8>
 8003520:	4a1e      	ldr	r2, [pc, #120]	@ (800359c <__aeabi_dsub+0x80c>)
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	4022      	ands	r2, r4
 8003526:	0757      	lsls	r7, r2, #29
 8003528:	0252      	lsls	r2, r2, #9
 800352a:	2501      	movs	r5, #1
 800352c:	431f      	orrs	r7, r3
 800352e:	0b14      	lsrs	r4, r2, #12
 8003530:	e5c2      	b.n	80030b8 <__aeabi_dsub+0x328>
 8003532:	000e      	movs	r6, r1
 8003534:	2001      	movs	r0, #1
 8003536:	e65f      	b.n	80031f8 <__aeabi_dsub+0x468>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <__aeabi_dsub+0x7c8>
 800353c:	464b      	mov	r3, r9
 800353e:	1b5b      	subs	r3, r3, r5
 8003540:	469c      	mov	ip, r3
 8003542:	2d00      	cmp	r5, #0
 8003544:	d100      	bne.n	8003548 <__aeabi_dsub+0x7b8>
 8003546:	e548      	b.n	8002fda <__aeabi_dsub+0x24a>
 8003548:	2701      	movs	r7, #1
 800354a:	2b38      	cmp	r3, #56	@ 0x38
 800354c:	dd00      	ble.n	8003550 <__aeabi_dsub+0x7c0>
 800354e:	e566      	b.n	800301e <__aeabi_dsub+0x28e>
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	431c      	orrs	r4, r3
 8003556:	e550      	b.n	8002ffa <__aeabi_dsub+0x26a>
 8003558:	1c6b      	adds	r3, r5, #1
 800355a:	4d11      	ldr	r5, [pc, #68]	@ (80035a0 <__aeabi_dsub+0x810>)
 800355c:	422b      	tst	r3, r5
 800355e:	d000      	beq.n	8003562 <__aeabi_dsub+0x7d2>
 8003560:	e673      	b.n	800324a <__aeabi_dsub+0x4ba>
 8003562:	4659      	mov	r1, fp
 8003564:	0023      	movs	r3, r4
 8003566:	4311      	orrs	r1, r2
 8003568:	468a      	mov	sl, r1
 800356a:	4303      	orrs	r3, r0
 800356c:	e600      	b.n	8003170 <__aeabi_dsub+0x3e0>
 800356e:	0767      	lsls	r7, r4, #29
 8003570:	08c0      	lsrs	r0, r0, #3
 8003572:	2300      	movs	r3, #0
 8003574:	4307      	orrs	r7, r0
 8003576:	08e5      	lsrs	r5, r4, #3
 8003578:	e662      	b.n	8003240 <__aeabi_dsub+0x4b0>
 800357a:	0764      	lsls	r4, r4, #29
 800357c:	08ff      	lsrs	r7, r7, #3
 800357e:	4327      	orrs	r7, r4
 8003580:	0905      	lsrs	r5, r0, #4
 8003582:	e65d      	b.n	8003240 <__aeabi_dsub+0x4b0>
 8003584:	08d2      	lsrs	r2, r2, #3
 8003586:	0749      	lsls	r1, r1, #29
 8003588:	4311      	orrs	r1, r2
 800358a:	000f      	movs	r7, r1
 800358c:	2302      	movs	r3, #2
 800358e:	092d      	lsrs	r5, r5, #4
 8003590:	e656      	b.n	8003240 <__aeabi_dsub+0x4b0>
 8003592:	0007      	movs	r7, r0
 8003594:	e5a4      	b.n	80030e0 <__aeabi_dsub+0x350>
 8003596:	0038      	movs	r0, r7
 8003598:	e48f      	b.n	8002eba <__aeabi_dsub+0x12a>
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	ff7fffff 	.word	0xff7fffff
 80035a0:	000007fe 	.word	0x000007fe

080035a4 <__aeabi_dcmpun>:
 80035a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a6:	46c6      	mov	lr, r8
 80035a8:	031e      	lsls	r6, r3, #12
 80035aa:	0b36      	lsrs	r6, r6, #12
 80035ac:	46b0      	mov	r8, r6
 80035ae:	4e0d      	ldr	r6, [pc, #52]	@ (80035e4 <__aeabi_dcmpun+0x40>)
 80035b0:	030c      	lsls	r4, r1, #12
 80035b2:	004d      	lsls	r5, r1, #1
 80035b4:	005f      	lsls	r7, r3, #1
 80035b6:	b500      	push	{lr}
 80035b8:	0b24      	lsrs	r4, r4, #12
 80035ba:	0d6d      	lsrs	r5, r5, #21
 80035bc:	0d7f      	lsrs	r7, r7, #21
 80035be:	42b5      	cmp	r5, r6
 80035c0:	d00b      	beq.n	80035da <__aeabi_dcmpun+0x36>
 80035c2:	4908      	ldr	r1, [pc, #32]	@ (80035e4 <__aeabi_dcmpun+0x40>)
 80035c4:	2000      	movs	r0, #0
 80035c6:	428f      	cmp	r7, r1
 80035c8:	d104      	bne.n	80035d4 <__aeabi_dcmpun+0x30>
 80035ca:	4646      	mov	r6, r8
 80035cc:	4316      	orrs	r6, r2
 80035ce:	0030      	movs	r0, r6
 80035d0:	1e43      	subs	r3, r0, #1
 80035d2:	4198      	sbcs	r0, r3
 80035d4:	bc80      	pop	{r7}
 80035d6:	46b8      	mov	r8, r7
 80035d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035da:	4304      	orrs	r4, r0
 80035dc:	2001      	movs	r0, #1
 80035de:	2c00      	cmp	r4, #0
 80035e0:	d1f8      	bne.n	80035d4 <__aeabi_dcmpun+0x30>
 80035e2:	e7ee      	b.n	80035c2 <__aeabi_dcmpun+0x1e>
 80035e4:	000007ff 	.word	0x000007ff

080035e8 <__aeabi_d2iz>:
 80035e8:	000b      	movs	r3, r1
 80035ea:	0002      	movs	r2, r0
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4d16      	ldr	r5, [pc, #88]	@ (8003648 <__aeabi_d2iz+0x60>)
 80035f0:	030c      	lsls	r4, r1, #12
 80035f2:	b082      	sub	sp, #8
 80035f4:	0049      	lsls	r1, r1, #1
 80035f6:	2000      	movs	r0, #0
 80035f8:	9200      	str	r2, [sp, #0]
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	0b24      	lsrs	r4, r4, #12
 80035fe:	0d49      	lsrs	r1, r1, #21
 8003600:	0fde      	lsrs	r6, r3, #31
 8003602:	42a9      	cmp	r1, r5
 8003604:	dd04      	ble.n	8003610 <__aeabi_d2iz+0x28>
 8003606:	4811      	ldr	r0, [pc, #68]	@ (800364c <__aeabi_d2iz+0x64>)
 8003608:	4281      	cmp	r1, r0
 800360a:	dd03      	ble.n	8003614 <__aeabi_d2iz+0x2c>
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <__aeabi_d2iz+0x68>)
 800360e:	18f0      	adds	r0, r6, r3
 8003610:	b002      	add	sp, #8
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	2080      	movs	r0, #128	@ 0x80
 8003616:	0340      	lsls	r0, r0, #13
 8003618:	4320      	orrs	r0, r4
 800361a:	4c0e      	ldr	r4, [pc, #56]	@ (8003654 <__aeabi_d2iz+0x6c>)
 800361c:	1a64      	subs	r4, r4, r1
 800361e:	2c1f      	cmp	r4, #31
 8003620:	dd08      	ble.n	8003634 <__aeabi_d2iz+0x4c>
 8003622:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <__aeabi_d2iz+0x70>)
 8003624:	1a5b      	subs	r3, r3, r1
 8003626:	40d8      	lsrs	r0, r3
 8003628:	0003      	movs	r3, r0
 800362a:	4258      	negs	r0, r3
 800362c:	2e00      	cmp	r6, #0
 800362e:	d1ef      	bne.n	8003610 <__aeabi_d2iz+0x28>
 8003630:	0018      	movs	r0, r3
 8003632:	e7ed      	b.n	8003610 <__aeabi_d2iz+0x28>
 8003634:	4b09      	ldr	r3, [pc, #36]	@ (800365c <__aeabi_d2iz+0x74>)
 8003636:	9a00      	ldr	r2, [sp, #0]
 8003638:	469c      	mov	ip, r3
 800363a:	0003      	movs	r3, r0
 800363c:	4461      	add	r1, ip
 800363e:	408b      	lsls	r3, r1
 8003640:	40e2      	lsrs	r2, r4
 8003642:	4313      	orrs	r3, r2
 8003644:	e7f1      	b.n	800362a <__aeabi_d2iz+0x42>
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	000003fe 	.word	0x000003fe
 800364c:	0000041d 	.word	0x0000041d
 8003650:	7fffffff 	.word	0x7fffffff
 8003654:	00000433 	.word	0x00000433
 8003658:	00000413 	.word	0x00000413
 800365c:	fffffbed 	.word	0xfffffbed

08003660 <__aeabi_i2d>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	2800      	cmp	r0, #0
 8003664:	d016      	beq.n	8003694 <__aeabi_i2d+0x34>
 8003666:	17c3      	asrs	r3, r0, #31
 8003668:	18c5      	adds	r5, r0, r3
 800366a:	405d      	eors	r5, r3
 800366c:	0fc4      	lsrs	r4, r0, #31
 800366e:	0028      	movs	r0, r5
 8003670:	f7fc ff54 	bl	800051c <__clzsi2>
 8003674:	4b10      	ldr	r3, [pc, #64]	@ (80036b8 <__aeabi_i2d+0x58>)
 8003676:	1a1b      	subs	r3, r3, r0
 8003678:	055b      	lsls	r3, r3, #21
 800367a:	0d5b      	lsrs	r3, r3, #21
 800367c:	280a      	cmp	r0, #10
 800367e:	dc14      	bgt.n	80036aa <__aeabi_i2d+0x4a>
 8003680:	0002      	movs	r2, r0
 8003682:	002e      	movs	r6, r5
 8003684:	3215      	adds	r2, #21
 8003686:	4096      	lsls	r6, r2
 8003688:	220b      	movs	r2, #11
 800368a:	1a12      	subs	r2, r2, r0
 800368c:	40d5      	lsrs	r5, r2
 800368e:	032d      	lsls	r5, r5, #12
 8003690:	0b2d      	lsrs	r5, r5, #12
 8003692:	e003      	b.n	800369c <__aeabi_i2d+0x3c>
 8003694:	2400      	movs	r4, #0
 8003696:	2300      	movs	r3, #0
 8003698:	2500      	movs	r5, #0
 800369a:	2600      	movs	r6, #0
 800369c:	051b      	lsls	r3, r3, #20
 800369e:	432b      	orrs	r3, r5
 80036a0:	07e4      	lsls	r4, r4, #31
 80036a2:	4323      	orrs	r3, r4
 80036a4:	0030      	movs	r0, r6
 80036a6:	0019      	movs	r1, r3
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	380b      	subs	r0, #11
 80036ac:	4085      	lsls	r5, r0
 80036ae:	032d      	lsls	r5, r5, #12
 80036b0:	2600      	movs	r6, #0
 80036b2:	0b2d      	lsrs	r5, r5, #12
 80036b4:	e7f2      	b.n	800369c <__aeabi_i2d+0x3c>
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	0000041e 	.word	0x0000041e

080036bc <__aeabi_ui2d>:
 80036bc:	b510      	push	{r4, lr}
 80036be:	1e04      	subs	r4, r0, #0
 80036c0:	d010      	beq.n	80036e4 <__aeabi_ui2d+0x28>
 80036c2:	f7fc ff2b 	bl	800051c <__clzsi2>
 80036c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <__aeabi_ui2d+0x44>)
 80036c8:	1a1b      	subs	r3, r3, r0
 80036ca:	055b      	lsls	r3, r3, #21
 80036cc:	0d5b      	lsrs	r3, r3, #21
 80036ce:	280a      	cmp	r0, #10
 80036d0:	dc0f      	bgt.n	80036f2 <__aeabi_ui2d+0x36>
 80036d2:	220b      	movs	r2, #11
 80036d4:	0021      	movs	r1, r4
 80036d6:	1a12      	subs	r2, r2, r0
 80036d8:	40d1      	lsrs	r1, r2
 80036da:	3015      	adds	r0, #21
 80036dc:	030a      	lsls	r2, r1, #12
 80036de:	4084      	lsls	r4, r0
 80036e0:	0b12      	lsrs	r2, r2, #12
 80036e2:	e001      	b.n	80036e8 <__aeabi_ui2d+0x2c>
 80036e4:	2300      	movs	r3, #0
 80036e6:	2200      	movs	r2, #0
 80036e8:	051b      	lsls	r3, r3, #20
 80036ea:	4313      	orrs	r3, r2
 80036ec:	0020      	movs	r0, r4
 80036ee:	0019      	movs	r1, r3
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	0022      	movs	r2, r4
 80036f4:	380b      	subs	r0, #11
 80036f6:	4082      	lsls	r2, r0
 80036f8:	0312      	lsls	r2, r2, #12
 80036fa:	2400      	movs	r4, #0
 80036fc:	0b12      	lsrs	r2, r2, #12
 80036fe:	e7f3      	b.n	80036e8 <__aeabi_ui2d+0x2c>
 8003700:	0000041e 	.word	0x0000041e

08003704 <__aeabi_f2d>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	0242      	lsls	r2, r0, #9
 8003708:	0043      	lsls	r3, r0, #1
 800370a:	0fc4      	lsrs	r4, r0, #31
 800370c:	20fe      	movs	r0, #254	@ 0xfe
 800370e:	0e1b      	lsrs	r3, r3, #24
 8003710:	1c59      	adds	r1, r3, #1
 8003712:	0a55      	lsrs	r5, r2, #9
 8003714:	4208      	tst	r0, r1
 8003716:	d00c      	beq.n	8003732 <__aeabi_f2d+0x2e>
 8003718:	21e0      	movs	r1, #224	@ 0xe0
 800371a:	0089      	lsls	r1, r1, #2
 800371c:	468c      	mov	ip, r1
 800371e:	076d      	lsls	r5, r5, #29
 8003720:	0b12      	lsrs	r2, r2, #12
 8003722:	4463      	add	r3, ip
 8003724:	051b      	lsls	r3, r3, #20
 8003726:	4313      	orrs	r3, r2
 8003728:	07e4      	lsls	r4, r4, #31
 800372a:	4323      	orrs	r3, r4
 800372c:	0028      	movs	r0, r5
 800372e:	0019      	movs	r1, r3
 8003730:	bd70      	pop	{r4, r5, r6, pc}
 8003732:	2b00      	cmp	r3, #0
 8003734:	d114      	bne.n	8003760 <__aeabi_f2d+0x5c>
 8003736:	2d00      	cmp	r5, #0
 8003738:	d01b      	beq.n	8003772 <__aeabi_f2d+0x6e>
 800373a:	0028      	movs	r0, r5
 800373c:	f7fc feee 	bl	800051c <__clzsi2>
 8003740:	280a      	cmp	r0, #10
 8003742:	dc1c      	bgt.n	800377e <__aeabi_f2d+0x7a>
 8003744:	230b      	movs	r3, #11
 8003746:	002a      	movs	r2, r5
 8003748:	1a1b      	subs	r3, r3, r0
 800374a:	40da      	lsrs	r2, r3
 800374c:	0003      	movs	r3, r0
 800374e:	3315      	adds	r3, #21
 8003750:	409d      	lsls	r5, r3
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <__aeabi_f2d+0x88>)
 8003754:	0312      	lsls	r2, r2, #12
 8003756:	1a1b      	subs	r3, r3, r0
 8003758:	055b      	lsls	r3, r3, #21
 800375a:	0b12      	lsrs	r2, r2, #12
 800375c:	0d5b      	lsrs	r3, r3, #21
 800375e:	e7e1      	b.n	8003724 <__aeabi_f2d+0x20>
 8003760:	2d00      	cmp	r5, #0
 8003762:	d009      	beq.n	8003778 <__aeabi_f2d+0x74>
 8003764:	0b13      	lsrs	r3, r2, #12
 8003766:	2280      	movs	r2, #128	@ 0x80
 8003768:	0312      	lsls	r2, r2, #12
 800376a:	431a      	orrs	r2, r3
 800376c:	076d      	lsls	r5, r5, #29
 800376e:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <__aeabi_f2d+0x8c>)
 8003770:	e7d8      	b.n	8003724 <__aeabi_f2d+0x20>
 8003772:	2300      	movs	r3, #0
 8003774:	2200      	movs	r2, #0
 8003776:	e7d5      	b.n	8003724 <__aeabi_f2d+0x20>
 8003778:	2200      	movs	r2, #0
 800377a:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <__aeabi_f2d+0x8c>)
 800377c:	e7d2      	b.n	8003724 <__aeabi_f2d+0x20>
 800377e:	0003      	movs	r3, r0
 8003780:	002a      	movs	r2, r5
 8003782:	3b0b      	subs	r3, #11
 8003784:	409a      	lsls	r2, r3
 8003786:	2500      	movs	r5, #0
 8003788:	e7e3      	b.n	8003752 <__aeabi_f2d+0x4e>
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	00000389 	.word	0x00000389
 8003790:	000007ff 	.word	0x000007ff

08003794 <__clzdi2>:
 8003794:	b510      	push	{r4, lr}
 8003796:	2900      	cmp	r1, #0
 8003798:	d103      	bne.n	80037a2 <__clzdi2+0xe>
 800379a:	f7fc febf 	bl	800051c <__clzsi2>
 800379e:	3020      	adds	r0, #32
 80037a0:	e002      	b.n	80037a8 <__clzdi2+0x14>
 80037a2:	0008      	movs	r0, r1
 80037a4:	f7fc feba 	bl	800051c <__clzsi2>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	46c0      	nop			@ (mov r8, r8)

080037ac <read_temperature_steinhart>:
void SPI_FLASH_Init(void);
void ShortPress_Action(void);
void LongPress_Action(void);

float read_temperature_steinhart(uint32_t adc_value)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b08d      	sub	sp, #52	@ 0x34
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    float v_ntc, r_ntc, ln_r, inv_T, T_K, T_C;
    float A,B,C; //0,25,50도 지점
    A = 1.127354682e-3;
 80037b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003870 <read_temperature_steinhart+0xc4>)
 80037b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    B = 2.343978227e-4;
 80037b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003874 <read_temperature_steinhart+0xc8>)
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    C = 0.8674847738e-7;
 80037bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003878 <read_temperature_steinhart+0xcc>)
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
//    	C = 0.9030663086e-7;
//    }



    v_ntc = ((float)adc_value / ADC_MAX) * VREF;
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd ffb9 	bl	8001738 <__aeabi_ui2f>
 80037c6:	1c03      	adds	r3, r0, #0
 80037c8:	492c      	ldr	r1, [pc, #176]	@ (800387c <read_temperature_steinhart+0xd0>)
 80037ca:	1c18      	adds	r0, r3, #0
 80037cc:	f7fd f9a2 	bl	8000b14 <__aeabi_fdiv>
 80037d0:	1c03      	adds	r3, r0, #0
 80037d2:	492b      	ldr	r1, [pc, #172]	@ (8003880 <read_temperature_steinhart+0xd4>)
 80037d4:	1c18      	adds	r0, r3, #0
 80037d6:	f7fd fb6b 	bl	8000eb0 <__aeabi_fmul>
 80037da:	1c03      	adds	r3, r0, #0
 80037dc:	623b      	str	r3, [r7, #32]
    r_ntc = RPULLUP * v_ntc / (VREF - v_ntc);
 80037de:	4929      	ldr	r1, [pc, #164]	@ (8003884 <read_temperature_steinhart+0xd8>)
 80037e0:	6a38      	ldr	r0, [r7, #32]
 80037e2:	f7fd fb65 	bl	8000eb0 <__aeabi_fmul>
 80037e6:	1c03      	adds	r3, r0, #0
 80037e8:	1c1c      	adds	r4, r3, #0
 80037ea:	6a39      	ldr	r1, [r7, #32]
 80037ec:	4824      	ldr	r0, [pc, #144]	@ (8003880 <read_temperature_steinhart+0xd4>)
 80037ee:	f7fd fcb9 	bl	8001164 <__aeabi_fsub>
 80037f2:	1c03      	adds	r3, r0, #0
 80037f4:	1c19      	adds	r1, r3, #0
 80037f6:	1c20      	adds	r0, r4, #0
 80037f8:	f7fd f98c 	bl	8000b14 <__aeabi_fdiv>
 80037fc:	1c03      	adds	r3, r0, #0
 80037fe:	61fb      	str	r3, [r7, #28]
    ln_r = logf(r_ntc);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	1c18      	adds	r0, r3, #0
 8003804:	f00e f9b2 	bl	8011b6c <logf>
 8003808:	1c03      	adds	r3, r0, #0
 800380a:	61bb      	str	r3, [r7, #24]
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 800380c:	69b9      	ldr	r1, [r7, #24]
 800380e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003810:	f7fd fb4e 	bl	8000eb0 <__aeabi_fmul>
 8003814:	1c03      	adds	r3, r0, #0
 8003816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003818:	1c18      	adds	r0, r3, #0
 800381a:	f7fc ff89 	bl	8000730 <__aeabi_fadd>
 800381e:	1c03      	adds	r3, r0, #0
 8003820:	1c1c      	adds	r4, r3, #0
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003826:	f7fd fb43 	bl	8000eb0 <__aeabi_fmul>
 800382a:	1c03      	adds	r3, r0, #0
 800382c:	69b9      	ldr	r1, [r7, #24]
 800382e:	1c18      	adds	r0, r3, #0
 8003830:	f7fd fb3e 	bl	8000eb0 <__aeabi_fmul>
 8003834:	1c03      	adds	r3, r0, #0
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	1c18      	adds	r0, r3, #0
 800383a:	f7fd fb39 	bl	8000eb0 <__aeabi_fmul>
 800383e:	1c03      	adds	r3, r0, #0
 8003840:	1c19      	adds	r1, r3, #0
 8003842:	1c20      	adds	r0, r4, #0
 8003844:	f7fc ff74 	bl	8000730 <__aeabi_fadd>
 8003848:	1c03      	adds	r3, r0, #0
 800384a:	617b      	str	r3, [r7, #20]
    T_K = 1.0f / inv_T;
 800384c:	6979      	ldr	r1, [r7, #20]
 800384e:	20fe      	movs	r0, #254	@ 0xfe
 8003850:	0580      	lsls	r0, r0, #22
 8003852:	f7fd f95f 	bl	8000b14 <__aeabi_fdiv>
 8003856:	1c03      	adds	r3, r0, #0
 8003858:	613b      	str	r3, [r7, #16]
    T_C = T_K - 273.15f;
 800385a:	490b      	ldr	r1, [pc, #44]	@ (8003888 <read_temperature_steinhart+0xdc>)
 800385c:	6938      	ldr	r0, [r7, #16]
 800385e:	f7fd fc81 	bl	8001164 <__aeabi_fsub>
 8003862:	1c03      	adds	r3, r0, #0
 8003864:	60fb      	str	r3, [r7, #12]

    return T_C;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	1c18      	adds	r0, r3, #0
 800386a:	46bd      	mov	sp, r7
 800386c:	b00d      	add	sp, #52	@ 0x34
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	3a93c3bf 	.word	0x3a93c3bf
 8003874:	3975c8b0 	.word	0x3975c8b0
 8003878:	33ba4a7b 	.word	0x33ba4a7b
 800387c:	457ff000 	.word	0x457ff000
 8003880:	40533333 	.word	0x40533333
 8003884:	461c4000 	.word	0x461c4000
 8003888:	43889333 	.word	0x43889333

0800388c <Read_Temp>:
	Log_Write(&log);

	Log_ReadAll(PrintLogCSV_UART3);
}
////////////////////////////////////Read Temp Function/////////////////////////////////////////////
void Read_Temp(){
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003892:	003b      	movs	r3, r7
 8003894:	0018      	movs	r0, r3
 8003896:	230c      	movs	r3, #12
 8003898:	001a      	movs	r2, r3
 800389a:	2100      	movs	r1, #0
 800389c:	f00c f80a 	bl	800f8b4 <memset>
	temperature1_avg = 0;
 80038a0:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <Read_Temp+0x170>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
	temperature2_avg = 0;
 80038a6:	4b56      	ldr	r3, [pc, #344]	@ (8003a00 <Read_Temp+0x174>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
	 for(int i=0; i < 10; i++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e088      	b.n	80039c4 <Read_Temp+0x138>
		  	 		    {
		  	 		    sConfig.Channel = ADC_CHANNEL_0;
 80038b2:	003b      	movs	r3, r7
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
		  	 		    sConfig.Rank = ADC_REGULAR_RANK_1;
 80038b8:	003b      	movs	r3, r7
 80038ba:	2200      	movs	r2, #0
 80038bc:	605a      	str	r2, [r3, #4]
		  	 		    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80038be:	003b      	movs	r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]

		  	 		    // thermisor1 temp 측정
		  	 		    HAL_GPIO_WritePin (Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, RESET);
 80038c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <Read_Temp+0x178>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	2104      	movs	r1, #4
 80038ca:	0018      	movs	r0, r3
 80038cc:	f004 f817 	bl	80078fe <HAL_GPIO_WritePin>
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80038d0:	003a      	movs	r2, r7
 80038d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003a08 <Read_Temp+0x17c>)
 80038d4:	0011      	movs	r1, r2
 80038d6:	0018      	movs	r0, r3
 80038d8:	f002 ff4a 	bl	8006770 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 80038dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <Read_Temp+0x17c>)
 80038de:	0018      	movs	r0, r3
 80038e0:	f002 fcaa 	bl	8006238 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80038e4:	2301      	movs	r3, #1
 80038e6:	425a      	negs	r2, r3
 80038e8:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <Read_Temp+0x17c>)
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f002 fd2d 	bl	800634c <HAL_ADC_PollForConversion>
		  	 		    adc_value1 = HAL_ADC_GetValue(&hadc1);
 80038f2:	4b45      	ldr	r3, [pc, #276]	@ (8003a08 <Read_Temp+0x17c>)
 80038f4:	0018      	movs	r0, r3
 80038f6:	f002 fdbd 	bl	8006474 <HAL_ADC_GetValue>
 80038fa:	0003      	movs	r3, r0
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	4b43      	ldr	r3, [pc, #268]	@ (8003a0c <Read_Temp+0x180>)
 8003900:	801a      	strh	r2, [r3, #0]
		  	 		    temperature1 = read_temperature_steinhart(adc_value1);
 8003902:	4b42      	ldr	r3, [pc, #264]	@ (8003a0c <Read_Temp+0x180>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	0018      	movs	r0, r3
 8003908:	f7ff ff50 	bl	80037ac <read_temperature_steinhart>
 800390c:	1c02      	adds	r2, r0, #0
 800390e:	4b40      	ldr	r3, [pc, #256]	@ (8003a10 <Read_Temp+0x184>)
 8003910:	601a      	str	r2, [r3, #0]
		  	 		    temperature1_avg = temperature1_avg + temperature1;
 8003912:	4b3a      	ldr	r3, [pc, #232]	@ (80039fc <Read_Temp+0x170>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <Read_Temp+0x184>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1c19      	adds	r1, r3, #0
 800391c:	1c10      	adds	r0, r2, #0
 800391e:	f7fc ff07 	bl	8000730 <__aeabi_fadd>
 8003922:	1c03      	adds	r3, r0, #0
 8003924:	1c1a      	adds	r2, r3, #0
 8003926:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <Read_Temp+0x170>)
 8003928:	601a      	str	r2, [r3, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 800392a:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <Read_Temp+0x17c>)
 800392c:	0018      	movs	r0, r3
 800392e:	f002 fcd1 	bl	80062d4 <HAL_ADC_Stop>
		  	 		    HAL_GPIO_WritePin(Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, SET);
 8003932:	4b34      	ldr	r3, [pc, #208]	@ (8003a04 <Read_Temp+0x178>)
 8003934:	2201      	movs	r2, #1
 8003936:	2104      	movs	r1, #4
 8003938:	0018      	movs	r0, r3
 800393a:	f003 ffe0 	bl	80078fe <HAL_GPIO_WritePin>

		  	 		    // thermisor2 temp 측정
		  	 	    	HAL_GPIO_WritePin (Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, RESET);
 800393e:	4b31      	ldr	r3, [pc, #196]	@ (8003a04 <Read_Temp+0x178>)
 8003940:	2200      	movs	r2, #0
 8003942:	2104      	movs	r1, #4
 8003944:	0018      	movs	r0, r3
 8003946:	f003 ffda 	bl	80078fe <HAL_GPIO_WritePin>
		  	 		    sConfig.Channel = ADC_CHANNEL_2;
 800394a:	003b      	movs	r3, r7
 800394c:	4a31      	ldr	r2, [pc, #196]	@ (8003a14 <Read_Temp+0x188>)
 800394e:	601a      	str	r2, [r3, #0]
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003950:	003a      	movs	r2, r7
 8003952:	4b2d      	ldr	r3, [pc, #180]	@ (8003a08 <Read_Temp+0x17c>)
 8003954:	0011      	movs	r1, r2
 8003956:	0018      	movs	r0, r3
 8003958:	f002 ff0a 	bl	8006770 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 800395c:	4b2a      	ldr	r3, [pc, #168]	@ (8003a08 <Read_Temp+0x17c>)
 800395e:	0018      	movs	r0, r3
 8003960:	f002 fc6a 	bl	8006238 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003964:	2301      	movs	r3, #1
 8003966:	425a      	negs	r2, r3
 8003968:	4b27      	ldr	r3, [pc, #156]	@ (8003a08 <Read_Temp+0x17c>)
 800396a:	0011      	movs	r1, r2
 800396c:	0018      	movs	r0, r3
 800396e:	f002 fced 	bl	800634c <HAL_ADC_PollForConversion>
		  	 		    adc_value2 = HAL_ADC_GetValue(&hadc1);
 8003972:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <Read_Temp+0x17c>)
 8003974:	0018      	movs	r0, r3
 8003976:	f002 fd7d 	bl	8006474 <HAL_ADC_GetValue>
 800397a:	0003      	movs	r3, r0
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b26      	ldr	r3, [pc, #152]	@ (8003a18 <Read_Temp+0x18c>)
 8003980:	801a      	strh	r2, [r3, #0]
		  	 		    temperature2 = read_temperature_steinhart(adc_value2);
 8003982:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <Read_Temp+0x18c>)
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	0018      	movs	r0, r3
 8003988:	f7ff ff10 	bl	80037ac <read_temperature_steinhart>
 800398c:	1c02      	adds	r2, r0, #0
 800398e:	4b23      	ldr	r3, [pc, #140]	@ (8003a1c <Read_Temp+0x190>)
 8003990:	601a      	str	r2, [r3, #0]
		  	 		    temperature2_avg = temperature2_avg + temperature2;
 8003992:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <Read_Temp+0x174>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b21      	ldr	r3, [pc, #132]	@ (8003a1c <Read_Temp+0x190>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	1c19      	adds	r1, r3, #0
 800399c:	1c10      	adds	r0, r2, #0
 800399e:	f7fc fec7 	bl	8000730 <__aeabi_fadd>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c1a      	adds	r2, r3, #0
 80039a6:	4b16      	ldr	r3, [pc, #88]	@ (8003a00 <Read_Temp+0x174>)
 80039a8:	601a      	str	r2, [r3, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 80039aa:	4b17      	ldr	r3, [pc, #92]	@ (8003a08 <Read_Temp+0x17c>)
 80039ac:	0018      	movs	r0, r3
 80039ae:	f002 fc91 	bl	80062d4 <HAL_ADC_Stop>
		  	 		    HAL_GPIO_WritePin(Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, SET);
 80039b2:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <Read_Temp+0x178>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	2104      	movs	r1, #4
 80039b8:	0018      	movs	r0, r3
 80039ba:	f003 ffa0 	bl	80078fe <HAL_GPIO_WritePin>
	 for(int i=0; i < 10; i++)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	dc00      	bgt.n	80039cc <Read_Temp+0x140>
 80039ca:	e772      	b.n	80038b2 <Read_Temp+0x26>
		  	 		    }

		  	 		    temperature1_avg = temperature1_avg / 10;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <Read_Temp+0x170>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4913      	ldr	r1, [pc, #76]	@ (8003a20 <Read_Temp+0x194>)
 80039d2:	1c18      	adds	r0, r3, #0
 80039d4:	f7fd f89e 	bl	8000b14 <__aeabi_fdiv>
 80039d8:	1c03      	adds	r3, r0, #0
 80039da:	1c1a      	adds	r2, r3, #0
 80039dc:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <Read_Temp+0x170>)
 80039de:	601a      	str	r2, [r3, #0]
		  	 		    temperature2_avg = temperature2_avg / 10;
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <Read_Temp+0x174>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	490e      	ldr	r1, [pc, #56]	@ (8003a20 <Read_Temp+0x194>)
 80039e6:	1c18      	adds	r0, r3, #0
 80039e8:	f7fd f894 	bl	8000b14 <__aeabi_fdiv>
 80039ec:	1c03      	adds	r3, r0, #0
 80039ee:	1c1a      	adds	r2, r3, #0
 80039f0:	4b03      	ldr	r3, [pc, #12]	@ (8003a00 <Read_Temp+0x174>)
 80039f2:	601a      	str	r2, [r3, #0]
//
//		  	 		    sprintf(msg, "Temp1: %.2f Temp2: %.2f		ADC_Value1 : %d ADC_Value2 : %d\r\n", temperature1_avg, temperature2_avg, adc_value1, adc_value2);
////		  	 		    sprintf(msg, "Temp1: %.2f Temp2: %.2f", temperature1_avg, temperature2_avg);
//		  	 		    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);

}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b004      	add	sp, #16
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000730 	.word	0x20000730
 8003a00:	20000734 	.word	0x20000734
 8003a04:	50000c00 	.word	0x50000c00
 8003a08:	200001f4 	.word	0x200001f4
 8003a0c:	20000724 	.word	0x20000724
 8003a10:	20000728 	.word	0x20000728
 8003a14:	08000004 	.word	0x08000004
 8003a18:	20000726 	.word	0x20000726
 8003a1c:	2000072c 	.word	0x2000072c
 8003a20:	41200000 	.word	0x41200000

08003a24 <Write_buffer>:

void Write_buffer(void){
 8003a24:	b5b0      	push	{r4, r5, r7, lr}
 8003a26:	b08a      	sub	sp, #40	@ 0x28
 8003a28:	af00      	add	r7, sp, #0
	RTC_DateTypeDef sDate;
    RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8003a2a:	2410      	movs	r4, #16
 8003a2c:	1939      	adds	r1, r7, r4
 8003a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba0 <Write_buffer+0x17c>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	0018      	movs	r0, r3
 8003a34:	f008 f8e2 	bl	800bbfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8003a38:	2524      	movs	r5, #36	@ 0x24
 8003a3a:	1979      	adds	r1, r7, r5
 8003a3c:	4b58      	ldr	r3, [pc, #352]	@ (8003ba0 <Write_buffer+0x17c>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	0018      	movs	r0, r3
 8003a42:	f008 f9e5 	bl	800be10 <HAL_RTC_GetDate>


	log_entry_t entry = {
 8003a46:	4b57      	ldr	r3, [pc, #348]	@ (8003ba4 <Write_buffer+0x180>)
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	003b      	movs	r3, r7
 8003a4e:	701a      	strb	r2, [r3, #0]
	        .index       = Index_num,
			.year        = BCD2BIN(sDate.Year),
 8003a50:	0029      	movs	r1, r5
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	78db      	ldrb	r3, [r3, #3]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	1c1a      	adds	r2, r3, #0
 8003a5c:	0092      	lsls	r2, r2, #2
 8003a5e:	18d3      	adds	r3, r2, r3
 8003a60:	18db      	adds	r3, r3, r3
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	0008      	movs	r0, r1
 8003a66:	187b      	adds	r3, r7, r1
 8003a68:	78db      	ldrb	r3, [r3, #3]
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	18d3      	adds	r3, r2, r3
 8003a72:	b2da      	uxtb	r2, r3
	log_entry_t entry = {
 8003a74:	003b      	movs	r3, r7
 8003a76:	705a      	strb	r2, [r3, #1]
			.month       = BCD2BIN(sDate.Month),
 8003a78:	0001      	movs	r1, r0
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	1c1a      	adds	r2, r3, #0
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	18d3      	adds	r3, r2, r3
 8003a88:	18db      	adds	r3, r3, r3
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	0008      	movs	r0, r1
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	210f      	movs	r1, #15
 8003a94:	400b      	ands	r3, r1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	18d3      	adds	r3, r2, r3
 8003a9a:	b2da      	uxtb	r2, r3
	log_entry_t entry = {
 8003a9c:	003b      	movs	r3, r7
 8003a9e:	709a      	strb	r2, [r3, #2]
			.day         = BCD2BIN(sDate.Date),
 8003aa0:	0001      	movs	r1, r0
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	789b      	ldrb	r3, [r3, #2]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	1c1a      	adds	r2, r3, #0
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	18db      	adds	r3, r3, r3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	789b      	ldrb	r3, [r3, #2]
 8003ab8:	210f      	movs	r1, #15
 8003aba:	400b      	ands	r3, r1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	b2da      	uxtb	r2, r3
	log_entry_t entry = {
 8003ac2:	003b      	movs	r3, r7
 8003ac4:	70da      	strb	r2, [r3, #3]
			.hour        = BCD2BIN(sTime.Hours),
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	1c1a      	adds	r2, r3, #0
 8003ad0:	0092      	lsls	r2, r2, #2
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	18db      	adds	r3, r3, r3
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	210f      	movs	r1, #15
 8003ade:	400b      	ands	r3, r1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	18d3      	adds	r3, r2, r3
 8003ae4:	b2da      	uxtb	r2, r3
	log_entry_t entry = {
 8003ae6:	003b      	movs	r3, r7
 8003ae8:	711a      	strb	r2, [r3, #4]
			.minute      = BCD2BIN(sTime.Minutes),
 8003aea:	0021      	movs	r1, r4
 8003aec:	193b      	adds	r3, r7, r4
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	1c1a      	adds	r2, r3, #0
 8003af6:	0092      	lsls	r2, r2, #2
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	18db      	adds	r3, r3, r3
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	0008      	movs	r0, r1
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	210f      	movs	r1, #15
 8003b06:	400b      	ands	r3, r1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	18d3      	adds	r3, r2, r3
 8003b0c:	b2da      	uxtb	r2, r3
	log_entry_t entry = {
 8003b0e:	003b      	movs	r3, r7
 8003b10:	715a      	strb	r2, [r3, #5]
			.second      = BCD2BIN(sTime.Seconds),
 8003b12:	0001      	movs	r1, r0
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	789b      	ldrb	r3, [r3, #2]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	1c1a      	adds	r2, r3, #0
 8003b1e:	0092      	lsls	r2, r2, #2
 8003b20:	18d3      	adds	r3, r2, r3
 8003b22:	18db      	adds	r3, r3, r3
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	789b      	ldrb	r3, [r3, #2]
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	b2da      	uxtb	r2, r3
	log_entry_t entry = {
 8003b34:	003b      	movs	r3, r7
 8003b36:	719a      	strb	r2, [r3, #6]
 8003b38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <Write_buffer+0x184>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	003b      	movs	r3, r7
 8003b40:	71da      	strb	r2, [r3, #7]
	        .count       = comp1_count,
	        .temperature = temperature1_avg * 10,   // 39℃
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <Write_buffer+0x188>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	491a      	ldr	r1, [pc, #104]	@ (8003bb0 <Write_buffer+0x18c>)
 8003b48:	1c18      	adds	r0, r3, #0
 8003b4a:	f7fd f9b1 	bl	8000eb0 <__aeabi_fmul>
 8003b4e:	1c03      	adds	r3, r0, #0
	log_entry_t entry = {
 8003b50:	1c18      	adds	r0, r3, #0
 8003b52:	f7fd fd81 	bl	8001658 <__aeabi_f2iz>
 8003b56:	0003      	movs	r3, r0
 8003b58:	b21a      	sxth	r2, r3
 8003b5a:	003b      	movs	r3, r7
 8003b5c:	811a      	strh	r2, [r3, #8]
 8003b5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ba8 <Write_buffer+0x184>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	1c1a      	adds	r2, r3, #0
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	18d3      	adds	r3, r2, r3
 8003b6a:	18db      	adds	r3, r3, r3
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	003b      	movs	r3, r7
 8003b70:	815a      	strh	r2, [r3, #10]
 8003b72:	003b      	movs	r3, r7
 8003b74:	2200      	movs	r2, #0
 8003b76:	819a      	strh	r2, [r3, #12]
 8003b78:	003b      	movs	r3, r7
 8003b7a:	220e      	movs	r2, #14
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5299      	strh	r1, [r3, r2]
	        .dose        = comp1_count * 10, // 12.50 mSv/h
	        .checksum    = 0,    // 쓰기 함수가 채워 줌
	        .reserved    = {0}
	    };

	meas_data_log_write_entry(&entry);
 8003b80:	003b      	movs	r3, r7
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 fefc 	bl	8004980 <meas_data_log_write_entry>

	meas_data_log_read_last();
 8003b88:	f000 ff50 	bl	8004a2c <meas_data_log_read_last>

	Index_num++;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <Write_buffer+0x180>)
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <Write_buffer+0x180>)
 8003b96:	801a      	strh	r2, [r3, #0]
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b00a      	add	sp, #40	@ 0x28
 8003b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba0:	2000031c 	.word	0x2000031c
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000720 	.word	0x20000720
 8003bac:	20000730 	.word	0x20000730
 8003bb0:	41200000 	.word	0x41200000

08003bb4 <Disable_RTC_OneShotTimer>:

////////////////////////////////////Sleep Function/////////////////////////////////////////////
void Disable_RTC_OneShotTimer(RTC_HandleTypeDef *hrtc)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    // 1) RTC 레지스터 쓰기 보호 풀기
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bbc:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <Disable_RTC_OneShotTimer+0x54>)
 8003bbe:	22ca      	movs	r2, #202	@ 0xca
 8003bc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <Disable_RTC_OneShotTimer+0x54>)
 8003bc4:	2253      	movs	r2, #83	@ 0x53
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24

    // 2) WUTE, WUTIE 비트 클리어 (Wake-Up 타이머 완전 비활성화)
    CLEAR_BIT(RTC->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <Disable_RTC_OneShotTimer+0x54>)
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <Disable_RTC_OneShotTimer+0x54>)
 8003bce:	490f      	ldr	r1, [pc, #60]	@ (8003c0c <Disable_RTC_OneShotTimer+0x58>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	619a      	str	r2, [r3, #24]

    // 3) 다시 쓰기 보호 설정
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <Disable_RTC_OneShotTimer+0x54>)
 8003bd6:	22ff      	movs	r2, #255	@ 0xff
 8003bd8:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4) RTC 내부 Wake-Up 플래그 완전 클리어
    __HAL_RTC_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003bda:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <Disable_RTC_OneShotTimer+0x54>)
 8003bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8003c10 <Disable_RTC_OneShotTimer+0x5c>)
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c
    // 또는: WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);

    // 5) EXTI 이벤트 라인 비활성화 및 pending 비트 클리어
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();   // EXTI 이벤트 끄기
 8003be0:	4a0c      	ldr	r2, [pc, #48]	@ (8003c14 <Disable_RTC_OneShotTimer+0x60>)
 8003be2:	2384      	movs	r3, #132	@ 0x84
 8003be4:	58d3      	ldr	r3, [r2, r3]
 8003be6:	490b      	ldr	r1, [pc, #44]	@ (8003c14 <Disable_RTC_OneShotTimer+0x60>)
 8003be8:	4a0b      	ldr	r2, [pc, #44]	@ (8003c18 <Disable_RTC_OneShotTimer+0x64>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	2284      	movs	r2, #132	@ 0x84
 8003bee:	508b      	str	r3, [r1, r2]
    EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT; // pending 클리어
 8003bf0:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <Disable_RTC_OneShotTimer+0x60>)
 8003bf2:	2280      	movs	r2, #128	@ 0x80
 8003bf4:	0552      	lsls	r2, r2, #21
 8003bf6:	60da      	str	r2, [r3, #12]

    // 6) PWR 모듈 Wake-Up 플래그도 클리어 (추가 안전 장치)
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003bf8:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <Disable_RTC_OneShotTimer+0x68>)
 8003bfa:	225f      	movs	r2, #95	@ 0x5f
 8003bfc:	619a      	str	r2, [r3, #24]
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	40002800 	.word	0x40002800
 8003c0c:	ffffbbff 	.word	0xffffbbff
 8003c10:	00000202 	.word	0x00000202
 8003c14:	40021800 	.word	0x40021800
 8003c18:	efffffff 	.word	0xefffffff
 8003c1c:	40007000 	.word	0x40007000

08003c20 <Save_Power_Function>:

void Save_Power_Function()
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
	HAL_PWREx_EnableUltraLowPowerMode();       // ULP 모드 활성화
 8003c26:	f005 ffbf 	bl	8009ba8 <HAL_PWREx_EnableUltraLowPowerMode>
	// — ADC, COMP, LCD, UART 해제 & 클럭 꺼버리기 —
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8003c2a:	4b27      	ldr	r3, [pc, #156]	@ (8003cc8 <Save_Power_Function+0xa8>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f002 fa67 	bl	8006100 <HAL_ADC_DeInit>
 8003c32:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c36:	4b25      	ldr	r3, [pc, #148]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c38:	4925      	ldr	r1, [pc, #148]	@ (8003cd0 <Save_Power_Function+0xb0>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	661a      	str	r2, [r3, #96]	@ 0x60
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8003c3e:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <Save_Power_Function+0xb4>)
 8003c40:	0018      	movs	r0, r3
 8003c42:	f003 fa55 	bl	80070f0 <HAL_COMP_DeInit>
 8003c46:	4b21      	ldr	r3, [pc, #132]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	438a      	bics	r2, r1
 8003c50:	661a      	str	r2, [r3, #96]	@ 0x60
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8003c52:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <Save_Power_Function+0xb8>)
 8003c54:	0018      	movs	r0, r3
 8003c56:	f003 ff69 	bl	8007b2c <HAL_LCD_DeInit>
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c60:	491e      	ldr	r1, [pc, #120]	@ (8003cdc <Save_Power_Function+0xbc>)
 8003c62:	400a      	ands	r2, r1
 8003c64:	659a      	str	r2, [r3, #88]	@ 0x58
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8003c66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce0 <Save_Power_Function+0xc0>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f009 fadf 	bl	800d22c <HAL_UART_DeInit>
 8003c6e:	4b17      	ldr	r3, [pc, #92]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c72:	4b16      	ldr	r3, [pc, #88]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c74:	491b      	ldr	r1, [pc, #108]	@ (8003ce4 <Save_Power_Function+0xc4>)
 8003c76:	400a      	ands	r2, r1
 8003c78:	659a      	str	r2, [r3, #88]	@ 0x58
	// (필요하다면 GPIO 그룹 클럭도 꺼주세요)
	GPIO_InitTypeDef g = {0};
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	2314      	movs	r3, #20
 8003c80:	001a      	movs	r2, r3
 8003c82:	2100      	movs	r1, #0
 8003c84:	f00b fe16 	bl	800f8b4 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8003c88:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c8e:	2101      	movs	r1, #1
 8003c90:	430a      	orrs	r2, r1
 8003c92:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003c94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <Save_Power_Function+0xac>)
 8003c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
	// … (필요한 그룹 모두 클럭 Enable)
	g.Pin   = GPIO_PIN_ALL & ~GPIO_PIN_0;  // PA0 제외
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	4a11      	ldr	r2, [pc, #68]	@ (8003ce8 <Save_Power_Function+0xc8>)
 8003ca4:	601a      	str	r2, [r3, #0]
	g.Mode  = GPIO_MODE_ANALOG;
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	2203      	movs	r2, #3
 8003caa:	605a      	str	r2, [r3, #4]
	g.Pull  = GPIO_NOPULL;
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &g);
 8003cb2:	1d3a      	adds	r2, r7, #4
 8003cb4:	23a0      	movs	r3, #160	@ 0xa0
 8003cb6:	05db      	lsls	r3, r3, #23
 8003cb8:	0011      	movs	r1, r2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f003 fbae 	bl	800741c <HAL_GPIO_Init>
	// … 같은 방식으로 B, C, F 그룹까지
	// 그리고 __HAL_RCC_GPIOx_CLK_DISABLE() 로 다시 끄기
	// 내부 풀업 없는 HIGH 레벨 감지로 전환

}
 8003cc0:	46c0      	nop			@ (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b006      	add	sp, #24
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200001f4 	.word	0x200001f4
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	ffefffff 	.word	0xffefffff
 8003cd4:	20000258 	.word	0x20000258
 8003cd8:	20000288 	.word	0x20000288
 8003cdc:	fffffdff 	.word	0xfffffdff
 8003ce0:	200003b0 	.word	0x200003b0
 8003ce4:	fffbffff 	.word	0xfffbffff
 8003ce8:	0000fffe 	.word	0x0000fffe

08003cec <Get_in_Shutdown>:

void Get_in_Shutdown(){
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t*)"Getting on to sleep\r\n", strlen("Getting on to sleep\r\n"), HAL_MAX_DELAY);
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	425b      	negs	r3, r3
 8003cf4:	491f      	ldr	r1, [pc, #124]	@ (8003d74 <Get_in_Shutdown+0x88>)
 8003cf6:	4820      	ldr	r0, [pc, #128]	@ (8003d78 <Get_in_Shutdown+0x8c>)
 8003cf8:	2215      	movs	r2, #21
 8003cfa:	f009 fad7 	bl	800d2ac <HAL_UART_Transmit>

	// 1) Wake-Up 타이머 완전 비활성화
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003d7c <Get_in_Shutdown+0x90>)
 8003d00:	0018      	movs	r0, r3
 8003d02:	f008 fa0d 	bl	800c120 <HAL_RTCEx_DeactivateWakeUpTimer>
	// 2) EXTI 이벤트 라인 비활성화
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();
 8003d06:	4a1e      	ldr	r2, [pc, #120]	@ (8003d80 <Get_in_Shutdown+0x94>)
 8003d08:	2384      	movs	r3, #132	@ 0x84
 8003d0a:	58d3      	ldr	r3, [r2, r3]
 8003d0c:	491c      	ldr	r1, [pc, #112]	@ (8003d80 <Get_in_Shutdown+0x94>)
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <Get_in_Shutdown+0x98>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	2284      	movs	r2, #132	@ 0x84
 8003d14:	508b      	str	r3, [r1, r2]
	// (혹은 __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT())
	// 3) RTC 내부 Wake-Up 플래그 클리어
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8003d16:	4b1c      	ldr	r3, [pc, #112]	@ (8003d88 <Get_in_Shutdown+0x9c>)
 8003d18:	4a1c      	ldr	r2, [pc, #112]	@ (8003d8c <Get_in_Shutdown+0xa0>)
 8003d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    // 또는: WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
    // 4) PWR WU 플래그 클리어
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d90 <Get_in_Shutdown+0xa4>)
 8003d1e:	225f      	movs	r2, #95	@ 0x5f
 8003d20:	619a      	str	r2, [r3, #24]
	Save_Power_Function();
 8003d22:	f7ff ff7d 	bl	8003c20 <Save_Power_Function>

	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8003d26:	2081      	movs	r0, #129	@ 0x81
 8003d28:	f005 fe8a 	bl	8009a40 <HAL_PWR_EnableWakeUpPin>
	HAL_GPIO_WritePin(Regulator_En_GPIO_Port, Regulator_En_Pin, GPIO_PIN_RESET); // 핀 High 상태로 출력
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4818      	ldr	r0, [pc, #96]	@ (8003d94 <Get_in_Shutdown+0xa8>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	0019      	movs	r1, r3
 8003d36:	f003 fde2 	bl	80078fe <HAL_GPIO_WritePin>

    // 🟡 STOP 직전에 정확히 타이머 설정
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 299, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8003d3a:	232c      	movs	r3, #44	@ 0x2c
 8003d3c:	33ff      	adds	r3, #255	@ 0xff
 8003d3e:	0019      	movs	r1, r3
 8003d40:	480e      	ldr	r0, [pc, #56]	@ (8003d7c <Get_in_Shutdown+0x90>)
 8003d42:	2300      	movs	r3, #0
 8003d44:	2204      	movs	r2, #4
 8003d46:	f008 f949 	bl	800bfdc <HAL_RTCEx_SetWakeUpTimer_IT>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d001      	beq.n	8003d52 <Get_in_Shutdown+0x66>
		{
		 Error_Handler();
 8003d4e:	f000 fd61 	bl	8004814 <Error_Handler>
		}

    HAL_SuspendTick(); // SysTick 멈춤
 8003d52:	f001 fe8b 	bl	8005a6c <HAL_SuspendTick>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    HAL_PWR_EnterSHUTDOWNMode();
 8003d56:	f005 fe93 	bl	8009a80 <HAL_PWR_EnterSHUTDOWNMode>
	HAL_ResumeTick(); // 다시 켬
 8003d5a:	f001 fe95 	bl	8005a88 <HAL_ResumeTick>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Wake Up!\r\n", strlen("Wake Up!\r\n"), HAL_MAX_DELAY);
 8003d5e:	2301      	movs	r3, #1
 8003d60:	425b      	negs	r3, r3
 8003d62:	490d      	ldr	r1, [pc, #52]	@ (8003d98 <Get_in_Shutdown+0xac>)
 8003d64:	4804      	ldr	r0, [pc, #16]	@ (8003d78 <Get_in_Shutdown+0x8c>)
 8003d66:	220a      	movs	r2, #10
 8003d68:	f009 faa0 	bl	800d2ac <HAL_UART_Transmit>
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	08011e64 	.word	0x08011e64
 8003d78:	200003b0 	.word	0x200003b0
 8003d7c:	2000031c 	.word	0x2000031c
 8003d80:	40021800 	.word	0x40021800
 8003d84:	efffffff 	.word	0xefffffff
 8003d88:	40002800 	.word	0x40002800
 8003d8c:	00000202 	.word	0x00000202
 8003d90:	40007000 	.word	0x40007000
 8003d94:	50000400 	.word	0x50000400
 8003d98:	08011e7c 	.word	0x08011e7c

08003d9c <read_flash_to_buffer>:

////////////////////////////////////FLASH Function/////////////////////////////////////////////

void read_flash_to_buffer(uint32_t offset, uint8_t *buf, size_t len)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
    meas_data_log_read(offset, buf, len);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fdb0 	bl	8004914 <meas_data_log_read>
}
 8003db4:	46c0      	nop			@ (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <uart3_dump_hex>:
void uart3_dump_hex(const uint8_t *buf, size_t len)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b08d      	sub	sp, #52	@ 0x34
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
    const char hex_chars[] = "0123456789ABCDEF";
 8003dc6:	2318      	movs	r3, #24
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <uart3_dump_hex+0xac>)
 8003dcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003dce:	c313      	stmia	r3!, {r0, r1, r4}
 8003dd0:	6811      	ldr	r1, [r2, #0]
 8003dd2:	6019      	str	r1, [r3, #0]
 8003dd4:	7912      	ldrb	r2, [r2, #4]
 8003dd6:	711a      	strb	r2, [r3, #4]
    for (size_t i = 0; i < len; i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ddc:	e02e      	b.n	8003e3c <uart3_dump_hex+0x80>
    {
        uint8_t v = buf[i];
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	18d2      	adds	r2, r2, r3
 8003de4:	212b      	movs	r1, #43	@ 0x2b
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	701a      	strb	r2, [r3, #0]
        char hex[2];
        hex[0] = hex_chars[v >> 4];
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	001a      	movs	r2, r3
 8003df6:	2418      	movs	r4, #24
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	5c9a      	ldrb	r2, [r3, r2]
 8003dfc:	2010      	movs	r0, #16
 8003dfe:	183b      	adds	r3, r7, r0
 8003e00:	701a      	strb	r2, [r3, #0]
        hex[1] = hex_chars[v & 0x0F];
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	220f      	movs	r2, #15
 8003e08:	4013      	ands	r3, r2
 8003e0a:	193a      	adds	r2, r7, r4
 8003e0c:	5cd2      	ldrb	r2, [r2, r3]
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	705a      	strb	r2, [r3, #1]
        // 2글자 전송
        HAL_UART_Transmit(&huart3, (uint8_t*)hex, 2, HAL_MAX_DELAY);
 8003e12:	2301      	movs	r3, #1
 8003e14:	425b      	negs	r3, r3
 8003e16:	1839      	adds	r1, r7, r0
 8003e18:	4814      	ldr	r0, [pc, #80]	@ (8003e6c <uart3_dump_hex+0xb0>)
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f009 fa46 	bl	800d2ac <HAL_UART_Transmit>
        // 공백 전송
        char sp = ' ';
 8003e20:	210f      	movs	r1, #15
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	2220      	movs	r2, #32
 8003e26:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, (uint8_t*)&sp, 1, HAL_MAX_DELAY);
 8003e28:	2301      	movs	r3, #1
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	1879      	adds	r1, r7, r1
 8003e2e:	480f      	ldr	r0, [pc, #60]	@ (8003e6c <uart3_dump_hex+0xb0>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	f009 fa3b 	bl	800d2ac <HAL_UART_Transmit>
    for (size_t i = 0; i < len; i++)
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	3301      	adds	r3, #1
 8003e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3cc      	bcc.n	8003dde <uart3_dump_hex+0x22>
    }
    // 줄바꿈
    const char crlf[] = "\r\n";
 8003e44:	2014      	movs	r0, #20
 8003e46:	183b      	adds	r3, r7, r0
 8003e48:	4a09      	ldr	r2, [pc, #36]	@ (8003e70 <uart3_dump_hex+0xb4>)
 8003e4a:	8811      	ldrh	r1, [r2, #0]
 8003e4c:	8019      	strh	r1, [r3, #0]
 8003e4e:	7892      	ldrb	r2, [r2, #2]
 8003e50:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, (uint8_t*)crlf, 2, HAL_MAX_DELAY);
 8003e52:	2301      	movs	r3, #1
 8003e54:	425b      	negs	r3, r3
 8003e56:	1839      	adds	r1, r7, r0
 8003e58:	4804      	ldr	r0, [pc, #16]	@ (8003e6c <uart3_dump_hex+0xb0>)
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f009 fa26 	bl	800d2ac <HAL_UART_Transmit>
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b00d      	add	sp, #52	@ 0x34
 8003e66:	bd90      	pop	{r4, r7, pc}
 8003e68:	08011e88 	.word	0x08011e88
 8003e6c:	200003b0 	.word	0x200003b0
 8003e70:	08011e9c 	.word	0x08011e9c

08003e74 <Press_Action>:
{
    const char msg[] = "Long Press Detected!\r\n";
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void Press_Action(void){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	@ 0x28
 8003e78:	af00      	add	r7, sp, #0
	if(button_flag)
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <Press_Action+0xf4>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d06d      	beq.n	8003f60 <Press_Action+0xec>
			  	  	 	{
			  	  	 		bool button_flag_det= HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0);
 8003e84:	23a0      	movs	r3, #160	@ 0xa0
 8003e86:	05db      	lsls	r3, r3, #23
 8003e88:	2101      	movs	r1, #1
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f003 fd1a 	bl	80078c4 <HAL_GPIO_ReadPin>
 8003e90:	0003      	movs	r3, r0
 8003e92:	001a      	movs	r2, r3
 8003e94:	2027      	movs	r0, #39	@ 0x27
 8003e96:	183b      	adds	r3, r7, r0
 8003e98:	1e51      	subs	r1, r2, #1
 8003e9a:	418a      	sbcs	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
			  	  	 		if(!button_flag_det)
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4053      	eors	r3, r2
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d038      	beq.n	8003f1e <Press_Action+0xaa>
			  	  	 		{
			  	  	 			SW_count++;
 8003eac:	4b2f      	ldr	r3, [pc, #188]	@ (8003f6c <Press_Action+0xf8>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f6c <Press_Action+0xf8>)
 8003eb6:	701a      	strb	r2, [r3, #0]
			  	  	 			char msg[32];
			  	  	 			sprintf(msg,"SW_count : %d\r\n",SW_count);
 8003eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f6c <Press_Action+0xf8>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	001a      	movs	r2, r3
 8003ebe:	492c      	ldr	r1, [pc, #176]	@ (8003f70 <Press_Action+0xfc>)
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f00b fc88 	bl	800f7d8 <siprintf>
			  	  	 			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003ec8:	1d3b      	adds	r3, r7, #4
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7fc f91c 	bl	8000108 <strlen>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	425b      	negs	r3, r3
 8003ed8:	1d39      	adds	r1, r7, #4
 8003eda:	4826      	ldr	r0, [pc, #152]	@ (8003f74 <Press_Action+0x100>)
 8003edc:	f009 f9e6 	bl	800d2ac <HAL_UART_Transmit>
			  	  	 			if (SW_count>9){
 8003ee0:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <Press_Action+0xf8>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b09      	cmp	r3, #9
 8003ee6:	d93b      	bls.n	8003f60 <Press_Action+0xec>
			  	  	 			   button_flag = false;
 8003ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f68 <Press_Action+0xf4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
			  	  	 			   meas_data_log_erase();
 8003eee:	f000 fd29 	bl	8004944 <meas_data_log_erase>
			  	  	 			   sprintf(msg,"Log Erased!!!!!! \r\n");
 8003ef2:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <Press_Action+0x104>)
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	0011      	movs	r1, r2
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f00b fc6d 	bl	800f7d8 <siprintf>
			  	  	 		       HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fc f901 	bl	8000108 <strlen>
 8003f06:	0003      	movs	r3, r0
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	1d39      	adds	r1, r7, #4
 8003f10:	4818      	ldr	r0, [pc, #96]	@ (8003f74 <Press_Action+0x100>)
 8003f12:	f009 f9cb 	bl	800d2ac <HAL_UART_Transmit>
			  	  	 		       SW_count = 0;
 8003f16:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <Press_Action+0xf8>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
			  	  	 		char msg[32];
			  	  	 			sprintf(msg,"Button unpressed \r\n");
			  	  	 			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
			  	  	 		}
			  	  	 	}
}
 8003f1c:	e020      	b.n	8003f60 <Press_Action+0xec>
			  	  	 		if (SW_count>5){
 8003f1e:	4b13      	ldr	r3, [pc, #76]	@ (8003f6c <Press_Action+0xf8>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d904      	bls.n	8003f30 <Press_Action+0xbc>
			  	  	 		    dump_log_entries();
 8003f26:	f000 fead 	bl	8004c84 <dump_log_entries>
			  	  	 			SW_count = 0;
 8003f2a:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <Press_Action+0xf8>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
			  	  	 			button_flag = false;
 8003f30:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <Press_Action+0xf4>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
			  	  	 		    SW_count = 0;
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <Press_Action+0xf8>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
			  	  	 			sprintf(msg,"Button unpressed \r\n");
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f7c <Press_Action+0x108>)
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	0011      	movs	r1, r2
 8003f42:	0018      	movs	r0, r3
 8003f44:	f00b fc48 	bl	800f7d8 <siprintf>
			  	  	 			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7fc f8dc 	bl	8000108 <strlen>
 8003f50:	0003      	movs	r3, r0
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	2301      	movs	r3, #1
 8003f56:	425b      	negs	r3, r3
 8003f58:	1d39      	adds	r1, r7, #4
 8003f5a:	4806      	ldr	r0, [pc, #24]	@ (8003f74 <Press_Action+0x100>)
 8003f5c:	f009 f9a6 	bl	800d2ac <HAL_UART_Transmit>
}
 8003f60:	46c0      	nop			@ (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b00a      	add	sp, #40	@ 0x28
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000738 	.word	0x20000738
 8003f6c:	20000739 	.word	0x20000739
 8003f70:	08011ed0 	.word	0x08011ed0
 8003f74:	200003b0 	.word	0x200003b0
 8003f78:	08011ee0 	.word	0x08011ee0
 8003f7c:	08011ef4 	.word	0x08011ef4

08003f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SystemClock_Config();
 8003f86:	f000 f8a1 	bl	80040cc <SystemClock_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f8a:	f001 fcf4 	bl	8005976 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	2002      	movs	r0, #2
 8003f94:	f003 fa00 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003f98:	2002      	movs	r0, #2
 8003f9a:	f003 fa12 	bl	80073c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f9e:	f000 f895 	bl	80040cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fa2:	f000 fb4d 	bl	8004640 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003fa6:	f000 f919 	bl	80041dc <MX_ADC1_Init>
  MX_LCD_Init();
 8003faa:	f000 f9b1 	bl	8004310 <MX_LCD_Init>
  MX_SPI3_Init();
 8003fae:	f000 fa91 	bl	80044d4 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003fb2:	f000 facd 	bl	8004550 <MX_USART3_UART_Init>
  MX_COMP1_Init();
 8003fb6:	f000 f97b 	bl	80042b0 <MX_COMP1_Init>
  MX_LPTIM1_Init();
 8003fba:	f000 f9df 	bl	800437c <MX_LPTIM1_Init>
  MX_USB_PCD_Init();
 8003fbe:	f000 fb15 	bl	80045ec <MX_USB_PCD_Init>
  MX_FileX_Init();
 8003fc2:	f00a fe33 	bl	800ec2c <MX_FileX_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();
 8003fc6:	f005 fd2d 	bl	8009a24 <HAL_PWR_EnableBkUpAccess>
  if ( HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_BKP) != RTC_MAGIC_VALUE )
 8003fca:	4b38      	ldr	r3, [pc, #224]	@ (80040ac <main+0x12c>)
 8003fcc:	2100      	movs	r1, #0
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f008 f9a4 	bl	800c31c <HAL_RTCEx_BKUPRead>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	4a36      	ldr	r2, [pc, #216]	@ (80040b0 <main+0x130>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <main+0x70>
    {
      /* 매직이 없으면 진짜 “최초 부팅”이므로 RTC 초기화 실행 */
      MX_RTC_Init();
 8003fdc:	f000 fa02 	bl	80043e4 <MX_RTC_Init>
      meas_data_log_erase();
 8003fe0:	f000 fcb0 	bl	8004944 <meas_data_log_erase>
      /* 보통 MX_RTC_Init() 안에서 set-time/set-date 와 함께
         HAL_RTCEx_BKUPWrite()로 매직을 기록하지만,
         만약 없다면 여기서 직접 써도 됩니다: */
      HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_BKP, RTC_MAGIC_VALUE);
 8003fe4:	4a32      	ldr	r2, [pc, #200]	@ (80040b0 <main+0x130>)
 8003fe6:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <main+0x12c>)
 8003fe8:	2100      	movs	r1, #0
 8003fea:	0018      	movs	r0, r3
 8003fec:	f008 f980 	bl	800c2f0 <HAL_RTCEx_BKUPWrite>
    }

  SPI_FLASH_Init();
 8003ff0:	f000 fe6c 	bl	8004ccc <SPI_FLASH_Init>
//  dump_log_entries();
  meas_data_log_init(); // /* 부팅 시 이전 로그 위치 복원 */
 8003ff4:	f000 fc14 	bl	8004820 <meas_data_log_init>
//  dump_flash_status();
//  dump_all_flash_data();


  HAL_GPIO_WritePin(Regulator_En_GPIO_Port, Regulator_En_Pin, GPIO_PIN_SET); // 핀 High 상태로 출력
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	482d      	ldr	r0, [pc, #180]	@ (80040b4 <main+0x134>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	0019      	movs	r1, r3
 8004002:	f003 fc7c 	bl	80078fe <HAL_GPIO_WritePin>
//  Log_Erase();
//  HAL_Delay(50);
  HAL_ADC_Start(&hadc1);
 8004006:	4b2c      	ldr	r3, [pc, #176]	@ (80040b8 <main+0x138>)
 8004008:	0018      	movs	r0, r3
 800400a:	f002 f915 	bl	8006238 <HAL_ADC_Start>
  HAL_COMP_Start(&hcomp1);
 800400e:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <main+0x13c>)
 8004010:	0018      	movs	r0, r3
 8004012:	f003 f8a1 	bl	8007158 <HAL_COMP_Start>
  uint32_t prevTick = HAL_GetTick();
 8004016:	f001 fd1f 	bl	8005a58 <HAL_GetTick>
 800401a:	0003      	movs	r3, r0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t Tick_Save = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  Disable_RTC_OneShotTimer(&hrtc);
 8004022:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <main+0x12c>)
 8004024:	0018      	movs	r0, r3
 8004026:	f7ff fdc5 	bl	8003bb4 <Disable_RTC_OneShotTimer>
  char *msg = "Boot OK\r\n";
 800402a:	4b25      	ldr	r3, [pc, #148]	@ (80040c0 <main+0x140>)
 800402c:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	0018      	movs	r0, r3
 8004032:	f7fc f869 	bl	8000108 <strlen>
 8004036:	0003      	movs	r3, r0
 8004038:	b29a      	uxth	r2, r3
 800403a:	2301      	movs	r3, #1
 800403c:	425b      	negs	r3, r3
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	4820      	ldr	r0, [pc, #128]	@ (80040c4 <main+0x144>)
 8004042:	f009 f933 	bl	800d2ac <HAL_UART_Transmit>

  uint8_t buf[8];
  read_flash_to_buffer(0, buf, sizeof(buf));
 8004046:	1d3b      	adds	r3, r7, #4
 8004048:	2208      	movs	r2, #8
 800404a:	0019      	movs	r1, r3
 800404c:	2000      	movs	r0, #0
 800404e:	f7ff fea5 	bl	8003d9c <read_flash_to_buffer>
  uart3_dump_hex(buf, sizeof(buf));
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	2108      	movs	r1, #8
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff feb0 	bl	8003dbc <uart3_dump_hex>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - prevTick >= 1000)
 800405c:	f001 fcfc 	bl	8005a58 <HAL_GetTick>
 8004060:	0002      	movs	r2, r0
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	1ad2      	subs	r2, r2, r3
 8004066:	23fa      	movs	r3, #250	@ 0xfa
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	429a      	cmp	r2, r3
 800406c:	d3f6      	bcc.n	800405c <main+0xdc>
	  	  	  {
		      Press_Action();
 800406e:	f7ff ff01 	bl	8003e74 <Press_Action>
	  		  HAL_GPIO_WritePin(Regulator_En_GPIO_Port, Regulator_En_Pin, GPIO_PIN_SET);
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	480f      	ldr	r0, [pc, #60]	@ (80040b4 <main+0x134>)
 8004078:	2201      	movs	r2, #1
 800407a:	0019      	movs	r1, r3
 800407c:	f003 fc3f 	bl	80078fe <HAL_GPIO_WritePin>
	  		  Read_Temp();// HIGH
 8004080:	f7ff fc04 	bl	800388c <Read_Temp>
	  		  Write_buffer();
 8004084:	f7ff fcce 	bl	8003a24 <Write_buffer>

	  	  	    if (Tick_Save>58){
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b3a      	cmp	r3, #58	@ 0x3a
 800408c:	d903      	bls.n	8004096 <main+0x116>

//	  	  	    meas_data_log_erase();
	  	  	    Get_in_Shutdown();
 800408e:	f7ff fe2d 	bl	8003cec <Get_in_Shutdown>
	  	  	    Tick_Save = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
	  //	  	    Write_Log();
//	  	  	  char uart_buf[50];
//	  	  	  int len = sprintf(uart_buf, "comp1_count = %lu\r\n", comp1_count);
//	  	  	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);

	  	  	 	comp1_count = 0;
 8004096:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <main+0x148>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
	  	  	 	Tick_Save++;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3301      	adds	r3, #1
 80040a0:	613b      	str	r3, [r7, #16]
	  	  	 	prevTick = HAL_GetTick();
 80040a2:	f001 fcd9 	bl	8005a58 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	617b      	str	r3, [r7, #20]
	  if (HAL_GetTick() - prevTick >= 1000)
 80040aa:	e7d7      	b.n	800405c <main+0xdc>
 80040ac:	2000031c 	.word	0x2000031c
 80040b0:	000032f2 	.word	0x000032f2
 80040b4:	50000400 	.word	0x50000400
 80040b8:	200001f4 	.word	0x200001f4
 80040bc:	20000258 	.word	0x20000258
 80040c0:	08011f08 	.word	0x08011f08
 80040c4:	200003b0 	.word	0x200003b0
 80040c8:	20000720 	.word	0x20000720

080040cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b09f      	sub	sp, #124	@ 0x7c
 80040d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d2:	242c      	movs	r4, #44	@ 0x2c
 80040d4:	193b      	adds	r3, r7, r4
 80040d6:	0018      	movs	r0, r3
 80040d8:	234c      	movs	r3, #76	@ 0x4c
 80040da:	001a      	movs	r2, r3
 80040dc:	2100      	movs	r1, #0
 80040de:	f00b fbe9 	bl	800f8b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e2:	231c      	movs	r3, #28
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	0018      	movs	r0, r3
 80040e8:	2310      	movs	r3, #16
 80040ea:	001a      	movs	r2, r3
 80040ec:	2100      	movs	r1, #0
 80040ee:	f00b fbe1 	bl	800f8b4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	0018      	movs	r0, r3
 80040f6:	2318      	movs	r3, #24
 80040f8:	001a      	movs	r2, r3
 80040fa:	2100      	movs	r1, #0
 80040fc:	f00b fbda 	bl	800f8b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004100:	2380      	movs	r3, #128	@ 0x80
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	0018      	movs	r0, r3
 8004106:	f005 fcd5 	bl	8009ab4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800410a:	f005 fc8b 	bl	8009a24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800410e:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <SystemClock_Config+0x108>)
 8004110:	2390      	movs	r3, #144	@ 0x90
 8004112:	58d3      	ldr	r3, [r2, r3]
 8004114:	492f      	ldr	r1, [pc, #188]	@ (80041d4 <SystemClock_Config+0x108>)
 8004116:	2218      	movs	r2, #24
 8004118:	4393      	bics	r3, r2
 800411a:	2290      	movs	r2, #144	@ 0x90
 800411c:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800411e:	193b      	adds	r3, r7, r4
 8004120:	2226      	movs	r2, #38	@ 0x26
 8004122:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004124:	193b      	adds	r3, r7, r4
 8004126:	2281      	movs	r2, #129	@ 0x81
 8004128:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800412a:	193b      	adds	r3, r7, r4
 800412c:	2280      	movs	r2, #128	@ 0x80
 800412e:	0052      	lsls	r2, r2, #1
 8004130:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004132:	193b      	adds	r3, r7, r4
 8004134:	2240      	movs	r2, #64	@ 0x40
 8004136:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004138:	193b      	adds	r3, r7, r4
 800413a:	2201      	movs	r2, #1
 800413c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800413e:	193b      	adds	r3, r7, r4
 8004140:	2200      	movs	r2, #0
 8004142:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004144:	193b      	adds	r3, r7, r4
 8004146:	0018      	movs	r0, r3
 8004148:	f005 fd3c 	bl	8009bc4 <HAL_RCC_OscConfig>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d001      	beq.n	8004154 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004150:	f000 fb60 	bl	8004814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004154:	211c      	movs	r1, #28
 8004156:	187b      	adds	r3, r7, r1
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800415c:	187b      	adds	r3, r7, r1
 800415e:	2201      	movs	r2, #1
 8004160:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004162:	187b      	adds	r3, r7, r1
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004168:	187b      	adds	r3, r7, r1
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800416e:	187b      	adds	r3, r7, r1
 8004170:	2101      	movs	r1, #1
 8004172:	0018      	movs	r0, r3
 8004174:	f006 f950 	bl	800a418 <HAL_RCC_ClockConfig>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d001      	beq.n	8004180 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800417c:	f000 fb4a 	bl	8004814 <Error_Handler>
  }

  /** Enable the CRS clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8004180:	4b14      	ldr	r3, [pc, #80]	@ (80041d4 <SystemClock_Config+0x108>)
 8004182:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004184:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <SystemClock_Config+0x108>)
 8004186:	2180      	movs	r1, #128	@ 0x80
 8004188:	0249      	lsls	r1, r1, #9
 800418a:	430a      	orrs	r2, r1
 800418c:	659a      	str	r2, [r3, #88]	@ 0x58
 800418e:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <SystemClock_Config+0x108>)
 8004190:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	4013      	ands	r3, r2
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	2280      	movs	r2, #128	@ 0x80
 80041a6:	0552      	lsls	r2, r2, #21
 80041a8:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	4a09      	ldr	r2, [pc, #36]	@ (80041d8 <SystemClock_Config+0x10c>)
 80041b4:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	2222      	movs	r2, #34	@ 0x22
 80041ba:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	2220      	movs	r2, #32
 80041c0:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	0018      	movs	r0, r3
 80041c6:	f007 fb6d 	bl	800b8a4 <HAL_RCCEx_CRSConfig>
}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b01f      	add	sp, #124	@ 0x7c
 80041d0:	bd90      	pop	{r4, r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	40021000 	.word	0x40021000
 80041d8:	000005b7 	.word	0x000005b7

080041dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	0018      	movs	r0, r3
 80041e6:	230c      	movs	r3, #12
 80041e8:	001a      	movs	r2, r3
 80041ea:	2100      	movs	r1, #0
 80041ec:	f00b fb62 	bl	800f8b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80041f0:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 80041f2:	4a2e      	ldr	r2, [pc, #184]	@ (80042ac <MX_ADC1_Init+0xd0>)
 80041f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80041f6:	4b2c      	ldr	r3, [pc, #176]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 80041f8:	22c0      	movs	r2, #192	@ 0xc0
 80041fa:	0612      	lsls	r2, r2, #24
 80041fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041fe:	4b2a      	ldr	r3, [pc, #168]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004204:	4b28      	ldr	r3, [pc, #160]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004206:	2200      	movs	r2, #0
 8004208:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800420a:	4b27      	ldr	r3, [pc, #156]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 800420c:	2200      	movs	r2, #0
 800420e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004210:	4b25      	ldr	r3, [pc, #148]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004212:	2204      	movs	r2, #4
 8004214:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004216:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004218:	2200      	movs	r2, #0
 800421a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800421c:	4b22      	ldr	r3, [pc, #136]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 800421e:	2200      	movs	r2, #0
 8004220:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004222:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004224:	2200      	movs	r2, #0
 8004226:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004228:	4b1f      	ldr	r3, [pc, #124]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 800422a:	2201      	movs	r2, #1
 800422c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800422e:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004230:	2220      	movs	r2, #32
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004236:	4b1c      	ldr	r3, [pc, #112]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004238:	2200      	movs	r2, #0
 800423a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800423c:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004242:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004244:	222c      	movs	r2, #44	@ 0x2c
 8004246:	2100      	movs	r1, #0
 8004248:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800424a:	4b17      	ldr	r3, [pc, #92]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004250:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004252:	2200      	movs	r2, #0
 8004254:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004256:	4b14      	ldr	r3, [pc, #80]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004258:	2200      	movs	r2, #0
 800425a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 800425e:	223c      	movs	r2, #60	@ 0x3c
 8004260:	2100      	movs	r1, #0
 8004262:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004264:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004266:	2200      	movs	r2, #0
 8004268:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800426a:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 800426c:	0018      	movs	r0, r3
 800426e:	f001 fd9f 	bl	8005db0 <HAL_ADC_Init>
 8004272:	1e03      	subs	r3, r0, #0
 8004274:	d001      	beq.n	800427a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8004276:	f000 facd 	bl	8004814 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	2200      	movs	r2, #0
 8004284:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800428c:	1d3a      	adds	r2, r7, #4
 800428e:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <MX_ADC1_Init+0xcc>)
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f002 fa6c 	bl	8006770 <HAL_ADC_ConfigChannel>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800429c:	f000 faba 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200001f4 	.word	0x200001f4
 80042ac:	40012400 	.word	0x40012400

080042b0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042b6:	4a15      	ldr	r2, [pc, #84]	@ (800430c <MX_COMP1_Init+0x5c>)
 80042b8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80042ba:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042bc:	2280      	movs	r2, #128	@ 0x80
 80042be:	0052      	lsls	r2, r2, #1
 80042c0:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80042c2:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80042c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80042ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042dc:	2200      	movs	r2, #0
 80042de:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80042e6:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80042f2:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <MX_COMP1_Init+0x58>)
 80042f4:	0018      	movs	r0, r3
 80042f6:	f002 fd99 	bl	8006e2c <HAL_COMP_Init>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d001      	beq.n	8004302 <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 80042fe:	f000 fa89 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20000258 	.word	0x20000258
 800430c:	40010200 	.word	0x40010200

08004310 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8004314:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <MX_LCD_Init+0x64>)
 8004316:	4a18      	ldr	r2, [pc, #96]	@ (8004378 <MX_LCD_Init+0x68>)
 8004318:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800431a:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <MX_LCD_Init+0x64>)
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8004320:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <MX_LCD_Init+0x64>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8004326:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <MX_LCD_Init+0x64>)
 8004328:	220c      	movs	r2, #12
 800432a:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800432c:	4b11      	ldr	r3, [pc, #68]	@ (8004374 <MX_LCD_Init+0x64>)
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <MX_LCD_Init+0x64>)
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <MX_LCD_Init+0x64>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <MX_LCD_Init+0x64>)
 8004340:	2200      	movs	r2, #0
 8004342:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <MX_LCD_Init+0x64>)
 8004346:	2200      	movs	r2, #0
 8004348:	621a      	str	r2, [r3, #32]
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800434a:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <MX_LCD_Init+0x64>)
 800434c:	2200      	movs	r2, #0
 800434e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8004350:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <MX_LCD_Init+0x64>)
 8004352:	2200      	movs	r2, #0
 8004354:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <MX_LCD_Init+0x64>)
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <MX_LCD_Init+0x64>)
 800435e:	0018      	movs	r0, r3
 8004360:	f003 fb1e 	bl	80079a0 <HAL_LCD_Init>
 8004364:	1e03      	subs	r3, r0, #0
 8004366:	d001      	beq.n	800436c <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8004368:	f000 fa54 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800436c:	46c0      	nop			@ (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	20000288 	.word	0x20000288
 8004378:	40002400 	.word	0x40002400

0800437c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8004380:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 8004382:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <MX_LPTIM1_Init+0x5c>)
 8004384:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004386:	4b13      	ldr	r3, [pc, #76]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 8004388:	2200      	movs	r2, #0
 800438a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800438c:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004392:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 8004394:	4a11      	ldr	r2, [pc, #68]	@ (80043dc <MX_LPTIM1_Init+0x60>)
 8004396:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 32767;
 8004398:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 800439a:	4a11      	ldr	r2, [pc, #68]	@ (80043e0 <MX_LPTIM1_Init+0x64>)
 800439c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80043b0:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80043b6:	4b07      	ldr	r3, [pc, #28]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <MX_LPTIM1_Init+0x58>)
 80043be:	0018      	movs	r0, r3
 80043c0:	f003 fbf8 	bl	8007bb4 <HAL_LPTIM_Init>
 80043c4:	1e03      	subs	r3, r0, #0
 80043c6:	d001      	beq.n	80043cc <MX_LPTIM1_Init+0x50>
  {
    Error_Handler();
 80043c8:	f000 fa24 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	200002c4 	.word	0x200002c4
 80043d8:	40007c00 	.word	0x40007c00
 80043dc:	0000ffff 	.word	0x0000ffff
 80043e0:	00007fff 	.word	0x00007fff

080043e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	0018      	movs	r0, r3
 80043ee:	2314      	movs	r3, #20
 80043f0:	001a      	movs	r2, r3
 80043f2:	2100      	movs	r1, #0
 80043f4:	f00b fa5e 	bl	800f8b4 <memset>
  RTC_DateTypeDef sDate = {0};
 80043f8:	003b      	movs	r3, r7
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80043fe:	4b33      	ldr	r3, [pc, #204]	@ (80044cc <MX_RTC_Init+0xe8>)
 8004400:	4a33      	ldr	r2, [pc, #204]	@ (80044d0 <MX_RTC_Init+0xec>)
 8004402:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004404:	4b31      	ldr	r3, [pc, #196]	@ (80044cc <MX_RTC_Init+0xe8>)
 8004406:	2200      	movs	r2, #0
 8004408:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800440a:	4b30      	ldr	r3, [pc, #192]	@ (80044cc <MX_RTC_Init+0xe8>)
 800440c:	227f      	movs	r2, #127	@ 0x7f
 800440e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004410:	4b2e      	ldr	r3, [pc, #184]	@ (80044cc <MX_RTC_Init+0xe8>)
 8004412:	22ff      	movs	r2, #255	@ 0xff
 8004414:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004416:	4b2d      	ldr	r3, [pc, #180]	@ (80044cc <MX_RTC_Init+0xe8>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800441c:	4b2b      	ldr	r3, [pc, #172]	@ (80044cc <MX_RTC_Init+0xe8>)
 800441e:	2200      	movs	r2, #0
 8004420:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004422:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <MX_RTC_Init+0xe8>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004428:	4b28      	ldr	r3, [pc, #160]	@ (80044cc <MX_RTC_Init+0xe8>)
 800442a:	2280      	movs	r2, #128	@ 0x80
 800442c:	05d2      	lsls	r2, r2, #23
 800442e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8004430:	4b26      	ldr	r3, [pc, #152]	@ (80044cc <MX_RTC_Init+0xe8>)
 8004432:	2200      	movs	r2, #0
 8004434:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8004436:	4b25      	ldr	r3, [pc, #148]	@ (80044cc <MX_RTC_Init+0xe8>)
 8004438:	2200      	movs	r2, #0
 800443a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800443c:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <MX_RTC_Init+0xe8>)
 800443e:	0018      	movs	r0, r3
 8004440:	f007 fa76 	bl	800b930 <HAL_RTC_Init>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d001      	beq.n	800444c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8004448:	f000 f9e4 	bl	8004814 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	2200      	movs	r2, #0
 8004456:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8004458:	1d3b      	adds	r3, r7, #4
 800445a:	2200      	movs	r2, #0
 800445c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	2200      	movs	r2, #0
 8004462:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004464:	1d3b      	adds	r3, r7, #4
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800446a:	1d39      	adds	r1, r7, #4
 800446c:	4b17      	ldr	r3, [pc, #92]	@ (80044cc <MX_RTC_Init+0xe8>)
 800446e:	2201      	movs	r2, #1
 8004470:	0018      	movs	r0, r3
 8004472:	f007 fb03 	bl	800ba7c <HAL_RTC_SetTime>
 8004476:	1e03      	subs	r3, r0, #0
 8004478:	d001      	beq.n	800447e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800447a:	f000 f9cb 	bl	8004814 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800447e:	003b      	movs	r3, r7
 8004480:	2202      	movs	r2, #2
 8004482:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 8004484:	003b      	movs	r3, r7
 8004486:	2205      	movs	r2, #5
 8004488:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x27;
 800448a:	003b      	movs	r3, r7
 800448c:	2227      	movs	r2, #39	@ 0x27
 800448e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 8004490:	003b      	movs	r3, r7
 8004492:	2225      	movs	r2, #37	@ 0x25
 8004494:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004496:	0039      	movs	r1, r7
 8004498:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <MX_RTC_Init+0xe8>)
 800449a:	2201      	movs	r2, #1
 800449c:	0018      	movs	r0, r3
 800449e:	f007 fc11 	bl	800bcc4 <HAL_RTC_SetDate>
 80044a2:	1e03      	subs	r3, r0, #0
 80044a4:	d001      	beq.n	80044aa <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80044a6:	f000 f9b5 	bl	8004814 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 360, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 360) != HAL_OK)
 80044aa:	23b4      	movs	r3, #180	@ 0xb4
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	22b4      	movs	r2, #180	@ 0xb4
 80044b0:	0051      	lsls	r1, r2, #1
 80044b2:	4806      	ldr	r0, [pc, #24]	@ (80044cc <MX_RTC_Init+0xe8>)
 80044b4:	2204      	movs	r2, #4
 80044b6:	f007 fd91 	bl	800bfdc <HAL_RTCEx_SetWakeUpTimer_IT>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d001      	beq.n	80044c2 <MX_RTC_Init+0xde>
  {
    Error_Handler();
 80044be:	f000 f9a9 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b006      	add	sp, #24
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	2000031c 	.word	0x2000031c
 80044d0:	40002800 	.word	0x40002800

080044d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <MX_SPI3_Init+0x74>)
 80044da:	4a1c      	ldr	r2, [pc, #112]	@ (800454c <MX_SPI3_Init+0x78>)
 80044dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80044de:	4b1a      	ldr	r3, [pc, #104]	@ (8004548 <MX_SPI3_Init+0x74>)
 80044e0:	2282      	movs	r2, #130	@ 0x82
 80044e2:	0052      	lsls	r2, r2, #1
 80044e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80044e6:	4b18      	ldr	r3, [pc, #96]	@ (8004548 <MX_SPI3_Init+0x74>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80044ec:	4b16      	ldr	r3, [pc, #88]	@ (8004548 <MX_SPI3_Init+0x74>)
 80044ee:	22e0      	movs	r2, #224	@ 0xe0
 80044f0:	00d2      	lsls	r2, r2, #3
 80044f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f4:	4b14      	ldr	r3, [pc, #80]	@ (8004548 <MX_SPI3_Init+0x74>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044fa:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <MX_SPI3_Init+0x74>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004500:	4b11      	ldr	r3, [pc, #68]	@ (8004548 <MX_SPI3_Init+0x74>)
 8004502:	2280      	movs	r2, #128	@ 0x80
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004508:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <MX_SPI3_Init+0x74>)
 800450a:	2200      	movs	r2, #0
 800450c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800450e:	4b0e      	ldr	r3, [pc, #56]	@ (8004548 <MX_SPI3_Init+0x74>)
 8004510:	2200      	movs	r2, #0
 8004512:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004514:	4b0c      	ldr	r3, [pc, #48]	@ (8004548 <MX_SPI3_Init+0x74>)
 8004516:	2200      	movs	r2, #0
 8004518:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800451a:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <MX_SPI3_Init+0x74>)
 800451c:	2200      	movs	r2, #0
 800451e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004520:	4b09      	ldr	r3, [pc, #36]	@ (8004548 <MX_SPI3_Init+0x74>)
 8004522:	2207      	movs	r2, #7
 8004524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004526:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <MX_SPI3_Init+0x74>)
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800452c:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <MX_SPI3_Init+0x74>)
 800452e:	2208      	movs	r2, #8
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004532:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <MX_SPI3_Init+0x74>)
 8004534:	0018      	movs	r0, r3
 8004536:	f007 ff05 	bl	800c344 <HAL_SPI_Init>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d001      	beq.n	8004542 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800453e:	f000 f969 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	2000034c 	.word	0x2000034c
 800454c:	40003c00 	.word	0x40003c00

08004550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004554:	4b23      	ldr	r3, [pc, #140]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 8004556:	4a24      	ldr	r2, [pc, #144]	@ (80045e8 <MX_USART3_UART_Init+0x98>)
 8004558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800455a:	4b22      	ldr	r3, [pc, #136]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 800455c:	22e1      	movs	r2, #225	@ 0xe1
 800455e:	0252      	lsls	r2, r2, #9
 8004560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004562:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004568:	4b1e      	ldr	r3, [pc, #120]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800456e:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 8004570:	2200      	movs	r2, #0
 8004572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004574:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 8004576:	220c      	movs	r2, #12
 8004578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800457a:	4b1a      	ldr	r3, [pc, #104]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 800457c:	2200      	movs	r2, #0
 800457e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004580:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 8004582:	2200      	movs	r2, #0
 8004584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004586:	4b17      	ldr	r3, [pc, #92]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 8004588:	2200      	movs	r2, #0
 800458a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800458c:	4b15      	ldr	r3, [pc, #84]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 800458e:	2200      	movs	r2, #0
 8004590:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004592:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 8004594:	2200      	movs	r2, #0
 8004596:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8004598:	4b12      	ldr	r3, [pc, #72]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 800459a:	0018      	movs	r0, r3
 800459c:	f008 fde8 	bl	800d170 <HAL_HalfDuplex_Init>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d001      	beq.n	80045a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80045a4:	f000 f936 	bl	8004814 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045a8:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 80045aa:	2100      	movs	r1, #0
 80045ac:	0018      	movs	r0, r3
 80045ae:	f009 fb61 	bl	800dc74 <HAL_UARTEx_SetTxFifoThreshold>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d001      	beq.n	80045ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80045b6:	f000 f92d 	bl	8004814 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045ba:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 80045bc:	2100      	movs	r1, #0
 80045be:	0018      	movs	r0, r3
 80045c0:	f009 fb98 	bl	800dcf4 <HAL_UARTEx_SetRxFifoThreshold>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80045c8:	f000 f924 	bl	8004814 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80045cc:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <MX_USART3_UART_Init+0x94>)
 80045ce:	0018      	movs	r0, r3
 80045d0:	f009 fb16 	bl	800dc00 <HAL_UARTEx_DisableFifoMode>
 80045d4:	1e03      	subs	r3, r0, #0
 80045d6:	d001      	beq.n	80045dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80045d8:	f000 f91c 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	200003b0 	.word	0x200003b0
 80045e8:	40004800 	.word	0x40004800

080045ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80045f0:	4b11      	ldr	r3, [pc, #68]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 80045f2:	4a12      	ldr	r2, [pc, #72]	@ (800463c <MX_USB_PCD_Init+0x50>)
 80045f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80045f6:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 80045f8:	2208      	movs	r2, #8
 80045fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80045fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 80045fe:	2202      	movs	r2, #2
 8004600:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004602:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 8004604:	2202      	movs	r2, #2
 8004606:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 800460a:	2200      	movs	r2, #0
 800460c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800460e:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 8004610:	2200      	movs	r2, #0
 8004612:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 8004616:	2200      	movs	r2, #0
 8004618:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800461a:	4b07      	ldr	r3, [pc, #28]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 800461c:	2200      	movs	r2, #0
 800461e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8004620:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <MX_USB_PCD_Init+0x4c>)
 8004622:	0018      	movs	r0, r3
 8004624:	f003 ff42 	bl	80084ac <HAL_PCD_Init>
 8004628:	1e03      	subs	r3, r0, #0
 800462a:	d001      	beq.n	8004630 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800462c:	f000 f8f2 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	20000444 	.word	0x20000444
 800463c:	40005c00 	.word	0x40005c00

08004640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b08b      	sub	sp, #44	@ 0x2c
 8004644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004646:	2414      	movs	r4, #20
 8004648:	193b      	adds	r3, r7, r4
 800464a:	0018      	movs	r0, r3
 800464c:	2314      	movs	r3, #20
 800464e:	001a      	movs	r2, r3
 8004650:	2100      	movs	r1, #0
 8004652:	f00b f92f 	bl	800f8b4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004656:	4b5e      	ldr	r3, [pc, #376]	@ (80047d0 <MX_GPIO_Init+0x190>)
 8004658:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800465a:	4b5d      	ldr	r3, [pc, #372]	@ (80047d0 <MX_GPIO_Init+0x190>)
 800465c:	2104      	movs	r1, #4
 800465e:	430a      	orrs	r2, r1
 8004660:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004662:	4b5b      	ldr	r3, [pc, #364]	@ (80047d0 <MX_GPIO_Init+0x190>)
 8004664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004666:	2204      	movs	r2, #4
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	4b58      	ldr	r3, [pc, #352]	@ (80047d0 <MX_GPIO_Init+0x190>)
 8004670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004672:	4b57      	ldr	r3, [pc, #348]	@ (80047d0 <MX_GPIO_Init+0x190>)
 8004674:	2101      	movs	r1, #1
 8004676:	430a      	orrs	r2, r1
 8004678:	64da      	str	r2, [r3, #76]	@ 0x4c
 800467a:	4b55      	ldr	r3, [pc, #340]	@ (80047d0 <MX_GPIO_Init+0x190>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467e:	2201      	movs	r2, #1
 8004680:	4013      	ands	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004686:	4b52      	ldr	r3, [pc, #328]	@ (80047d0 <MX_GPIO_Init+0x190>)
 8004688:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800468a:	4b51      	ldr	r3, [pc, #324]	@ (80047d0 <MX_GPIO_Init+0x190>)
 800468c:	2102      	movs	r1, #2
 800468e:	430a      	orrs	r2, r1
 8004690:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004692:	4b4f      	ldr	r3, [pc, #316]	@ (80047d0 <MX_GPIO_Init+0x190>)
 8004694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004696:	2202      	movs	r2, #2
 8004698:	4013      	ands	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800469e:	4b4c      	ldr	r3, [pc, #304]	@ (80047d0 <MX_GPIO_Init+0x190>)
 80046a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046a2:	4b4b      	ldr	r3, [pc, #300]	@ (80047d0 <MX_GPIO_Init+0x190>)
 80046a4:	2108      	movs	r1, #8
 80046a6:	430a      	orrs	r2, r1
 80046a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80046aa:	4b49      	ldr	r3, [pc, #292]	@ (80047d0 <MX_GPIO_Init+0x190>)
 80046ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ae:	2208      	movs	r2, #8
 80046b0:	4013      	ands	r3, r2
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Flash_CS_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80046b6:	23a0      	movs	r3, #160	@ 0xa0
 80046b8:	05db      	lsls	r3, r3, #23
 80046ba:	2200      	movs	r2, #0
 80046bc:	2130      	movs	r1, #48	@ 0x30
 80046be:	0018      	movs	r0, r3
 80046c0:	f003 f91d 	bl	80078fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Regulator_En_Pin|Middle_Temp_GND_Pin, GPIO_PIN_RESET);
 80046c4:	2388      	movs	r3, #136	@ 0x88
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4842      	ldr	r0, [pc, #264]	@ (80047d4 <MX_GPIO_Init+0x194>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	0019      	movs	r1, r3
 80046ce:	f003 f916 	bl	80078fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, GPIO_PIN_RESET);
 80046d2:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <MX_GPIO_Init+0x198>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	2104      	movs	r1, #4
 80046d8:	0018      	movs	r0, r3
 80046da:	f003 f910 	bl	80078fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80046de:	193b      	adds	r3, r7, r4
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046e4:	193b      	adds	r3, r7, r4
 80046e6:	2284      	movs	r2, #132	@ 0x84
 80046e8:	0392      	lsls	r2, r2, #14
 80046ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ec:	193b      	adds	r3, r7, r4
 80046ee:	2201      	movs	r2, #1
 80046f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80046f2:	193a      	adds	r2, r7, r4
 80046f4:	23a0      	movs	r3, #160	@ 0xa0
 80046f6:	05db      	lsls	r3, r3, #23
 80046f8:	0011      	movs	r1, r2
 80046fa:	0018      	movs	r0, r3
 80046fc:	f002 fe8e 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8004700:	193b      	adds	r3, r7, r4
 8004702:	2210      	movs	r2, #16
 8004704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004706:	193b      	adds	r3, r7, r4
 8004708:	2201      	movs	r2, #1
 800470a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800470c:	193b      	adds	r3, r7, r4
 800470e:	2202      	movs	r2, #2
 8004710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	193b      	adds	r3, r7, r4
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 8004718:	193a      	adds	r2, r7, r4
 800471a:	23a0      	movs	r3, #160	@ 0xa0
 800471c:	05db      	lsls	r3, r3, #23
 800471e:	0011      	movs	r1, r2
 8004720:	0018      	movs	r0, r3
 8004722:	f002 fe7b 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004726:	193b      	adds	r3, r7, r4
 8004728:	2220      	movs	r2, #32
 800472a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800472c:	193b      	adds	r3, r7, r4
 800472e:	2201      	movs	r2, #1
 8004730:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	193b      	adds	r3, r7, r4
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004738:	193b      	adds	r3, r7, r4
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473e:	193a      	adds	r2, r7, r4
 8004740:	23a0      	movs	r3, #160	@ 0xa0
 8004742:	05db      	lsls	r3, r3, #23
 8004744:	0011      	movs	r1, r2
 8004746:	0018      	movs	r0, r3
 8004748:	f002 fe68 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pin : Regulator_En_Pin */
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 800474c:	0021      	movs	r1, r4
 800474e:	187b      	adds	r3, r7, r1
 8004750:	2280      	movs	r2, #128	@ 0x80
 8004752:	00d2      	lsls	r2, r2, #3
 8004754:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004756:	000c      	movs	r4, r1
 8004758:	193b      	adds	r3, r7, r4
 800475a:	2201      	movs	r2, #1
 800475c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800475e:	193b      	adds	r3, r7, r4
 8004760:	2202      	movs	r2, #2
 8004762:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004764:	193b      	adds	r3, r7, r4
 8004766:	2200      	movs	r2, #0
 8004768:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 800476a:	193b      	adds	r3, r7, r4
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <MX_GPIO_Init+0x194>)
 800476e:	0019      	movs	r1, r3
 8004770:	0010      	movs	r0, r2
 8004772:	f002 fe53 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pin : Low_Temp_GND_Pin */
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 8004776:	193b      	adds	r3, r7, r4
 8004778:	2204      	movs	r2, #4
 800477a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800477c:	193b      	adds	r3, r7, r4
 800477e:	2201      	movs	r2, #1
 8004780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004782:	193b      	adds	r3, r7, r4
 8004784:	2201      	movs	r2, #1
 8004786:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004788:	193b      	adds	r3, r7, r4
 800478a:	2200      	movs	r2, #0
 800478c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 800478e:	193b      	adds	r3, r7, r4
 8004790:	4a11      	ldr	r2, [pc, #68]	@ (80047d8 <MX_GPIO_Init+0x198>)
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f002 fe41 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pin : Middle_Temp_GND_Pin */
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 800479a:	0021      	movs	r1, r4
 800479c:	187b      	adds	r3, r7, r1
 800479e:	2240      	movs	r2, #64	@ 0x40
 80047a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a2:	187b      	adds	r3, r7, r1
 80047a4:	2201      	movs	r2, #1
 80047a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	2201      	movs	r2, #1
 80047ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ae:	187b      	adds	r3, r7, r1
 80047b0:	2200      	movs	r2, #0
 80047b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	4a07      	ldr	r2, [pc, #28]	@ (80047d4 <MX_GPIO_Init+0x194>)
 80047b8:	0019      	movs	r1, r3
 80047ba:	0010      	movs	r0, r2
 80047bc:	f002 fe2e 	bl	800741c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80047c0:	2005      	movs	r0, #5
 80047c2:	f002 fdfe 	bl	80073c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b00b      	add	sp, #44	@ 0x2c
 80047cc:	bd90      	pop	{r4, r7, pc}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	40021000 	.word	0x40021000
 80047d4:	50000400 	.word	0x50000400
 80047d8:	50000c00 	.word	0x50000c00

080047dc <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
    // User_Button_Pin 이 PA0 이면 이렇게 호출
    HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80047e0:	2001      	movs	r0, #1
 80047e2:	f003 f8a9 	bl	8007938 <HAL_GPIO_EXTI_IRQHandler>
}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	0002      	movs	r2, r0
 80047f4:	1dbb      	adds	r3, r7, #6
 80047f6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_0)
 80047f8:	1dbb      	adds	r3, r7, #6
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d102      	bne.n	8004806 <HAL_GPIO_EXTI_Falling_Callback+0x1a>
	{
		button_flag = true;
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
	}
}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	20000738 	.word	0x20000738

08004814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004818:	b672      	cpsid	i
}
 800481a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800481c:	46c0      	nop			@ (mov r8, r8)
 800481e:	e7fd      	b.n	800481c <Error_Handler+0x8>

08004820 <meas_data_log_init>:
/**
 * @brief 부팅 시 Flash를 페이지 단위로 스캔해
 *        첫 0xFF 바이트 위치를 log_write_offset에 저장
 */
void meas_data_log_init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
    uint8_t buf[ENTRY_SIZE];
    uint32_t offset = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]

    // 0, ENTRY_SIZE, 2*ENTRY_SIZE ... 간격으로 검사
    while (offset < LOG_MAX_SIZE)
 800482a:	e025      	b.n	8004878 <meas_data_log_init+0x58>
    {
        meas_data_log_read(offset, buf, ENTRY_SIZE);
 800482c:	1d39      	adds	r1, r7, #4
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2210      	movs	r2, #16
 8004832:	0018      	movs	r0, r3
 8004834:	f000 f86e 	bl	8004914 <meas_data_log_read>
        bool all_ff = true;
 8004838:	231b      	movs	r3, #27
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < ENTRY_SIZE; i++)
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e00d      	b.n	8004862 <meas_data_log_init+0x42>
            if (buf[i] != 0xFF) { all_ff = false; break; }
 8004846:	1d3a      	adds	r2, r7, #4
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	18d3      	adds	r3, r2, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2bff      	cmp	r3, #255	@ 0xff
 8004850:	d004      	beq.n	800485c <meas_data_log_init+0x3c>
 8004852:	231b      	movs	r3, #27
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e005      	b.n	8004868 <meas_data_log_init+0x48>
        for (uint32_t i = 0; i < ENTRY_SIZE; i++)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3301      	adds	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b0f      	cmp	r3, #15
 8004866:	d9ee      	bls.n	8004846 <meas_data_log_init+0x26>
        if (all_ff)  {
 8004868:	231b      	movs	r3, #27
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d108      	bne.n	8004884 <meas_data_log_init+0x64>
        	break;
        }
        offset += ENTRY_SIZE;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3310      	adds	r3, #16
 8004876:	61fb      	str	r3, [r7, #28]
    while (offset < LOG_MAX_SIZE)
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	035b      	lsls	r3, r3, #13
 800487e:	429a      	cmp	r2, r3
 8004880:	d3d4      	bcc.n	800482c <meas_data_log_init+0xc>
 8004882:	e000      	b.n	8004886 <meas_data_log_init+0x66>
        	break;
 8004884:	46c0      	nop			@ (mov r8, r8)
        }
            // 스캔이 멈춘 지점이 바로 다음에 쓸 위치
            log_write_offset = offset;
 8004886:	4b03      	ldr	r3, [pc, #12]	@ (8004894 <meas_data_log_init+0x74>)
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	46c0      	nop			@ (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	b008      	add	sp, #32
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000073c 	.word	0x2000073c

08004898 <meas_data_log_write>:
void meas_data_log_write(const uint8_t *data, size_t len)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]

    uint32_t addr      = LOG_BASE_ADDR + log_write_offset;
 80048a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <meas_data_log_write+0x78>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	61fb      	str	r3, [r7, #28]
    size_t   remaining = len;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
    const uint8_t *p   = data;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	617b      	str	r3, [r7, #20]

    /* 페이지 단위 Program */
    while (remaining) {
 80048b0:	e026      	b.n	8004900 <meas_data_log_write+0x68>
        uint32_t off = addr % LOG_PAGE_SIZE;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	22ff      	movs	r2, #255	@ 0xff
 80048b6:	4013      	ands	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
        uint32_t chunk = LOG_PAGE_SIZE - off;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2280      	movs	r2, #128	@ 0x80
 80048be:	0052      	lsls	r2, r2, #1
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	613b      	str	r3, [r7, #16]
        if (chunk > remaining) chunk = remaining;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d901      	bls.n	80048d0 <meas_data_log_write+0x38>
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	613b      	str	r3, [r7, #16]

        SPI_FLASH_PageProgram(addr, (uint8_t*)p, chunk);
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 fa8c 	bl	8004df4 <SPI_FLASH_PageProgram>

        addr             += chunk;
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	61fb      	str	r3, [r7, #28]
        p                += chunk;
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	18d3      	adds	r3, r2, r3
 80048ea:	617b      	str	r3, [r7, #20]
        remaining        -= chunk;
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	61bb      	str	r3, [r7, #24]
        log_write_offset += chunk;
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <meas_data_log_write+0x78>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	18d2      	adds	r2, r2, r3
 80048fc:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <meas_data_log_write+0x78>)
 80048fe:	601a      	str	r2, [r3, #0]
    while (remaining) {
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1d5      	bne.n	80048b2 <meas_data_log_write+0x1a>
    }
}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	46c0      	nop			@ (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b008      	add	sp, #32
 800490e:	bd80      	pop	{r7, pc}
 8004910:	2000073c 	.word	0x2000073c

08004914 <meas_data_log_read>:

void meas_data_log_read(uint32_t offset, uint8_t *buf, size_t len)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
    if (offset + len > LOG_MAX_SIZE) return;
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	18d2      	adds	r2, r2, r3
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	035b      	lsls	r3, r3, #13
 800492a:	429a      	cmp	r2, r3
 800492c:	d806      	bhi.n	800493c <meas_data_log_read+0x28>
    SPI_FLASH_ReadData(LOG_BASE_ADDR + offset, buf, len);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 faa3 	bl	8004e80 <SPI_FLASH_ReadData>
 800493a:	e000      	b.n	800493e <meas_data_log_read+0x2a>
    if (offset + len > LOG_MAX_SIZE) return;
 800493c:	46c0      	nop			@ (mov r8, r8)
}
 800493e:	46bd      	mov	sp, r7
 8004940:	b004      	add	sp, #16
 8004942:	bd80      	pop	{r7, pc}

08004944 <meas_data_log_erase>:
//    uart3_printf("\r\n");
//}


void meas_data_log_erase(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
    uint32_t sectors = LOG_MAX_SIZE / LOG_SECTOR_SIZE;
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	603b      	str	r3, [r7, #0]
    for (uint32_t s = 0; s < sectors; s++)
 8004950:	2300      	movs	r3, #0
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	e007      	b.n	8004966 <meas_data_log_erase+0x22>
    {
        SPI_FLASH_EraseSector(LOG_BASE_ADDR + s * LOG_SECTOR_SIZE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	031b      	lsls	r3, r3, #12
 800495a:	0018      	movs	r0, r3
 800495c:	f000 fa0e 	bl	8004d7c <SPI_FLASH_EraseSector>
    for (uint32_t s = 0; s < sectors; s++)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3301      	adds	r3, #1
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3f3      	bcc.n	8004956 <meas_data_log_erase+0x12>
    }
    log_write_offset = 0;
 800496e:	4b03      	ldr	r3, [pc, #12]	@ (800497c <meas_data_log_erase+0x38>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}
 800497c:	2000073c 	.word	0x2000073c

08004980 <meas_data_log_write_entry>:

/**
 * @brief  log_entry_t 하나를 플래시에 이어쓰기
 */
void meas_data_log_write_entry(const log_entry_t *e)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b08b      	sub	sp, #44	@ 0x2c
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    // 체크섬 계산 예시 (간단 sum)
    uint16_t sum = 0;
 8004988:	2326      	movs	r3, #38	@ 0x26
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2200      	movs	r2, #0
 800498e:	801a      	strh	r2, [r3, #0]
    const uint8_t *p = (const uint8_t*)e;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 8004994:	2300      	movs	r3, #0
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	e00d      	b.n	80049b6 <meas_data_log_write_entry+0x36>
        sum += p[i];
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	18d3      	adds	r3, r2, r3
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	0019      	movs	r1, r3
 80049a4:	2226      	movs	r2, #38	@ 0x26
 80049a6:	18bb      	adds	r3, r7, r2
 80049a8:	18ba      	adds	r2, r7, r2
 80049aa:	8812      	ldrh	r2, [r2, #0]
 80049ac:	188a      	adds	r2, r1, r2
 80049ae:	801a      	strh	r2, [r3, #0]
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	3301      	adds	r3, #1
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	2b0d      	cmp	r3, #13
 80049ba:	d9ee      	bls.n	800499a <meas_data_log_write_entry+0x1a>
    }
    // 구조체 복사 후 checksum 필드에 기록
    log_entry_t tmp = *e;
 80049bc:	240c      	movs	r4, #12
 80049be:	193a      	adds	r2, r7, r4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	0010      	movs	r0, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	2310      	movs	r3, #16
 80049c8:	001a      	movs	r2, r3
 80049ca:	f00b f805 	bl	800f9d8 <memcpy>
    tmp.checksum    = sum;
 80049ce:	0021      	movs	r1, r4
 80049d0:	187b      	adds	r3, r7, r1
 80049d2:	2226      	movs	r2, #38	@ 0x26
 80049d4:	18ba      	adds	r2, r7, r2
 80049d6:	8812      	ldrh	r2, [r2, #0]
 80049d8:	819a      	strh	r2, [r3, #12]

    // ENTRY_SIZE 바이트를 그대로 append
    meas_data_log_write((uint8_t*)&tmp, ENTRY_SIZE);
 80049da:	187b      	adds	r3, r7, r1
 80049dc:	2110      	movs	r1, #16
 80049de:	0018      	movs	r0, r3
 80049e0:	f7ff ff5a 	bl	8004898 <meas_data_log_write>
}
 80049e4:	46c0      	nop			@ (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b00b      	add	sp, #44	@ 0x2c
 80049ea:	bd90      	pop	{r4, r7, pc}

080049ec <meas_data_log_read_entry>:

/**
 * @brief  플래시에 기록된 n번째 엔트리를 읽어옴
 */
void meas_data_log_read_entry(uint32_t index, log_entry_t *e)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
    uint32_t offset = index * ENTRY_SIZE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
    if (offset + ENTRY_SIZE > LOG_MAX_SIZE) {
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3310      	adds	r3, #16
 8004a00:	001a      	movs	r2, r3
 8004a02:	2380      	movs	r3, #128	@ 0x80
 8004a04:	035b      	lsls	r3, r3, #13
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d906      	bls.n	8004a18 <meas_data_log_read_entry+0x2c>
        // 범위 벗어나면 초기화
        memset(e, 0xFF, ENTRY_SIZE);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	21ff      	movs	r1, #255	@ 0xff
 8004a10:	0018      	movs	r0, r3
 8004a12:	f00a ff4f 	bl	800f8b4 <memset>
        return;
 8004a16:	e005      	b.n	8004a24 <meas_data_log_read_entry+0x38>
    }
    meas_data_log_read(offset, (uint8_t*)e, ENTRY_SIZE);
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7ff ff78 	bl	8004914 <meas_data_log_read>
}
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b004      	add	sp, #16
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <meas_data_log_read_last>:


void meas_data_log_read_last(void)
{
 8004a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2e:	46de      	mov	lr, fp
 8004a30:	4657      	mov	r7, sl
 8004a32:	464e      	mov	r6, r9
 8004a34:	4645      	mov	r5, r8
 8004a36:	b5e0      	push	{r5, r6, r7, lr}
 8004a38:	b0ab      	sub	sp, #172	@ 0xac
 8004a3a:	af0c      	add	r7, sp, #48	@ 0x30
    if (log_write_offset < ENTRY_SIZE) return;
 8004a3c:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <meas_data_log_read_last+0x130>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b0f      	cmp	r3, #15
 8004a42:	d800      	bhi.n	8004a46 <meas_data_log_read_last+0x1a>
 8004a44:	e081      	b.n	8004b4a <meas_data_log_read_last+0x11e>
    uint32_t read_ofs = log_write_offset - ENTRY_SIZE;
 8004a46:	4b45      	ldr	r3, [pc, #276]	@ (8004b5c <meas_data_log_read_last+0x130>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3b10      	subs	r3, #16
 8004a4c:	677b      	str	r3, [r7, #116]	@ 0x74
    log_entry_t e;
    meas_data_log_read(read_ofs, (uint8_t*)&e, ENTRY_SIZE);
 8004a4e:	2450      	movs	r4, #80	@ 0x50
 8004a50:	2508      	movs	r5, #8
 8004a52:	1963      	adds	r3, r4, r5
 8004a54:	19d9      	adds	r1, r3, r7
 8004a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a58:	2210      	movs	r2, #16
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f7ff ff5a 	bl	8004914 <meas_data_log_read>

    // UART 출력 (print_log_entry와 동일)
    char txt[80];
    int year = 2000 + e.year;
 8004a60:	0022      	movs	r2, r4
 8004a62:	0028      	movs	r0, r5
 8004a64:	1813      	adds	r3, r2, r0
 8004a66:	19db      	adds	r3, r3, r7
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	21fa      	movs	r1, #250	@ 0xfa
 8004a6c:	00c9      	lsls	r1, r1, #3
 8004a6e:	468c      	mov	ip, r1
 8004a70:	4463      	add	r3, ip
 8004a72:	673b      	str	r3, [r7, #112]	@ 0x70
    float temp_c = e.temperature / 10.0f;
 8004a74:	0014      	movs	r4, r2
 8004a76:	0005      	movs	r5, r0
 8004a78:	1813      	adds	r3, r2, r0
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	5e9b      	ldrsh	r3, [r3, r2]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7fc fe09 	bl	8001698 <__aeabi_i2f>
 8004a86:	1c03      	adds	r3, r0, #0
 8004a88:	4935      	ldr	r1, [pc, #212]	@ (8004b60 <meas_data_log_read_last+0x134>)
 8004a8a:	1c18      	adds	r0, r3, #0
 8004a8c:	f7fc f842 	bl	8000b14 <__aeabi_fdiv>
 8004a90:	1c03      	adds	r3, r0, #0
 8004a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int len = snprintf(txt, sizeof(txt),
        "Idx:%3u Date:%04d-%02u-%02u %02u:%02u:%02u Cnt:%3u T:%.1fCC Dose:%.2fmSv/h\r\n",
		e.index, year, e.month, e.day, e.hour, e.minute, e.second,
 8004a94:	0022      	movs	r2, r4
 8004a96:	0029      	movs	r1, r5
 8004a98:	1853      	adds	r3, r2, r1
 8004a9a:	19db      	adds	r3, r3, r7
 8004a9c:	781b      	ldrb	r3, [r3, #0]
    int len = snprintf(txt, sizeof(txt),
 8004a9e:	607b      	str	r3, [r7, #4]
		e.index, year, e.month, e.day, e.hour, e.minute, e.second,
 8004aa0:	1853      	adds	r3, r2, r1
 8004aa2:	19db      	adds	r3, r3, r7
 8004aa4:	789b      	ldrb	r3, [r3, #2]
    int len = snprintf(txt, sizeof(txt),
 8004aa6:	001e      	movs	r6, r3
		e.index, year, e.month, e.day, e.hour, e.minute, e.second,
 8004aa8:	1853      	adds	r3, r2, r1
 8004aaa:	19db      	adds	r3, r3, r7
 8004aac:	78db      	ldrb	r3, [r3, #3]
    int len = snprintf(txt, sizeof(txt),
 8004aae:	4698      	mov	r8, r3
		e.index, year, e.month, e.day, e.hour, e.minute, e.second,
 8004ab0:	1853      	adds	r3, r2, r1
 8004ab2:	19db      	adds	r3, r3, r7
 8004ab4:	791b      	ldrb	r3, [r3, #4]
    int len = snprintf(txt, sizeof(txt),
 8004ab6:	4699      	mov	r9, r3
		e.index, year, e.month, e.day, e.hour, e.minute, e.second,
 8004ab8:	1853      	adds	r3, r2, r1
 8004aba:	19db      	adds	r3, r3, r7
 8004abc:	795b      	ldrb	r3, [r3, #5]
    int len = snprintf(txt, sizeof(txt),
 8004abe:	469a      	mov	sl, r3
		e.index, year, e.month, e.day, e.hour, e.minute, e.second,
 8004ac0:	1853      	adds	r3, r2, r1
 8004ac2:	19db      	adds	r3, r3, r7
 8004ac4:	799b      	ldrb	r3, [r3, #6]
    int len = snprintf(txt, sizeof(txt),
 8004ac6:	469b      	mov	fp, r3
        e.count,temp_c, e.dose/100.0f);
 8004ac8:	1853      	adds	r3, r2, r1
 8004aca:	19db      	adds	r3, r3, r7
 8004acc:	79db      	ldrb	r3, [r3, #7]
    int len = snprintf(txt, sizeof(txt),
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ad2:	f7fe fe17 	bl	8003704 <__aeabi_f2d>
 8004ad6:	0004      	movs	r4, r0
 8004ad8:	000d      	movs	r5, r1
        e.count,temp_c, e.dose/100.0f);
 8004ada:	2250      	movs	r2, #80	@ 0x50
 8004adc:	2008      	movs	r0, #8
 8004ade:	1813      	adds	r3, r2, r0
 8004ae0:	19db      	adds	r3, r3, r7
 8004ae2:	895b      	ldrh	r3, [r3, #10]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fc fdd7 	bl	8001698 <__aeabi_i2f>
 8004aea:	1c03      	adds	r3, r0, #0
 8004aec:	491d      	ldr	r1, [pc, #116]	@ (8004b64 <meas_data_log_read_last+0x138>)
 8004aee:	1c18      	adds	r0, r3, #0
 8004af0:	f7fc f810 	bl	8000b14 <__aeabi_fdiv>
 8004af4:	1c03      	adds	r3, r0, #0
    int len = snprintf(txt, sizeof(txt),
 8004af6:	1c18      	adds	r0, r3, #0
 8004af8:	f7fe fe04 	bl	8003704 <__aeabi_f2d>
 8004afc:	0002      	movs	r2, r0
 8004afe:	000b      	movs	r3, r1
 8004b00:	4919      	ldr	r1, [pc, #100]	@ (8004b68 <meas_data_log_read_last+0x13c>)
 8004b02:	2008      	movs	r0, #8
 8004b04:	1838      	adds	r0, r7, r0
 8004b06:	920a      	str	r2, [sp, #40]	@ 0x28
 8004b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b0a:	9408      	str	r4, [sp, #32]
 8004b0c:	9509      	str	r5, [sp, #36]	@ 0x24
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	9206      	str	r2, [sp, #24]
 8004b12:	465a      	mov	r2, fp
 8004b14:	9205      	str	r2, [sp, #20]
 8004b16:	4652      	mov	r2, sl
 8004b18:	9204      	str	r2, [sp, #16]
 8004b1a:	464a      	mov	r2, r9
 8004b1c:	9203      	str	r2, [sp, #12]
 8004b1e:	4642      	mov	r2, r8
 8004b20:	9202      	str	r2, [sp, #8]
 8004b22:	9601      	str	r6, [sp, #4]
 8004b24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	000a      	movs	r2, r1
 8004b2c:	2150      	movs	r1, #80	@ 0x50
 8004b2e:	f00a fe1d 	bl	800f76c <sniprintf>
 8004b32:	0003      	movs	r3, r0
 8004b34:	66bb      	str	r3, [r7, #104]	@ 0x68
    HAL_UART_Transmit(&huart3, (uint8_t*)txt, len, HAL_MAX_DELAY);
 8004b36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	2108      	movs	r1, #8
 8004b40:	1879      	adds	r1, r7, r1
 8004b42:	480a      	ldr	r0, [pc, #40]	@ (8004b6c <meas_data_log_read_last+0x140>)
 8004b44:	f008 fbb2 	bl	800d2ac <HAL_UART_Transmit>
 8004b48:	e000      	b.n	8004b4c <meas_data_log_read_last+0x120>
    if (log_write_offset < ENTRY_SIZE) return;
 8004b4a:	46c0      	nop			@ (mov r8, r8)
}
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b01f      	add	sp, #124	@ 0x7c
 8004b50:	bcf0      	pop	{r4, r5, r6, r7}
 8004b52:	46bb      	mov	fp, r7
 8004b54:	46b2      	mov	sl, r6
 8004b56:	46a9      	mov	r9, r5
 8004b58:	46a0      	mov	r8, r4
 8004b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5c:	2000073c 	.word	0x2000073c
 8004b60:	41200000 	.word	0x41200000
 8004b64:	42c80000 	.word	0x42c80000
 8004b68:	08011f50 	.word	0x08011f50
 8004b6c:	200003b0 	.word	0x200003b0

08004b70 <print_log_entry>:


static void print_log_entry(const log_entry_t *e)
{
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	46de      	mov	lr, fp
 8004b74:	4657      	mov	r7, sl
 8004b76:	464e      	mov	r6, r9
 8004b78:	4645      	mov	r5, r8
 8004b7a:	b5e0      	push	{r5, r6, r7, lr}
 8004b7c:	b0a9      	sub	sp, #164	@ 0xa4
 8004b7e:	af0c      	add	r7, sp, #48	@ 0x30
 8004b80:	60f8      	str	r0, [r7, #12]
    char buf[80];
    int year = 2000 + e->year;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	22fa      	movs	r2, #250	@ 0xfa
 8004b88:	00d2      	lsls	r2, r2, #3
 8004b8a:	4694      	mov	ip, r2
 8004b8c:	4463      	add	r3, ip
 8004b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    float temp_c = e->temperature / 10.0f;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	7a1a      	ldrb	r2, [r3, #8]
 8004b94:	7a5b      	ldrb	r3, [r3, #9]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	141b      	asrs	r3, r3, #16
 8004b9e:	b21b      	sxth	r3, r3
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7fc fd79 	bl	8001698 <__aeabi_i2f>
 8004ba6:	1c03      	adds	r3, r0, #0
 8004ba8:	4932      	ldr	r1, [pc, #200]	@ (8004c74 <print_log_entry+0x104>)
 8004baa:	1c18      	adds	r0, r3, #0
 8004bac:	f7fb ffb2 	bl	8000b14 <__aeabi_fdiv>
 8004bb0:	1c03      	adds	r3, r0, #0
 8004bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    int len = snprintf(buf, sizeof(buf),
        "Idx:%3u Date:%04d-%02u-%02u %02u:%02u:%02u  "
        "Cnt:%3u  T:%.1fCC  Dose:%.2fmSv/h\r\n",
        e->index,
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
    int len = snprintf(buf, sizeof(buf),
 8004bb8:	60bb      	str	r3, [r7, #8]
        year, e->month, e->day,
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	789b      	ldrb	r3, [r3, #2]
    int len = snprintf(buf, sizeof(buf),
 8004bbe:	001e      	movs	r6, r3
        year, e->month, e->day,
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	78db      	ldrb	r3, [r3, #3]
    int len = snprintf(buf, sizeof(buf),
 8004bc4:	4698      	mov	r8, r3
        e->hour, e->minute, e->second,
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	791b      	ldrb	r3, [r3, #4]
    int len = snprintf(buf, sizeof(buf),
 8004bca:	4699      	mov	r9, r3
        e->hour, e->minute, e->second,
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	795b      	ldrb	r3, [r3, #5]
    int len = snprintf(buf, sizeof(buf),
 8004bd0:	469a      	mov	sl, r3
        e->hour, e->minute, e->second,
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	799b      	ldrb	r3, [r3, #6]
    int len = snprintf(buf, sizeof(buf),
 8004bd6:	469b      	mov	fp, r3
        e->count,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	79db      	ldrb	r3, [r3, #7]
    int len = snprintf(buf, sizeof(buf),
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004be0:	f7fe fd90 	bl	8003704 <__aeabi_f2d>
 8004be4:	0004      	movs	r4, r0
 8004be6:	000d      	movs	r5, r1
		temp_c ,
        e->dose / 100.0f
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	7a9a      	ldrb	r2, [r3, #10]
 8004bec:	7adb      	ldrb	r3, [r3, #11]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7fc fd4f 	bl	8001698 <__aeabi_i2f>
 8004bfa:	1c03      	adds	r3, r0, #0
 8004bfc:	491e      	ldr	r1, [pc, #120]	@ (8004c78 <print_log_entry+0x108>)
 8004bfe:	1c18      	adds	r0, r3, #0
 8004c00:	f7fb ff88 	bl	8000b14 <__aeabi_fdiv>
 8004c04:	1c03      	adds	r3, r0, #0
    int len = snprintf(buf, sizeof(buf),
 8004c06:	1c18      	adds	r0, r3, #0
 8004c08:	f7fe fd7c 	bl	8003704 <__aeabi_f2d>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	000b      	movs	r3, r1
 8004c10:	491a      	ldr	r1, [pc, #104]	@ (8004c7c <print_log_entry+0x10c>)
 8004c12:	468c      	mov	ip, r1
 8004c14:	200c      	movs	r0, #12
 8004c16:	2108      	movs	r1, #8
 8004c18:	1840      	adds	r0, r0, r1
 8004c1a:	19c0      	adds	r0, r0, r7
 8004c1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004c1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c20:	9408      	str	r4, [sp, #32]
 8004c22:	9509      	str	r5, [sp, #36]	@ 0x24
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	9206      	str	r2, [sp, #24]
 8004c28:	465a      	mov	r2, fp
 8004c2a:	9205      	str	r2, [sp, #20]
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	9204      	str	r2, [sp, #16]
 8004c30:	464a      	mov	r2, r9
 8004c32:	9203      	str	r2, [sp, #12]
 8004c34:	4642      	mov	r2, r8
 8004c36:	9202      	str	r2, [sp, #8]
 8004c38:	9601      	str	r6, [sp, #4]
 8004c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4662      	mov	r2, ip
 8004c42:	2150      	movs	r1, #80	@ 0x50
 8004c44:	f00a fd92 	bl	800f76c <sniprintf>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	667b      	str	r3, [r7, #100]	@ 0x64
    );
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, len, HAL_MAX_DELAY);
 8004c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	2301      	movs	r3, #1
 8004c52:	425b      	negs	r3, r3
 8004c54:	200c      	movs	r0, #12
 8004c56:	2108      	movs	r1, #8
 8004c58:	1841      	adds	r1, r0, r1
 8004c5a:	19c9      	adds	r1, r1, r7
 8004c5c:	4808      	ldr	r0, [pc, #32]	@ (8004c80 <print_log_entry+0x110>)
 8004c5e:	f008 fb25 	bl	800d2ac <HAL_UART_Transmit>
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b01d      	add	sp, #116	@ 0x74
 8004c68:	bcf0      	pop	{r4, r5, r6, r7}
 8004c6a:	46bb      	mov	fp, r7
 8004c6c:	46b2      	mov	sl, r6
 8004c6e:	46a9      	mov	r9, r5
 8004c70:	46a0      	mov	r8, r4
 8004c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c74:	41200000 	.word	0x41200000
 8004c78:	42c80000 	.word	0x42c80000
 8004c7c:	08011fa0 	.word	0x08011fa0
 8004c80:	200003b0 	.word	0x200003b0

08004c84 <dump_log_entries>:

/**
 * @brief  저장된 모든 로그 엔트리를 읽어 UART로 출력
 */
void dump_log_entries(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
    log_entry_t e;
    uint32_t max_idx = LOG_MAX_SIZE / ENTRY_SIZE;
 8004c8a:	2380      	movs	r3, #128	@ 0x80
 8004c8c:	025b      	lsls	r3, r3, #9
 8004c8e:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < max_idx; i++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e010      	b.n	8004cb8 <dump_log_entries+0x34>
    {
        meas_data_log_read_entry(i, &e);
 8004c96:	003a      	movs	r2, r7
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7ff fea5 	bl	80049ec <meas_data_log_read_entry>
        // 비어 있으면(인덱스==0xFF) 끝
        if (e.index == 0xFF) break;
 8004ca2:	003b      	movs	r3, r7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2bff      	cmp	r3, #255	@ 0xff
 8004ca8:	d00b      	beq.n	8004cc2 <dump_log_entries+0x3e>
        print_log_entry(&e);
 8004caa:	003b      	movs	r3, r7
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff ff5f 	bl	8004b70 <print_log_entry>
    for (uint32_t i = 0; i < max_idx; i++)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d3ea      	bcc.n	8004c96 <dump_log_entries+0x12>
    }
}
 8004cc0:	e000      	b.n	8004cc4 <dump_log_entries+0x40>
        if (e.index == 0xFF) break;
 8004cc2:	46c0      	nop			@ (mov r8, r8)
}
 8004cc4:	46c0      	nop			@ (mov r8, r8)
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b006      	add	sp, #24
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <SPI_FLASH_Init>:
extern SPI_HandleTypeDef hspi3;
#define FLASH_CS_LOW()   HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET)
 #define FLASH_CS_HIGH()  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_SET)

 void SPI_FLASH_Init(void)
 {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
     FLASH_CS_HIGH();
 8004cd0:	23a0      	movs	r3, #160	@ 0xa0
 8004cd2:	05db      	lsls	r3, r3, #23
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f002 fe10 	bl	80078fe <HAL_GPIO_WritePin>
 }
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <SPI_FLASH_ReadStatus>:

 uint8_t SPI_FLASH_ReadStatus(void)
 {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
     uint8_t cmd = 0x05, status;
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	2205      	movs	r2, #5
 8004cee:	701a      	strb	r2, [r3, #0]
     FLASH_CS_LOW();
 8004cf0:	23a0      	movs	r3, #160	@ 0xa0
 8004cf2:	05db      	lsls	r3, r3, #23
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f002 fe00 	bl	80078fe <HAL_GPIO_WritePin>
     HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8004cfe:	2301      	movs	r3, #1
 8004d00:	425b      	negs	r3, r3
 8004d02:	1df9      	adds	r1, r7, #7
 8004d04:	480b      	ldr	r0, [pc, #44]	@ (8004d34 <SPI_FLASH_ReadStatus+0x50>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	f007 fbca 	bl	800c4a0 <HAL_SPI_Transmit>
     HAL_SPI_Receive (&hspi3, &status, 1, HAL_MAX_DELAY);
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	425b      	negs	r3, r3
 8004d10:	1db9      	adds	r1, r7, #6
 8004d12:	4808      	ldr	r0, [pc, #32]	@ (8004d34 <SPI_FLASH_ReadStatus+0x50>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	f007 fd23 	bl	800c760 <HAL_SPI_Receive>
     FLASH_CS_HIGH();
 8004d1a:	23a0      	movs	r3, #160	@ 0xa0
 8004d1c:	05db      	lsls	r3, r3, #23
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2110      	movs	r1, #16
 8004d22:	0018      	movs	r0, r3
 8004d24:	f002 fdeb 	bl	80078fe <HAL_GPIO_WritePin>
     return status;
 8004d28:	1dbb      	adds	r3, r7, #6
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 }
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b002      	add	sp, #8
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000034c 	.word	0x2000034c

08004d38 <SPI_FLASH_WriteEnable>:

 void SPI_FLASH_WriteEnable(void)
 {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
     uint8_t cmd = 0x06;
 8004d3e:	1dfb      	adds	r3, r7, #7
 8004d40:	2206      	movs	r2, #6
 8004d42:	701a      	strb	r2, [r3, #0]
     FLASH_CS_LOW();
 8004d44:	23a0      	movs	r3, #160	@ 0xa0
 8004d46:	05db      	lsls	r3, r3, #23
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f002 fdd6 	bl	80078fe <HAL_GPIO_WritePin>
     HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8004d52:	2301      	movs	r3, #1
 8004d54:	425b      	negs	r3, r3
 8004d56:	1df9      	adds	r1, r7, #7
 8004d58:	4807      	ldr	r0, [pc, #28]	@ (8004d78 <SPI_FLASH_WriteEnable+0x40>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f007 fba0 	bl	800c4a0 <HAL_SPI_Transmit>
     FLASH_CS_HIGH();
 8004d60:	23a0      	movs	r3, #160	@ 0xa0
 8004d62:	05db      	lsls	r3, r3, #23
 8004d64:	2201      	movs	r2, #1
 8004d66:	2110      	movs	r1, #16
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f002 fdc8 	bl	80078fe <HAL_GPIO_WritePin>
 }
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b002      	add	sp, #8
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			@ (mov r8, r8)
 8004d78:	2000034c 	.word	0x2000034c

08004d7c <SPI_FLASH_EraseSector>:

 void SPI_FLASH_EraseSector(uint32_t addr)
 {
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
     uint8_t cmd[4] = { 0x20,
 8004d84:	240c      	movs	r4, #12
 8004d86:	193b      	adds	r3, r7, r4
 8004d88:	2220      	movs	r2, #32
 8004d8a:	701a      	strb	r2, [r3, #0]
                        (uint8_t)(addr >> 16),
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x20,
 8004d92:	193b      	adds	r3, r7, r4
 8004d94:	705a      	strb	r2, [r3, #1]
                        (uint8_t)(addr >>  8),
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x20,
 8004d9c:	193b      	adds	r3, r7, r4
 8004d9e:	709a      	strb	r2, [r3, #2]
                        (uint8_t)(addr >>  0) };
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x20,
 8004da4:	193b      	adds	r3, r7, r4
 8004da6:	70da      	strb	r2, [r3, #3]
     SPI_FLASH_WriteEnable();
 8004da8:	f7ff ffc6 	bl	8004d38 <SPI_FLASH_WriteEnable>
     FLASH_CS_LOW();
 8004dac:	23a0      	movs	r3, #160	@ 0xa0
 8004dae:	05db      	lsls	r3, r3, #23
 8004db0:	2200      	movs	r2, #0
 8004db2:	2110      	movs	r1, #16
 8004db4:	0018      	movs	r0, r3
 8004db6:	f002 fda2 	bl	80078fe <HAL_GPIO_WritePin>
     HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY);
 8004dba:	2301      	movs	r3, #1
 8004dbc:	425b      	negs	r3, r3
 8004dbe:	1939      	adds	r1, r7, r4
 8004dc0:	480b      	ldr	r0, [pc, #44]	@ (8004df0 <SPI_FLASH_EraseSector+0x74>)
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	f007 fb6c 	bl	800c4a0 <HAL_SPI_Transmit>
     FLASH_CS_HIGH();
 8004dc8:	23a0      	movs	r3, #160	@ 0xa0
 8004dca:	05db      	lsls	r3, r3, #23
 8004dcc:	2201      	movs	r2, #1
 8004dce:	2110      	movs	r1, #16
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f002 fd94 	bl	80078fe <HAL_GPIO_WritePin>
     while (SPI_FLASH_ReadStatus() & 0x01U) { }
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	f7ff ff84 	bl	8004ce4 <SPI_FLASH_ReadStatus>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	001a      	movs	r2, r3
 8004de0:	2301      	movs	r3, #1
 8004de2:	4013      	ands	r3, r2
 8004de4:	d1f8      	bne.n	8004dd8 <SPI_FLASH_EraseSector+0x5c>
 }
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	46c0      	nop			@ (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b005      	add	sp, #20
 8004dee:	bd90      	pop	{r4, r7, pc}
 8004df0:	2000034c 	.word	0x2000034c

08004df4 <SPI_FLASH_PageProgram>:

 void SPI_FLASH_PageProgram(uint32_t addr, uint8_t *buf, uint32_t len)
 {
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
     uint8_t cmd[4] = { 0x02,
 8004e00:	2414      	movs	r4, #20
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	2202      	movs	r2, #2
 8004e06:	701a      	strb	r2, [r3, #0]
                        (uint8_t)(addr >> 16),
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x02,
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	705a      	strb	r2, [r3, #1]
                        (uint8_t)(addr >>  8),
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x02,
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	709a      	strb	r2, [r3, #2]
                        (uint8_t)(addr >>  0) };
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x02,
 8004e20:	193b      	adds	r3, r7, r4
 8004e22:	70da      	strb	r2, [r3, #3]
     SPI_FLASH_WriteEnable();
 8004e24:	f7ff ff88 	bl	8004d38 <SPI_FLASH_WriteEnable>
     FLASH_CS_LOW();
 8004e28:	23a0      	movs	r3, #160	@ 0xa0
 8004e2a:	05db      	lsls	r3, r3, #23
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2110      	movs	r1, #16
 8004e30:	0018      	movs	r0, r3
 8004e32:	f002 fd64 	bl	80078fe <HAL_GPIO_WritePin>
     HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY);
 8004e36:	2301      	movs	r3, #1
 8004e38:	425b      	negs	r3, r3
 8004e3a:	1939      	adds	r1, r7, r4
 8004e3c:	480f      	ldr	r0, [pc, #60]	@ (8004e7c <SPI_FLASH_PageProgram+0x88>)
 8004e3e:	2204      	movs	r2, #4
 8004e40:	f007 fb2e 	bl	800c4a0 <HAL_SPI_Transmit>
     HAL_SPI_Transmit(&hspi3, buf, len, HAL_MAX_DELAY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	2301      	movs	r3, #1
 8004e4a:	425b      	negs	r3, r3
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	480b      	ldr	r0, [pc, #44]	@ (8004e7c <SPI_FLASH_PageProgram+0x88>)
 8004e50:	f007 fb26 	bl	800c4a0 <HAL_SPI_Transmit>
     FLASH_CS_HIGH();
 8004e54:	23a0      	movs	r3, #160	@ 0xa0
 8004e56:	05db      	lsls	r3, r3, #23
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f002 fd4e 	bl	80078fe <HAL_GPIO_WritePin>
     while (SPI_FLASH_ReadStatus() & 0x01U) { }
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	f7ff ff3e 	bl	8004ce4 <SPI_FLASH_ReadStatus>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d1f8      	bne.n	8004e64 <SPI_FLASH_PageProgram+0x70>
 }
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	46c0      	nop			@ (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b007      	add	sp, #28
 8004e7a:	bd90      	pop	{r4, r7, pc}
 8004e7c:	2000034c 	.word	0x2000034c

08004e80 <SPI_FLASH_ReadData>:

 void SPI_FLASH_ReadData(uint32_t addr, uint8_t *buf, uint32_t len)
 {
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
     uint8_t cmd[4] = { 0x03,
 8004e8c:	2414      	movs	r4, #20
 8004e8e:	193b      	adds	r3, r7, r4
 8004e90:	2203      	movs	r2, #3
 8004e92:	701a      	strb	r2, [r3, #0]
                        (uint8_t)(addr >> 16),
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x03,
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	705a      	strb	r2, [r3, #1]
                        (uint8_t)(addr >>  8),
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x03,
 8004ea4:	193b      	adds	r3, r7, r4
 8004ea6:	709a      	strb	r2, [r3, #2]
                        (uint8_t)(addr >>  0) };
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x03,
 8004eac:	193b      	adds	r3, r7, r4
 8004eae:	70da      	strb	r2, [r3, #3]
     FLASH_CS_LOW();
 8004eb0:	23a0      	movs	r3, #160	@ 0xa0
 8004eb2:	05db      	lsls	r3, r3, #23
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2110      	movs	r1, #16
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f002 fd20 	bl	80078fe <HAL_GPIO_WritePin>
     HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY);
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	425b      	negs	r3, r3
 8004ec2:	1939      	adds	r1, r7, r4
 8004ec4:	480b      	ldr	r0, [pc, #44]	@ (8004ef4 <SPI_FLASH_ReadData+0x74>)
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	f007 faea 	bl	800c4a0 <HAL_SPI_Transmit>
     HAL_SPI_Receive (&hspi3, buf, len, HAL_MAX_DELAY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	425b      	negs	r3, r3
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4807      	ldr	r0, [pc, #28]	@ (8004ef4 <SPI_FLASH_ReadData+0x74>)
 8004ed8:	f007 fc42 	bl	800c760 <HAL_SPI_Receive>
     FLASH_CS_HIGH();
 8004edc:	23a0      	movs	r3, #160	@ 0xa0
 8004ede:	05db      	lsls	r3, r3, #23
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2110      	movs	r1, #16
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f002 fd0a 	bl	80078fe <HAL_GPIO_WritePin>



 }
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b007      	add	sp, #28
 8004ef0:	bd90      	pop	{r4, r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	2000034c 	.word	0x2000034c

08004ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	4b13      	ldr	r3, [pc, #76]	@ (8004f4c <HAL_MspInit+0x54>)
 8004f00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_MspInit+0x54>)
 8004f04:	2180      	movs	r1, #128	@ 0x80
 8004f06:	0549      	lsls	r1, r1, #21
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <HAL_MspInit+0x54>)
 8004f0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f10:	2380      	movs	r3, #128	@ 0x80
 8004f12:	055b      	lsls	r3, r3, #21
 8004f14:	4013      	ands	r3, r2
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <HAL_MspInit+0x54>)
 8004f1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <HAL_MspInit+0x54>)
 8004f20:	2101      	movs	r1, #1
 8004f22:	430a      	orrs	r2, r1
 8004f24:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f26:	4b09      	ldr	r3, [pc, #36]	@ (8004f4c <HAL_MspInit+0x54>)
 8004f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8004f32:	2200      	movs	r2, #0
 8004f34:	2100      	movs	r1, #0
 8004f36:	2004      	movs	r0, #4
 8004f38:	f002 fa2e 	bl	8007398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8004f3c:	2004      	movs	r0, #4
 8004f3e:	f002 fa40 	bl	80073c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f42:	46c0      	nop			@ (mov r8, r8)
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b002      	add	sp, #8
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	40021000 	.word	0x40021000

08004f50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b09b      	sub	sp, #108	@ 0x6c
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f58:	2354      	movs	r3, #84	@ 0x54
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	2314      	movs	r3, #20
 8004f60:	001a      	movs	r2, r3
 8004f62:	2100      	movs	r1, #0
 8004f64:	f00a fca6 	bl	800f8b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f68:	2410      	movs	r4, #16
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	2344      	movs	r3, #68	@ 0x44
 8004f70:	001a      	movs	r2, r3
 8004f72:	2100      	movs	r1, #0
 8004f74:	f00a fc9e 	bl	800f8b4 <memset>
  if(hadc->Instance==ADC1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	@ (800500c <HAL_ADC_MspInit+0xbc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d140      	bne.n	8005004 <HAL_ADC_MspInit+0xb4>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	2280      	movs	r2, #128	@ 0x80
 8004f86:	01d2      	lsls	r2, r2, #7
 8004f88:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004f8a:	193b      	adds	r3, r7, r4
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f90:	193b      	adds	r3, r7, r4
 8004f92:	0018      	movs	r0, r3
 8004f94:	f005 fc56 	bl	800a844 <HAL_RCCEx_PeriphCLKConfig>
 8004f98:	1e03      	subs	r3, r0, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004f9c:	f7ff fc3a 	bl	8004814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8005010 <HAL_ADC_MspInit+0xc0>)
 8004fa2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <HAL_ADC_MspInit+0xc0>)
 8004fa6:	2180      	movs	r1, #128	@ 0x80
 8004fa8:	0349      	lsls	r1, r1, #13
 8004faa:	430a      	orrs	r2, r1
 8004fac:	661a      	str	r2, [r3, #96]	@ 0x60
 8004fae:	4b18      	ldr	r3, [pc, #96]	@ (8005010 <HAL_ADC_MspInit+0xc0>)
 8004fb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	035b      	lsls	r3, r3, #13
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fbc:	4b14      	ldr	r3, [pc, #80]	@ (8005010 <HAL_ADC_MspInit+0xc0>)
 8004fbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fc0:	4b13      	ldr	r3, [pc, #76]	@ (8005010 <HAL_ADC_MspInit+0xc0>)
 8004fc2:	2104      	movs	r1, #4
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004fc8:	4b11      	ldr	r3, [pc, #68]	@ (8005010 <HAL_ADC_MspInit+0xc0>)
 8004fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fcc:	2204      	movs	r2, #4
 8004fce:	4013      	ands	r3, r2
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004fd4:	2154      	movs	r1, #84	@ 0x54
 8004fd6:	187b      	adds	r3, r7, r1
 8004fd8:	2205      	movs	r2, #5
 8004fda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	2203      	movs	r2, #3
 8004fe0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	187b      	adds	r3, r7, r1
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe8:	187b      	adds	r3, r7, r1
 8004fea:	4a0a      	ldr	r2, [pc, #40]	@ (8005014 <HAL_ADC_MspInit+0xc4>)
 8004fec:	0019      	movs	r1, r3
 8004fee:	0010      	movs	r0, r2
 8004ff0:	f002 fa14 	bl	800741c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	200c      	movs	r0, #12
 8004ffa:	f002 f9cd 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 8004ffe:	200c      	movs	r0, #12
 8005000:	f002 f9df 	bl	80073c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b01b      	add	sp, #108	@ 0x6c
 800500a:	bd90      	pop	{r4, r7, pc}
 800500c:	40012400 	.word	0x40012400
 8005010:	40021000 	.word	0x40021000
 8005014:	50000800 	.word	0x50000800

08005018 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <HAL_ADC_MspDeInit+0x38>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d10d      	bne.n	8005046 <HAL_ADC_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800502a:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <HAL_ADC_MspDeInit+0x3c>)
 800502c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800502e:	4b09      	ldr	r3, [pc, #36]	@ (8005054 <HAL_ADC_MspDeInit+0x3c>)
 8005030:	4909      	ldr	r1, [pc, #36]	@ (8005058 <HAL_ADC_MspDeInit+0x40>)
 8005032:	400a      	ands	r2, r1
 8005034:	661a      	str	r2, [r3, #96]	@ 0x60

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2);
 8005036:	4b09      	ldr	r3, [pc, #36]	@ (800505c <HAL_ADC_MspDeInit+0x44>)
 8005038:	2105      	movs	r1, #5
 800503a:	0018      	movs	r0, r3
 800503c:	f002 fb62 	bl	8007704 <HAL_GPIO_DeInit>

    /* ADC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(ADC_COMP1_2_IRQn);
 8005040:	200c      	movs	r0, #12
 8005042:	f002 f9ce 	bl	80073e2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b002      	add	sp, #8
 800504c:	bd80      	pop	{r7, pc}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	40012400 	.word	0x40012400
 8005054:	40021000 	.word	0x40021000
 8005058:	ffefffff 	.word	0xffefffff
 800505c:	50000800 	.word	0x50000800

08005060 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b08b      	sub	sp, #44	@ 0x2c
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005068:	2414      	movs	r4, #20
 800506a:	193b      	adds	r3, r7, r4
 800506c:	0018      	movs	r0, r3
 800506e:	2314      	movs	r3, #20
 8005070:	001a      	movs	r2, r3
 8005072:	2100      	movs	r1, #0
 8005074:	f00a fc1e 	bl	800f8b4 <memset>
  if(hcomp->Instance==COMP1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a24      	ldr	r2, [pc, #144]	@ (8005110 <HAL_COMP_MspInit+0xb0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d142      	bne.n	8005108 <HAL_COMP_MspInit+0xa8>
  {
    /* USER CODE BEGIN COMP1_MspInit 0 */

    /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP_CLK_ENABLE();
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 8005084:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005086:	4b23      	ldr	r3, [pc, #140]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 8005088:	2101      	movs	r1, #1
 800508a:	430a      	orrs	r2, r1
 800508c:	661a      	str	r2, [r3, #96]	@ 0x60
 800508e:	4b21      	ldr	r3, [pc, #132]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 8005090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005092:	2201      	movs	r2, #1
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800509a:	4b1e      	ldr	r3, [pc, #120]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 800509c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800509e:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 80050a0:	2104      	movs	r1, #4
 80050a2:	430a      	orrs	r2, r1
 80050a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80050a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 80050a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050aa:	2204      	movs	r2, #4
 80050ac:	4013      	ands	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b2:	4b18      	ldr	r3, [pc, #96]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 80050b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050b6:	4b17      	ldr	r3, [pc, #92]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 80050b8:	2102      	movs	r1, #2
 80050ba:	430a      	orrs	r2, r1
 80050bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80050be:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <HAL_COMP_MspInit+0xb4>)
 80050c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c2:	2202      	movs	r2, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	2210      	movs	r2, #16
 80050ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050d0:	193b      	adds	r3, r7, r4
 80050d2:	2203      	movs	r2, #3
 80050d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	193b      	adds	r3, r7, r4
 80050d8:	2200      	movs	r2, #0
 80050da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050dc:	193b      	adds	r3, r7, r4
 80050de:	4a0e      	ldr	r2, [pc, #56]	@ (8005118 <HAL_COMP_MspInit+0xb8>)
 80050e0:	0019      	movs	r1, r3
 80050e2:	0010      	movs	r0, r2
 80050e4:	f002 f99a 	bl	800741c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050e8:	0021      	movs	r1, r4
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	2204      	movs	r2, #4
 80050ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050f0:	187b      	adds	r3, r7, r1
 80050f2:	2203      	movs	r2, #3
 80050f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	2200      	movs	r2, #0
 80050fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050fc:	187b      	adds	r3, r7, r1
 80050fe:	4a07      	ldr	r2, [pc, #28]	@ (800511c <HAL_COMP_MspInit+0xbc>)
 8005100:	0019      	movs	r1, r3
 8005102:	0010      	movs	r0, r2
 8005104:	f002 f98a 	bl	800741c <HAL_GPIO_Init>

    /* USER CODE END COMP1_MspInit 1 */

  }

}
 8005108:	46c0      	nop			@ (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	b00b      	add	sp, #44	@ 0x2c
 800510e:	bd90      	pop	{r4, r7, pc}
 8005110:	40010200 	.word	0x40010200
 8005114:	40021000 	.word	0x40021000
 8005118:	50000800 	.word	0x50000800
 800511c:	50000400 	.word	0x50000400

08005120 <HAL_COMP_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspDeInit(COMP_HandleTypeDef* hcomp)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  if(hcomp->Instance==COMP1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a0b      	ldr	r2, [pc, #44]	@ (800515c <HAL_COMP_MspDeInit+0x3c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10f      	bne.n	8005152 <HAL_COMP_MspDeInit+0x32>
  {
    /* USER CODE BEGIN COMP1_MspDeInit 0 */

    /* USER CODE END COMP1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_COMP_CLK_DISABLE();
 8005132:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <HAL_COMP_MspDeInit+0x40>)
 8005134:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005136:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <HAL_COMP_MspDeInit+0x40>)
 8005138:	2101      	movs	r1, #1
 800513a:	438a      	bics	r2, r1
 800513c:	661a      	str	r2, [r3, #96]	@ 0x60

    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800513e:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_COMP_MspDeInit+0x44>)
 8005140:	2110      	movs	r1, #16
 8005142:	0018      	movs	r0, r3
 8005144:	f002 fade 	bl	8007704 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8005148:	4b07      	ldr	r3, [pc, #28]	@ (8005168 <HAL_COMP_MspDeInit+0x48>)
 800514a:	2104      	movs	r1, #4
 800514c:	0018      	movs	r0, r3
 800514e:	f002 fad9 	bl	8007704 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN COMP1_MspDeInit 1 */

    /* USER CODE END COMP1_MspDeInit 1 */
  }

}
 8005152:	46c0      	nop			@ (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b002      	add	sp, #8
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	40010200 	.word	0x40010200
 8005160:	40021000 	.word	0x40021000
 8005164:	50000800 	.word	0x50000800
 8005168:	50000400 	.word	0x50000400

0800516c <HAL_LCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b09d      	sub	sp, #116	@ 0x74
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005174:	235c      	movs	r3, #92	@ 0x5c
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	0018      	movs	r0, r3
 800517a:	2314      	movs	r3, #20
 800517c:	001a      	movs	r2, r3
 800517e:	2100      	movs	r1, #0
 8005180:	f00a fb98 	bl	800f8b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005184:	2418      	movs	r4, #24
 8005186:	193b      	adds	r3, r7, r4
 8005188:	0018      	movs	r0, r3
 800518a:	2344      	movs	r3, #68	@ 0x44
 800518c:	001a      	movs	r2, r3
 800518e:	2100      	movs	r1, #0
 8005190:	f00a fb90 	bl	800f8b4 <memset>
  if(hlcd->Instance==LCD)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a45      	ldr	r2, [pc, #276]	@ (80052b0 <HAL_LCD_MspInit+0x144>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d000      	beq.n	80051a0 <HAL_LCD_MspInit+0x34>
 800519e:	e083      	b.n	80052a8 <HAL_LCD_MspInit+0x13c>

    /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80051a0:	193b      	adds	r3, r7, r4
 80051a2:	2280      	movs	r2, #128	@ 0x80
 80051a4:	0212      	lsls	r2, r2, #8
 80051a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80051a8:	193b      	adds	r3, r7, r4
 80051aa:	2280      	movs	r2, #128	@ 0x80
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051b0:	193b      	adds	r3, r7, r4
 80051b2:	0018      	movs	r0, r3
 80051b4:	f005 fb46 	bl	800a844 <HAL_RCCEx_PeriphCLKConfig>
 80051b8:	1e03      	subs	r3, r0, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 80051bc:	f7ff fb2a 	bl	8004814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80051c0:	4b3c      	ldr	r3, [pc, #240]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051c4:	4b3b      	ldr	r3, [pc, #236]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051c6:	2180      	movs	r1, #128	@ 0x80
 80051c8:	0089      	lsls	r1, r1, #2
 80051ca:	430a      	orrs	r2, r1
 80051cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80051ce:	4b39      	ldr	r3, [pc, #228]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051d2:	2380      	movs	r3, #128	@ 0x80
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4013      	ands	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051dc:	4b35      	ldr	r3, [pc, #212]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051e0:	4b34      	ldr	r3, [pc, #208]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051e2:	2104      	movs	r1, #4
 80051e4:	430a      	orrs	r2, r1
 80051e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80051e8:	4b32      	ldr	r3, [pc, #200]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ec:	2204      	movs	r2, #4
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f4:	4b2f      	ldr	r3, [pc, #188]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051f8:	4b2e      	ldr	r3, [pc, #184]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 80051fa:	2101      	movs	r1, #1
 80051fc:	430a      	orrs	r2, r1
 80051fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005200:	4b2c      	ldr	r3, [pc, #176]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 8005202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800520c:	4b29      	ldr	r3, [pc, #164]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 800520e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005210:	4b28      	ldr	r3, [pc, #160]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 8005212:	2102      	movs	r1, #2
 8005214:	430a      	orrs	r2, r1
 8005216:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005218:	4b26      	ldr	r3, [pc, #152]	@ (80052b4 <HAL_LCD_MspInit+0x148>)
 800521a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521c:	2202      	movs	r2, #2
 800521e:	4013      	ands	r3, r2
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB7     ------> LCD_SEG21
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8005224:	245c      	movs	r4, #92	@ 0x5c
 8005226:	193b      	adds	r3, r7, r4
 8005228:	4a23      	ldr	r2, [pc, #140]	@ (80052b8 <HAL_LCD_MspInit+0x14c>)
 800522a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522c:	193b      	adds	r3, r7, r4
 800522e:	2202      	movs	r2, #2
 8005230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005232:	193b      	adds	r3, r7, r4
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005238:	193b      	adds	r3, r7, r4
 800523a:	2200      	movs	r2, #0
 800523c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800523e:	193b      	adds	r3, r7, r4
 8005240:	220b      	movs	r2, #11
 8005242:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005244:	193b      	adds	r3, r7, r4
 8005246:	4a1d      	ldr	r2, [pc, #116]	@ (80052bc <HAL_LCD_MspInit+0x150>)
 8005248:	0019      	movs	r1, r3
 800524a:	0010      	movs	r0, r2
 800524c:	f002 f8e6 	bl	800741c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8005250:	193b      	adds	r3, r7, r4
 8005252:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <HAL_LCD_MspInit+0x154>)
 8005254:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005256:	193b      	adds	r3, r7, r4
 8005258:	2202      	movs	r2, #2
 800525a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525c:	193b      	adds	r3, r7, r4
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005262:	193b      	adds	r3, r7, r4
 8005264:	2200      	movs	r2, #0
 8005266:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8005268:	193b      	adds	r3, r7, r4
 800526a:	220b      	movs	r2, #11
 800526c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800526e:	193a      	adds	r2, r7, r4
 8005270:	23a0      	movs	r3, #160	@ 0xa0
 8005272:	05db      	lsls	r3, r3, #23
 8005274:	0011      	movs	r1, r2
 8005276:	0018      	movs	r0, r3
 8005278:	f002 f8d0 	bl	800741c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800527c:	0021      	movs	r1, r4
 800527e:	187b      	adds	r3, r7, r1
 8005280:	4a10      	ldr	r2, [pc, #64]	@ (80052c4 <HAL_LCD_MspInit+0x158>)
 8005282:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	187b      	adds	r3, r7, r1
 8005286:	2202      	movs	r2, #2
 8005288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	187b      	adds	r3, r7, r1
 800528c:	2200      	movs	r2, #0
 800528e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005290:	187b      	adds	r3, r7, r1
 8005292:	2200      	movs	r2, #0
 8005294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8005296:	187b      	adds	r3, r7, r1
 8005298:	220b      	movs	r2, #11
 800529a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800529c:	187b      	adds	r3, r7, r1
 800529e:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <HAL_LCD_MspInit+0x15c>)
 80052a0:	0019      	movs	r1, r3
 80052a2:	0010      	movs	r0, r2
 80052a4:	f002 f8ba 	bl	800741c <HAL_GPIO_Init>

    /* USER CODE END LCD_MspInit 1 */

  }

}
 80052a8:	46c0      	nop			@ (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b01d      	add	sp, #116	@ 0x74
 80052ae:	bd90      	pop	{r4, r7, pc}
 80052b0:	40002400 	.word	0x40002400
 80052b4:	40021000 	.word	0x40021000
 80052b8:	000003ea 	.word	0x000003ea
 80052bc:	50000800 	.word	0x50000800
 80052c0:	000087ce 	.word	0x000087ce
 80052c4:	0000fabb 	.word	0x0000fabb
 80052c8:	50000400 	.word	0x50000400

080052cc <HAL_LCD_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspDeInit(LCD_HandleTypeDef* hlcd)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  if(hlcd->Instance==LCD)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005318 <HAL_LCD_MspDeInit+0x4c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d118      	bne.n	8005310 <HAL_LCD_MspDeInit+0x44>
  {
    /* USER CODE BEGIN LCD_MspDeInit 0 */

    /* USER CODE END LCD_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LCD_CLK_DISABLE();
 80052de:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <HAL_LCD_MspDeInit+0x50>)
 80052e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80052e2:	4b0e      	ldr	r3, [pc, #56]	@ (800531c <HAL_LCD_MspDeInit+0x50>)
 80052e4:	490e      	ldr	r1, [pc, #56]	@ (8005320 <HAL_LCD_MspDeInit+0x54>)
 80052e6:	400a      	ands	r2, r1
 80052e8:	659a      	str	r2, [r3, #88]	@ 0x58
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB7     ------> LCD_SEG21
    PB9     ------> LCD_COM3
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80052ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005324 <HAL_LCD_MspDeInit+0x58>)
 80052ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005328 <HAL_LCD_MspDeInit+0x5c>)
 80052ee:	0011      	movs	r1, r2
 80052f0:	0018      	movs	r0, r3
 80052f2:	f002 fa07 	bl	8007704 <HAL_GPIO_DeInit>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80052f6:	4a0d      	ldr	r2, [pc, #52]	@ (800532c <HAL_LCD_MspDeInit+0x60>)
 80052f8:	23a0      	movs	r3, #160	@ 0xa0
 80052fa:	05db      	lsls	r3, r3, #23
 80052fc:	0011      	movs	r1, r2
 80052fe:	0018      	movs	r0, r3
 8005300:	f002 fa00 	bl	8007704 <HAL_GPIO_DeInit>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8005304:	4a0a      	ldr	r2, [pc, #40]	@ (8005330 <HAL_LCD_MspDeInit+0x64>)
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <HAL_LCD_MspDeInit+0x68>)
 8005308:	0011      	movs	r1, r2
 800530a:	0018      	movs	r0, r3
 800530c:	f002 f9fa 	bl	8007704 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN LCD_MspDeInit 1 */

    /* USER CODE END LCD_MspDeInit 1 */
  }

}
 8005310:	46c0      	nop			@ (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	b002      	add	sp, #8
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40002400 	.word	0x40002400
 800531c:	40021000 	.word	0x40021000
 8005320:	fffffdff 	.word	0xfffffdff
 8005324:	000003ea 	.word	0x000003ea
 8005328:	50000800 	.word	0x50000800
 800532c:	000087ce 	.word	0x000087ce
 8005330:	0000fabb 	.word	0x0000fabb
 8005334:	50000400 	.word	0x50000400

08005338 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b095      	sub	sp, #84	@ 0x54
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005340:	240c      	movs	r4, #12
 8005342:	193b      	adds	r3, r7, r4
 8005344:	0018      	movs	r0, r3
 8005346:	2344      	movs	r3, #68	@ 0x44
 8005348:	001a      	movs	r2, r3
 800534a:	2100      	movs	r1, #0
 800534c:	f00a fab2 	bl	800f8b4 <memset>
  if(hlptim->Instance==LPTIM1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <HAL_LPTIM_MspInit+0x74>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d123      	bne.n	80053a2 <HAL_LPTIM_MspInit+0x6a>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800535a:	193b      	adds	r3, r7, r4
 800535c:	2280      	movs	r2, #128	@ 0x80
 800535e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8005360:	193b      	adds	r3, r7, r4
 8005362:	22c0      	movs	r2, #192	@ 0xc0
 8005364:	0312      	lsls	r2, r2, #12
 8005366:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005368:	193b      	adds	r3, r7, r4
 800536a:	0018      	movs	r0, r3
 800536c:	f005 fa6a 	bl	800a844 <HAL_RCCEx_PeriphCLKConfig>
 8005370:	1e03      	subs	r3, r0, #0
 8005372:	d001      	beq.n	8005378 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8005374:	f7ff fa4e 	bl	8004814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005378:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <HAL_LPTIM_MspInit+0x78>)
 800537a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800537c:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <HAL_LPTIM_MspInit+0x78>)
 800537e:	2180      	movs	r1, #128	@ 0x80
 8005380:	0609      	lsls	r1, r1, #24
 8005382:	430a      	orrs	r2, r1
 8005384:	659a      	str	r2, [r3, #88]	@ 0x58
 8005386:	4b0a      	ldr	r3, [pc, #40]	@ (80053b0 <HAL_LPTIM_MspInit+0x78>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538a:	0fdb      	lsrs	r3, r3, #31
 800538c:	07db      	lsls	r3, r3, #31
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8005392:	2200      	movs	r2, #0
 8005394:	2100      	movs	r1, #0
 8005396:	2011      	movs	r0, #17
 8005398:	f001 fffe 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800539c:	2011      	movs	r0, #17
 800539e:	f002 f810 	bl	80073c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b015      	add	sp, #84	@ 0x54
 80053a8:	bd90      	pop	{r4, r7, pc}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	40007c00 	.word	0x40007c00
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b095      	sub	sp, #84	@ 0x54
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053bc:	240c      	movs	r4, #12
 80053be:	193b      	adds	r3, r7, r4
 80053c0:	0018      	movs	r0, r3
 80053c2:	2344      	movs	r3, #68	@ 0x44
 80053c4:	001a      	movs	r2, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	f00a fa74 	bl	800f8b4 <memset>
  if(hrtc->Instance==RTC)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <HAL_RTC_MspInit+0x88>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d12e      	bne.n	8005434 <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80053d6:	193b      	adds	r3, r7, r4
 80053d8:	2280      	movs	r2, #128	@ 0x80
 80053da:	0212      	lsls	r2, r2, #8
 80053dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80053de:	193b      	adds	r3, r7, r4
 80053e0:	2280      	movs	r2, #128	@ 0x80
 80053e2:	0052      	lsls	r2, r2, #1
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053e6:	193b      	adds	r3, r7, r4
 80053e8:	0018      	movs	r0, r3
 80053ea:	f005 fa2b 	bl	800a844 <HAL_RCCEx_PeriphCLKConfig>
 80053ee:	1e03      	subs	r3, r0, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80053f2:	f7ff fa0f 	bl	8004814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80053f6:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <HAL_RTC_MspInit+0x8c>)
 80053f8:	2390      	movs	r3, #144	@ 0x90
 80053fa:	58d3      	ldr	r3, [r2, r3]
 80053fc:	4910      	ldr	r1, [pc, #64]	@ (8005440 <HAL_RTC_MspInit+0x8c>)
 80053fe:	2280      	movs	r2, #128	@ 0x80
 8005400:	0212      	lsls	r2, r2, #8
 8005402:	4313      	orrs	r3, r2
 8005404:	2290      	movs	r2, #144	@ 0x90
 8005406:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005408:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <HAL_RTC_MspInit+0x8c>)
 800540a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800540c:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <HAL_RTC_MspInit+0x8c>)
 800540e:	2180      	movs	r1, #128	@ 0x80
 8005410:	00c9      	lsls	r1, r1, #3
 8005412:	430a      	orrs	r2, r1
 8005414:	659a      	str	r2, [r3, #88]	@ 0x58
 8005416:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <HAL_RTC_MspInit+0x8c>)
 8005418:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4013      	ands	r3, r2
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8005424:	2200      	movs	r2, #0
 8005426:	2100      	movs	r1, #0
 8005428:	2002      	movs	r0, #2
 800542a:	f001 ffb5 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800542e:	2002      	movs	r0, #2
 8005430:	f001 ffc7 	bl	80073c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8005434:	46c0      	nop			@ (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b015      	add	sp, #84	@ 0x54
 800543a:	bd90      	pop	{r4, r7, pc}
 800543c:	40002800 	.word	0x40002800
 8005440:	40021000 	.word	0x40021000

08005444 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b08b      	sub	sp, #44	@ 0x2c
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544c:	2414      	movs	r4, #20
 800544e:	193b      	adds	r3, r7, r4
 8005450:	0018      	movs	r0, r3
 8005452:	2314      	movs	r3, #20
 8005454:	001a      	movs	r2, r3
 8005456:	2100      	movs	r1, #0
 8005458:	f00a fa2c 	bl	800f8b4 <memset>
  if(hspi->Instance==SPI3)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1b      	ldr	r2, [pc, #108]	@ (80054d0 <HAL_SPI_MspInit+0x8c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d130      	bne.n	80054c8 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005466:	4b1b      	ldr	r3, [pc, #108]	@ (80054d4 <HAL_SPI_MspInit+0x90>)
 8005468:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800546a:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <HAL_SPI_MspInit+0x90>)
 800546c:	2180      	movs	r1, #128	@ 0x80
 800546e:	0209      	lsls	r1, r1, #8
 8005470:	430a      	orrs	r2, r1
 8005472:	659a      	str	r2, [r3, #88]	@ 0x58
 8005474:	4b17      	ldr	r3, [pc, #92]	@ (80054d4 <HAL_SPI_MspInit+0x90>)
 8005476:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005478:	2380      	movs	r3, #128	@ 0x80
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <HAL_SPI_MspInit+0x90>)
 8005484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005486:	4b13      	ldr	r3, [pc, #76]	@ (80054d4 <HAL_SPI_MspInit+0x90>)
 8005488:	2104      	movs	r1, #4
 800548a:	430a      	orrs	r2, r1
 800548c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800548e:	4b11      	ldr	r3, [pc, #68]	@ (80054d4 <HAL_SPI_MspInit+0x90>)
 8005490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005492:	2204      	movs	r2, #4
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800549a:	193b      	adds	r3, r7, r4
 800549c:	22e0      	movs	r2, #224	@ 0xe0
 800549e:	0152      	lsls	r2, r2, #5
 80054a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a2:	0021      	movs	r1, r4
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	2202      	movs	r2, #2
 80054a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	2200      	movs	r2, #0
 80054ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	2200      	movs	r2, #0
 80054b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	2206      	movs	r2, #6
 80054ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	4a06      	ldr	r2, [pc, #24]	@ (80054d8 <HAL_SPI_MspInit+0x94>)
 80054c0:	0019      	movs	r1, r3
 80054c2:	0010      	movs	r0, r2
 80054c4:	f001 ffaa 	bl	800741c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80054c8:	46c0      	nop			@ (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b00b      	add	sp, #44	@ 0x2c
 80054ce:	bd90      	pop	{r4, r7, pc}
 80054d0:	40003c00 	.word	0x40003c00
 80054d4:	40021000 	.word	0x40021000
 80054d8:	50000800 	.word	0x50000800

080054dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b09b      	sub	sp, #108	@ 0x6c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e4:	2354      	movs	r3, #84	@ 0x54
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	0018      	movs	r0, r3
 80054ea:	2314      	movs	r3, #20
 80054ec:	001a      	movs	r2, r3
 80054ee:	2100      	movs	r1, #0
 80054f0:	f00a f9e0 	bl	800f8b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054f4:	2410      	movs	r4, #16
 80054f6:	193b      	adds	r3, r7, r4
 80054f8:	0018      	movs	r0, r3
 80054fa:	2344      	movs	r3, #68	@ 0x44
 80054fc:	001a      	movs	r2, r3
 80054fe:	2100      	movs	r1, #0
 8005500:	f00a f9d8 	bl	800f8b4 <memset>
  if(huart->Instance==USART3)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a21      	ldr	r2, [pc, #132]	@ (8005590 <HAL_UART_MspInit+0xb4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d13c      	bne.n	8005588 <HAL_UART_MspInit+0xac>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800550e:	193b      	adds	r3, r7, r4
 8005510:	2280      	movs	r2, #128	@ 0x80
 8005512:	0252      	lsls	r2, r2, #9
 8005514:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005516:	193b      	adds	r3, r7, r4
 8005518:	0018      	movs	r0, r3
 800551a:	f005 f993 	bl	800a844 <HAL_RCCEx_PeriphCLKConfig>
 800551e:	1e03      	subs	r3, r0, #0
 8005520:	d001      	beq.n	8005526 <HAL_UART_MspInit+0x4a>
    {
      Error_Handler();
 8005522:	f7ff f977 	bl	8004814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005526:	4b1b      	ldr	r3, [pc, #108]	@ (8005594 <HAL_UART_MspInit+0xb8>)
 8005528:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800552a:	4b1a      	ldr	r3, [pc, #104]	@ (8005594 <HAL_UART_MspInit+0xb8>)
 800552c:	2180      	movs	r1, #128	@ 0x80
 800552e:	02c9      	lsls	r1, r1, #11
 8005530:	430a      	orrs	r2, r1
 8005532:	659a      	str	r2, [r3, #88]	@ 0x58
 8005534:	4b17      	ldr	r3, [pc, #92]	@ (8005594 <HAL_UART_MspInit+0xb8>)
 8005536:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	02db      	lsls	r3, r3, #11
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <HAL_UART_MspInit+0xb8>)
 8005544:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <HAL_UART_MspInit+0xb8>)
 8005548:	2102      	movs	r1, #2
 800554a:	430a      	orrs	r2, r1
 800554c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800554e:	4b11      	ldr	r3, [pc, #68]	@ (8005594 <HAL_UART_MspInit+0xb8>)
 8005550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005552:	2202      	movs	r2, #2
 8005554:	4013      	ands	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800555a:	2154      	movs	r1, #84	@ 0x54
 800555c:	187b      	adds	r3, r7, r1
 800555e:	2280      	movs	r2, #128	@ 0x80
 8005560:	0052      	lsls	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005564:	187b      	adds	r3, r7, r1
 8005566:	2212      	movs	r2, #18
 8005568:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	187b      	adds	r3, r7, r1
 800556c:	2200      	movs	r2, #0
 800556e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005570:	187b      	adds	r3, r7, r1
 8005572:	2200      	movs	r2, #0
 8005574:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005576:	187b      	adds	r3, r7, r1
 8005578:	2207      	movs	r2, #7
 800557a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557c:	187b      	adds	r3, r7, r1
 800557e:	4a06      	ldr	r2, [pc, #24]	@ (8005598 <HAL_UART_MspInit+0xbc>)
 8005580:	0019      	movs	r1, r3
 8005582:	0010      	movs	r0, r2
 8005584:	f001 ff4a 	bl	800741c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	b01b      	add	sp, #108	@ 0x6c
 800558e:	bd90      	pop	{r4, r7, pc}
 8005590:	40004800 	.word	0x40004800
 8005594:	40021000 	.word	0x40021000
 8005598:	50000400 	.word	0x50000400

0800559c <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <HAL_UART_MspDeInit+0x34>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d10c      	bne.n	80055c8 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN USART3_MspDeInit 0 */

    /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 80055ae:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <HAL_UART_MspDeInit+0x38>)
 80055b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055b2:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <HAL_UART_MspDeInit+0x38>)
 80055b4:	4908      	ldr	r1, [pc, #32]	@ (80055d8 <HAL_UART_MspDeInit+0x3c>)
 80055b6:	400a      	ands	r2, r1
 80055b8:	659a      	str	r2, [r3, #88]	@ 0x58

    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80055ba:	2380      	movs	r3, #128	@ 0x80
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4a07      	ldr	r2, [pc, #28]	@ (80055dc <HAL_UART_MspDeInit+0x40>)
 80055c0:	0019      	movs	r1, r3
 80055c2:	0010      	movs	r0, r2
 80055c4:	f002 f89e 	bl	8007704 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80055c8:	46c0      	nop			@ (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b002      	add	sp, #8
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40004800 	.word	0x40004800
 80055d4:	40021000 	.word	0x40021000
 80055d8:	fffbffff 	.word	0xfffbffff
 80055dc:	50000400 	.word	0x50000400

080055e0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b095      	sub	sp, #84	@ 0x54
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055e8:	240c      	movs	r4, #12
 80055ea:	193b      	adds	r3, r7, r4
 80055ec:	0018      	movs	r0, r3
 80055ee:	2344      	movs	r3, #68	@ 0x44
 80055f0:	001a      	movs	r2, r3
 80055f2:	2100      	movs	r1, #0
 80055f4:	f00a f95e 	bl	800f8b4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a17      	ldr	r2, [pc, #92]	@ (800565c <HAL_PCD_MspInit+0x7c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d127      	bne.n	8005652 <HAL_PCD_MspInit+0x72>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005602:	193b      	adds	r3, r7, r4
 8005604:	2280      	movs	r2, #128	@ 0x80
 8005606:	0152      	lsls	r2, r2, #5
 8005608:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800560a:	193b      	adds	r3, r7, r4
 800560c:	22c0      	movs	r2, #192	@ 0xc0
 800560e:	0512      	lsls	r2, r2, #20
 8005610:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005612:	193b      	adds	r3, r7, r4
 8005614:	0018      	movs	r0, r3
 8005616:	f005 f915 	bl	800a844 <HAL_RCCEx_PeriphCLKConfig>
 800561a:	1e03      	subs	r3, r0, #0
 800561c:	d001      	beq.n	8005622 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 800561e:	f7ff f8f9 	bl	8004814 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8005622:	f004 fab3 	bl	8009b8c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005626:	4b0e      	ldr	r3, [pc, #56]	@ (8005660 <HAL_PCD_MspInit+0x80>)
 8005628:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <HAL_PCD_MspInit+0x80>)
 800562c:	2180      	movs	r1, #128	@ 0x80
 800562e:	0189      	lsls	r1, r1, #6
 8005630:	430a      	orrs	r2, r1
 8005632:	659a      	str	r2, [r3, #88]	@ 0x58
 8005634:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <HAL_PCD_MspInit+0x80>)
 8005636:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005638:	2380      	movs	r3, #128	@ 0x80
 800563a:	019b      	lsls	r3, r3, #6
 800563c:	4013      	ands	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	2008      	movs	r0, #8
 8005648:	f001 fea6 	bl	8007398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800564c:	2008      	movs	r0, #8
 800564e:	f001 feb8 	bl	80073c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b015      	add	sp, #84	@ 0x54
 8005658:	bd90      	pop	{r4, r7, pc}
 800565a:	46c0      	nop			@ (mov r8, r8)
 800565c:	40005c00 	.word	0x40005c00
 8005660:	40021000 	.word	0x40021000

08005664 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
    // 깨어난 이후 처리할 동작
    HAL_UART_Transmit(&huart3, (uint8_t*)"Wake Up by RTC\r\n", 17, HAL_MAX_DELAY);
 800566c:	2301      	movs	r3, #1
 800566e:	425b      	negs	r3, r3
 8005670:	4904      	ldr	r1, [pc, #16]	@ (8005684 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8005672:	4805      	ldr	r0, [pc, #20]	@ (8005688 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8005674:	2211      	movs	r2, #17
 8005676:	f007 fe19 	bl	800d2ac <HAL_UART_Transmit>
}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b002      	add	sp, #8
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	08011ff0 	.word	0x08011ff0
 8005688:	200003b0 	.word	0x200003b0

0800568c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005690:	46c0      	nop			@ (mov r8, r8)
 8005692:	e7fd      	b.n	8005690 <NMI_Handler+0x4>

08005694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	e7fd      	b.n	8005698 <HardFault_Handler+0x4>

0800569c <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056a0:	46c0      	nop			@ (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056b4:	f000 f9c0 	bl	8005a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056b8:	46c0      	nop			@ (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <RTC_TAMP_IRQHandler+0x34>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f006 fd54 	bl	800c174 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */
  // 1) Wake-Up 타이머 EXTI 라인(20) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	@ (80056f8 <RTC_TAMP_IRQHandler+0x38>)
 80056ce:	2280      	movs	r2, #128	@ 0x80
 80056d0:	0552      	lsls	r2, r2, #21
 80056d2:	60da      	str	r2, [r3, #12]
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80056d4:	4b07      	ldr	r3, [pc, #28]	@ (80056f4 <RTC_TAMP_IRQHandler+0x34>)
 80056d6:	0018      	movs	r0, r3
 80056d8:	f006 fd4c 	bl	800c174 <HAL_RTCEx_WakeUpTimerIRQHandler>

  // 2) Tamper EXTI 라인(21) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_TAMPER_EVENT;
 80056dc:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <RTC_TAMP_IRQHandler+0x38>)
 80056de:	2280      	movs	r2, #128	@ 0x80
 80056e0:	0592      	lsls	r2, r2, #22
 80056e2:	60da      	str	r2, [r3, #12]
  HAL_RTCEx_TamperIRQHandler(&hrtc);
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <RTC_TAMP_IRQHandler+0x34>)
 80056e6:	0018      	movs	r0, r3
 80056e8:	f006 fd5e 	bl	800c1a8 <HAL_RTCEx_TamperIRQHandler>
  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80056ec:	46c0      	nop			@ (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	2000031c 	.word	0x2000031c
 80056f8:	40021800 	.word	0x40021800

080056fc <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8005700:	46c0      	nop			@ (mov r8, r8)
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800570c:	4b03      	ldr	r3, [pc, #12]	@ (800571c <USB_DRD_FS_IRQHandler+0x14>)
 800570e:	0018      	movs	r0, r3
 8005710:	f002 ffc0 	bl	8008694 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8005714:	46c0      	nop			@ (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	20000444 	.word	0x20000444

08005720 <ADC_COMP1_2_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC_COMP1_2_IRQHandler(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 0 */

  /* USER CODE END ADC_COMP1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005724:	4b03      	ldr	r3, [pc, #12]	@ (8005734 <ADC_COMP1_2_IRQHandler+0x14>)
 8005726:	0018      	movs	r0, r3
 8005728:	f000 feb0 	bl	800648c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 1 */

  /* USER CODE END ADC_COMP1_2_IRQn 1 */
}
 800572c:	46c0      	nop			@ (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	200001f4 	.word	0x200001f4

08005738 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800573c:	4b03      	ldr	r3, [pc, #12]	@ (800574c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800573e:	0018      	movs	r0, r3
 8005740:	f002 fb8a 	bl	8007e58 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8005744:	46c0      	nop			@ (mov r8, r8)
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	46c0      	nop			@ (mov r8, r8)
 800574c:	200002c4 	.word	0x200002c4

08005750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  return 1;
 8005754:	2301      	movs	r3, #1
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <_kill>:

int _kill(int pid, int sig)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005766:	f00a f8ff 	bl	800f968 <__errno>
 800576a:	0003      	movs	r3, r0
 800576c:	2216      	movs	r2, #22
 800576e:	601a      	str	r2, [r3, #0]
  return -1;
 8005770:	2301      	movs	r3, #1
 8005772:	425b      	negs	r3, r3
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}

0800577c <_exit>:

void _exit (int status)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005784:	2301      	movs	r3, #1
 8005786:	425a      	negs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	0011      	movs	r1, r2
 800578c:	0018      	movs	r0, r3
 800578e:	f7ff ffe5 	bl	800575c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005792:	46c0      	nop			@ (mov r8, r8)
 8005794:	e7fd      	b.n	8005792 <_exit+0x16>

08005796 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e00a      	b.n	80057be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80057a8:	e000      	b.n	80057ac <_read+0x16>
 80057aa:	bf00      	nop
 80057ac:	0001      	movs	r1, r0
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	60ba      	str	r2, [r7, #8]
 80057b4:	b2ca      	uxtb	r2, r1
 80057b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3301      	adds	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	dbf0      	blt.n	80057a8 <_read+0x12>
  }

  return len;
 80057c6:	687b      	ldr	r3, [r7, #4]
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b006      	add	sp, #24
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e009      	b.n	80057f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	60ba      	str	r2, [r7, #8]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	0018      	movs	r0, r3
 80057ec:	e000      	b.n	80057f0 <_write+0x20>
 80057ee:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3301      	adds	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	dbf1      	blt.n	80057e2 <_write+0x12>
  }
  return len;
 80057fe:	687b      	ldr	r3, [r7, #4]
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b006      	add	sp, #24
 8005806:	bd80      	pop	{r7, pc}

08005808 <_close>:

int _close(int file)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005810:	2301      	movs	r3, #1
 8005812:	425b      	negs	r3, r3
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b002      	add	sp, #8
 800581a:	bd80      	pop	{r7, pc}

0800581c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2280      	movs	r2, #128	@ 0x80
 800582a:	0192      	lsls	r2, r2, #6
 800582c:	605a      	str	r2, [r3, #4]
  return 0;
 800582e:	2300      	movs	r3, #0
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b002      	add	sp, #8
 8005836:	bd80      	pop	{r7, pc}

08005838 <_isatty>:

int _isatty(int file)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005840:	2301      	movs	r3, #1
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}

0800584a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005856:	2300      	movs	r3, #0
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b004      	add	sp, #16
 800585e:	bd80      	pop	{r7, pc}

08005860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005868:	4a14      	ldr	r2, [pc, #80]	@ (80058bc <_sbrk+0x5c>)
 800586a:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <_sbrk+0x60>)
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005874:	4b13      	ldr	r3, [pc, #76]	@ (80058c4 <_sbrk+0x64>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800587c:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <_sbrk+0x64>)
 800587e:	4a12      	ldr	r2, [pc, #72]	@ (80058c8 <_sbrk+0x68>)
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005882:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <_sbrk+0x64>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	d207      	bcs.n	80058a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005890:	f00a f86a 	bl	800f968 <__errno>
 8005894:	0003      	movs	r3, r0
 8005896:	220c      	movs	r2, #12
 8005898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800589a:	2301      	movs	r3, #1
 800589c:	425b      	negs	r3, r3
 800589e:	e009      	b.n	80058b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058a0:	4b08      	ldr	r3, [pc, #32]	@ (80058c4 <_sbrk+0x64>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058a6:	4b07      	ldr	r3, [pc, #28]	@ (80058c4 <_sbrk+0x64>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	18d2      	adds	r2, r2, r3
 80058ae:	4b05      	ldr	r3, [pc, #20]	@ (80058c4 <_sbrk+0x64>)
 80058b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b006      	add	sp, #24
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	2000a000 	.word	0x2000a000
 80058c0:	00000400 	.word	0x00000400
 80058c4:	20000740 	.word	0x20000740
 80058c8:	200008b8 	.word	0x200008b8

080058cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058d2:	4b12      	ldr	r3, [pc, #72]	@ (800591c <SystemInit+0x50>)
 80058d4:	2280      	movs	r2, #128	@ 0x80
 80058d6:	0512      	lsls	r2, r2, #20
 80058d8:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 80058da:	4a11      	ldr	r2, [pc, #68]	@ (8005920 <SystemInit+0x54>)
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	58d3      	ldr	r3, [r2, r3]
 80058e0:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 80058e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005920 <SystemInit+0x54>)
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	2380      	movs	r3, #128	@ 0x80
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	4013      	ands	r3, r2
 80058f0:	d010      	beq.n	8005914 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	22ff      	movs	r2, #255	@ 0xff
 80058f6:	4013      	ands	r3, r2
 80058f8:	2bcc      	cmp	r3, #204	@ 0xcc
 80058fa:	d00b      	beq.n	8005914 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	22ff      	movs	r2, #255	@ 0xff
 8005900:	4013      	ands	r3, r2
 8005902:	2baa      	cmp	r3, #170	@ 0xaa
 8005904:	d006      	beq.n	8005914 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8005906:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <SystemInit+0x54>)
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b05      	ldr	r3, [pc, #20]	@ (8005920 <SystemInit+0x54>)
 800590c:	2180      	movs	r1, #128	@ 0x80
 800590e:	02c9      	lsls	r1, r1, #11
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8005914:	46c0      	nop			@ (mov r8, r8)
 8005916:	46bd      	mov	sp, r7
 8005918:	b002      	add	sp, #8
 800591a:	bd80      	pop	{r7, pc}
 800591c:	e000ed00 	.word	0xe000ed00
 8005920:	40022000 	.word	0x40022000

08005924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005924:	480d      	ldr	r0, [pc, #52]	@ (800595c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005928:	f7ff ffd0 	bl	80058cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800592c:	480c      	ldr	r0, [pc, #48]	@ (8005960 <LoopForever+0x6>)
  ldr r1, =_edata
 800592e:	490d      	ldr	r1, [pc, #52]	@ (8005964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005930:	4a0d      	ldr	r2, [pc, #52]	@ (8005968 <LoopForever+0xe>)
  movs r3, #0
 8005932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005934:	e002      	b.n	800593c <LoopCopyDataInit>

08005936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800593a:	3304      	adds	r3, #4

0800593c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800593c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800593e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005940:	d3f9      	bcc.n	8005936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005942:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005944:	4c0a      	ldr	r4, [pc, #40]	@ (8005970 <LoopForever+0x16>)
  movs r3, #0
 8005946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005948:	e001      	b.n	800594e <LoopFillZerobss>

0800594a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800594a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800594c:	3204      	adds	r2, #4

0800594e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800594e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005950:	d3fb      	bcc.n	800594a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005952:	f00a f80f 	bl	800f974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005956:	f7fe fb13 	bl	8003f80 <main>

0800595a <LoopForever>:

LoopForever:
  b LoopForever
 800595a:	e7fe      	b.n	800595a <LoopForever>
  ldr   r0, =_estack
 800595c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005964:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005968:	0801253c 	.word	0x0801253c
  ldr r2, =_sbss
 800596c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005970:	200008b8 	.word	0x200008b8

08005974 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005974:	e7fe      	b.n	8005974 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>

08005976 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800597c:	1dfb      	adds	r3, r7, #7
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005982:	2003      	movs	r0, #3
 8005984:	f000 f80e 	bl	80059a4 <HAL_InitTick>
 8005988:	1e03      	subs	r3, r0, #0
 800598a:	d003      	beq.n	8005994 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800598c:	1dfb      	adds	r3, r7, #7
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e001      	b.n	8005998 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005994:	f7ff fab0 	bl	8004ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005998:	1dfb      	adds	r3, r7, #7
 800599a:	781b      	ldrb	r3, [r3, #0]
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059ac:	230f      	movs	r3, #15
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80059b4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <HAL_InitTick+0x88>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02b      	beq.n	8005a14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80059bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a30 <HAL_InitTick+0x8c>)
 80059be:	681c      	ldr	r4, [r3, #0]
 80059c0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <HAL_InitTick+0x88>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	0019      	movs	r1, r3
 80059c6:	23fa      	movs	r3, #250	@ 0xfa
 80059c8:	0098      	lsls	r0, r3, #2
 80059ca:	f7fa fbb9 	bl	8000140 <__udivsi3>
 80059ce:	0003      	movs	r3, r0
 80059d0:	0019      	movs	r1, r3
 80059d2:	0020      	movs	r0, r4
 80059d4:	f7fa fbb4 	bl	8000140 <__udivsi3>
 80059d8:	0003      	movs	r3, r0
 80059da:	0018      	movs	r0, r3
 80059dc:	f001 fd11 	bl	8007402 <HAL_SYSTICK_Config>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d112      	bne.n	8005a0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d80a      	bhi.n	8005a00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	2301      	movs	r3, #1
 80059ee:	425b      	negs	r3, r3
 80059f0:	2200      	movs	r2, #0
 80059f2:	0018      	movs	r0, r3
 80059f4:	f001 fcd0 	bl	8007398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a34 <HAL_InitTick+0x90>)
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e00d      	b.n	8005a1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005a00:	230f      	movs	r3, #15
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e008      	b.n	8005a1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a0a:	230f      	movs	r3, #15
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e003      	b.n	8005a1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a14:	230f      	movs	r3, #15
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	781b      	ldrb	r3, [r3, #0]
}
 8005a22:	0018      	movs	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b005      	add	sp, #20
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	46c0      	nop			@ (mov r8, r8)
 8005a2c:	2000000c 	.word	0x2000000c
 8005a30:	20000004 	.word	0x20000004
 8005a34:	20000008 	.word	0x20000008

08005a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <HAL_IncTick+0x18>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <HAL_IncTick+0x1c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	18d2      	adds	r2, r2, r3
 8005a46:	4b02      	ldr	r3, [pc, #8]	@ (8005a50 <HAL_IncTick+0x18>)
 8005a48:	601a      	str	r2, [r3, #0]
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000744 	.word	0x20000744
 8005a54:	2000000c 	.word	0x2000000c

08005a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a5c:	4b02      	ldr	r3, [pc, #8]	@ (8005a68 <HAL_GetTick+0x10>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	20000744 	.word	0x20000744

08005a6c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <HAL_SuspendTick+0x18>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b03      	ldr	r3, [pc, #12]	@ (8005a84 <HAL_SuspendTick+0x18>)
 8005a76:	2102      	movs	r1, #2
 8005a78:	438a      	bics	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]
}
 8005a7c:	46c0      	nop			@ (mov r8, r8)
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			@ (mov r8, r8)
 8005a84:	e000e010 	.word	0xe000e010

08005a88 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <HAL_ResumeTick+0x18>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b03      	ldr	r3, [pc, #12]	@ (8005aa0 <HAL_ResumeTick+0x18>)
 8005a92:	2102      	movs	r1, #2
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
}
 8005a98:	46c0      	nop			@ (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	46c0      	nop			@ (mov r8, r8)
 8005aa0:	e000e010 	.word	0xe000e010

08005aa4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a05      	ldr	r2, [pc, #20]	@ (8005ac8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005ab4:	401a      	ands	r2, r3
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
}
 8005abe:	46c0      	nop			@ (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b002      	add	sp, #8
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
 8005ac8:	fe3fffff 	.word	0xfe3fffff

08005acc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	23e0      	movs	r3, #224	@ 0xe0
 8005ada:	045b      	lsls	r3, r3, #17
 8005adc:	4013      	ands	r3, r2
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b002      	add	sp, #8
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	2104      	movs	r1, #4
 8005afa:	400a      	ands	r2, r1
 8005afc:	2107      	movs	r1, #7
 8005afe:	4091      	lsls	r1, r2
 8005b00:	000a      	movs	r2, r1
 8005b02:	43d2      	mvns	r2, r2
 8005b04:	401a      	ands	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2104      	movs	r1, #4
 8005b0a:	400b      	ands	r3, r1
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4099      	lsls	r1, r3
 8005b10:	000b      	movs	r3, r1
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005b18:	46c0      	nop			@ (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b004      	add	sp, #16
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	2104      	movs	r1, #4
 8005b32:	400a      	ands	r2, r1
 8005b34:	2107      	movs	r1, #7
 8005b36:	4091      	lsls	r1, r2
 8005b38:	000a      	movs	r2, r1
 8005b3a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2104      	movs	r1, #4
 8005b40:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005b42:	40da      	lsrs	r2, r3
 8005b44:	0013      	movs	r3, r2
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	23c0      	movs	r3, #192	@ 0xc0
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d101      	bne.n	8005b66 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	211f      	movs	r1, #31
 8005b84:	400a      	ands	r2, r1
 8005b86:	210f      	movs	r1, #15
 8005b88:	4091      	lsls	r1, r2
 8005b8a:	000a      	movs	r2, r1
 8005b8c:	43d2      	mvns	r2, r2
 8005b8e:	401a      	ands	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	0e9b      	lsrs	r3, r3, #26
 8005b94:	210f      	movs	r1, #15
 8005b96:	4019      	ands	r1, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	201f      	movs	r0, #31
 8005b9c:	4003      	ands	r3, r0
 8005b9e:	4099      	lsls	r1, r3
 8005ba0:	000b      	movs	r3, r1
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b004      	add	sp, #16
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	025b      	lsls	r3, r3, #9
 8005bc2:	0a5b      	lsrs	r3, r3, #9
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bca:	46c0      	nop			@ (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b002      	add	sp, #8
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	0252      	lsls	r2, r2, #9
 8005be4:	0a52      	lsrs	r2, r2, #9
 8005be6:	43d2      	mvns	r2, r2
 8005be8:	401a      	ands	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	2203      	movs	r2, #3
 8005c04:	4013      	ands	r3, r2
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b002      	add	sp, #8
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	0212      	lsls	r2, r2, #8
 8005c24:	43d2      	mvns	r2, r2
 8005c26:	401a      	ands	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	400b      	ands	r3, r1
 8005c30:	4904      	ldr	r1, [pc, #16]	@ (8005c44 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005c32:	400b      	ands	r3, r1
 8005c34:	431a      	orrs	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b004      	add	sp, #16
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	7fffff00 	.word	0x7fffff00

08005c48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a05      	ldr	r2, [pc, #20]	@ (8005c6c <LL_ADC_EnableInternalRegulator+0x24>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	2280      	movs	r2, #128	@ 0x80
 8005c5a:	0552      	lsls	r2, r2, #21
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b002      	add	sp, #8
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	6fffffe8 	.word	0x6fffffe8

08005c70 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4a03      	ldr	r2, [pc, #12]	@ (8005c8c <LL_ADC_DisableInternalRegulator+0x1c>)
 8005c7e:	401a      	ands	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	609a      	str	r2, [r3, #8]
}
 8005c84:	46c0      	nop			@ (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b002      	add	sp, #8
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	6fffffe8 	.word	0x6fffffe8

08005c90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	2380      	movs	r3, #128	@ 0x80
 8005c9e:	055b      	lsls	r3, r3, #21
 8005ca0:	401a      	ands	r2, r3
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	055b      	lsls	r3, r3, #21
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d101      	bne.n	8005cae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4a04      	ldr	r2, [pc, #16]	@ (8005cd8 <LL_ADC_Enable+0x20>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2201      	movs	r2, #1
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005cd0:	46c0      	nop			@ (mov r8, r8)
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	7fffffe8 	.word	0x7fffffe8

08005cdc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a04      	ldr	r2, [pc, #16]	@ (8005cfc <LL_ADC_Disable+0x20>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	2202      	movs	r2, #2
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	7fffffe8 	.word	0x7fffffe8

08005d00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <LL_ADC_IsEnabled+0x18>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <LL_ADC_IsEnabled+0x1a>
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b002      	add	sp, #8
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d101      	bne.n	8005d3a <LL_ADC_IsDisableOngoing+0x18>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <LL_ADC_IsDisableOngoing+0x1a>
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b002      	add	sp, #8
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <LL_ADC_REG_StartConversion+0x20>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	2204      	movs	r2, #4
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005d5c:	46c0      	nop			@ (mov r8, r8)
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b002      	add	sp, #8
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	7fffffe8 	.word	0x7fffffe8

08005d68 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4a04      	ldr	r2, [pc, #16]	@ (8005d88 <LL_ADC_REG_StopConversion+0x20>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	2210      	movs	r2, #16
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b002      	add	sp, #8
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	7fffffe8 	.word	0x7fffffe8

08005d8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d101      	bne.n	8005da4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b002      	add	sp, #8
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005db8:	231f      	movs	r3, #31
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e17f      	b.n	80060d6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff f8b5 	bl	8004f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2254      	movs	r2, #84	@ 0x54
 8005df0:	2100      	movs	r1, #0
 8005df2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff ff49 	bl	8005c90 <LL_ADC_IsInternalRegulatorEnabled>
 8005dfe:	1e03      	subs	r3, r0, #0
 8005e00:	d115      	bne.n	8005e2e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7ff ff1e 	bl	8005c48 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e0c:	4bb4      	ldr	r3, [pc, #720]	@ (80060e0 <HAL_ADC_Init+0x330>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	49b4      	ldr	r1, [pc, #720]	@ (80060e4 <HAL_ADC_Init+0x334>)
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7fa f994 	bl	8000140 <__udivsi3>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005e20:	e002      	b.n	8005e28 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f9      	bne.n	8005e22 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f7ff ff2c 	bl	8005c90 <LL_ADC_IsInternalRegulatorEnabled>
 8005e38:	1e03      	subs	r3, r0, #0
 8005e3a:	d10f      	bne.n	8005e5c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e40:	2210      	movs	r2, #16
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e54:	231f      	movs	r3, #31
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	2201      	movs	r2, #1
 8005e5a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7ff ff93 	bl	8005d8c <LL_ADC_REG_IsConversionOngoing>
 8005e66:	0003      	movs	r3, r0
 8005e68:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6e:	2210      	movs	r2, #16
 8005e70:	4013      	ands	r3, r2
 8005e72:	d000      	beq.n	8005e76 <HAL_ADC_Init+0xc6>
 8005e74:	e122      	b.n	80060bc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d000      	beq.n	8005e7e <HAL_ADC_Init+0xce>
 8005e7c:	e11e      	b.n	80060bc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e82:	4a99      	ldr	r2, [pc, #612]	@ (80060e8 <HAL_ADC_Init+0x338>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	2202      	movs	r2, #2
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	0018      	movs	r0, r3
 8005e94:	f7ff ff34 	bl	8005d00 <LL_ADC_IsEnabled>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d000      	beq.n	8005e9e <HAL_ADC_Init+0xee>
 8005e9c:	e0ad      	b.n	8005ffa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	7e1b      	ldrb	r3, [r3, #24]
 8005ea6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005ea8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7e5b      	ldrb	r3, [r3, #25]
 8005eae:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005eb0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	7e9b      	ldrb	r3, [r3, #26]
 8005eb6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005eb8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_ADC_Init+0x118>
 8005ec2:	2380      	movs	r3, #128	@ 0x80
 8005ec4:	015b      	lsls	r3, r3, #5
 8005ec6:	e000      	b.n	8005eca <HAL_ADC_Init+0x11a>
 8005ec8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005eca:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005ed0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da04      	bge.n	8005ee4 <HAL_ADC_Init+0x134>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	e001      	b.n	8005ee8 <HAL_ADC_Init+0x138>
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005ee8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	212c      	movs	r1, #44	@ 0x2c
 8005eee:	5c5b      	ldrb	r3, [r3, r1]
 8005ef0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005ef2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	5c9b      	ldrb	r3, [r3, r2]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d115      	bne.n	8005f30 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	7e9b      	ldrb	r3, [r3, #26]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2280      	movs	r2, #128	@ 0x80
 8005f10:	0252      	lsls	r2, r2, #9
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e00b      	b.n	8005f30 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f28:	2201      	movs	r2, #1
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f3c:	23e0      	movs	r3, #224	@ 0xe0
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005f46:	4313      	orrs	r3, r2
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4a65      	ldr	r2, [pc, #404]	@ (80060ec <HAL_ADC_Init+0x33c>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	0019      	movs	r1, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	0f9b      	lsrs	r3, r3, #30
 8005f6a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f70:	4313      	orrs	r3, r2
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	223c      	movs	r2, #60	@ 0x3c
 8005f7c:	5c9b      	ldrb	r3, [r3, r2]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d111      	bne.n	8005fa6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	0f9b      	lsrs	r3, r3, #30
 8005f88:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f8e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005f94:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005f9a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	4a50      	ldr	r2, [pc, #320]	@ (80060f0 <HAL_ADC_Init+0x340>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	0019      	movs	r1, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	23c0      	movs	r3, #192	@ 0xc0
 8005fc2:	061b      	lsls	r3, r3, #24
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d018      	beq.n	8005ffa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	05db      	lsls	r3, r3, #23
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d012      	beq.n	8005ffa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	061b      	lsls	r3, r3, #24
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d00c      	beq.n	8005ffa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005fe0:	4b44      	ldr	r3, [pc, #272]	@ (80060f4 <HAL_ADC_Init+0x344>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a44      	ldr	r2, [pc, #272]	@ (80060f8 <HAL_ADC_Init+0x348>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	23f0      	movs	r3, #240	@ 0xf0
 8005ff0:	039b      	lsls	r3, r3, #14
 8005ff2:	401a      	ands	r2, r3
 8005ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80060f4 <HAL_ADC_Init+0x344>)
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006002:	001a      	movs	r2, r3
 8006004:	2100      	movs	r1, #0
 8006006:	f7ff fd6e 	bl	8005ae6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	493a      	ldr	r1, [pc, #232]	@ (80060fc <HAL_ADC_Init+0x34c>)
 8006014:	001a      	movs	r2, r3
 8006016:	f7ff fd66 	bl	8005ae6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2110      	movs	r1, #16
 800602e:	4249      	negs	r1, r1
 8006030:	430a      	orrs	r2, r1
 8006032:	629a      	str	r2, [r3, #40]	@ 0x28
 8006034:	e018      	b.n	8006068 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	2380      	movs	r3, #128	@ 0x80
 800603c:	039b      	lsls	r3, r3, #14
 800603e:	429a      	cmp	r2, r3
 8006040:	d112      	bne.n	8006068 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	3b01      	subs	r3, #1
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	221c      	movs	r2, #28
 8006052:	4013      	ands	r3, r2
 8006054:	2210      	movs	r2, #16
 8006056:	4252      	negs	r2, r2
 8006058:	409a      	lsls	r2, r3
 800605a:	0011      	movs	r1, r2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2100      	movs	r1, #0
 800606e:	0018      	movs	r0, r3
 8006070:	f7ff fd56 	bl	8005b20 <LL_ADC_GetSamplingTimeCommonChannels>
 8006074:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800607a:	429a      	cmp	r2, r3
 800607c:	d10b      	bne.n	8006096 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	2203      	movs	r2, #3
 800608a:	4393      	bics	r3, r2
 800608c:	2201      	movs	r2, #1
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006094:	e01c      	b.n	80060d0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609a:	2212      	movs	r2, #18
 800609c:	4393      	bics	r3, r2
 800609e:	2210      	movs	r2, #16
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	2201      	movs	r2, #1
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80060b2:	231f      	movs	r3, #31
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	2201      	movs	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80060ba:	e009      	b.n	80060d0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	2210      	movs	r2, #16
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80060c8:	231f      	movs	r3, #31
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2201      	movs	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80060d0:	231f      	movs	r3, #31
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	781b      	ldrb	r3, [r3, #0]
}
 80060d6:	0018      	movs	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	b008      	add	sp, #32
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	20000004 	.word	0x20000004
 80060e4:	00030d40 	.word	0x00030d40
 80060e8:	fffffefd 	.word	0xfffffefd
 80060ec:	ffde0201 	.word	0xffde0201
 80060f0:	1ffffc02 	.word	0x1ffffc02
 80060f4:	40012708 	.word	0x40012708
 80060f8:	ffc3ffff 	.word	0xffc3ffff
 80060fc:	7fffff04 	.word	0x7fffff04

08006100 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8006100:	b5b0      	push	{r4, r5, r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e081      	b.n	8006216 <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006116:	2202      	movs	r2, #2
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800611e:	250f      	movs	r5, #15
 8006120:	197c      	adds	r4, r7, r5
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 fc8f 	bl	8006a48 <ADC_ConversionStop>
 800612a:	0003      	movs	r3, r0
 800612c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800612e:	197b      	adds	r3, r7, r5
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d112      	bne.n	800615c <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006136:	197c      	adds	r4, r7, r5
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	0018      	movs	r0, r3
 800613c:	f000 fd4c 	bl	8006bd8 <ADC_Disable>
 8006140:	0003      	movs	r3, r0
 8006142:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006144:	197b      	adds	r3, r7, r5
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	0018      	movs	r0, r3
 8006158:	f7ff fd8a 	bl	8005c70 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	492e      	ldr	r1, [pc, #184]	@ (8006220 <HAL_ADC_DeInit+0x120>)
 8006168:	400a      	ands	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2c      	ldr	r2, [pc, #176]	@ (8006224 <HAL_ADC_DeInit+0x124>)
 8006172:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	492a      	ldr	r1, [pc, #168]	@ (8006228 <HAL_ADC_DeInit+0x128>)
 8006180:	400a      	ands	r2, r1
 8006182:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2107      	movs	r1, #7
 8006190:	438a      	bics	r2, r1
 8006192:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	491f      	ldr	r1, [pc, #124]	@ (800622c <HAL_ADC_DeInit+0x12c>)
 80061ae:	400a      	ands	r2, r1
 80061b0:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	491b      	ldr	r1, [pc, #108]	@ (800622c <HAL_ADC_DeInit+0x12c>)
 80061be:	400a      	ands	r2, r1
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4917      	ldr	r1, [pc, #92]	@ (800622c <HAL_ADC_DeInit+0x12c>)
 80061ce:	400a      	ands	r2, r1
 80061d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	0092      	lsls	r2, r2, #2
 80061de:	0892      	lsrs	r2, r2, #2
 80061e0:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80061e2:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <HAL_ADC_DeInit+0x130>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <HAL_ADC_DeInit+0x130>)
 80061e8:	4912      	ldr	r1, [pc, #72]	@ (8006234 <HAL_ADC_DeInit+0x134>)
 80061ea:	400a      	ands	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7fe ff11 	bl	8005018 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2254      	movs	r2, #84	@ 0x54
 800620c:	2100      	movs	r1, #0
 800620e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006210:	230f      	movs	r3, #15
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	781b      	ldrb	r3, [r3, #0]
}
 8006216:	0018      	movs	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	b004      	add	sp, #16
 800621c:	bdb0      	pop	{r4, r5, r7, pc}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	fffff460 	.word	0xfffff460
 8006224:	00000b9f 	.word	0x00000b9f
 8006228:	831e0200 	.word	0x831e0200
 800622c:	f000f000 	.word	0xf000f000
 8006230:	40012708 	.word	0x40012708
 8006234:	fe03ffff 	.word	0xfe03ffff

08006238 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006238:	b5b0      	push	{r4, r5, r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	0018      	movs	r0, r3
 8006246:	f7ff fda1 	bl	8005d8c <LL_ADC_REG_IsConversionOngoing>
 800624a:	1e03      	subs	r3, r0, #0
 800624c:	d135      	bne.n	80062ba <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2254      	movs	r2, #84	@ 0x54
 8006252:	5c9b      	ldrb	r3, [r3, r2]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_ADC_Start+0x24>
 8006258:	2302      	movs	r3, #2
 800625a:	e035      	b.n	80062c8 <HAL_ADC_Start+0x90>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2254      	movs	r2, #84	@ 0x54
 8006260:	2101      	movs	r1, #1
 8006262:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006264:	250f      	movs	r5, #15
 8006266:	197c      	adds	r4, r7, r5
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	f000 fc2e 	bl	8006acc <ADC_Enable>
 8006270:	0003      	movs	r3, r0
 8006272:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006274:	197b      	adds	r3, r7, r5
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d119      	bne.n	80062b0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006280:	4a13      	ldr	r2, [pc, #76]	@ (80062d0 <HAL_ADC_Start+0x98>)
 8006282:	4013      	ands	r3, r2
 8006284:	2280      	movs	r2, #128	@ 0x80
 8006286:	0052      	lsls	r2, r2, #1
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	221c      	movs	r2, #28
 800629a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2254      	movs	r2, #84	@ 0x54
 80062a0:	2100      	movs	r1, #0
 80062a2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7ff fd4b 	bl	8005d44 <LL_ADC_REG_StartConversion>
 80062ae:	e008      	b.n	80062c2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2254      	movs	r2, #84	@ 0x54
 80062b4:	2100      	movs	r1, #0
 80062b6:	5499      	strb	r1, [r3, r2]
 80062b8:	e003      	b.n	80062c2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80062ba:	230f      	movs	r3, #15
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	2202      	movs	r2, #2
 80062c0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80062c2:	230f      	movs	r3, #15
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	781b      	ldrb	r3, [r3, #0]
}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b004      	add	sp, #16
 80062ce:	bdb0      	pop	{r4, r5, r7, pc}
 80062d0:	fffff0fe 	.word	0xfffff0fe

080062d4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80062d4:	b5b0      	push	{r4, r5, r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2254      	movs	r2, #84	@ 0x54
 80062e0:	5c9b      	ldrb	r3, [r3, r2]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_ADC_Stop+0x16>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e029      	b.n	800633e <HAL_ADC_Stop+0x6a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2254      	movs	r2, #84	@ 0x54
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80062f2:	250f      	movs	r5, #15
 80062f4:	197c      	adds	r4, r7, r5
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	0018      	movs	r0, r3
 80062fa:	f000 fba5 	bl	8006a48 <ADC_ConversionStop>
 80062fe:	0003      	movs	r3, r0
 8006300:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006302:	197b      	adds	r3, r7, r5
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d112      	bne.n	8006330 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800630a:	197c      	adds	r4, r7, r5
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	0018      	movs	r0, r3
 8006310:	f000 fc62 	bl	8006bd8 <ADC_Disable>
 8006314:	0003      	movs	r3, r0
 8006316:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006318:	197b      	adds	r3, r7, r5
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d107      	bne.n	8006330 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006324:	4a08      	ldr	r2, [pc, #32]	@ (8006348 <HAL_ADC_Stop+0x74>)
 8006326:	4013      	ands	r3, r2
 8006328:	2201      	movs	r2, #1
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2254      	movs	r2, #84	@ 0x54
 8006334:	2100      	movs	r1, #0
 8006336:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006338:	230f      	movs	r3, #15
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	781b      	ldrb	r3, [r3, #0]
}
 800633e:	0018      	movs	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	b004      	add	sp, #16
 8006344:	bdb0      	pop	{r4, r5, r7, pc}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	fffffefe 	.word	0xfffffefe

0800634c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	2b08      	cmp	r3, #8
 800635c:	d102      	bne.n	8006364 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800635e:	2308      	movs	r3, #8
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e00f      	b.n	8006384 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	4013      	ands	r3, r2
 800636e:	d007      	beq.n	8006380 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	2220      	movs	r2, #32
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e072      	b.n	8006466 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8006380:	2304      	movs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006384:	f7ff fb68 	bl	8005a58 <HAL_GetTick>
 8006388:	0003      	movs	r3, r0
 800638a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800638c:	e01f      	b.n	80063ce <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	d01c      	beq.n	80063ce <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006394:	f7ff fb60 	bl	8005a58 <HAL_GetTick>
 8006398:	0002      	movs	r2, r0
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d302      	bcc.n	80063aa <HAL_ADC_PollForConversion+0x5e>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d111      	bne.n	80063ce <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4013      	ands	r3, r2
 80063b4:	d10b      	bne.n	80063ce <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	2204      	movs	r2, #4
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2254      	movs	r2, #84	@ 0x54
 80063c6:	2100      	movs	r1, #0
 80063c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e04b      	b.n	8006466 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4013      	ands	r3, r2
 80063d8:	d0d9      	beq.n	800638e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063de:	2280      	movs	r2, #128	@ 0x80
 80063e0:	0092      	lsls	r2, r2, #2
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7ff fbae 	bl	8005b4e <LL_ADC_REG_IsTriggerSourceSWStart>
 80063f2:	1e03      	subs	r3, r0, #0
 80063f4:	d02e      	beq.n	8006454 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7e9b      	ldrb	r3, [r3, #26]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d12a      	bne.n	8006454 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2208      	movs	r2, #8
 8006406:	4013      	ands	r3, r2
 8006408:	2b08      	cmp	r3, #8
 800640a:	d123      	bne.n	8006454 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0018      	movs	r0, r3
 8006412:	f7ff fcbb 	bl	8005d8c <LL_ADC_REG_IsConversionOngoing>
 8006416:	1e03      	subs	r3, r0, #0
 8006418:	d110      	bne.n	800643c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	210c      	movs	r1, #12
 8006426:	438a      	bics	r2, r1
 8006428:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642e:	4a10      	ldr	r2, [pc, #64]	@ (8006470 <HAL_ADC_PollForConversion+0x124>)
 8006430:	4013      	ands	r3, r2
 8006432:	2201      	movs	r2, #1
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	659a      	str	r2, [r3, #88]	@ 0x58
 800643a:	e00b      	b.n	8006454 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006440:	2220      	movs	r2, #32
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644c:	2201      	movs	r2, #1
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7e1b      	ldrb	r3, [r3, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	220c      	movs	r2, #12
 8006462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	0018      	movs	r0, r3
 8006468:	46bd      	mov	sp, r7
 800646a:	b004      	add	sp, #16
 800646c:	bd80      	pop	{r7, pc}
 800646e:	46c0      	nop			@ (mov r8, r8)
 8006470:	fffffefe 	.word	0xfffffefe

08006474 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	b002      	add	sp, #8
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2202      	movs	r2, #2
 80064ac:	4013      	ands	r3, r2
 80064ae:	d017      	beq.n	80064e0 <HAL_ADC_IRQHandler+0x54>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2202      	movs	r2, #2
 80064b4:	4013      	ands	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064bc:	2210      	movs	r2, #16
 80064be:	4013      	ands	r3, r2
 80064c0:	d106      	bne.n	80064d0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	2280      	movs	r2, #128	@ 0x80
 80064c8:	0112      	lsls	r2, r2, #4
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 fbee 	bl	8006cb4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2202      	movs	r2, #2
 80064de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2204      	movs	r2, #4
 80064e4:	4013      	ands	r3, r2
 80064e6:	d003      	beq.n	80064f0 <HAL_ADC_IRQHandler+0x64>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2204      	movs	r2, #4
 80064ec:	4013      	ands	r3, r2
 80064ee:	d107      	bne.n	8006500 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2208      	movs	r2, #8
 80064f4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80064f6:	d04d      	beq.n	8006594 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2208      	movs	r2, #8
 80064fc:	4013      	ands	r3, r2
 80064fe:	d049      	beq.n	8006594 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006504:	2210      	movs	r2, #16
 8006506:	4013      	ands	r3, r2
 8006508:	d106      	bne.n	8006518 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650e:	2280      	movs	r2, #128	@ 0x80
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	0018      	movs	r0, r3
 800651e:	f7ff fb16 	bl	8005b4e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006522:	1e03      	subs	r3, r0, #0
 8006524:	d02e      	beq.n	8006584 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	7e9b      	ldrb	r3, [r3, #26]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d12a      	bne.n	8006584 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2208      	movs	r2, #8
 8006536:	4013      	ands	r3, r2
 8006538:	2b08      	cmp	r3, #8
 800653a:	d123      	bne.n	8006584 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	0018      	movs	r0, r3
 8006542:	f7ff fc23 	bl	8005d8c <LL_ADC_REG_IsConversionOngoing>
 8006546:	1e03      	subs	r3, r0, #0
 8006548:	d110      	bne.n	800656c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	210c      	movs	r1, #12
 8006556:	438a      	bics	r2, r1
 8006558:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655e:	4a6f      	ldr	r2, [pc, #444]	@ (800671c <HAL_ADC_IRQHandler+0x290>)
 8006560:	4013      	ands	r3, r2
 8006562:	2201      	movs	r2, #1
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	659a      	str	r2, [r3, #88]	@ 0x58
 800656a:	e00b      	b.n	8006584 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006570:	2220      	movs	r2, #32
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657c:	2201      	movs	r2, #1
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	0018      	movs	r0, r3
 8006588:	f000 f8ca 	bl	8006720 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	220c      	movs	r2, #12
 8006592:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2280      	movs	r2, #128	@ 0x80
 8006598:	4013      	ands	r3, r2
 800659a:	d012      	beq.n	80065c2 <HAL_ADC_IRQHandler+0x136>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2280      	movs	r2, #128	@ 0x80
 80065a0:	4013      	ands	r3, r2
 80065a2:	d00e      	beq.n	80065c2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a8:	2280      	movs	r2, #128	@ 0x80
 80065aa:	0252      	lsls	r2, r2, #9
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 f8bb 	bl	8006730 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2280      	movs	r2, #128	@ 0x80
 80065c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	2380      	movs	r3, #128	@ 0x80
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	4013      	ands	r3, r2
 80065ca:	d014      	beq.n	80065f6 <HAL_ADC_IRQHandler+0x16a>
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	2380      	movs	r3, #128	@ 0x80
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4013      	ands	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	2280      	movs	r2, #128	@ 0x80
 80065dc:	0292      	lsls	r2, r2, #10
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 fb54 	bl	8006c94 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2280      	movs	r2, #128	@ 0x80
 80065f2:	0052      	lsls	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	2380      	movs	r3, #128	@ 0x80
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4013      	ands	r3, r2
 80065fe:	d014      	beq.n	800662a <HAL_ADC_IRQHandler+0x19e>
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4013      	ands	r3, r2
 8006608:	d00f      	beq.n	800662a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660e:	2280      	movs	r2, #128	@ 0x80
 8006610:	02d2      	lsls	r2, r2, #11
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0018      	movs	r0, r3
 800661c:	f000 fb42 	bl	8006ca4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2280      	movs	r2, #128	@ 0x80
 8006626:	0092      	lsls	r2, r2, #2
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2210      	movs	r2, #16
 800662e:	4013      	ands	r3, r2
 8006630:	d02b      	beq.n	800668a <HAL_ADC_IRQHandler+0x1fe>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2210      	movs	r2, #16
 8006636:	4013      	ands	r3, r2
 8006638:	d027      	beq.n	800668a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e008      	b.n	800665a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	0018      	movs	r0, r3
 800664e:	f7ff fad2 	bl	8005bf6 <LL_ADC_REG_GetDMATransfer>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d001      	beq.n	800665a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8006656:	2301      	movs	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d110      	bne.n	8006682 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006664:	2280      	movs	r2, #128	@ 0x80
 8006666:	00d2      	lsls	r2, r2, #3
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006672:	2202      	movs	r2, #2
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0018      	movs	r0, r3
 800667e:	f000 f85f 	bl	8006740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2210      	movs	r2, #16
 8006688:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2201      	movs	r2, #1
 800668e:	4013      	ands	r3, r2
 8006690:	d01a      	beq.n	80066c8 <HAL_ADC_IRQHandler+0x23c>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	4013      	ands	r3, r2
 8006698:	d016      	beq.n	80066c8 <HAL_ADC_IRQHandler+0x23c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669e:	2210      	movs	r2, #16
 80066a0:	4013      	ands	r3, r2
 80066a2:	d105      	bne.n	80066b0 <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a8:	2201      	movs	r2, #1
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	0018      	movs	r0, r3
 80066b4:	f000 f854 	bl	8006760 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2101      	movs	r1, #1
 80066c4:	438a      	bics	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* ========== Check End of Calibration flag ========== */
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	2380      	movs	r3, #128	@ 0x80
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	4013      	ands	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_ADC_IRQHandler+0x262>
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	2380      	movs	r3, #128	@ 0x80
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	4013      	ands	r3, r2
 80066da:	d008      	beq.n	80066ee <HAL_ADC_IRQHandler+0x262>
  {
    /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->CalibrationCpltCallback(hadc);
#else
    HAL_ADC_CalibrationCpltCallback(hadc);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	0018      	movs	r0, r3
 80066e0:	f000 f836 	bl	8006750 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear end of calibration flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2280      	movs	r2, #128	@ 0x80
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	019b      	lsls	r3, r3, #6
 80066f4:	4013      	ands	r3, r2
 80066f6:	d00d      	beq.n	8006714 <HAL_ADC_IRQHandler+0x288>
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	2380      	movs	r3, #128	@ 0x80
 80066fc:	019b      	lsls	r3, r3, #6
 80066fe:	4013      	ands	r3, r2
 8006700:	d008      	beq.n	8006714 <HAL_ADC_IRQHandler+0x288>
  {
    /* Channel configuration ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ChannelConfigReadyCallback(hadc);
#else
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f000 fadd 	bl	8006cc4 <HAL_ADCEx_ChannelConfigReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2280      	movs	r2, #128	@ 0x80
 8006710:	0192      	lsls	r2, r2, #6
 8006712:	601a      	str	r2, [r3, #0]
  }
}
 8006714:	46c0      	nop			@ (mov r8, r8)
 8006716:	46bd      	mov	sp, r7
 8006718:	b006      	add	sp, #24
 800671a:	bd80      	pop	{r7, pc}
 800671c:	fffffefe 	.word	0xfffffefe

08006720 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006728:	46c0      	nop			@ (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006738:	46c0      	nop			@ (mov r8, r8)
 800673a:	46bd      	mov	sp, r7
 800673c:	b002      	add	sp, #8
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006748:	46c0      	nop			@ (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b002      	add	sp, #8
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8006758:	46c0      	nop			@ (mov r8, r8)
 800675a:	46bd      	mov	sp, r7
 800675c:	b002      	add	sp, #8
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8006768:	46c0      	nop			@ (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b08b      	sub	sp, #44	@ 0x2c
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800677a:	2327      	movs	r3, #39	@ 0x27
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2254      	movs	r2, #84	@ 0x54
 800678a:	5c9b      	ldrb	r3, [r3, r2]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_ADC_ConfigChannel+0x24>
 8006790:	2302      	movs	r3, #2
 8006792:	e141      	b.n	8006a18 <HAL_ADC_ConfigChannel+0x2a8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2254      	movs	r2, #84	@ 0x54
 8006798:	2101      	movs	r1, #1
 800679a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	0018      	movs	r0, r3
 80067a2:	f7ff faf3 	bl	8005d8c <LL_ADC_REG_IsConversionOngoing>
 80067a6:	1e03      	subs	r3, r0, #0
 80067a8:	d000      	beq.n	80067ac <HAL_ADC_ConfigChannel+0x3c>
 80067aa:	e124      	b.n	80069f6 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d100      	bne.n	80067b6 <HAL_ADC_ConfigChannel+0x46>
 80067b4:	e0d8      	b.n	8006968 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	2380      	movs	r3, #128	@ 0x80
 80067bc:	061b      	lsls	r3, r3, #24
 80067be:	429a      	cmp	r2, r3
 80067c0:	d004      	beq.n	80067cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80067c6:	4a96      	ldr	r2, [pc, #600]	@ (8006a20 <HAL_ADC_ConfigChannel+0x2b0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d108      	bne.n	80067de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	0019      	movs	r1, r3
 80067d6:	0010      	movs	r0, r2
 80067d8:	f7ff f9ea 	bl	8005bb0 <LL_ADC_REG_SetSequencerChAdd>
 80067dc:	e060      	b.n	80068a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	211f      	movs	r1, #31
 80067e8:	400b      	ands	r3, r1
 80067ea:	210f      	movs	r1, #15
 80067ec:	4099      	lsls	r1, r3
 80067ee:	000b      	movs	r3, r1
 80067f0:	43db      	mvns	r3, r3
 80067f2:	4013      	ands	r3, r2
 80067f4:	001c      	movs	r4, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	025b      	lsls	r3, r3, #9
 80067fc:	0a5b      	lsrs	r3, r3, #9
 80067fe:	d105      	bne.n	800680c <HAL_ADC_ConfigChannel+0x9c>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	0e9b      	lsrs	r3, r3, #26
 8006806:	221f      	movs	r2, #31
 8006808:	401a      	ands	r2, r3
 800680a:	e02e      	b.n	800686a <HAL_ADC_ConfigChannel+0xfa>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8006812:	231f      	movs	r3, #31
 8006814:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e00e      	b.n	8006840 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2201      	movs	r2, #1
 800682c:	4013      	ands	r3, r2
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
    s--;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3b01      	subs	r3, #1
 8006838:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1ed      	bne.n	8006822 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	409a      	lsls	r2, r3
 800684c:	0013      	movs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
  return result;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 800685a:	2320      	movs	r3, #32
 800685c:	e004      	b.n	8006868 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 800685e:	69f8      	ldr	r0, [r7, #28]
 8006860:	f7f9 fe5c 	bl	800051c <__clzsi2>
 8006864:	0003      	movs	r3, r0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	001a      	movs	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	211f      	movs	r1, #31
 8006870:	400b      	ands	r3, r1
 8006872:	409a      	lsls	r2, r3
 8006874:	0013      	movs	r3, r2
 8006876:	0022      	movs	r2, r4
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	429a      	cmp	r2, r3
 800688c:	d808      	bhi.n	80068a0 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	001a      	movs	r2, r3
 800689c:	f7ff f968 	bl	8005b70 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	6819      	ldr	r1, [r3, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	001a      	movs	r2, r3
 80068ae:	f7ff f9af 	bl	8005c10 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	db00      	blt.n	80068bc <HAL_ADC_ConfigChannel+0x14c>
 80068ba:	e0a6      	b.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068bc:	4b59      	ldr	r3, [pc, #356]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 80068be:	0018      	movs	r0, r3
 80068c0:	f7ff f904 	bl	8005acc <LL_ADC_GetCommonPathInternalCh>
 80068c4:	0003      	movs	r3, r0
 80068c6:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a56      	ldr	r2, [pc, #344]	@ (8006a28 <HAL_ADC_ConfigChannel+0x2b8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d122      	bne.n	8006918 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	041b      	lsls	r3, r3, #16
 80068d8:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80068da:	d11d      	bne.n	8006918 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	2280      	movs	r2, #128	@ 0x80
 80068e0:	0412      	lsls	r2, r2, #16
 80068e2:	4313      	orrs	r3, r2
 80068e4:	4a4f      	ldr	r2, [pc, #316]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 80068e6:	0019      	movs	r1, r3
 80068e8:	0010      	movs	r0, r2
 80068ea:	f7ff f8db 	bl	8005aa4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068ee:	4b4f      	ldr	r3, [pc, #316]	@ (8006a2c <HAL_ADC_ConfigChannel+0x2bc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	494f      	ldr	r1, [pc, #316]	@ (8006a30 <HAL_ADC_ConfigChannel+0x2c0>)
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7f9 fc23 	bl	8000140 <__udivsi3>
 80068fa:	0003      	movs	r3, r0
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	0013      	movs	r3, r2
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	189b      	adds	r3, r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006908:	e002      	b.n	8006910 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3b01      	subs	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f9      	bne.n	800690a <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006916:	e078      	b.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a45      	ldr	r2, [pc, #276]	@ (8006a34 <HAL_ADC_ConfigChannel+0x2c4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d10e      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	2380      	movs	r3, #128	@ 0x80
 8006926:	045b      	lsls	r3, r3, #17
 8006928:	4013      	ands	r3, r2
 800692a:	d109      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	2280      	movs	r2, #128	@ 0x80
 8006930:	0452      	lsls	r2, r2, #17
 8006932:	4313      	orrs	r3, r2
 8006934:	4a3b      	ldr	r2, [pc, #236]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 8006936:	0019      	movs	r1, r3
 8006938:	0010      	movs	r0, r2
 800693a:	f7ff f8b3 	bl	8005aa4 <LL_ADC_SetCommonPathInternalCh>
 800693e:	e064      	b.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a3c      	ldr	r2, [pc, #240]	@ (8006a38 <HAL_ADC_ConfigChannel+0x2c8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d15f      	bne.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	2380      	movs	r3, #128	@ 0x80
 800694e:	03db      	lsls	r3, r3, #15
 8006950:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006952:	d15a      	bne.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	2280      	movs	r2, #128	@ 0x80
 8006958:	03d2      	lsls	r2, r2, #15
 800695a:	4313      	orrs	r3, r2
 800695c:	4a31      	ldr	r2, [pc, #196]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 800695e:	0019      	movs	r1, r3
 8006960:	0010      	movs	r0, r2
 8006962:	f7ff f89f 	bl	8005aa4 <LL_ADC_SetCommonPathInternalCh>
 8006966:	e050      	b.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	2380      	movs	r3, #128	@ 0x80
 800696e:	061b      	lsls	r3, r3, #24
 8006970:	429a      	cmp	r2, r3
 8006972:	d004      	beq.n	800697e <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006978:	4a29      	ldr	r2, [pc, #164]	@ (8006a20 <HAL_ADC_ConfigChannel+0x2b0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d107      	bne.n	800698e <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	0019      	movs	r1, r3
 8006988:	0010      	movs	r0, r2
 800698a:	f7ff f922 	bl	8005bd2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	da39      	bge.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006996:	4b23      	ldr	r3, [pc, #140]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff f897 	bl	8005acc <LL_ADC_GetCommonPathInternalCh>
 800699e:	0003      	movs	r3, r0
 80069a0:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a20      	ldr	r2, [pc, #128]	@ (8006a28 <HAL_ADC_ConfigChannel+0x2b8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d108      	bne.n	80069be <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	4a23      	ldr	r2, [pc, #140]	@ (8006a3c <HAL_ADC_ConfigChannel+0x2cc>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 80069b4:	0019      	movs	r1, r3
 80069b6:	0010      	movs	r0, r2
 80069b8:	f7ff f874 	bl	8005aa4 <LL_ADC_SetCommonPathInternalCh>
 80069bc:	e025      	b.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006a34 <HAL_ADC_ConfigChannel+0x2c4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d108      	bne.n	80069da <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006a40 <HAL_ADC_ConfigChannel+0x2d0>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 80069d0:	0019      	movs	r1, r3
 80069d2:	0010      	movs	r0, r2
 80069d4:	f7ff f866 	bl	8005aa4 <LL_ADC_SetCommonPathInternalCh>
 80069d8:	e017      	b.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a16      	ldr	r2, [pc, #88]	@ (8006a38 <HAL_ADC_ConfigChannel+0x2c8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d112      	bne.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	4a17      	ldr	r2, [pc, #92]	@ (8006a44 <HAL_ADC_ConfigChannel+0x2d4>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006a24 <HAL_ADC_ConfigChannel+0x2b4>)
 80069ec:	0019      	movs	r1, r3
 80069ee:	0010      	movs	r0, r2
 80069f0:	f7ff f858 	bl	8005aa4 <LL_ADC_SetCommonPathInternalCh>
 80069f4:	e009      	b.n	8006a0a <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fa:	2220      	movs	r2, #32
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006a02:	2327      	movs	r3, #39	@ 0x27
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2254      	movs	r2, #84	@ 0x54
 8006a0e:	2100      	movs	r1, #0
 8006a10:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006a12:	2327      	movs	r3, #39	@ 0x27
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	781b      	ldrb	r3, [r3, #0]
}
 8006a18:	0018      	movs	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b00b      	add	sp, #44	@ 0x2c
 8006a1e:	bd90      	pop	{r4, r7, pc}
 8006a20:	80000004 	.word	0x80000004
 8006a24:	40012708 	.word	0x40012708
 8006a28:	ac000800 	.word	0xac000800
 8006a2c:	20000004 	.word	0x20000004
 8006a30:	00030d40 	.word	0x00030d40
 8006a34:	b4002000 	.word	0xb4002000
 8006a38:	b0001000 	.word	0xb0001000
 8006a3c:	ff7fffff 	.word	0xff7fffff
 8006a40:	feffffff 	.word	0xfeffffff
 8006a44:	ffbfffff 	.word	0xffbfffff

08006a48 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7ff f999 	bl	8005d8c <LL_ADC_REG_IsConversionOngoing>
 8006a5a:	1e03      	subs	r3, r0, #0
 8006a5c:	d031      	beq.n	8006ac2 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	0018      	movs	r0, r3
 8006a64:	f7ff f95d 	bl	8005d22 <LL_ADC_IsDisableOngoing>
 8006a68:	1e03      	subs	r3, r0, #0
 8006a6a:	d104      	bne.n	8006a76 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7ff f979 	bl	8005d68 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a76:	f7fe ffef 	bl	8005a58 <HAL_GetTick>
 8006a7a:	0003      	movs	r3, r0
 8006a7c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006a7e:	e01a      	b.n	8006ab6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006a80:	f7fe ffea 	bl	8005a58 <HAL_GetTick>
 8006a84:	0002      	movs	r2, r0
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d913      	bls.n	8006ab6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2204      	movs	r2, #4
 8006a96:	4013      	ands	r3, r2
 8006a98:	d00d      	beq.n	8006ab6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aaa:	2201      	movs	r2, #1
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e006      	b.n	8006ac4 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2204      	movs	r2, #4
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d1de      	bne.n	8006a80 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b004      	add	sp, #16
 8006aca:	bd80      	pop	{r7, pc}

08006acc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	0018      	movs	r0, r3
 8006ade:	f7ff f90f 	bl	8005d00 <LL_ADC_IsEnabled>
 8006ae2:	1e03      	subs	r3, r0, #0
 8006ae4:	d000      	beq.n	8006ae8 <ADC_Enable+0x1c>
 8006ae6:	e069      	b.n	8006bbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	4a36      	ldr	r2, [pc, #216]	@ (8006bc8 <ADC_Enable+0xfc>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	d00d      	beq.n	8006b10 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af8:	2210      	movs	r2, #16
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b04:	2201      	movs	r2, #1
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e056      	b.n	8006bbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7ff f8cf 	bl	8005cb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bcc <ADC_Enable+0x100>)
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f7fe ffd5 	bl	8005acc <LL_ADC_GetCommonPathInternalCh>
 8006b22:	0002      	movs	r2, r0
 8006b24:	2380      	movs	r3, #128	@ 0x80
 8006b26:	041b      	lsls	r3, r3, #16
 8006b28:	4013      	ands	r3, r2
 8006b2a:	d00f      	beq.n	8006b4c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b2c:	4b28      	ldr	r3, [pc, #160]	@ (8006bd0 <ADC_Enable+0x104>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4928      	ldr	r1, [pc, #160]	@ (8006bd4 <ADC_Enable+0x108>)
 8006b32:	0018      	movs	r0, r3
 8006b34:	f7f9 fb04 	bl	8000140 <__udivsi3>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8006b3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006b3e:	e002      	b.n	8006b46 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f9      	bne.n	8006b40 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	7e5b      	ldrb	r3, [r3, #25]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d033      	beq.n	8006bbc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006b54:	f7fe ff80 	bl	8005a58 <HAL_GetTick>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b5c:	e027      	b.n	8006bae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	0018      	movs	r0, r3
 8006b64:	f7ff f8cc 	bl	8005d00 <LL_ADC_IsEnabled>
 8006b68:	1e03      	subs	r3, r0, #0
 8006b6a:	d104      	bne.n	8006b76 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7ff f8a1 	bl	8005cb8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b76:	f7fe ff6f 	bl	8005a58 <HAL_GetTick>
 8006b7a:	0002      	movs	r2, r0
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d914      	bls.n	8006bae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d00d      	beq.n	8006bae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b96:	2210      	movs	r2, #16
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e007      	b.n	8006bbe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d1d0      	bne.n	8006b5e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b004      	add	sp, #16
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	80000017 	.word	0x80000017
 8006bcc:	40012708 	.word	0x40012708
 8006bd0:	20000004 	.word	0x20000004
 8006bd4:	00030d40 	.word	0x00030d40

08006bd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7ff f89c 	bl	8005d22 <LL_ADC_IsDisableOngoing>
 8006bea:	0003      	movs	r3, r0
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f7ff f884 	bl	8005d00 <LL_ADC_IsEnabled>
 8006bf8:	1e03      	subs	r3, r0, #0
 8006bfa:	d046      	beq.n	8006c8a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d143      	bne.n	8006c8a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2205      	movs	r2, #5
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d10d      	bne.n	8006c2c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7ff f861 	bl	8005cdc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006c22:	f7fe ff19 	bl	8005a58 <HAL_GetTick>
 8006c26:	0003      	movs	r3, r0
 8006c28:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c2a:	e028      	b.n	8006c7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c30:	2210      	movs	r2, #16
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e021      	b.n	8006c8c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c48:	f7fe ff06 	bl	8005a58 <HAL_GetTick>
 8006c4c:	0002      	movs	r2, r0
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d913      	bls.n	8006c7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d00d      	beq.n	8006c7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c66:	2210      	movs	r2, #16
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c72:	2201      	movs	r2, #1
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e006      	b.n	8006c8c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2201      	movs	r2, #1
 8006c86:	4013      	ands	r3, r2
 8006c88:	d1de      	bne.n	8006c48 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b004      	add	sp, #16
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006c9c:	46c0      	nop			@ (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006cac:	46c0      	nop			@ (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006cbc:	46c0      	nop			@ (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006ccc:	46c0      	nop			@ (mov r8, r8)
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b002      	add	sp, #8
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <LL_EXTI_EnableIT_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006cdc:	4a05      	ldr	r2, [pc, #20]	@ (8006cf4 <LL_EXTI_EnableIT_0_31+0x20>)
 8006cde:	2380      	movs	r3, #128	@ 0x80
 8006ce0:	58d2      	ldr	r2, [r2, r3]
 8006ce2:	4904      	ldr	r1, [pc, #16]	@ (8006cf4 <LL_EXTI_EnableIT_0_31+0x20>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	2280      	movs	r2, #128	@ 0x80
 8006cea:	508b      	str	r3, [r1, r2]
}
 8006cec:	46c0      	nop			@ (mov r8, r8)
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40021800 	.word	0x40021800

08006cf8 <LL_EXTI_DisableIT_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006d00:	4a06      	ldr	r2, [pc, #24]	@ (8006d1c <LL_EXTI_DisableIT_0_31+0x24>)
 8006d02:	2380      	movs	r3, #128	@ 0x80
 8006d04:	58d3      	ldr	r3, [r2, r3]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	43d2      	mvns	r2, r2
 8006d0a:	4904      	ldr	r1, [pc, #16]	@ (8006d1c <LL_EXTI_DisableIT_0_31+0x24>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2280      	movs	r2, #128	@ 0x80
 8006d10:	508b      	str	r3, [r1, r2]
}
 8006d12:	46c0      	nop			@ (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b002      	add	sp, #8
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	40021800 	.word	0x40021800

08006d20 <LL_EXTI_EnableEvent_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006d28:	4a05      	ldr	r2, [pc, #20]	@ (8006d40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006d2a:	2384      	movs	r3, #132	@ 0x84
 8006d2c:	58d2      	ldr	r2, [r2, r3]
 8006d2e:	4904      	ldr	r1, [pc, #16]	@ (8006d40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	2284      	movs	r2, #132	@ 0x84
 8006d36:	508b      	str	r3, [r1, r2]

}
 8006d38:	46c0      	nop			@ (mov r8, r8)
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40021800 	.word	0x40021800

08006d44 <LL_EXTI_DisableEvent_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006d4c:	4a06      	ldr	r2, [pc, #24]	@ (8006d68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006d4e:	2384      	movs	r3, #132	@ 0x84
 8006d50:	58d3      	ldr	r3, [r2, r3]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	43d2      	mvns	r2, r2
 8006d56:	4904      	ldr	r1, [pc, #16]	@ (8006d68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2284      	movs	r2, #132	@ 0x84
 8006d5c:	508b      	str	r3, [r1, r2]
}
 8006d5e:	46c0      	nop			@ (mov r8, r8)
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b002      	add	sp, #8
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	40021800 	.word	0x40021800

08006d6c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006d74:	4b04      	ldr	r3, [pc, #16]	@ (8006d88 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8006d76:	6819      	ldr	r1, [r3, #0]
 8006d78:	4b03      	ldr	r3, [pc, #12]	@ (8006d88 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]
}
 8006d80:	46c0      	nop			@ (mov r8, r8)
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b002      	add	sp, #8
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40021800 	.word	0x40021800

08006d8c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	43d9      	mvns	r1, r3
 8006d9c:	4b03      	ldr	r3, [pc, #12]	@ (8006dac <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8006d9e:	400a      	ands	r2, r1
 8006da0:	601a      	str	r2, [r3, #0]
}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b002      	add	sp, #8
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	40021800 	.word	0x40021800

08006db0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006db8:	4b04      	ldr	r3, [pc, #16]	@ (8006dcc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8006dba:	6859      	ldr	r1, [r3, #4]
 8006dbc:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
}
 8006dc4:	46c0      	nop			@ (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b002      	add	sp, #8
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40021800 	.word	0x40021800

08006dd0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006dd8:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	43d9      	mvns	r1, r3
 8006de0:	4b03      	ldr	r3, [pc, #12]	@ (8006df0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8006de2:	400a      	ands	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
}
 8006de6:	46c0      	nop			@ (mov r8, r8)
 8006de8:	46bd      	mov	sp, r7
 8006dea:	b002      	add	sp, #8
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	40021800 	.word	0x40021800

08006df4 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8006dfc:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]
}
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b002      	add	sp, #8
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	40021800 	.word	0x40021800

08006e10 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8006e18:	4b03      	ldr	r3, [pc, #12]	@ (8006e28 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	60da      	str	r2, [r3, #12]
}
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	46bd      	mov	sp, r7
 8006e22:	b002      	add	sp, #8
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	40021800 	.word	0x40021800

08006e2c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006e38:	211f      	movs	r1, #31
 8006e3a:	187b      	adds	r3, r7, r1
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8006e46:	187b      	adds	r3, r7, r1
 8006e48:	2201      	movs	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	e13d      	b.n	80070ca <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	0fdb      	lsrs	r3, r3, #31
 8006e56:	07da      	lsls	r2, r3, #31
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d104      	bne.n	8006e6a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8006e60:	231f      	movs	r3, #31
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e12f      	b.n	80070ca <HAL_COMP_Init+0x29e>
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2229      	movs	r2, #41	@ 0x29
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2228      	movs	r2, #40	@ 0x28
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	0018      	movs	r0, r3
 8006e88:	f7fe f8ea 	bl	8005060 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2230      	movs	r2, #48	@ 0x30
 8006e94:	4013      	ands	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a85      	ldr	r2, [pc, #532]	@ (80070d8 <HAL_COMP_Init+0x2ac>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	601a      	str	r2, [r3, #0]
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */

#if defined(COMP2)
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d10d      	bne.n	8006efa <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8006ede:	4b7f      	ldr	r3, [pc, #508]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b7e      	ldr	r3, [pc, #504]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006ee4:	497e      	ldr	r1, [pc, #504]	@ (80070e0 <HAL_COMP_Init+0x2b4>)
 8006ee6:	400a      	ands	r2, r1
 8006ee8:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8006eea:	4b7c      	ldr	r3, [pc, #496]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	4b7b      	ldr	r3, [pc, #492]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006ef0:	2180      	movs	r1, #128	@ 0x80
 8006ef2:	0109      	lsls	r1, r1, #4
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	e01f      	b.n	8006f3a <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	23c0      	movs	r3, #192	@ 0xc0
 8006f00:	015b      	lsls	r3, r3, #5
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d10d      	bne.n	8006f22 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8006f06:	4b75      	ldr	r3, [pc, #468]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b74      	ldr	r3, [pc, #464]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f0c:	2180      	movs	r1, #128	@ 0x80
 8006f0e:	0109      	lsls	r1, r1, #4
 8006f10:	430a      	orrs	r2, r1
 8006f12:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8006f14:	4b71      	ldr	r3, [pc, #452]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	4b70      	ldr	r3, [pc, #448]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f1a:	4971      	ldr	r1, [pc, #452]	@ (80070e0 <HAL_COMP_Init+0x2b4>)
 8006f1c:	400a      	ands	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
 8006f20:	e00b      	b.n	8006f3a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8006f22:	4b6e      	ldr	r3, [pc, #440]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b6d      	ldr	r3, [pc, #436]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f28:	496d      	ldr	r1, [pc, #436]	@ (80070e0 <HAL_COMP_Init+0x2b4>)
 8006f2a:	400a      	ands	r2, r1
 8006f2c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8006f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	4b6a      	ldr	r3, [pc, #424]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f34:	496a      	ldr	r1, [pc, #424]	@ (80070e0 <HAL_COMP_Init+0x2b4>)
 8006f36:	400a      	ands	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	22a0      	movs	r2, #160	@ 0xa0
 8006f40:	01d2      	lsls	r2, r2, #7
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d017      	beq.n	8006f76 <HAL_COMP_Init+0x14a>
 8006f46:	22a0      	movs	r2, #160	@ 0xa0
 8006f48:	01d2      	lsls	r2, r2, #7
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d830      	bhi.n	8006fb0 <HAL_COMP_Init+0x184>
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d01f      	beq.n	8006f92 <HAL_COMP_Init+0x166>
 8006f52:	2280      	movs	r2, #128	@ 0x80
 8006f54:	01d2      	lsls	r2, r2, #7
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d12a      	bne.n	8006fb0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8006f5a:	4b60      	ldr	r3, [pc, #384]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f60:	2180      	movs	r1, #128	@ 0x80
 8006f62:	01c9      	lsls	r1, r1, #7
 8006f64:	430a      	orrs	r2, r1
 8006f66:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8006f68:	4b5c      	ldr	r3, [pc, #368]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f6e:	495d      	ldr	r1, [pc, #372]	@ (80070e4 <HAL_COMP_Init+0x2b8>)
 8006f70:	400a      	ands	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
        break;
 8006f74:	e029      	b.n	8006fca <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8006f76:	4b59      	ldr	r3, [pc, #356]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b58      	ldr	r3, [pc, #352]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f7c:	4959      	ldr	r1, [pc, #356]	@ (80070e4 <HAL_COMP_Init+0x2b8>)
 8006f7e:	400a      	ands	r2, r1
 8006f80:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8006f82:	4b56      	ldr	r3, [pc, #344]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4b55      	ldr	r3, [pc, #340]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f88:	2180      	movs	r1, #128	@ 0x80
 8006f8a:	01c9      	lsls	r1, r1, #7
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
        break;
 8006f90:	e01b      	b.n	8006fca <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8006f92:	4b52      	ldr	r3, [pc, #328]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b51      	ldr	r3, [pc, #324]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006f98:	2180      	movs	r1, #128	@ 0x80
 8006f9a:	01c9      	lsls	r1, r1, #7
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8006fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006fa6:	2180      	movs	r1, #128	@ 0x80
 8006fa8:	01c9      	lsls	r1, r1, #7
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
        break;
 8006fae:	e00c      	b.n	8006fca <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8006fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b49      	ldr	r3, [pc, #292]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006fb6:	494b      	ldr	r1, [pc, #300]	@ (80070e4 <HAL_COMP_Init+0x2b8>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8006fbc:	4b47      	ldr	r3, [pc, #284]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	4b46      	ldr	r3, [pc, #280]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 8006fc2:	4948      	ldr	r1, [pc, #288]	@ (80070e4 <HAL_COMP_Init+0x2b8>)
 8006fc4:	400a      	ands	r2, r1
 8006fc6:	605a      	str	r2, [r3, #4]
        break;
 8006fc8:	46c0      	nop			@ (mov r8, r8)
    }


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2230      	movs	r2, #48	@ 0x30
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d016      	beq.n	8007004 <HAL_COMP_Init+0x1d8>
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d113      	bne.n	8007004 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fdc:	4b42      	ldr	r3, [pc, #264]	@ (80070e8 <HAL_COMP_Init+0x2bc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4942      	ldr	r1, [pc, #264]	@ (80070ec <HAL_COMP_Init+0x2c0>)
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f7f9 f8ac 	bl	8000140 <__udivsi3>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	0013      	movs	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	189b      	adds	r3, r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006ff6:	e002      	b.n	8006ffe <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f9      	bne.n	8006ff8 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a34      	ldr	r2, [pc, #208]	@ (80070dc <HAL_COMP_Init+0x2b0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d102      	bne.n	8007014 <HAL_COMP_Init+0x1e8>
 800700e:	2380      	movs	r3, #128	@ 0x80
 8007010:	029b      	lsls	r3, r3, #10
 8007012:	e001      	b.n	8007018 <HAL_COMP_Init+0x1ec>
 8007014:	2380      	movs	r3, #128	@ 0x80
 8007016:	02db      	lsls	r3, r3, #11
 8007018:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701e:	2203      	movs	r2, #3
 8007020:	4013      	ands	r3, r2
 8007022:	d040      	beq.n	80070a6 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	2210      	movs	r2, #16
 800702a:	4013      	ands	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	0018      	movs	r0, r3
 8007032:	f7ff fe9b 	bl	8006d6c <LL_EXTI_EnableRisingTrig_0_31>
 8007036:	e003      	b.n	8007040 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	0018      	movs	r0, r3
 800703c:	f7ff fea6 	bl	8006d8c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007044:	2220      	movs	r2, #32
 8007046:	4013      	ands	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	0018      	movs	r0, r3
 800704e:	f7ff feaf 	bl	8006db0 <LL_EXTI_EnableFallingTrig_0_31>
 8007052:	e003      	b.n	800705c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	0018      	movs	r0, r3
 8007058:	f7ff feba 	bl	8006dd0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	0018      	movs	r0, r3
 8007060:	f7ff fed6 	bl	8006e10 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	0018      	movs	r0, r3
 8007068:	f7ff fec4 	bl	8006df4 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007070:	2202      	movs	r2, #2
 8007072:	4013      	ands	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	0018      	movs	r0, r3
 800707a:	f7ff fe51 	bl	8006d20 <LL_EXTI_EnableEvent_0_31>
 800707e:	e003      	b.n	8007088 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	0018      	movs	r0, r3
 8007084:	f7ff fe5e 	bl	8006d44 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	2201      	movs	r2, #1
 800708e:	4013      	ands	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	0018      	movs	r0, r3
 8007096:	f7ff fe1d 	bl	8006cd4 <LL_EXTI_EnableIT_0_31>
 800709a:	e00c      	b.n	80070b6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	0018      	movs	r0, r3
 80070a0:	f7ff fe2a 	bl	8006cf8 <LL_EXTI_DisableIT_0_31>
 80070a4:	e007      	b.n	80070b6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff fe4b 	bl	8006d44 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7ff fe21 	bl	8006cf8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2229      	movs	r2, #41	@ 0x29
 80070ba:	5c9b      	ldrb	r3, [r3, r2]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2229      	movs	r2, #41	@ 0x29
 80070c6:	2101      	movs	r1, #1
 80070c8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80070ca:	231f      	movs	r3, #31
 80070cc:	18fb      	adds	r3, r7, r3
 80070ce:	781b      	ldrb	r3, [r3, #0]
}
 80070d0:	0018      	movs	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b008      	add	sp, #32
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	fe00700f 	.word	0xfe00700f
 80070dc:	40010200 	.word	0x40010200
 80070e0:	fffff7ff 	.word	0xfffff7ff
 80070e4:	ffffbfff 	.word	0xffffbfff
 80070e8:	20000004 	.word	0x20000004
 80070ec:	00030d40 	.word	0x00030d40

080070f0 <HAL_COMP_DeInit>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_DeInit(COMP_HandleTypeDef *hcomp)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f8:	210f      	movs	r1, #15
 80070fa:	187b      	adds	r3, r7, r1
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d103      	bne.n	800710e <HAL_COMP_DeInit+0x1e>
  {
    status = HAL_ERROR;
 8007106:	187b      	adds	r3, r7, r1
 8007108:	2201      	movs	r2, #1
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e01d      	b.n	800714a <HAL_COMP_DeInit+0x5a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	0fdb      	lsrs	r3, r3, #31
 8007116:	07da      	lsls	r2, r3, #31
 8007118:	2380      	movs	r3, #128	@ 0x80
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	429a      	cmp	r2, r3
 800711e:	d104      	bne.n	800712a <HAL_COMP_DeInit+0x3a>
  {
    status = HAL_ERROR;
 8007120:	230f      	movs	r3, #15
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2201      	movs	r2, #1
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	e00f      	b.n	800714a <HAL_COMP_DeInit+0x5a>
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Set COMP_CSR register to reset value */
    WRITE_REG(hcomp->Instance->CSR, 0x00000000UL);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]

    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    hcomp->MspDeInitCallback(hcomp);
#else
    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    HAL_COMP_MspDeInit(hcomp);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f7fd fff3 	bl	8005120 <HAL_COMP_MspDeInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Set HAL COMP handle state */
    hcomp->State = HAL_COMP_STATE_RESET;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2229      	movs	r2, #41	@ 0x29
 800713e:	2100      	movs	r1, #0
 8007140:	5499      	strb	r1, [r3, r2]

    /* Release Lock */
    __HAL_UNLOCK(hcomp);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2228      	movs	r2, #40	@ 0x28
 8007146:	2100      	movs	r1, #0
 8007148:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800714a:	230f      	movs	r3, #15
 800714c:	18fb      	adds	r3, r7, r3
 800714e:	781b      	ldrb	r3, [r3, #0]
}
 8007150:	0018      	movs	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	b004      	add	sp, #16
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007160:	2300      	movs	r3, #0
 8007162:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007164:	210f      	movs	r1, #15
 8007166:	187b      	adds	r3, r7, r1
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8007172:	187b      	adds	r3, r7, r1
 8007174:	2201      	movs	r2, #1
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	e035      	b.n	80071e6 <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	0fdb      	lsrs	r3, r3, #31
 8007182:	07da      	lsls	r2, r3, #31
 8007184:	2380      	movs	r3, #128	@ 0x80
 8007186:	061b      	lsls	r3, r3, #24
 8007188:	429a      	cmp	r2, r3
 800718a:	d104      	bne.n	8007196 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800718c:	230f      	movs	r3, #15
 800718e:	18fb      	adds	r3, r7, r3
 8007190:	2201      	movs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	e027      	b.n	80071e6 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2229      	movs	r2, #41	@ 0x29
 800719a:	5c9b      	ldrb	r3, [r3, r2]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d11d      	bne.n	80071de <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2101      	movs	r1, #1
 80071ae:	430a      	orrs	r2, r1
 80071b0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2229      	movs	r2, #41	@ 0x29
 80071b6:	2102      	movs	r1, #2
 80071b8:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071ba:	4b0e      	ldr	r3, [pc, #56]	@ (80071f4 <HAL_COMP_Start+0x9c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	490e      	ldr	r1, [pc, #56]	@ (80071f8 <HAL_COMP_Start+0xa0>)
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7f8 ffbd 	bl	8000140 <__udivsi3>
 80071c6:	0003      	movs	r3, r0
 80071c8:	3301      	adds	r3, #1
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80071ce:	e002      	b.n	80071d6 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f9      	bne.n	80071d0 <HAL_COMP_Start+0x78>
 80071dc:	e003      	b.n	80071e6 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80071de:	230f      	movs	r3, #15
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	2201      	movs	r2, #1
 80071e4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80071e6:	230f      	movs	r3, #15
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	781b      	ldrb	r3, [r3, #0]
}
 80071ec:	0018      	movs	r0, r3
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b004      	add	sp, #16
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000004 	.word	0x20000004
 80071f8:	00030d40 	.word	0x00030d40

080071fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	0002      	movs	r2, r0
 8007204:	1dfb      	adds	r3, r7, #7
 8007206:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007208:	1dfb      	adds	r3, r7, #7
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b7f      	cmp	r3, #127	@ 0x7f
 800720e:	d809      	bhi.n	8007224 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007210:	1dfb      	adds	r3, r7, #7
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	001a      	movs	r2, r3
 8007216:	231f      	movs	r3, #31
 8007218:	401a      	ands	r2, r3
 800721a:	4b04      	ldr	r3, [pc, #16]	@ (800722c <__NVIC_EnableIRQ+0x30>)
 800721c:	2101      	movs	r1, #1
 800721e:	4091      	lsls	r1, r2
 8007220:	000a      	movs	r2, r1
 8007222:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007224:	46c0      	nop			@ (mov r8, r8)
 8007226:	46bd      	mov	sp, r7
 8007228:	b002      	add	sp, #8
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000e100 	.word	0xe000e100

08007230 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	0002      	movs	r2, r0
 8007238:	1dfb      	adds	r3, r7, #7
 800723a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b7f      	cmp	r3, #127	@ 0x7f
 8007242:	d810      	bhi.n	8007266 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007244:	1dfb      	adds	r3, r7, #7
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	001a      	movs	r2, r3
 800724a:	231f      	movs	r3, #31
 800724c:	4013      	ands	r3, r2
 800724e:	4908      	ldr	r1, [pc, #32]	@ (8007270 <__NVIC_DisableIRQ+0x40>)
 8007250:	2201      	movs	r2, #1
 8007252:	409a      	lsls	r2, r3
 8007254:	0013      	movs	r3, r2
 8007256:	2280      	movs	r2, #128	@ 0x80
 8007258:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800725a:	f3bf 8f4f 	dsb	sy
}
 800725e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007260:	f3bf 8f6f 	isb	sy
}
 8007264:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	46bd      	mov	sp, r7
 800726a:	b002      	add	sp, #8
 800726c:	bd80      	pop	{r7, pc}
 800726e:	46c0      	nop			@ (mov r8, r8)
 8007270:	e000e100 	.word	0xe000e100

08007274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	0002      	movs	r2, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	1dfb      	adds	r3, r7, #7
 8007280:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007282:	1dfb      	adds	r3, r7, #7
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b7f      	cmp	r3, #127	@ 0x7f
 8007288:	d828      	bhi.n	80072dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800728a:	4a2f      	ldr	r2, [pc, #188]	@ (8007348 <__NVIC_SetPriority+0xd4>)
 800728c:	1dfb      	adds	r3, r7, #7
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	b25b      	sxtb	r3, r3
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	33c0      	adds	r3, #192	@ 0xc0
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	589b      	ldr	r3, [r3, r2]
 800729a:	1dfa      	adds	r2, r7, #7
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	0011      	movs	r1, r2
 80072a0:	2203      	movs	r2, #3
 80072a2:	400a      	ands	r2, r1
 80072a4:	00d2      	lsls	r2, r2, #3
 80072a6:	21ff      	movs	r1, #255	@ 0xff
 80072a8:	4091      	lsls	r1, r2
 80072aa:	000a      	movs	r2, r1
 80072ac:	43d2      	mvns	r2, r2
 80072ae:	401a      	ands	r2, r3
 80072b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	019b      	lsls	r3, r3, #6
 80072b6:	22ff      	movs	r2, #255	@ 0xff
 80072b8:	401a      	ands	r2, r3
 80072ba:	1dfb      	adds	r3, r7, #7
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	0018      	movs	r0, r3
 80072c0:	2303      	movs	r3, #3
 80072c2:	4003      	ands	r3, r0
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072c8:	481f      	ldr	r0, [pc, #124]	@ (8007348 <__NVIC_SetPriority+0xd4>)
 80072ca:	1dfb      	adds	r3, r7, #7
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b25b      	sxtb	r3, r3
 80072d0:	089b      	lsrs	r3, r3, #2
 80072d2:	430a      	orrs	r2, r1
 80072d4:	33c0      	adds	r3, #192	@ 0xc0
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80072da:	e031      	b.n	8007340 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072dc:	4a1b      	ldr	r2, [pc, #108]	@ (800734c <__NVIC_SetPriority+0xd8>)
 80072de:	1dfb      	adds	r3, r7, #7
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	0019      	movs	r1, r3
 80072e4:	230f      	movs	r3, #15
 80072e6:	400b      	ands	r3, r1
 80072e8:	3b08      	subs	r3, #8
 80072ea:	089b      	lsrs	r3, r3, #2
 80072ec:	3306      	adds	r3, #6
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	18d3      	adds	r3, r2, r3
 80072f2:	3304      	adds	r3, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	1dfa      	adds	r2, r7, #7
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	0011      	movs	r1, r2
 80072fc:	2203      	movs	r2, #3
 80072fe:	400a      	ands	r2, r1
 8007300:	00d2      	lsls	r2, r2, #3
 8007302:	21ff      	movs	r1, #255	@ 0xff
 8007304:	4091      	lsls	r1, r2
 8007306:	000a      	movs	r2, r1
 8007308:	43d2      	mvns	r2, r2
 800730a:	401a      	ands	r2, r3
 800730c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	019b      	lsls	r3, r3, #6
 8007312:	22ff      	movs	r2, #255	@ 0xff
 8007314:	401a      	ands	r2, r3
 8007316:	1dfb      	adds	r3, r7, #7
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	0018      	movs	r0, r3
 800731c:	2303      	movs	r3, #3
 800731e:	4003      	ands	r3, r0
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007324:	4809      	ldr	r0, [pc, #36]	@ (800734c <__NVIC_SetPriority+0xd8>)
 8007326:	1dfb      	adds	r3, r7, #7
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	001c      	movs	r4, r3
 800732c:	230f      	movs	r3, #15
 800732e:	4023      	ands	r3, r4
 8007330:	3b08      	subs	r3, #8
 8007332:	089b      	lsrs	r3, r3, #2
 8007334:	430a      	orrs	r2, r1
 8007336:	3306      	adds	r3, #6
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	18c3      	adds	r3, r0, r3
 800733c:	3304      	adds	r3, #4
 800733e:	601a      	str	r2, [r3, #0]
}
 8007340:	46c0      	nop			@ (mov r8, r8)
 8007342:	46bd      	mov	sp, r7
 8007344:	b003      	add	sp, #12
 8007346:	bd90      	pop	{r4, r7, pc}
 8007348:	e000e100 	.word	0xe000e100
 800734c:	e000ed00 	.word	0xe000ed00

08007350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	1e5a      	subs	r2, r3, #1
 800735c:	2380      	movs	r3, #128	@ 0x80
 800735e:	045b      	lsls	r3, r3, #17
 8007360:	429a      	cmp	r2, r3
 8007362:	d301      	bcc.n	8007368 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007364:	2301      	movs	r3, #1
 8007366:	e010      	b.n	800738a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007368:	4b0a      	ldr	r3, [pc, #40]	@ (8007394 <SysTick_Config+0x44>)
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	3a01      	subs	r2, #1
 800736e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007370:	2301      	movs	r3, #1
 8007372:	425b      	negs	r3, r3
 8007374:	2103      	movs	r1, #3
 8007376:	0018      	movs	r0, r3
 8007378:	f7ff ff7c 	bl	8007274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <SysTick_Config+0x44>)
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007382:	4b04      	ldr	r3, [pc, #16]	@ (8007394 <SysTick_Config+0x44>)
 8007384:	2207      	movs	r2, #7
 8007386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007388:	2300      	movs	r3, #0
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b002      	add	sp, #8
 8007390:	bd80      	pop	{r7, pc}
 8007392:	46c0      	nop			@ (mov r8, r8)
 8007394:	e000e010 	.word	0xe000e010

08007398 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	210f      	movs	r1, #15
 80073a4:	187b      	adds	r3, r7, r1
 80073a6:	1c02      	adds	r2, r0, #0
 80073a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	187b      	adds	r3, r7, r1
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	b25b      	sxtb	r3, r3
 80073b2:	0011      	movs	r1, r2
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7ff ff5d 	bl	8007274 <__NVIC_SetPriority>
}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	46bd      	mov	sp, r7
 80073be:	b004      	add	sp, #16
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	0002      	movs	r2, r0
 80073ca:	1dfb      	adds	r3, r7, #7
 80073cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073ce:	1dfb      	adds	r3, r7, #7
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	b25b      	sxtb	r3, r3
 80073d4:	0018      	movs	r0, r3
 80073d6:	f7ff ff11 	bl	80071fc <__NVIC_EnableIRQ>
}
 80073da:	46c0      	nop			@ (mov r8, r8)
 80073dc:	46bd      	mov	sp, r7
 80073de:	b002      	add	sp, #8
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	0002      	movs	r2, r0
 80073ea:	1dfb      	adds	r3, r7, #7
 80073ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80073ee:	1dfb      	adds	r3, r7, #7
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b25b      	sxtb	r3, r3
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7ff ff1b 	bl	8007230 <__NVIC_DisableIRQ>
}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	46bd      	mov	sp, r7
 80073fe:	b002      	add	sp, #8
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	0018      	movs	r0, r3
 800740e:	f7ff ff9f 	bl	8007350 <SysTick_Config>
 8007412:	0003      	movs	r3, r0
}
 8007414:	0018      	movs	r0, r3
 8007416:	46bd      	mov	sp, r7
 8007418:	b002      	add	sp, #8
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007426:	2300      	movs	r3, #0
 8007428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800742a:	e153      	b.n	80076d4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2101      	movs	r1, #1
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4091      	lsls	r1, r2
 8007436:	000a      	movs	r2, r1
 8007438:	4013      	ands	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d100      	bne.n	8007444 <HAL_GPIO_Init+0x28>
 8007442:	e144      	b.n	80076ce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2203      	movs	r2, #3
 800744a:	4013      	ands	r3, r2
 800744c:	2b01      	cmp	r3, #1
 800744e:	d005      	beq.n	800745c <HAL_GPIO_Init+0x40>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2203      	movs	r2, #3
 8007456:	4013      	ands	r3, r2
 8007458:	2b02      	cmp	r3, #2
 800745a:	d130      	bne.n	80074be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	2203      	movs	r2, #3
 8007468:	409a      	lsls	r2, r3
 800746a:	0013      	movs	r3, r2
 800746c:	43da      	mvns	r2, r3
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4013      	ands	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	409a      	lsls	r2, r3
 800747e:	0013      	movs	r3, r2
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007492:	2201      	movs	r2, #1
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	409a      	lsls	r2, r3
 8007498:	0013      	movs	r3, r2
 800749a:	43da      	mvns	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4013      	ands	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	091b      	lsrs	r3, r3, #4
 80074a8:	2201      	movs	r2, #1
 80074aa:	401a      	ands	r2, r3
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	409a      	lsls	r2, r3
 80074b0:	0013      	movs	r3, r2
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2203      	movs	r2, #3
 80074c4:	4013      	ands	r3, r2
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d017      	beq.n	80074fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	2203      	movs	r2, #3
 80074d6:	409a      	lsls	r2, r3
 80074d8:	0013      	movs	r3, r2
 80074da:	43da      	mvns	r2, r3
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4013      	ands	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	409a      	lsls	r2, r3
 80074ec:	0013      	movs	r3, r2
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2203      	movs	r2, #3
 8007500:	4013      	ands	r3, r2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d123      	bne.n	800754e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	08da      	lsrs	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3208      	adds	r2, #8
 800750e:	0092      	lsls	r2, r2, #2
 8007510:	58d3      	ldr	r3, [r2, r3]
 8007512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2207      	movs	r2, #7
 8007518:	4013      	ands	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	220f      	movs	r2, #15
 800751e:	409a      	lsls	r2, r3
 8007520:	0013      	movs	r3, r2
 8007522:	43da      	mvns	r2, r3
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	4013      	ands	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2107      	movs	r1, #7
 8007532:	400b      	ands	r3, r1
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	409a      	lsls	r2, r3
 8007538:	0013      	movs	r3, r2
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	08da      	lsrs	r2, r3, #3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3208      	adds	r2, #8
 8007548:	0092      	lsls	r2, r2, #2
 800754a:	6939      	ldr	r1, [r7, #16]
 800754c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	2203      	movs	r2, #3
 800755a:	409a      	lsls	r2, r3
 800755c:	0013      	movs	r3, r2
 800755e:	43da      	mvns	r2, r3
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	4013      	ands	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2203      	movs	r2, #3
 800756c:	401a      	ands	r2, r3
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	409a      	lsls	r2, r3
 8007574:	0013      	movs	r3, r2
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	23c0      	movs	r3, #192	@ 0xc0
 8007588:	029b      	lsls	r3, r3, #10
 800758a:	4013      	ands	r3, r2
 800758c:	d100      	bne.n	8007590 <HAL_GPIO_Init+0x174>
 800758e:	e09e      	b.n	80076ce <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007590:	4a56      	ldr	r2, [pc, #344]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	089b      	lsrs	r3, r3, #2
 8007596:	3318      	adds	r3, #24
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	589b      	ldr	r3, [r3, r2]
 800759c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2203      	movs	r2, #3
 80075a2:	4013      	ands	r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	220f      	movs	r2, #15
 80075a8:	409a      	lsls	r2, r3
 80075aa:	0013      	movs	r3, r2
 80075ac:	43da      	mvns	r2, r3
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4013      	ands	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	23a0      	movs	r3, #160	@ 0xa0
 80075b8:	05db      	lsls	r3, r3, #23
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d01f      	beq.n	80075fe <HAL_GPIO_Init+0x1e2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a4b      	ldr	r2, [pc, #300]	@ (80076f0 <HAL_GPIO_Init+0x2d4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d019      	beq.n	80075fa <HAL_GPIO_Init+0x1de>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a4a      	ldr	r2, [pc, #296]	@ (80076f4 <HAL_GPIO_Init+0x2d8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_GPIO_Init+0x1da>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a49      	ldr	r2, [pc, #292]	@ (80076f8 <HAL_GPIO_Init+0x2dc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00d      	beq.n	80075f2 <HAL_GPIO_Init+0x1d6>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a48      	ldr	r2, [pc, #288]	@ (80076fc <HAL_GPIO_Init+0x2e0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <HAL_GPIO_Init+0x1d2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a47      	ldr	r2, [pc, #284]	@ (8007700 <HAL_GPIO_Init+0x2e4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <HAL_GPIO_Init+0x1ce>
 80075e6:	2305      	movs	r3, #5
 80075e8:	e00a      	b.n	8007600 <HAL_GPIO_Init+0x1e4>
 80075ea:	2306      	movs	r3, #6
 80075ec:	e008      	b.n	8007600 <HAL_GPIO_Init+0x1e4>
 80075ee:	2304      	movs	r3, #4
 80075f0:	e006      	b.n	8007600 <HAL_GPIO_Init+0x1e4>
 80075f2:	2303      	movs	r3, #3
 80075f4:	e004      	b.n	8007600 <HAL_GPIO_Init+0x1e4>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e002      	b.n	8007600 <HAL_GPIO_Init+0x1e4>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <HAL_GPIO_Init+0x1e4>
 80075fe:	2300      	movs	r3, #0
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	2103      	movs	r1, #3
 8007604:	400a      	ands	r2, r1
 8007606:	00d2      	lsls	r2, r2, #3
 8007608:	4093      	lsls	r3, r2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007610:	4936      	ldr	r1, [pc, #216]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	089b      	lsrs	r3, r3, #2
 8007616:	3318      	adds	r3, #24
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800761e:	4b33      	ldr	r3, [pc, #204]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	43da      	mvns	r2, r3
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4013      	ands	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	2380      	movs	r3, #128	@ 0x80
 8007634:	035b      	lsls	r3, r3, #13
 8007636:	4013      	ands	r3, r2
 8007638:	d003      	beq.n	8007642 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007642:	4b2a      	ldr	r3, [pc, #168]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007648:	4b28      	ldr	r3, [pc, #160]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	43da      	mvns	r2, r3
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4013      	ands	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	2380      	movs	r3, #128	@ 0x80
 800765e:	039b      	lsls	r3, r3, #14
 8007660:	4013      	ands	r3, r2
 8007662:	d003      	beq.n	800766c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800766c:	4b1f      	ldr	r3, [pc, #124]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007672:	4a1e      	ldr	r2, [pc, #120]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 8007674:	2384      	movs	r3, #132	@ 0x84
 8007676:	58d3      	ldr	r3, [r2, r3]
 8007678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	43da      	mvns	r2, r3
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4013      	ands	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	2380      	movs	r3, #128	@ 0x80
 800768a:	029b      	lsls	r3, r3, #10
 800768c:	4013      	ands	r3, r2
 800768e:	d003      	beq.n	8007698 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007698:	4914      	ldr	r1, [pc, #80]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 800769a:	2284      	movs	r2, #132	@ 0x84
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80076a0:	4a12      	ldr	r2, [pc, #72]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	58d3      	ldr	r3, [r2, r3]
 80076a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	43da      	mvns	r2, r3
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	4013      	ands	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	2380      	movs	r3, #128	@ 0x80
 80076b8:	025b      	lsls	r3, r3, #9
 80076ba:	4013      	ands	r3, r2
 80076bc:	d003      	beq.n	80076c6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80076c6:	4909      	ldr	r1, [pc, #36]	@ (80076ec <HAL_GPIO_Init+0x2d0>)
 80076c8:	2280      	movs	r2, #128	@ 0x80
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	3301      	adds	r3, #1
 80076d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	40da      	lsrs	r2, r3
 80076dc:	1e13      	subs	r3, r2, #0
 80076de:	d000      	beq.n	80076e2 <HAL_GPIO_Init+0x2c6>
 80076e0:	e6a4      	b.n	800742c <HAL_GPIO_Init+0x10>
  }
}
 80076e2:	46c0      	nop			@ (mov r8, r8)
 80076e4:	46c0      	nop			@ (mov r8, r8)
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b006      	add	sp, #24
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	40021800 	.word	0x40021800
 80076f0:	50000400 	.word	0x50000400
 80076f4:	50000800 	.word	0x50000800
 80076f8:	50000c00 	.word	0x50000c00
 80076fc:	50001000 	.word	0x50001000
 8007700:	50001400 	.word	0x50001400

08007704 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007712:	e0c0      	b.n	8007896 <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007714:	2201      	movs	r2, #1
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	409a      	lsls	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	4013      	ands	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d100      	bne.n	8007728 <HAL_GPIO_DeInit+0x24>
 8007726:	e0b3      	b.n	8007890 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8007728:	4a60      	ldr	r2, [pc, #384]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	089b      	lsrs	r3, r3, #2
 800772e:	3318      	adds	r3, #24
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	589b      	ldr	r3, [r3, r2]
 8007734:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2203      	movs	r2, #3
 800773a:	4013      	ands	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	220f      	movs	r2, #15
 8007740:	409a      	lsls	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4013      	ands	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	23a0      	movs	r3, #160	@ 0xa0
 800774c:	05db      	lsls	r3, r3, #23
 800774e:	429a      	cmp	r2, r3
 8007750:	d01f      	beq.n	8007792 <HAL_GPIO_DeInit+0x8e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a56      	ldr	r2, [pc, #344]	@ (80078b0 <HAL_GPIO_DeInit+0x1ac>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d019      	beq.n	800778e <HAL_GPIO_DeInit+0x8a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a55      	ldr	r2, [pc, #340]	@ (80078b4 <HAL_GPIO_DeInit+0x1b0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d013      	beq.n	800778a <HAL_GPIO_DeInit+0x86>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a54      	ldr	r2, [pc, #336]	@ (80078b8 <HAL_GPIO_DeInit+0x1b4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00d      	beq.n	8007786 <HAL_GPIO_DeInit+0x82>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a53      	ldr	r2, [pc, #332]	@ (80078bc <HAL_GPIO_DeInit+0x1b8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d007      	beq.n	8007782 <HAL_GPIO_DeInit+0x7e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a52      	ldr	r2, [pc, #328]	@ (80078c0 <HAL_GPIO_DeInit+0x1bc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d101      	bne.n	800777e <HAL_GPIO_DeInit+0x7a>
 800777a:	2305      	movs	r3, #5
 800777c:	e00a      	b.n	8007794 <HAL_GPIO_DeInit+0x90>
 800777e:	2306      	movs	r3, #6
 8007780:	e008      	b.n	8007794 <HAL_GPIO_DeInit+0x90>
 8007782:	2304      	movs	r3, #4
 8007784:	e006      	b.n	8007794 <HAL_GPIO_DeInit+0x90>
 8007786:	2303      	movs	r3, #3
 8007788:	e004      	b.n	8007794 <HAL_GPIO_DeInit+0x90>
 800778a:	2302      	movs	r3, #2
 800778c:	e002      	b.n	8007794 <HAL_GPIO_DeInit+0x90>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <HAL_GPIO_DeInit+0x90>
 8007792:	2300      	movs	r3, #0
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	2103      	movs	r1, #3
 8007798:	400a      	ands	r2, r1
 800779a:	00d2      	lsls	r2, r2, #3
 800779c:	4093      	lsls	r3, r2
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d136      	bne.n	8007812 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80077a4:	4a41      	ldr	r2, [pc, #260]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077a6:	2380      	movs	r3, #128	@ 0x80
 80077a8:	58d3      	ldr	r3, [r2, r3]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	43d2      	mvns	r2, r2
 80077ae:	493f      	ldr	r1, [pc, #252]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	2280      	movs	r2, #128	@ 0x80
 80077b4:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80077b6:	4a3d      	ldr	r2, [pc, #244]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077b8:	2384      	movs	r3, #132	@ 0x84
 80077ba:	58d3      	ldr	r3, [r2, r3]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	43d2      	mvns	r2, r2
 80077c0:	493a      	ldr	r1, [pc, #232]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	2284      	movs	r2, #132	@ 0x84
 80077c6:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80077c8:	4b38      	ldr	r3, [pc, #224]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	43d9      	mvns	r1, r3
 80077d0:	4b36      	ldr	r3, [pc, #216]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077d2:	400a      	ands	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80077d6:	4b35      	ldr	r3, [pc, #212]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	43d9      	mvns	r1, r3
 80077de:	4b33      	ldr	r3, [pc, #204]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077e0:	400a      	ands	r2, r1
 80077e2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2203      	movs	r2, #3
 80077e8:	4013      	ands	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	220f      	movs	r2, #15
 80077ee:	409a      	lsls	r2, r3
 80077f0:	0013      	movs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80077f4:	4a2d      	ldr	r2, [pc, #180]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	089b      	lsrs	r3, r3, #2
 80077fa:	3318      	adds	r3, #24
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	589a      	ldr	r2, [r3, r2]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	43d9      	mvns	r1, r3
 8007804:	4829      	ldr	r0, [pc, #164]	@ (80078ac <HAL_GPIO_DeInit+0x1a8>)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	089b      	lsrs	r3, r3, #2
 800780a:	400a      	ands	r2, r1
 800780c:	3318      	adds	r3, #24
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	2103      	movs	r1, #3
 800781c:	4099      	lsls	r1, r3
 800781e:	000b      	movs	r3, r1
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	08da      	lsrs	r2, r3, #3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3208      	adds	r2, #8
 800782e:	0092      	lsls	r2, r2, #2
 8007830:	58d3      	ldr	r3, [r2, r3]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	2107      	movs	r1, #7
 8007836:	400a      	ands	r2, r1
 8007838:	0092      	lsls	r2, r2, #2
 800783a:	210f      	movs	r1, #15
 800783c:	4091      	lsls	r1, r2
 800783e:	000a      	movs	r2, r1
 8007840:	43d1      	mvns	r1, r2
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	08d2      	lsrs	r2, r2, #3
 8007846:	4019      	ands	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3208      	adds	r2, #8
 800784c:	0092      	lsls	r2, r2, #2
 800784e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	0052      	lsls	r2, r2, #1
 8007858:	2103      	movs	r1, #3
 800785a:	4091      	lsls	r1, r2
 800785c:	000a      	movs	r2, r1
 800785e:	43d2      	mvns	r2, r2
 8007860:	401a      	ands	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2101      	movs	r1, #1
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4091      	lsls	r1, r2
 8007870:	000a      	movs	r2, r1
 8007872:	43d2      	mvns	r2, r2
 8007874:	401a      	ands	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	0052      	lsls	r2, r2, #1
 8007882:	2103      	movs	r1, #3
 8007884:	4091      	lsls	r1, r2
 8007886:	000a      	movs	r2, r1
 8007888:	43d2      	mvns	r2, r2
 800788a:	401a      	ands	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	3301      	adds	r3, #1
 8007894:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	40da      	lsrs	r2, r3
 800789c:	1e13      	subs	r3, r2, #0
 800789e:	d000      	beq.n	80078a2 <HAL_GPIO_DeInit+0x19e>
 80078a0:	e738      	b.n	8007714 <HAL_GPIO_DeInit+0x10>
  }
}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	46c0      	nop			@ (mov r8, r8)
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b006      	add	sp, #24
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	40021800 	.word	0x40021800
 80078b0:	50000400 	.word	0x50000400
 80078b4:	50000800 	.word	0x50000800
 80078b8:	50000c00 	.word	0x50000c00
 80078bc:	50001000 	.word	0x50001000
 80078c0:	50001400 	.word	0x50001400

080078c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	000a      	movs	r2, r1
 80078ce:	1cbb      	adds	r3, r7, #2
 80078d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	1cba      	adds	r2, r7, #2
 80078d8:	8812      	ldrh	r2, [r2, #0]
 80078da:	4013      	ands	r3, r2
 80078dc:	d004      	beq.n	80078e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80078de:	230f      	movs	r3, #15
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	2201      	movs	r2, #1
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	e003      	b.n	80078f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078e8:	230f      	movs	r3, #15
 80078ea:	18fb      	adds	r3, r7, r3
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80078f0:	230f      	movs	r3, #15
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	781b      	ldrb	r3, [r3, #0]
}
 80078f6:	0018      	movs	r0, r3
 80078f8:	46bd      	mov	sp, r7
 80078fa:	b004      	add	sp, #16
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	0008      	movs	r0, r1
 8007908:	0011      	movs	r1, r2
 800790a:	1cbb      	adds	r3, r7, #2
 800790c:	1c02      	adds	r2, r0, #0
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	1c7b      	adds	r3, r7, #1
 8007912:	1c0a      	adds	r2, r1, #0
 8007914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007916:	1c7b      	adds	r3, r7, #1
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800791e:	1cbb      	adds	r3, r7, #2
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007926:	e003      	b.n	8007930 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007928:	1cbb      	adds	r3, r7, #2
 800792a:	881a      	ldrh	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007930:	46c0      	nop			@ (mov r8, r8)
 8007932:	46bd      	mov	sp, r7
 8007934:	b002      	add	sp, #8
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	0002      	movs	r2, r0
 8007940:	1dbb      	adds	r3, r7, #6
 8007942:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007944:	4b10      	ldr	r3, [pc, #64]	@ (8007988 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	1dba      	adds	r2, r7, #6
 800794a:	8812      	ldrh	r2, [r2, #0]
 800794c:	4013      	ands	r3, r2
 800794e:	d008      	beq.n	8007962 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007950:	4b0d      	ldr	r3, [pc, #52]	@ (8007988 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007952:	1dba      	adds	r2, r7, #6
 8007954:	8812      	ldrh	r2, [r2, #0]
 8007956:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007958:	1dbb      	adds	r3, r7, #6
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	0018      	movs	r0, r3
 800795e:	f000 f815 	bl	800798c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007962:	4b09      	ldr	r3, [pc, #36]	@ (8007988 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	1dba      	adds	r2, r7, #6
 8007968:	8812      	ldrh	r2, [r2, #0]
 800796a:	4013      	ands	r3, r2
 800796c:	d008      	beq.n	8007980 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800796e:	4b06      	ldr	r3, [pc, #24]	@ (8007988 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007970:	1dba      	adds	r2, r7, #6
 8007972:	8812      	ldrh	r2, [r2, #0]
 8007974:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007976:	1dbb      	adds	r3, r7, #6
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	0018      	movs	r0, r3
 800797c:	f7fc ff36 	bl	80047ec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007980:	46c0      	nop			@ (mov r8, r8)
 8007982:	46bd      	mov	sp, r7
 8007984:	b002      	add	sp, #8
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40021800 	.word	0x40021800

0800798c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	0002      	movs	r2, r0
 8007994:	1dbb      	adds	r3, r7, #6
 8007996:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007998:	46c0      	nop			@ (mov r8, r8)
 800799a:	46bd      	mov	sp, r7
 800799c:	b002      	add	sp, #8
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e0b6      	b.n	8007b20 <HAL_LCD_Init+0x180>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2235      	movs	r2, #53	@ 0x35
 80079b6:	5c9b      	ldrb	r3, [r3, r2]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d107      	bne.n	80079ce <HAL_LCD_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2234      	movs	r2, #52	@ 0x34
 80079c2:	2100      	movs	r1, #0
 80079c4:	5499      	strb	r1, [r3, r2]

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7fd fbcf 	bl	800516c <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2235      	movs	r2, #53	@ 0x35
 80079d2:	2102      	movs	r1, #2
 80079d4:	5499      	strb	r1, [r3, r2]

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2101      	movs	r1, #1
 80079e2:	438a      	bics	r2, r1
 80079e4:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER7; counter++)
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e00b      	b.n	8007a04 <HAL_LCD_Init+0x64>
  {
    hlcd->Instance->RAM[counter] = 0;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	3304      	adds	r3, #4
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	18d3      	adds	r3, r2, r3
 80079f8:	3304      	adds	r3, #4
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER7; counter++)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	3301      	adds	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b07      	cmp	r3, #7
 8007a08:	d9f0      	bls.n	80079ec <HAL_LCD_Init+0x4c>
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	4a45      	ldr	r2, [pc, #276]	@ (8007b28 <HAL_LCD_Init+0x188>)
 8007a12:	4013      	ands	r3, r2
 8007a14:	0019      	movs	r1, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	605a      	str	r2, [r3, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8007a4c:	2513      	movs	r5, #19
 8007a4e:	197c      	adds	r4, r7, r5
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	0018      	movs	r0, r3
 8007a54:	f000 f88b 	bl	8007b6e <LCD_WaitForSynchro>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8007a5c:	197b      	adds	r3, r7, r5
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_LCD_Init+0xca>
  {
    return status;
 8007a64:	197b      	adds	r3, r7, r5
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	e05a      	b.n	8007b20 <HAL_LCD_Init+0x180>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	22fe      	movs	r2, #254	@ 0xfe
 8007a72:	4393      	bics	r3, r2
 8007a74:	0019      	movs	r1, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007aa4:	f7fd ffd8 	bl	8005a58 <HAL_GetTick>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8007aac:	e00d      	b.n	8007aca <HAL_LCD_Init+0x12a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8007aae:	f7fd ffd3 	bl	8005a58 <HAL_GetTick>
 8007ab2:	0002      	movs	r2, r0
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	23fa      	movs	r3, #250	@ 0xfa
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d904      	bls.n	8007aca <HAL_LCD_Init+0x12a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e02a      	b.n	8007b20 <HAL_LCD_Init+0x180>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d1ea      	bne.n	8007aae <HAL_LCD_Init+0x10e>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007ad8:	f7fd ffbe 	bl	8005a58 <HAL_GetTick>
 8007adc:	0003      	movs	r3, r0
 8007ade:	60fb      	str	r3, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8007ae0:	e00d      	b.n	8007afe <HAL_LCD_Init+0x15e>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8007ae2:	f7fd ffb9 	bl	8005a58 <HAL_GetTick>
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	1ad2      	subs	r2, r2, r3
 8007aec:	23fa      	movs	r3, #250	@ 0xfa
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d904      	bls.n	8007afe <HAL_LCD_Init+0x15e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2210      	movs	r2, #16
 8007af8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e010      	b.n	8007b20 <HAL_LCD_Init+0x180>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2210      	movs	r2, #16
 8007b06:	4013      	ands	r3, r2
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d1ea      	bne.n	8007ae2 <HAL_LCD_Init+0x142>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	639a      	str	r2, [r3, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2235      	movs	r2, #53	@ 0x35
 8007b16:	2101      	movs	r1, #1
 8007b18:	5499      	strb	r1, [r3, r2]

  return status;
 8007b1a:	2313      	movs	r3, #19
 8007b1c:	18fb      	adds	r3, r7, r3
 8007b1e:	781b      	ldrb	r3, [r3, #0]
}
 8007b20:	0018      	movs	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	b006      	add	sp, #24
 8007b26:	bdb0      	pop	{r4, r5, r7, pc}
 8007b28:	fc00000e 	.word	0xfc00000e

08007b2c <HAL_LCD_DeInit>:
  * @brief  DeInitialize the LCD peripheral.
  * @param hlcd LCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LCD_DeInit(LCD_HandleTypeDef *hlcd)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_LCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e013      	b.n	8007b66 <HAL_LCD_DeInit+0x3a>
  }

  /* Check the parameters */
  assert_param(IS_LCD_ALL_INSTANCE(hlcd->Instance));

  hlcd->State = HAL_LCD_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2235      	movs	r2, #53	@ 0x35
 8007b42:	2102      	movs	r1, #2
 8007b44:	5499      	strb	r1, [r3, r2]

  /* DeInit the low level hardware */
  HAL_LCD_MspDeInit(hlcd);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f7fd fbbf 	bl	80052cc <HAL_LCD_MspDeInit>

  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	639a      	str	r2, [r3, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_RESET;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2235      	movs	r2, #53	@ 0x35
 8007b58:	2100      	movs	r1, #0
 8007b5a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hlcd);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2234      	movs	r2, #52	@ 0x34
 8007b60:	2100      	movs	r1, #0
 8007b62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	0018      	movs	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b002      	add	sp, #8
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007b76:	f7fd ff6f 	bl	8005a58 <HAL_GetTick>
 8007b7a:	0003      	movs	r3, r0
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8007b7e:	e00d      	b.n	8007b9c <LCD_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8007b80:	f7fd ff6a 	bl	8005a58 <HAL_GetTick>
 8007b84:	0002      	movs	r2, r0
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	23fa      	movs	r3, #250	@ 0xfa
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d904      	bls.n	8007b9c <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e007      	b.n	8007bac <LCD_WaitForSynchro+0x3e>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d1ea      	bne.n	8007b80 <LCD_WaitForSynchro+0x12>
    }
  }

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	0018      	movs	r0, r3
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b004      	add	sp, #16
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e137      	b.n	8007e36 <HAL_LPTIM_Init+0x282>
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2252      	movs	r2, #82	@ 0x52
 8007bca:	5c9b      	ldrb	r3, [r3, r2]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d107      	bne.n	8007be2 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2251      	movs	r2, #81	@ 0x51
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7fd fbab 	bl	8005338 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2252      	movs	r2, #82	@ 0x52
 8007be6:	2102      	movs	r1, #2
 8007be8:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2280      	movs	r2, #128	@ 0x80
 8007c00:	0052      	lsls	r2, r2, #1
 8007c02:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007c0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8007c0e:	2380      	movs	r3, #128	@ 0x80
 8007c10:	005a      	lsls	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	0011      	movs	r1, r2
 8007c16:	0018      	movs	r0, r3
 8007c18:	f000 fbaa 	bl	8008370 <LPTIM_WaitForFlag>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d101      	bne.n	8007c26 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e107      	b.n	8007e36 <HAL_LPTIM_Init+0x282>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2210      	movs	r2, #16
 8007c2c:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6a12      	ldr	r2, [r2, #32]
 8007c36:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2110      	movs	r1, #16
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	f000 fb97 	bl	8008370 <LPTIM_WaitForFlag>
 8007c42:	0003      	movs	r3, r0
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d101      	bne.n	8007c4c <HAL_LPTIM_Init+0x98>
  {
    return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e0f4      	b.n	8007e36 <HAL_LPTIM_Init+0x282>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a7b      	ldr	r2, [pc, #492]	@ (8007e40 <HAL_LPTIM_Init+0x28c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d004      	beq.n	8007c60 <HAL_LPTIM_Init+0xac>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a7a      	ldr	r2, [pc, #488]	@ (8007e44 <HAL_LPTIM_Init+0x290>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d101      	bne.n	8007c64 <HAL_LPTIM_Init+0xb0>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <HAL_LPTIM_Init+0xb2>
 8007c64:	2300      	movs	r3, #0
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d122      	bne.n	8007cb0 <HAL_LPTIM_Init+0xfc>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	2202      	movs	r2, #2
 8007c72:	4013      	ands	r3, r2
 8007c74:	d14e      	bne.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	2380      	movs	r3, #128	@ 0x80
 8007c7e:	029b      	lsls	r3, r3, #10
 8007c80:	4013      	ands	r3, r2
 8007c82:	d147      	bne.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d141      	bne.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c96:	2380      	movs	r3, #128	@ 0x80
 8007c98:	029b      	lsls	r3, r3, #10
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	d13a      	bne.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2101      	movs	r1, #1
 8007caa:	438a      	bics	r2, r1
 8007cac:	611a      	str	r2, [r3, #16]
 8007cae:	e031      	b.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a62      	ldr	r2, [pc, #392]	@ (8007e40 <HAL_LPTIM_Init+0x28c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d009      	beq.n	8007cce <HAL_LPTIM_Init+0x11a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a62      	ldr	r2, [pc, #392]	@ (8007e48 <HAL_LPTIM_Init+0x294>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d004      	beq.n	8007cce <HAL_LPTIM_Init+0x11a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8007e44 <HAL_LPTIM_Init+0x290>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d101      	bne.n	8007cd2 <HAL_LPTIM_Init+0x11e>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <HAL_LPTIM_Init+0x120>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d115      	bne.n	8007d04 <HAL_LPTIM_Init+0x150>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cde:	2202      	movs	r2, #2
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	d117      	bne.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cea:	2380      	movs	r3, #128	@ 0x80
 8007cec:	029b      	lsls	r3, r3, #10
 8007cee:	4013      	ands	r3, r2
 8007cf0:	d110      	bne.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	438a      	bics	r2, r1
 8007d00:	611a      	str	r2, [r3, #16]
 8007d02:	e007      	b.n	8007d14 <HAL_LPTIM_Init+0x160>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691a      	ldr	r2, [r3, #16]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2101      	movs	r1, #1
 8007d10:	438a      	bics	r2, r1
 8007d12:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d005      	beq.n	8007d30 <HAL_LPTIM_Init+0x17c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d28:	2380      	movs	r3, #128	@ 0x80
 8007d2a:	041b      	lsls	r3, r3, #16
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d103      	bne.n	8007d38 <HAL_LPTIM_Init+0x184>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	221e      	movs	r2, #30
 8007d34:	4393      	bics	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	4a43      	ldr	r2, [pc, #268]	@ (8007e4c <HAL_LPTIM_Init+0x298>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <HAL_LPTIM_Init+0x196>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a42      	ldr	r2, [pc, #264]	@ (8007e50 <HAL_LPTIM_Init+0x29c>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a41      	ldr	r2, [pc, #260]	@ (8007e54 <HAL_LPTIM_Init+0x2a0>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007d5a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8007d60:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007d66:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <HAL_LPTIM_Init+0x1d2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d005      	beq.n	8007d9a <HAL_LPTIM_Init+0x1e6>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d92:	2380      	movs	r3, #128	@ 0x80
 8007d94:	041b      	lsls	r3, r3, #16
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d107      	bne.n	8007daa <HAL_LPTIM_Init+0x1f6>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007da2:	4313      	orrs	r3, r2
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	4a27      	ldr	r2, [pc, #156]	@ (8007e4c <HAL_LPTIM_Init+0x298>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00a      	beq.n	8007dca <HAL_LPTIM_Init+0x216>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007dbc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007dc2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
#if defined(LPTIM3)
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007e40 <HAL_LPTIM_Init+0x28c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_LPTIM_Init+0x232>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a18      	ldr	r2, [pc, #96]	@ (8007e44 <HAL_LPTIM_Init+0x290>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d108      	bne.n	8007df8 <HAL_LPTIM_Init+0x244>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007df6:	e009      	b.n	8007e0c <HAL_LPTIM_Init+0x258>
  }
  else
  {
    if (hlptim->Instance == LPTIM2)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a12      	ldr	r2, [pc, #72]	@ (8007e48 <HAL_LPTIM_Init+0x294>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d104      	bne.n	8007e0c <HAL_LPTIM_Init+0x258>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2253      	movs	r2, #83	@ 0x53
 8007e10:	2101      	movs	r1, #1
 8007e12:	5499      	strb	r1, [r3, r2]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2254      	movs	r2, #84	@ 0x54
 8007e18:	2101      	movs	r1, #1
 8007e1a:	5499      	strb	r1, [r3, r2]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2255      	movs	r2, #85	@ 0x55
 8007e20:	2101      	movs	r1, #1
 8007e22:	5499      	strb	r1, [r3, r2]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2256      	movs	r2, #86	@ 0x56
 8007e28:	2101      	movs	r1, #1
 8007e2a:	5499      	strb	r1, [r3, r2]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2252      	movs	r2, #82	@ 0x52
 8007e30:	2101      	movs	r1, #1
 8007e32:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	0018      	movs	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	b004      	add	sp, #16
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	40007c00 	.word	0x40007c00
 8007e44:	40009000 	.word	0x40009000
 8007e48:	40009400 	.word	0x40009400
 8007e4c:	0000ffff 	.word	0x0000ffff
 8007e50:	ffff1f3f 	.word	0xffff1f3f
 8007e54:	ff39f1fe 	.word	0xff39f1fe

08007e58 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2201      	movs	r2, #1
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d121      	bne.n	8007eb2 <HAL_LPTIM_IRQHandler+0x5a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2201      	movs	r2, #1
 8007e76:	4013      	ands	r3, r2
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d11a      	bne.n	8007eb2 <HAL_LPTIM_IRQHandler+0x5a>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2201      	movs	r2, #1
 8007e82:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2238      	movs	r2, #56	@ 0x38
 8007e88:	2101      	movs	r1, #1
 8007e8a:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e92:	2201      	movs	r2, #1
 8007e94:	4013      	ands	r3, r2
 8007e96:	d004      	beq.n	8007ea2 <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f000 fa57 	bl	800834e <HAL_LPTIM_IC_CaptureCallback>
 8007ea0:	e003      	b.n	8007eaa <HAL_LPTIM_IRQHandler+0x52>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f000 fa0a 	bl	80082be <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2238      	movs	r2, #56	@ 0x38
 8007eae:	2100      	movs	r1, #0
 8007eb0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	2380      	movs	r3, #128	@ 0x80
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	401a      	ands	r2, r3
 8007ebe:	2380      	movs	r3, #128	@ 0x80
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d126      	bne.n	8007f14 <HAL_LPTIM_IRQHandler+0xbc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	2380      	movs	r3, #128	@ 0x80
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	401a      	ands	r2, r3
 8007ed2:	2380      	movs	r3, #128	@ 0x80
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d11c      	bne.n	8007f14 <HAL_LPTIM_IRQHandler+0xbc>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2280      	movs	r2, #128	@ 0x80
 8007ee0:	0092      	lsls	r2, r2, #2
 8007ee2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2238      	movs	r2, #56	@ 0x38
 8007ee8:	2102      	movs	r1, #2
 8007eea:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef2:	2380      	movs	r3, #128	@ 0x80
 8007ef4:	025b      	lsls	r3, r3, #9
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	d004      	beq.n	8007f04 <HAL_LPTIM_IRQHandler+0xac>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	0018      	movs	r0, r3
 8007efe:	f000 fa26 	bl	800834e <HAL_LPTIM_IC_CaptureCallback>
 8007f02:	e003      	b.n	8007f0c <HAL_LPTIM_IRQHandler+0xb4>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	0018      	movs	r0, r3
 8007f08:	f000 f9d9 	bl	80082be <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2238      	movs	r2, #56	@ 0x38
 8007f10:	2100      	movs	r1, #0
 8007f12:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	2380      	movs	r3, #128	@ 0x80
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	401a      	ands	r2, r3
 8007f20:	2380      	movs	r3, #128	@ 0x80
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d125      	bne.n	8007f74 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	2380      	movs	r3, #128	@ 0x80
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	401a      	ands	r2, r3
 8007f34:	2380      	movs	r3, #128	@ 0x80
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d11b      	bne.n	8007f74 <HAL_LPTIM_IRQHandler+0x11c>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2280      	movs	r2, #128	@ 0x80
 8007f42:	00d2      	lsls	r2, r2, #3
 8007f44:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2238      	movs	r2, #56	@ 0x38
 8007f4a:	2104      	movs	r1, #4
 8007f4c:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f54:	2201      	movs	r2, #1
 8007f56:	4013      	ands	r3, r2
 8007f58:	d004      	beq.n	8007f64 <HAL_LPTIM_IRQHandler+0x10c>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f000 f9f6 	bl	800834e <HAL_LPTIM_IC_CaptureCallback>
 8007f62:	e003      	b.n	8007f6c <HAL_LPTIM_IRQHandler+0x114>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	0018      	movs	r0, r3
 8007f68:	f000 f9a9 	bl	80082be <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2238      	movs	r2, #56	@ 0x38
 8007f70:	2100      	movs	r1, #0
 8007f72:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	2380      	movs	r3, #128	@ 0x80
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	401a      	ands	r2, r3
 8007f80:	2380      	movs	r3, #128	@ 0x80
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d126      	bne.n	8007fd6 <HAL_LPTIM_IRQHandler+0x17e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	2380      	movs	r3, #128	@ 0x80
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	401a      	ands	r2, r3
 8007f94:	2380      	movs	r3, #128	@ 0x80
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d11c      	bne.n	8007fd6 <HAL_LPTIM_IRQHandler+0x17e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2280      	movs	r2, #128	@ 0x80
 8007fa2:	0112      	lsls	r2, r2, #4
 8007fa4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2238      	movs	r2, #56	@ 0x38
 8007faa:	2108      	movs	r1, #8
 8007fac:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fb4:	2380      	movs	r3, #128	@ 0x80
 8007fb6:	025b      	lsls	r3, r3, #9
 8007fb8:	4013      	ands	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_LPTIM_IRQHandler+0x16e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f000 f9c5 	bl	800834e <HAL_LPTIM_IC_CaptureCallback>
 8007fc4:	e003      	b.n	8007fce <HAL_LPTIM_IRQHandler+0x176>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f000 f978 	bl	80082be <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2238      	movs	r2, #56	@ 0x38
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	2380      	movs	r3, #128	@ 0x80
 8007fde:	015b      	lsls	r3, r3, #5
 8007fe0:	401a      	ands	r2, r3
 8007fe2:	2380      	movs	r3, #128	@ 0x80
 8007fe4:	015b      	lsls	r3, r3, #5
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d11a      	bne.n	8008020 <HAL_LPTIM_IRQHandler+0x1c8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	2380      	movs	r3, #128	@ 0x80
 8007ff2:	015b      	lsls	r3, r3, #5
 8007ff4:	401a      	ands	r2, r3
 8007ff6:	2380      	movs	r3, #128	@ 0x80
 8007ff8:	015b      	lsls	r3, r3, #5
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d110      	bne.n	8008020 <HAL_LPTIM_IRQHandler+0x1c8>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2280      	movs	r2, #128	@ 0x80
 8008004:	0152      	lsls	r2, r2, #5
 8008006:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2238      	movs	r2, #56	@ 0x38
 800800c:	2101      	movs	r1, #1
 800800e:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	0018      	movs	r0, r3
 8008014:	f000 f9a3 	bl	800835e <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2238      	movs	r2, #56	@ 0x38
 800801c:	2100      	movs	r1, #0
 800801e:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	2380      	movs	r3, #128	@ 0x80
 8008028:	019b      	lsls	r3, r3, #6
 800802a:	401a      	ands	r2, r3
 800802c:	2380      	movs	r3, #128	@ 0x80
 800802e:	019b      	lsls	r3, r3, #6
 8008030:	429a      	cmp	r2, r3
 8008032:	d11a      	bne.n	800806a <HAL_LPTIM_IRQHandler+0x212>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	2380      	movs	r3, #128	@ 0x80
 800803c:	019b      	lsls	r3, r3, #6
 800803e:	401a      	ands	r2, r3
 8008040:	2380      	movs	r3, #128	@ 0x80
 8008042:	019b      	lsls	r3, r3, #6
 8008044:	429a      	cmp	r2, r3
 8008046:	d110      	bne.n	800806a <HAL_LPTIM_IRQHandler+0x212>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2280      	movs	r2, #128	@ 0x80
 800804e:	0192      	lsls	r2, r2, #6
 8008050:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2238      	movs	r2, #56	@ 0x38
 8008056:	2102      	movs	r1, #2
 8008058:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	0018      	movs	r0, r3
 800805e:	f000 f97e 	bl	800835e <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2238      	movs	r2, #56	@ 0x38
 8008066:	2100      	movs	r1, #0
 8008068:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	2380      	movs	r3, #128	@ 0x80
 8008072:	01db      	lsls	r3, r3, #7
 8008074:	401a      	ands	r2, r3
 8008076:	2380      	movs	r3, #128	@ 0x80
 8008078:	01db      	lsls	r3, r3, #7
 800807a:	429a      	cmp	r2, r3
 800807c:	d11a      	bne.n	80080b4 <HAL_LPTIM_IRQHandler+0x25c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	2380      	movs	r3, #128	@ 0x80
 8008086:	01db      	lsls	r3, r3, #7
 8008088:	401a      	ands	r2, r3
 800808a:	2380      	movs	r3, #128	@ 0x80
 800808c:	01db      	lsls	r3, r3, #7
 800808e:	429a      	cmp	r2, r3
 8008090:	d110      	bne.n	80080b4 <HAL_LPTIM_IRQHandler+0x25c>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2280      	movs	r2, #128	@ 0x80
 8008098:	01d2      	lsls	r2, r2, #7
 800809a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2238      	movs	r2, #56	@ 0x38
 80080a0:	2104      	movs	r1, #4
 80080a2:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	0018      	movs	r0, r3
 80080a8:	f000 f959 	bl	800835e <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2238      	movs	r2, #56	@ 0x38
 80080b0:	2100      	movs	r1, #0
 80080b2:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	2380      	movs	r3, #128	@ 0x80
 80080bc:	021b      	lsls	r3, r3, #8
 80080be:	401a      	ands	r2, r3
 80080c0:	2380      	movs	r3, #128	@ 0x80
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d11a      	bne.n	80080fe <HAL_LPTIM_IRQHandler+0x2a6>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	2380      	movs	r3, #128	@ 0x80
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	401a      	ands	r2, r3
 80080d4:	2380      	movs	r3, #128	@ 0x80
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	429a      	cmp	r2, r3
 80080da:	d110      	bne.n	80080fe <HAL_LPTIM_IRQHandler+0x2a6>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2280      	movs	r2, #128	@ 0x80
 80080e2:	0212      	lsls	r2, r2, #8
 80080e4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2238      	movs	r2, #56	@ 0x38
 80080ea:	2108      	movs	r1, #8
 80080ec:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	0018      	movs	r0, r3
 80080f2:	f000 f934 	bl	800835e <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2238      	movs	r2, #56	@ 0x38
 80080fa:	2100      	movs	r1, #0
 80080fc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2202      	movs	r2, #2
 8008106:	4013      	ands	r3, r2
 8008108:	2b02      	cmp	r3, #2
 800810a:	d10e      	bne.n	800812a <HAL_LPTIM_IRQHandler+0x2d2>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	2202      	movs	r2, #2
 8008114:	4013      	ands	r3, r2
 8008116:	2b02      	cmp	r3, #2
 8008118:	d107      	bne.n	800812a <HAL_LPTIM_IRQHandler+0x2d2>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2202      	movs	r2, #2
 8008120:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	0018      	movs	r0, r3
 8008126:	f000 f8d2 	bl	80082ce <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2204      	movs	r2, #4
 8008132:	4013      	ands	r3, r2
 8008134:	2b04      	cmp	r3, #4
 8008136:	d10e      	bne.n	8008156 <HAL_LPTIM_IRQHandler+0x2fe>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2204      	movs	r2, #4
 8008140:	4013      	ands	r3, r2
 8008142:	2b04      	cmp	r3, #4
 8008144:	d107      	bne.n	8008156 <HAL_LPTIM_IRQHandler+0x2fe>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2204      	movs	r2, #4
 800814c:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	0018      	movs	r0, r3
 8008152:	f000 f8c4 	bl	80082de <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2208      	movs	r2, #8
 800815e:	4013      	ands	r3, r2
 8008160:	2b08      	cmp	r3, #8
 8008162:	d112      	bne.n	800818a <HAL_LPTIM_IRQHandler+0x332>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2208      	movs	r2, #8
 800816c:	4013      	ands	r3, r2
 800816e:	2b08      	cmp	r3, #8
 8008170:	d10b      	bne.n	800818a <HAL_LPTIM_IRQHandler+0x332>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2208      	movs	r2, #8
 8008178:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2238      	movs	r2, #56	@ 0x38
 800817e:	2101      	movs	r1, #1
 8008180:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	0018      	movs	r0, r3
 8008186:	f000 f8b2 	bl	80082ee <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	2380      	movs	r3, #128	@ 0x80
 8008192:	031b      	lsls	r3, r3, #12
 8008194:	401a      	ands	r2, r3
 8008196:	2380      	movs	r3, #128	@ 0x80
 8008198:	031b      	lsls	r3, r3, #12
 800819a:	429a      	cmp	r2, r3
 800819c:	d116      	bne.n	80081cc <HAL_LPTIM_IRQHandler+0x374>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	2380      	movs	r3, #128	@ 0x80
 80081a6:	031b      	lsls	r3, r3, #12
 80081a8:	401a      	ands	r2, r3
 80081aa:	2380      	movs	r3, #128	@ 0x80
 80081ac:	031b      	lsls	r3, r3, #12
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d10c      	bne.n	80081cc <HAL_LPTIM_IRQHandler+0x374>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2280      	movs	r2, #128	@ 0x80
 80081b8:	0312      	lsls	r2, r2, #12
 80081ba:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2238      	movs	r2, #56	@ 0x38
 80081c0:	2102      	movs	r1, #2
 80081c2:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	0018      	movs	r0, r3
 80081c8:	f000 f891 	bl	80082ee <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2210      	movs	r2, #16
 80081d4:	4013      	ands	r3, r2
 80081d6:	2b10      	cmp	r3, #16
 80081d8:	d10e      	bne.n	80081f8 <HAL_LPTIM_IRQHandler+0x3a0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2210      	movs	r2, #16
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d107      	bne.n	80081f8 <HAL_LPTIM_IRQHandler+0x3a0>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2210      	movs	r2, #16
 80081ee:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	0018      	movs	r0, r3
 80081f4:	f000 f883 	bl	80082fe <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2220      	movs	r2, #32
 8008200:	4013      	ands	r3, r2
 8008202:	2b20      	cmp	r3, #32
 8008204:	d10e      	bne.n	8008224 <HAL_LPTIM_IRQHandler+0x3cc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2220      	movs	r2, #32
 800820e:	4013      	ands	r3, r2
 8008210:	2b20      	cmp	r3, #32
 8008212:	d107      	bne.n	8008224 <HAL_LPTIM_IRQHandler+0x3cc>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2220      	movs	r2, #32
 800821a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	0018      	movs	r0, r3
 8008220:	f000 f875 	bl	800830e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2240      	movs	r2, #64	@ 0x40
 800822c:	4013      	ands	r3, r2
 800822e:	2b40      	cmp	r3, #64	@ 0x40
 8008230:	d10e      	bne.n	8008250 <HAL_LPTIM_IRQHandler+0x3f8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2240      	movs	r2, #64	@ 0x40
 800823a:	4013      	ands	r3, r2
 800823c:	2b40      	cmp	r3, #64	@ 0x40
 800823e:	d107      	bne.n	8008250 <HAL_LPTIM_IRQHandler+0x3f8>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2240      	movs	r2, #64	@ 0x40
 8008246:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	0018      	movs	r0, r3
 800824c:	f000 f867 	bl	800831e <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2280      	movs	r2, #128	@ 0x80
 8008258:	4013      	ands	r3, r2
 800825a:	2b80      	cmp	r3, #128	@ 0x80
 800825c:	d10e      	bne.n	800827c <HAL_LPTIM_IRQHandler+0x424>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2280      	movs	r2, #128	@ 0x80
 8008266:	4013      	ands	r3, r2
 8008268:	2b80      	cmp	r3, #128	@ 0x80
 800826a:	d107      	bne.n	800827c <HAL_LPTIM_IRQHandler+0x424>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2280      	movs	r2, #128	@ 0x80
 8008272:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	0018      	movs	r0, r3
 8008278:	f000 f859 	bl	800832e <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	2380      	movs	r3, #128	@ 0x80
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	401a      	ands	r2, r3
 8008288:	2380      	movs	r3, #128	@ 0x80
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	429a      	cmp	r2, r3
 800828e:	d112      	bne.n	80082b6 <HAL_LPTIM_IRQHandler+0x45e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	2380      	movs	r3, #128	@ 0x80
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	401a      	ands	r2, r3
 800829c:	2380      	movs	r3, #128	@ 0x80
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d108      	bne.n	80082b6 <HAL_LPTIM_IRQHandler+0x45e>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2280      	movs	r2, #128	@ 0x80
 80082aa:	0052      	lsls	r2, r2, #1
 80082ac:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	0018      	movs	r0, r3
 80082b2:	f000 f844 	bl	800833e <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80082b6:	46c0      	nop			@ (mov r8, r8)
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b002      	add	sp, #8
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b002      	add	sp, #8
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80082d6:	46c0      	nop			@ (mov r8, r8)
 80082d8:	46bd      	mov	sp, r7
 80082da:	b002      	add	sp, #8
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80082e6:	46c0      	nop			@ (mov r8, r8)
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b002      	add	sp, #8
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80082f6:	46c0      	nop			@ (mov r8, r8)
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b002      	add	sp, #8
 80082fc:	bd80      	pop	{r7, pc}

080082fe <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008306:	46c0      	nop			@ (mov r8, r8)
 8008308:	46bd      	mov	sp, r7
 800830a:	b002      	add	sp, #8
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008316:	46c0      	nop			@ (mov r8, r8)
 8008318:	46bd      	mov	sp, r7
 800831a:	b002      	add	sp, #8
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	46bd      	mov	sp, r7
 800832a:	b002      	add	sp, #8
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8008336:	46c0      	nop			@ (mov r8, r8)
 8008338:	46bd      	mov	sp, r7
 800833a:	b002      	add	sp, #8
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8008346:	46c0      	nop			@ (mov r8, r8)
 8008348:	46bd      	mov	sp, r7
 800834a:	b002      	add	sp, #8
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008356:	46c0      	nop			@ (mov r8, r8)
 8008358:	46bd      	mov	sp, r7
 800835a:	b002      	add	sp, #8
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8008366:	46c0      	nop			@ (mov r8, r8)
 8008368:	46bd      	mov	sp, r7
 800836a:	b002      	add	sp, #8
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800837a:	230f      	movs	r3, #15
 800837c:	18fb      	adds	r3, r7, r3
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008382:	4b15      	ldr	r3, [pc, #84]	@ (80083d8 <LPTIM_WaitForFlag+0x68>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4915      	ldr	r1, [pc, #84]	@ (80083dc <LPTIM_WaitForFlag+0x6c>)
 8008388:	0018      	movs	r0, r3
 800838a:	f7f7 fed9 	bl	8000140 <__udivsi3>
 800838e:	0003      	movs	r3, r0
 8008390:	001a      	movs	r2, r3
 8008392:	0013      	movs	r3, r2
 8008394:	015b      	lsls	r3, r3, #5
 8008396:	1a9b      	subs	r3, r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	189b      	adds	r3, r3, r2
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80083ac:	230f      	movs	r3, #15
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	2203      	movs	r2, #3
 80083b2:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4013      	ands	r3, r2
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d002      	beq.n	80083ca <LPTIM_WaitForFlag+0x5a>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1ea      	bne.n	80083a0 <LPTIM_WaitForFlag+0x30>

  return result;
 80083ca:	230f      	movs	r3, #15
 80083cc:	18fb      	adds	r3, r7, r3
 80083ce:	781b      	ldrb	r3, [r3, #0]
}
 80083d0:	0018      	movs	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	b004      	add	sp, #16
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20000004 	.word	0x20000004
 80083dc:	00004e20 	.word	0x00004e20

080083e0 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	000a      	movs	r2, r1
 80083ea:	1cbb      	adds	r3, r7, #2
 80083ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80083ee:	230a      	movs	r3, #10
 80083f0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80083f2:	e002      	b.n	80083fa <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1f9      	bne.n	80083f4 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8008400:	1cbb      	adds	r3, r7, #2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	4a06      	ldr	r2, [pc, #24]	@ (8008420 <PCD_GET_EP_RX_CNT+0x40>)
 8008408:	4694      	mov	ip, r2
 800840a:	4463      	add	r3, ip
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	b29b      	uxth	r3, r3
 8008412:	059b      	lsls	r3, r3, #22
 8008414:	0d9b      	lsrs	r3, r3, #22
 8008416:	b29b      	uxth	r3, r3
}
 8008418:	0018      	movs	r0, r3
 800841a:	46bd      	mov	sp, r7
 800841c:	b004      	add	sp, #16
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40009800 	.word	0x40009800

08008424 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	000a      	movs	r2, r1
 800842e:	1cbb      	adds	r3, r7, #2
 8008430:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8008432:	230a      	movs	r3, #10
 8008434:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8008436:	e002      	b.n	800843e <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b01      	subs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1f9      	bne.n	8008438 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8008444:	1cbb      	adds	r3, r7, #2
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	4a06      	ldr	r2, [pc, #24]	@ (8008464 <PCD_GET_EP_DBUF0_CNT+0x40>)
 800844c:	4694      	mov	ip, r2
 800844e:	4463      	add	r3, ip
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	b29b      	uxth	r3, r3
 8008456:	059b      	lsls	r3, r3, #22
 8008458:	0d9b      	lsrs	r3, r3, #22
 800845a:	b29b      	uxth	r3, r3
}
 800845c:	0018      	movs	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	b004      	add	sp, #16
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40009800 	.word	0x40009800

08008468 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	000a      	movs	r2, r1
 8008472:	1cbb      	adds	r3, r7, #2
 8008474:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8008476:	230a      	movs	r3, #10
 8008478:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800847a:	e002      	b.n	8008482 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3b01      	subs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1f9      	bne.n	800847c <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8008488:	1cbb      	adds	r3, r7, #2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	4a06      	ldr	r2, [pc, #24]	@ (80084a8 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8008490:	4694      	mov	ip, r2
 8008492:	4463      	add	r3, ip
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	b29b      	uxth	r3, r3
 800849a:	059b      	lsls	r3, r3, #22
 800849c:	0d9b      	lsrs	r3, r3, #22
 800849e:	b29b      	uxth	r3, r3
}
 80084a0:	0018      	movs	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b004      	add	sp, #16
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40009800 	.word	0x40009800

080084ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e0e4      	b.n	8008688 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a73      	ldr	r2, [pc, #460]	@ (8008690 <HAL_PCD_Init+0x1e4>)
 80084c2:	5c9b      	ldrb	r3, [r3, r2]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d108      	bne.n	80084dc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	23a4      	movs	r3, #164	@ 0xa4
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	2100      	movs	r1, #0
 80084d2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	0018      	movs	r0, r3
 80084d8:	f7fd f882 	bl	80055e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a6c      	ldr	r2, [pc, #432]	@ (8008690 <HAL_PCD_Init+0x1e4>)
 80084e0:	2103      	movs	r1, #3
 80084e2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	0018      	movs	r0, r3
 80084ea:	f005 fca3 	bl	800de34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ee:	230f      	movs	r3, #15
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e047      	b.n	8008588 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80084f8:	200f      	movs	r0, #15
 80084fa:	183b      	adds	r3, r7, r0
 80084fc:	781a      	ldrb	r2, [r3, #0]
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	0013      	movs	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	189b      	adds	r3, r3, r2
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	18cb      	adds	r3, r1, r3
 800850a:	3311      	adds	r3, #17
 800850c:	2201      	movs	r2, #1
 800850e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008510:	183b      	adds	r3, r7, r0
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	0013      	movs	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	189b      	adds	r3, r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	18cb      	adds	r3, r1, r3
 8008520:	3310      	adds	r3, #16
 8008522:	183a      	adds	r2, r7, r0
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008528:	183b      	adds	r3, r7, r0
 800852a:	781a      	ldrb	r2, [r3, #0]
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	0013      	movs	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	189b      	adds	r3, r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	18cb      	adds	r3, r1, r3
 8008538:	3313      	adds	r3, #19
 800853a:	2200      	movs	r2, #0
 800853c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800853e:	183b      	adds	r3, r7, r0
 8008540:	781a      	ldrb	r2, [r3, #0]
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	0013      	movs	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	189b      	adds	r3, r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	18cb      	adds	r3, r1, r3
 800854e:	3320      	adds	r3, #32
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008554:	183b      	adds	r3, r7, r0
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	0013      	movs	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	189b      	adds	r3, r3, r2
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	18cb      	adds	r3, r1, r3
 8008564:	3324      	adds	r3, #36	@ 0x24
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800856a:	183b      	adds	r3, r7, r0
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	0013      	movs	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	189b      	adds	r3, r3, r2
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	2200      	movs	r2, #0
 800857c:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800857e:	183b      	adds	r3, r7, r0
 8008580:	781a      	ldrb	r2, [r3, #0]
 8008582:	183b      	adds	r3, r7, r0
 8008584:	3201      	adds	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	791b      	ldrb	r3, [r3, #4]
 800858c:	210f      	movs	r1, #15
 800858e:	187a      	adds	r2, r7, r1
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d3b0      	bcc.n	80084f8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008596:	187b      	adds	r3, r7, r1
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e056      	b.n	800864c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800859e:	240f      	movs	r4, #15
 80085a0:	193b      	adds	r3, r7, r4
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	2352      	movs	r3, #82	@ 0x52
 80085a8:	33ff      	adds	r3, #255	@ 0xff
 80085aa:	0019      	movs	r1, r3
 80085ac:	0013      	movs	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	189b      	adds	r3, r3, r2
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	18c3      	adds	r3, r0, r3
 80085b6:	185b      	adds	r3, r3, r1
 80085b8:	2200      	movs	r2, #0
 80085ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80085bc:	193b      	adds	r3, r7, r4
 80085be:	781a      	ldrb	r2, [r3, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	23a8      	movs	r3, #168	@ 0xa8
 80085c4:	0059      	lsls	r1, r3, #1
 80085c6:	0013      	movs	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	189b      	adds	r3, r3, r2
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	18c3      	adds	r3, r0, r3
 80085d0:	185b      	adds	r3, r3, r1
 80085d2:	193a      	adds	r2, r7, r4
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085d8:	193b      	adds	r3, r7, r4
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	2354      	movs	r3, #84	@ 0x54
 80085e0:	33ff      	adds	r3, #255	@ 0xff
 80085e2:	0019      	movs	r1, r3
 80085e4:	0013      	movs	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	189b      	adds	r3, r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	18c3      	adds	r3, r0, r3
 80085ee:	185b      	adds	r3, r3, r1
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80085f4:	193b      	adds	r3, r7, r4
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	23b0      	movs	r3, #176	@ 0xb0
 80085fc:	0059      	lsls	r1, r3, #1
 80085fe:	0013      	movs	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	189b      	adds	r3, r3, r2
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	18c3      	adds	r3, r0, r3
 8008608:	185b      	adds	r3, r3, r1
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800860e:	193b      	adds	r3, r7, r4
 8008610:	781a      	ldrb	r2, [r3, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	23b2      	movs	r3, #178	@ 0xb2
 8008616:	0059      	lsls	r1, r3, #1
 8008618:	0013      	movs	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	189b      	adds	r3, r3, r2
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	18c3      	adds	r3, r0, r3
 8008622:	185b      	adds	r3, r3, r1
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008628:	193b      	adds	r3, r7, r4
 800862a:	781a      	ldrb	r2, [r3, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	23b4      	movs	r3, #180	@ 0xb4
 8008630:	0059      	lsls	r1, r3, #1
 8008632:	0013      	movs	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	189b      	adds	r3, r3, r2
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	18c3      	adds	r3, r0, r3
 800863c:	185b      	adds	r3, r3, r1
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008642:	193b      	adds	r3, r7, r4
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	193b      	adds	r3, r7, r4
 8008648:	3201      	adds	r2, #1
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	791b      	ldrb	r3, [r3, #4]
 8008650:	220f      	movs	r2, #15
 8008652:	18ba      	adds	r2, r7, r2
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d3a1      	bcc.n	800859e <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6859      	ldr	r1, [r3, #4]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	f005 fc12 	bl	800de8c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a07      	ldr	r2, [pc, #28]	@ (8008690 <HAL_PCD_Init+0x1e4>)
 8008672:	2101      	movs	r1, #1
 8008674:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7a9b      	ldrb	r3, [r3, #10]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d103      	bne.n	8008686 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	0018      	movs	r0, r3
 8008682:	f001 f9a1 	bl	80099c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	0018      	movs	r0, r3
 800868a:	46bd      	mov	sp, r7
 800868c:	b005      	add	sp, #20
 800868e:	bd90      	pop	{r4, r7, pc}
 8008690:	00000291 	.word	0x00000291

08008694 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	0018      	movs	r0, r3
 80086a2:	f006 f9b0 	bl	800ea06 <USB_ReadInterrupts>
 80086a6:	0003      	movs	r3, r0
 80086a8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	2380      	movs	r3, #128	@ 0x80
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	4013      	ands	r3, r2
 80086b2:	d004      	beq.n	80086be <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	0018      	movs	r0, r3
 80086b8:	f000 f960 	bl	800897c <PCD_EP_ISR_Handler>

    return;
 80086bc:	e0e3      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	2380      	movs	r3, #128	@ 0x80
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	4013      	ands	r3, r2
 80086c6:	d011      	beq.n	80086ec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	496e      	ldr	r1, [pc, #440]	@ (800888c <HAL_PCD_IRQHandler+0x1f8>)
 80086d4:	400a      	ands	r2, r1
 80086d6:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	0018      	movs	r0, r3
 80086dc:	f000 f90c 	bl	80088f8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2100      	movs	r1, #0
 80086e4:	0018      	movs	r0, r3
 80086e6:	f000 f91f 	bl	8008928 <HAL_PCD_SetAddress>

    return;
 80086ea:	e0cc      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	2380      	movs	r3, #128	@ 0x80
 80086f0:	01db      	lsls	r3, r3, #7
 80086f2:	4013      	ands	r3, r2
 80086f4:	d008      	beq.n	8008708 <HAL_PCD_IRQHandler+0x74>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4963      	ldr	r1, [pc, #396]	@ (8008890 <HAL_PCD_IRQHandler+0x1fc>)
 8008702:	400a      	ands	r2, r1
 8008704:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8008706:	e0be      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	2380      	movs	r3, #128	@ 0x80
 800870c:	019b      	lsls	r3, r3, #6
 800870e:	4013      	ands	r3, r2
 8008710:	d008      	beq.n	8008724 <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	495d      	ldr	r1, [pc, #372]	@ (8008894 <HAL_PCD_IRQHandler+0x200>)
 800871e:	400a      	ands	r2, r1
 8008720:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8008722:	e0b0      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	2380      	movs	r3, #128	@ 0x80
 8008728:	015b      	lsls	r3, r3, #5
 800872a:	4013      	ands	r3, r2
 800872c:	d02c      	beq.n	8008788 <HAL_PCD_IRQHandler+0xf4>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2104      	movs	r1, #4
 800873a:	438a      	bics	r2, r1
 800873c:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2108      	movs	r1, #8
 800874a:	438a      	bics	r2, r1
 800874c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	23b2      	movs	r3, #178	@ 0xb2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	5cd3      	ldrb	r3, [r2, r3]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d109      	bne.n	800876e <HAL_PCD_IRQHandler+0xda>
    {
      hpcd->LPM_State = LPM_L0;
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	23b2      	movs	r3, #178	@ 0xb2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	2100      	movs	r1, #0
 8008762:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2100      	movs	r1, #0
 8008768:	0018      	movs	r0, r3
 800876a:	f001 f94f 	bl	8009a0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	0018      	movs	r0, r3
 8008772:	f000 f8d1 	bl	8008918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4945      	ldr	r1, [pc, #276]	@ (8008898 <HAL_PCD_IRQHandler+0x204>)
 8008782:	400a      	ands	r2, r1
 8008784:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8008786:	e07e      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	2380      	movs	r3, #128	@ 0x80
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	4013      	ands	r3, r2
 8008790:	d01c      	beq.n	80087cc <HAL_PCD_IRQHandler+0x138>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2108      	movs	r1, #8
 800879e:	430a      	orrs	r2, r1
 80087a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	493b      	ldr	r1, [pc, #236]	@ (800889c <HAL_PCD_IRQHandler+0x208>)
 80087ae:	400a      	ands	r2, r1
 80087b0:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2104      	movs	r1, #4
 80087be:	430a      	orrs	r2, r1
 80087c0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	0018      	movs	r0, r3
 80087c6:	f000 f89f 	bl	8008908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80087ca:	e05c      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2280      	movs	r2, #128	@ 0x80
 80087d0:	4013      	ands	r3, r2
 80087d2:	d038      	beq.n	8008846 <HAL_PCD_IRQHandler+0x1b2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4930      	ldr	r1, [pc, #192]	@ (80088a0 <HAL_PCD_IRQHandler+0x20c>)
 80087e0:	400a      	ands	r2, r1
 80087e2:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	23b2      	movs	r3, #178	@ 0xb2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	5cd3      	ldrb	r3, [r2, r3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d125      	bne.n	800883c <HAL_PCD_IRQHandler+0x1a8>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2104      	movs	r1, #4
 80087fc:	430a      	orrs	r2, r1
 80087fe:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2108      	movs	r1, #8
 800880c:	430a      	orrs	r2, r1
 800880e:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	23b2      	movs	r3, #178	@ 0xb2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	2101      	movs	r1, #1
 8008818:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008820:	089b      	lsrs	r3, r3, #2
 8008822:	223c      	movs	r2, #60	@ 0x3c
 8008824:	4013      	ands	r3, r2
 8008826:	0019      	movs	r1, r3
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	23b3      	movs	r3, #179	@ 0xb3
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2101      	movs	r1, #1
 8008834:	0018      	movs	r0, r3
 8008836:	f001 f8e9 	bl	8009a0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800883a:	e024      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
      HAL_PCD_SuspendCallback(hpcd);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	0018      	movs	r0, r3
 8008840:	f000 f862 	bl	8008908 <HAL_PCD_SuspendCallback>
    return;
 8008844:	e01f      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	2380      	movs	r3, #128	@ 0x80
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4013      	ands	r3, r2
 800884e:	d00c      	beq.n	800886a <HAL_PCD_IRQHandler+0x1d6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4912      	ldr	r1, [pc, #72]	@ (80088a4 <HAL_PCD_IRQHandler+0x210>)
 800885c:	400a      	ands	r2, r1
 800885e:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	0018      	movs	r0, r3
 8008864:	f000 f840 	bl	80088e8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008868:	e00d      	b.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	2380      	movs	r3, #128	@ 0x80
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	4013      	ands	r3, r2
 8008872:	d008      	beq.n	8008886 <HAL_PCD_IRQHandler+0x1f2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	490a      	ldr	r1, [pc, #40]	@ (80088a8 <HAL_PCD_IRQHandler+0x214>)
 8008880:	400a      	ands	r2, r1
 8008882:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8008884:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008886:	46bd      	mov	sp, r7
 8008888:	b004      	add	sp, #16
 800888a:	bd80      	pop	{r7, pc}
 800888c:	0000fbff 	.word	0x0000fbff
 8008890:	0000bfff 	.word	0x0000bfff
 8008894:	0000dfff 	.word	0x0000dfff
 8008898:	0000efff 	.word	0x0000efff
 800889c:	0000f7ff 	.word	0x0000f7ff
 80088a0:	0000ff7f 	.word	0x0000ff7f
 80088a4:	0000fdff 	.word	0x0000fdff
 80088a8:	0000feff 	.word	0x0000feff

080088ac <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	000a      	movs	r2, r1
 80088b6:	1cfb      	adds	r3, r7, #3
 80088b8:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80088ba:	46c0      	nop			@ (mov r8, r8)
 80088bc:	46bd      	mov	sp, r7
 80088be:	b002      	add	sp, #8
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	000a      	movs	r2, r1
 80088cc:	1cfb      	adds	r3, r7, #3
 80088ce:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80088d0:	46c0      	nop			@ (mov r8, r8)
 80088d2:	46bd      	mov	sp, r7
 80088d4:	b002      	add	sp, #8
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80088e0:	46c0      	nop			@ (mov r8, r8)
 80088e2:	46bd      	mov	sp, r7
 80088e4:	b002      	add	sp, #8
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80088f0:	46c0      	nop			@ (mov r8, r8)
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b002      	add	sp, #8
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8008900:	46c0      	nop			@ (mov r8, r8)
 8008902:	46bd      	mov	sp, r7
 8008904:	b002      	add	sp, #8
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8008910:	46c0      	nop			@ (mov r8, r8)
 8008912:	46bd      	mov	sp, r7
 8008914:	b002      	add	sp, #8
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8008920:	46c0      	nop			@ (mov r8, r8)
 8008922:	46bd      	mov	sp, r7
 8008924:	b002      	add	sp, #8
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	000a      	movs	r2, r1
 8008932:	1cfb      	adds	r3, r7, #3
 8008934:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	23a4      	movs	r3, #164	@ 0xa4
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	5cd3      	ldrb	r3, [r2, r3]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_PCD_SetAddress+0x1e>
 8008942:	2302      	movs	r3, #2
 8008944:	e016      	b.n	8008974 <HAL_PCD_SetAddress+0x4c>
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	23a4      	movs	r3, #164	@ 0xa4
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	2101      	movs	r1, #1
 800894e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	1cfa      	adds	r2, r7, #3
 8008954:	7812      	ldrb	r2, [r2, #0]
 8008956:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	1cfb      	adds	r3, r7, #3
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	0019      	movs	r1, r3
 8008962:	0010      	movs	r0, r2
 8008964:	f006 f83c 	bl	800e9e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	23a4      	movs	r3, #164	@ 0xa4
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	2100      	movs	r1, #0
 8008970:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	0018      	movs	r0, r3
 8008976:	46bd      	mov	sp, r7
 8008978:	b002      	add	sp, #8
 800897a:	bd80      	pop	{r7, pc}

0800897c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800897c:	b5b0      	push	{r4, r5, r7, lr}
 800897e:	b08e      	sub	sp, #56	@ 0x38
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008984:	e316      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800898c:	201a      	movs	r0, #26
 800898e:	183b      	adds	r3, r7, r0
 8008990:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8008992:	183b      	adds	r3, r7, r0
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b2da      	uxtb	r2, r3
 8008998:	2419      	movs	r4, #25
 800899a:	193b      	adds	r3, r7, r4
 800899c:	210f      	movs	r1, #15
 800899e:	400a      	ands	r2, r1
 80089a0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80089a2:	193b      	adds	r3, r7, r4
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d000      	beq.n	80089ac <PCD_EP_ISR_Handler+0x30>
 80089aa:	e0eb      	b.n	8008b84 <PCD_EP_ISR_Handler+0x208>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80089ac:	183b      	adds	r3, r7, r0
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	2210      	movs	r2, #16
 80089b2:	4013      	ands	r3, r2
 80089b4:	d140      	bne.n	8008a38 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4ae1      	ldr	r2, [pc, #900]	@ (8008d44 <PCD_EP_ISR_Handler+0x3c8>)
 80089be:	4013      	ands	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	2180      	movs	r1, #128	@ 0x80
 80089ca:	0209      	lsls	r1, r1, #8
 80089cc:	430a      	orrs	r2, r1
 80089ce:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3310      	adds	r3, #16
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80089d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	4ada      	ldr	r2, [pc, #872]	@ (8008d48 <PCD_EP_ISR_Handler+0x3cc>)
 80089de:	4694      	mov	ip, r2
 80089e0:	4463      	add	r3, ip
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	0c1b      	lsrs	r3, r3, #16
 80089e6:	059b      	lsls	r3, r3, #22
 80089e8:	0d9a      	lsrs	r2, r3, #22
 80089ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80089ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	18d2      	adds	r2, r2, r3
 80089f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2100      	movs	r1, #0
 8008a00:	0018      	movs	r0, r3
 8008a02:	f7ff ff5e 	bl	80088c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	7b1b      	ldrb	r3, [r3, #12]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d100      	bne.n	8008a12 <PCD_EP_ISR_Handler+0x96>
 8008a10:	e2d0      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
 8008a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d000      	beq.n	8008a1c <PCD_EP_ISR_Handler+0xa0>
 8008a1a:	e2cb      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7b1b      	ldrb	r3, [r3, #12]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2280      	movs	r2, #128	@ 0x80
 8008a24:	4252      	negs	r2, r2
 8008a26:	4313      	orrs	r3, r2
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	731a      	strb	r2, [r3, #12]
 8008a36:	e2bd      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3351      	adds	r3, #81	@ 0x51
 8008a3c:	33ff      	adds	r3, #255	@ 0xff
 8008a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	2132      	movs	r1, #50	@ 0x32
 8008a48:	187b      	adds	r3, r7, r1
 8008a4a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008a4c:	187b      	adds	r3, r7, r1
 8008a4e:	881a      	ldrh	r2, [r3, #0]
 8008a50:	2380      	movs	r3, #128	@ 0x80
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	4013      	ands	r3, r2
 8008a56:	d029      	beq.n	8008aac <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	0019      	movs	r1, r3
 8008a62:	0010      	movs	r0, r2
 8008a64:	f7ff fcbc 	bl	80083e0 <PCD_GET_EP_RX_CNT>
 8008a68:	0003      	movs	r3, r0
 8008a6a:	001a      	movs	r2, r3
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6818      	ldr	r0, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	22a6      	movs	r2, #166	@ 0xa6
 8008a78:	0092      	lsls	r2, r2, #2
 8008a7a:	1899      	adds	r1, r3, r2
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f006 f841 	bl	800eb0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4aae      	ldr	r2, [pc, #696]	@ (8008d4c <PCD_EP_ISR_Handler+0x3d0>)
 8008a92:	4013      	ands	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	2180      	movs	r1, #128	@ 0x80
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7ff ff17 	bl	80088d8 <HAL_PCD_SetupStageCallback>
 8008aaa:	e283      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8008aac:	2332      	movs	r3, #50	@ 0x32
 8008aae:	18fb      	adds	r3, r7, r3
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	5e9b      	ldrsh	r3, [r3, r2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	db00      	blt.n	8008aba <PCD_EP_ISR_Handler+0x13e>
 8008ab8:	e27c      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4aa2      	ldr	r2, [pc, #648]	@ (8008d4c <PCD_EP_ISR_Handler+0x3d0>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008acc:	2180      	movs	r1, #128	@ 0x80
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	0019      	movs	r1, r3
 8008adc:	0010      	movs	r0, r2
 8008ade:	f7ff fc7f 	bl	80083e0 <PCD_GET_EP_RX_CNT>
 8008ae2:	0003      	movs	r3, r0
 8008ae4:	001a      	movs	r2, r3
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d01a      	beq.n	8008b28 <PCD_EP_ISR_Handler+0x1ac>
 8008af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d016      	beq.n	8008b28 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b00:	6959      	ldr	r1, [r3, #20]
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f005 fffe 	bl	800eb0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b12:	695a      	ldr	r2, [r3, #20]
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	18d2      	adds	r2, r2, r3
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2100      	movs	r1, #0
 8008b22:	0018      	movs	r0, r3
 8008b24:	f7ff fec2 	bl	80088ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	2132      	movs	r1, #50	@ 0x32
 8008b30:	187b      	adds	r3, r7, r1
 8008b32:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008b34:	187b      	adds	r3, r7, r1
 8008b36:	881a      	ldrh	r2, [r3, #0]
 8008b38:	2380      	movs	r3, #128	@ 0x80
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	d000      	beq.n	8008b42 <PCD_EP_ISR_Handler+0x1c6>
 8008b40:	e238      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	881a      	ldrh	r2, [r3, #0]
 8008b46:	23c0      	movs	r3, #192	@ 0xc0
 8008b48:	019b      	lsls	r3, r3, #6
 8008b4a:	401a      	ands	r2, r3
 8008b4c:	23c0      	movs	r3, #192	@ 0xc0
 8008b4e:	019b      	lsls	r3, r3, #6
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d100      	bne.n	8008b56 <PCD_EP_ISR_Handler+0x1da>
 8008b54:	e22e      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a7c      	ldr	r2, [pc, #496]	@ (8008d50 <PCD_EP_ISR_Handler+0x3d4>)
 8008b5e:	4013      	ands	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2280      	movs	r2, #128	@ 0x80
 8008b66:	0152      	lsls	r2, r2, #5
 8008b68:	4053      	eors	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2280      	movs	r2, #128	@ 0x80
 8008b70:	0192      	lsls	r2, r2, #6
 8008b72:	4053      	eors	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4975      	ldr	r1, [pc, #468]	@ (8008d54 <PCD_EP_ISR_Handler+0x3d8>)
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	e217      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	001a      	movs	r2, r3
 8008b8a:	2119      	movs	r1, #25
 8008b8c:	187b      	adds	r3, r7, r1
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	18d3      	adds	r3, r2, r3
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	2032      	movs	r0, #50	@ 0x32
 8008b98:	183b      	adds	r3, r7, r0
 8008b9a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8008b9c:	183b      	adds	r3, r7, r0
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	db00      	blt.n	8008ba8 <PCD_EP_ISR_Handler+0x22c>
 8008ba6:	e0e2      	b.n	8008d6e <PCD_EP_ISR_Handler+0x3f2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	001a      	movs	r2, r3
 8008bae:	187b      	adds	r3, r7, r1
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	18d3      	adds	r3, r2, r3
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a64      	ldr	r2, [pc, #400]	@ (8008d4c <PCD_EP_ISR_Handler+0x3d0>)
 8008bba:	4013      	ands	r3, r2
 8008bbc:	623b      	str	r3, [r7, #32]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	001a      	movs	r2, r3
 8008bc4:	0008      	movs	r0, r1
 8008bc6:	187b      	adds	r3, r7, r1
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	18d3      	adds	r3, r2, r3
 8008bce:	6a3a      	ldr	r2, [r7, #32]
 8008bd0:	2180      	movs	r1, #128	@ 0x80
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008bd6:	183b      	adds	r3, r7, r0
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	0013      	movs	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	189b      	adds	r3, r3, r2
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	3351      	adds	r3, #81	@ 0x51
 8008be4:	33ff      	adds	r3, #255	@ 0xff
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	18d3      	adds	r3, r2, r3
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bee:	7b1b      	ldrb	r3, [r3, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d11c      	bne.n	8008c2e <PCD_EP_ISR_Handler+0x2b2>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2528      	movs	r5, #40	@ 0x28
 8008bfe:	197c      	adds	r4, r7, r5
 8008c00:	0019      	movs	r1, r3
 8008c02:	0010      	movs	r0, r2
 8008c04:	f7ff fbec 	bl	80083e0 <PCD_GET_EP_RX_CNT>
 8008c08:	0003      	movs	r3, r0
 8008c0a:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8008c0c:	002c      	movs	r4, r5
 8008c0e:	193b      	adds	r3, r7, r4
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d100      	bne.n	8008c18 <PCD_EP_ISR_Handler+0x29c>
 8008c16:	e074      	b.n	8008d02 <PCD_EP_ISR_Handler+0x386>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1e:	6959      	ldr	r1, [r3, #20]
 8008c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c22:	88da      	ldrh	r2, [r3, #6]
 8008c24:	193b      	adds	r3, r7, r4
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	f005 ff70 	bl	800eb0c <USB_ReadPMA>
 8008c2c:	e069      	b.n	8008d02 <PCD_EP_ISR_Handler+0x386>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c30:	78db      	ldrb	r3, [r3, #3]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d10c      	bne.n	8008c50 <PCD_EP_ISR_Handler+0x2d4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008c36:	2328      	movs	r3, #40	@ 0x28
 8008c38:	18fc      	adds	r4, r7, r3
 8008c3a:	2332      	movs	r3, #50	@ 0x32
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	881a      	ldrh	r2, [r3, #0]
 8008c40:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	0018      	movs	r0, r3
 8008c46:	f000 f9c7 	bl	8008fd8 <HAL_PCD_EP_DB_Receive>
 8008c4a:	0003      	movs	r3, r0
 8008c4c:	8023      	strh	r3, [r4, #0]
 8008c4e:	e058      	b.n	8008d02 <PCD_EP_ISR_Handler+0x386>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	001a      	movs	r2, r3
 8008c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	18d3      	adds	r3, r2, r3
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a3d      	ldr	r2, [pc, #244]	@ (8008d58 <PCD_EP_ISR_Handler+0x3dc>)
 8008c62:	4013      	ands	r3, r2
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	001a      	movs	r2, r3
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	18d3      	adds	r3, r2, r3
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	4939      	ldr	r1, [pc, #228]	@ (8008d5c <PCD_EP_ISR_Handler+0x3e0>)
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	001a      	movs	r2, r3
 8008c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	18d3      	adds	r3, r2, r3
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	2380      	movs	r3, #128	@ 0x80
 8008c8e:	01db      	lsls	r3, r3, #7
 8008c90:	4013      	ands	r3, r2
 8008c92:	d01b      	beq.n	8008ccc <PCD_EP_ISR_Handler+0x350>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2528      	movs	r5, #40	@ 0x28
 8008c9e:	197c      	adds	r4, r7, r5
 8008ca0:	0019      	movs	r1, r3
 8008ca2:	0010      	movs	r0, r2
 8008ca4:	f7ff fbbe 	bl	8008424 <PCD_GET_EP_DBUF0_CNT>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8008cac:	002c      	movs	r4, r5
 8008cae:	193b      	adds	r3, r7, r4
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d025      	beq.n	8008d02 <PCD_EP_ISR_Handler+0x386>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbc:	6959      	ldr	r1, [r3, #20]
 8008cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc0:	891a      	ldrh	r2, [r3, #8]
 8008cc2:	193b      	adds	r3, r7, r4
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	f005 ff21 	bl	800eb0c <USB_ReadPMA>
 8008cca:	e01a      	b.n	8008d02 <PCD_EP_ISR_Handler+0x386>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2528      	movs	r5, #40	@ 0x28
 8008cd6:	197c      	adds	r4, r7, r5
 8008cd8:	0019      	movs	r1, r3
 8008cda:	0010      	movs	r0, r2
 8008cdc:	f7ff fbc4 	bl	8008468 <PCD_GET_EP_DBUF1_CNT>
 8008ce0:	0003      	movs	r3, r0
 8008ce2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8008ce4:	002c      	movs	r4, r5
 8008ce6:	193b      	adds	r3, r7, r4
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d009      	beq.n	8008d02 <PCD_EP_ISR_Handler+0x386>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf4:	6959      	ldr	r1, [r3, #20]
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	895a      	ldrh	r2, [r3, #10]
 8008cfa:	193b      	adds	r3, r7, r4
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	f005 ff05 	bl	800eb0c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d04:	69da      	ldr	r2, [r3, #28]
 8008d06:	2128      	movs	r1, #40	@ 0x28
 8008d08:	187b      	adds	r3, r7, r1
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	18d2      	adds	r2, r2, r3
 8008d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	187b      	adds	r3, r7, r1
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	18d2      	adds	r2, r2, r3
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <PCD_EP_ISR_Handler+0x3b8>
 8008d28:	187b      	adds	r3, r7, r1
 8008d2a:	881a      	ldrh	r2, [r3, #0]
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d215      	bcs.n	8008d60 <PCD_EP_ISR_Handler+0x3e4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	0011      	movs	r1, r2
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f7ff fdb5 	bl	80088ac <HAL_PCD_DataOutStageCallback>
 8008d42:	e014      	b.n	8008d6e <PCD_EP_ISR_Handler+0x3f2>
 8008d44:	07ff8f0f 	.word	0x07ff8f0f
 8008d48:	40009800 	.word	0x40009800
 8008d4c:	07ff0f8f 	.word	0x07ff0f8f
 8008d50:	07ffbf8f 	.word	0x07ffbf8f
 8008d54:	00008080 	.word	0x00008080
 8008d58:	07ff8f8f 	.word	0x07ff8f8f
 8008d5c:	000080c0 	.word	0x000080c0
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d66:	0011      	movs	r1, r2
 8008d68:	0018      	movs	r0, r3
 8008d6a:	f005 f8b3 	bl	800ded4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8008d6e:	2032      	movs	r0, #50	@ 0x32
 8008d70:	183b      	adds	r3, r7, r0
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	2280      	movs	r2, #128	@ 0x80
 8008d76:	4013      	ands	r3, r2
 8008d78:	d100      	bne.n	8008d7c <PCD_EP_ISR_Handler+0x400>
 8008d7a:	e11b      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
      {
        ep = &hpcd->IN_ep[epindex];
 8008d7c:	2119      	movs	r1, #25
 8008d7e:	187b      	adds	r3, r7, r1
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	0013      	movs	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	189b      	adds	r3, r3, r2
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	3310      	adds	r3, #16
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	18d3      	adds	r3, r2, r3
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	001a      	movs	r2, r3
 8008d98:	187b      	adds	r3, r7, r1
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	18d3      	adds	r3, r2, r3
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a8b      	ldr	r2, [pc, #556]	@ (8008fd0 <PCD_EP_ISR_Handler+0x654>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	001a      	movs	r2, r3
 8008dae:	187b      	adds	r3, r7, r1
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	18d3      	adds	r3, r2, r3
 8008db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008db8:	2180      	movs	r1, #128	@ 0x80
 8008dba:	0209      	lsls	r1, r1, #8
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc2:	78db      	ldrb	r3, [r3, #3]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d000      	beq.n	8008dca <PCD_EP_ISR_Handler+0x44e>
 8008dc8:	e0a3      	b.n	8008f12 <PCD_EP_ISR_Handler+0x596>
        {
          ep->xfer_len = 0U;
 8008dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dcc:	2200      	movs	r2, #0
 8008dce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	7b1b      	ldrb	r3, [r3, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d100      	bne.n	8008dda <PCD_EP_ISR_Handler+0x45e>
 8008dd8:	e093      	b.n	8008f02 <PCD_EP_ISR_Handler+0x586>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008dda:	183b      	adds	r3, r7, r0
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	2240      	movs	r2, #64	@ 0x40
 8008de0:	4013      	ands	r3, r2
 8008de2:	d047      	beq.n	8008e74 <PCD_EP_ISR_Handler+0x4f8>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d121      	bne.n	8008e30 <PCD_EP_ISR_Handler+0x4b4>
 8008dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	4a78      	ldr	r2, [pc, #480]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008df4:	4694      	mov	ip, r2
 8008df6:	4463      	add	r3, ip
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4974      	ldr	r1, [pc, #464]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e02:	468c      	mov	ip, r1
 8008e04:	4463      	add	r3, ip
 8008e06:	0192      	lsls	r2, r2, #6
 8008e08:	0992      	lsrs	r2, r2, #6
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	4a70      	ldr	r2, [pc, #448]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e14:	4694      	mov	ip, r2
 8008e16:	4463      	add	r3, ip
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	496c      	ldr	r1, [pc, #432]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e22:	468c      	mov	ip, r1
 8008e24:	4463      	add	r3, ip
 8008e26:	2180      	movs	r1, #128	@ 0x80
 8008e28:	0609      	lsls	r1, r1, #24
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	e068      	b.n	8008f02 <PCD_EP_ISR_Handler+0x586>
 8008e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d164      	bne.n	8008f02 <PCD_EP_ISR_Handler+0x586>
 8008e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	4a65      	ldr	r2, [pc, #404]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e40:	4694      	mov	ip, r2
 8008e42:	4463      	add	r3, ip
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4961      	ldr	r1, [pc, #388]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e4e:	468c      	mov	ip, r1
 8008e50:	4463      	add	r3, ip
 8008e52:	0412      	lsls	r2, r2, #16
 8008e54:	0c12      	lsrs	r2, r2, #16
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	00db      	lsls	r3, r3, #3
 8008e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e60:	189a      	adds	r2, r3, r2
 8008e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	495a      	ldr	r1, [pc, #360]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e6a:	468c      	mov	ip, r1
 8008e6c:	4463      	add	r3, ip
 8008e6e:	6812      	ldr	r2, [r2, #0]
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e046      	b.n	8008f02 <PCD_EP_ISR_Handler+0x586>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d121      	bne.n	8008ec0 <PCD_EP_ISR_Handler+0x544>
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4a54      	ldr	r2, [pc, #336]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e84:	4694      	mov	ip, r2
 8008e86:	4463      	add	r3, ip
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4950      	ldr	r1, [pc, #320]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008e92:	468c      	mov	ip, r1
 8008e94:	4463      	add	r3, ip
 8008e96:	0192      	lsls	r2, r2, #6
 8008e98:	0992      	lsrs	r2, r2, #6
 8008e9a:	605a      	str	r2, [r3, #4]
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008ea4:	4694      	mov	ip, r2
 8008ea6:	4463      	add	r3, ip
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4948      	ldr	r1, [pc, #288]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008eb2:	468c      	mov	ip, r1
 8008eb4:	4463      	add	r3, ip
 8008eb6:	2180      	movs	r1, #128	@ 0x80
 8008eb8:	0609      	lsls	r1, r1, #24
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	e020      	b.n	8008f02 <PCD_EP_ISR_Handler+0x586>
 8008ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d11c      	bne.n	8008f02 <PCD_EP_ISR_Handler+0x586>
 8008ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	4a41      	ldr	r2, [pc, #260]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008ed0:	4694      	mov	ip, r2
 8008ed2:	4463      	add	r3, ip
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	493d      	ldr	r1, [pc, #244]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008ede:	468c      	mov	ip, r1
 8008ee0:	4463      	add	r3, ip
 8008ee2:	0412      	lsls	r2, r2, #16
 8008ee4:	0c12      	lsrs	r2, r2, #16
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	4a39      	ldr	r2, [pc, #228]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008ef0:	189a      	adds	r2, r3, r2
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	4936      	ldr	r1, [pc, #216]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008efa:	468c      	mov	ip, r1
 8008efc:	4463      	add	r3, ip
 8008efe:	6852      	ldr	r2, [r2, #4]
 8008f00:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	0011      	movs	r1, r2
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f7ff fcd9 	bl	80088c2 <HAL_PCD_DataInStageCallback>
 8008f10:	e050      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008f12:	2332      	movs	r3, #50	@ 0x32
 8008f14:	18fb      	adds	r3, r7, r3
 8008f16:	881a      	ldrh	r2, [r3, #0]
 8008f18:	2380      	movs	r3, #128	@ 0x80
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	d141      	bne.n	8008fa4 <PCD_EP_ISR_Handler+0x628>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	4a2b      	ldr	r2, [pc, #172]	@ (8008fd4 <PCD_EP_ISR_Handler+0x658>)
 8008f28:	4694      	mov	ip, r2
 8008f2a:	4463      	add	r3, ip
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	0c1b      	lsrs	r3, r3, #16
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	212a      	movs	r1, #42	@ 0x2a
 8008f34:	187b      	adds	r3, r7, r1
 8008f36:	0592      	lsls	r2, r2, #22
 8008f38:	0d92      	lsrs	r2, r2, #22
 8008f3a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8008f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f3e:	699a      	ldr	r2, [r3, #24]
 8008f40:	187b      	adds	r3, r7, r1
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d907      	bls.n	8008f58 <PCD_EP_ISR_Handler+0x5dc>
            {
              ep->xfer_len -= TxPctSize;
 8008f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	187b      	adds	r3, r7, r1
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	1ad2      	subs	r2, r2, r3
 8008f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f54:	619a      	str	r2, [r3, #24]
 8008f56:	e002      	b.n	8008f5e <PCD_EP_ISR_Handler+0x5e2>
            }
            else
            {
              ep->xfer_len = 0U;
 8008f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d107      	bne.n	8008f76 <PCD_EP_ISR_Handler+0x5fa>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f68:	781a      	ldrb	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	0011      	movs	r1, r2
 8008f6e:	0018      	movs	r0, r3
 8008f70:	f7ff fca7 	bl	80088c2 <HAL_PCD_DataInStageCallback>
 8008f74:	e01e      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	212a      	movs	r1, #42	@ 0x2a
 8008f7c:	187b      	adds	r3, r7, r1
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	18d2      	adds	r2, r2, r3
 8008f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f84:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f88:	69da      	ldr	r2, [r3, #28]
 8008f8a:	187b      	adds	r3, r7, r1
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	18d2      	adds	r2, r2, r3
 8008f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f92:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f9a:	0011      	movs	r1, r2
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f004 ff99 	bl	800ded4 <USB_EPStartXfer>
 8008fa2:	e007      	b.n	8008fb4 <PCD_EP_ISR_Handler+0x638>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008fa4:	2332      	movs	r3, #50	@ 0x32
 8008fa6:	18fb      	adds	r3, r7, r3
 8008fa8:	881a      	ldrh	r2, [r3, #0]
 8008faa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f000 f8fc 	bl	80091ac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fba:	2380      	movs	r3, #128	@ 0x80
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	d000      	beq.n	8008fc4 <PCD_EP_ISR_Handler+0x648>
 8008fc2:	e4e0      	b.n	8008986 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	b00e      	add	sp, #56	@ 0x38
 8008fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8008fce:	46c0      	nop			@ (mov r8, r8)
 8008fd0:	07ff8f0f 	.word	0x07ff8f0f
 8008fd4:	40009800 	.word	0x40009800

08008fd8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008fd8:	b5b0      	push	{r4, r5, r7, lr}
 8008fda:	b08a      	sub	sp, #40	@ 0x28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	1dbb      	adds	r3, r7, #6
 8008fe4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008fe6:	1dbb      	adds	r3, r7, #6
 8008fe8:	881a      	ldrh	r2, [r3, #0]
 8008fea:	2380      	movs	r3, #128	@ 0x80
 8008fec:	01db      	lsls	r3, r3, #7
 8008fee:	4013      	ands	r3, r2
 8008ff0:	d067      	beq.n	80090c2 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	251e      	movs	r5, #30
 8008ffc:	197c      	adds	r4, r7, r5
 8008ffe:	0019      	movs	r1, r3
 8009000:	0010      	movs	r0, r2
 8009002:	f7ff fa0f 	bl	8008424 <PCD_GET_EP_DBUF0_CNT>
 8009006:	0003      	movs	r3, r0
 8009008:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	197b      	adds	r3, r7, r5
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d307      	bcc.n	8009026 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	197b      	adds	r3, r7, r5
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	619a      	str	r2, [r3, #24]
 8009024:	e002      	b.n	800902c <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2200      	movs	r2, #0
 800902a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d11a      	bne.n	800906a <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	001a      	movs	r2, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	18d3      	adds	r3, r2, r3
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a55      	ldr	r2, [pc, #340]	@ (800919c <HAL_PCD_EP_DB_Receive+0x1c4>)
 8009046:	4013      	ands	r3, r2
 8009048:	61bb      	str	r3, [r7, #24]
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2280      	movs	r2, #128	@ 0x80
 800904e:	0192      	lsls	r2, r2, #6
 8009050:	4053      	eors	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	001a      	movs	r2, r3
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	18d3      	adds	r3, r2, r3
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	494e      	ldr	r1, [pc, #312]	@ (80091a0 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8009066:	430a      	orrs	r2, r1
 8009068:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800906a:	1dbb      	adds	r3, r7, #6
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	2240      	movs	r2, #64	@ 0x40
 8009070:	4013      	ands	r3, r2
 8009072:	d015      	beq.n	80090a0 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	001a      	movs	r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	18d3      	adds	r3, r2, r3
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a47      	ldr	r2, [pc, #284]	@ (80091a4 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8009086:	4013      	ands	r3, r2
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	001a      	movs	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	18d3      	adds	r3, r2, r3
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4943      	ldr	r1, [pc, #268]	@ (80091a8 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800909c:	430a      	orrs	r2, r1
 800909e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80090a0:	241e      	movs	r4, #30
 80090a2:	193b      	adds	r3, r7, r4
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d100      	bne.n	80090ac <HAL_PCD_EP_DB_Receive+0xd4>
 80090aa:	e070      	b.n	800918e <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6959      	ldr	r1, [r3, #20]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	891a      	ldrh	r2, [r3, #8]
 80090b8:	193b      	adds	r3, r7, r4
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	f005 fd26 	bl	800eb0c <USB_ReadPMA>
 80090c0:	e065      	b.n	800918e <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	251e      	movs	r5, #30
 80090cc:	197c      	adds	r4, r7, r5
 80090ce:	0019      	movs	r1, r3
 80090d0:	0010      	movs	r0, r2
 80090d2:	f7ff f9c9 	bl	8008468 <PCD_GET_EP_DBUF1_CNT>
 80090d6:	0003      	movs	r3, r0
 80090d8:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	699a      	ldr	r2, [r3, #24]
 80090de:	197b      	adds	r3, r7, r5
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d307      	bcc.n	80090f6 <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	197b      	adds	r3, r7, r5
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	619a      	str	r2, [r3, #24]
 80090f4:	e002      	b.n	80090fc <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2200      	movs	r2, #0
 80090fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d11a      	bne.n	800913a <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	001a      	movs	r2, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	18d3      	adds	r3, r2, r3
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a21      	ldr	r2, [pc, #132]	@ (800919c <HAL_PCD_EP_DB_Receive+0x1c4>)
 8009116:	4013      	ands	r3, r2
 8009118:	627b      	str	r3, [r7, #36]	@ 0x24
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	2280      	movs	r2, #128	@ 0x80
 800911e:	0192      	lsls	r2, r2, #6
 8009120:	4053      	eors	r3, r2
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	001a      	movs	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	18d3      	adds	r3, r2, r3
 8009132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009134:	491a      	ldr	r1, [pc, #104]	@ (80091a0 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8009136:	430a      	orrs	r2, r1
 8009138:	601a      	str	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800913a:	1dbb      	adds	r3, r7, #6
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	2240      	movs	r2, #64	@ 0x40
 8009140:	4013      	ands	r3, r2
 8009142:	d115      	bne.n	8009170 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	001a      	movs	r2, r3
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	18d3      	adds	r3, r2, r3
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a13      	ldr	r2, [pc, #76]	@ (80091a4 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8009156:	4013      	ands	r3, r2
 8009158:	623b      	str	r3, [r7, #32]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	001a      	movs	r2, r3
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	18d3      	adds	r3, r2, r3
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	490f      	ldr	r1, [pc, #60]	@ (80091a8 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800916c:	430a      	orrs	r2, r1
 800916e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8009170:	241e      	movs	r4, #30
 8009172:	193b      	adds	r3, r7, r4
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6959      	ldr	r1, [r3, #20]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	895a      	ldrh	r2, [r3, #10]
 8009186:	193b      	adds	r3, r7, r4
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	f005 fcbf 	bl	800eb0c <USB_ReadPMA>
    }
  }

  return count;
 800918e:	231e      	movs	r3, #30
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	881b      	ldrh	r3, [r3, #0]
}
 8009194:	0018      	movs	r0, r3
 8009196:	46bd      	mov	sp, r7
 8009198:	b00a      	add	sp, #40	@ 0x28
 800919a:	bdb0      	pop	{r4, r5, r7, pc}
 800919c:	07ffbf8f 	.word	0x07ffbf8f
 80091a0:	00008080 	.word	0x00008080
 80091a4:	07ff8f8f 	.word	0x07ff8f8f
 80091a8:	000080c0 	.word	0x000080c0

080091ac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80091ac:	b5b0      	push	{r4, r5, r7, lr}
 80091ae:	b090      	sub	sp, #64	@ 0x40
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	1dbb      	adds	r3, r7, #6
 80091b8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80091ba:	1dbb      	adds	r3, r7, #6
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	2240      	movs	r2, #64	@ 0x40
 80091c0:	4013      	ands	r3, r2
 80091c2:	d100      	bne.n	80091c6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80091c4:	e1ec      	b.n	80095a0 <HAL_PCD_EP_DB_Transmit+0x3f4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	251e      	movs	r5, #30
 80091d0:	197c      	adds	r4, r7, r5
 80091d2:	0019      	movs	r1, r3
 80091d4:	0010      	movs	r0, r2
 80091d6:	f7ff f925 	bl	8008424 <PCD_GET_EP_DBUF0_CNT>
 80091da:	0003      	movs	r3, r0
 80091dc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	699a      	ldr	r2, [r3, #24]
 80091e2:	197b      	adds	r3, r7, r5
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d907      	bls.n	80091fa <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	197b      	adds	r3, r7, r5
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	1ad2      	subs	r2, r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	619a      	str	r2, [r3, #24]
 80091f8:	e002      	b.n	8009200 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2200      	movs	r2, #0
 80091fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d000      	beq.n	800920a <HAL_PCD_EP_DB_Transmit+0x5e>
 8009208:	e0d0      	b.n	80093ac <HAL_PCD_EP_DB_Transmit+0x200>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	785b      	ldrb	r3, [r3, #1]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d121      	bne.n	8009256 <HAL_PCD_EP_DB_Transmit+0xaa>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4adc      	ldr	r2, [pc, #880]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800921a:	4694      	mov	ip, r2
 800921c:	4463      	add	r3, ip
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	49d9      	ldr	r1, [pc, #868]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009228:	468c      	mov	ip, r1
 800922a:	4463      	add	r3, ip
 800922c:	0192      	lsls	r2, r2, #6
 800922e:	0992      	lsrs	r2, r2, #6
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	4ad4      	ldr	r2, [pc, #848]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800923a:	4694      	mov	ip, r2
 800923c:	4463      	add	r3, ip
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	49d1      	ldr	r1, [pc, #836]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009248:	468c      	mov	ip, r1
 800924a:	4463      	add	r3, ip
 800924c:	2180      	movs	r1, #128	@ 0x80
 800924e:	0609      	lsls	r1, r1, #24
 8009250:	430a      	orrs	r2, r1
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e020      	b.n	8009298 <HAL_PCD_EP_DB_Transmit+0xec>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d11c      	bne.n	8009298 <HAL_PCD_EP_DB_Transmit+0xec>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	4ac9      	ldr	r2, [pc, #804]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009266:	4694      	mov	ip, r2
 8009268:	4463      	add	r3, ip
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	49c6      	ldr	r1, [pc, #792]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009274:	468c      	mov	ip, r1
 8009276:	4463      	add	r3, ip
 8009278:	0412      	lsls	r2, r2, #16
 800927a:	0c12      	lsrs	r2, r2, #16
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	4ac1      	ldr	r2, [pc, #772]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009286:	189a      	adds	r2, r3, r2
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	49bf      	ldr	r1, [pc, #764]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009290:	468c      	mov	ip, r1
 8009292:	4463      	add	r3, ip
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d121      	bne.n	80092e4 <HAL_PCD_EP_DB_Transmit+0x138>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	4ab9      	ldr	r2, [pc, #740]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80092a8:	4694      	mov	ip, r2
 80092aa:	4463      	add	r3, ip
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	49b5      	ldr	r1, [pc, #724]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80092b6:	468c      	mov	ip, r1
 80092b8:	4463      	add	r3, ip
 80092ba:	0192      	lsls	r2, r2, #6
 80092bc:	0992      	lsrs	r2, r2, #6
 80092be:	605a      	str	r2, [r3, #4]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	4ab1      	ldr	r2, [pc, #708]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80092c8:	4694      	mov	ip, r2
 80092ca:	4463      	add	r3, ip
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	49ad      	ldr	r1, [pc, #692]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80092d6:	468c      	mov	ip, r1
 80092d8:	4463      	add	r3, ip
 80092da:	2180      	movs	r1, #128	@ 0x80
 80092dc:	0609      	lsls	r1, r1, #24
 80092de:	430a      	orrs	r2, r1
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	e020      	b.n	8009326 <HAL_PCD_EP_DB_Transmit+0x17a>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d11c      	bne.n	8009326 <HAL_PCD_EP_DB_Transmit+0x17a>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	4aa6      	ldr	r2, [pc, #664]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80092f4:	4694      	mov	ip, r2
 80092f6:	4463      	add	r3, ip
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	49a2      	ldr	r1, [pc, #648]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009302:	468c      	mov	ip, r1
 8009304:	4463      	add	r3, ip
 8009306:	0412      	lsls	r2, r2, #16
 8009308:	0c12      	lsrs	r2, r2, #16
 800930a:	605a      	str	r2, [r3, #4]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	4a9e      	ldr	r2, [pc, #632]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009314:	189a      	adds	r2, r3, r2
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	499b      	ldr	r1, [pc, #620]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800931e:	468c      	mov	ip, r1
 8009320:	4463      	add	r3, ip
 8009322:	6852      	ldr	r2, [r2, #4]
 8009324:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	78db      	ldrb	r3, [r3, #3]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d119      	bne.n	8009362 <HAL_PCD_EP_DB_Transmit+0x1b6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	001a      	movs	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	18d3      	adds	r3, r2, r3
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a94      	ldr	r2, [pc, #592]	@ (8009590 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 8009340:	4013      	ands	r3, r2
 8009342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009346:	2220      	movs	r2, #32
 8009348:	4053      	eors	r3, r2
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	001a      	movs	r2, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	18d3      	adds	r3, r2, r3
 800935a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800935c:	498d      	ldr	r1, [pc, #564]	@ (8009594 <HAL_PCD_EP_DB_Transmit+0x3e8>)
 800935e:	430a      	orrs	r2, r1
 8009360:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	0011      	movs	r1, r2
 800936a:	0018      	movs	r0, r3
 800936c:	f7ff faa9 	bl	80088c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009370:	1dbb      	adds	r3, r7, #6
 8009372:	881a      	ldrh	r2, [r3, #0]
 8009374:	2380      	movs	r3, #128	@ 0x80
 8009376:	01db      	lsls	r3, r3, #7
 8009378:	4013      	ands	r3, r2
 800937a:	d015      	beq.n	80093a8 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	001a      	movs	r2, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	18d3      	adds	r3, r2, r3
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a82      	ldr	r2, [pc, #520]	@ (8009598 <HAL_PCD_EP_DB_Transmit+0x3ec>)
 800938e:	4013      	ands	r3, r2
 8009390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	001a      	movs	r2, r3
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	18d3      	adds	r3, r2, r3
 80093a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093a2:	497e      	ldr	r1, [pc, #504]	@ (800959c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80093a4:	430a      	orrs	r2, r1
 80093a6:	601a      	str	r2, [r3, #0]
      }

      return HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e303      	b.n	80099b4 <HAL_PCD_EP_DB_Transmit+0x808>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80093ac:	1dbb      	adds	r3, r7, #6
 80093ae:	881a      	ldrh	r2, [r3, #0]
 80093b0:	2380      	movs	r3, #128	@ 0x80
 80093b2:	01db      	lsls	r3, r3, #7
 80093b4:	4013      	ands	r3, r2
 80093b6:	d015      	beq.n	80093e4 <HAL_PCD_EP_DB_Transmit+0x238>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	001a      	movs	r2, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	18d3      	adds	r3, r2, r3
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a73      	ldr	r2, [pc, #460]	@ (8009598 <HAL_PCD_EP_DB_Transmit+0x3ec>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	001a      	movs	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	18d3      	adds	r3, r2, r3
 80093dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093de:	496f      	ldr	r1, [pc, #444]	@ (800959c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80093e0:	430a      	orrs	r2, r1
 80093e2:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2224      	movs	r2, #36	@ 0x24
 80093e8:	5c9b      	ldrb	r3, [r3, r2]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d000      	beq.n	80093f0 <HAL_PCD_EP_DB_Transmit+0x244>
 80093ee:	e2c2      	b.n	8009976 <HAL_PCD_EP_DB_Transmit+0x7ca>
      {
        ep->xfer_buff += TxPctSize;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	695a      	ldr	r2, [r3, #20]
 80093f4:	211e      	movs	r1, #30
 80093f6:	187b      	adds	r3, r7, r1
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	18d2      	adds	r2, r2, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	187b      	adds	r3, r7, r1
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	18d2      	adds	r2, r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6a1a      	ldr	r2, [r3, #32]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	429a      	cmp	r2, r3
 8009418:	d309      	bcc.n	800942e <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	6a1a      	ldr	r2, [r3, #32]
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	621a      	str	r2, [r3, #32]
 800942c:	e016      	b.n	800945c <HAL_PCD_EP_DB_Transmit+0x2b0>
        }
        else if (ep->xfer_len_db == 0U)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d108      	bne.n	8009448 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxPctSize;
 8009436:	231e      	movs	r3, #30
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2224      	movs	r2, #36	@ 0x24
 8009442:	2100      	movs	r1, #0
 8009444:	5499      	strb	r1, [r3, r2]
 8009446:	e009      	b.n	800945c <HAL_PCD_EP_DB_Transmit+0x2b0>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2224      	movs	r2, #36	@ 0x24
 800944c:	2100      	movs	r1, #0
 800944e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2200      	movs	r2, #0
 800945a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	785b      	ldrb	r3, [r3, #1]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d162      	bne.n	800952a <HAL_PCD_EP_DB_Transmit+0x37e>
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	4a48      	ldr	r2, [pc, #288]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800946c:	4694      	mov	ip, r2
 800946e:	4463      	add	r3, ip
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4944      	ldr	r1, [pc, #272]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800947a:	468c      	mov	ip, r1
 800947c:	4463      	add	r3, ip
 800947e:	0192      	lsls	r2, r2, #6
 8009480:	0992      	lsrs	r2, r2, #6
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d111      	bne.n	80094ae <HAL_PCD_EP_DB_Transmit+0x302>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	00db      	lsls	r3, r3, #3
 8009490:	4a3e      	ldr	r2, [pc, #248]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009492:	4694      	mov	ip, r2
 8009494:	4463      	add	r3, ip
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	493b      	ldr	r1, [pc, #236]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80094a0:	468c      	mov	ip, r1
 80094a2:	4463      	add	r3, ip
 80094a4:	2180      	movs	r1, #128	@ 0x80
 80094a6:	0609      	lsls	r1, r1, #24
 80094a8:	430a      	orrs	r2, r1
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	e062      	b.n	8009574 <HAL_PCD_EP_DB_Transmit+0x3c8>
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80094b2:	d81b      	bhi.n	80094ec <HAL_PCD_EP_DB_Transmit+0x340>
 80094b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b6:	085b      	lsrs	r3, r3, #1
 80094b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	2201      	movs	r2, #1
 80094be:	4013      	ands	r3, r2
 80094c0:	d002      	beq.n	80094c8 <HAL_PCD_EP_DB_Transmit+0x31c>
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	3301      	adds	r3, #1
 80094c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	00db      	lsls	r3, r3, #3
 80094ce:	4a2f      	ldr	r2, [pc, #188]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80094d0:	4694      	mov	ip, r2
 80094d2:	4463      	add	r3, ip
 80094d4:	6819      	ldr	r1, [r3, #0]
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	069a      	lsls	r2, r3, #26
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	482a      	ldr	r0, [pc, #168]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80094e2:	4684      	mov	ip, r0
 80094e4:	4463      	add	r3, ip
 80094e6:	430a      	orrs	r2, r1
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	e043      	b.n	8009574 <HAL_PCD_EP_DB_Transmit+0x3c8>
 80094ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80094f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f4:	221f      	movs	r2, #31
 80094f6:	4013      	ands	r3, r2
 80094f8:	d102      	bne.n	8009500 <HAL_PCD_EP_DB_Transmit+0x354>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	3b01      	subs	r3, #1
 80094fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	4a21      	ldr	r2, [pc, #132]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009508:	4694      	mov	ip, r2
 800950a:	4463      	add	r3, ip
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	069b      	lsls	r3, r3, #26
 8009512:	431a      	orrs	r2, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	491c      	ldr	r1, [pc, #112]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800951c:	468c      	mov	ip, r1
 800951e:	4463      	add	r3, ip
 8009520:	2180      	movs	r1, #128	@ 0x80
 8009522:	0609      	lsls	r1, r1, #24
 8009524:	430a      	orrs	r2, r1
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	e024      	b.n	8009574 <HAL_PCD_EP_DB_Transmit+0x3c8>
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d120      	bne.n	8009574 <HAL_PCD_EP_DB_Transmit+0x3c8>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4a14      	ldr	r2, [pc, #80]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800953a:	4694      	mov	ip, r2
 800953c:	4463      	add	r3, ip
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	4911      	ldr	r1, [pc, #68]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009548:	468c      	mov	ip, r1
 800954a:	4463      	add	r3, ip
 800954c:	0412      	lsls	r2, r2, #16
 800954e:	0c12      	lsrs	r2, r2, #16
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	4a0c      	ldr	r2, [pc, #48]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800955a:	4694      	mov	ip, r2
 800955c:	4463      	add	r3, ip
 800955e:	6819      	ldr	r1, [r3, #0]
 8009560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009562:	041a      	lsls	r2, r3, #16
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4808      	ldr	r0, [pc, #32]	@ (800958c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800956c:	4684      	mov	ip, r0
 800956e:	4463      	add	r3, ip
 8009570:	430a      	orrs	r2, r1
 8009572:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6959      	ldr	r1, [r3, #20]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	891a      	ldrh	r2, [r3, #8]
 8009580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009582:	b29b      	uxth	r3, r3
 8009584:	f005 fa4c 	bl	800ea20 <USB_WritePMA>
 8009588:	e1f5      	b.n	8009976 <HAL_PCD_EP_DB_Transmit+0x7ca>
 800958a:	46c0      	nop			@ (mov r8, r8)
 800958c:	40009800 	.word	0x40009800
 8009590:	07ff8fbf 	.word	0x07ff8fbf
 8009594:	00008080 	.word	0x00008080
 8009598:	07ff8f8f 	.word	0x07ff8f8f
 800959c:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	251e      	movs	r5, #30
 80095aa:	197c      	adds	r4, r7, r5
 80095ac:	0019      	movs	r1, r3
 80095ae:	0010      	movs	r0, r2
 80095b0:	f7fe ff5a 	bl	8008468 <PCD_GET_EP_DBUF1_CNT>
 80095b4:	0003      	movs	r3, r0
 80095b6:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	197b      	adds	r3, r7, r5
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d307      	bcc.n	80095d4 <HAL_PCD_EP_DB_Transmit+0x428>
    {
      ep->xfer_len -= TxPctSize;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	197b      	adds	r3, r7, r5
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	1ad2      	subs	r2, r2, r3
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	619a      	str	r2, [r3, #24]
 80095d2:	e002      	b.n	80095da <HAL_PCD_EP_DB_Transmit+0x42e>
    }
    else
    {
      ep->xfer_len = 0U;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2200      	movs	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d000      	beq.n	80095e4 <HAL_PCD_EP_DB_Transmit+0x438>
 80095e2:	e0d0      	b.n	8009786 <HAL_PCD_EP_DB_Transmit+0x5da>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d121      	bne.n	8009630 <HAL_PCD_EP_DB_Transmit+0x484>
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	4ac4      	ldr	r2, [pc, #784]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80095f4:	4694      	mov	ip, r2
 80095f6:	4463      	add	r3, ip
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	49c0      	ldr	r1, [pc, #768]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009602:	468c      	mov	ip, r1
 8009604:	4463      	add	r3, ip
 8009606:	0192      	lsls	r2, r2, #6
 8009608:	0992      	lsrs	r2, r2, #6
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	00db      	lsls	r3, r3, #3
 8009612:	4abc      	ldr	r2, [pc, #752]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009614:	4694      	mov	ip, r2
 8009616:	4463      	add	r3, ip
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	49b8      	ldr	r1, [pc, #736]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009622:	468c      	mov	ip, r1
 8009624:	4463      	add	r3, ip
 8009626:	2180      	movs	r1, #128	@ 0x80
 8009628:	0609      	lsls	r1, r1, #24
 800962a:	430a      	orrs	r2, r1
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e020      	b.n	8009672 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	785b      	ldrb	r3, [r3, #1]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d11c      	bne.n	8009672 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	4ab1      	ldr	r2, [pc, #708]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009640:	4694      	mov	ip, r2
 8009642:	4463      	add	r3, ip
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	49ad      	ldr	r1, [pc, #692]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 800964e:	468c      	mov	ip, r1
 8009650:	4463      	add	r3, ip
 8009652:	0412      	lsls	r2, r2, #16
 8009654:	0c12      	lsrs	r2, r2, #16
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	4aa9      	ldr	r2, [pc, #676]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009660:	189a      	adds	r2, r3, r2
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	49a6      	ldr	r1, [pc, #664]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 800966a:	468c      	mov	ip, r1
 800966c:	4463      	add	r3, ip
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d121      	bne.n	80096be <HAL_PCD_EP_DB_Transmit+0x512>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	4aa0      	ldr	r2, [pc, #640]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009682:	4694      	mov	ip, r2
 8009684:	4463      	add	r3, ip
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	499d      	ldr	r1, [pc, #628]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009690:	468c      	mov	ip, r1
 8009692:	4463      	add	r3, ip
 8009694:	0192      	lsls	r2, r2, #6
 8009696:	0992      	lsrs	r2, r2, #6
 8009698:	605a      	str	r2, [r3, #4]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	4a98      	ldr	r2, [pc, #608]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80096a2:	4694      	mov	ip, r2
 80096a4:	4463      	add	r3, ip
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	4995      	ldr	r1, [pc, #596]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80096b0:	468c      	mov	ip, r1
 80096b2:	4463      	add	r3, ip
 80096b4:	2180      	movs	r1, #128	@ 0x80
 80096b6:	0609      	lsls	r1, r1, #24
 80096b8:	430a      	orrs	r2, r1
 80096ba:	605a      	str	r2, [r3, #4]
 80096bc:	e020      	b.n	8009700 <HAL_PCD_EP_DB_Transmit+0x554>
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d11c      	bne.n	8009700 <HAL_PCD_EP_DB_Transmit+0x554>
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4a8d      	ldr	r2, [pc, #564]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80096ce:	4694      	mov	ip, r2
 80096d0:	4463      	add	r3, ip
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	498a      	ldr	r1, [pc, #552]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80096dc:	468c      	mov	ip, r1
 80096de:	4463      	add	r3, ip
 80096e0:	0412      	lsls	r2, r2, #16
 80096e2:	0c12      	lsrs	r2, r2, #16
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	4a85      	ldr	r2, [pc, #532]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80096ee:	189a      	adds	r2, r3, r2
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	00db      	lsls	r3, r3, #3
 80096f6:	4983      	ldr	r1, [pc, #524]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80096f8:	468c      	mov	ip, r1
 80096fa:	4463      	add	r3, ip
 80096fc:	6852      	ldr	r2, [r2, #4]
 80096fe:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	78db      	ldrb	r3, [r3, #3]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d119      	bne.n	800973c <HAL_PCD_EP_DB_Transmit+0x590>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	001a      	movs	r2, r3
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	18d3      	adds	r3, r2, r3
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a7b      	ldr	r2, [pc, #492]	@ (8009908 <HAL_PCD_EP_DB_Transmit+0x75c>)
 800971a:	4013      	ands	r3, r2
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	2220      	movs	r2, #32
 8009722:	4053      	eors	r3, r2
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	001a      	movs	r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	18d3      	adds	r3, r2, r3
 8009734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009736:	4975      	ldr	r1, [pc, #468]	@ (800990c <HAL_PCD_EP_DB_Transmit+0x760>)
 8009738:	430a      	orrs	r2, r1
 800973a:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	781a      	ldrb	r2, [r3, #0]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	0011      	movs	r1, r2
 8009744:	0018      	movs	r0, r3
 8009746:	f7ff f8bc 	bl	80088c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800974a:	1dbb      	adds	r3, r7, #6
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	2380      	movs	r3, #128	@ 0x80
 8009750:	01db      	lsls	r3, r3, #7
 8009752:	4013      	ands	r3, r2
 8009754:	d115      	bne.n	8009782 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	001a      	movs	r2, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	18d3      	adds	r3, r2, r3
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a6a      	ldr	r2, [pc, #424]	@ (8009910 <HAL_PCD_EP_DB_Transmit+0x764>)
 8009768:	4013      	ands	r3, r2
 800976a:	623b      	str	r3, [r7, #32]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	001a      	movs	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	18d3      	adds	r3, r2, r3
 800977a:	6a3a      	ldr	r2, [r7, #32]
 800977c:	4965      	ldr	r1, [pc, #404]	@ (8009914 <HAL_PCD_EP_DB_Transmit+0x768>)
 800977e:	430a      	orrs	r2, r1
 8009780:	601a      	str	r2, [r3, #0]
      }

      return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e116      	b.n	80099b4 <HAL_PCD_EP_DB_Transmit+0x808>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009786:	1dbb      	adds	r3, r7, #6
 8009788:	881a      	ldrh	r2, [r3, #0]
 800978a:	2380      	movs	r3, #128	@ 0x80
 800978c:	01db      	lsls	r3, r3, #7
 800978e:	4013      	ands	r3, r2
 8009790:	d115      	bne.n	80097be <HAL_PCD_EP_DB_Transmit+0x612>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	001a      	movs	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	18d3      	adds	r3, r2, r3
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a5b      	ldr	r2, [pc, #364]	@ (8009910 <HAL_PCD_EP_DB_Transmit+0x764>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	001a      	movs	r2, r3
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	4956      	ldr	r1, [pc, #344]	@ (8009914 <HAL_PCD_EP_DB_Transmit+0x768>)
 80097ba:	430a      	orrs	r2, r1
 80097bc:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2224      	movs	r2, #36	@ 0x24
 80097c2:	5c9b      	ldrb	r3, [r3, r2]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d000      	beq.n	80097ca <HAL_PCD_EP_DB_Transmit+0x61e>
 80097c8:	e0d5      	b.n	8009976 <HAL_PCD_EP_DB_Transmit+0x7ca>
      {
        ep->xfer_buff += TxPctSize;
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	695a      	ldr	r2, [r3, #20]
 80097ce:	211e      	movs	r1, #30
 80097d0:	187b      	adds	r3, r7, r1
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	18d2      	adds	r2, r2, r3
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	69da      	ldr	r2, [r3, #28]
 80097de:	187b      	adds	r3, r7, r1
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	18d2      	adds	r2, r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	6a1a      	ldr	r2, [r3, #32]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d309      	bcc.n	8009808 <HAL_PCD_EP_DB_Transmit+0x65c>
        {
          len = ep->maxpacket;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	1ad2      	subs	r2, r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	621a      	str	r2, [r3, #32]
 8009806:	e016      	b.n	8009836 <HAL_PCD_EP_DB_Transmit+0x68a>
        }
        else if (ep->xfer_len_db == 0U)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d108      	bne.n	8009822 <HAL_PCD_EP_DB_Transmit+0x676>
        {
          len = TxPctSize;
 8009810:	231e      	movs	r3, #30
 8009812:	18fb      	adds	r3, r7, r3
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2224      	movs	r2, #36	@ 0x24
 800981c:	2100      	movs	r1, #0
 800981e:	5499      	strb	r1, [r3, r2]
 8009820:	e009      	b.n	8009836 <HAL_PCD_EP_DB_Transmit+0x68a>
        }
        else
        {
          len = ep->xfer_len_db;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2200      	movs	r2, #0
 800982c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2224      	movs	r2, #36	@ 0x24
 8009832:	2100      	movs	r1, #0
 8009834:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	785b      	ldrb	r3, [r3, #1]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d16c      	bne.n	8009918 <HAL_PCD_EP_DB_Transmit+0x76c>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	4a2f      	ldr	r2, [pc, #188]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009846:	4694      	mov	ip, r2
 8009848:	4463      	add	r3, ip
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	492c      	ldr	r1, [pc, #176]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 8009854:	468c      	mov	ip, r1
 8009856:	4463      	add	r3, ip
 8009858:	0192      	lsls	r2, r2, #6
 800985a:	0992      	lsrs	r2, r2, #6
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009860:	2b00      	cmp	r3, #0
 8009862:	d111      	bne.n	8009888 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4a26      	ldr	r2, [pc, #152]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 800986c:	4694      	mov	ip, r2
 800986e:	4463      	add	r3, ip
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	4922      	ldr	r1, [pc, #136]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 800987a:	468c      	mov	ip, r1
 800987c:	4463      	add	r3, ip
 800987e:	2180      	movs	r1, #128	@ 0x80
 8009880:	0609      	lsls	r1, r1, #24
 8009882:	430a      	orrs	r2, r1
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	e06c      	b.n	8009962 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	2b3e      	cmp	r3, #62	@ 0x3e
 800988c:	d81b      	bhi.n	80098c6 <HAL_PCD_EP_DB_Transmit+0x71a>
 800988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009890:	085b      	lsrs	r3, r3, #1
 8009892:	61bb      	str	r3, [r7, #24]
 8009894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009896:	2201      	movs	r2, #1
 8009898:	4013      	ands	r3, r2
 800989a:	d002      	beq.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x6f6>
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	3301      	adds	r3, #1
 80098a0:	61bb      	str	r3, [r7, #24]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	4a16      	ldr	r2, [pc, #88]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80098aa:	4694      	mov	ip, r2
 80098ac:	4463      	add	r3, ip
 80098ae:	6859      	ldr	r1, [r3, #4]
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	069a      	lsls	r2, r3, #26
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	4812      	ldr	r0, [pc, #72]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80098bc:	4684      	mov	ip, r0
 80098be:	4463      	add	r3, ip
 80098c0:	430a      	orrs	r2, r1
 80098c2:	605a      	str	r2, [r3, #4]
 80098c4:	e04d      	b.n	8009962 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80098c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c8:	095b      	lsrs	r3, r3, #5
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ce:	221f      	movs	r2, #31
 80098d0:	4013      	ands	r3, r2
 80098d2:	d102      	bne.n	80098da <HAL_PCD_EP_DB_Transmit+0x72e>
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	4a08      	ldr	r2, [pc, #32]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80098e2:	4694      	mov	ip, r2
 80098e4:	4463      	add	r3, ip
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	069b      	lsls	r3, r3, #26
 80098ec:	431a      	orrs	r2, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	4903      	ldr	r1, [pc, #12]	@ (8009904 <HAL_PCD_EP_DB_Transmit+0x758>)
 80098f6:	468c      	mov	ip, r1
 80098f8:	4463      	add	r3, ip
 80098fa:	2180      	movs	r1, #128	@ 0x80
 80098fc:	0609      	lsls	r1, r1, #24
 80098fe:	430a      	orrs	r2, r1
 8009900:	605a      	str	r2, [r3, #4]
 8009902:	e02e      	b.n	8009962 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8009904:	40009800 	.word	0x40009800
 8009908:	07ff8fbf 	.word	0x07ff8fbf
 800990c:	00008080 	.word	0x00008080
 8009910:	07ff8f8f 	.word	0x07ff8f8f
 8009914:	0000c080 	.word	0x0000c080
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d120      	bne.n	8009962 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	4a25      	ldr	r2, [pc, #148]	@ (80099bc <HAL_PCD_EP_DB_Transmit+0x810>)
 8009928:	4694      	mov	ip, r2
 800992a:	4463      	add	r3, ip
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	4921      	ldr	r1, [pc, #132]	@ (80099bc <HAL_PCD_EP_DB_Transmit+0x810>)
 8009936:	468c      	mov	ip, r1
 8009938:	4463      	add	r3, ip
 800993a:	0412      	lsls	r2, r2, #16
 800993c:	0c12      	lsrs	r2, r2, #16
 800993e:	605a      	str	r2, [r3, #4]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	4a1d      	ldr	r2, [pc, #116]	@ (80099bc <HAL_PCD_EP_DB_Transmit+0x810>)
 8009948:	4694      	mov	ip, r2
 800994a:	4463      	add	r3, ip
 800994c:	6859      	ldr	r1, [r3, #4]
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	041a      	lsls	r2, r3, #16
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	4818      	ldr	r0, [pc, #96]	@ (80099bc <HAL_PCD_EP_DB_Transmit+0x810>)
 800995a:	4684      	mov	ip, r0
 800995c:	4463      	add	r3, ip
 800995e:	430a      	orrs	r2, r1
 8009960:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	6959      	ldr	r1, [r3, #20]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	895a      	ldrh	r2, [r3, #10]
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	b29b      	uxth	r3, r3
 8009972:	f005 f855 	bl	800ea20 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	001a      	movs	r2, r3
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	18d3      	adds	r3, r2, r3
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a0e      	ldr	r2, [pc, #56]	@ (80099c0 <HAL_PCD_EP_DB_Transmit+0x814>)
 8009988:	4013      	ands	r3, r2
 800998a:	637b      	str	r3, [r7, #52]	@ 0x34
 800998c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998e:	2210      	movs	r2, #16
 8009990:	4053      	eors	r3, r2
 8009992:	637b      	str	r3, [r7, #52]	@ 0x34
 8009994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009996:	2220      	movs	r2, #32
 8009998:	4053      	eors	r3, r2
 800999a:	637b      	str	r3, [r7, #52]	@ 0x34
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	001a      	movs	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	18d3      	adds	r3, r2, r3
 80099aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099ac:	4905      	ldr	r1, [pc, #20]	@ (80099c4 <HAL_PCD_EP_DB_Transmit+0x818>)
 80099ae:	430a      	orrs	r2, r1
 80099b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	0018      	movs	r0, r3
 80099b6:	46bd      	mov	sp, r7
 80099b8:	b010      	add	sp, #64	@ 0x40
 80099ba:	bdb0      	pop	{r4, r5, r7, pc}
 80099bc:	40009800 	.word	0x40009800
 80099c0:	07ff8fbf 	.word	0x07ff8fbf
 80099c4:	00008080 	.word	0x00008080

080099c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	23b4      	movs	r3, #180	@ 0xb4
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	2101      	movs	r1, #1
 80099de:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	23b2      	movs	r3, #178	@ 0xb2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	2100      	movs	r1, #0
 80099e8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ee:	2201      	movs	r2, #1
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fa:	2202      	movs	r2, #2
 80099fc:	431a      	orrs	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	0018      	movs	r0, r3
 8009a06:	46bd      	mov	sp, r7
 8009a08:	b004      	add	sp, #16
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	000a      	movs	r2, r1
 8009a16:	1cfb      	adds	r3, r7, #3
 8009a18:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009a1a:	46c0      	nop			@ (mov r8, r8)
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	b002      	add	sp, #8
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a28:	4b04      	ldr	r3, [pc, #16]	@ (8009a3c <HAL_PWR_EnableBkUpAccess+0x18>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	4b03      	ldr	r3, [pc, #12]	@ (8009a3c <HAL_PWR_EnableBkUpAccess+0x18>)
 8009a2e:	2180      	movs	r1, #128	@ 0x80
 8009a30:	0049      	lsls	r1, r1, #1
 8009a32:	430a      	orrs	r2, r1
 8009a34:	601a      	str	r2, [r3, #0]
}
 8009a36:	46c0      	nop			@ (mov r8, r8)
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40007000 	.word	0x40007000

08009a40 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_EWUP_Msk & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8009a48:	4b0c      	ldr	r3, [pc, #48]	@ (8009a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	215f      	movs	r1, #95	@ 0x5f
 8009a50:	400a      	ands	r2, r1
 8009a52:	43d2      	mvns	r2, r2
 8009a54:	401a      	ands	r2, r3
 8009a56:	0011      	movs	r1, r2
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	09da      	lsrs	r2, r3, #7
 8009a5c:	4b07      	ldr	r3, [pc, #28]	@ (8009a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_EWUP_Msk & WakeUpPinPolarity));
 8009a62:	4b06      	ldr	r3, [pc, #24]	@ (8009a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009a64:	6899      	ldr	r1, [r3, #8]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	225f      	movs	r2, #95	@ 0x5f
 8009a6a:	401a      	ands	r2, r3
 8009a6c:	4b03      	ldr	r3, [pc, #12]	@ (8009a7c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	609a      	str	r2, [r3, #8]
}
 8009a72:	46c0      	nop			@ (mov r8, r8)
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b002      	add	sp, #8
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	46c0      	nop			@ (mov r8, r8)
 8009a7c:	40007000 	.word	0x40007000

08009a80 <HAL_PWR_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWR_EnterSHUTDOWNMode(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_2);
 8009a84:	4b09      	ldr	r3, [pc, #36]	@ (8009aac <HAL_PWR_EnterSHUTDOWNMode+0x2c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2207      	movs	r2, #7
 8009a8a:	4393      	bics	r3, r2
 8009a8c:	001a      	movs	r2, r3
 8009a8e:	4b07      	ldr	r3, [pc, #28]	@ (8009aac <HAL_PWR_EnterSHUTDOWNMode+0x2c>)
 8009a90:	2104      	movs	r1, #4
 8009a92:	430a      	orrs	r2, r1
 8009a94:	601a      	str	r2, [r3, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009a96:	4b06      	ldr	r3, [pc, #24]	@ (8009ab0 <HAL_PWR_EnterSHUTDOWNMode+0x30>)
 8009a98:	691a      	ldr	r2, [r3, #16]
 8009a9a:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <HAL_PWR_EnterSHUTDOWNMode+0x30>)
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */
  /* Request Wait For Interrupt */
  __WFI();
 8009aa2:	bf30      	wfi
}
 8009aa4:	46c0      	nop			@ (mov r8, r8)
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	46c0      	nop			@ (mov r8, r8)
 8009aac:	40007000 	.word	0x40007000
 8009ab0:	e000ed00 	.word	0xe000ed00

08009ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	2380      	movs	r3, #128	@ 0x80
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d137      	bne.n	8009b36 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ac6:	4b27      	ldr	r3, [pc, #156]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	23c0      	movs	r3, #192	@ 0xc0
 8009acc:	00db      	lsls	r3, r3, #3
 8009ace:	401a      	ands	r2, r3
 8009ad0:	2380      	movs	r3, #128	@ 0x80
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d040      	beq.n	8009b5a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ad8:	4b22      	ldr	r3, [pc, #136]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a22      	ldr	r2, [pc, #136]	@ (8009b68 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8009ade:	401a      	ands	r2, r3
 8009ae0:	4b20      	ldr	r3, [pc, #128]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009ae2:	2180      	movs	r1, #128	@ 0x80
 8009ae4:	0089      	lsls	r1, r1, #2
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009aea:	4b20      	ldr	r3, [pc, #128]	@ (8009b6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2232      	movs	r2, #50	@ 0x32
 8009af0:	4353      	muls	r3, r2
 8009af2:	491f      	ldr	r1, [pc, #124]	@ (8009b70 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8009af4:	0018      	movs	r0, r3
 8009af6:	f7f6 fb23 	bl	8000140 <__udivsi3>
 8009afa:	0003      	movs	r3, r0
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009b00:	e002      	b.n	8009b08 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009b08:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009b0a:	695a      	ldr	r2, [r3, #20]
 8009b0c:	2380      	movs	r3, #128	@ 0x80
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	401a      	ands	r2, r3
 8009b12:	2380      	movs	r3, #128	@ 0x80
 8009b14:	00db      	lsls	r3, r3, #3
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d102      	bne.n	8009b20 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1f0      	bne.n	8009b02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009b20:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009b22:	695a      	ldr	r2, [r3, #20]
 8009b24:	2380      	movs	r3, #128	@ 0x80
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	401a      	ands	r2, r3
 8009b2a:	2380      	movs	r3, #128	@ 0x80
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d113      	bne.n	8009b5a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e012      	b.n	8009b5c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009b36:	4b0b      	ldr	r3, [pc, #44]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	23c0      	movs	r3, #192	@ 0xc0
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	401a      	ands	r2, r3
 8009b40:	2380      	movs	r3, #128	@ 0x80
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d008      	beq.n	8009b5a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009b48:	4b06      	ldr	r3, [pc, #24]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a06      	ldr	r2, [pc, #24]	@ (8009b68 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8009b4e:	401a      	ands	r2, r3
 8009b50:	4b04      	ldr	r3, [pc, #16]	@ (8009b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009b52:	2180      	movs	r1, #128	@ 0x80
 8009b54:	00c9      	lsls	r1, r1, #3
 8009b56:	430a      	orrs	r2, r1
 8009b58:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b004      	add	sp, #16
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	40007000 	.word	0x40007000
 8009b68:	fffff9ff 	.word	0xfffff9ff
 8009b6c:	20000004 	.word	0x20000004
 8009b70:	000f4240 	.word	0x000f4240

08009b74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8009b78:	4b03      	ldr	r3, [pc, #12]	@ (8009b88 <HAL_PWREx_GetVoltageRange+0x14>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	23c0      	movs	r3, #192	@ 0xc0
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	4013      	ands	r3, r2
}
 8009b82:	0018      	movs	r0, r3
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40007000 	.word	0x40007000

08009b8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009b90:	4b04      	ldr	r3, [pc, #16]	@ (8009ba4 <HAL_PWREx_EnableVddUSB+0x18>)
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	4b03      	ldr	r3, [pc, #12]	@ (8009ba4 <HAL_PWREx_EnableVddUSB+0x18>)
 8009b96:	2180      	movs	r1, #128	@ 0x80
 8009b98:	00c9      	lsls	r1, r1, #3
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	605a      	str	r2, [r3, #4]
}
 8009b9e:	46c0      	nop			@ (mov r8, r8)
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	40007000 	.word	0x40007000

08009ba8 <HAL_PWREx_EnableUltraLowPowerMode>:
  * @brief Enable Ultra Low Power BORL, BORH and PVD for STOP2 and Standby modes.
  * @note  All the other modes are not affected by this bit.
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPowerMode(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_ENULP);
 8009bac:	4b04      	ldr	r3, [pc, #16]	@ (8009bc0 <HAL_PWREx_EnableUltraLowPowerMode+0x18>)
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	4b03      	ldr	r3, [pc, #12]	@ (8009bc0 <HAL_PWREx_EnableUltraLowPowerMode+0x18>)
 8009bb2:	2180      	movs	r1, #128	@ 0x80
 8009bb4:	0089      	lsls	r1, r1, #2
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	609a      	str	r2, [r3, #8]
}
 8009bba:	46c0      	nop			@ (mov r8, r8)
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	40007000 	.word	0x40007000

08009bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bc4:	b5b0      	push	{r4, r5, r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bcc:	4bc9      	ldr	r3, [pc, #804]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2238      	movs	r2, #56	@ 0x38
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009bd6:	4bc7      	ldr	r3, [pc, #796]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2203      	movs	r2, #3
 8009bdc:	4013      	ands	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2210      	movs	r2, #16
 8009be6:	4013      	ands	r3, r2
 8009be8:	d100      	bne.n	8009bec <HAL_RCC_OscConfig+0x28>
 8009bea:	e0ef      	b.n	8009dcc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d007      	beq.n	8009c02 <HAL_RCC_OscConfig+0x3e>
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b18      	cmp	r3, #24
 8009bf6:	d000      	beq.n	8009bfa <HAL_RCC_OscConfig+0x36>
 8009bf8:	e093      	b.n	8009d22 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d000      	beq.n	8009c02 <HAL_RCC_OscConfig+0x3e>
 8009c00:	e08f      	b.n	8009d22 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c02:	4bbc      	ldr	r3, [pc, #752]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2202      	movs	r2, #2
 8009c08:	4013      	ands	r3, r2
 8009c0a:	d006      	beq.n	8009c1a <HAL_RCC_OscConfig+0x56>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d102      	bne.n	8009c1a <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f000 fbf2 	bl	800a3fe <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c1e:	4bb5      	ldr	r3, [pc, #724]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2108      	movs	r1, #8
 8009c24:	400b      	ands	r3, r1
 8009c26:	d004      	beq.n	8009c32 <HAL_RCC_OscConfig+0x6e>
 8009c28:	4bb2      	ldr	r3, [pc, #712]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	21f0      	movs	r1, #240	@ 0xf0
 8009c2e:	400b      	ands	r3, r1
 8009c30:	e005      	b.n	8009c3e <HAL_RCC_OscConfig+0x7a>
 8009c32:	49b0      	ldr	r1, [pc, #704]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c34:	2394      	movs	r3, #148	@ 0x94
 8009c36:	58cb      	ldr	r3, [r1, r3]
 8009c38:	091b      	lsrs	r3, r3, #4
 8009c3a:	21f0      	movs	r1, #240	@ 0xf0
 8009c3c:	400b      	ands	r3, r1
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d225      	bcs.n	8009c8e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c46:	0018      	movs	r0, r3
 8009c48:	f000 fd90 	bl	800a76c <RCC_SetFlashLatencyFromMSIRange>
 8009c4c:	1e03      	subs	r3, r0, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f000 fbd4 	bl	800a3fe <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c56:	4ba7      	ldr	r3, [pc, #668]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4ba6      	ldr	r3, [pc, #664]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c5c:	2108      	movs	r1, #8
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	4ba4      	ldr	r3, [pc, #656]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	22f0      	movs	r2, #240	@ 0xf0
 8009c68:	4393      	bics	r3, r2
 8009c6a:	0019      	movs	r1, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c70:	4ba0      	ldr	r3, [pc, #640]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c72:	430a      	orrs	r2, r1
 8009c74:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c76:	4b9f      	ldr	r3, [pc, #636]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ef8 <HAL_RCC_OscConfig+0x334>)
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	0019      	movs	r1, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	021a      	lsls	r2, r3, #8
 8009c86:	4b9b      	ldr	r3, [pc, #620]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	605a      	str	r2, [r3, #4]
 8009c8c:	e027      	b.n	8009cde <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c8e:	4b99      	ldr	r3, [pc, #612]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	4b98      	ldr	r3, [pc, #608]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c94:	2108      	movs	r1, #8
 8009c96:	430a      	orrs	r2, r1
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	4b96      	ldr	r3, [pc, #600]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	22f0      	movs	r2, #240	@ 0xf0
 8009ca0:	4393      	bics	r3, r2
 8009ca2:	0019      	movs	r1, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ca8:	4b92      	ldr	r3, [pc, #584]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009caa:	430a      	orrs	r2, r1
 8009cac:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cae:	4b91      	ldr	r3, [pc, #580]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	4a91      	ldr	r2, [pc, #580]	@ (8009ef8 <HAL_RCC_OscConfig+0x334>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	0019      	movs	r1, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	021a      	lsls	r2, r3, #8
 8009cbe:	4b8d      	ldr	r3, [pc, #564]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d109      	bne.n	8009cde <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cce:	0018      	movs	r0, r3
 8009cd0:	f000 fd4c 	bl	800a76c <RCC_SetFlashLatencyFromMSIRange>
 8009cd4:	1e03      	subs	r3, r0, #0
 8009cd6:	d002      	beq.n	8009cde <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f000 fb90 	bl	800a3fe <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8009cde:	f000 fc87 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 8009ce2:	0001      	movs	r1, r0
 8009ce4:	4b83      	ldr	r3, [pc, #524]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009ce6:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009ce8:	0a1b      	lsrs	r3, r3, #8
 8009cea:	220f      	movs	r2, #15
 8009cec:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8009cee:	4a83      	ldr	r2, [pc, #524]	@ (8009efc <HAL_RCC_OscConfig+0x338>)
 8009cf0:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009cf2:	001a      	movs	r2, r3
 8009cf4:	231f      	movs	r3, #31
 8009cf6:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8009cf8:	000a      	movs	r2, r1
 8009cfa:	40da      	lsrs	r2, r3
 8009cfc:	4b80      	ldr	r3, [pc, #512]	@ (8009f00 <HAL_RCC_OscConfig+0x33c>)
 8009cfe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009d00:	4b80      	ldr	r3, [pc, #512]	@ (8009f04 <HAL_RCC_OscConfig+0x340>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	250f      	movs	r5, #15
 8009d06:	197c      	adds	r4, r7, r5
 8009d08:	0018      	movs	r0, r3
 8009d0a:	f7fb fe4b 	bl	80059a4 <HAL_InitTick>
 8009d0e:	0003      	movs	r3, r0
 8009d10:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8009d12:	197b      	adds	r3, r7, r5
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d057      	beq.n	8009dca <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8009d1a:	197b      	adds	r3, r7, r5
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f000 fb6e 	bl	800a3fe <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d035      	beq.n	8009d96 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009d2a:	4b72      	ldr	r3, [pc, #456]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b71      	ldr	r3, [pc, #452]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d30:	2101      	movs	r1, #1
 8009d32:	430a      	orrs	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009d36:	f7fb fe8f 	bl	8005a58 <HAL_GetTick>
 8009d3a:	0003      	movs	r3, r0
 8009d3c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d3e:	e009      	b.n	8009d54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8009d40:	f7fb fe8a 	bl	8005a58 <HAL_GetTick>
 8009d44:	0002      	movs	r2, r0
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d902      	bls.n	8009d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	f000 fb55 	bl	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d54:	4b67      	ldr	r3, [pc, #412]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2202      	movs	r2, #2
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	d0f0      	beq.n	8009d40 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d5e:	4b65      	ldr	r3, [pc, #404]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4b64      	ldr	r3, [pc, #400]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d64:	2108      	movs	r1, #8
 8009d66:	430a      	orrs	r2, r1
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	4b62      	ldr	r3, [pc, #392]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	22f0      	movs	r2, #240	@ 0xf0
 8009d70:	4393      	bics	r3, r2
 8009d72:	0019      	movs	r1, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d78:	4b5e      	ldr	r3, [pc, #376]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	4a5d      	ldr	r2, [pc, #372]	@ (8009ef8 <HAL_RCC_OscConfig+0x334>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	0019      	movs	r1, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	021a      	lsls	r2, r3, #8
 8009d8e:	4b59      	ldr	r3, [pc, #356]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d90:	430a      	orrs	r2, r1
 8009d92:	605a      	str	r2, [r3, #4]
 8009d94:	e01a      	b.n	8009dcc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009d96:	4b57      	ldr	r3, [pc, #348]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	4b56      	ldr	r3, [pc, #344]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	438a      	bics	r2, r1
 8009da0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009da2:	f7fb fe59 	bl	8005a58 <HAL_GetTick>
 8009da6:	0003      	movs	r3, r0
 8009da8:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009daa:	e008      	b.n	8009dbe <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8009dac:	f7fb fe54 	bl	8005a58 <HAL_GetTick>
 8009db0:	0002      	movs	r2, r0
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e31f      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	d1f1      	bne.n	8009dac <HAL_RCC_OscConfig+0x1e8>
 8009dc8:	e000      	b.n	8009dcc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009dca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	d100      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x214>
 8009dd6:	e065      	b.n	8009ea4 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	d005      	beq.n	8009dea <HAL_RCC_OscConfig+0x226>
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	2b18      	cmp	r3, #24
 8009de2:	d10e      	bne.n	8009e02 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d10b      	bne.n	8009e02 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dea:	4b42      	ldr	r3, [pc, #264]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	2380      	movs	r3, #128	@ 0x80
 8009df0:	029b      	lsls	r3, r3, #10
 8009df2:	4013      	ands	r3, r2
 8009df4:	d055      	beq.n	8009ea2 <HAL_RCC_OscConfig+0x2de>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d151      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e2fd      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	2380      	movs	r3, #128	@ 0x80
 8009e08:	025b      	lsls	r3, r3, #9
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d107      	bne.n	8009e1e <HAL_RCC_OscConfig+0x25a>
 8009e0e:	4b39      	ldr	r3, [pc, #228]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b38      	ldr	r3, [pc, #224]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e14:	2180      	movs	r1, #128	@ 0x80
 8009e16:	0249      	lsls	r1, r1, #9
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	e013      	b.n	8009e46 <HAL_RCC_OscConfig+0x282>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	23a0      	movs	r3, #160	@ 0xa0
 8009e24:	02db      	lsls	r3, r3, #11
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d107      	bne.n	8009e3a <HAL_RCC_OscConfig+0x276>
 8009e2a:	4b32      	ldr	r3, [pc, #200]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e30:	21a0      	movs	r1, #160	@ 0xa0
 8009e32:	02c9      	lsls	r1, r1, #11
 8009e34:	430a      	orrs	r2, r1
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	e005      	b.n	8009e46 <HAL_RCC_OscConfig+0x282>
 8009e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e40:	4931      	ldr	r1, [pc, #196]	@ (8009f08 <HAL_RCC_OscConfig+0x344>)
 8009e42:	400a      	ands	r2, r1
 8009e44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d014      	beq.n	8009e78 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e4e:	f7fb fe03 	bl	8005a58 <HAL_GetTick>
 8009e52:	0003      	movs	r3, r0
 8009e54:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8009e58:	f7fb fdfe 	bl	8005a58 <HAL_GetTick>
 8009e5c:	0002      	movs	r2, r0
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b64      	cmp	r3, #100	@ 0x64
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e2c9      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e6a:	4b22      	ldr	r3, [pc, #136]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	2380      	movs	r3, #128	@ 0x80
 8009e70:	029b      	lsls	r3, r3, #10
 8009e72:	4013      	ands	r3, r2
 8009e74:	d0f0      	beq.n	8009e58 <HAL_RCC_OscConfig+0x294>
 8009e76:	e015      	b.n	8009ea4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e78:	f7fb fdee 	bl	8005a58 <HAL_GetTick>
 8009e7c:	0003      	movs	r3, r0
 8009e7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e80:	e008      	b.n	8009e94 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8009e82:	f7fb fde9 	bl	8005a58 <HAL_GetTick>
 8009e86:	0002      	movs	r2, r0
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b64      	cmp	r3, #100	@ 0x64
 8009e8e:	d901      	bls.n	8009e94 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e2b4      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e94:	4b17      	ldr	r3, [pc, #92]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	2380      	movs	r3, #128	@ 0x80
 8009e9a:	029b      	lsls	r3, r3, #10
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	d1f0      	bne.n	8009e82 <HAL_RCC_OscConfig+0x2be>
 8009ea0:	e000      	b.n	8009ea4 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ea2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	4013      	ands	r3, r2
 8009eac:	d100      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x2ec>
 8009eae:	e074      	b.n	8009f9a <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b08      	cmp	r3, #8
 8009eb4:	d005      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x2fe>
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	2b18      	cmp	r3, #24
 8009eba:	d129      	bne.n	8009f10 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d126      	bne.n	8009f10 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	2380      	movs	r3, #128	@ 0x80
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4013      	ands	r3, r2
 8009ecc:	d005      	beq.n	8009eda <HAL_RCC_OscConfig+0x316>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e291      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eda:	4b06      	ldr	r3, [pc, #24]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	4a0b      	ldr	r2, [pc, #44]	@ (8009f0c <HAL_RCC_OscConfig+0x348>)
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	0019      	movs	r1, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	061a      	lsls	r2, r3, #24
 8009eea:	4b02      	ldr	r3, [pc, #8]	@ (8009ef4 <HAL_RCC_OscConfig+0x330>)
 8009eec:	430a      	orrs	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ef0:	e053      	b.n	8009f9a <HAL_RCC_OscConfig+0x3d6>
 8009ef2:	46c0      	nop			@ (mov r8, r8)
 8009ef4:	40021000 	.word	0x40021000
 8009ef8:	ffff00ff 	.word	0xffff00ff
 8009efc:	080120c0 	.word	0x080120c0
 8009f00:	20000004 	.word	0x20000004
 8009f04:	20000008 	.word	0x20000008
 8009f08:	fffaffff 	.word	0xfffaffff
 8009f0c:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d026      	beq.n	8009f66 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f18:	4bc7      	ldr	r3, [pc, #796]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	4bc6      	ldr	r3, [pc, #792]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f1e:	2180      	movs	r1, #128	@ 0x80
 8009f20:	0049      	lsls	r1, r1, #1
 8009f22:	430a      	orrs	r2, r1
 8009f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f26:	f7fb fd97 	bl	8005a58 <HAL_GetTick>
 8009f2a:	0003      	movs	r3, r0
 8009f2c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009f30:	f7fb fd92 	bl	8005a58 <HAL_GetTick>
 8009f34:	0002      	movs	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e25d      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f42:	4bbd      	ldr	r3, [pc, #756]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	2380      	movs	r3, #128	@ 0x80
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	d0f0      	beq.n	8009f30 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f4e:	4bba      	ldr	r3, [pc, #744]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	4aba      	ldr	r2, [pc, #744]	@ (800a23c <HAL_RCC_OscConfig+0x678>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	0019      	movs	r1, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	061a      	lsls	r2, r3, #24
 8009f5e:	4bb6      	ldr	r3, [pc, #728]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f60:	430a      	orrs	r2, r1
 8009f62:	605a      	str	r2, [r3, #4]
 8009f64:	e019      	b.n	8009f9a <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f66:	4bb4      	ldr	r3, [pc, #720]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	4bb3      	ldr	r3, [pc, #716]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f6c:	49b4      	ldr	r1, [pc, #720]	@ (800a240 <HAL_RCC_OscConfig+0x67c>)
 8009f6e:	400a      	ands	r2, r1
 8009f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f72:	f7fb fd71 	bl	8005a58 <HAL_GetTick>
 8009f76:	0003      	movs	r3, r0
 8009f78:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f7a:	e008      	b.n	8009f8e <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009f7c:	f7fb fd6c 	bl	8005a58 <HAL_GetTick>
 8009f80:	0002      	movs	r2, r0
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d901      	bls.n	8009f8e <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e237      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f8e:	4baa      	ldr	r3, [pc, #680]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	2380      	movs	r3, #128	@ 0x80
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	4013      	ands	r3, r2
 8009f98:	d1f0      	bne.n	8009f7c <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	d051      	beq.n	800a048 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d031      	beq.n	800a010 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d108      	bne.n	8009fc6 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8009fb4:	4aa0      	ldr	r2, [pc, #640]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009fb6:	2394      	movs	r3, #148	@ 0x94
 8009fb8:	58d3      	ldr	r3, [r2, r3]
 8009fba:	499f      	ldr	r1, [pc, #636]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009fbc:	2204      	movs	r2, #4
 8009fbe:	4393      	bics	r3, r2
 8009fc0:	2294      	movs	r2, #148	@ 0x94
 8009fc2:	508b      	str	r3, [r1, r2]
 8009fc4:	e007      	b.n	8009fd6 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8009fc6:	4a9c      	ldr	r2, [pc, #624]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009fc8:	2394      	movs	r3, #148	@ 0x94
 8009fca:	58d3      	ldr	r3, [r2, r3]
 8009fcc:	499a      	ldr	r1, [pc, #616]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009fce:	2204      	movs	r2, #4
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	2294      	movs	r2, #148	@ 0x94
 8009fd4:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fd6:	4a98      	ldr	r2, [pc, #608]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009fd8:	2394      	movs	r3, #148	@ 0x94
 8009fda:	58d3      	ldr	r3, [r2, r3]
 8009fdc:	4996      	ldr	r1, [pc, #600]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	2294      	movs	r2, #148	@ 0x94
 8009fe4:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fe6:	f7fb fd37 	bl	8005a58 <HAL_GetTick>
 8009fea:	0003      	movs	r3, r0
 8009fec:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ff0:	f7fb fd32 	bl	8005a58 <HAL_GetTick>
 8009ff4:	0002      	movs	r2, r0
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b11      	cmp	r3, #17
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e1fd      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a002:	4a8d      	ldr	r2, [pc, #564]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a004:	2394      	movs	r3, #148	@ 0x94
 800a006:	58d3      	ldr	r3, [r2, r3]
 800a008:	2202      	movs	r2, #2
 800a00a:	4013      	ands	r3, r2
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x42c>
 800a00e:	e01b      	b.n	800a048 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a010:	4a89      	ldr	r2, [pc, #548]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a012:	2394      	movs	r3, #148	@ 0x94
 800a014:	58d3      	ldr	r3, [r2, r3]
 800a016:	4988      	ldr	r1, [pc, #544]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a018:	2201      	movs	r2, #1
 800a01a:	4393      	bics	r3, r2
 800a01c:	2294      	movs	r2, #148	@ 0x94
 800a01e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a020:	f7fb fd1a 	bl	8005a58 <HAL_GetTick>
 800a024:	0003      	movs	r3, r0
 800a026:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a028:	e008      	b.n	800a03c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a02a:	f7fb fd15 	bl	8005a58 <HAL_GetTick>
 800a02e:	0002      	movs	r2, r0
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b11      	cmp	r3, #17
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e1e0      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a03c:	4a7e      	ldr	r2, [pc, #504]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a03e:	2394      	movs	r3, #148	@ 0x94
 800a040:	58d3      	ldr	r3, [r2, r3]
 800a042:	2202      	movs	r2, #2
 800a044:	4013      	ands	r3, r2
 800a046:	d1f0      	bne.n	800a02a <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2204      	movs	r2, #4
 800a04e:	4013      	ands	r3, r2
 800a050:	d100      	bne.n	800a054 <HAL_RCC_OscConfig+0x490>
 800a052:	e10d      	b.n	800a270 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a054:	201f      	movs	r0, #31
 800a056:	183b      	adds	r3, r7, r0
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 800a05c:	4b76      	ldr	r3, [pc, #472]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a05e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a060:	2380      	movs	r3, #128	@ 0x80
 800a062:	055b      	lsls	r3, r3, #21
 800a064:	4013      	ands	r3, r2
 800a066:	d110      	bne.n	800a08a <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a068:	4b73      	ldr	r3, [pc, #460]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a06a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a06c:	4b72      	ldr	r3, [pc, #456]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a06e:	2180      	movs	r1, #128	@ 0x80
 800a070:	0549      	lsls	r1, r1, #21
 800a072:	430a      	orrs	r2, r1
 800a074:	659a      	str	r2, [r3, #88]	@ 0x58
 800a076:	4b70      	ldr	r3, [pc, #448]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a078:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a07a:	2380      	movs	r3, #128	@ 0x80
 800a07c:	055b      	lsls	r3, r3, #21
 800a07e:	4013      	ands	r3, r2
 800a080:	60bb      	str	r3, [r7, #8]
 800a082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a084:	183b      	adds	r3, r7, r0
 800a086:	2201      	movs	r2, #1
 800a088:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a08a:	4b6e      	ldr	r3, [pc, #440]	@ (800a244 <HAL_RCC_OscConfig+0x680>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	2380      	movs	r3, #128	@ 0x80
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	4013      	ands	r3, r2
 800a094:	d11a      	bne.n	800a0cc <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a096:	4b6b      	ldr	r3, [pc, #428]	@ (800a244 <HAL_RCC_OscConfig+0x680>)
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	4b6a      	ldr	r3, [pc, #424]	@ (800a244 <HAL_RCC_OscConfig+0x680>)
 800a09c:	2180      	movs	r1, #128	@ 0x80
 800a09e:	0049      	lsls	r1, r1, #1
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0a4:	f7fb fcd8 	bl	8005a58 <HAL_GetTick>
 800a0a8:	0003      	movs	r3, r0
 800a0aa:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0ac:	e008      	b.n	800a0c0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0ae:	f7fb fcd3 	bl	8005a58 <HAL_GetTick>
 800a0b2:	0002      	movs	r2, r0
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d901      	bls.n	800a0c0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e19e      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0c0:	4b60      	ldr	r3, [pc, #384]	@ (800a244 <HAL_RCC_OscConfig+0x680>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	2380      	movs	r3, #128	@ 0x80
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	d0f0      	beq.n	800a0ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	d01e      	beq.n	800a114 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2204      	movs	r2, #4
 800a0dc:	4013      	ands	r3, r2
 800a0de:	d010      	beq.n	800a102 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a0e0:	4a55      	ldr	r2, [pc, #340]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a0e2:	2390      	movs	r3, #144	@ 0x90
 800a0e4:	58d3      	ldr	r3, [r2, r3]
 800a0e6:	4954      	ldr	r1, [pc, #336]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a0e8:	2204      	movs	r2, #4
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	2290      	movs	r2, #144	@ 0x90
 800a0ee:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0f0:	4a51      	ldr	r2, [pc, #324]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a0f2:	2390      	movs	r3, #144	@ 0x90
 800a0f4:	58d3      	ldr	r3, [r2, r3]
 800a0f6:	4950      	ldr	r1, [pc, #320]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	2290      	movs	r2, #144	@ 0x90
 800a0fe:	508b      	str	r3, [r1, r2]
 800a100:	e018      	b.n	800a134 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a102:	4a4d      	ldr	r2, [pc, #308]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a104:	2390      	movs	r3, #144	@ 0x90
 800a106:	58d3      	ldr	r3, [r2, r3]
 800a108:	494b      	ldr	r1, [pc, #300]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a10a:	2201      	movs	r2, #1
 800a10c:	4313      	orrs	r3, r2
 800a10e:	2290      	movs	r2, #144	@ 0x90
 800a110:	508b      	str	r3, [r1, r2]
 800a112:	e00f      	b.n	800a134 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a114:	4a48      	ldr	r2, [pc, #288]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a116:	2390      	movs	r3, #144	@ 0x90
 800a118:	58d3      	ldr	r3, [r2, r3]
 800a11a:	4947      	ldr	r1, [pc, #284]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	4393      	bics	r3, r2
 800a120:	2290      	movs	r2, #144	@ 0x90
 800a122:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a124:	4a44      	ldr	r2, [pc, #272]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a126:	2390      	movs	r3, #144	@ 0x90
 800a128:	58d3      	ldr	r3, [r2, r3]
 800a12a:	4943      	ldr	r1, [pc, #268]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a12c:	2204      	movs	r2, #4
 800a12e:	4393      	bics	r3, r2
 800a130:	2290      	movs	r2, #144	@ 0x90
 800a132:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d04f      	beq.n	800a1dc <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a13c:	f7fb fc8c 	bl	8005a58 <HAL_GetTick>
 800a140:	0003      	movs	r3, r0
 800a142:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a144:	e009      	b.n	800a15a <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a146:	f7fb fc87 	bl	8005a58 <HAL_GetTick>
 800a14a:	0002      	movs	r2, r0
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	4a3d      	ldr	r2, [pc, #244]	@ (800a248 <HAL_RCC_OscConfig+0x684>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d901      	bls.n	800a15a <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e151      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a15a:	4a37      	ldr	r2, [pc, #220]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a15c:	2390      	movs	r3, #144	@ 0x90
 800a15e:	58d3      	ldr	r3, [r2, r3]
 800a160:	2202      	movs	r2, #2
 800a162:	4013      	ands	r3, r2
 800a164:	d0ef      	beq.n	800a146 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	2280      	movs	r2, #128	@ 0x80
 800a16c:	4013      	ands	r3, r2
 800a16e:	d01a      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a170:	4a31      	ldr	r2, [pc, #196]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a172:	2390      	movs	r3, #144	@ 0x90
 800a174:	58d3      	ldr	r3, [r2, r3]
 800a176:	4930      	ldr	r1, [pc, #192]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a178:	2280      	movs	r2, #128	@ 0x80
 800a17a:	4313      	orrs	r3, r2
 800a17c:	2290      	movs	r2, #144	@ 0x90
 800a17e:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a180:	e009      	b.n	800a196 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a182:	f7fb fc69 	bl	8005a58 <HAL_GetTick>
 800a186:	0002      	movs	r2, r0
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	4a2e      	ldr	r2, [pc, #184]	@ (800a248 <HAL_RCC_OscConfig+0x684>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e133      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a196:	4a28      	ldr	r2, [pc, #160]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a198:	2390      	movs	r3, #144	@ 0x90
 800a19a:	58d2      	ldr	r2, [r2, r3]
 800a19c:	2380      	movs	r3, #128	@ 0x80
 800a19e:	011b      	lsls	r3, r3, #4
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	d0ee      	beq.n	800a182 <HAL_RCC_OscConfig+0x5be>
 800a1a4:	e059      	b.n	800a25a <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a1a6:	4a24      	ldr	r2, [pc, #144]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a1a8:	2390      	movs	r3, #144	@ 0x90
 800a1aa:	58d3      	ldr	r3, [r2, r3]
 800a1ac:	4922      	ldr	r1, [pc, #136]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a1ae:	2280      	movs	r2, #128	@ 0x80
 800a1b0:	4393      	bics	r3, r2
 800a1b2:	2290      	movs	r2, #144	@ 0x90
 800a1b4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1b6:	e009      	b.n	800a1cc <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1b8:	f7fb fc4e 	bl	8005a58 <HAL_GetTick>
 800a1bc:	0002      	movs	r2, r0
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	4a21      	ldr	r2, [pc, #132]	@ (800a248 <HAL_RCC_OscConfig+0x684>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d901      	bls.n	800a1cc <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e118      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1cc:	4a1a      	ldr	r2, [pc, #104]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a1ce:	2390      	movs	r3, #144	@ 0x90
 800a1d0:	58d2      	ldr	r2, [r2, r3]
 800a1d2:	2380      	movs	r3, #128	@ 0x80
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	d1ee      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x5f4>
 800a1da:	e03e      	b.n	800a25a <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1dc:	f7fb fc3c 	bl	8005a58 <HAL_GetTick>
 800a1e0:	0003      	movs	r3, r0
 800a1e2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1e4:	e009      	b.n	800a1fa <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1e6:	f7fb fc37 	bl	8005a58 <HAL_GetTick>
 800a1ea:	0002      	movs	r2, r0
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	4a15      	ldr	r2, [pc, #84]	@ (800a248 <HAL_RCC_OscConfig+0x684>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e101      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1fa:	4a0f      	ldr	r2, [pc, #60]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a1fc:	2390      	movs	r3, #144	@ 0x90
 800a1fe:	58d3      	ldr	r3, [r2, r3]
 800a200:	2202      	movs	r2, #2
 800a202:	4013      	ands	r3, r2
 800a204:	d1ef      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a206:	4a0c      	ldr	r2, [pc, #48]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a208:	2390      	movs	r3, #144	@ 0x90
 800a20a:	58d3      	ldr	r3, [r2, r3]
 800a20c:	2280      	movs	r2, #128	@ 0x80
 800a20e:	4013      	ands	r3, r2
 800a210:	d023      	beq.n	800a25a <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a212:	4a09      	ldr	r2, [pc, #36]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a214:	2390      	movs	r3, #144	@ 0x90
 800a216:	58d3      	ldr	r3, [r2, r3]
 800a218:	4907      	ldr	r1, [pc, #28]	@ (800a238 <HAL_RCC_OscConfig+0x674>)
 800a21a:	2280      	movs	r2, #128	@ 0x80
 800a21c:	4393      	bics	r3, r2
 800a21e:	2290      	movs	r2, #144	@ 0x90
 800a220:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a222:	e013      	b.n	800a24c <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a224:	f7fb fc18 	bl	8005a58 <HAL_GetTick>
 800a228:	0002      	movs	r2, r0
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	4a06      	ldr	r2, [pc, #24]	@ (800a248 <HAL_RCC_OscConfig+0x684>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d90b      	bls.n	800a24c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e0e2      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
 800a238:	40021000 	.word	0x40021000
 800a23c:	80ffffff 	.word	0x80ffffff
 800a240:	fffffeff 	.word	0xfffffeff
 800a244:	40007000 	.word	0x40007000
 800a248:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a24c:	4a6e      	ldr	r2, [pc, #440]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a24e:	2390      	movs	r3, #144	@ 0x90
 800a250:	58d2      	ldr	r2, [r2, r3]
 800a252:	2380      	movs	r3, #128	@ 0x80
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	4013      	ands	r3, r2
 800a258:	d1e4      	bne.n	800a224 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a25a:	231f      	movs	r3, #31
 800a25c:	18fb      	adds	r3, r7, r3
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d105      	bne.n	800a270 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a264:	4b68      	ldr	r3, [pc, #416]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a266:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a268:	4b67      	ldr	r3, [pc, #412]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a26a:	4968      	ldr	r1, [pc, #416]	@ (800a40c <HAL_RCC_OscConfig+0x848>)
 800a26c:	400a      	ands	r2, r1
 800a26e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2220      	movs	r2, #32
 800a276:	4013      	ands	r3, r2
 800a278:	d03c      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01c      	beq.n	800a2bc <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a282:	4a61      	ldr	r2, [pc, #388]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a284:	2398      	movs	r3, #152	@ 0x98
 800a286:	58d3      	ldr	r3, [r2, r3]
 800a288:	495f      	ldr	r1, [pc, #380]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	4313      	orrs	r3, r2
 800a28e:	2298      	movs	r2, #152	@ 0x98
 800a290:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a292:	f7fb fbe1 	bl	8005a58 <HAL_GetTick>
 800a296:	0003      	movs	r3, r0
 800a298:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a29c:	f7fb fbdc 	bl	8005a58 <HAL_GetTick>
 800a2a0:	0002      	movs	r2, r0
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e0a7      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a2ae:	4a56      	ldr	r2, [pc, #344]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a2b0:	2398      	movs	r3, #152	@ 0x98
 800a2b2:	58d3      	ldr	r3, [r2, r3]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	d0f0      	beq.n	800a29c <HAL_RCC_OscConfig+0x6d8>
 800a2ba:	e01b      	b.n	800a2f4 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2bc:	4a52      	ldr	r2, [pc, #328]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a2be:	2398      	movs	r3, #152	@ 0x98
 800a2c0:	58d3      	ldr	r3, [r2, r3]
 800a2c2:	4951      	ldr	r1, [pc, #324]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	4393      	bics	r3, r2
 800a2c8:	2298      	movs	r2, #152	@ 0x98
 800a2ca:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2cc:	f7fb fbc4 	bl	8005a58 <HAL_GetTick>
 800a2d0:	0003      	movs	r3, r0
 800a2d2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 800a2d4:	e008      	b.n	800a2e8 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2d6:	f7fb fbbf 	bl	8005a58 <HAL_GetTick>
 800a2da:	0002      	movs	r2, r0
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d901      	bls.n	800a2e8 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e08a      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 800a2e8:	4a47      	ldr	r2, [pc, #284]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a2ea:	2398      	movs	r3, #152	@ 0x98
 800a2ec:	58d3      	ldr	r3, [r2, r3]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	d1f0      	bne.n	800a2d6 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d100      	bne.n	800a2fe <HAL_RCC_OscConfig+0x73a>
 800a2fc:	e07e      	b.n	800a3fc <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2fe:	4b42      	ldr	r3, [pc, #264]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	2238      	movs	r2, #56	@ 0x38
 800a304:	4013      	ands	r3, r2
 800a306:	2b18      	cmp	r3, #24
 800a308:	d100      	bne.n	800a30c <HAL_RCC_OscConfig+0x748>
 800a30a:	e075      	b.n	800a3f8 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a310:	2b02      	cmp	r3, #2
 800a312:	d156      	bne.n	800a3c2 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a314:	4b3c      	ldr	r3, [pc, #240]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	4b3b      	ldr	r3, [pc, #236]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a31a:	493d      	ldr	r1, [pc, #244]	@ (800a410 <HAL_RCC_OscConfig+0x84c>)
 800a31c:	400a      	ands	r2, r1
 800a31e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a320:	f7fb fb9a 	bl	8005a58 <HAL_GetTick>
 800a324:	0003      	movs	r3, r0
 800a326:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a328:	e008      	b.n	800a33c <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a32a:	f7fb fb95 	bl	8005a58 <HAL_GetTick>
 800a32e:	0002      	movs	r2, r0
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d901      	bls.n	800a33c <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e060      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a33c:	4b32      	ldr	r3, [pc, #200]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	2380      	movs	r3, #128	@ 0x80
 800a342:	049b      	lsls	r3, r3, #18
 800a344:	4013      	ands	r3, r2
 800a346:	d1f0      	bne.n	800a32a <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a348:	4b2f      	ldr	r3, [pc, #188]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	4a31      	ldr	r2, [pc, #196]	@ (800a414 <HAL_RCC_OscConfig+0x850>)
 800a34e:	4013      	ands	r3, r2
 800a350:	0019      	movs	r1, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	431a      	orrs	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a368:	431a      	orrs	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a374:	431a      	orrs	r2, r3
 800a376:	4b24      	ldr	r3, [pc, #144]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a378:	430a      	orrs	r2, r1
 800a37a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 800a37c:	4b22      	ldr	r3, [pc, #136]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	4b21      	ldr	r3, [pc, #132]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a382:	2180      	movs	r1, #128	@ 0x80
 800a384:	0549      	lsls	r1, r1, #21
 800a386:	430a      	orrs	r2, r1
 800a388:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a38a:	4b1f      	ldr	r3, [pc, #124]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	4b1e      	ldr	r3, [pc, #120]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a390:	2180      	movs	r1, #128	@ 0x80
 800a392:	0449      	lsls	r1, r1, #17
 800a394:	430a      	orrs	r2, r1
 800a396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a398:	f7fb fb5e 	bl	8005a58 <HAL_GetTick>
 800a39c:	0003      	movs	r3, r0
 800a39e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3a2:	f7fb fb59 	bl	8005a58 <HAL_GetTick>
 800a3a6:	0002      	movs	r2, r0
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e024      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3b4:	4b14      	ldr	r3, [pc, #80]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	2380      	movs	r3, #128	@ 0x80
 800a3ba:	049b      	lsls	r3, r3, #18
 800a3bc:	4013      	ands	r3, r2
 800a3be:	d0f0      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x7de>
 800a3c0:	e01c      	b.n	800a3fc <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3c2:	4b11      	ldr	r3, [pc, #68]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	4b10      	ldr	r3, [pc, #64]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a3c8:	4911      	ldr	r1, [pc, #68]	@ (800a410 <HAL_RCC_OscConfig+0x84c>)
 800a3ca:	400a      	ands	r2, r1
 800a3cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ce:	f7fb fb43 	bl	8005a58 <HAL_GetTick>
 800a3d2:	0003      	movs	r3, r0
 800a3d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3d6:	e008      	b.n	800a3ea <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3d8:	f7fb fb3e 	bl	8005a58 <HAL_GetTick>
 800a3dc:	0002      	movs	r2, r0
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d901      	bls.n	800a3ea <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e009      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3ea:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <HAL_RCC_OscConfig+0x844>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	2380      	movs	r3, #128	@ 0x80
 800a3f0:	049b      	lsls	r3, r3, #18
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	d1f0      	bne.n	800a3d8 <HAL_RCC_OscConfig+0x814>
 800a3f6:	e001      	b.n	800a3fc <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	0018      	movs	r0, r3
 800a400:	46bd      	mov	sp, r7
 800a402:	b008      	add	sp, #32
 800a404:	bdb0      	pop	{r4, r5, r7, pc}
 800a406:	46c0      	nop			@ (mov r8, r8)
 800a408:	40021000 	.word	0x40021000
 800a40c:	efffffff 	.word	0xefffffff
 800a410:	feffffff 	.word	0xfeffffff
 800a414:	11c1808c 	.word	0x11c1808c

0800a418 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 800a418:	b5b0      	push	{r4, r5, r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a422:	4b6c      	ldr	r3, [pc, #432]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2207      	movs	r2, #7
 800a428:	4013      	ands	r3, r2
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d911      	bls.n	800a454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a430:	4b68      	ldr	r3, [pc, #416]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2207      	movs	r2, #7
 800a436:	4393      	bics	r3, r2
 800a438:	0019      	movs	r1, r3
 800a43a:	4b66      	ldr	r3, [pc, #408]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a442:	4b64      	ldr	r3, [pc, #400]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2207      	movs	r2, #7
 800a448:	4013      	ands	r3, r2
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d001      	beq.n	800a454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e0bb      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2201      	movs	r2, #1
 800a45a:	4013      	ands	r3, r2
 800a45c:	d100      	bne.n	800a460 <HAL_RCC_ClockConfig+0x48>
 800a45e:	e064      	b.n	800a52a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	2b03      	cmp	r3, #3
 800a466:	d107      	bne.n	800a478 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a468:	4b5b      	ldr	r3, [pc, #364]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	2380      	movs	r3, #128	@ 0x80
 800a46e:	049b      	lsls	r3, r3, #18
 800a470:	4013      	ands	r3, r2
 800a472:	d138      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e0a9      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d107      	bne.n	800a490 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a480:	4b55      	ldr	r3, [pc, #340]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	2380      	movs	r3, #128	@ 0x80
 800a486:	029b      	lsls	r3, r3, #10
 800a488:	4013      	ands	r3, r2
 800a48a:	d12c      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e09d      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a498:	4b4f      	ldr	r3, [pc, #316]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2202      	movs	r2, #2
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d121      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e092      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d107      	bne.n	800a4be <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4ae:	4b4a      	ldr	r3, [pc, #296]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	2380      	movs	r3, #128	@ 0x80
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	d115      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e086      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d107      	bne.n	800a4d6 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a4c6:	4a44      	ldr	r2, [pc, #272]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a4c8:	2394      	movs	r3, #148	@ 0x94
 800a4ca:	58d3      	ldr	r3, [r2, r3]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	d109      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e07a      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4d6:	4a40      	ldr	r2, [pc, #256]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a4d8:	2390      	movs	r3, #144	@ 0x90
 800a4da:	58d3      	ldr	r3, [r2, r3]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	4013      	ands	r3, r2
 800a4e0:	d101      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e072      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4e6:	4b3c      	ldr	r3, [pc, #240]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	2207      	movs	r2, #7
 800a4ec:	4393      	bics	r3, r2
 800a4ee:	0019      	movs	r1, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	4b38      	ldr	r3, [pc, #224]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a4fa:	f7fb faad 	bl	8005a58 <HAL_GetTick>
 800a4fe:	0003      	movs	r3, r0
 800a500:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a502:	e009      	b.n	800a518 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a504:	f7fb faa8 	bl	8005a58 <HAL_GetTick>
 800a508:	0002      	movs	r2, r0
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	4a33      	ldr	r2, [pc, #204]	@ (800a5dc <HAL_RCC_ClockConfig+0x1c4>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d901      	bls.n	800a518 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	e059      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a518:	4b2f      	ldr	r3, [pc, #188]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	2238      	movs	r2, #56	@ 0x38
 800a51e:	401a      	ands	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	429a      	cmp	r2, r3
 800a528:	d1ec      	bne.n	800a504 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2202      	movs	r2, #2
 800a530:	4013      	ands	r3, r2
 800a532:	d009      	beq.n	800a548 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a534:	4b28      	ldr	r3, [pc, #160]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	4a29      	ldr	r2, [pc, #164]	@ (800a5e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a53a:	4013      	ands	r3, r2
 800a53c:	0019      	movs	r1, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	4b25      	ldr	r3, [pc, #148]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a544:	430a      	orrs	r2, r1
 800a546:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a548:	4b22      	ldr	r3, [pc, #136]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2207      	movs	r2, #7
 800a54e:	4013      	ands	r3, r2
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d211      	bcs.n	800a57a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a556:	4b1f      	ldr	r3, [pc, #124]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2207      	movs	r2, #7
 800a55c:	4393      	bics	r3, r2
 800a55e:	0019      	movs	r1, r3
 800a560:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a568:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2207      	movs	r2, #7
 800a56e:	4013      	ands	r3, r2
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	429a      	cmp	r2, r3
 800a574:	d001      	beq.n	800a57a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e028      	b.n	800a5cc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2204      	movs	r2, #4
 800a580:	4013      	ands	r3, r2
 800a582:	d009      	beq.n	800a598 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a584:	4b14      	ldr	r3, [pc, #80]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	4a16      	ldr	r2, [pc, #88]	@ (800a5e4 <HAL_RCC_ClockConfig+0x1cc>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	0019      	movs	r1, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	4b11      	ldr	r3, [pc, #68]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a594:	430a      	orrs	r2, r1
 800a596:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800a598:	f000 f82a 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800a59c:	0001      	movs	r1, r0
 800a59e:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a5a0:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a5a2:	0a1b      	lsrs	r3, r3, #8
 800a5a4:	220f      	movs	r2, #15
 800a5a6:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800a5a8:	4a0f      	ldr	r2, [pc, #60]	@ (800a5e8 <HAL_RCC_ClockConfig+0x1d0>)
 800a5aa:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a5ac:	001a      	movs	r2, r3
 800a5ae:	231f      	movs	r3, #31
 800a5b0:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800a5b2:	000a      	movs	r2, r1
 800a5b4:	40da      	lsrs	r2, r3
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <HAL_RCC_ClockConfig+0x1d4>)
 800a5b8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800a5ba:	250b      	movs	r5, #11
 800a5bc:	197c      	adds	r4, r7, r5
 800a5be:	2003      	movs	r0, #3
 800a5c0:	f7fb f9f0 	bl	80059a4 <HAL_InitTick>
 800a5c4:	0003      	movs	r3, r0
 800a5c6:	7023      	strb	r3, [r4, #0]

  return halstatus;
 800a5c8:	197b      	adds	r3, r7, r5
 800a5ca:	781b      	ldrb	r3, [r3, #0]
}
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b004      	add	sp, #16
 800a5d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5d4:	40022000 	.word	0x40022000
 800a5d8:	40021000 	.word	0x40021000
 800a5dc:	00001388 	.word	0x00001388
 800a5e0:	fffff0ff 	.word	0xfffff0ff
 800a5e4:	ffff8fff 	.word	0xffff8fff
 800a5e8:	080120c0 	.word	0x080120c0
 800a5ec:	20000004 	.word	0x20000004

0800a5f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08a      	sub	sp, #40	@ 0x28
 800a5f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5fe:	4b46      	ldr	r3, [pc, #280]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	2238      	movs	r2, #56	@ 0x38
 800a604:	4013      	ands	r3, r2
 800a606:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a608:	4b43      	ldr	r3, [pc, #268]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	2203      	movs	r2, #3
 800a60e:	4013      	ands	r3, r2
 800a610:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d005      	beq.n	800a624 <HAL_RCC_GetSysClockFreq+0x34>
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	2b18      	cmp	r3, #24
 800a61c:	d125      	bne.n	800a66a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d122      	bne.n	800a66a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a624:	4b3c      	ldr	r3, [pc, #240]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2208      	movs	r2, #8
 800a62a:	4013      	ands	r3, r2
 800a62c:	d107      	bne.n	800a63e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800a62e:	4a3a      	ldr	r2, [pc, #232]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a630:	2394      	movs	r3, #148	@ 0x94
 800a632:	58d3      	ldr	r3, [r2, r3]
 800a634:	0a1b      	lsrs	r3, r3, #8
 800a636:	220f      	movs	r2, #15
 800a638:	4013      	ands	r3, r2
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a63c:	e005      	b.n	800a64a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a63e:	4b36      	ldr	r3, [pc, #216]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	091b      	lsrs	r3, r3, #4
 800a644:	220f      	movs	r2, #15
 800a646:	4013      	ands	r3, r2
 800a648:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64c:	2b0b      	cmp	r3, #11
 800a64e:	d901      	bls.n	800a654 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 800a654:	4b31      	ldr	r3, [pc, #196]	@ (800a71c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a658:	0092      	lsls	r2, r2, #2
 800a65a:	58d3      	ldr	r3, [r2, r3]
 800a65c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d11b      	bne.n	800a69c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a668:	e018      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	2b08      	cmp	r3, #8
 800a66e:	d102      	bne.n	800a676 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a670:	4b2b      	ldr	r3, [pc, #172]	@ (800a720 <HAL_RCC_GetSysClockFreq+0x130>)
 800a672:	623b      	str	r3, [r7, #32]
 800a674:	e012      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	2b10      	cmp	r3, #16
 800a67a:	d102      	bne.n	800a682 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a67c:	4b29      	ldr	r3, [pc, #164]	@ (800a724 <HAL_RCC_GetSysClockFreq+0x134>)
 800a67e:	623b      	str	r3, [r7, #32]
 800a680:	e00c      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	2b20      	cmp	r3, #32
 800a686:	d103      	bne.n	800a690 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a688:	23fa      	movs	r3, #250	@ 0xfa
 800a68a:	01db      	lsls	r3, r3, #7
 800a68c:	623b      	str	r3, [r7, #32]
 800a68e:	e005      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	2b28      	cmp	r3, #40	@ 0x28
 800a694:	d102      	bne.n	800a69c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a696:	2380      	movs	r3, #128	@ 0x80
 800a698:	021b      	lsls	r3, r3, #8
 800a69a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b18      	cmp	r3, #24
 800a6a0:	d135      	bne.n	800a70e <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	091b      	lsrs	r3, r3, #4
 800a6b2:	2207      	movs	r2, #7
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d003      	beq.n	800a6c8 <HAL_RCC_GetSysClockFreq+0xd8>
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d003      	beq.n	800a6ce <HAL_RCC_GetSysClockFreq+0xde>
 800a6c6:	e005      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 800a6c8:	4b15      	ldr	r3, [pc, #84]	@ (800a720 <HAL_RCC_GetSysClockFreq+0x130>)
 800a6ca:	61fb      	str	r3, [r7, #28]
        break;
 800a6cc:	e005      	b.n	800a6da <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 800a6ce:	4b15      	ldr	r3, [pc, #84]	@ (800a724 <HAL_RCC_GetSysClockFreq+0x134>)
 800a6d0:	61fb      	str	r3, [r7, #28]
        break;
 800a6d2:	e002      	b.n	800a6da <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	61fb      	str	r3, [r7, #28]
        break;
 800a6d8:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800a6da:	4b0f      	ldr	r3, [pc, #60]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	0a1b      	lsrs	r3, r3, #8
 800a6e0:	227f      	movs	r2, #127	@ 0x7f
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	69fa      	ldr	r2, [r7, #28]
 800a6e6:	4353      	muls	r3, r2
 800a6e8:	68f9      	ldr	r1, [r7, #12]
 800a6ea:	0018      	movs	r0, r3
 800a6ec:	f7f5 fd28 	bl	8000140 <__udivsi3>
 800a6f0:	0003      	movs	r3, r0
 800a6f2:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a6f4:	4b08      	ldr	r3, [pc, #32]	@ (800a718 <HAL_RCC_GetSysClockFreq+0x128>)
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	0f5b      	lsrs	r3, r3, #29
 800a6fa:	2207      	movs	r2, #7
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	3301      	adds	r3, #1
 800a700:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	68b8      	ldr	r0, [r7, #8]
 800a706:	f7f5 fd1b 	bl	8000140 <__udivsi3>
 800a70a:	0003      	movs	r3, r0
 800a70c:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a70e:	6a3b      	ldr	r3, [r7, #32]
}
 800a710:	0018      	movs	r0, r3
 800a712:	46bd      	mov	sp, r7
 800a714:	b00a      	add	sp, #40	@ 0x28
 800a716:	bd80      	pop	{r7, pc}
 800a718:	40021000 	.word	0x40021000
 800a71c:	080120d8 	.word	0x080120d8
 800a720:	00f42400 	.word	0x00f42400
 800a724:	003d0900 	.word	0x003d0900

0800a728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a72c:	4b02      	ldr	r3, [pc, #8]	@ (800a738 <HAL_RCC_GetHCLKFreq+0x10>)
 800a72e:	681b      	ldr	r3, [r3, #0]
}
 800a730:	0018      	movs	r0, r3
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	46c0      	nop			@ (mov r8, r8)
 800a738:	20000004 	.word	0x20000004

0800a73c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 800a740:	f7ff fff2 	bl	800a728 <HAL_RCC_GetHCLKFreq>
 800a744:	0001      	movs	r1, r0
 800a746:	4b07      	ldr	r3, [pc, #28]	@ (800a764 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	0b1b      	lsrs	r3, r3, #12
 800a74c:	2207      	movs	r2, #7
 800a74e:	4013      	ands	r3, r2
 800a750:	4a05      	ldr	r2, [pc, #20]	@ (800a768 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800a752:	5cd3      	ldrb	r3, [r2, r3]
 800a754:	001a      	movs	r2, r3
 800a756:	231f      	movs	r3, #31
 800a758:	4013      	ands	r3, r2
 800a75a:	40d9      	lsrs	r1, r3
 800a75c:	000b      	movs	r3, r1
}
 800a75e:	0018      	movs	r0, r3
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	40021000 	.word	0x40021000
 800a768:	080120d0 	.word	0x080120d0

0800a76c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a774:	2300      	movs	r3, #0
 800a776:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a778:	4b2f      	ldr	r3, [pc, #188]	@ (800a838 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800a77a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a77c:	2380      	movs	r3, #128	@ 0x80
 800a77e:	055b      	lsls	r3, r3, #21
 800a780:	4013      	ands	r3, r2
 800a782:	d004      	beq.n	800a78e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a784:	f7ff f9f6 	bl	8009b74 <HAL_PWREx_GetVoltageRange>
 800a788:	0003      	movs	r3, r0
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	e017      	b.n	800a7be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a78e:	4b2a      	ldr	r3, [pc, #168]	@ (800a838 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800a790:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a792:	4b29      	ldr	r3, [pc, #164]	@ (800a838 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800a794:	2180      	movs	r1, #128	@ 0x80
 800a796:	0549      	lsls	r1, r1, #21
 800a798:	430a      	orrs	r2, r1
 800a79a:	659a      	str	r2, [r3, #88]	@ 0x58
 800a79c:	4b26      	ldr	r3, [pc, #152]	@ (800a838 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800a79e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a7a0:	2380      	movs	r3, #128	@ 0x80
 800a7a2:	055b      	lsls	r3, r3, #21
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a7aa:	f7ff f9e3 	bl	8009b74 <HAL_PWREx_GetVoltageRange>
 800a7ae:	0003      	movs	r3, r0
 800a7b0:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a7b2:	4b21      	ldr	r3, [pc, #132]	@ (800a838 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800a7b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a7b6:	4b20      	ldr	r3, [pc, #128]	@ (800a838 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800a7b8:	4920      	ldr	r1, [pc, #128]	@ (800a83c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800a7ba:	400a      	ands	r2, r1
 800a7bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	2380      	movs	r3, #128	@ 0x80
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d111      	bne.n	800a7ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b80      	cmp	r3, #128	@ 0x80
 800a7cc:	d91c      	bls.n	800a808 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2bb0      	cmp	r3, #176	@ 0xb0
 800a7d2:	d902      	bls.n	800a7da <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	e016      	b.n	800a808 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b90      	cmp	r3, #144	@ 0x90
 800a7de:	d902      	bls.n	800a7e6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	613b      	str	r3, [r7, #16]
 800a7e4:	e010      	b.n	800a808 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	613b      	str	r3, [r7, #16]
 800a7ea:	e00d      	b.n	800a808 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7f0:	d902      	bls.n	800a7f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	613b      	str	r3, [r7, #16]
 800a7f6:	e007      	b.n	800a808 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b70      	cmp	r3, #112	@ 0x70
 800a7fc:	d102      	bne.n	800a804 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a7fe:	2301      	movs	r3, #1
 800a800:	613b      	str	r3, [r7, #16]
 800a802:	e001      	b.n	800a808 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a804:	2300      	movs	r3, #0
 800a806:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a808:	4b0d      	ldr	r3, [pc, #52]	@ (800a840 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2207      	movs	r2, #7
 800a80e:	4393      	bics	r3, r2
 800a810:	0019      	movs	r1, r3
 800a812:	4b0b      	ldr	r3, [pc, #44]	@ (800a840 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	430a      	orrs	r2, r1
 800a818:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a81a:	4b09      	ldr	r3, [pc, #36]	@ (800a840 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2207      	movs	r2, #7
 800a820:	4013      	ands	r3, r2
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	429a      	cmp	r2, r3
 800a826:	d001      	beq.n	800a82c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e000      	b.n	800a82e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	0018      	movs	r0, r3
 800a830:	46bd      	mov	sp, r7
 800a832:	b006      	add	sp, #24
 800a834:	bd80      	pop	{r7, pc}
 800a836:	46c0      	nop			@ (mov r8, r8)
 800a838:	40021000 	.word	0x40021000
 800a83c:	efffffff 	.word	0xefffffff
 800a840:	40022000 	.word	0x40022000

0800a844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a84c:	2313      	movs	r3, #19
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	2200      	movs	r2, #0
 800a852:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a854:	2312      	movs	r3, #18
 800a856:	18fb      	adds	r3, r7, r3
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	2380      	movs	r3, #128	@ 0x80
 800a862:	021b      	lsls	r3, r3, #8
 800a864:	4013      	ands	r3, r2
 800a866:	d100      	bne.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a868:	e0b7      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a86a:	2011      	movs	r0, #17
 800a86c:	183b      	adds	r3, r7, r0
 800a86e:	2200      	movs	r2, #0
 800a870:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a872:	4b4c      	ldr	r3, [pc, #304]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a876:	2380      	movs	r3, #128	@ 0x80
 800a878:	055b      	lsls	r3, r3, #21
 800a87a:	4013      	ands	r3, r2
 800a87c:	d110      	bne.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a87e:	4b49      	ldr	r3, [pc, #292]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a880:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a882:	4b48      	ldr	r3, [pc, #288]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a884:	2180      	movs	r1, #128	@ 0x80
 800a886:	0549      	lsls	r1, r1, #21
 800a888:	430a      	orrs	r2, r1
 800a88a:	659a      	str	r2, [r3, #88]	@ 0x58
 800a88c:	4b45      	ldr	r3, [pc, #276]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a88e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a890:	2380      	movs	r3, #128	@ 0x80
 800a892:	055b      	lsls	r3, r3, #21
 800a894:	4013      	ands	r3, r2
 800a896:	60bb      	str	r3, [r7, #8]
 800a898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a89a:	183b      	adds	r3, r7, r0
 800a89c:	2201      	movs	r2, #1
 800a89e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8a0:	4b41      	ldr	r3, [pc, #260]	@ (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b40      	ldr	r3, [pc, #256]	@ (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a8a6:	2180      	movs	r1, #128	@ 0x80
 800a8a8:	0049      	lsls	r1, r1, #1
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8ae:	f7fb f8d3 	bl	8005a58 <HAL_GetTick>
 800a8b2:	0003      	movs	r3, r0
 800a8b4:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a8b6:	e00b      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8b8:	f7fb f8ce 	bl	8005a58 <HAL_GetTick>
 800a8bc:	0002      	movs	r2, r0
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d904      	bls.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a8c6:	2313      	movs	r3, #19
 800a8c8:	18fb      	adds	r3, r7, r3
 800a8ca:	2203      	movs	r2, #3
 800a8cc:	701a      	strb	r2, [r3, #0]
        break;
 800a8ce:	e005      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a8d0:	4b35      	ldr	r3, [pc, #212]	@ (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	2380      	movs	r3, #128	@ 0x80
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	4013      	ands	r3, r2
 800a8da:	d0ed      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a8dc:	2313      	movs	r3, #19
 800a8de:	18fb      	adds	r3, r7, r3
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d168      	bne.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a8e6:	4a2f      	ldr	r2, [pc, #188]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8e8:	2390      	movs	r3, #144	@ 0x90
 800a8ea:	58d2      	ldr	r2, [r2, r3]
 800a8ec:	23c0      	movs	r3, #192	@ 0xc0
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d01f      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	429a      	cmp	r2, r3
 800a902:	d01a      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a904:	4a27      	ldr	r2, [pc, #156]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a906:	2390      	movs	r3, #144	@ 0x90
 800a908:	58d3      	ldr	r3, [r2, r3]
 800a90a:	4a28      	ldr	r2, [pc, #160]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a910:	4a24      	ldr	r2, [pc, #144]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a912:	2390      	movs	r3, #144	@ 0x90
 800a914:	58d3      	ldr	r3, [r2, r3]
 800a916:	4923      	ldr	r1, [pc, #140]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a918:	2280      	movs	r2, #128	@ 0x80
 800a91a:	0252      	lsls	r2, r2, #9
 800a91c:	4313      	orrs	r3, r2
 800a91e:	2290      	movs	r2, #144	@ 0x90
 800a920:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a922:	4a20      	ldr	r2, [pc, #128]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a924:	2390      	movs	r3, #144	@ 0x90
 800a926:	58d3      	ldr	r3, [r2, r3]
 800a928:	491e      	ldr	r1, [pc, #120]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a92a:	4a21      	ldr	r2, [pc, #132]	@ (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800a92c:	4013      	ands	r3, r2
 800a92e:	2290      	movs	r2, #144	@ 0x90
 800a930:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a932:	491c      	ldr	r1, [pc, #112]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a934:	2290      	movs	r2, #144	@ 0x90
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2201      	movs	r2, #1
 800a93e:	4013      	ands	r3, r2
 800a940:	d017      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a942:	f7fb f889 	bl	8005a58 <HAL_GetTick>
 800a946:	0003      	movs	r3, r0
 800a948:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a94a:	e00c      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a94c:	f7fb f884 	bl	8005a58 <HAL_GetTick>
 800a950:	0002      	movs	r2, r0
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	4a17      	ldr	r2, [pc, #92]	@ (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d904      	bls.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 800a95c:	2313      	movs	r3, #19
 800a95e:	18fb      	adds	r3, r7, r3
 800a960:	2203      	movs	r2, #3
 800a962:	701a      	strb	r2, [r3, #0]
            break;
 800a964:	e005      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a966:	4a0f      	ldr	r2, [pc, #60]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a968:	2390      	movs	r3, #144	@ 0x90
 800a96a:	58d3      	ldr	r3, [r2, r3]
 800a96c:	2202      	movs	r2, #2
 800a96e:	4013      	ands	r3, r2
 800a970:	d0ec      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 800a972:	2313      	movs	r3, #19
 800a974:	18fb      	adds	r3, r7, r3
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10b      	bne.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a97c:	4a09      	ldr	r2, [pc, #36]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a97e:	2390      	movs	r3, #144	@ 0x90
 800a980:	58d3      	ldr	r3, [r2, r3]
 800a982:	4a0a      	ldr	r2, [pc, #40]	@ (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a984:	401a      	ands	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98a:	4906      	ldr	r1, [pc, #24]	@ (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a98c:	4313      	orrs	r3, r2
 800a98e:	2290      	movs	r2, #144	@ 0x90
 800a990:	508b      	str	r3, [r1, r2]
 800a992:	e017      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a994:	2312      	movs	r3, #18
 800a996:	18fb      	adds	r3, r7, r3
 800a998:	2213      	movs	r2, #19
 800a99a:	18ba      	adds	r2, r7, r2
 800a99c:	7812      	ldrb	r2, [r2, #0]
 800a99e:	701a      	strb	r2, [r3, #0]
 800a9a0:	e010      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	40021000 	.word	0x40021000
 800a9a8:	40007000 	.word	0x40007000
 800a9ac:	fffffcff 	.word	0xfffffcff
 800a9b0:	fffeffff 	.word	0xfffeffff
 800a9b4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b8:	2312      	movs	r3, #18
 800a9ba:	18fb      	adds	r3, r7, r3
 800a9bc:	2213      	movs	r2, #19
 800a9be:	18ba      	adds	r2, r7, r2
 800a9c0:	7812      	ldrb	r2, [r2, #0]
 800a9c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a9c4:	2311      	movs	r3, #17
 800a9c6:	18fb      	adds	r3, r7, r3
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d105      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9ce:	4ba4      	ldr	r3, [pc, #656]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800a9d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a9d2:	4ba3      	ldr	r3, [pc, #652]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800a9d4:	49a3      	ldr	r1, [pc, #652]	@ (800ac64 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800a9d6:	400a      	ands	r2, r1
 800a9d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	d00b      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a9e4:	4a9e      	ldr	r2, [pc, #632]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800a9e6:	2388      	movs	r3, #136	@ 0x88
 800a9e8:	58d3      	ldr	r3, [r2, r3]
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	4393      	bics	r3, r2
 800a9ee:	001a      	movs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	499a      	ldr	r1, [pc, #616]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	2288      	movs	r2, #136	@ 0x88
 800a9fa:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2202      	movs	r2, #2
 800aa02:	4013      	ands	r3, r2
 800aa04:	d00b      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa06:	4a96      	ldr	r2, [pc, #600]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa08:	2388      	movs	r3, #136	@ 0x88
 800aa0a:	58d3      	ldr	r3, [r2, r3]
 800aa0c:	220c      	movs	r2, #12
 800aa0e:	4393      	bics	r3, r2
 800aa10:	001a      	movs	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	4992      	ldr	r1, [pc, #584]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	2288      	movs	r2, #136	@ 0x88
 800aa1c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2210      	movs	r2, #16
 800aa24:	4013      	ands	r3, r2
 800aa26:	d00a      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa28:	4a8d      	ldr	r2, [pc, #564]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa2a:	2388      	movs	r3, #136	@ 0x88
 800aa2c:	58d3      	ldr	r3, [r2, r3]
 800aa2e:	4a8e      	ldr	r2, [pc, #568]	@ (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800aa30:	401a      	ands	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	498a      	ldr	r1, [pc, #552]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	2288      	movs	r2, #136	@ 0x88
 800aa3c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2208      	movs	r2, #8
 800aa44:	4013      	ands	r3, r2
 800aa46:	d00a      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800aa48:	4a85      	ldr	r2, [pc, #532]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa4a:	2388      	movs	r3, #136	@ 0x88
 800aa4c:	58d3      	ldr	r3, [r2, r3]
 800aa4e:	4a87      	ldr	r2, [pc, #540]	@ (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800aa50:	401a      	ands	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	4982      	ldr	r1, [pc, #520]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	2288      	movs	r2, #136	@ 0x88
 800aa5c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2204      	movs	r2, #4
 800aa64:	4013      	ands	r3, r2
 800aa66:	d00b      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 800aa68:	4a7d      	ldr	r2, [pc, #500]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa6a:	2388      	movs	r3, #136	@ 0x88
 800aa6c:	58d3      	ldr	r3, [r2, r3]
 800aa6e:	22c0      	movs	r2, #192	@ 0xc0
 800aa70:	4393      	bics	r3, r2
 800aa72:	001a      	movs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	4979      	ldr	r1, [pc, #484]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	2288      	movs	r2, #136	@ 0x88
 800aa7e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2220      	movs	r2, #32
 800aa86:	4013      	ands	r3, r2
 800aa88:	d00a      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa8a:	4a75      	ldr	r2, [pc, #468]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa8c:	2388      	movs	r3, #136	@ 0x88
 800aa8e:	58d3      	ldr	r3, [r2, r3]
 800aa90:	4a77      	ldr	r2, [pc, #476]	@ (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800aa92:	401a      	ands	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	4971      	ldr	r1, [pc, #452]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	2288      	movs	r2, #136	@ 0x88
 800aa9e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2240      	movs	r2, #64	@ 0x40
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	d00a      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aaaa:	4a6d      	ldr	r2, [pc, #436]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aaac:	2388      	movs	r3, #136	@ 0x88
 800aaae:	58d3      	ldr	r3, [r2, r3]
 800aab0:	4a70      	ldr	r2, [pc, #448]	@ (800ac74 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800aab2:	401a      	ands	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	4969      	ldr	r1, [pc, #420]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	2288      	movs	r2, #136	@ 0x88
 800aabe:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2280      	movs	r2, #128	@ 0x80
 800aac6:	4013      	ands	r3, r2
 800aac8:	d00a      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aaca:	4a65      	ldr	r2, [pc, #404]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aacc:	2388      	movs	r3, #136	@ 0x88
 800aace:	58d3      	ldr	r3, [r2, r3]
 800aad0:	4a69      	ldr	r2, [pc, #420]	@ (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800aad2:	401a      	ands	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	4961      	ldr	r1, [pc, #388]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aada:	4313      	orrs	r3, r2
 800aadc:	2288      	movs	r2, #136	@ 0x88
 800aade:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	2380      	movs	r3, #128	@ 0x80
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4013      	ands	r3, r2
 800aaea:	d00a      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aaec:	4a5c      	ldr	r2, [pc, #368]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aaee:	2388      	movs	r3, #136	@ 0x88
 800aaf0:	58d3      	ldr	r3, [r2, r3]
 800aaf2:	4a62      	ldr	r2, [pc, #392]	@ (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800aaf4:	401a      	ands	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafa:	4959      	ldr	r1, [pc, #356]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800aafc:	4313      	orrs	r3, r2
 800aafe:	2288      	movs	r2, #136	@ 0x88
 800ab00:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	2380      	movs	r3, #128	@ 0x80
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	d00a      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800ab0e:	4a54      	ldr	r2, [pc, #336]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab10:	2388      	movs	r3, #136	@ 0x88
 800ab12:	58d3      	ldr	r3, [r2, r3]
 800ab14:	4a5a      	ldr	r2, [pc, #360]	@ (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800ab16:	401a      	ands	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1c:	4950      	ldr	r1, [pc, #320]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	2288      	movs	r2, #136	@ 0x88
 800ab22:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	2380      	movs	r3, #128	@ 0x80
 800ab2a:	01db      	lsls	r3, r3, #7
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	d017      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab34:	2380      	movs	r3, #128	@ 0x80
 800ab36:	055b      	lsls	r3, r3, #21
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d106      	bne.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 800ab3c:	4b48      	ldr	r3, [pc, #288]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	4b47      	ldr	r3, [pc, #284]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab42:	2180      	movs	r1, #128	@ 0x80
 800ab44:	0249      	lsls	r1, r1, #9
 800ab46:	430a      	orrs	r2, r1
 800ab48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab4a:	4a45      	ldr	r2, [pc, #276]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab4c:	2388      	movs	r3, #136	@ 0x88
 800ab4e:	58d3      	ldr	r3, [r2, r3]
 800ab50:	4a4c      	ldr	r2, [pc, #304]	@ (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800ab52:	401a      	ands	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab58:	4941      	ldr	r1, [pc, #260]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	2288      	movs	r2, #136	@ 0x88
 800ab5e:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	2380      	movs	r3, #128	@ 0x80
 800ab66:	015b      	lsls	r3, r3, #5
 800ab68:	4013      	ands	r3, r2
 800ab6a:	d017      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab70:	2380      	movs	r3, #128	@ 0x80
 800ab72:	051b      	lsls	r3, r3, #20
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d106      	bne.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800ab78:	4b39      	ldr	r3, [pc, #228]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab7a:	68da      	ldr	r2, [r3, #12]
 800ab7c:	4b38      	ldr	r3, [pc, #224]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab7e:	2180      	movs	r1, #128	@ 0x80
 800ab80:	0449      	lsls	r1, r1, #17
 800ab82:	430a      	orrs	r2, r1
 800ab84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab86:	4a36      	ldr	r2, [pc, #216]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab88:	2388      	movs	r3, #136	@ 0x88
 800ab8a:	58d3      	ldr	r3, [r2, r3]
 800ab8c:	4a3e      	ldr	r2, [pc, #248]	@ (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800ab8e:	401a      	ands	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab94:	4932      	ldr	r1, [pc, #200]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	2288      	movs	r2, #136	@ 0x88
 800ab9a:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	2380      	movs	r3, #128	@ 0x80
 800aba2:	019b      	lsls	r3, r3, #6
 800aba4:	4013      	ands	r3, r2
 800aba6:	d017      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abac:	2380      	movs	r3, #128	@ 0x80
 800abae:	051b      	lsls	r3, r3, #20
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d106      	bne.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800abb4:	4b2a      	ldr	r3, [pc, #168]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800abb6:	68da      	ldr	r2, [r3, #12]
 800abb8:	4b29      	ldr	r3, [pc, #164]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800abba:	2180      	movs	r1, #128	@ 0x80
 800abbc:	0449      	lsls	r1, r1, #17
 800abbe:	430a      	orrs	r2, r1
 800abc0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abc2:	4a27      	ldr	r2, [pc, #156]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800abc4:	2388      	movs	r3, #136	@ 0x88
 800abc6:	58d3      	ldr	r3, [r2, r3]
 800abc8:	4a2f      	ldr	r2, [pc, #188]	@ (800ac88 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800abca:	401a      	ands	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd0:	4923      	ldr	r1, [pc, #140]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	2288      	movs	r2, #136	@ 0x88
 800abd6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	2380      	movs	r3, #128	@ 0x80
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4013      	ands	r3, r2
 800abe2:	d017      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abe8:	2380      	movs	r3, #128	@ 0x80
 800abea:	045b      	lsls	r3, r3, #17
 800abec:	429a      	cmp	r2, r3
 800abee:	d106      	bne.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800abf0:	4b1b      	ldr	r3, [pc, #108]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	4b1a      	ldr	r3, [pc, #104]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800abf6:	2180      	movs	r1, #128	@ 0x80
 800abf8:	0449      	lsls	r1, r1, #17
 800abfa:	430a      	orrs	r2, r1
 800abfc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800abfe:	4a18      	ldr	r2, [pc, #96]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ac00:	2388      	movs	r3, #136	@ 0x88
 800ac02:	58d3      	ldr	r3, [r2, r3]
 800ac04:	4a21      	ldr	r2, [pc, #132]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ac06:	401a      	ands	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0c:	4914      	ldr	r1, [pc, #80]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	2288      	movs	r2, #136	@ 0x88
 800ac12:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	2380      	movs	r3, #128	@ 0x80
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	d017      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac24:	2380      	movs	r3, #128	@ 0x80
 800ac26:	049b      	lsls	r3, r3, #18
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d106      	bne.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800ac2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ac2e:	68da      	ldr	r2, [r3, #12]
 800ac30:	4b0b      	ldr	r3, [pc, #44]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ac32:	2180      	movs	r1, #128	@ 0x80
 800ac34:	0449      	lsls	r1, r1, #17
 800ac36:	430a      	orrs	r2, r1
 800ac38:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800ac3a:	4a09      	ldr	r2, [pc, #36]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ac3c:	2388      	movs	r3, #136	@ 0x88
 800ac3e:	58d3      	ldr	r3, [r2, r3]
 800ac40:	4a12      	ldr	r2, [pc, #72]	@ (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ac42:	401a      	ands	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac48:	4905      	ldr	r1, [pc, #20]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	2288      	movs	r2, #136	@ 0x88
 800ac4e:	508b      	str	r3, [r1, r2]

  }

  return status;
 800ac50:	2312      	movs	r3, #18
 800ac52:	18fb      	adds	r3, r7, r3
 800ac54:	781b      	ldrb	r3, [r3, #0]
}
 800ac56:	0018      	movs	r0, r3
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	b006      	add	sp, #24
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	46c0      	nop			@ (mov r8, r8)
 800ac60:	40021000 	.word	0x40021000
 800ac64:	efffffff 	.word	0xefffffff
 800ac68:	fffff3ff 	.word	0xfffff3ff
 800ac6c:	fffffcff 	.word	0xfffffcff
 800ac70:	ffffcfff 	.word	0xffffcfff
 800ac74:	fffcffff 	.word	0xfffcffff
 800ac78:	fff3ffff 	.word	0xfff3ffff
 800ac7c:	ffcfffff 	.word	0xffcfffff
 800ac80:	ff3fffff 	.word	0xff3fffff
 800ac84:	cfffffff 	.word	0xcfffffff
 800ac88:	f3ffffff 	.word	0xf3ffffff
 800ac8c:	feffffff 	.word	0xfeffffff

0800ac90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b089      	sub	sp, #36	@ 0x24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	2380      	movs	r3, #128	@ 0x80
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d154      	bne.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aca6:	4ad5      	ldr	r2, [pc, #852]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800aca8:	2390      	movs	r3, #144	@ 0x90
 800acaa:	58d2      	ldr	r2, [r2, r3]
 800acac:	23c0      	movs	r3, #192	@ 0xc0
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4013      	ands	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	23c0      	movs	r3, #192	@ 0xc0
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	429a      	cmp	r2, r3
 800acbc:	d039      	beq.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	23c0      	movs	r3, #192	@ 0xc0
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d901      	bls.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800acc8:	f000 fd1a 	bl	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	2380      	movs	r3, #128	@ 0x80
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d006      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	2380      	movs	r3, #128	@ 0x80
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	429a      	cmp	r2, r3
 800acde:	d00f      	beq.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800ace0:	f000 fd0e 	bl	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ace4:	4ac5      	ldr	r2, [pc, #788]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800ace6:	2390      	movs	r3, #144	@ 0x90
 800ace8:	58d3      	ldr	r3, [r2, r3]
 800acea:	2202      	movs	r2, #2
 800acec:	4013      	ands	r3, r2
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d001      	beq.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 800acf2:	f000 fd07 	bl	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 800acf6:	2380      	movs	r3, #128	@ 0x80
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	61fb      	str	r3, [r7, #28]
        break;
 800acfc:	f000 fd02 	bl	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ad00:	4abe      	ldr	r2, [pc, #760]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800ad02:	2394      	movs	r3, #148	@ 0x94
 800ad04:	58d3      	ldr	r3, [r2, r3]
 800ad06:	2202      	movs	r2, #2
 800ad08:	4013      	ands	r3, r2
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d001      	beq.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 800ad0e:	f000 fcfb 	bl	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800ad12:	4aba      	ldr	r2, [pc, #744]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800ad14:	2394      	movs	r3, #148	@ 0x94
 800ad16:	58d3      	ldr	r3, [r2, r3]
 800ad18:	2204      	movs	r2, #4
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d103      	bne.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 800ad20:	23fa      	movs	r3, #250	@ 0xfa
 800ad22:	61fb      	str	r3, [r7, #28]
        break;
 800ad24:	f000 fcf0 	bl	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 800ad28:	23fa      	movs	r3, #250	@ 0xfa
 800ad2a:	01db      	lsls	r3, r3, #7
 800ad2c:	61fb      	str	r3, [r7, #28]
        break;
 800ad2e:	f000 fceb 	bl	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad32:	4bb2      	ldr	r3, [pc, #712]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	2380      	movs	r3, #128	@ 0x80
 800ad38:	029b      	lsls	r3, r3, #10
 800ad3a:	401a      	ands	r2, r3
 800ad3c:	2380      	movs	r3, #128	@ 0x80
 800ad3e:	029b      	lsls	r3, r3, #10
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d001      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800ad44:	f000 fce2 	bl	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 800ad48:	4bad      	ldr	r3, [pc, #692]	@ (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800ad4a:	61fb      	str	r3, [r7, #28]
        break;
 800ad4c:	f000 fcde 	bl	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	2380      	movs	r3, #128	@ 0x80
 800ad54:	029b      	lsls	r3, r3, #10
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d100      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800ad5a:	e11a      	b.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	2380      	movs	r3, #128	@ 0x80
 800ad60:	029b      	lsls	r3, r3, #10
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d901      	bls.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800ad66:	f000 fcd3 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	2380      	movs	r3, #128	@ 0x80
 800ad6e:	025b      	lsls	r3, r3, #9
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d100      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800ad74:	e10d      	b.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	2380      	movs	r3, #128	@ 0x80
 800ad7a:	025b      	lsls	r3, r3, #9
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d901      	bls.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800ad80:	f000 fcc6 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	2380      	movs	r3, #128	@ 0x80
 800ad88:	01db      	lsls	r3, r3, #7
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d100      	bne.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800ad8e:	e1eb      	b.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	2380      	movs	r3, #128	@ 0x80
 800ad94:	01db      	lsls	r3, r3, #7
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d901      	bls.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800ad9a:	f000 fcb9 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	2380      	movs	r3, #128	@ 0x80
 800ada2:	019b      	lsls	r3, r3, #6
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d101      	bne.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800ada8:	f000 fc50 	bl	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	2380      	movs	r3, #128	@ 0x80
 800adb0:	019b      	lsls	r3, r3, #6
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d901      	bls.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800adb6:	f000 fcab 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	2380      	movs	r3, #128	@ 0x80
 800adbe:	015b      	lsls	r3, r3, #5
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d101      	bne.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800adc4:	f000 fbe2 	bl	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	2380      	movs	r3, #128	@ 0x80
 800adcc:	015b      	lsls	r3, r3, #5
 800adce:	429a      	cmp	r2, r3
 800add0:	d901      	bls.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800add2:	f000 fc9d 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	2380      	movs	r3, #128	@ 0x80
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	429a      	cmp	r2, r3
 800adde:	d101      	bne.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800ade0:	f000 fba9 	bl	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	2380      	movs	r3, #128	@ 0x80
 800ade8:	011b      	lsls	r3, r3, #4
 800adea:	429a      	cmp	r2, r3
 800adec:	d901      	bls.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800adee:	f000 fc8f 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	2380      	movs	r3, #128	@ 0x80
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d101      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800adfc:	f000 fb70 	bl	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	2380      	movs	r3, #128	@ 0x80
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d901      	bls.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800ae0a:	f000 fc81 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	2380      	movs	r3, #128	@ 0x80
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d100      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800ae18:	e305      	b.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	2380      	movs	r3, #128	@ 0x80
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d901      	bls.n	800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 800ae24:	f000 fc74 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	2380      	movs	r3, #128	@ 0x80
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d100      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800ae32:	e29b      	b.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	2380      	movs	r3, #128	@ 0x80
 800ae38:	005b      	lsls	r3, r3, #1
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 800ae3e:	f000 fc67 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b80      	cmp	r3, #128	@ 0x80
 800ae46:	d100      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800ae48:	e22f      	b.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b80      	cmp	r3, #128	@ 0x80
 800ae4e:	d901      	bls.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800ae50:	f000 fc5e 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d80f      	bhi.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800ae60:	f000 fc56 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b20      	cmp	r3, #32
 800ae68:	d901      	bls.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800ae6a:	f000 fc51 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	009a      	lsls	r2, r3, #2
 800ae72:	4b64      	ldr	r3, [pc, #400]	@ (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 800ae74:	18d3      	adds	r3, r2, r3
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	469f      	mov	pc, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b40      	cmp	r3, #64	@ 0x40
 800ae7e:	d100      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 800ae80:	e1df      	b.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 800ae82:	f000 fc45 	bl	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ae86:	4a5d      	ldr	r2, [pc, #372]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800ae88:	2388      	movs	r3, #136	@ 0x88
 800ae8a:	58d3      	ldr	r3, [r2, r3]
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	4013      	ands	r3, r2
 800ae90:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d025      	beq.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d82d      	bhi.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d013      	beq.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d827      	bhi.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d003      	beq.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d005      	beq.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800aeb6:	e020      	b.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800aeb8:	f7ff fc40 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800aebc:	0003      	movs	r3, r0
 800aebe:	61fb      	str	r3, [r7, #28]
            break;
 800aec0:	e022      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 800aec2:	f7ff fb95 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800aec6:	0003      	movs	r3, r0
 800aec8:	61fb      	str	r3, [r7, #28]
            break;
 800aeca:	e01d      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aecc:	4b4b      	ldr	r3, [pc, #300]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	2380      	movs	r3, #128	@ 0x80
 800aed2:	00db      	lsls	r3, r3, #3
 800aed4:	401a      	ands	r2, r3
 800aed6:	2380      	movs	r3, #128	@ 0x80
 800aed8:	00db      	lsls	r3, r3, #3
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d110      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 800aede:	4b4a      	ldr	r3, [pc, #296]	@ (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800aee0:	61fb      	str	r3, [r7, #28]
            break;
 800aee2:	e00d      	b.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aee4:	4a45      	ldr	r2, [pc, #276]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800aee6:	2390      	movs	r3, #144	@ 0x90
 800aee8:	58d3      	ldr	r3, [r2, r3]
 800aeea:	2202      	movs	r2, #2
 800aeec:	4013      	ands	r3, r2
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d109      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 800aef2:	2380      	movs	r3, #128	@ 0x80
 800aef4:	021b      	lsls	r3, r3, #8
 800aef6:	61fb      	str	r3, [r7, #28]
            break;
 800aef8:	e005      	b.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 800aefa:	46c0      	nop			@ (mov r8, r8)
 800aefc:	f000 fc09 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800af00:	46c0      	nop			@ (mov r8, r8)
 800af02:	f000 fc06 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800af06:	46c0      	nop			@ (mov r8, r8)
        break;
 800af08:	f000 fc03 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800af0c:	4a3b      	ldr	r2, [pc, #236]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800af0e:	2388      	movs	r3, #136	@ 0x88
 800af10:	58d3      	ldr	r3, [r2, r3]
 800af12:	220c      	movs	r2, #12
 800af14:	4013      	ands	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2b0c      	cmp	r3, #12
 800af1c:	d025      	beq.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b0c      	cmp	r3, #12
 800af22:	d82d      	bhi.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b08      	cmp	r3, #8
 800af28:	d013      	beq.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b08      	cmp	r3, #8
 800af2e:	d827      	bhi.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d005      	beq.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 800af3c:	e020      	b.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800af3e:	f7ff fbfd 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800af42:	0003      	movs	r3, r0
 800af44:	61fb      	str	r3, [r7, #28]
            break;
 800af46:	e022      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 800af48:	f7ff fb52 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800af4c:	0003      	movs	r3, r0
 800af4e:	61fb      	str	r3, [r7, #28]
            break;
 800af50:	e01d      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af52:	4b2a      	ldr	r3, [pc, #168]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	2380      	movs	r3, #128	@ 0x80
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	401a      	ands	r2, r3
 800af5c:	2380      	movs	r3, #128	@ 0x80
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	429a      	cmp	r2, r3
 800af62:	d110      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 800af64:	4b28      	ldr	r3, [pc, #160]	@ (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800af66:	61fb      	str	r3, [r7, #28]
            break;
 800af68:	e00d      	b.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800af6a:	4a24      	ldr	r2, [pc, #144]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800af6c:	2390      	movs	r3, #144	@ 0x90
 800af6e:	58d3      	ldr	r3, [r2, r3]
 800af70:	2202      	movs	r2, #2
 800af72:	4013      	ands	r3, r2
 800af74:	2b02      	cmp	r3, #2
 800af76:	d109      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 800af78:	2380      	movs	r3, #128	@ 0x80
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	61fb      	str	r3, [r7, #28]
            break;
 800af7e:	e005      	b.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 800af80:	46c0      	nop			@ (mov r8, r8)
 800af82:	f000 fbc6 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800af86:	46c0      	nop			@ (mov r8, r8)
 800af88:	f000 fbc3 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800af8c:	46c0      	nop			@ (mov r8, r8)
        break;
 800af8e:	f000 fbc0 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 800af92:	f7ff fbd3 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800af96:	0003      	movs	r3, r0
 800af98:	61fb      	str	r3, [r7, #28]
        break;
 800af9a:	f000 fbba 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800af9e:	4a17      	ldr	r2, [pc, #92]	@ (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800afa0:	2388      	movs	r3, #136	@ 0x88
 800afa2:	58d2      	ldr	r2, [r2, r3]
 800afa4:	23c0      	movs	r3, #192	@ 0xc0
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	4013      	ands	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	23c0      	movs	r3, #192	@ 0xc0
 800afb0:	011b      	lsls	r3, r3, #4
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d036      	beq.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	23c0      	movs	r3, #192	@ 0xc0
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d83c      	bhi.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	2380      	movs	r3, #128	@ 0x80
 800afc4:	011b      	lsls	r3, r3, #4
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d020      	beq.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	2380      	movs	r3, #128	@ 0x80
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d832      	bhi.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	2380      	movs	r3, #128	@ 0x80
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d005      	beq.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 800afe4:	e029      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800afe6:	f7ff fba9 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800afea:	0003      	movs	r3, r0
 800afec:	61fb      	str	r3, [r7, #28]
            break;
 800afee:	e02b      	b.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 800aff0:	f7ff fafe 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800aff4:	0003      	movs	r3, r0
 800aff6:	61fb      	str	r3, [r7, #28]
            break;
 800aff8:	e026      	b.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800affa:	46c0      	nop			@ (mov r8, r8)
 800affc:	40021000 	.word	0x40021000
 800b000:	0001e848 	.word	0x0001e848
 800b004:	08012108 	.word	0x08012108
 800b008:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b00c:	4bbb      	ldr	r3, [pc, #748]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	2380      	movs	r3, #128	@ 0x80
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	401a      	ands	r2, r3
 800b016:	2380      	movs	r3, #128	@ 0x80
 800b018:	00db      	lsls	r3, r3, #3
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d110      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 800b01e:	4bb8      	ldr	r3, [pc, #736]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800b020:	61fb      	str	r3, [r7, #28]
            break;
 800b022:	e00d      	b.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b024:	4ab5      	ldr	r2, [pc, #724]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b026:	2390      	movs	r3, #144	@ 0x90
 800b028:	58d3      	ldr	r3, [r2, r3]
 800b02a:	2202      	movs	r2, #2
 800b02c:	4013      	ands	r3, r2
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d109      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 800b032:	2380      	movs	r3, #128	@ 0x80
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	61fb      	str	r3, [r7, #28]
            break;
 800b038:	e005      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 800b03a:	46c0      	nop			@ (mov r8, r8)
 800b03c:	f000 fb69 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b040:	46c0      	nop			@ (mov r8, r8)
 800b042:	f000 fb66 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b046:	46c0      	nop			@ (mov r8, r8)
        break;
 800b048:	f000 fb63 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 800b04c:	4aab      	ldr	r2, [pc, #684]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b04e:	2388      	movs	r3, #136	@ 0x88
 800b050:	58d2      	ldr	r2, [r2, r3]
 800b052:	23c0      	movs	r3, #192	@ 0xc0
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4013      	ands	r3, r2
 800b058:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	23c0      	movs	r3, #192	@ 0xc0
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	429a      	cmp	r2, r3
 800b062:	d02d      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	23c0      	movs	r3, #192	@ 0xc0
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d833      	bhi.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	2380      	movs	r3, #128	@ 0x80
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	429a      	cmp	r2, r3
 800b076:	d017      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	2380      	movs	r3, #128	@ 0x80
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	429a      	cmp	r2, r3
 800b080:	d829      	bhi.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d005      	beq.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	2380      	movs	r3, #128	@ 0x80
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	429a      	cmp	r2, r3
 800b090:	d005      	beq.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 800b092:	e020      	b.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 800b094:	f7ff fb52 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b098:	0003      	movs	r3, r0
 800b09a:	61fb      	str	r3, [r7, #28]
            break;
 800b09c:	e022      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 800b09e:	f7ff faa7 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800b0a2:	0003      	movs	r3, r0
 800b0a4:	61fb      	str	r3, [r7, #28]
            break;
 800b0a6:	e01d      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0a8:	4b94      	ldr	r3, [pc, #592]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	2380      	movs	r3, #128	@ 0x80
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	401a      	ands	r2, r3
 800b0b2:	2380      	movs	r3, #128	@ 0x80
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d110      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 800b0ba:	4b91      	ldr	r3, [pc, #580]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800b0bc:	61fb      	str	r3, [r7, #28]
            break;
 800b0be:	e00d      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b0c0:	4a8e      	ldr	r2, [pc, #568]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b0c2:	2390      	movs	r3, #144	@ 0x90
 800b0c4:	58d3      	ldr	r3, [r2, r3]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d109      	bne.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 800b0ce:	2380      	movs	r3, #128	@ 0x80
 800b0d0:	021b      	lsls	r3, r3, #8
 800b0d2:	61fb      	str	r3, [r7, #28]
            break;
 800b0d4:	e005      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 800b0d6:	46c0      	nop			@ (mov r8, r8)
 800b0d8:	f000 fb1b 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b0dc:	46c0      	nop			@ (mov r8, r8)
 800b0de:	f000 fb18 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b0e2:	46c0      	nop			@ (mov r8, r8)
        break;
 800b0e4:	f000 fb15 	bl	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 800b0e8:	4a84      	ldr	r2, [pc, #528]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b0ea:	2388      	movs	r3, #136	@ 0x88
 800b0ec:	58d3      	ldr	r3, [r2, r3]
 800b0ee:	22c0      	movs	r2, #192	@ 0xc0
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0f8:	d025      	beq.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0fe:	d82d      	bhi.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2b80      	cmp	r3, #128	@ 0x80
 800b104:	d013      	beq.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	2b80      	cmp	r3, #128	@ 0x80
 800b10a:	d827      	bhi.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b40      	cmp	r3, #64	@ 0x40
 800b116:	d005      	beq.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 800b118:	e020      	b.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 800b11a:	f7ff fb0f 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b11e:	0003      	movs	r3, r0
 800b120:	61fb      	str	r3, [r7, #28]
            break;
 800b122:	e020      	b.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 800b124:	f7ff fa64 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800b128:	0003      	movs	r3, r0
 800b12a:	61fb      	str	r3, [r7, #28]
            break;
 800b12c:	e01b      	b.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b12e:	4b73      	ldr	r3, [pc, #460]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	2380      	movs	r3, #128	@ 0x80
 800b134:	00db      	lsls	r3, r3, #3
 800b136:	401a      	ands	r2, r3
 800b138:	2380      	movs	r3, #128	@ 0x80
 800b13a:	00db      	lsls	r3, r3, #3
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d10f      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 800b140:	4b6f      	ldr	r3, [pc, #444]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800b142:	61fb      	str	r3, [r7, #28]
            break;
 800b144:	e00c      	b.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b146:	4a6d      	ldr	r2, [pc, #436]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b148:	2390      	movs	r3, #144	@ 0x90
 800b14a:	58d3      	ldr	r3, [r2, r3]
 800b14c:	2202      	movs	r2, #2
 800b14e:	4013      	ands	r3, r2
 800b150:	2b02      	cmp	r3, #2
 800b152:	d107      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 800b154:	2380      	movs	r3, #128	@ 0x80
 800b156:	021b      	lsls	r3, r3, #8
 800b158:	61fb      	str	r3, [r7, #28]
            break;
 800b15a:	e003      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 800b15c:	46c0      	nop			@ (mov r8, r8)
 800b15e:	e2d8      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b160:	46c0      	nop			@ (mov r8, r8)
 800b162:	e2d6      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b164:	46c0      	nop			@ (mov r8, r8)
        break;
 800b166:	e2d4      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b168:	4a64      	ldr	r2, [pc, #400]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b16a:	2388      	movs	r3, #136	@ 0x88
 800b16c:	58d2      	ldr	r2, [r2, r3]
 800b16e:	23c0      	movs	r3, #192	@ 0xc0
 800b170:	059b      	lsls	r3, r3, #22
 800b172:	4013      	ands	r3, r2
 800b174:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	2380      	movs	r3, #128	@ 0x80
 800b17a:	059b      	lsls	r3, r3, #22
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d012      	beq.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	2380      	movs	r3, #128	@ 0x80
 800b184:	059b      	lsls	r3, r3, #22
 800b186:	429a      	cmp	r2, r3
 800b188:	d825      	bhi.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	2380      	movs	r3, #128	@ 0x80
 800b194:	055b      	lsls	r3, r3, #21
 800b196:	429a      	cmp	r2, r3
 800b198:	d014      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 800b19a:	e01c      	b.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 800b19c:	f7ff fa28 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800b1a0:	0003      	movs	r3, r0
 800b1a2:	61fb      	str	r3, [r7, #28]
            break;
 800b1a4:	e018      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1a6:	4b55      	ldr	r3, [pc, #340]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	2380      	movs	r3, #128	@ 0x80
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	401a      	ands	r2, r3
 800b1b0:	2380      	movs	r3, #128	@ 0x80
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d102      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 800b1b8:	4b51      	ldr	r3, [pc, #324]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800b1ba:	61fb      	str	r3, [r7, #28]
            break;
 800b1bc:	e00c      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	61fb      	str	r3, [r7, #28]
            break;
 800b1c2:	e009      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800b1c4:	2408      	movs	r4, #8
 800b1c6:	193b      	adds	r3, r7, r4
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f000 faad 	bl	800b728 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 800b1ce:	193b      	adds	r3, r7, r4
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	61fb      	str	r3, [r7, #28]
            break;
 800b1d4:	e000      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 800b1d6:	46c0      	nop			@ (mov r8, r8)
        break;
 800b1d8:	e29b      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b1da:	4a48      	ldr	r2, [pc, #288]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b1dc:	2388      	movs	r3, #136	@ 0x88
 800b1de:	58d2      	ldr	r2, [r2, r3]
 800b1e0:	23c0      	movs	r3, #192	@ 0xc0
 800b1e2:	019b      	lsls	r3, r3, #6
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	2380      	movs	r3, #128	@ 0x80
 800b1ec:	019b      	lsls	r3, r3, #6
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d017      	beq.n	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	2380      	movs	r3, #128	@ 0x80
 800b1f6:	019b      	lsls	r3, r3, #6
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d81e      	bhi.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	2380      	movs	r3, #128	@ 0x80
 800b206:	015b      	lsls	r3, r3, #5
 800b208:	429a      	cmp	r2, r3
 800b20a:	d005      	beq.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 800b20c:	e015      	b.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800b20e:	f7ff fa95 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b212:	0003      	movs	r3, r0
 800b214:	61fb      	str	r3, [r7, #28]
            break;
 800b216:	e013      	b.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 800b218:	f7ff f9ea 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800b21c:	0003      	movs	r3, r0
 800b21e:	61fb      	str	r3, [r7, #28]
            break;
 800b220:	e00e      	b.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b222:	4b36      	ldr	r3, [pc, #216]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	2380      	movs	r3, #128	@ 0x80
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	401a      	ands	r2, r3
 800b22c:	2380      	movs	r3, #128	@ 0x80
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	429a      	cmp	r2, r3
 800b232:	d104      	bne.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 800b234:	4b32      	ldr	r3, [pc, #200]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800b236:	61fb      	str	r3, [r7, #28]
            break;
 800b238:	e001      	b.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 800b23a:	46c0      	nop			@ (mov r8, r8)
 800b23c:	e269      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b23e:	46c0      	nop			@ (mov r8, r8)
        break;
 800b240:	e267      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b242:	4a2e      	ldr	r2, [pc, #184]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b244:	2388      	movs	r3, #136	@ 0x88
 800b246:	58d2      	ldr	r2, [r2, r3]
 800b248:	23c0      	movs	r3, #192	@ 0xc0
 800b24a:	029b      	lsls	r3, r3, #10
 800b24c:	4013      	ands	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	2380      	movs	r3, #128	@ 0x80
 800b254:	029b      	lsls	r3, r3, #10
 800b256:	429a      	cmp	r2, r3
 800b258:	d017      	beq.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	2380      	movs	r3, #128	@ 0x80
 800b25e:	029b      	lsls	r3, r3, #10
 800b260:	429a      	cmp	r2, r3
 800b262:	d81e      	bhi.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	2380      	movs	r3, #128	@ 0x80
 800b26e:	025b      	lsls	r3, r3, #9
 800b270:	429a      	cmp	r2, r3
 800b272:	d005      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 800b274:	e015      	b.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 800b276:	f7ff fa61 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b27a:	0003      	movs	r3, r0
 800b27c:	61fb      	str	r3, [r7, #28]
            break;
 800b27e:	e013      	b.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 800b280:	f7ff f9b6 	bl	800a5f0 <HAL_RCC_GetSysClockFreq>
 800b284:	0003      	movs	r3, r0
 800b286:	61fb      	str	r3, [r7, #28]
            break;
 800b288:	e00e      	b.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b28a:	4b1c      	ldr	r3, [pc, #112]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	2380      	movs	r3, #128	@ 0x80
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	401a      	ands	r2, r3
 800b294:	2380      	movs	r3, #128	@ 0x80
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	429a      	cmp	r2, r3
 800b29a:	d104      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 800b29c:	4b18      	ldr	r3, [pc, #96]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800b29e:	61fb      	str	r3, [r7, #28]
            break;
 800b2a0:	e001      	b.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 800b2a2:	46c0      	nop			@ (mov r8, r8)
 800b2a4:	e235      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b2a6:	46c0      	nop			@ (mov r8, r8)
        break;
 800b2a8:	e233      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b2aa:	4a14      	ldr	r2, [pc, #80]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800b2ac:	2388      	movs	r3, #136	@ 0x88
 800b2ae:	58d2      	ldr	r2, [r2, r3]
 800b2b0:	23c0      	movs	r3, #192	@ 0xc0
 800b2b2:	031b      	lsls	r3, r3, #12
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	23c0      	movs	r3, #192	@ 0xc0
 800b2bc:	031b      	lsls	r3, r3, #12
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d041      	beq.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	23c0      	movs	r3, #192	@ 0xc0
 800b2c6:	031b      	lsls	r3, r3, #12
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d847      	bhi.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	2380      	movs	r3, #128	@ 0x80
 800b2d0:	031b      	lsls	r3, r3, #12
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d02b      	beq.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	2380      	movs	r3, #128	@ 0x80
 800b2da:	031b      	lsls	r3, r3, #12
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d83d      	bhi.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d005      	beq.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	2380      	movs	r3, #128	@ 0x80
 800b2ea:	02db      	lsls	r3, r3, #11
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d009      	beq.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 800b2f0:	e034      	b.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 800b2f2:	f7ff fa23 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b2f6:	0003      	movs	r3, r0
 800b2f8:	61fb      	str	r3, [r7, #28]
            break;
 800b2fa:	e036      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800b2fc:	40021000 	.word	0x40021000
 800b300:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b304:	4abd      	ldr	r2, [pc, #756]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b306:	2394      	movs	r3, #148	@ 0x94
 800b308:	58d3      	ldr	r3, [r2, r3]
 800b30a:	2202      	movs	r2, #2
 800b30c:	4013      	ands	r3, r2
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d126      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800b312:	4aba      	ldr	r2, [pc, #744]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b314:	2394      	movs	r3, #148	@ 0x94
 800b316:	58d3      	ldr	r3, [r2, r3]
 800b318:	2204      	movs	r2, #4
 800b31a:	4013      	ands	r3, r2
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	d102      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 800b320:	23fa      	movs	r3, #250	@ 0xfa
 800b322:	61fb      	str	r3, [r7, #28]
            break;
 800b324:	e01c      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 800b326:	23fa      	movs	r3, #250	@ 0xfa
 800b328:	01db      	lsls	r3, r3, #7
 800b32a:	61fb      	str	r3, [r7, #28]
            break;
 800b32c:	e018      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b32e:	4bb3      	ldr	r3, [pc, #716]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	2380      	movs	r3, #128	@ 0x80
 800b334:	00db      	lsls	r3, r3, #3
 800b336:	401a      	ands	r2, r3
 800b338:	2380      	movs	r3, #128	@ 0x80
 800b33a:	00db      	lsls	r3, r3, #3
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d111      	bne.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 800b340:	4baf      	ldr	r3, [pc, #700]	@ (800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800b342:	61fb      	str	r3, [r7, #28]
            break;
 800b344:	e00e      	b.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b346:	4aad      	ldr	r2, [pc, #692]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b348:	2390      	movs	r3, #144	@ 0x90
 800b34a:	58d3      	ldr	r3, [r2, r3]
 800b34c:	2202      	movs	r2, #2
 800b34e:	4013      	ands	r3, r2
 800b350:	2b02      	cmp	r3, #2
 800b352:	d109      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 800b354:	2380      	movs	r3, #128	@ 0x80
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	61fb      	str	r3, [r7, #28]
            break;
 800b35a:	e005      	b.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 800b35c:	46c0      	nop			@ (mov r8, r8)
 800b35e:	e1d8      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b360:	46c0      	nop			@ (mov r8, r8)
 800b362:	e1d6      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b364:	46c0      	nop			@ (mov r8, r8)
 800b366:	e1d4      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b368:	46c0      	nop			@ (mov r8, r8)
        break;
 800b36a:	e1d2      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b36c:	4aa3      	ldr	r2, [pc, #652]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b36e:	2388      	movs	r3, #136	@ 0x88
 800b370:	58d2      	ldr	r2, [r2, r3]
 800b372:	23c0      	movs	r3, #192	@ 0xc0
 800b374:	039b      	lsls	r3, r3, #14
 800b376:	4013      	ands	r3, r2
 800b378:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b37a:	697a      	ldr	r2, [r7, #20]
 800b37c:	23c0      	movs	r3, #192	@ 0xc0
 800b37e:	039b      	lsls	r3, r3, #14
 800b380:	429a      	cmp	r2, r3
 800b382:	d03d      	beq.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	23c0      	movs	r3, #192	@ 0xc0
 800b388:	039b      	lsls	r3, r3, #14
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d843      	bhi.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	2380      	movs	r3, #128	@ 0x80
 800b392:	039b      	lsls	r3, r3, #14
 800b394:	429a      	cmp	r2, r3
 800b396:	d027      	beq.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	2380      	movs	r3, #128	@ 0x80
 800b39c:	039b      	lsls	r3, r3, #14
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d839      	bhi.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d005      	beq.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	2380      	movs	r3, #128	@ 0x80
 800b3ac:	035b      	lsls	r3, r3, #13
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d005      	beq.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 800b3b2:	e030      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 800b3b4:	f7ff f9c2 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b3b8:	0003      	movs	r3, r0
 800b3ba:	61fb      	str	r3, [r7, #28]
            break;
 800b3bc:	e032      	b.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b3be:	4a8f      	ldr	r2, [pc, #572]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b3c0:	2394      	movs	r3, #148	@ 0x94
 800b3c2:	58d3      	ldr	r3, [r2, r3]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d126      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800b3cc:	4a8b      	ldr	r2, [pc, #556]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b3ce:	2394      	movs	r3, #148	@ 0x94
 800b3d0:	58d3      	ldr	r3, [r2, r3]
 800b3d2:	2204      	movs	r2, #4
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	2b04      	cmp	r3, #4
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 800b3da:	23fa      	movs	r3, #250	@ 0xfa
 800b3dc:	61fb      	str	r3, [r7, #28]
            break;
 800b3de:	e01c      	b.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 800b3e0:	23fa      	movs	r3, #250	@ 0xfa
 800b3e2:	01db      	lsls	r3, r3, #7
 800b3e4:	61fb      	str	r3, [r7, #28]
            break;
 800b3e6:	e018      	b.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b3e8:	4b84      	ldr	r3, [pc, #528]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	2380      	movs	r3, #128	@ 0x80
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	401a      	ands	r2, r3
 800b3f2:	2380      	movs	r3, #128	@ 0x80
 800b3f4:	00db      	lsls	r3, r3, #3
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d111      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 800b3fa:	4b81      	ldr	r3, [pc, #516]	@ (800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800b3fc:	61fb      	str	r3, [r7, #28]
            break;
 800b3fe:	e00e      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b400:	4a7e      	ldr	r2, [pc, #504]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b402:	2390      	movs	r3, #144	@ 0x90
 800b404:	58d3      	ldr	r3, [r2, r3]
 800b406:	2202      	movs	r2, #2
 800b408:	4013      	ands	r3, r2
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d109      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 800b40e:	2380      	movs	r3, #128	@ 0x80
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	61fb      	str	r3, [r7, #28]
            break;
 800b414:	e005      	b.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 800b416:	46c0      	nop			@ (mov r8, r8)
 800b418:	e17b      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b41a:	46c0      	nop			@ (mov r8, r8)
 800b41c:	e179      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b41e:	46c0      	nop			@ (mov r8, r8)
 800b420:	e177      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b422:	46c0      	nop			@ (mov r8, r8)
        break;
 800b424:	e175      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b426:	4a75      	ldr	r2, [pc, #468]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b428:	2388      	movs	r3, #136	@ 0x88
 800b42a:	58d2      	ldr	r2, [r2, r3]
 800b42c:	23c0      	movs	r3, #192	@ 0xc0
 800b42e:	041b      	lsls	r3, r3, #16
 800b430:	4013      	ands	r3, r2
 800b432:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	23c0      	movs	r3, #192	@ 0xc0
 800b438:	041b      	lsls	r3, r3, #16
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d03d      	beq.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	23c0      	movs	r3, #192	@ 0xc0
 800b442:	041b      	lsls	r3, r3, #16
 800b444:	429a      	cmp	r2, r3
 800b446:	d843      	bhi.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	2380      	movs	r3, #128	@ 0x80
 800b44c:	041b      	lsls	r3, r3, #16
 800b44e:	429a      	cmp	r2, r3
 800b450:	d027      	beq.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	2380      	movs	r3, #128	@ 0x80
 800b456:	041b      	lsls	r3, r3, #16
 800b458:	429a      	cmp	r2, r3
 800b45a:	d839      	bhi.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d005      	beq.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	2380      	movs	r3, #128	@ 0x80
 800b466:	03db      	lsls	r3, r3, #15
 800b468:	429a      	cmp	r2, r3
 800b46a:	d005      	beq.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 800b46c:	e030      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 800b46e:	f7ff f965 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b472:	0003      	movs	r3, r0
 800b474:	61fb      	str	r3, [r7, #28]
            break;
 800b476:	e032      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b478:	4a60      	ldr	r2, [pc, #384]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b47a:	2394      	movs	r3, #148	@ 0x94
 800b47c:	58d3      	ldr	r3, [r2, r3]
 800b47e:	2202      	movs	r2, #2
 800b480:	4013      	ands	r3, r2
 800b482:	2b02      	cmp	r3, #2
 800b484:	d126      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800b486:	4a5d      	ldr	r2, [pc, #372]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b488:	2394      	movs	r3, #148	@ 0x94
 800b48a:	58d3      	ldr	r3, [r2, r3]
 800b48c:	2204      	movs	r2, #4
 800b48e:	4013      	ands	r3, r2
 800b490:	2b04      	cmp	r3, #4
 800b492:	d102      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 800b494:	23fa      	movs	r3, #250	@ 0xfa
 800b496:	61fb      	str	r3, [r7, #28]
            break;
 800b498:	e01c      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 800b49a:	23fa      	movs	r3, #250	@ 0xfa
 800b49c:	01db      	lsls	r3, r3, #7
 800b49e:	61fb      	str	r3, [r7, #28]
            break;
 800b4a0:	e018      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4a2:	4b56      	ldr	r3, [pc, #344]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	2380      	movs	r3, #128	@ 0x80
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	401a      	ands	r2, r3
 800b4ac:	2380      	movs	r3, #128	@ 0x80
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d111      	bne.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 800b4b4:	4b52      	ldr	r3, [pc, #328]	@ (800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800b4b6:	61fb      	str	r3, [r7, #28]
            break;
 800b4b8:	e00e      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b4ba:	4a50      	ldr	r2, [pc, #320]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b4bc:	2390      	movs	r3, #144	@ 0x90
 800b4be:	58d3      	ldr	r3, [r2, r3]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d109      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 800b4c8:	2380      	movs	r3, #128	@ 0x80
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	61fb      	str	r3, [r7, #28]
            break;
 800b4ce:	e005      	b.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 800b4d0:	46c0      	nop			@ (mov r8, r8)
 800b4d2:	e11e      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b4d4:	46c0      	nop			@ (mov r8, r8)
 800b4d6:	e11c      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b4d8:	46c0      	nop			@ (mov r8, r8)
 800b4da:	e11a      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b4dc:	46c0      	nop			@ (mov r8, r8)
        break;
 800b4de:	e118      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 800b4e0:	4a46      	ldr	r2, [pc, #280]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b4e2:	2388      	movs	r3, #136	@ 0x88
 800b4e4:	58d2      	ldr	r2, [r2, r3]
 800b4e6:	2380      	movs	r3, #128	@ 0x80
 800b4e8:	045b      	lsls	r3, r3, #17
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d005      	beq.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	2380      	movs	r3, #128	@ 0x80
 800b4f8:	045b      	lsls	r3, r3, #17
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d011      	beq.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 800b4fe:	e019      	b.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800b500:	4b3e      	ldr	r3, [pc, #248]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	23e0      	movs	r3, #224	@ 0xe0
 800b506:	01db      	lsls	r3, r3, #7
 800b508:	4013      	ands	r3, r2
 800b50a:	d104      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 800b50c:	f7ff f916 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b510:	0003      	movs	r3, r0
 800b512:	61fb      	str	r3, [r7, #28]
            break;
 800b514:	e00e      	b.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 800b516:	f7ff f911 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b51a:	0003      	movs	r3, r0
 800b51c:	005b      	lsls	r3, r3, #1
 800b51e:	61fb      	str	r3, [r7, #28]
            break;
 800b520:	e008      	b.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800b522:	2408      	movs	r4, #8
 800b524:	193b      	adds	r3, r7, r4
 800b526:	0018      	movs	r0, r3
 800b528:	f000 f8fe 	bl	800b728 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800b52c:	193b      	adds	r3, r7, r4
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	61fb      	str	r3, [r7, #28]
            break;
 800b532:	46c0      	nop			@ (mov r8, r8)
        break;
 800b534:	e0ed      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 800b536:	4a31      	ldr	r2, [pc, #196]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b538:	2388      	movs	r3, #136	@ 0x88
 800b53a:	58d2      	ldr	r2, [r2, r3]
 800b53c:	2380      	movs	r3, #128	@ 0x80
 800b53e:	049b      	lsls	r3, r3, #18
 800b540:	4013      	ands	r3, r2
 800b542:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d005      	beq.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	2380      	movs	r3, #128	@ 0x80
 800b54e:	049b      	lsls	r3, r3, #18
 800b550:	429a      	cmp	r2, r3
 800b552:	d011      	beq.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 800b554:	e019      	b.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800b556:	4b29      	ldr	r3, [pc, #164]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b558:	689a      	ldr	r2, [r3, #8]
 800b55a:	23e0      	movs	r3, #224	@ 0xe0
 800b55c:	01db      	lsls	r3, r3, #7
 800b55e:	4013      	ands	r3, r2
 800b560:	d104      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 800b562:	f7ff f8eb 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b566:	0003      	movs	r3, r0
 800b568:	61fb      	str	r3, [r7, #28]
            break;
 800b56a:	e00e      	b.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 800b56c:	f7ff f8e6 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800b570:	0003      	movs	r3, r0
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	61fb      	str	r3, [r7, #28]
            break;
 800b576:	e008      	b.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800b578:	2408      	movs	r4, #8
 800b57a:	193b      	adds	r3, r7, r4
 800b57c:	0018      	movs	r0, r3
 800b57e:	f000 f8d3 	bl	800b728 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800b582:	193b      	adds	r3, r7, r4
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	61fb      	str	r3, [r7, #28]
            break;
 800b588:	46c0      	nop			@ (mov r8, r8)
        break;
 800b58a:	e0c2      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800b58c:	4a1b      	ldr	r2, [pc, #108]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b58e:	2388      	movs	r3, #136	@ 0x88
 800b590:	58d2      	ldr	r2, [r2, r3]
 800b592:	23c0      	movs	r3, #192	@ 0xc0
 800b594:	051b      	lsls	r3, r3, #20
 800b596:	4013      	ands	r3, r2
 800b598:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	23c0      	movs	r3, #192	@ 0xc0
 800b59e:	051b      	lsls	r3, r3, #20
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d017      	beq.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	23c0      	movs	r3, #192	@ 0xc0
 800b5a8:	051b      	lsls	r3, r3, #20
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d84a      	bhi.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	2380      	movs	r3, #128	@ 0x80
 800b5b2:	051b      	lsls	r3, r3, #20
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d039      	beq.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	2380      	movs	r3, #128	@ 0x80
 800b5bc:	051b      	lsls	r3, r3, #20
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d840      	bhi.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d03a      	beq.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	2380      	movs	r3, #128	@ 0x80
 800b5cc:	04db      	lsls	r3, r3, #19
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d003      	beq.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 800b5d2:	e037      	b.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 800b5d6:	61fb      	str	r3, [r7, #28]
            break;
 800b5d8:	e037      	b.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b5da:	4b08      	ldr	r3, [pc, #32]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2202      	movs	r2, #2
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d130      	bne.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800b5e6:	4b05      	ldr	r3, [pc, #20]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2208      	movs	r2, #8
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	d00b      	beq.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800b5f0:	4b02      	ldr	r3, [pc, #8]	@ (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	091b      	lsrs	r3, r3, #4
 800b5f6:	220f      	movs	r2, #15
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	e00b      	b.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 800b5fc:	40021000 	.word	0x40021000
 800b600:	00f42400 	.word	0x00f42400
 800b604:	02dc6c00 	.word	0x02dc6c00
 800b608:	4a44      	ldr	r2, [pc, #272]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800b60a:	2394      	movs	r3, #148	@ 0x94
 800b60c:	58d3      	ldr	r3, [r2, r3]
 800b60e:	0a1b      	lsrs	r3, r3, #8
 800b610:	220f      	movs	r2, #15
 800b612:	4013      	ands	r3, r2
 800b614:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	2b0b      	cmp	r3, #11
 800b61a:	d901      	bls.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 800b61c:	230b      	movs	r3, #11
 800b61e:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 800b620:	4b3f      	ldr	r3, [pc, #252]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800b622:	69ba      	ldr	r2, [r7, #24]
 800b624:	0092      	lsls	r2, r2, #2
 800b626:	58d3      	ldr	r3, [r2, r3]
 800b628:	61fb      	str	r3, [r7, #28]
            break;
 800b62a:	e00d      	b.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800b62c:	2408      	movs	r4, #8
 800b62e:	193b      	adds	r3, r7, r4
 800b630:	0018      	movs	r0, r3
 800b632:	f000 f879 	bl	800b728 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800b636:	193b      	adds	r3, r7, r4
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	61fb      	str	r3, [r7, #28]
            break;
 800b63c:	e005      	b.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	61fb      	str	r3, [r7, #28]
            break;
 800b642:	e002      	b.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 800b644:	46c0      	nop			@ (mov r8, r8)
 800b646:	e064      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b648:	46c0      	nop			@ (mov r8, r8)
        break;
 800b64a:	e062      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b64c:	4a33      	ldr	r2, [pc, #204]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800b64e:	2388      	movs	r3, #136	@ 0x88
 800b650:	58d2      	ldr	r2, [r2, r3]
 800b652:	23c0      	movs	r3, #192	@ 0xc0
 800b654:	051b      	lsls	r3, r3, #20
 800b656:	4013      	ands	r3, r2
 800b658:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	23c0      	movs	r3, #192	@ 0xc0
 800b65e:	051b      	lsls	r3, r3, #20
 800b660:	429a      	cmp	r2, r3
 800b662:	d017      	beq.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	23c0      	movs	r3, #192	@ 0xc0
 800b668:	051b      	lsls	r3, r3, #20
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d844      	bhi.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	2380      	movs	r3, #128	@ 0x80
 800b672:	051b      	lsls	r3, r3, #20
 800b674:	429a      	cmp	r2, r3
 800b676:	d033      	beq.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	2380      	movs	r3, #128	@ 0x80
 800b67c:	051b      	lsls	r3, r3, #20
 800b67e:	429a      	cmp	r2, r3
 800b680:	d83a      	bhi.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d034      	beq.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	2380      	movs	r3, #128	@ 0x80
 800b68c:	04db      	lsls	r3, r3, #19
 800b68e:	429a      	cmp	r2, r3
 800b690:	d003      	beq.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 800b692:	e031      	b.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 800b694:	4b23      	ldr	r3, [pc, #140]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 800b696:	61fb      	str	r3, [r7, #28]
            break;
 800b698:	e031      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b69a:	4b20      	ldr	r3, [pc, #128]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d12a      	bne.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800b6a6:	4b1d      	ldr	r3, [pc, #116]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2208      	movs	r2, #8
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	d005      	beq.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 800b6b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	091b      	lsrs	r3, r3, #4
 800b6b6:	220f      	movs	r2, #15
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	e005      	b.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800b6bc:	4a17      	ldr	r2, [pc, #92]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800b6be:	2394      	movs	r3, #148	@ 0x94
 800b6c0:	58d3      	ldr	r3, [r2, r3]
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	220f      	movs	r2, #15
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	2b0b      	cmp	r3, #11
 800b6ce:	d901      	bls.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 800b6d0:	230b      	movs	r3, #11
 800b6d2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 800b6d4:	4b12      	ldr	r3, [pc, #72]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	0092      	lsls	r2, r2, #2
 800b6da:	58d3      	ldr	r3, [r2, r3]
 800b6dc:	61fb      	str	r3, [r7, #28]
            break;
 800b6de:	e00d      	b.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800b6e0:	2408      	movs	r4, #8
 800b6e2:	193b      	adds	r3, r7, r4
 800b6e4:	0018      	movs	r0, r3
 800b6e6:	f000 f81f 	bl	800b728 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800b6ea:	193b      	adds	r3, r7, r4
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	61fb      	str	r3, [r7, #28]
            break;
 800b6f0:	e005      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	61fb      	str	r3, [r7, #28]
            break;
 800b6f6:	e002      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 800b6f8:	46c0      	nop			@ (mov r8, r8)
 800b6fa:	e00a      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800b6fc:	46c0      	nop			@ (mov r8, r8)
        break;
 800b6fe:	e008      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800b700:	46c0      	nop			@ (mov r8, r8)
 800b702:	e006      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800b704:	46c0      	nop			@ (mov r8, r8)
 800b706:	e004      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800b708:	46c0      	nop			@ (mov r8, r8)
 800b70a:	e002      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800b70c:	46c0      	nop			@ (mov r8, r8)
 800b70e:	e000      	b.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800b710:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 800b712:	69fb      	ldr	r3, [r7, #28]
}
 800b714:	0018      	movs	r0, r3
 800b716:	46bd      	mov	sp, r7
 800b718:	b009      	add	sp, #36	@ 0x24
 800b71a:	bd90      	pop	{r4, r7, pc}
 800b71c:	40021000 	.word	0x40021000
 800b720:	080120d8 	.word	0x080120d8
 800b724:	02dc6c00 	.word	0x02dc6c00

0800b728 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b088      	sub	sp, #32
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b730:	4b58      	ldr	r3, [pc, #352]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	0a1b      	lsrs	r3, r3, #8
 800b736:	227f      	movs	r2, #127	@ 0x7f
 800b738:	4013      	ands	r3, r2
 800b73a:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b73c:	4b55      	ldr	r3, [pc, #340]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	2203      	movs	r2, #3
 800b742:	4013      	ands	r3, r2
 800b744:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800b746:	4b53      	ldr	r3, [pc, #332]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	091b      	lsrs	r3, r3, #4
 800b74c:	2207      	movs	r2, #7
 800b74e:	4013      	ands	r3, r2
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800b754:	4b4f      	ldr	r3, [pc, #316]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2208      	movs	r2, #8
 800b75a:	4013      	ands	r3, r2
 800b75c:	d005      	beq.n	800b76a <HAL_RCCEx_GetPLLClockFreq+0x42>
 800b75e:	4b4d      	ldr	r3, [pc, #308]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	091b      	lsrs	r3, r3, #4
 800b764:	220f      	movs	r2, #15
 800b766:	4013      	ands	r3, r2
 800b768:	e005      	b.n	800b776 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 800b76a:	4a4a      	ldr	r2, [pc, #296]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b76c:	2394      	movs	r3, #148	@ 0x94
 800b76e:	58d3      	ldr	r3, [r2, r3]
 800b770:	0a1b      	lsrs	r3, r3, #8
 800b772:	220f      	movs	r2, #15
 800b774:	4013      	ands	r3, r2
 800b776:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b0b      	cmp	r3, #11
 800b77c:	d901      	bls.n	800b782 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 800b77e:	230b      	movs	r3, #11
 800b780:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b03      	cmp	r3, #3
 800b786:	d020      	beq.n	800b7ca <HAL_RCCEx_GetPLLClockFreq+0xa2>
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d827      	bhi.n	800b7de <HAL_RCCEx_GetPLLClockFreq+0xb6>
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d00c      	beq.n	800b7ae <HAL_RCCEx_GetPLLClockFreq+0x86>
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	2b02      	cmp	r3, #2
 800b798:	d121      	bne.n	800b7de <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 800b79a:	68f9      	ldr	r1, [r7, #12]
 800b79c:	483e      	ldr	r0, [pc, #248]	@ (800b898 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 800b79e:	f7f4 fccf 	bl	8000140 <__udivsi3>
 800b7a2:	0003      	movs	r3, r0
 800b7a4:	001a      	movs	r2, r3
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	4353      	muls	r3, r2
 800b7aa:	61fb      	str	r3, [r7, #28]
      break;
 800b7ac:	e025      	b.n	800b7fa <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800b7ae:	4b3b      	ldr	r3, [pc, #236]	@ (800b89c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	0092      	lsls	r2, r2, #2
 800b7b4:	58d3      	ldr	r3, [r2, r3]
 800b7b6:	68f9      	ldr	r1, [r7, #12]
 800b7b8:	0018      	movs	r0, r3
 800b7ba:	f7f4 fcc1 	bl	8000140 <__udivsi3>
 800b7be:	0003      	movs	r3, r0
 800b7c0:	001a      	movs	r2, r3
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	4353      	muls	r3, r2
 800b7c6:	61fb      	str	r3, [r7, #28]
      break;
 800b7c8:	e017      	b.n	800b7fa <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 800b7ca:	68f9      	ldr	r1, [r7, #12]
 800b7cc:	4834      	ldr	r0, [pc, #208]	@ (800b8a0 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 800b7ce:	f7f4 fcb7 	bl	8000140 <__udivsi3>
 800b7d2:	0003      	movs	r3, r0
 800b7d4:	001a      	movs	r2, r3
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	4353      	muls	r3, r2
 800b7da:	61fb      	str	r3, [r7, #28]
      break;
 800b7dc:	e00d      	b.n	800b7fa <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800b7de:	4b2f      	ldr	r3, [pc, #188]	@ (800b89c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 800b7e0:	69ba      	ldr	r2, [r7, #24]
 800b7e2:	0092      	lsls	r2, r2, #2
 800b7e4:	58d3      	ldr	r3, [r2, r3]
 800b7e6:	68f9      	ldr	r1, [r7, #12]
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f7f4 fca9 	bl	8000140 <__udivsi3>
 800b7ee:	0003      	movs	r3, r0
 800b7f0:	001a      	movs	r2, r3
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	4353      	muls	r3, r2
 800b7f6:	61fb      	str	r3, [r7, #28]
      break;
 800b7f8:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 800b7fa:	4b26      	ldr	r3, [pc, #152]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b7fc:	68da      	ldr	r2, [r3, #12]
 800b7fe:	2380      	movs	r3, #128	@ 0x80
 800b800:	025b      	lsls	r3, r3, #9
 800b802:	4013      	ands	r3, r2
 800b804:	d00e      	beq.n	800b824 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800b806:	4b23      	ldr	r3, [pc, #140]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b808:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 800b80a:	0c5b      	lsrs	r3, r3, #17
 800b80c:	221f      	movs	r2, #31
 800b80e:	4013      	ands	r3, r2
 800b810:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800b812:	0019      	movs	r1, r3
 800b814:	69f8      	ldr	r0, [r7, #28]
 800b816:	f7f4 fc93 	bl	8000140 <__udivsi3>
 800b81a:	0003      	movs	r3, r0
 800b81c:	001a      	movs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	601a      	str	r2, [r3, #0]
 800b822:	e002      	b.n	800b82a <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 800b82a:	4b1a      	ldr	r3, [pc, #104]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b82c:	68da      	ldr	r2, [r3, #12]
 800b82e:	2380      	movs	r3, #128	@ 0x80
 800b830:	045b      	lsls	r3, r3, #17
 800b832:	4013      	ands	r3, r2
 800b834:	d00e      	beq.n	800b854 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800b836:	4b17      	ldr	r3, [pc, #92]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b838:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 800b83a:	0e5b      	lsrs	r3, r3, #25
 800b83c:	2207      	movs	r2, #7
 800b83e:	4013      	ands	r3, r2
 800b840:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800b842:	0019      	movs	r1, r3
 800b844:	69f8      	ldr	r0, [r7, #28]
 800b846:	f7f4 fc7b 	bl	8000140 <__udivsi3>
 800b84a:	0003      	movs	r3, r0
 800b84c:	001a      	movs	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	605a      	str	r2, [r3, #4]
 800b852:	e002      	b.n	800b85a <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 800b85a:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b85c:	68da      	ldr	r2, [r3, #12]
 800b85e:	2380      	movs	r3, #128	@ 0x80
 800b860:	055b      	lsls	r3, r3, #21
 800b862:	4013      	ands	r3, r2
 800b864:	d00e      	beq.n	800b884 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800b866:	4b0b      	ldr	r3, [pc, #44]	@ (800b894 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800b868:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 800b86a:	0f5b      	lsrs	r3, r3, #29
 800b86c:	2207      	movs	r2, #7
 800b86e:	4013      	ands	r3, r2
 800b870:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800b872:	0019      	movs	r1, r3
 800b874:	69f8      	ldr	r0, [r7, #28]
 800b876:	f7f4 fc63 	bl	8000140 <__udivsi3>
 800b87a:	0003      	movs	r3, r0
 800b87c:	001a      	movs	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 800b882:	e002      	b.n	800b88a <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	609a      	str	r2, [r3, #8]
}
 800b88a:	46c0      	nop			@ (mov r8, r8)
 800b88c:	46bd      	mov	sp, r7
 800b88e:	b008      	add	sp, #32
 800b890:	bd80      	pop	{r7, pc}
 800b892:	46c0      	nop			@ (mov r8, r8)
 800b894:	40021000 	.word	0x40021000
 800b898:	00f42400 	.word	0x00f42400
 800b89c:	080120d8 	.word	0x080120d8
 800b8a0:	003d0900 	.word	0x003d0900

0800b8a4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800b8ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b920 <HAL_RCCEx_CRSConfig+0x7c>)
 800b8ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8b0:	4b1b      	ldr	r3, [pc, #108]	@ (800b920 <HAL_RCCEx_CRSConfig+0x7c>)
 800b8b2:	2180      	movs	r1, #128	@ 0x80
 800b8b4:	0249      	lsls	r1, r1, #9
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 800b8ba:	4b19      	ldr	r3, [pc, #100]	@ (800b920 <HAL_RCCEx_CRSConfig+0x7c>)
 800b8bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8be:	4b18      	ldr	r3, [pc, #96]	@ (800b920 <HAL_RCCEx_CRSConfig+0x7c>)
 800b8c0:	4918      	ldr	r1, [pc, #96]	@ (800b924 <HAL_RCCEx_CRSConfig+0x80>)
 800b8c2:	400a      	ands	r2, r1
 800b8c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	431a      	orrs	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	041b      	lsls	r3, r3, #16
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <HAL_RCCEx_CRSConfig+0x84>)
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b928 <HAL_RCCEx_CRSConfig+0x84>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a0c      	ldr	r2, [pc, #48]	@ (800b92c <HAL_RCCEx_CRSConfig+0x88>)
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	0019      	movs	r1, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	021a      	lsls	r2, r3, #8
 800b904:	4b08      	ldr	r3, [pc, #32]	@ (800b928 <HAL_RCCEx_CRSConfig+0x84>)
 800b906:	430a      	orrs	r2, r1
 800b908:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800b90a:	4b07      	ldr	r3, [pc, #28]	@ (800b928 <HAL_RCCEx_CRSConfig+0x84>)
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	4b06      	ldr	r3, [pc, #24]	@ (800b928 <HAL_RCCEx_CRSConfig+0x84>)
 800b910:	2160      	movs	r1, #96	@ 0x60
 800b912:	430a      	orrs	r2, r1
 800b914:	601a      	str	r2, [r3, #0]
}
 800b916:	46c0      	nop			@ (mov r8, r8)
 800b918:	46bd      	mov	sp, r7
 800b91a:	b004      	add	sp, #16
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	46c0      	nop			@ (mov r8, r8)
 800b920:	40021000 	.word	0x40021000
 800b924:	fffeffff 	.word	0xfffeffff
 800b928:	40006c00 	.word	0x40006c00
 800b92c:	ffffc0ff 	.word	0xffffc0ff

0800b930 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b938:	210f      	movs	r1, #15
 800b93a:	187b      	adds	r3, r7, r1
 800b93c:	2201      	movs	r2, #1
 800b93e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d100      	bne.n	800b948 <HAL_RTC_Init+0x18>
 800b946:	e08b      	b.n	800ba60 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 800b948:	187b      	adds	r3, r7, r1
 800b94a:	2200      	movs	r2, #0
 800b94c:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	222d      	movs	r2, #45	@ 0x2d
 800b952:	5c9b      	ldrb	r3, [r3, r2]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d107      	bne.n	800b96a <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	222c      	movs	r2, #44	@ 0x2c
 800b95e:	2100      	movs	r1, #0
 800b960:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	0018      	movs	r0, r3
 800b966:	f7f9 fd25 	bl	80053b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	222d      	movs	r2, #45	@ 0x2d
 800b96e:	2102      	movs	r1, #2
 800b970:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b972:	4b3f      	ldr	r3, [pc, #252]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b974:	22ca      	movs	r2, #202	@ 0xca
 800b976:	625a      	str	r2, [r3, #36]	@ 0x24
 800b978:	4b3d      	ldr	r3, [pc, #244]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b97a:	2253      	movs	r2, #83	@ 0x53
 800b97c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	0018      	movs	r0, r3
 800b982:	f000 fab9 	bl	800bef8 <RTC_EnterInitMode>
 800b986:	1e03      	subs	r3, r0, #0
 800b988:	d00b      	beq.n	800b9a2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b98a:	4b39      	ldr	r3, [pc, #228]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b98c:	22ff      	movs	r2, #255	@ 0xff
 800b98e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	222d      	movs	r2, #45	@ 0x2d
 800b994:	2104      	movs	r1, #4
 800b996:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 800b998:	230f      	movs	r3, #15
 800b99a:	18fb      	adds	r3, r7, r3
 800b99c:	2201      	movs	r2, #1
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	e05e      	b.n	800ba60 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b9a2:	4b33      	ldr	r3, [pc, #204]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9a4:	699a      	ldr	r2, [r3, #24]
 800b9a6:	4b32      	ldr	r3, [pc, #200]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9a8:	4932      	ldr	r1, [pc, #200]	@ (800ba74 <HAL_RTC_Init+0x144>)
 800b9aa:	400a      	ands	r2, r1
 800b9ac:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b9ae:	4b30      	ldr	r3, [pc, #192]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9b0:	6999      	ldr	r1, [r3, #24]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	4b2b      	ldr	r3, [pc, #172]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68d9      	ldr	r1, [r3, #12]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	041a      	lsls	r2, r3, #16
 800b9d2:	4b27      	ldr	r3, [pc, #156]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b9d8:	4b25      	ldr	r3, [pc, #148]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	4a26      	ldr	r2, [pc, #152]	@ (800ba78 <HAL_RTC_Init+0x148>)
 800b9de:	4013      	ands	r3, r2
 800b9e0:	0019      	movs	r1, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	4b20      	ldr	r3, [pc, #128]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b9f2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	4b1e      	ldr	r3, [pc, #120]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800b9f8:	2180      	movs	r1, #128	@ 0x80
 800b9fa:	438a      	bics	r2, r1
 800b9fc:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b9fe:	4b1c      	ldr	r3, [pc, #112]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	2220      	movs	r2, #32
 800ba04:	4013      	ands	r3, r2
 800ba06:	d110      	bne.n	800ba2a <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f000 fa4e 	bl	800beac <HAL_RTC_WaitForSynchro>
 800ba10:	1e03      	subs	r3, r0, #0
 800ba12:	d00a      	beq.n	800ba2a <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba14:	4b16      	ldr	r3, [pc, #88]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800ba16:	22ff      	movs	r2, #255	@ 0xff
 800ba18:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	222d      	movs	r2, #45	@ 0x2d
 800ba1e:	2104      	movs	r1, #4
 800ba20:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 800ba22:	230f      	movs	r3, #15
 800ba24:	18fb      	adds	r3, r7, r3
 800ba26:	2201      	movs	r2, #1
 800ba28:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 800ba2a:	230f      	movs	r3, #15
 800ba2c:	18fb      	adds	r3, r7, r3
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d115      	bne.n	800ba60 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 800ba34:	4b0e      	ldr	r3, [pc, #56]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	00db      	lsls	r3, r3, #3
 800ba3a:	08d9      	lsrs	r1, r3, #3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a1a      	ldr	r2, [r3, #32]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	431a      	orrs	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	4b08      	ldr	r3, [pc, #32]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba52:	4b07      	ldr	r3, [pc, #28]	@ (800ba70 <HAL_RTC_Init+0x140>)
 800ba54:	22ff      	movs	r2, #255	@ 0xff
 800ba56:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	222d      	movs	r2, #45	@ 0x2d
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 800ba60:	230f      	movs	r3, #15
 800ba62:	18fb      	adds	r3, r7, r3
 800ba64:	781b      	ldrb	r3, [r3, #0]
}
 800ba66:	0018      	movs	r0, r3
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	b004      	add	sp, #16
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	46c0      	nop			@ (mov r8, r8)
 800ba70:	40002800 	.word	0x40002800
 800ba74:	fb8fffbf 	.word	0xfb8fffbf
 800ba78:	ffffe0ff 	.word	0xffffe0ff

0800ba7c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ba7c:	b590      	push	{r4, r7, lr}
 800ba7e:	b087      	sub	sp, #28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	222c      	movs	r2, #44	@ 0x2c
 800ba8c:	5c9b      	ldrb	r3, [r3, r2]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d101      	bne.n	800ba96 <HAL_RTC_SetTime+0x1a>
 800ba92:	2302      	movs	r3, #2
 800ba94:	e0a7      	b.n	800bbe6 <HAL_RTC_SetTime+0x16a>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	222c      	movs	r2, #44	@ 0x2c
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	222d      	movs	r2, #45	@ 0x2d
 800baa2:	2102      	movs	r1, #2
 800baa4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800baa6:	4b52      	ldr	r3, [pc, #328]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800baa8:	22ca      	movs	r2, #202	@ 0xca
 800baaa:	625a      	str	r2, [r3, #36]	@ 0x24
 800baac:	4b50      	ldr	r3, [pc, #320]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800baae:	2253      	movs	r2, #83	@ 0x53
 800bab0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	0018      	movs	r0, r3
 800bab6:	f000 fa1f 	bl	800bef8 <RTC_EnterInitMode>
 800baba:	1e03      	subs	r3, r0, #0
 800babc:	d00c      	beq.n	800bad8 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800babe:	4b4c      	ldr	r3, [pc, #304]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bac0:	22ff      	movs	r2, #255	@ 0xff
 800bac2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	222d      	movs	r2, #45	@ 0x2d
 800bac8:	2104      	movs	r1, #4
 800baca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	222c      	movs	r2, #44	@ 0x2c
 800bad0:	2100      	movs	r1, #0
 800bad2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e086      	b.n	800bbe6 <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bad8:	4b45      	ldr	r3, [pc, #276]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	23c0      	movs	r3, #192	@ 0xc0
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	401a      	ands	r2, r3
 800bae2:	2380      	movs	r3, #128	@ 0x80
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d053      	beq.n	800bb92 <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d124      	bne.n	800bb3a <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800baf0:	4b3f      	ldr	r3, [pc, #252]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	2240      	movs	r2, #64	@ 0x40
 800baf6:	4013      	ands	r3, r2
 800baf8:	d102      	bne.n	800bb00 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2200      	movs	r2, #0
 800bafe:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	0018      	movs	r0, r3
 800bb06:	f000 fa23 	bl	800bf50 <RTC_ByteToBcd2>
 800bb0a:	0003      	movs	r3, r0
 800bb0c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	0018      	movs	r0, r3
 800bb14:	f000 fa1c 	bl	800bf50 <RTC_ByteToBcd2>
 800bb18:	0003      	movs	r3, r0
 800bb1a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb1c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	789b      	ldrb	r3, [r3, #2]
 800bb22:	0018      	movs	r0, r3
 800bb24:	f000 fa14 	bl	800bf50 <RTC_ByteToBcd2>
 800bb28:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb2a:	0022      	movs	r2, r4
 800bb2c:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	78db      	ldrb	r3, [r3, #3]
 800bb32:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb34:	4313      	orrs	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	e016      	b.n	800bb68 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bb3a:	4b2d      	ldr	r3, [pc, #180]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	2240      	movs	r2, #64	@ 0x40
 800bb40:	4013      	ands	r3, r2
 800bb42:	d102      	bne.n	800bb4a <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2200      	movs	r2, #0
 800bb48:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb56:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb5c:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	78db      	ldrb	r3, [r3, #3]
 800bb62:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb64:	4313      	orrs	r3, r2
 800bb66:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800bb68:	4b21      	ldr	r3, [pc, #132]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	4921      	ldr	r1, [pc, #132]	@ (800bbf4 <HAL_RTC_SetTime+0x178>)
 800bb6e:	400a      	ands	r2, r1
 800bb70:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800bb72:	4b1f      	ldr	r3, [pc, #124]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb74:	699a      	ldr	r2, [r3, #24]
 800bb76:	4b1e      	ldr	r3, [pc, #120]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb78:	491f      	ldr	r1, [pc, #124]	@ (800bbf8 <HAL_RTC_SetTime+0x17c>)
 800bb7a:	400a      	ands	r2, r1
 800bb7c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800bb7e:	4b1c      	ldr	r3, [pc, #112]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb80:	6999      	ldr	r1, [r3, #24]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	68da      	ldr	r2, [r3, #12]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	4b18      	ldr	r3, [pc, #96]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bb92:	4b17      	ldr	r3, [pc, #92]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb94:	68da      	ldr	r2, [r3, #12]
 800bb96:	4b16      	ldr	r3, [pc, #88]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bb98:	2180      	movs	r1, #128	@ 0x80
 800bb9a:	438a      	bics	r2, r1
 800bb9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bb9e:	4b14      	ldr	r3, [pc, #80]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bba0:	699b      	ldr	r3, [r3, #24]
 800bba2:	2220      	movs	r2, #32
 800bba4:	4013      	ands	r3, r2
 800bba6:	d112      	bne.n	800bbce <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	0018      	movs	r0, r3
 800bbac:	f000 f97e 	bl	800beac <HAL_RTC_WaitForSynchro>
 800bbb0:	1e03      	subs	r3, r0, #0
 800bbb2:	d00c      	beq.n	800bbce <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bbb6:	22ff      	movs	r2, #255	@ 0xff
 800bbb8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	222d      	movs	r2, #45	@ 0x2d
 800bbbe:	2104      	movs	r1, #4
 800bbc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	222c      	movs	r2, #44	@ 0x2c
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e00b      	b.n	800bbe6 <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbce:	4b08      	ldr	r3, [pc, #32]	@ (800bbf0 <HAL_RTC_SetTime+0x174>)
 800bbd0:	22ff      	movs	r2, #255	@ 0xff
 800bbd2:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	222d      	movs	r2, #45	@ 0x2d
 800bbd8:	2101      	movs	r1, #1
 800bbda:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	222c      	movs	r2, #44	@ 0x2c
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
  }
}
 800bbe6:	0018      	movs	r0, r3
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b007      	add	sp, #28
 800bbec:	bd90      	pop	{r4, r7, pc}
 800bbee:	46c0      	nop			@ (mov r8, r8)
 800bbf0:	40002800 	.word	0x40002800
 800bbf4:	007f7f7f 	.word	0x007f7f7f
 800bbf8:	fffbffff 	.word	0xfffbffff

0800bbfc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800bc08:	4b2c      	ldr	r3, [pc, #176]	@ (800bcbc <HAL_RTC_GetTime+0xc0>)
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bc10:	4b2a      	ldr	r3, [pc, #168]	@ (800bcbc <HAL_RTC_GetTime+0xc0>)
 800bc12:	68da      	ldr	r2, [r3, #12]
 800bc14:	23c0      	movs	r3, #192	@ 0xc0
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	401a      	ands	r2, r3
 800bc1a:	2380      	movs	r3, #128	@ 0x80
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d047      	beq.n	800bcb2 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800bc22:	4b26      	ldr	r3, [pc, #152]	@ (800bcbc <HAL_RTC_GetTime+0xc0>)
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	045b      	lsls	r3, r3, #17
 800bc28:	0c5a      	lsrs	r2, r3, #17
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800bc2e:	4b23      	ldr	r3, [pc, #140]	@ (800bcbc <HAL_RTC_GetTime+0xc0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a23      	ldr	r2, [pc, #140]	@ (800bcc0 <HAL_RTC_GetTime+0xc4>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	0c1b      	lsrs	r3, r3, #16
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	223f      	movs	r2, #63	@ 0x3f
 800bc40:	4013      	ands	r3, r2
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	0a1b      	lsrs	r3, r3, #8
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	227f      	movs	r2, #127	@ 0x7f
 800bc50:	4013      	ands	r3, r2
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	227f      	movs	r2, #127	@ 0x7f
 800bc5e:	4013      	ands	r3, r2
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	0d9b      	lsrs	r3, r3, #22
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4013      	ands	r3, r2
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d11a      	bne.n	800bcb2 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	0018      	movs	r0, r3
 800bc82:	f000 f98d 	bl	800bfa0 <RTC_Bcd2ToByte>
 800bc86:	0003      	movs	r3, r0
 800bc88:	001a      	movs	r2, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	785b      	ldrb	r3, [r3, #1]
 800bc92:	0018      	movs	r0, r3
 800bc94:	f000 f984 	bl	800bfa0 <RTC_Bcd2ToByte>
 800bc98:	0003      	movs	r3, r0
 800bc9a:	001a      	movs	r2, r3
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	789b      	ldrb	r3, [r3, #2]
 800bca4:	0018      	movs	r0, r3
 800bca6:	f000 f97b 	bl	800bfa0 <RTC_Bcd2ToByte>
 800bcaa:	0003      	movs	r3, r0
 800bcac:	001a      	movs	r2, r3
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	b006      	add	sp, #24
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	40002800 	.word	0x40002800
 800bcc0:	007f7f7f 	.word	0x007f7f7f

0800bcc4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	222c      	movs	r2, #44	@ 0x2c
 800bcd4:	5c9b      	ldrb	r3, [r3, r2]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d101      	bne.n	800bcde <HAL_RTC_SetDate+0x1a>
 800bcda:	2302      	movs	r3, #2
 800bcdc:	e090      	b.n	800be00 <HAL_RTC_SetDate+0x13c>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	222c      	movs	r2, #44	@ 0x2c
 800bce2:	2101      	movs	r1, #1
 800bce4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	222d      	movs	r2, #45	@ 0x2d
 800bcea:	2102      	movs	r1, #2
 800bcec:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10e      	bne.n	800bd12 <HAL_RTC_SetDate+0x4e>
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	785b      	ldrb	r3, [r3, #1]
 800bcf8:	001a      	movs	r2, r3
 800bcfa:	2310      	movs	r3, #16
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	d008      	beq.n	800bd12 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	785b      	ldrb	r3, [r3, #1]
 800bd04:	2210      	movs	r2, #16
 800bd06:	4393      	bics	r3, r2
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	330a      	adds	r3, #10
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d11c      	bne.n	800bd52 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	78db      	ldrb	r3, [r3, #3]
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	f000 f917 	bl	800bf50 <RTC_ByteToBcd2>
 800bd22:	0003      	movs	r3, r0
 800bd24:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	f000 f910 	bl	800bf50 <RTC_ByteToBcd2>
 800bd30:	0003      	movs	r3, r0
 800bd32:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bd34:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	789b      	ldrb	r3, [r3, #2]
 800bd3a:	0018      	movs	r0, r3
 800bd3c:	f000 f908 	bl	800bf50 <RTC_ByteToBcd2>
 800bd40:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bd42:	0022      	movs	r2, r4
 800bd44:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	e00e      	b.n	800bd70 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	78db      	ldrb	r3, [r3, #3]
 800bd56:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	785b      	ldrb	r3, [r3, #1]
 800bd5c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bd5e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bd64:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd70:	4b25      	ldr	r3, [pc, #148]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bd72:	22ca      	movs	r2, #202	@ 0xca
 800bd74:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd76:	4b24      	ldr	r3, [pc, #144]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bd78:	2253      	movs	r2, #83	@ 0x53
 800bd7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	0018      	movs	r0, r3
 800bd80:	f000 f8ba 	bl	800bef8 <RTC_EnterInitMode>
 800bd84:	1e03      	subs	r3, r0, #0
 800bd86:	d00c      	beq.n	800bda2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd88:	4b1f      	ldr	r3, [pc, #124]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bd8a:	22ff      	movs	r2, #255	@ 0xff
 800bd8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	222d      	movs	r2, #45	@ 0x2d
 800bd92:	2104      	movs	r1, #4
 800bd94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	222c      	movs	r2, #44	@ 0x2c
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e02e      	b.n	800be00 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800bda2:	4b19      	ldr	r3, [pc, #100]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	4919      	ldr	r1, [pc, #100]	@ (800be0c <HAL_RTC_SetDate+0x148>)
 800bda8:	400a      	ands	r2, r1
 800bdaa:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bdac:	4b16      	ldr	r3, [pc, #88]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bdae:	68da      	ldr	r2, [r3, #12]
 800bdb0:	4b15      	ldr	r3, [pc, #84]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bdb2:	2180      	movs	r1, #128	@ 0x80
 800bdb4:	438a      	bics	r2, r1
 800bdb6:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bdb8:	4b13      	ldr	r3, [pc, #76]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	d112      	bne.n	800bde8 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	0018      	movs	r0, r3
 800bdc6:	f000 f871 	bl	800beac <HAL_RTC_WaitForSynchro>
 800bdca:	1e03      	subs	r3, r0, #0
 800bdcc:	d00c      	beq.n	800bde8 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdce:	4b0e      	ldr	r3, [pc, #56]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bdd0:	22ff      	movs	r2, #255	@ 0xff
 800bdd2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	222d      	movs	r2, #45	@ 0x2d
 800bdd8:	2104      	movs	r1, #4
 800bdda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	222c      	movs	r2, #44	@ 0x2c
 800bde0:	2100      	movs	r1, #0
 800bde2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e00b      	b.n	800be00 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bde8:	4b07      	ldr	r3, [pc, #28]	@ (800be08 <HAL_RTC_SetDate+0x144>)
 800bdea:	22ff      	movs	r2, #255	@ 0xff
 800bdec:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	222d      	movs	r2, #45	@ 0x2d
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	222c      	movs	r2, #44	@ 0x2c
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
  }
}
 800be00:	0018      	movs	r0, r3
 800be02:	46bd      	mov	sp, r7
 800be04:	b007      	add	sp, #28
 800be06:	bd90      	pop	{r4, r7, pc}
 800be08:	40002800 	.word	0x40002800
 800be0c:	00ffff3f 	.word	0x00ffff3f

0800be10 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800be1c:	4b21      	ldr	r3, [pc, #132]	@ (800bea4 <HAL_RTC_GetDate+0x94>)
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	4a21      	ldr	r2, [pc, #132]	@ (800bea8 <HAL_RTC_GetDate+0x98>)
 800be22:	4013      	ands	r3, r2
 800be24:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	0c1b      	lsrs	r3, r3, #16
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	0a1b      	lsrs	r3, r3, #8
 800be34:	b2db      	uxtb	r3, r3
 800be36:	221f      	movs	r2, #31
 800be38:	4013      	ands	r3, r2
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	223f      	movs	r2, #63	@ 0x3f
 800be46:	4013      	ands	r3, r2
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	0b5b      	lsrs	r3, r3, #13
 800be52:	b2db      	uxtb	r3, r3
 800be54:	2207      	movs	r2, #7
 800be56:	4013      	ands	r3, r2
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d11a      	bne.n	800be9a <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	78db      	ldrb	r3, [r3, #3]
 800be68:	0018      	movs	r0, r3
 800be6a:	f000 f899 	bl	800bfa0 <RTC_Bcd2ToByte>
 800be6e:	0003      	movs	r3, r0
 800be70:	001a      	movs	r2, r3
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	785b      	ldrb	r3, [r3, #1]
 800be7a:	0018      	movs	r0, r3
 800be7c:	f000 f890 	bl	800bfa0 <RTC_Bcd2ToByte>
 800be80:	0003      	movs	r3, r0
 800be82:	001a      	movs	r2, r3
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	789b      	ldrb	r3, [r3, #2]
 800be8c:	0018      	movs	r0, r3
 800be8e:	f000 f887 	bl	800bfa0 <RTC_Bcd2ToByte>
 800be92:	0003      	movs	r3, r0
 800be94:	001a      	movs	r2, r3
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	0018      	movs	r0, r3
 800be9e:	46bd      	mov	sp, r7
 800bea0:	b006      	add	sp, #24
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	40002800 	.word	0x40002800
 800bea8:	00ffff3f 	.word	0x00ffff3f

0800beac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800beb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bef4 <HAL_RTC_WaitForSynchro+0x48>)
 800beb6:	68da      	ldr	r2, [r3, #12]
 800beb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bef4 <HAL_RTC_WaitForSynchro+0x48>)
 800beba:	2120      	movs	r1, #32
 800bebc:	438a      	bics	r2, r1
 800bebe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bec0:	f7f9 fdca 	bl	8005a58 <HAL_GetTick>
 800bec4:	0003      	movs	r3, r0
 800bec6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bec8:	e00a      	b.n	800bee0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800beca:	f7f9 fdc5 	bl	8005a58 <HAL_GetTick>
 800bece:	0002      	movs	r2, r0
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	1ad2      	subs	r2, r2, r3
 800bed4:	23fa      	movs	r3, #250	@ 0xfa
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	429a      	cmp	r2, r3
 800beda:	d901      	bls.n	800bee0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bedc:	2303      	movs	r3, #3
 800bede:	e005      	b.n	800beec <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bee0:	4b04      	ldr	r3, [pc, #16]	@ (800bef4 <HAL_RTC_WaitForSynchro+0x48>)
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	2220      	movs	r2, #32
 800bee6:	4013      	ands	r3, r2
 800bee8:	d0ef      	beq.n	800beca <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	0018      	movs	r0, r3
 800beee:	46bd      	mov	sp, r7
 800bef0:	b004      	add	sp, #16
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	40002800 	.word	0x40002800

0800bef8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bf00:	4b12      	ldr	r3, [pc, #72]	@ (800bf4c <RTC_EnterInitMode+0x54>)
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	2240      	movs	r2, #64	@ 0x40
 800bf06:	4013      	ands	r3, r2
 800bf08:	d11a      	bne.n	800bf40 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bf0a:	4b10      	ldr	r3, [pc, #64]	@ (800bf4c <RTC_EnterInitMode+0x54>)
 800bf0c:	68da      	ldr	r2, [r3, #12]
 800bf0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf4c <RTC_EnterInitMode+0x54>)
 800bf10:	2180      	movs	r1, #128	@ 0x80
 800bf12:	430a      	orrs	r2, r1
 800bf14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bf16:	f7f9 fd9f 	bl	8005a58 <HAL_GetTick>
 800bf1a:	0003      	movs	r3, r0
 800bf1c:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bf1e:	e00a      	b.n	800bf36 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bf20:	f7f9 fd9a 	bl	8005a58 <HAL_GetTick>
 800bf24:	0002      	movs	r2, r0
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	1ad2      	subs	r2, r2, r3
 800bf2a:	23fa      	movs	r3, #250	@ 0xfa
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d901      	bls.n	800bf36 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e005      	b.n	800bf42 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bf36:	4b05      	ldr	r3, [pc, #20]	@ (800bf4c <RTC_EnterInitMode+0x54>)
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	2240      	movs	r2, #64	@ 0x40
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	d0ef      	beq.n	800bf20 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	0018      	movs	r0, r3
 800bf44:	46bd      	mov	sp, r7
 800bf46:	b004      	add	sp, #16
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	46c0      	nop			@ (mov r8, r8)
 800bf4c:	40002800 	.word	0x40002800

0800bf50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	0002      	movs	r2, r0
 800bf58:	1dfb      	adds	r3, r7, #7
 800bf5a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800bf60:	230b      	movs	r3, #11
 800bf62:	18fb      	adds	r3, r7, r3
 800bf64:	1dfa      	adds	r2, r7, #7
 800bf66:	7812      	ldrb	r2, [r2, #0]
 800bf68:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 800bf6a:	e008      	b.n	800bf7e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800bf72:	220b      	movs	r2, #11
 800bf74:	18bb      	adds	r3, r7, r2
 800bf76:	18ba      	adds	r2, r7, r2
 800bf78:	7812      	ldrb	r2, [r2, #0]
 800bf7a:	3a0a      	subs	r2, #10
 800bf7c:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 800bf7e:	210b      	movs	r1, #11
 800bf80:	187b      	adds	r3, r7, r1
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2b09      	cmp	r3, #9
 800bf86:	d8f1      	bhi.n	800bf6c <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	011b      	lsls	r3, r3, #4
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	187b      	adds	r3, r7, r1
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	b2db      	uxtb	r3, r3
}
 800bf98:	0018      	movs	r0, r3
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	b004      	add	sp, #16
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	0002      	movs	r2, r0
 800bfa8:	1dfb      	adds	r3, r7, #7
 800bfaa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800bfac:	1dfb      	adds	r3, r7, #7
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	091b      	lsrs	r3, r3, #4
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	001a      	movs	r2, r3
 800bfb6:	0013      	movs	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	189b      	adds	r3, r3, r2
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	1dfb      	adds	r3, r7, #7
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	210f      	movs	r1, #15
 800bfca:	400b      	ands	r3, r1
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	18d3      	adds	r3, r2, r3
 800bfd0:	b2db      	uxtb	r3, r3
}
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	b004      	add	sp, #16
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
 800bfe8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	222c      	movs	r2, #44	@ 0x2c
 800bfee:	5c9b      	ldrb	r3, [r3, r2]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d101      	bne.n	800bff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 800bff4:	2302      	movs	r3, #2
 800bff6:	e088      	b.n	800c10a <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	222c      	movs	r2, #44	@ 0x2c
 800bffc:	2101      	movs	r1, #1
 800bffe:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	222d      	movs	r2, #45	@ 0x2d
 800c004:	2102      	movs	r1, #2
 800c006:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 800c008:	4b42      	ldr	r3, [pc, #264]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c00a:	699a      	ldr	r2, [r3, #24]
 800c00c:	2380      	movs	r3, #128	@ 0x80
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	4013      	ands	r3, r2
 800c012:	d01c      	beq.n	800c04e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 800c014:	f7f9 fd20 	bl	8005a58 <HAL_GetTick>
 800c018:	0003      	movs	r3, r0
 800c01a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 800c01c:	e012      	b.n	800c044 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c01e:	f7f9 fd1b 	bl	8005a58 <HAL_GetTick>
 800c022:	0002      	movs	r2, r0
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	23fa      	movs	r3, #250	@ 0xfa
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d909      	bls.n	800c044 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	222d      	movs	r2, #45	@ 0x2d
 800c034:	2103      	movs	r1, #3
 800c036:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	222c      	movs	r2, #44	@ 0x2c
 800c03c:	2100      	movs	r1, #0
 800c03e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c040:	2303      	movs	r3, #3
 800c042:	e062      	b.n	800c10a <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 800c044:	4b33      	ldr	r3, [pc, #204]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	2204      	movs	r2, #4
 800c04a:	4013      	ands	r3, r2
 800c04c:	d1e7      	bne.n	800c01e <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800c04e:	4b31      	ldr	r3, [pc, #196]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c050:	699a      	ldr	r2, [r3, #24]
 800c052:	4b30      	ldr	r3, [pc, #192]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c054:	4930      	ldr	r1, [pc, #192]	@ (800c118 <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 800c056:	400a      	ands	r2, r1
 800c058:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800c05a:	4b2e      	ldr	r3, [pc, #184]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c05c:	2204      	movs	r2, #4
 800c05e:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 800c060:	f7f9 fcfa 	bl	8005a58 <HAL_GetTick>
 800c064:	0003      	movs	r3, r0
 800c066:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800c068:	e015      	b.n	800c096 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c06a:	f7f9 fcf5 	bl	8005a58 <HAL_GetTick>
 800c06e:	0002      	movs	r2, r0
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	1ad2      	subs	r2, r2, r3
 800c074:	23fa      	movs	r3, #250	@ 0xfa
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	429a      	cmp	r2, r3
 800c07a:	d90c      	bls.n	800c096 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c07c:	4b25      	ldr	r3, [pc, #148]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c07e:	22ff      	movs	r2, #255	@ 0xff
 800c080:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	222d      	movs	r2, #45	@ 0x2d
 800c086:	2103      	movs	r1, #3
 800c088:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	222c      	movs	r2, #44	@ 0x2c
 800c08e:	2100      	movs	r1, #0
 800c090:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e039      	b.n	800c10a <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800c096:	4b1f      	ldr	r3, [pc, #124]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	2204      	movs	r2, #4
 800c09c:	4013      	ands	r3, r2
 800c09e:	d0e4      	beq.n	800c06a <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	0419      	lsls	r1, r3, #16
 800c0a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800c0ac:	4b19      	ldr	r3, [pc, #100]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	2207      	movs	r2, #7
 800c0b2:	4393      	bics	r3, r2
 800c0b4:	0019      	movs	r1, r3
 800c0b6:	4b17      	ldr	r3, [pc, #92]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d009      	beq.n	800c0d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 800c0c4:	4a15      	ldr	r2, [pc, #84]	@ (800c11c <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800c0c6:	2384      	movs	r3, #132	@ 0x84
 800c0c8:	58d3      	ldr	r3, [r2, r3]
 800c0ca:	4914      	ldr	r1, [pc, #80]	@ (800c11c <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800c0cc:	2280      	movs	r2, #128	@ 0x80
 800c0ce:	0552      	lsls	r2, r2, #21
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	2284      	movs	r2, #132	@ 0x84
 800c0d4:	508b      	str	r3, [r1, r2]
 800c0d6:	e008      	b.n	800c0ea <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c0d8:	4a10      	ldr	r2, [pc, #64]	@ (800c11c <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800c0da:	2380      	movs	r3, #128	@ 0x80
 800c0dc:	58d3      	ldr	r3, [r2, r3]
 800c0de:	490f      	ldr	r1, [pc, #60]	@ (800c11c <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800c0e0:	2280      	movs	r2, #128	@ 0x80
 800c0e2:	0552      	lsls	r2, r2, #21
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	2280      	movs	r2, #128	@ 0x80
 800c0e8:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800c0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c0ec:	699a      	ldr	r2, [r3, #24]
 800c0ee:	4b09      	ldr	r3, [pc, #36]	@ (800c114 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800c0f0:	2188      	movs	r1, #136	@ 0x88
 800c0f2:	01c9      	lsls	r1, r1, #7
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	222d      	movs	r2, #45	@ 0x2d
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	222c      	movs	r2, #44	@ 0x2c
 800c104:	2100      	movs	r1, #0
 800c106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	0018      	movs	r0, r3
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b006      	add	sp, #24
 800c110:	bd80      	pop	{r7, pc}
 800c112:	46c0      	nop			@ (mov r8, r8)
 800c114:	40002800 	.word	0x40002800
 800c118:	fffffbff 	.word	0xfffffbff
 800c11c:	40021800 	.word	0x40021800

0800c120 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	222c      	movs	r2, #44	@ 0x2c
 800c12c:	5c9b      	ldrb	r3, [r3, r2]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d101      	bne.n	800c136 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800c132:	2302      	movs	r3, #2
 800c134:	e016      	b.n	800c164 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	222c      	movs	r2, #44	@ 0x2c
 800c13a:	2101      	movs	r1, #1
 800c13c:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	222d      	movs	r2, #45	@ 0x2d
 800c142:	2102      	movs	r1, #2
 800c144:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800c146:	4b09      	ldr	r3, [pc, #36]	@ (800c16c <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 800c148:	699a      	ldr	r2, [r3, #24]
 800c14a:	4b08      	ldr	r3, [pc, #32]	@ (800c16c <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 800c14c:	4908      	ldr	r1, [pc, #32]	@ (800c170 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 800c14e:	400a      	ands	r2, r1
 800c150:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	222d      	movs	r2, #45	@ 0x2d
 800c156:	2101      	movs	r1, #1
 800c158:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	222c      	movs	r2, #44	@ 0x2c
 800c15e:	2100      	movs	r1, #0
 800c160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	0018      	movs	r0, r3
 800c166:	46bd      	mov	sp, r7
 800c168:	b002      	add	sp, #8
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	40002800 	.word	0x40002800
 800c170:	ffffbbff 	.word	0xffffbbff

0800c174 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 800c17c:	4b09      	ldr	r3, [pc, #36]	@ (800c1a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800c17e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c180:	2204      	movs	r2, #4
 800c182:	4013      	ands	r3, r2
 800c184:	d006      	beq.n	800c194 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800c186:	4b07      	ldr	r3, [pc, #28]	@ (800c1a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800c188:	2204      	movs	r2, #4
 800c18a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	0018      	movs	r0, r3
 800c190:	f7f9 fa68 	bl	8005664 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	222d      	movs	r2, #45	@ 0x2d
 800c198:	2101      	movs	r1, #1
 800c19a:	5499      	strb	r1, [r3, r2]
}
 800c19c:	46c0      	nop			@ (mov r8, r8)
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	b002      	add	sp, #8
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	40002800 	.word	0x40002800

0800c1a8 <HAL_RTCEx_TamperIRQHandler>:
  * @brief  Handle Tamper interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TamperIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(TAMP->MISR);
 800c1b0:	4b2a      	ldr	r3, [pc, #168]	@ (800c25c <HAL_RTCEx_TamperIRQHandler+0xb4>)
 800c1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1b4:	60fb      	str	r3, [r7, #12]

  /* Immediately clear flags */
  WRITE_REG(TAMP->SCR, tmp);
 800c1b6:	4b29      	ldr	r3, [pc, #164]	@ (800c25c <HAL_RTCEx_TamperIRQHandler+0xb4>)
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Check Tamper1 status */
  if ((tmp & RTC_TAMPER_1) == RTC_TAMPER_1)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	d003      	beq.n	800c1cc <HAL_RTCEx_TamperIRQHandler+0x24>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 1 Event registered Callback */
    hrtc->Tamper1EventCallback(hrtc);
#else
    /* Tamper1 callback */
    HAL_RTCEx_Tamper1EventCallback(hrtc);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	f000 f84a 	bl	800c260 <HAL_RTCEx_Tamper1EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper2 status */
  if ((tmp & RTC_TAMPER_2) == RTC_TAMPER_2)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	d003      	beq.n	800c1dc <HAL_RTCEx_TamperIRQHandler+0x34>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 2 Event registered Callback */
    hrtc->Tamper2EventCallback(hrtc);
#else
    /* Tamper2 callback */
    HAL_RTCEx_Tamper2EventCallback(hrtc);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	0018      	movs	r0, r3
 800c1d8:	f000 f84a 	bl	800c270 <HAL_RTCEx_Tamper2EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper3 status */
  if ((tmp & RTC_TAMPER_3) == RTC_TAMPER_3)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2204      	movs	r2, #4
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	d003      	beq.n	800c1ec <HAL_RTCEx_TamperIRQHandler+0x44>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 3 Event registered Callback */
    hrtc->Tamper3EventCallback(hrtc);
#else
    /* Tamper3 callback */
    HAL_RTCEx_Tamper3EventCallback(hrtc);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f000 f84a 	bl	800c280 <HAL_RTCEx_Tamper3EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper4 status */
  if ((tmp & RTC_TAMPER_4) == RTC_TAMPER_4)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2208      	movs	r2, #8
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	d003      	beq.n	800c1fc <HAL_RTCEx_TamperIRQHandler+0x54>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 4 Event registered Callback */
    hrtc->Tamper4EventCallback(hrtc);
#else
    /* Tamper4 callback */
    HAL_RTCEx_Tamper4EventCallback(hrtc);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	0018      	movs	r0, r3
 800c1f8:	f000 f84a 	bl	800c290 <HAL_RTCEx_Tamper4EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper5 status */
  if ((tmp & RTC_TAMPER_5) == RTC_TAMPER_5)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2210      	movs	r2, #16
 800c200:	4013      	ands	r3, r2
 800c202:	d003      	beq.n	800c20c <HAL_RTCEx_TamperIRQHandler+0x64>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 5 Event registered Callback */
    hrtc->Tamper5EventCallback(hrtc);
#else
    /* Tamper5 callback */
    HAL_RTCEx_Tamper5EventCallback(hrtc);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	0018      	movs	r0, r3
 800c208:	f000 f84a 	bl	800c2a0 <HAL_RTCEx_Tamper5EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Internal Tamper3 status */
  if ((tmp & RTC_INT_TAMPER_3) == RTC_INT_TAMPER_3)
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	2380      	movs	r3, #128	@ 0x80
 800c210:	02db      	lsls	r3, r3, #11
 800c212:	4013      	ands	r3, r2
 800c214:	d003      	beq.n	800c21e <HAL_RTCEx_TamperIRQHandler+0x76>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 3 Event registered Callback */
    hrtc->InternalTamper3EventCallback(hrtc);
#else
    /* Internal Tamper3 callback */
    HAL_RTCEx_InternalTamper3EventCallback(hrtc);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	0018      	movs	r0, r3
 800c21a:	f000 f849 	bl	800c2b0 <HAL_RTCEx_InternalTamper3EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Internal Tamper4 status */
  if ((tmp & RTC_INT_TAMPER_4) == RTC_INT_TAMPER_4)
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	2380      	movs	r3, #128	@ 0x80
 800c222:	031b      	lsls	r3, r3, #12
 800c224:	4013      	ands	r3, r2
 800c226:	d003      	beq.n	800c230 <HAL_RTCEx_TamperIRQHandler+0x88>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 4 Event registered Callback */
    hrtc->InternalTamper4EventCallback(hrtc);
#else
    /* Internal Tamper4 callback */
    HAL_RTCEx_InternalTamper4EventCallback(hrtc);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	0018      	movs	r0, r3
 800c22c:	f000 f848 	bl	800c2c0 <HAL_RTCEx_InternalTamper4EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Internal Tamper5 status */
  if ((tmp & RTC_INT_TAMPER_5) == RTC_INT_TAMPER_5)
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	2380      	movs	r3, #128	@ 0x80
 800c234:	035b      	lsls	r3, r3, #13
 800c236:	4013      	ands	r3, r2
 800c238:	d003      	beq.n	800c242 <HAL_RTCEx_TamperIRQHandler+0x9a>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 5 Event registered Callback */
    hrtc->InternalTamper5EventCallback(hrtc);
#else
    /* Internal Tamper5 callback */
    HAL_RTCEx_InternalTamper5EventCallback(hrtc);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	0018      	movs	r0, r3
 800c23e:	f000 f847 	bl	800c2d0 <HAL_RTCEx_InternalTamper5EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
  /* Check Internal Tamper6 status */
  if ((tmp & RTC_INT_TAMPER_6) == RTC_INT_TAMPER_6)
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	2380      	movs	r3, #128	@ 0x80
 800c246:	039b      	lsls	r3, r3, #14
 800c248:	4013      	ands	r3, r2
 800c24a:	d003      	beq.n	800c254 <HAL_RTCEx_TamperIRQHandler+0xac>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 6 Event registered Callback */
    hrtc->InternalTamper6EventCallback(hrtc);
#else
    /* Internal Tamper6 callback */
    HAL_RTCEx_InternalTamper6EventCallback(hrtc);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	0018      	movs	r0, r3
 800c250:	f000 f846 	bl	800c2e0 <HAL_RTCEx_InternalTamper6EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
}
 800c254:	46c0      	nop			@ (mov r8, r8)
 800c256:	46bd      	mov	sp, r7
 800c258:	b004      	add	sp, #16
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	4000b000 	.word	0x4000b000

0800c260 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 800c268:	46c0      	nop			@ (mov r8, r8)
 800c26a:	46bd      	mov	sp, r7
 800c26c:	b002      	add	sp, #8
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 800c278:	46c0      	nop			@ (mov r8, r8)
 800c27a:	46bd      	mov	sp, r7
 800c27c:	b002      	add	sp, #8
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 800c288:	46c0      	nop			@ (mov r8, r8)
 800c28a:	46bd      	mov	sp, r7
 800c28c:	b002      	add	sp, #8
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HAL_RTCEx_Tamper4EventCallback>:
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 800c298:	46c0      	nop			@ (mov r8, r8)
 800c29a:	46bd      	mov	sp, r7
 800c29c:	b002      	add	sp, #8
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <HAL_RTCEx_Tamper5EventCallback>:
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 800c2a8:	46c0      	nop			@ (mov r8, r8)
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	b002      	add	sp, #8
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <HAL_RTCEx_InternalTamper3EventCallback>:
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 800c2b8:	46c0      	nop			@ (mov r8, r8)
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	b002      	add	sp, #8
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <HAL_RTCEx_InternalTamper4EventCallback>:
  * @brief  Internal Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamperEventCallback could be implemented in the user file
   */
}
 800c2c8:	46c0      	nop			@ (mov r8, r8)
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	b002      	add	sp, #8
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_RTCEx_InternalTamper5EventCallback>:
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 800c2d8:	46c0      	nop			@ (mov r8, r8)
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	b002      	add	sp, #8
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_RTCEx_InternalTamper6EventCallback>:
  * @brief  Internal Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper6EventCallback could be implemented in the user file
   */
}
 800c2e8:	46c0      	nop			@ (mov r8, r8)
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	b002      	add	sp, #8
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800c2fc:	4b06      	ldr	r3, [pc, #24]	@ (800c318 <HAL_RTCEx_BKUPWrite+0x28>)
 800c2fe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	697a      	ldr	r2, [r7, #20]
 800c306:	18d3      	adds	r3, r2, r3
 800c308:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	601a      	str	r2, [r3, #0]
}
 800c310:	46c0      	nop			@ (mov r8, r8)
 800c312:	46bd      	mov	sp, r7
 800c314:	b006      	add	sp, #24
 800c316:	bd80      	pop	{r7, pc}
 800c318:	4000b100 	.word	0x4000b100

0800c31c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800c326:	4b06      	ldr	r3, [pc, #24]	@ (800c340 <HAL_RTCEx_BKUPRead+0x24>)
 800c328:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	18d3      	adds	r3, r2, r3
 800c332:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
}
 800c338:	0018      	movs	r0, r3
 800c33a:	46bd      	mov	sp, r7
 800c33c:	b004      	add	sp, #16
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	4000b100 	.word	0x4000b100

0800c344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e0a0      	b.n	800c498 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d109      	bne.n	800c372 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	2382      	movs	r3, #130	@ 0x82
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	429a      	cmp	r2, r3
 800c368:	d009      	beq.n	800c37e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	61da      	str	r2, [r3, #28]
 800c370:	e005      	b.n	800c37e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	225d      	movs	r2, #93	@ 0x5d
 800c388:	5c9b      	ldrb	r3, [r3, r2]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d107      	bne.n	800c3a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	225c      	movs	r2, #92	@ 0x5c
 800c394:	2100      	movs	r1, #0
 800c396:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	0018      	movs	r0, r3
 800c39c:	f7f9 f852 	bl	8005444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	225d      	movs	r2, #93	@ 0x5d
 800c3a4:	2102      	movs	r1, #2
 800c3a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2140      	movs	r1, #64	@ 0x40
 800c3b4:	438a      	bics	r2, r1
 800c3b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68da      	ldr	r2, [r3, #12]
 800c3bc:	23e0      	movs	r3, #224	@ 0xe0
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d902      	bls.n	800c3ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	60fb      	str	r3, [r7, #12]
 800c3c8:	e002      	b.n	800c3d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c3ca:	2380      	movs	r3, #128	@ 0x80
 800c3cc:	015b      	lsls	r3, r3, #5
 800c3ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	23f0      	movs	r3, #240	@ 0xf0
 800c3d6:	011b      	lsls	r3, r3, #4
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d008      	beq.n	800c3ee <HAL_SPI_Init+0xaa>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68da      	ldr	r2, [r3, #12]
 800c3e0:	23e0      	movs	r3, #224	@ 0xe0
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d002      	beq.n	800c3ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	2382      	movs	r3, #130	@ 0x82
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	401a      	ands	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6899      	ldr	r1, [r3, #8]
 800c3fc:	2384      	movs	r3, #132	@ 0x84
 800c3fe:	021b      	lsls	r3, r3, #8
 800c400:	400b      	ands	r3, r1
 800c402:	431a      	orrs	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	2102      	movs	r1, #2
 800c40a:	400b      	ands	r3, r1
 800c40c:	431a      	orrs	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	2101      	movs	r1, #1
 800c414:	400b      	ands	r3, r1
 800c416:	431a      	orrs	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6999      	ldr	r1, [r3, #24]
 800c41c:	2380      	movs	r3, #128	@ 0x80
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	400b      	ands	r3, r1
 800c422:	431a      	orrs	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	69db      	ldr	r3, [r3, #28]
 800c428:	2138      	movs	r1, #56	@ 0x38
 800c42a:	400b      	ands	r3, r1
 800c42c:	431a      	orrs	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	2180      	movs	r1, #128	@ 0x80
 800c434:	400b      	ands	r3, r1
 800c436:	431a      	orrs	r2, r3
 800c438:	0011      	movs	r1, r2
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c43e:	2380      	movs	r3, #128	@ 0x80
 800c440:	019b      	lsls	r3, r3, #6
 800c442:	401a      	ands	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	430a      	orrs	r2, r1
 800c44a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	0c1b      	lsrs	r3, r3, #16
 800c452:	2204      	movs	r2, #4
 800c454:	401a      	ands	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45a:	2110      	movs	r1, #16
 800c45c:	400b      	ands	r3, r1
 800c45e:	431a      	orrs	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c464:	2108      	movs	r1, #8
 800c466:	400b      	ands	r3, r1
 800c468:	431a      	orrs	r2, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68d9      	ldr	r1, [r3, #12]
 800c46e:	23f0      	movs	r3, #240	@ 0xf0
 800c470:	011b      	lsls	r3, r3, #4
 800c472:	400b      	ands	r3, r1
 800c474:	431a      	orrs	r2, r3
 800c476:	0011      	movs	r1, r2
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	2380      	movs	r3, #128	@ 0x80
 800c47c:	015b      	lsls	r3, r3, #5
 800c47e:	401a      	ands	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	225d      	movs	r2, #93	@ 0x5d
 800c492:	2101      	movs	r1, #1
 800c494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	0018      	movs	r0, r3
 800c49a:	46bd      	mov	sp, r7
 800c49c:	b004      	add	sp, #16
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b088      	sub	sp, #32
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	603b      	str	r3, [r7, #0]
 800c4ac:	1dbb      	adds	r3, r7, #6
 800c4ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c4b0:	231f      	movs	r3, #31
 800c4b2:	18fb      	adds	r3, r7, r3
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	225c      	movs	r2, #92	@ 0x5c
 800c4bc:	5c9b      	ldrb	r3, [r3, r2]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d101      	bne.n	800c4c6 <HAL_SPI_Transmit+0x26>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e147      	b.n	800c756 <HAL_SPI_Transmit+0x2b6>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	225c      	movs	r2, #92	@ 0x5c
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4ce:	f7f9 fac3 	bl	8005a58 <HAL_GetTick>
 800c4d2:	0003      	movs	r3, r0
 800c4d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800c4d6:	2316      	movs	r3, #22
 800c4d8:	18fb      	adds	r3, r7, r3
 800c4da:	1dba      	adds	r2, r7, #6
 800c4dc:	8812      	ldrh	r2, [r2, #0]
 800c4de:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	225d      	movs	r2, #93	@ 0x5d
 800c4e4:	5c9b      	ldrb	r3, [r3, r2]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d004      	beq.n	800c4f6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800c4ec:	231f      	movs	r3, #31
 800c4ee:	18fb      	adds	r3, r7, r3
 800c4f0:	2202      	movs	r2, #2
 800c4f2:	701a      	strb	r2, [r3, #0]
    goto error;
 800c4f4:	e128      	b.n	800c748 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <HAL_SPI_Transmit+0x64>
 800c4fc:	1dbb      	adds	r3, r7, #6
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d104      	bne.n	800c50e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800c504:	231f      	movs	r3, #31
 800c506:	18fb      	adds	r3, r7, r3
 800c508:	2201      	movs	r2, #1
 800c50a:	701a      	strb	r2, [r3, #0]
    goto error;
 800c50c:	e11c      	b.n	800c748 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	225d      	movs	r2, #93	@ 0x5d
 800c512:	2103      	movs	r1, #3
 800c514:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	1dba      	adds	r2, r7, #6
 800c526:	8812      	ldrh	r2, [r2, #0]
 800c528:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	1dba      	adds	r2, r7, #6
 800c52e:	8812      	ldrh	r2, [r2, #0]
 800c530:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2244      	movs	r2, #68	@ 0x44
 800c53c:	2100      	movs	r1, #0
 800c53e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2246      	movs	r2, #70	@ 0x46
 800c544:	2100      	movs	r1, #0
 800c546:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	2380      	movs	r3, #128	@ 0x80
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d110      	bne.n	800c582 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2140      	movs	r1, #64	@ 0x40
 800c56c:	438a      	bics	r2, r1
 800c56e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2180      	movs	r1, #128	@ 0x80
 800c57c:	01c9      	lsls	r1, r1, #7
 800c57e:	430a      	orrs	r2, r1
 800c580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2240      	movs	r2, #64	@ 0x40
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b40      	cmp	r3, #64	@ 0x40
 800c58e:	d007      	beq.n	800c5a0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2140      	movs	r1, #64	@ 0x40
 800c59c:	430a      	orrs	r2, r1
 800c59e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	23e0      	movs	r3, #224	@ 0xe0
 800c5a6:	00db      	lsls	r3, r3, #3
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d952      	bls.n	800c652 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d004      	beq.n	800c5be <HAL_SPI_Transmit+0x11e>
 800c5b4:	2316      	movs	r3, #22
 800c5b6:	18fb      	adds	r3, r7, r3
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d143      	bne.n	800c646 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5c2:	881a      	ldrh	r2, [r3, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ce:	1c9a      	adds	r2, r3, #2
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c5e2:	e030      	b.n	800c646 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d112      	bne.n	800c618 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f6:	881a      	ldrh	r2, [r3, #0]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c602:	1c9a      	adds	r2, r3, #2
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	3b01      	subs	r3, #1
 800c610:	b29a      	uxth	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c616:	e016      	b.n	800c646 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c618:	f7f9 fa1e 	bl	8005a58 <HAL_GetTick>
 800c61c:	0002      	movs	r2, r0
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	d802      	bhi.n	800c62e <HAL_SPI_Transmit+0x18e>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	3301      	adds	r3, #1
 800c62c:	d102      	bne.n	800c634 <HAL_SPI_Transmit+0x194>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d108      	bne.n	800c646 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800c634:	231f      	movs	r3, #31
 800c636:	18fb      	adds	r3, r7, r3
 800c638:	2203      	movs	r2, #3
 800c63a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	225d      	movs	r2, #93	@ 0x5d
 800c640:	2101      	movs	r1, #1
 800c642:	5499      	strb	r1, [r3, r2]
          goto error;
 800c644:	e080      	b.n	800c748 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1c9      	bne.n	800c5e4 <HAL_SPI_Transmit+0x144>
 800c650:	e053      	b.n	800c6fa <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <HAL_SPI_Transmit+0x1c4>
 800c65a:	2316      	movs	r3, #22
 800c65c:	18fb      	adds	r3, r7, r3
 800c65e:	881b      	ldrh	r3, [r3, #0]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d145      	bne.n	800c6f0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	330c      	adds	r3, #12
 800c66e:	7812      	ldrb	r2, [r2, #0]
 800c670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c680:	b29b      	uxth	r3, r3
 800c682:	3b01      	subs	r3, #1
 800c684:	b29a      	uxth	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800c68a:	e031      	b.n	800c6f0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	2202      	movs	r2, #2
 800c694:	4013      	ands	r3, r2
 800c696:	2b02      	cmp	r3, #2
 800c698:	d113      	bne.n	800c6c2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	330c      	adds	r3, #12
 800c6a4:	7812      	ldrb	r2, [r2, #0]
 800c6a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c6c0:	e016      	b.n	800c6f0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6c2:	f7f9 f9c9 	bl	8005a58 <HAL_GetTick>
 800c6c6:	0002      	movs	r2, r0
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d802      	bhi.n	800c6d8 <HAL_SPI_Transmit+0x238>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	d102      	bne.n	800c6de <HAL_SPI_Transmit+0x23e>
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d108      	bne.n	800c6f0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800c6de:	231f      	movs	r3, #31
 800c6e0:	18fb      	adds	r3, r7, r3
 800c6e2:	2203      	movs	r2, #3
 800c6e4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	225d      	movs	r2, #93	@ 0x5d
 800c6ea:	2101      	movs	r1, #1
 800c6ec:	5499      	strb	r1, [r3, r2]
          goto error;
 800c6ee:	e02b      	b.n	800c748 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1c8      	bne.n	800c68c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	0018      	movs	r0, r3
 800c702:	f000 fcef 	bl	800d0e4 <SPI_EndRxTxTransaction>
 800c706:	1e03      	subs	r3, r0, #0
 800c708:	d002      	beq.n	800c710 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2220      	movs	r2, #32
 800c70e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10a      	bne.n	800c72e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c718:	2300      	movs	r3, #0
 800c71a:	613b      	str	r3, [r7, #16]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	613b      	str	r3, [r7, #16]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	613b      	str	r3, [r7, #16]
 800c72c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c732:	2b00      	cmp	r3, #0
 800c734:	d004      	beq.n	800c740 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800c736:	231f      	movs	r3, #31
 800c738:	18fb      	adds	r3, r7, r3
 800c73a:	2201      	movs	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e003      	b.n	800c748 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	225d      	movs	r2, #93	@ 0x5d
 800c744:	2101      	movs	r1, #1
 800c746:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	225c      	movs	r2, #92	@ 0x5c
 800c74c:	2100      	movs	r1, #0
 800c74e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c750:	231f      	movs	r3, #31
 800c752:	18fb      	adds	r3, r7, r3
 800c754:	781b      	ldrb	r3, [r3, #0]
}
 800c756:	0018      	movs	r0, r3
 800c758:	46bd      	mov	sp, r7
 800c75a:	b008      	add	sp, #32
 800c75c:	bd80      	pop	{r7, pc}
	...

0800c760 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c760:	b590      	push	{r4, r7, lr}
 800c762:	b089      	sub	sp, #36	@ 0x24
 800c764:	af02      	add	r7, sp, #8
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	1dbb      	adds	r3, r7, #6
 800c76e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c770:	2117      	movs	r1, #23
 800c772:	187b      	adds	r3, r7, r1
 800c774:	2200      	movs	r2, #0
 800c776:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	225d      	movs	r2, #93	@ 0x5d
 800c77c:	5c9b      	ldrb	r3, [r3, r2]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b01      	cmp	r3, #1
 800c782:	d003      	beq.n	800c78c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800c784:	187b      	adds	r3, r7, r1
 800c786:	2202      	movs	r2, #2
 800c788:	701a      	strb	r2, [r3, #0]
    goto error;
 800c78a:	e12b      	b.n	800c9e4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	2382      	movs	r3, #130	@ 0x82
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	429a      	cmp	r2, r3
 800c796:	d113      	bne.n	800c7c0 <HAL_SPI_Receive+0x60>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10f      	bne.n	800c7c0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	225d      	movs	r2, #93	@ 0x5d
 800c7a4:	2104      	movs	r1, #4
 800c7a6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c7a8:	1dbb      	adds	r3, r7, #6
 800c7aa:	881c      	ldrh	r4, [r3, #0]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	68b9      	ldr	r1, [r7, #8]
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	0023      	movs	r3, r4
 800c7b8:	f000 f924 	bl	800ca04 <HAL_SPI_TransmitReceive>
 800c7bc:	0003      	movs	r3, r0
 800c7be:	e118      	b.n	800c9f2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	225c      	movs	r2, #92	@ 0x5c
 800c7c4:	5c9b      	ldrb	r3, [r3, r2]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d101      	bne.n	800c7ce <HAL_SPI_Receive+0x6e>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	e111      	b.n	800c9f2 <HAL_SPI_Receive+0x292>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	225c      	movs	r2, #92	@ 0x5c
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7d6:	f7f9 f93f 	bl	8005a58 <HAL_GetTick>
 800c7da:	0003      	movs	r3, r0
 800c7dc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d003      	beq.n	800c7ec <HAL_SPI_Receive+0x8c>
 800c7e4:	1dbb      	adds	r3, r7, #6
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d104      	bne.n	800c7f6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800c7ec:	2317      	movs	r3, #23
 800c7ee:	18fb      	adds	r3, r7, r3
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	701a      	strb	r2, [r3, #0]
    goto error;
 800c7f4:	e0f6      	b.n	800c9e4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	225d      	movs	r2, #93	@ 0x5d
 800c7fa:	2104      	movs	r1, #4
 800c7fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	1dba      	adds	r2, r7, #6
 800c80e:	2144      	movs	r1, #68	@ 0x44
 800c810:	8812      	ldrh	r2, [r2, #0]
 800c812:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	1dba      	adds	r2, r7, #6
 800c818:	2146      	movs	r1, #70	@ 0x46
 800c81a:	8812      	ldrh	r2, [r2, #0]
 800c81c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	68da      	ldr	r2, [r3, #12]
 800c840:	23e0      	movs	r3, #224	@ 0xe0
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	429a      	cmp	r2, r3
 800c846:	d908      	bls.n	800c85a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	496a      	ldr	r1, [pc, #424]	@ (800c9fc <HAL_SPI_Receive+0x29c>)
 800c854:	400a      	ands	r2, r1
 800c856:	605a      	str	r2, [r3, #4]
 800c858:	e008      	b.n	800c86c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2180      	movs	r1, #128	@ 0x80
 800c866:	0149      	lsls	r1, r1, #5
 800c868:	430a      	orrs	r2, r1
 800c86a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	2380      	movs	r3, #128	@ 0x80
 800c872:	021b      	lsls	r3, r3, #8
 800c874:	429a      	cmp	r2, r3
 800c876:	d10f      	bne.n	800c898 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2140      	movs	r1, #64	@ 0x40
 800c884:	438a      	bics	r2, r1
 800c886:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	495b      	ldr	r1, [pc, #364]	@ (800ca00 <HAL_SPI_Receive+0x2a0>)
 800c894:	400a      	ands	r2, r1
 800c896:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2240      	movs	r2, #64	@ 0x40
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	2b40      	cmp	r3, #64	@ 0x40
 800c8a4:	d007      	beq.n	800c8b6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2140      	movs	r1, #64	@ 0x40
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	23e0      	movs	r3, #224	@ 0xe0
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d900      	bls.n	800c8c4 <HAL_SPI_Receive+0x164>
 800c8c2:	e071      	b.n	800c9a8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c8c4:	e035      	b.n	800c932 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d117      	bne.n	800c904 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	330c      	adds	r3, #12
 800c8da:	001a      	movs	r2, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e0:	7812      	ldrb	r2, [r2, #0]
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2246      	movs	r2, #70	@ 0x46
 800c8f4:	5a9b      	ldrh	r3, [r3, r2]
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	b299      	uxth	r1, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2246      	movs	r2, #70	@ 0x46
 800c900:	5299      	strh	r1, [r3, r2]
 800c902:	e016      	b.n	800c932 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c904:	f7f9 f8a8 	bl	8005a58 <HAL_GetTick>
 800c908:	0002      	movs	r2, r0
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	429a      	cmp	r2, r3
 800c912:	d802      	bhi.n	800c91a <HAL_SPI_Receive+0x1ba>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	3301      	adds	r3, #1
 800c918:	d102      	bne.n	800c920 <HAL_SPI_Receive+0x1c0>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d108      	bne.n	800c932 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800c920:	2317      	movs	r3, #23
 800c922:	18fb      	adds	r3, r7, r3
 800c924:	2203      	movs	r2, #3
 800c926:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	225d      	movs	r2, #93	@ 0x5d
 800c92c:	2101      	movs	r1, #1
 800c92e:	5499      	strb	r1, [r3, r2]
          goto error;
 800c930:	e058      	b.n	800c9e4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2246      	movs	r2, #70	@ 0x46
 800c936:	5a9b      	ldrh	r3, [r3, r2]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1c3      	bne.n	800c8c6 <HAL_SPI_Receive+0x166>
 800c93e:	e039      	b.n	800c9b4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	2201      	movs	r2, #1
 800c948:	4013      	ands	r3, r2
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d115      	bne.n	800c97a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68da      	ldr	r2, [r3, #12]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c958:	b292      	uxth	r2, r2
 800c95a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c960:	1c9a      	adds	r2, r3, #2
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2246      	movs	r2, #70	@ 0x46
 800c96a:	5a9b      	ldrh	r3, [r3, r2]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	3b01      	subs	r3, #1
 800c970:	b299      	uxth	r1, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2246      	movs	r2, #70	@ 0x46
 800c976:	5299      	strh	r1, [r3, r2]
 800c978:	e016      	b.n	800c9a8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c97a:	f7f9 f86d 	bl	8005a58 <HAL_GetTick>
 800c97e:	0002      	movs	r2, r0
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d802      	bhi.n	800c990 <HAL_SPI_Receive+0x230>
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	d102      	bne.n	800c996 <HAL_SPI_Receive+0x236>
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d108      	bne.n	800c9a8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800c996:	2317      	movs	r3, #23
 800c998:	18fb      	adds	r3, r7, r3
 800c99a:	2203      	movs	r2, #3
 800c99c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	225d      	movs	r2, #93	@ 0x5d
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	5499      	strb	r1, [r3, r2]
          goto error;
 800c9a6:	e01d      	b.n	800c9e4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2246      	movs	r2, #70	@ 0x46
 800c9ac:	5a9b      	ldrh	r3, [r3, r2]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1c5      	bne.n	800c940 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	f000 fb34 	bl	800d028 <SPI_EndRxTransaction>
 800c9c0:	1e03      	subs	r3, r0, #0
 800c9c2:	d002      	beq.n	800c9ca <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800c9d2:	2317      	movs	r3, #23
 800c9d4:	18fb      	adds	r3, r7, r3
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	701a      	strb	r2, [r3, #0]
 800c9da:	e003      	b.n	800c9e4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	225d      	movs	r2, #93	@ 0x5d
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	225c      	movs	r2, #92	@ 0x5c
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c9ec:	2317      	movs	r3, #23
 800c9ee:	18fb      	adds	r3, r7, r3
 800c9f0:	781b      	ldrb	r3, [r3, #0]
}
 800c9f2:	0018      	movs	r0, r3
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	b007      	add	sp, #28
 800c9f8:	bd90      	pop	{r4, r7, pc}
 800c9fa:	46c0      	nop			@ (mov r8, r8)
 800c9fc:	ffffefff 	.word	0xffffefff
 800ca00:	ffffbfff 	.word	0xffffbfff

0800ca04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08a      	sub	sp, #40	@ 0x28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	001a      	movs	r2, r3
 800ca12:	1cbb      	adds	r3, r7, #2
 800ca14:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ca16:	2301      	movs	r3, #1
 800ca18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ca1a:	2323      	movs	r3, #35	@ 0x23
 800ca1c:	18fb      	adds	r3, r7, r3
 800ca1e:	2200      	movs	r2, #0
 800ca20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	225c      	movs	r2, #92	@ 0x5c
 800ca26:	5c9b      	ldrb	r3, [r3, r2]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d101      	bne.n	800ca30 <HAL_SPI_TransmitReceive+0x2c>
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	e1c4      	b.n	800cdba <HAL_SPI_TransmitReceive+0x3b6>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	225c      	movs	r2, #92	@ 0x5c
 800ca34:	2101      	movs	r1, #1
 800ca36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca38:	f7f9 f80e 	bl	8005a58 <HAL_GetTick>
 800ca3c:	0003      	movs	r3, r0
 800ca3e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ca40:	201b      	movs	r0, #27
 800ca42:	183b      	adds	r3, r7, r0
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	215d      	movs	r1, #93	@ 0x5d
 800ca48:	5c52      	ldrb	r2, [r2, r1]
 800ca4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ca52:	2312      	movs	r3, #18
 800ca54:	18fb      	adds	r3, r7, r3
 800ca56:	1cba      	adds	r2, r7, #2
 800ca58:	8812      	ldrh	r2, [r2, #0]
 800ca5a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ca5c:	183b      	adds	r3, r7, r0
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d011      	beq.n	800ca88 <HAL_SPI_TransmitReceive+0x84>
 800ca64:	697a      	ldr	r2, [r7, #20]
 800ca66:	2382      	movs	r3, #130	@ 0x82
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d107      	bne.n	800ca7e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d103      	bne.n	800ca7e <HAL_SPI_TransmitReceive+0x7a>
 800ca76:	183b      	adds	r3, r7, r0
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	d004      	beq.n	800ca88 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800ca7e:	2323      	movs	r3, #35	@ 0x23
 800ca80:	18fb      	adds	r3, r7, r3
 800ca82:	2202      	movs	r2, #2
 800ca84:	701a      	strb	r2, [r3, #0]
    goto error;
 800ca86:	e191      	b.n	800cdac <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d006      	beq.n	800ca9c <HAL_SPI_TransmitReceive+0x98>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d003      	beq.n	800ca9c <HAL_SPI_TransmitReceive+0x98>
 800ca94:	1cbb      	adds	r3, r7, #2
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d104      	bne.n	800caa6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800ca9c:	2323      	movs	r3, #35	@ 0x23
 800ca9e:	18fb      	adds	r3, r7, r3
 800caa0:	2201      	movs	r2, #1
 800caa2:	701a      	strb	r2, [r3, #0]
    goto error;
 800caa4:	e182      	b.n	800cdac <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	225d      	movs	r2, #93	@ 0x5d
 800caaa:	5c9b      	ldrb	r3, [r3, r2]
 800caac:	b2db      	uxtb	r3, r3
 800caae:	2b04      	cmp	r3, #4
 800cab0:	d003      	beq.n	800caba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	225d      	movs	r2, #93	@ 0x5d
 800cab6:	2105      	movs	r1, #5
 800cab8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	1cba      	adds	r2, r7, #2
 800caca:	2146      	movs	r1, #70	@ 0x46
 800cacc:	8812      	ldrh	r2, [r2, #0]
 800cace:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	1cba      	adds	r2, r7, #2
 800cad4:	2144      	movs	r1, #68	@ 0x44
 800cad6:	8812      	ldrh	r2, [r2, #0]
 800cad8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	1cba      	adds	r2, r7, #2
 800cae4:	8812      	ldrh	r2, [r2, #0]
 800cae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	1cba      	adds	r2, r7, #2
 800caec:	8812      	ldrh	r2, [r2, #0]
 800caee:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	68da      	ldr	r2, [r3, #12]
 800cb00:	23e0      	movs	r3, #224	@ 0xe0
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d908      	bls.n	800cb1a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	49ac      	ldr	r1, [pc, #688]	@ (800cdc4 <HAL_SPI_TransmitReceive+0x3c0>)
 800cb14:	400a      	ands	r2, r1
 800cb16:	605a      	str	r2, [r3, #4]
 800cb18:	e008      	b.n	800cb2c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2180      	movs	r1, #128	@ 0x80
 800cb26:	0149      	lsls	r1, r1, #5
 800cb28:	430a      	orrs	r2, r1
 800cb2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2240      	movs	r2, #64	@ 0x40
 800cb34:	4013      	ands	r3, r2
 800cb36:	2b40      	cmp	r3, #64	@ 0x40
 800cb38:	d007      	beq.n	800cb4a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2140      	movs	r1, #64	@ 0x40
 800cb46:	430a      	orrs	r2, r1
 800cb48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	68da      	ldr	r2, [r3, #12]
 800cb4e:	23e0      	movs	r3, #224	@ 0xe0
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d800      	bhi.n	800cb58 <HAL_SPI_TransmitReceive+0x154>
 800cb56:	e083      	b.n	800cc60 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d005      	beq.n	800cb6c <HAL_SPI_TransmitReceive+0x168>
 800cb60:	2312      	movs	r3, #18
 800cb62:	18fb      	adds	r3, r7, r3
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d000      	beq.n	800cb6c <HAL_SPI_TransmitReceive+0x168>
 800cb6a:	e06d      	b.n	800cc48 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb70:	881a      	ldrh	r2, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb7c:	1c9a      	adds	r2, r3, #2
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb90:	e05a      	b.n	800cc48 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	2202      	movs	r2, #2
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d11b      	bne.n	800cbd8 <HAL_SPI_TransmitReceive+0x1d4>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d016      	beq.n	800cbd8 <HAL_SPI_TransmitReceive+0x1d4>
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d113      	bne.n	800cbd8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbb4:	881a      	ldrh	r2, [r3, #0]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc0:	1c9a      	adds	r2, r3, #2
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d11c      	bne.n	800cc20 <HAL_SPI_TransmitReceive+0x21c>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2246      	movs	r2, #70	@ 0x46
 800cbea:	5a9b      	ldrh	r3, [r3, r2]
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d016      	beq.n	800cc20 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68da      	ldr	r2, [r3, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbfc:	b292      	uxth	r2, r2
 800cbfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc04:	1c9a      	adds	r2, r3, #2
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2246      	movs	r2, #70	@ 0x46
 800cc0e:	5a9b      	ldrh	r3, [r3, r2]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	3b01      	subs	r3, #1
 800cc14:	b299      	uxth	r1, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2246      	movs	r2, #70	@ 0x46
 800cc1a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cc20:	f7f8 ff1a 	bl	8005a58 <HAL_GetTick>
 800cc24:	0002      	movs	r2, r0
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d80b      	bhi.n	800cc48 <HAL_SPI_TransmitReceive+0x244>
 800cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc32:	3301      	adds	r3, #1
 800cc34:	d008      	beq.n	800cc48 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800cc36:	2323      	movs	r3, #35	@ 0x23
 800cc38:	18fb      	adds	r3, r7, r3
 800cc3a:	2203      	movs	r2, #3
 800cc3c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	225d      	movs	r2, #93	@ 0x5d
 800cc42:	2101      	movs	r1, #1
 800cc44:	5499      	strb	r1, [r3, r2]
        goto error;
 800cc46:	e0b1      	b.n	800cdac <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d19f      	bne.n	800cb92 <HAL_SPI_TransmitReceive+0x18e>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2246      	movs	r2, #70	@ 0x46
 800cc56:	5a9b      	ldrh	r3, [r3, r2]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d199      	bne.n	800cb92 <HAL_SPI_TransmitReceive+0x18e>
 800cc5e:	e089      	b.n	800cd74 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d005      	beq.n	800cc74 <HAL_SPI_TransmitReceive+0x270>
 800cc68:	2312      	movs	r3, #18
 800cc6a:	18fb      	adds	r3, r7, r3
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d000      	beq.n	800cc74 <HAL_SPI_TransmitReceive+0x270>
 800cc72:	e074      	b.n	800cd5e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	330c      	adds	r3, #12
 800cc7e:	7812      	ldrb	r2, [r2, #0]
 800cc80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	3b01      	subs	r3, #1
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cc9a:	e060      	b.n	800cd5e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	2202      	movs	r2, #2
 800cca4:	4013      	ands	r3, r2
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d11c      	bne.n	800cce4 <HAL_SPI_TransmitReceive+0x2e0>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d017      	beq.n	800cce4 <HAL_SPI_TransmitReceive+0x2e0>
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d114      	bne.n	800cce4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	330c      	adds	r3, #12
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	2201      	movs	r2, #1
 800ccec:	4013      	ands	r3, r2
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d11e      	bne.n	800cd30 <HAL_SPI_TransmitReceive+0x32c>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2246      	movs	r2, #70	@ 0x46
 800ccf6:	5a9b      	ldrh	r3, [r3, r2]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d018      	beq.n	800cd30 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	330c      	adds	r3, #12
 800cd04:	001a      	movs	r2, r3
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd0a:	7812      	ldrb	r2, [r2, #0]
 800cd0c:	b2d2      	uxtb	r2, r2
 800cd0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2246      	movs	r2, #70	@ 0x46
 800cd1e:	5a9b      	ldrh	r3, [r3, r2]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	3b01      	subs	r3, #1
 800cd24:	b299      	uxth	r1, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2246      	movs	r2, #70	@ 0x46
 800cd2a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cd30:	f7f8 fe92 	bl	8005a58 <HAL_GetTick>
 800cd34:	0002      	movs	r2, r0
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d802      	bhi.n	800cd46 <HAL_SPI_TransmitReceive+0x342>
 800cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd42:	3301      	adds	r3, #1
 800cd44:	d102      	bne.n	800cd4c <HAL_SPI_TransmitReceive+0x348>
 800cd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d108      	bne.n	800cd5e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800cd4c:	2323      	movs	r3, #35	@ 0x23
 800cd4e:	18fb      	adds	r3, r7, r3
 800cd50:	2203      	movs	r2, #3
 800cd52:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	225d      	movs	r2, #93	@ 0x5d
 800cd58:	2101      	movs	r1, #1
 800cd5a:	5499      	strb	r1, [r3, r2]
        goto error;
 800cd5c:	e026      	b.n	800cdac <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d199      	bne.n	800cc9c <HAL_SPI_TransmitReceive+0x298>
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2246      	movs	r2, #70	@ 0x46
 800cd6c:	5a9b      	ldrh	r3, [r3, r2]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d193      	bne.n	800cc9c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd74:	69fa      	ldr	r2, [r7, #28]
 800cd76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	0018      	movs	r0, r3
 800cd7c:	f000 f9b2 	bl	800d0e4 <SPI_EndRxTxTransaction>
 800cd80:	1e03      	subs	r3, r0, #0
 800cd82:	d006      	beq.n	800cd92 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800cd84:	2323      	movs	r3, #35	@ 0x23
 800cd86:	18fb      	adds	r3, r7, r3
 800cd88:	2201      	movs	r2, #1
 800cd8a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2220      	movs	r2, #32
 800cd90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d004      	beq.n	800cda4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800cd9a:	2323      	movs	r3, #35	@ 0x23
 800cd9c:	18fb      	adds	r3, r7, r3
 800cd9e:	2201      	movs	r2, #1
 800cda0:	701a      	strb	r2, [r3, #0]
 800cda2:	e003      	b.n	800cdac <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	225d      	movs	r2, #93	@ 0x5d
 800cda8:	2101      	movs	r1, #1
 800cdaa:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	225c      	movs	r2, #92	@ 0x5c
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800cdb4:	2323      	movs	r3, #35	@ 0x23
 800cdb6:	18fb      	adds	r3, r7, r3
 800cdb8:	781b      	ldrb	r3, [r3, #0]
}
 800cdba:	0018      	movs	r0, r3
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	b00a      	add	sp, #40	@ 0x28
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	46c0      	nop			@ (mov r8, r8)
 800cdc4:	ffffefff 	.word	0xffffefff

0800cdc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	603b      	str	r3, [r7, #0]
 800cdd4:	1dfb      	adds	r3, r7, #7
 800cdd6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cdd8:	f7f8 fe3e 	bl	8005a58 <HAL_GetTick>
 800cddc:	0002      	movs	r2, r0
 800cdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	18d3      	adds	r3, r2, r3
 800cde6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cde8:	f7f8 fe36 	bl	8005a58 <HAL_GetTick>
 800cdec:	0003      	movs	r3, r0
 800cdee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cdf0:	4b3a      	ldr	r3, [pc, #232]	@ (800cedc <SPI_WaitFlagStateUntilTimeout+0x114>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	015b      	lsls	r3, r3, #5
 800cdf6:	0d1b      	lsrs	r3, r3, #20
 800cdf8:	69fa      	ldr	r2, [r7, #28]
 800cdfa:	4353      	muls	r3, r2
 800cdfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cdfe:	e058      	b.n	800ceb2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	3301      	adds	r3, #1
 800ce04:	d055      	beq.n	800ceb2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ce06:	f7f8 fe27 	bl	8005a58 <HAL_GetTick>
 800ce0a:	0002      	movs	r2, r0
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	69fa      	ldr	r2, [r7, #28]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d902      	bls.n	800ce1c <SPI_WaitFlagStateUntilTimeout+0x54>
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d142      	bne.n	800cea2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	21e0      	movs	r1, #224	@ 0xe0
 800ce28:	438a      	bics	r2, r1
 800ce2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	2382      	movs	r3, #130	@ 0x82
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d113      	bne.n	800ce60 <SPI_WaitFlagStateUntilTimeout+0x98>
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	689a      	ldr	r2, [r3, #8]
 800ce3c:	2380      	movs	r3, #128	@ 0x80
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d005      	beq.n	800ce50 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	689a      	ldr	r2, [r3, #8]
 800ce48:	2380      	movs	r3, #128	@ 0x80
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d107      	bne.n	800ce60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2140      	movs	r1, #64	@ 0x40
 800ce5c:	438a      	bics	r2, r1
 800ce5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce64:	2380      	movs	r3, #128	@ 0x80
 800ce66:	019b      	lsls	r3, r3, #6
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d110      	bne.n	800ce8e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	491a      	ldr	r1, [pc, #104]	@ (800cee0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ce78:	400a      	ands	r2, r1
 800ce7a:	601a      	str	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2180      	movs	r1, #128	@ 0x80
 800ce88:	0189      	lsls	r1, r1, #6
 800ce8a:	430a      	orrs	r2, r1
 800ce8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	225d      	movs	r2, #93	@ 0x5d
 800ce92:	2101      	movs	r1, #1
 800ce94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	225c      	movs	r2, #92	@ 0x5c
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	e017      	b.n	800ced2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d101      	bne.n	800ceac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	4013      	ands	r3, r2
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	425a      	negs	r2, r3
 800cec2:	4153      	adcs	r3, r2
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	001a      	movs	r2, r3
 800cec8:	1dfb      	adds	r3, r7, #7
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d197      	bne.n	800ce00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	0018      	movs	r0, r3
 800ced4:	46bd      	mov	sp, r7
 800ced6:	b008      	add	sp, #32
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	46c0      	nop			@ (mov r8, r8)
 800cedc:	20000004 	.word	0x20000004
 800cee0:	ffffdfff 	.word	0xffffdfff

0800cee4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08a      	sub	sp, #40	@ 0x28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cef2:	2317      	movs	r3, #23
 800cef4:	18fb      	adds	r3, r7, r3
 800cef6:	2200      	movs	r2, #0
 800cef8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cefa:	f7f8 fdad 	bl	8005a58 <HAL_GetTick>
 800cefe:	0002      	movs	r2, r0
 800cf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf02:	1a9b      	subs	r3, r3, r2
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	18d3      	adds	r3, r2, r3
 800cf08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800cf0a:	f7f8 fda5 	bl	8005a58 <HAL_GetTick>
 800cf0e:	0003      	movs	r3, r0
 800cf10:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	330c      	adds	r3, #12
 800cf18:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cf1a:	4b41      	ldr	r3, [pc, #260]	@ (800d020 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	0013      	movs	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	189b      	adds	r3, r3, r2
 800cf24:	00da      	lsls	r2, r3, #3
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	0d1b      	lsrs	r3, r3, #20
 800cf2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf2c:	4353      	muls	r3, r2
 800cf2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cf30:	e068      	b.n	800d004 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	23c0      	movs	r3, #192	@ 0xc0
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d10a      	bne.n	800cf52 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d107      	bne.n	800cf52 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	2117      	movs	r1, #23
 800cf4a:	187b      	adds	r3, r7, r1
 800cf4c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cf4e:	187b      	adds	r3, r7, r1
 800cf50:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	d055      	beq.n	800d004 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cf58:	f7f8 fd7e 	bl	8005a58 <HAL_GetTick>
 800cf5c:	0002      	movs	r2, r0
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	1ad3      	subs	r3, r2, r3
 800cf62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d902      	bls.n	800cf6e <SPI_WaitFifoStateUntilTimeout+0x8a>
 800cf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d142      	bne.n	800cff4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	21e0      	movs	r1, #224	@ 0xe0
 800cf7a:	438a      	bics	r2, r1
 800cf7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	2382      	movs	r3, #130	@ 0x82
 800cf84:	005b      	lsls	r3, r3, #1
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d113      	bne.n	800cfb2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	689a      	ldr	r2, [r3, #8]
 800cf8e:	2380      	movs	r3, #128	@ 0x80
 800cf90:	021b      	lsls	r3, r3, #8
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d005      	beq.n	800cfa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	689a      	ldr	r2, [r3, #8]
 800cf9a:	2380      	movs	r3, #128	@ 0x80
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d107      	bne.n	800cfb2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2140      	movs	r1, #64	@ 0x40
 800cfae:	438a      	bics	r2, r1
 800cfb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cfb6:	2380      	movs	r3, #128	@ 0x80
 800cfb8:	019b      	lsls	r3, r3, #6
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d110      	bne.n	800cfe0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4916      	ldr	r1, [pc, #88]	@ (800d024 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800cfca:	400a      	ands	r2, r1
 800cfcc:	601a      	str	r2, [r3, #0]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2180      	movs	r1, #128	@ 0x80
 800cfda:	0189      	lsls	r1, r1, #6
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	225d      	movs	r2, #93	@ 0x5d
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	225c      	movs	r2, #92	@ 0x5c
 800cfec:	2100      	movs	r1, #0
 800cfee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e010      	b.n	800d016 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800cffa:	2300      	movs	r3, #0
 800cffc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	3b01      	subs	r3, #1
 800d002:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	4013      	ands	r3, r2
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	429a      	cmp	r2, r3
 800d012:	d18e      	bne.n	800cf32 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	0018      	movs	r0, r3
 800d018:	46bd      	mov	sp, r7
 800d01a:	b00a      	add	sp, #40	@ 0x28
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	46c0      	nop			@ (mov r8, r8)
 800d020:	20000004 	.word	0x20000004
 800d024:	ffffdfff 	.word	0xffffdfff

0800d028 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af02      	add	r7, sp, #8
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	685a      	ldr	r2, [r3, #4]
 800d038:	2382      	movs	r3, #130	@ 0x82
 800d03a:	005b      	lsls	r3, r3, #1
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d113      	bne.n	800d068 <SPI_EndRxTransaction+0x40>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	2380      	movs	r3, #128	@ 0x80
 800d046:	021b      	lsls	r3, r3, #8
 800d048:	429a      	cmp	r2, r3
 800d04a:	d005      	beq.n	800d058 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	689a      	ldr	r2, [r3, #8]
 800d050:	2380      	movs	r3, #128	@ 0x80
 800d052:	00db      	lsls	r3, r3, #3
 800d054:	429a      	cmp	r2, r3
 800d056:	d107      	bne.n	800d068 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2140      	movs	r1, #64	@ 0x40
 800d064:	438a      	bics	r2, r1
 800d066:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	0013      	movs	r3, r2
 800d072:	2200      	movs	r2, #0
 800d074:	2180      	movs	r1, #128	@ 0x80
 800d076:	f7ff fea7 	bl	800cdc8 <SPI_WaitFlagStateUntilTimeout>
 800d07a:	1e03      	subs	r3, r0, #0
 800d07c:	d007      	beq.n	800d08e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d082:	2220      	movs	r2, #32
 800d084:	431a      	orrs	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d08a:	2303      	movs	r3, #3
 800d08c:	e026      	b.n	800d0dc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	2382      	movs	r3, #130	@ 0x82
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	429a      	cmp	r2, r3
 800d098:	d11f      	bne.n	800d0da <SPI_EndRxTransaction+0xb2>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	689a      	ldr	r2, [r3, #8]
 800d09e:	2380      	movs	r3, #128	@ 0x80
 800d0a0:	021b      	lsls	r3, r3, #8
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d005      	beq.n	800d0b2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	689a      	ldr	r2, [r3, #8]
 800d0aa:	2380      	movs	r3, #128	@ 0x80
 800d0ac:	00db      	lsls	r3, r3, #3
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d113      	bne.n	800d0da <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	23c0      	movs	r3, #192	@ 0xc0
 800d0b6:	00d9      	lsls	r1, r3, #3
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	0013      	movs	r3, r2
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f7ff ff0f 	bl	800cee4 <SPI_WaitFifoStateUntilTimeout>
 800d0c6:	1e03      	subs	r3, r0, #0
 800d0c8:	d007      	beq.n	800d0da <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0ce:	2220      	movs	r2, #32
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e000      	b.n	800d0dc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	0018      	movs	r0, r3
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	b004      	add	sp, #16
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af02      	add	r7, sp, #8
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	23c0      	movs	r3, #192	@ 0xc0
 800d0f4:	0159      	lsls	r1, r3, #5
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	0013      	movs	r3, r2
 800d0fe:	2200      	movs	r2, #0
 800d100:	f7ff fef0 	bl	800cee4 <SPI_WaitFifoStateUntilTimeout>
 800d104:	1e03      	subs	r3, r0, #0
 800d106:	d007      	beq.n	800d118 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d10c:	2220      	movs	r2, #32
 800d10e:	431a      	orrs	r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d114:	2303      	movs	r3, #3
 800d116:	e027      	b.n	800d168 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	0013      	movs	r3, r2
 800d122:	2200      	movs	r2, #0
 800d124:	2180      	movs	r1, #128	@ 0x80
 800d126:	f7ff fe4f 	bl	800cdc8 <SPI_WaitFlagStateUntilTimeout>
 800d12a:	1e03      	subs	r3, r0, #0
 800d12c:	d007      	beq.n	800d13e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d132:	2220      	movs	r2, #32
 800d134:	431a      	orrs	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e014      	b.n	800d168 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	23c0      	movs	r3, #192	@ 0xc0
 800d142:	00d9      	lsls	r1, r3, #3
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	0013      	movs	r3, r2
 800d14c:	2200      	movs	r2, #0
 800d14e:	f7ff fec9 	bl	800cee4 <SPI_WaitFifoStateUntilTimeout>
 800d152:	1e03      	subs	r3, r0, #0
 800d154:	d007      	beq.n	800d166 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d15a:	2220      	movs	r2, #32
 800d15c:	431a      	orrs	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e000      	b.n	800d168 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	0018      	movs	r0, r3
 800d16a:	46bd      	mov	sp, r7
 800d16c:	b004      	add	sp, #16
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e04e      	b.n	800d220 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2288      	movs	r2, #136	@ 0x88
 800d186:	589b      	ldr	r3, [r3, r2]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d107      	bne.n	800d19c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2284      	movs	r2, #132	@ 0x84
 800d190:	2100      	movs	r1, #0
 800d192:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	0018      	movs	r0, r3
 800d198:	f7f8 f9a0 	bl	80054dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2288      	movs	r2, #136	@ 0x88
 800d1a0:	2124      	movs	r1, #36	@ 0x24
 800d1a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	438a      	bics	r2, r1
 800d1b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	0018      	movs	r0, r3
 800d1c0:	f000 faea 	bl	800d798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	f000 f914 	bl	800d3f4 <UART_SetConfig>
 800d1cc:	0003      	movs	r3, r0
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d101      	bne.n	800d1d6 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e024      	b.n	800d220 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4911      	ldr	r1, [pc, #68]	@ (800d228 <HAL_HalfDuplex_Init+0xb8>)
 800d1e2:	400a      	ands	r2, r1
 800d1e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	689a      	ldr	r2, [r3, #8]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2122      	movs	r1, #34	@ 0x22
 800d1f2:	438a      	bics	r2, r1
 800d1f4:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689a      	ldr	r2, [r3, #8]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2108      	movs	r1, #8
 800d202:	430a      	orrs	r2, r1
 800d204:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2101      	movs	r1, #1
 800d212:	430a      	orrs	r2, r1
 800d214:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	0018      	movs	r0, r3
 800d21a:	f000 fb71 	bl	800d900 <UART_CheckIdleState>
 800d21e:	0003      	movs	r3, r0
}
 800d220:	0018      	movs	r0, r3
 800d222:	46bd      	mov	sp, r7
 800d224:	b002      	add	sp, #8
 800d226:	bd80      	pop	{r7, pc}
 800d228:	ffffb7ff 	.word	0xffffb7ff

0800d22c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e032      	b.n	800d2a4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2288      	movs	r2, #136	@ 0x88
 800d242:	2124      	movs	r1, #36	@ 0x24
 800d244:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2101      	movs	r1, #1
 800d252:	438a      	bics	r2, r1
 800d254:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2200      	movs	r2, #0
 800d264:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2200      	movs	r2, #0
 800d26c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	0018      	movs	r0, r3
 800d272:	f7f8 f993 	bl	800559c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2290      	movs	r2, #144	@ 0x90
 800d27a:	2100      	movs	r1, #0
 800d27c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2288      	movs	r2, #136	@ 0x88
 800d282:	2100      	movs	r1, #0
 800d284:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	228c      	movs	r2, #140	@ 0x8c
 800d28a:	2100      	movs	r1, #0
 800d28c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2284      	movs	r2, #132	@ 0x84
 800d29e:	2100      	movs	r1, #0
 800d2a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	b002      	add	sp, #8
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08a      	sub	sp, #40	@ 0x28
 800d2b0:	af02      	add	r7, sp, #8
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	1dbb      	adds	r3, r7, #6
 800d2ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2288      	movs	r2, #136	@ 0x88
 800d2c0:	589b      	ldr	r3, [r3, r2]
 800d2c2:	2b20      	cmp	r3, #32
 800d2c4:	d000      	beq.n	800d2c8 <HAL_UART_Transmit+0x1c>
 800d2c6:	e090      	b.n	800d3ea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <HAL_UART_Transmit+0x2a>
 800d2ce:	1dbb      	adds	r3, r7, #6
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d101      	bne.n	800d2da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e088      	b.n	800d3ec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	689a      	ldr	r2, [r3, #8]
 800d2de:	2380      	movs	r3, #128	@ 0x80
 800d2e0:	015b      	lsls	r3, r3, #5
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d109      	bne.n	800d2fa <HAL_UART_Transmit+0x4e>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d105      	bne.n	800d2fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	d001      	beq.n	800d2fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e078      	b.n	800d3ec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2290      	movs	r2, #144	@ 0x90
 800d2fe:	2100      	movs	r1, #0
 800d300:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2288      	movs	r2, #136	@ 0x88
 800d306:	2121      	movs	r1, #33	@ 0x21
 800d308:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d30a:	f7f8 fba5 	bl	8005a58 <HAL_GetTick>
 800d30e:	0003      	movs	r3, r0
 800d310:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	1dba      	adds	r2, r7, #6
 800d316:	2154      	movs	r1, #84	@ 0x54
 800d318:	8812      	ldrh	r2, [r2, #0]
 800d31a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	1dba      	adds	r2, r7, #6
 800d320:	2156      	movs	r1, #86	@ 0x56
 800d322:	8812      	ldrh	r2, [r2, #0]
 800d324:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	689a      	ldr	r2, [r3, #8]
 800d32a:	2380      	movs	r3, #128	@ 0x80
 800d32c:	015b      	lsls	r3, r3, #5
 800d32e:	429a      	cmp	r2, r3
 800d330:	d108      	bne.n	800d344 <HAL_UART_Transmit+0x98>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d104      	bne.n	800d344 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	61bb      	str	r3, [r7, #24]
 800d342:	e003      	b.n	800d34c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d34c:	e030      	b.n	800d3b0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	0013      	movs	r3, r2
 800d358:	2200      	movs	r2, #0
 800d35a:	2180      	movs	r1, #128	@ 0x80
 800d35c:	f000 fb7a 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800d360:	1e03      	subs	r3, r0, #0
 800d362:	d005      	beq.n	800d370 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2288      	movs	r2, #136	@ 0x88
 800d368:	2120      	movs	r1, #32
 800d36a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e03d      	b.n	800d3ec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10b      	bne.n	800d38e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	001a      	movs	r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	05d2      	lsls	r2, r2, #23
 800d382:	0dd2      	lsrs	r2, r2, #23
 800d384:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	3302      	adds	r3, #2
 800d38a:	61bb      	str	r3, [r7, #24]
 800d38c:	e007      	b.n	800d39e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	3301      	adds	r3, #1
 800d39c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2256      	movs	r2, #86	@ 0x56
 800d3a2:	5a9b      	ldrh	r3, [r3, r2]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	b299      	uxth	r1, r3
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2256      	movs	r2, #86	@ 0x56
 800d3ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2256      	movs	r2, #86	@ 0x56
 800d3b4:	5a9b      	ldrh	r3, [r3, r2]
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1c8      	bne.n	800d34e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	0013      	movs	r3, r2
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	2140      	movs	r1, #64	@ 0x40
 800d3ca:	f000 fb43 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800d3ce:	1e03      	subs	r3, r0, #0
 800d3d0:	d005      	beq.n	800d3de <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2288      	movs	r2, #136	@ 0x88
 800d3d6:	2120      	movs	r1, #32
 800d3d8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e006      	b.n	800d3ec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2288      	movs	r2, #136	@ 0x88
 800d3e2:	2120      	movs	r1, #32
 800d3e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	e000      	b.n	800d3ec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800d3ea:	2302      	movs	r3, #2
  }
}
 800d3ec:	0018      	movs	r0, r3
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	b008      	add	sp, #32
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3f4:	b5b0      	push	{r4, r5, r7, lr}
 800d3f6:	b092      	sub	sp, #72	@ 0x48
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d3fc:	231f      	movs	r3, #31
 800d3fe:	2220      	movs	r2, #32
 800d400:	189b      	adds	r3, r3, r2
 800d402:	19db      	adds	r3, r3, r7
 800d404:	2200      	movs	r2, #0
 800d406:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4ac8      	ldr	r2, [pc, #800]	@ (800d730 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d410:	689a      	ldr	r2, [r3, #8]
 800d412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	431a      	orrs	r2, r3
 800d418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41a:	695b      	ldr	r3, [r3, #20]
 800d41c:	431a      	orrs	r2, r3
 800d41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d420:	69db      	ldr	r3, [r3, #28]
 800d422:	4313      	orrs	r3, r2
 800d424:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4ac1      	ldr	r2, [pc, #772]	@ (800d734 <UART_SetConfig+0x340>)
 800d42e:	4013      	ands	r3, r2
 800d430:	0019      	movs	r1, r3
 800d432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d438:	430b      	orrs	r3, r1
 800d43a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	4abd      	ldr	r2, [pc, #756]	@ (800d738 <UART_SetConfig+0x344>)
 800d444:	4013      	ands	r3, r2
 800d446:	0018      	movs	r0, r3
 800d448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44a:	68d9      	ldr	r1, [r3, #12]
 800d44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	0003      	movs	r3, r0
 800d452:	430b      	orrs	r3, r1
 800d454:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4ab3      	ldr	r2, [pc, #716]	@ (800d730 <UART_SetConfig+0x33c>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d00e      	beq.n	800d484 <UART_SetConfig+0x90>
 800d466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4ab4      	ldr	r2, [pc, #720]	@ (800d73c <UART_SetConfig+0x348>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d009      	beq.n	800d484 <UART_SetConfig+0x90>
 800d470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4ab2      	ldr	r2, [pc, #712]	@ (800d740 <UART_SetConfig+0x34c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d004      	beq.n	800d484 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47c:	6a1b      	ldr	r3, [r3, #32]
 800d47e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d480:	4313      	orrs	r3, r2
 800d482:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	4aae      	ldr	r2, [pc, #696]	@ (800d744 <UART_SetConfig+0x350>)
 800d48c:	4013      	ands	r3, r2
 800d48e:	0019      	movs	r1, r3
 800d490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d496:	430b      	orrs	r3, r1
 800d498:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a0:	220f      	movs	r2, #15
 800d4a2:	4393      	bics	r3, r2
 800d4a4:	0018      	movs	r0, r3
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	0003      	movs	r3, r0
 800d4b0:	430b      	orrs	r3, r1
 800d4b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4aa3      	ldr	r2, [pc, #652]	@ (800d748 <UART_SetConfig+0x354>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d102      	bne.n	800d4c4 <UART_SetConfig+0xd0>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4c2:	e033      	b.n	800d52c <UART_SetConfig+0x138>
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4aa0      	ldr	r2, [pc, #640]	@ (800d74c <UART_SetConfig+0x358>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d102      	bne.n	800d4d4 <UART_SetConfig+0xe0>
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4d2:	e02b      	b.n	800d52c <UART_SetConfig+0x138>
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a9d      	ldr	r2, [pc, #628]	@ (800d750 <UART_SetConfig+0x35c>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d103      	bne.n	800d4e6 <UART_SetConfig+0xf2>
 800d4de:	2380      	movs	r3, #128	@ 0x80
 800d4e0:	025b      	lsls	r3, r3, #9
 800d4e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4e4:	e022      	b.n	800d52c <UART_SetConfig+0x138>
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a9a      	ldr	r2, [pc, #616]	@ (800d754 <UART_SetConfig+0x360>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d103      	bne.n	800d4f8 <UART_SetConfig+0x104>
 800d4f0:	2380      	movs	r3, #128	@ 0x80
 800d4f2:	029b      	lsls	r3, r3, #10
 800d4f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4f6:	e019      	b.n	800d52c <UART_SetConfig+0x138>
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a8c      	ldr	r2, [pc, #560]	@ (800d730 <UART_SetConfig+0x33c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d102      	bne.n	800d508 <UART_SetConfig+0x114>
 800d502:	2310      	movs	r3, #16
 800d504:	643b      	str	r3, [r7, #64]	@ 0x40
 800d506:	e011      	b.n	800d52c <UART_SetConfig+0x138>
 800d508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a8b      	ldr	r2, [pc, #556]	@ (800d73c <UART_SetConfig+0x348>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d102      	bne.n	800d518 <UART_SetConfig+0x124>
 800d512:	2308      	movs	r3, #8
 800d514:	643b      	str	r3, [r7, #64]	@ 0x40
 800d516:	e009      	b.n	800d52c <UART_SetConfig+0x138>
 800d518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a88      	ldr	r2, [pc, #544]	@ (800d740 <UART_SetConfig+0x34c>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d102      	bne.n	800d528 <UART_SetConfig+0x134>
 800d522:	2304      	movs	r3, #4
 800d524:	643b      	str	r3, [r7, #64]	@ 0x40
 800d526:	e001      	b.n	800d52c <UART_SetConfig+0x138>
 800d528:	2300      	movs	r3, #0
 800d52a:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a7f      	ldr	r2, [pc, #508]	@ (800d730 <UART_SetConfig+0x33c>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d00a      	beq.n	800d54c <UART_SetConfig+0x158>
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a80      	ldr	r2, [pc, #512]	@ (800d73c <UART_SetConfig+0x348>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d005      	beq.n	800d54c <UART_SetConfig+0x158>
 800d540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a7e      	ldr	r2, [pc, #504]	@ (800d740 <UART_SetConfig+0x34c>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d000      	beq.n	800d54c <UART_SetConfig+0x158>
 800d54a:	e06f      	b.n	800d62c <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d54c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d54e:	0018      	movs	r0, r3
 800d550:	f7fd fb9e 	bl	800ac90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d554:	0003      	movs	r3, r0
 800d556:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 800d558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d100      	bne.n	800d560 <UART_SetConfig+0x16c>
 800d55e:	e103      	b.n	800d768 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d562:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d564:	4b7c      	ldr	r3, [pc, #496]	@ (800d758 <UART_SetConfig+0x364>)
 800d566:	0052      	lsls	r2, r2, #1
 800d568:	5ad3      	ldrh	r3, [r2, r3]
 800d56a:	0019      	movs	r1, r3
 800d56c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d56e:	f7f2 fde7 	bl	8000140 <__udivsi3>
 800d572:	0003      	movs	r3, r0
 800d574:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	685a      	ldr	r2, [r3, #4]
 800d57a:	0013      	movs	r3, r2
 800d57c:	005b      	lsls	r3, r3, #1
 800d57e:	189b      	adds	r3, r3, r2
 800d580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d582:	429a      	cmp	r2, r3
 800d584:	d305      	bcc.n	800d592 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d58c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d58e:	429a      	cmp	r2, r3
 800d590:	d906      	bls.n	800d5a0 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 800d592:	231f      	movs	r3, #31
 800d594:	2220      	movs	r2, #32
 800d596:	189b      	adds	r3, r3, r2
 800d598:	19db      	adds	r3, r3, r7
 800d59a:	2201      	movs	r2, #1
 800d59c:	701a      	strb	r2, [r3, #0]
 800d59e:	e044      	b.n	800d62a <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a2:	61bb      	str	r3, [r7, #24]
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	61fb      	str	r3, [r7, #28]
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5ac:	4b6a      	ldr	r3, [pc, #424]	@ (800d758 <UART_SetConfig+0x364>)
 800d5ae:	0052      	lsls	r2, r2, #1
 800d5b0:	5ad3      	ldrh	r3, [r2, r3]
 800d5b2:	613b      	str	r3, [r7, #16]
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	617b      	str	r3, [r7, #20]
 800d5b8:	693a      	ldr	r2, [r7, #16]
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	69b8      	ldr	r0, [r7, #24]
 800d5be:	69f9      	ldr	r1, [r7, #28]
 800d5c0:	f7f2 ffca 	bl	8000558 <__aeabi_uldivmod>
 800d5c4:	0002      	movs	r2, r0
 800d5c6:	000b      	movs	r3, r1
 800d5c8:	0e11      	lsrs	r1, r2, #24
 800d5ca:	021d      	lsls	r5, r3, #8
 800d5cc:	430d      	orrs	r5, r1
 800d5ce:	0214      	lsls	r4, r2, #8
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	085b      	lsrs	r3, r3, #1
 800d5d6:	60bb      	str	r3, [r7, #8]
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	68b8      	ldr	r0, [r7, #8]
 800d5de:	68f9      	ldr	r1, [r7, #12]
 800d5e0:	1900      	adds	r0, r0, r4
 800d5e2:	4169      	adcs	r1, r5
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	603b      	str	r3, [r7, #0]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	607b      	str	r3, [r7, #4]
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f7f2 ffb1 	bl	8000558 <__aeabi_uldivmod>
 800d5f6:	0002      	movs	r2, r0
 800d5f8:	000b      	movs	r3, r1
 800d5fa:	0013      	movs	r3, r2
 800d5fc:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d5fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d600:	23c0      	movs	r3, #192	@ 0xc0
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	429a      	cmp	r2, r3
 800d606:	d309      	bcc.n	800d61c <UART_SetConfig+0x228>
 800d608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d60a:	2380      	movs	r3, #128	@ 0x80
 800d60c:	035b      	lsls	r3, r3, #13
 800d60e:	429a      	cmp	r2, r3
 800d610:	d204      	bcs.n	800d61c <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d618:	60da      	str	r2, [r3, #12]
 800d61a:	e006      	b.n	800d62a <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 800d61c:	231f      	movs	r3, #31
 800d61e:	2220      	movs	r2, #32
 800d620:	189b      	adds	r3, r3, r2
 800d622:	19db      	adds	r3, r3, r7
 800d624:	2201      	movs	r2, #1
 800d626:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800d628:	e09e      	b.n	800d768 <UART_SetConfig+0x374>
 800d62a:	e09d      	b.n	800d768 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	69da      	ldr	r2, [r3, #28]
 800d630:	2380      	movs	r3, #128	@ 0x80
 800d632:	021b      	lsls	r3, r3, #8
 800d634:	429a      	cmp	r2, r3
 800d636:	d14c      	bne.n	800d6d2 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d63a:	0018      	movs	r0, r3
 800d63c:	f7fd fb28 	bl	800ac90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d640:	0003      	movs	r3, r0
 800d642:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d646:	2b00      	cmp	r3, #0
 800d648:	d100      	bne.n	800d64c <UART_SetConfig+0x258>
 800d64a:	e08d      	b.n	800d768 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d650:	4b41      	ldr	r3, [pc, #260]	@ (800d758 <UART_SetConfig+0x364>)
 800d652:	0052      	lsls	r2, r2, #1
 800d654:	5ad3      	ldrh	r3, [r2, r3]
 800d656:	0019      	movs	r1, r3
 800d658:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d65a:	f7f2 fd71 	bl	8000140 <__udivsi3>
 800d65e:	0003      	movs	r3, r0
 800d660:	005a      	lsls	r2, r3, #1
 800d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	18d2      	adds	r2, r2, r3
 800d66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	0019      	movs	r1, r3
 800d670:	0010      	movs	r0, r2
 800d672:	f7f2 fd65 	bl	8000140 <__udivsi3>
 800d676:	0003      	movs	r3, r0
 800d678:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67c:	2b0f      	cmp	r3, #15
 800d67e:	d921      	bls.n	800d6c4 <UART_SetConfig+0x2d0>
 800d680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d682:	2380      	movs	r3, #128	@ 0x80
 800d684:	025b      	lsls	r3, r3, #9
 800d686:	429a      	cmp	r2, r3
 800d688:	d21c      	bcs.n	800d6c4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	2012      	movs	r0, #18
 800d690:	2420      	movs	r4, #32
 800d692:	1903      	adds	r3, r0, r4
 800d694:	19db      	adds	r3, r3, r7
 800d696:	210f      	movs	r1, #15
 800d698:	438a      	bics	r2, r1
 800d69a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d69e:	085b      	lsrs	r3, r3, #1
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	2207      	movs	r2, #7
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	b299      	uxth	r1, r3
 800d6a8:	1903      	adds	r3, r0, r4
 800d6aa:	19db      	adds	r3, r3, r7
 800d6ac:	1902      	adds	r2, r0, r4
 800d6ae:	19d2      	adds	r2, r2, r7
 800d6b0:	8812      	ldrh	r2, [r2, #0]
 800d6b2:	430a      	orrs	r2, r1
 800d6b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	1902      	adds	r2, r0, r4
 800d6bc:	19d2      	adds	r2, r2, r7
 800d6be:	8812      	ldrh	r2, [r2, #0]
 800d6c0:	60da      	str	r2, [r3, #12]
 800d6c2:	e051      	b.n	800d768 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 800d6c4:	231f      	movs	r3, #31
 800d6c6:	2220      	movs	r2, #32
 800d6c8:	189b      	adds	r3, r3, r2
 800d6ca:	19db      	adds	r3, r3, r7
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	701a      	strb	r2, [r3, #0]
 800d6d0:	e04a      	b.n	800d768 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d6d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	f7fd fadb 	bl	800ac90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d6da:	0003      	movs	r3, r0
 800d6dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 800d6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d041      	beq.n	800d768 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800d758 <UART_SetConfig+0x364>)
 800d6ea:	0052      	lsls	r2, r2, #1
 800d6ec:	5ad3      	ldrh	r3, [r2, r3]
 800d6ee:	0019      	movs	r1, r3
 800d6f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d6f2:	f7f2 fd25 	bl	8000140 <__udivsi3>
 800d6f6:	0003      	movs	r3, r0
 800d6f8:	001a      	movs	r2, r3
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	085b      	lsrs	r3, r3, #1
 800d700:	18d2      	adds	r2, r2, r3
 800d702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	0019      	movs	r1, r3
 800d708:	0010      	movs	r0, r2
 800d70a:	f7f2 fd19 	bl	8000140 <__udivsi3>
 800d70e:	0003      	movs	r3, r0
 800d710:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d714:	2b0f      	cmp	r3, #15
 800d716:	d921      	bls.n	800d75c <UART_SetConfig+0x368>
 800d718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d71a:	2380      	movs	r3, #128	@ 0x80
 800d71c:	025b      	lsls	r3, r3, #9
 800d71e:	429a      	cmp	r2, r3
 800d720:	d21c      	bcs.n	800d75c <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d724:	b29a      	uxth	r2, r3
 800d726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60da      	str	r2, [r3, #12]
 800d72c:	e01c      	b.n	800d768 <UART_SetConfig+0x374>
 800d72e:	46c0      	nop			@ (mov r8, r8)
 800d730:	40008000 	.word	0x40008000
 800d734:	cfff69f3 	.word	0xcfff69f3
 800d738:	ffffcfff 	.word	0xffffcfff
 800d73c:	40008400 	.word	0x40008400
 800d740:	40008c00 	.word	0x40008c00
 800d744:	11fff4ff 	.word	0x11fff4ff
 800d748:	40013800 	.word	0x40013800
 800d74c:	40004400 	.word	0x40004400
 800d750:	40004800 	.word	0x40004800
 800d754:	40004c00 	.word	0x40004c00
 800d758:	0801218c 	.word	0x0801218c
      }
      else
      {
        ret = HAL_ERROR;
 800d75c:	231f      	movs	r3, #31
 800d75e:	2220      	movs	r2, #32
 800d760:	189b      	adds	r3, r3, r2
 800d762:	19db      	adds	r3, r3, r7
 800d764:	2201      	movs	r2, #1
 800d766:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76a:	226a      	movs	r2, #106	@ 0x6a
 800d76c:	2101      	movs	r1, #1
 800d76e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d772:	2268      	movs	r2, #104	@ 0x68
 800d774:	2101      	movs	r1, #1
 800d776:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	2200      	movs	r2, #0
 800d77c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d780:	2200      	movs	r2, #0
 800d782:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d784:	231f      	movs	r3, #31
 800d786:	2220      	movs	r2, #32
 800d788:	189b      	adds	r3, r3, r2
 800d78a:	19db      	adds	r3, r3, r7
 800d78c:	781b      	ldrb	r3, [r3, #0]
}
 800d78e:	0018      	movs	r0, r3
 800d790:	46bd      	mov	sp, r7
 800d792:	b012      	add	sp, #72	@ 0x48
 800d794:	bdb0      	pop	{r4, r5, r7, pc}
 800d796:	46c0      	nop			@ (mov r8, r8)

0800d798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a4:	2208      	movs	r2, #8
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	d00b      	beq.n	800d7c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	4a4a      	ldr	r2, [pc, #296]	@ (800d8dc <UART_AdvFeatureConfig+0x144>)
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	0019      	movs	r1, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	430a      	orrs	r2, r1
 800d7c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	d00b      	beq.n	800d7e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	4a43      	ldr	r2, [pc, #268]	@ (800d8e0 <UART_AdvFeatureConfig+0x148>)
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	0019      	movs	r1, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	d00b      	beq.n	800d806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	4a3b      	ldr	r2, [pc, #236]	@ (800d8e4 <UART_AdvFeatureConfig+0x14c>)
 800d7f6:	4013      	ands	r3, r2
 800d7f8:	0019      	movs	r1, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	430a      	orrs	r2, r1
 800d804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d80a:	2204      	movs	r2, #4
 800d80c:	4013      	ands	r3, r2
 800d80e:	d00b      	beq.n	800d828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	4a34      	ldr	r2, [pc, #208]	@ (800d8e8 <UART_AdvFeatureConfig+0x150>)
 800d818:	4013      	ands	r3, r2
 800d81a:	0019      	movs	r1, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	430a      	orrs	r2, r1
 800d826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d82c:	2210      	movs	r2, #16
 800d82e:	4013      	ands	r3, r2
 800d830:	d00b      	beq.n	800d84a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	4a2c      	ldr	r2, [pc, #176]	@ (800d8ec <UART_AdvFeatureConfig+0x154>)
 800d83a:	4013      	ands	r3, r2
 800d83c:	0019      	movs	r1, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	430a      	orrs	r2, r1
 800d848:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d84e:	2220      	movs	r2, #32
 800d850:	4013      	ands	r3, r2
 800d852:	d00b      	beq.n	800d86c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	4a25      	ldr	r2, [pc, #148]	@ (800d8f0 <UART_AdvFeatureConfig+0x158>)
 800d85c:	4013      	ands	r3, r2
 800d85e:	0019      	movs	r1, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	430a      	orrs	r2, r1
 800d86a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d870:	2240      	movs	r2, #64	@ 0x40
 800d872:	4013      	ands	r3, r2
 800d874:	d01d      	beq.n	800d8b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	4a1d      	ldr	r2, [pc, #116]	@ (800d8f4 <UART_AdvFeatureConfig+0x15c>)
 800d87e:	4013      	ands	r3, r2
 800d880:	0019      	movs	r1, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	430a      	orrs	r2, r1
 800d88c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d892:	2380      	movs	r3, #128	@ 0x80
 800d894:	035b      	lsls	r3, r3, #13
 800d896:	429a      	cmp	r2, r3
 800d898:	d10b      	bne.n	800d8b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	4a15      	ldr	r2, [pc, #84]	@ (800d8f8 <UART_AdvFeatureConfig+0x160>)
 800d8a2:	4013      	ands	r3, r2
 800d8a4:	0019      	movs	r1, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	430a      	orrs	r2, r1
 800d8b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b6:	2280      	movs	r2, #128	@ 0x80
 800d8b8:	4013      	ands	r3, r2
 800d8ba:	d00b      	beq.n	800d8d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	4a0e      	ldr	r2, [pc, #56]	@ (800d8fc <UART_AdvFeatureConfig+0x164>)
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	0019      	movs	r1, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	605a      	str	r2, [r3, #4]
  }
}
 800d8d4:	46c0      	nop			@ (mov r8, r8)
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	b002      	add	sp, #8
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	ffff7fff 	.word	0xffff7fff
 800d8e0:	fffdffff 	.word	0xfffdffff
 800d8e4:	fffeffff 	.word	0xfffeffff
 800d8e8:	fffbffff 	.word	0xfffbffff
 800d8ec:	ffffefff 	.word	0xffffefff
 800d8f0:	ffffdfff 	.word	0xffffdfff
 800d8f4:	ffefffff 	.word	0xffefffff
 800d8f8:	ff9fffff 	.word	0xff9fffff
 800d8fc:	fff7ffff 	.word	0xfff7ffff

0800d900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b092      	sub	sp, #72	@ 0x48
 800d904:	af02      	add	r7, sp, #8
 800d906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2290      	movs	r2, #144	@ 0x90
 800d90c:	2100      	movs	r1, #0
 800d90e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d910:	f7f8 f8a2 	bl	8005a58 <HAL_GetTick>
 800d914:	0003      	movs	r3, r0
 800d916:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2208      	movs	r2, #8
 800d920:	4013      	ands	r3, r2
 800d922:	2b08      	cmp	r3, #8
 800d924:	d12d      	bne.n	800d982 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d928:	2280      	movs	r2, #128	@ 0x80
 800d92a:	0391      	lsls	r1, r2, #14
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	4a47      	ldr	r2, [pc, #284]	@ (800da4c <UART_CheckIdleState+0x14c>)
 800d930:	9200      	str	r2, [sp, #0]
 800d932:	2200      	movs	r2, #0
 800d934:	f000 f88e 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800d938:	1e03      	subs	r3, r0, #0
 800d93a:	d022      	beq.n	800d982 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d93c:	f3ef 8310 	mrs	r3, PRIMASK
 800d940:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d944:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d946:	2301      	movs	r3, #1
 800d948:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94c:	f383 8810 	msr	PRIMASK, r3
}
 800d950:	46c0      	nop			@ (mov r8, r8)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2180      	movs	r1, #128	@ 0x80
 800d95e:	438a      	bics	r2, r1
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d968:	f383 8810 	msr	PRIMASK, r3
}
 800d96c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2288      	movs	r2, #136	@ 0x88
 800d972:	2120      	movs	r1, #32
 800d974:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2284      	movs	r2, #132	@ 0x84
 800d97a:	2100      	movs	r1, #0
 800d97c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e060      	b.n	800da44 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2204      	movs	r2, #4
 800d98a:	4013      	ands	r3, r2
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d146      	bne.n	800da1e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d992:	2280      	movs	r2, #128	@ 0x80
 800d994:	03d1      	lsls	r1, r2, #15
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	4a2c      	ldr	r2, [pc, #176]	@ (800da4c <UART_CheckIdleState+0x14c>)
 800d99a:	9200      	str	r2, [sp, #0]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f000 f859 	bl	800da54 <UART_WaitOnFlagUntilTimeout>
 800d9a2:	1e03      	subs	r3, r0, #0
 800d9a4:	d03b      	beq.n	800da1e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d9aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	f383 8810 	msr	PRIMASK, r3
}
 800d9ba:	46c0      	nop			@ (mov r8, r8)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4922      	ldr	r1, [pc, #136]	@ (800da50 <UART_CheckIdleState+0x150>)
 800d9c8:	400a      	ands	r2, r1
 800d9ca:	601a      	str	r2, [r3, #0]
 800d9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	f383 8810 	msr	PRIMASK, r3
}
 800d9d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d9d8:	f3ef 8310 	mrs	r3, PRIMASK
 800d9dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	f383 8810 	msr	PRIMASK, r3
}
 800d9ec:	46c0      	nop			@ (mov r8, r8)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	438a      	bics	r2, r1
 800d9fc:	609a      	str	r2, [r3, #8]
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	f383 8810 	msr	PRIMASK, r3
}
 800da08:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	228c      	movs	r2, #140	@ 0x8c
 800da0e:	2120      	movs	r1, #32
 800da10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2284      	movs	r2, #132	@ 0x84
 800da16:	2100      	movs	r1, #0
 800da18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da1a:	2303      	movs	r3, #3
 800da1c:	e012      	b.n	800da44 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2288      	movs	r2, #136	@ 0x88
 800da22:	2120      	movs	r1, #32
 800da24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	228c      	movs	r2, #140	@ 0x8c
 800da2a:	2120      	movs	r1, #32
 800da2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2284      	movs	r2, #132	@ 0x84
 800da3e:	2100      	movs	r1, #0
 800da40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	0018      	movs	r0, r3
 800da46:	46bd      	mov	sp, r7
 800da48:	b010      	add	sp, #64	@ 0x40
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	01ffffff 	.word	0x01ffffff
 800da50:	fffffedf 	.word	0xfffffedf

0800da54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	1dfb      	adds	r3, r7, #7
 800da62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da64:	e051      	b.n	800db0a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	3301      	adds	r3, #1
 800da6a:	d04e      	beq.n	800db0a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da6c:	f7f7 fff4 	bl	8005a58 <HAL_GetTick>
 800da70:	0002      	movs	r2, r0
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	69ba      	ldr	r2, [r7, #24]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d302      	bcc.n	800da82 <UART_WaitOnFlagUntilTimeout+0x2e>
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d101      	bne.n	800da86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800da82:	2303      	movs	r3, #3
 800da84:	e051      	b.n	800db2a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2204      	movs	r2, #4
 800da8e:	4013      	ands	r3, r2
 800da90:	d03b      	beq.n	800db0a <UART_WaitOnFlagUntilTimeout+0xb6>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	2b80      	cmp	r3, #128	@ 0x80
 800da96:	d038      	beq.n	800db0a <UART_WaitOnFlagUntilTimeout+0xb6>
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b40      	cmp	r3, #64	@ 0x40
 800da9c:	d035      	beq.n	800db0a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	69db      	ldr	r3, [r3, #28]
 800daa4:	2208      	movs	r2, #8
 800daa6:	4013      	ands	r3, r2
 800daa8:	2b08      	cmp	r3, #8
 800daaa:	d111      	bne.n	800dad0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2208      	movs	r2, #8
 800dab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	0018      	movs	r0, r3
 800dab8:	f000 f83c 	bl	800db34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2290      	movs	r2, #144	@ 0x90
 800dac0:	2108      	movs	r1, #8
 800dac2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2284      	movs	r2, #132	@ 0x84
 800dac8:	2100      	movs	r1, #0
 800daca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	e02c      	b.n	800db2a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	69da      	ldr	r2, [r3, #28]
 800dad6:	2380      	movs	r3, #128	@ 0x80
 800dad8:	011b      	lsls	r3, r3, #4
 800dada:	401a      	ands	r2, r3
 800dadc:	2380      	movs	r3, #128	@ 0x80
 800dade:	011b      	lsls	r3, r3, #4
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d112      	bne.n	800db0a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2280      	movs	r2, #128	@ 0x80
 800daea:	0112      	lsls	r2, r2, #4
 800daec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	0018      	movs	r0, r3
 800daf2:	f000 f81f 	bl	800db34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2290      	movs	r2, #144	@ 0x90
 800dafa:	2120      	movs	r1, #32
 800dafc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2284      	movs	r2, #132	@ 0x84
 800db02:	2100      	movs	r1, #0
 800db04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800db06:	2303      	movs	r3, #3
 800db08:	e00f      	b.n	800db2a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	69db      	ldr	r3, [r3, #28]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	4013      	ands	r3, r2
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	425a      	negs	r2, r3
 800db1a:	4153      	adcs	r3, r2
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	001a      	movs	r2, r3
 800db20:	1dfb      	adds	r3, r7, #7
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	429a      	cmp	r2, r3
 800db26:	d09e      	beq.n	800da66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	0018      	movs	r0, r3
 800db2c:	46bd      	mov	sp, r7
 800db2e:	b004      	add	sp, #16
 800db30:	bd80      	pop	{r7, pc}
	...

0800db34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08e      	sub	sp, #56	@ 0x38
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800db3c:	f3ef 8310 	mrs	r3, PRIMASK
 800db40:	617b      	str	r3, [r7, #20]
  return(result);
 800db42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db44:	637b      	str	r3, [r7, #52]	@ 0x34
 800db46:	2301      	movs	r3, #1
 800db48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	f383 8810 	msr	PRIMASK, r3
}
 800db50:	46c0      	nop			@ (mov r8, r8)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4926      	ldr	r1, [pc, #152]	@ (800dbf8 <UART_EndRxTransfer+0xc4>)
 800db5e:	400a      	ands	r2, r1
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	f383 8810 	msr	PRIMASK, r3
}
 800db6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800db6e:	f3ef 8310 	mrs	r3, PRIMASK
 800db72:	623b      	str	r3, [r7, #32]
  return(result);
 800db74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db76:	633b      	str	r3, [r7, #48]	@ 0x30
 800db78:	2301      	movs	r3, #1
 800db7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db7e:	f383 8810 	msr	PRIMASK, r3
}
 800db82:	46c0      	nop			@ (mov r8, r8)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	689a      	ldr	r2, [r3, #8]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	491b      	ldr	r1, [pc, #108]	@ (800dbfc <UART_EndRxTransfer+0xc8>)
 800db90:	400a      	ands	r2, r1
 800db92:	609a      	str	r2, [r3, #8]
 800db94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db96:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9a:	f383 8810 	msr	PRIMASK, r3
}
 800db9e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d118      	bne.n	800dbda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800dba8:	f3ef 8310 	mrs	r3, PRIMASK
 800dbac:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f383 8810 	msr	PRIMASK, r3
}
 800dbbc:	46c0      	nop			@ (mov r8, r8)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2110      	movs	r1, #16
 800dbca:	438a      	bics	r2, r1
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	f383 8810 	msr	PRIMASK, r3
}
 800dbd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	228c      	movs	r2, #140	@ 0x8c
 800dbde:	2120      	movs	r1, #32
 800dbe0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dbee:	46c0      	nop			@ (mov r8, r8)
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	b00e      	add	sp, #56	@ 0x38
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	46c0      	nop			@ (mov r8, r8)
 800dbf8:	fffffedf 	.word	0xfffffedf
 800dbfc:	effffffe 	.word	0xeffffffe

0800dc00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2284      	movs	r2, #132	@ 0x84
 800dc0c:	5c9b      	ldrb	r3, [r3, r2]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d101      	bne.n	800dc16 <HAL_UARTEx_DisableFifoMode+0x16>
 800dc12:	2302      	movs	r3, #2
 800dc14:	e027      	b.n	800dc66 <HAL_UARTEx_DisableFifoMode+0x66>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2284      	movs	r2, #132	@ 0x84
 800dc1a:	2101      	movs	r1, #1
 800dc1c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2288      	movs	r2, #136	@ 0x88
 800dc22:	2124      	movs	r1, #36	@ 0x24
 800dc24:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2101      	movs	r1, #1
 800dc3a:	438a      	bics	r2, r1
 800dc3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	4a0b      	ldr	r2, [pc, #44]	@ (800dc70 <HAL_UARTEx_DisableFifoMode+0x70>)
 800dc42:	4013      	ands	r3, r2
 800dc44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2288      	movs	r2, #136	@ 0x88
 800dc58:	2120      	movs	r1, #32
 800dc5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2284      	movs	r2, #132	@ 0x84
 800dc60:	2100      	movs	r1, #0
 800dc62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	0018      	movs	r0, r3
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	b004      	add	sp, #16
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	46c0      	nop			@ (mov r8, r8)
 800dc70:	dfffffff 	.word	0xdfffffff

0800dc74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2284      	movs	r2, #132	@ 0x84
 800dc82:	5c9b      	ldrb	r3, [r3, r2]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d101      	bne.n	800dc8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc88:	2302      	movs	r3, #2
 800dc8a:	e02e      	b.n	800dcea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2284      	movs	r2, #132	@ 0x84
 800dc90:	2101      	movs	r1, #1
 800dc92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2288      	movs	r2, #136	@ 0x88
 800dc98:	2124      	movs	r1, #36	@ 0x24
 800dc9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2101      	movs	r1, #1
 800dcb0:	438a      	bics	r2, r1
 800dcb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	00db      	lsls	r3, r3, #3
 800dcbc:	08d9      	lsrs	r1, r3, #3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	430a      	orrs	r2, r1
 800dcc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	0018      	movs	r0, r3
 800dccc:	f000 f854 	bl	800dd78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2288      	movs	r2, #136	@ 0x88
 800dcdc:	2120      	movs	r1, #32
 800dcde:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2284      	movs	r2, #132	@ 0x84
 800dce4:	2100      	movs	r1, #0
 800dce6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	0018      	movs	r0, r3
 800dcec:	46bd      	mov	sp, r7
 800dcee:	b004      	add	sp, #16
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2284      	movs	r2, #132	@ 0x84
 800dd02:	5c9b      	ldrb	r3, [r3, r2]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d101      	bne.n	800dd0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd08:	2302      	movs	r3, #2
 800dd0a:	e02f      	b.n	800dd6c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2284      	movs	r2, #132	@ 0x84
 800dd10:	2101      	movs	r1, #1
 800dd12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2288      	movs	r2, #136	@ 0x88
 800dd18:	2124      	movs	r1, #36	@ 0x24
 800dd1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2101      	movs	r1, #1
 800dd30:	438a      	bics	r2, r1
 800dd32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	689b      	ldr	r3, [r3, #8]
 800dd3a:	4a0e      	ldr	r2, [pc, #56]	@ (800dd74 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	0019      	movs	r1, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	430a      	orrs	r2, r1
 800dd48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	0018      	movs	r0, r3
 800dd4e:	f000 f813 	bl	800dd78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2288      	movs	r2, #136	@ 0x88
 800dd5e:	2120      	movs	r1, #32
 800dd60:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2284      	movs	r2, #132	@ 0x84
 800dd66:	2100      	movs	r1, #0
 800dd68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	0018      	movs	r0, r3
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	b004      	add	sp, #16
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	f1ffffff 	.word	0xf1ffffff

0800dd78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d108      	bne.n	800dd9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	226a      	movs	r2, #106	@ 0x6a
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2268      	movs	r2, #104	@ 0x68
 800dd94:	2101      	movs	r1, #1
 800dd96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd98:	e043      	b.n	800de22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd9a:	260f      	movs	r6, #15
 800dd9c:	19bb      	adds	r3, r7, r6
 800dd9e:	2208      	movs	r2, #8
 800dda0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dda2:	200e      	movs	r0, #14
 800dda4:	183b      	adds	r3, r7, r0
 800dda6:	2208      	movs	r2, #8
 800dda8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	0e5b      	lsrs	r3, r3, #25
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	240d      	movs	r4, #13
 800ddb6:	193b      	adds	r3, r7, r4
 800ddb8:	2107      	movs	r1, #7
 800ddba:	400a      	ands	r2, r1
 800ddbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	0f5b      	lsrs	r3, r3, #29
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	250c      	movs	r5, #12
 800ddca:	197b      	adds	r3, r7, r5
 800ddcc:	2107      	movs	r1, #7
 800ddce:	400a      	ands	r2, r1
 800ddd0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddd2:	183b      	adds	r3, r7, r0
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	197a      	adds	r2, r7, r5
 800ddd8:	7812      	ldrb	r2, [r2, #0]
 800ddda:	4914      	ldr	r1, [pc, #80]	@ (800de2c <UARTEx_SetNbDataToProcess+0xb4>)
 800dddc:	5c8a      	ldrb	r2, [r1, r2]
 800ddde:	435a      	muls	r2, r3
 800dde0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800dde2:	197b      	adds	r3, r7, r5
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	4a12      	ldr	r2, [pc, #72]	@ (800de30 <UARTEx_SetNbDataToProcess+0xb8>)
 800dde8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddea:	0019      	movs	r1, r3
 800ddec:	f7f2 fa32 	bl	8000254 <__divsi3>
 800ddf0:	0003      	movs	r3, r0
 800ddf2:	b299      	uxth	r1, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	226a      	movs	r2, #106	@ 0x6a
 800ddf8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddfa:	19bb      	adds	r3, r7, r6
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	193a      	adds	r2, r7, r4
 800de00:	7812      	ldrb	r2, [r2, #0]
 800de02:	490a      	ldr	r1, [pc, #40]	@ (800de2c <UARTEx_SetNbDataToProcess+0xb4>)
 800de04:	5c8a      	ldrb	r2, [r1, r2]
 800de06:	435a      	muls	r2, r3
 800de08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800de0a:	193b      	adds	r3, r7, r4
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	4a08      	ldr	r2, [pc, #32]	@ (800de30 <UARTEx_SetNbDataToProcess+0xb8>)
 800de10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de12:	0019      	movs	r1, r3
 800de14:	f7f2 fa1e 	bl	8000254 <__divsi3>
 800de18:	0003      	movs	r3, r0
 800de1a:	b299      	uxth	r1, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2268      	movs	r2, #104	@ 0x68
 800de20:	5299      	strh	r1, [r3, r2]
}
 800de22:	46c0      	nop			@ (mov r8, r8)
 800de24:	46bd      	mov	sp, r7
 800de26:	b005      	add	sp, #20
 800de28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de2a:	46c0      	nop			@ (mov r8, r8)
 800de2c:	080121a4 	.word	0x080121a4
 800de30:	080121ac 	.word	0x080121ac

0800de34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800de3c:	4b06      	ldr	r3, [pc, #24]	@ (800de58 <USB_DisableGlobalInt+0x24>)
 800de3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	43d2      	mvns	r2, r2
 800de48:	401a      	ands	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	0018      	movs	r0, r3
 800de52:	46bd      	mov	sp, r7
 800de54:	b004      	add	sp, #16
 800de56:	bd80      	pop	{r7, pc}
 800de58:	0000bf80 	.word	0x0000bf80

0800de5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	000a      	movs	r2, r1
 800de66:	1cfb      	adds	r3, r7, #3
 800de68:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800de6a:	1cfb      	adds	r3, r7, #3
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d107      	bne.n	800de82 <USB_SetCurrentMode+0x26>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	085a      	lsrs	r2, r3, #1
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	641a      	str	r2, [r3, #64]	@ 0x40
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	e000      	b.n	800de84 <USB_SetCurrentMode+0x28>
    return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
}
 800de84:	0018      	movs	r0, r3
 800de86:	46bd      	mov	sp, r7
 800de88:	b002      	add	sp, #8
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800de8c:	b5b0      	push	{r4, r5, r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	1d3b      	adds	r3, r7, #4
 800de96:	6019      	str	r1, [r3, #0]
 800de98:	605a      	str	r2, [r3, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2201      	movs	r2, #1
 800de9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dea4:	2201      	movs	r2, #1
 800dea6:	4393      	bics	r3, r2
 800dea8:	001a      	movs	r2, r3
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800deae:	2517      	movs	r5, #23
 800deb0:	197c      	adds	r4, r7, r5
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2100      	movs	r1, #0
 800deb6:	0018      	movs	r0, r3
 800deb8:	f7ff ffd0 	bl	800de5c <USB_SetCurrentMode>
 800debc:	0003      	movs	r3, r0
 800debe:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2200      	movs	r2, #0
 800dec4:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dec6:	197b      	adds	r3, r7, r5
 800dec8:	781b      	ldrb	r3, [r3, #0]
}
 800deca:	0018      	movs	r0, r3
 800decc:	46bd      	mov	sp, r7
 800dece:	b006      	add	sp, #24
 800ded0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ded4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b093      	sub	sp, #76	@ 0x4c
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	785b      	ldrb	r3, [r3, #1]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d001      	beq.n	800deea <USB_EPStartXfer+0x16>
 800dee6:	f000 fcc1 	bl	800e86c <USB_EPStartXfer+0x998>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	699a      	ldr	r2, [r3, #24]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	429a      	cmp	r2, r3
 800def4:	d903      	bls.n	800defe <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	647b      	str	r3, [r7, #68]	@ 0x44
 800defc:	e002      	b.n	800df04 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	7b1b      	ldrb	r3, [r3, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d12b      	bne.n	800df64 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	6959      	ldr	r1, [r3, #20]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	88da      	ldrh	r2, [r3, #6]
 800df14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df16:	b29b      	uxth	r3, r3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 fd81 	bl	800ea20 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	00db      	lsls	r3, r3, #3
 800df24:	4ae3      	ldr	r2, [pc, #908]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800df26:	4694      	mov	ip, r2
 800df28:	4463      	add	r3, ip
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	49e0      	ldr	r1, [pc, #896]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800df34:	468c      	mov	ip, r1
 800df36:	4463      	add	r3, ip
 800df38:	0412      	lsls	r2, r2, #16
 800df3a:	0c12      	lsrs	r2, r2, #16
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	00db      	lsls	r3, r3, #3
 800df44:	4adb      	ldr	r2, [pc, #876]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800df46:	4694      	mov	ip, r2
 800df48:	4463      	add	r3, ip
 800df4a:	6819      	ldr	r1, [r3, #0]
 800df4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df4e:	041a      	lsls	r2, r3, #16
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	00db      	lsls	r3, r3, #3
 800df56:	48d7      	ldr	r0, [pc, #860]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800df58:	4684      	mov	ip, r0
 800df5a:	4463      	add	r3, ip
 800df5c:	430a      	orrs	r2, r1
 800df5e:	601a      	str	r2, [r3, #0]
 800df60:	f000 fc69 	bl	800e836 <USB_EPStartXfer+0x962>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	78db      	ldrb	r3, [r3, #3]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d000      	beq.n	800df6e <USB_EPStartXfer+0x9a>
 800df6c:	e315      	b.n	800e59a <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	6a1a      	ldr	r2, [r3, #32]
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	429a      	cmp	r2, r3
 800df78:	d800      	bhi.n	800df7c <USB_EPStartXfer+0xa8>
 800df7a:	e2c8      	b.n	800e50e <USB_EPStartXfer+0x63a>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	18d3      	adds	r3, r2, r3
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4acb      	ldr	r2, [pc, #812]	@ (800e2b8 <USB_EPStartXfer+0x3e4>)
 800df8a:	4013      	ands	r3, r2
 800df8c:	60fb      	str	r3, [r7, #12]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	18d3      	adds	r3, r2, r3
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	49c8      	ldr	r1, [pc, #800]	@ (800e2bc <USB_EPStartXfer+0x3e8>)
 800df9c:	430a      	orrs	r2, r1
 800df9e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	6a1a      	ldr	r2, [r3, #32]
 800dfa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	18d3      	adds	r3, r2, r3
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2240      	movs	r2, #64	@ 0x40
 800dfba:	4013      	ands	r3, r2
 800dfbc:	d100      	bne.n	800dfc0 <USB_EPStartXfer+0xec>
 800dfbe:	e14f      	b.n	800e260 <USB_EPStartXfer+0x38c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	785b      	ldrb	r3, [r3, #1]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d162      	bne.n	800e08e <USB_EPStartXfer+0x1ba>
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	00db      	lsls	r3, r3, #3
 800dfce:	4ab9      	ldr	r2, [pc, #740]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800dfd0:	4694      	mov	ip, r2
 800dfd2:	4463      	add	r3, ip
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	49b5      	ldr	r1, [pc, #724]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800dfde:	468c      	mov	ip, r1
 800dfe0:	4463      	add	r3, ip
 800dfe2:	0192      	lsls	r2, r2, #6
 800dfe4:	0992      	lsrs	r2, r2, #6
 800dfe6:	605a      	str	r2, [r3, #4]
 800dfe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d111      	bne.n	800e012 <USB_EPStartXfer+0x13e>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	4aaf      	ldr	r2, [pc, #700]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800dff6:	4694      	mov	ip, r2
 800dff8:	4463      	add	r3, ip
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	49ac      	ldr	r1, [pc, #688]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e004:	468c      	mov	ip, r1
 800e006:	4463      	add	r3, ip
 800e008:	2180      	movs	r1, #128	@ 0x80
 800e00a:	0609      	lsls	r1, r1, #24
 800e00c:	430a      	orrs	r2, r1
 800e00e:	605a      	str	r2, [r3, #4]
 800e010:	e062      	b.n	800e0d8 <USB_EPStartXfer+0x204>
 800e012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e014:	2b3e      	cmp	r3, #62	@ 0x3e
 800e016:	d81b      	bhi.n	800e050 <USB_EPStartXfer+0x17c>
 800e018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e01a:	085b      	lsrs	r3, r3, #1
 800e01c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e01e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e020:	2201      	movs	r2, #1
 800e022:	4013      	ands	r3, r2
 800e024:	d002      	beq.n	800e02c <USB_EPStartXfer+0x158>
 800e026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e028:	3301      	adds	r3, #1
 800e02a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	4aa0      	ldr	r2, [pc, #640]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e034:	4694      	mov	ip, r2
 800e036:	4463      	add	r3, ip
 800e038:	6859      	ldr	r1, [r3, #4]
 800e03a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e03c:	069a      	lsls	r2, r3, #26
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	00db      	lsls	r3, r3, #3
 800e044:	489b      	ldr	r0, [pc, #620]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e046:	4684      	mov	ip, r0
 800e048:	4463      	add	r3, ip
 800e04a:	430a      	orrs	r2, r1
 800e04c:	605a      	str	r2, [r3, #4]
 800e04e:	e043      	b.n	800e0d8 <USB_EPStartXfer+0x204>
 800e050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e052:	095b      	lsrs	r3, r3, #5
 800e054:	643b      	str	r3, [r7, #64]	@ 0x40
 800e056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e058:	221f      	movs	r2, #31
 800e05a:	4013      	ands	r3, r2
 800e05c:	d102      	bne.n	800e064 <USB_EPStartXfer+0x190>
 800e05e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e060:	3b01      	subs	r3, #1
 800e062:	643b      	str	r3, [r7, #64]	@ 0x40
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	00db      	lsls	r3, r3, #3
 800e06a:	4a92      	ldr	r2, [pc, #584]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e06c:	4694      	mov	ip, r2
 800e06e:	4463      	add	r3, ip
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e074:	069b      	lsls	r3, r3, #26
 800e076:	431a      	orrs	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	498d      	ldr	r1, [pc, #564]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e080:	468c      	mov	ip, r1
 800e082:	4463      	add	r3, ip
 800e084:	2180      	movs	r1, #128	@ 0x80
 800e086:	0609      	lsls	r1, r1, #24
 800e088:	430a      	orrs	r2, r1
 800e08a:	605a      	str	r2, [r3, #4]
 800e08c:	e024      	b.n	800e0d8 <USB_EPStartXfer+0x204>
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	785b      	ldrb	r3, [r3, #1]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d120      	bne.n	800e0d8 <USB_EPStartXfer+0x204>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	00db      	lsls	r3, r3, #3
 800e09c:	4a85      	ldr	r2, [pc, #532]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e09e:	4694      	mov	ip, r2
 800e0a0:	4463      	add	r3, ip
 800e0a2:	685a      	ldr	r2, [r3, #4]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	00db      	lsls	r3, r3, #3
 800e0aa:	4982      	ldr	r1, [pc, #520]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e0ac:	468c      	mov	ip, r1
 800e0ae:	4463      	add	r3, ip
 800e0b0:	0412      	lsls	r2, r2, #16
 800e0b2:	0c12      	lsrs	r2, r2, #16
 800e0b4:	605a      	str	r2, [r3, #4]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	4a7d      	ldr	r2, [pc, #500]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e0be:	4694      	mov	ip, r2
 800e0c0:	4463      	add	r3, ip
 800e0c2:	6859      	ldr	r1, [r3, #4]
 800e0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0c6:	041a      	lsls	r2, r3, #16
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	00db      	lsls	r3, r3, #3
 800e0ce:	4879      	ldr	r0, [pc, #484]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e0d0:	4684      	mov	ip, r0
 800e0d2:	4463      	add	r3, ip
 800e0d4:	430a      	orrs	r2, r1
 800e0d6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e0d8:	2016      	movs	r0, #22
 800e0da:	183b      	adds	r3, r7, r0
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	8952      	ldrh	r2, [r2, #10]
 800e0e0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	6959      	ldr	r1, [r3, #20]
 800e0e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e8:	b29c      	uxth	r4, r3
 800e0ea:	183b      	adds	r3, r7, r0
 800e0ec:	881a      	ldrh	r2, [r3, #0]
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	0023      	movs	r3, r4
 800e0f2:	f000 fc95 	bl	800ea20 <USB_WritePMA>
            ep->xfer_buff += len;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	695a      	ldr	r2, [r3, #20]
 800e0fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0fc:	18d2      	adds	r2, r2, r3
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	6a1a      	ldr	r2, [r3, #32]
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d906      	bls.n	800e11c <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	6a1a      	ldr	r2, [r3, #32]
 800e112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e114:	1ad2      	subs	r2, r2, r3
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	621a      	str	r2, [r3, #32]
 800e11a:	e005      	b.n	800e128 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	6a1b      	ldr	r3, [r3, #32]
 800e120:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2200      	movs	r2, #0
 800e126:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	785b      	ldrb	r3, [r3, #1]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d162      	bne.n	800e1f6 <USB_EPStartXfer+0x322>
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	4a5f      	ldr	r2, [pc, #380]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e138:	4694      	mov	ip, r2
 800e13a:	4463      	add	r3, ip
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	00db      	lsls	r3, r3, #3
 800e144:	495b      	ldr	r1, [pc, #364]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e146:	468c      	mov	ip, r1
 800e148:	4463      	add	r3, ip
 800e14a:	0192      	lsls	r2, r2, #6
 800e14c:	0992      	lsrs	r2, r2, #6
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e152:	2b00      	cmp	r3, #0
 800e154:	d111      	bne.n	800e17a <USB_EPStartXfer+0x2a6>
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	4a55      	ldr	r2, [pc, #340]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e15e:	4694      	mov	ip, r2
 800e160:	4463      	add	r3, ip
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	00db      	lsls	r3, r3, #3
 800e16a:	4952      	ldr	r1, [pc, #328]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e16c:	468c      	mov	ip, r1
 800e16e:	4463      	add	r3, ip
 800e170:	2180      	movs	r1, #128	@ 0x80
 800e172:	0609      	lsls	r1, r1, #24
 800e174:	430a      	orrs	r2, r1
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	e062      	b.n	800e240 <USB_EPStartXfer+0x36c>
 800e17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e17c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e17e:	d81b      	bhi.n	800e1b8 <USB_EPStartXfer+0x2e4>
 800e180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e182:	085b      	lsrs	r3, r3, #1
 800e184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e188:	2201      	movs	r2, #1
 800e18a:	4013      	ands	r3, r2
 800e18c:	d002      	beq.n	800e194 <USB_EPStartXfer+0x2c0>
 800e18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e190:	3301      	adds	r3, #1
 800e192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	00db      	lsls	r3, r3, #3
 800e19a:	4a46      	ldr	r2, [pc, #280]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e19c:	4694      	mov	ip, r2
 800e19e:	4463      	add	r3, ip
 800e1a0:	6819      	ldr	r1, [r3, #0]
 800e1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1a4:	069a      	lsls	r2, r3, #26
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	4841      	ldr	r0, [pc, #260]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e1ae:	4684      	mov	ip, r0
 800e1b0:	4463      	add	r3, ip
 800e1b2:	430a      	orrs	r2, r1
 800e1b4:	601a      	str	r2, [r3, #0]
 800e1b6:	e043      	b.n	800e240 <USB_EPStartXfer+0x36c>
 800e1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ba:	095b      	lsrs	r3, r3, #5
 800e1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c0:	221f      	movs	r2, #31
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	d102      	bne.n	800e1cc <USB_EPStartXfer+0x2f8>
 800e1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1c8:	3b01      	subs	r3, #1
 800e1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	00db      	lsls	r3, r3, #3
 800e1d2:	4a38      	ldr	r2, [pc, #224]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e1d4:	4694      	mov	ip, r2
 800e1d6:	4463      	add	r3, ip
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1dc:	069b      	lsls	r3, r3, #26
 800e1de:	431a      	orrs	r2, r3
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	4933      	ldr	r1, [pc, #204]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e1e8:	468c      	mov	ip, r1
 800e1ea:	4463      	add	r3, ip
 800e1ec:	2180      	movs	r1, #128	@ 0x80
 800e1ee:	0609      	lsls	r1, r1, #24
 800e1f0:	430a      	orrs	r2, r1
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	e024      	b.n	800e240 <USB_EPStartXfer+0x36c>
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	785b      	ldrb	r3, [r3, #1]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d120      	bne.n	800e240 <USB_EPStartXfer+0x36c>
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	4a2b      	ldr	r2, [pc, #172]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e206:	4694      	mov	ip, r2
 800e208:	4463      	add	r3, ip
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	00db      	lsls	r3, r3, #3
 800e212:	4928      	ldr	r1, [pc, #160]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e214:	468c      	mov	ip, r1
 800e216:	4463      	add	r3, ip
 800e218:	0412      	lsls	r2, r2, #16
 800e21a:	0c12      	lsrs	r2, r2, #16
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	00db      	lsls	r3, r3, #3
 800e224:	4a23      	ldr	r2, [pc, #140]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e226:	4694      	mov	ip, r2
 800e228:	4463      	add	r3, ip
 800e22a:	6819      	ldr	r1, [r3, #0]
 800e22c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e22e:	041a      	lsls	r2, r3, #16
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	00db      	lsls	r3, r3, #3
 800e236:	481f      	ldr	r0, [pc, #124]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e238:	4684      	mov	ip, r0
 800e23a:	4463      	add	r3, ip
 800e23c:	430a      	orrs	r2, r1
 800e23e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e240:	2016      	movs	r0, #22
 800e242:	183b      	adds	r3, r7, r0
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	8912      	ldrh	r2, [r2, #8]
 800e248:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	6959      	ldr	r1, [r3, #20]
 800e24e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e250:	b29c      	uxth	r4, r3
 800e252:	183b      	adds	r3, r7, r0
 800e254:	881a      	ldrh	r2, [r3, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	0023      	movs	r3, r4
 800e25a:	f000 fbe1 	bl	800ea20 <USB_WritePMA>
 800e25e:	e2ea      	b.n	800e836 <USB_EPStartXfer+0x962>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	785b      	ldrb	r3, [r3, #1]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d169      	bne.n	800e33c <USB_EPStartXfer+0x468>
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	4a11      	ldr	r2, [pc, #68]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e270:	4694      	mov	ip, r2
 800e272:	4463      	add	r3, ip
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	00db      	lsls	r3, r3, #3
 800e27c:	490d      	ldr	r1, [pc, #52]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e27e:	468c      	mov	ip, r1
 800e280:	4463      	add	r3, ip
 800e282:	0192      	lsls	r2, r2, #6
 800e284:	0992      	lsrs	r2, r2, #6
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d118      	bne.n	800e2c0 <USB_EPStartXfer+0x3ec>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	00db      	lsls	r3, r3, #3
 800e294:	4a07      	ldr	r2, [pc, #28]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e296:	4694      	mov	ip, r2
 800e298:	4463      	add	r3, ip
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	00db      	lsls	r3, r3, #3
 800e2a2:	4904      	ldr	r1, [pc, #16]	@ (800e2b4 <USB_EPStartXfer+0x3e0>)
 800e2a4:	468c      	mov	ip, r1
 800e2a6:	4463      	add	r3, ip
 800e2a8:	2180      	movs	r1, #128	@ 0x80
 800e2aa:	0609      	lsls	r1, r1, #24
 800e2ac:	430a      	orrs	r2, r1
 800e2ae:	601a      	str	r2, [r3, #0]
 800e2b0:	e069      	b.n	800e386 <USB_EPStartXfer+0x4b2>
 800e2b2:	46c0      	nop			@ (mov r8, r8)
 800e2b4:	40009800 	.word	0x40009800
 800e2b8:	07ff8f8f 	.word	0x07ff8f8f
 800e2bc:	00008180 	.word	0x00008180
 800e2c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2c4:	d81b      	bhi.n	800e2fe <USB_EPStartXfer+0x42a>
 800e2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2c8:	085b      	lsrs	r3, r3, #1
 800e2ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	d002      	beq.n	800e2da <USB_EPStartXfer+0x406>
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	4ada      	ldr	r2, [pc, #872]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e2e2:	4694      	mov	ip, r2
 800e2e4:	4463      	add	r3, ip
 800e2e6:	6819      	ldr	r1, [r3, #0]
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ea:	069a      	lsls	r2, r3, #26
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	00db      	lsls	r3, r3, #3
 800e2f2:	48d6      	ldr	r0, [pc, #856]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e2f4:	4684      	mov	ip, r0
 800e2f6:	4463      	add	r3, ip
 800e2f8:	430a      	orrs	r2, r1
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	e043      	b.n	800e386 <USB_EPStartXfer+0x4b2>
 800e2fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e300:	095b      	lsrs	r3, r3, #5
 800e302:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e306:	221f      	movs	r2, #31
 800e308:	4013      	ands	r3, r2
 800e30a:	d102      	bne.n	800e312 <USB_EPStartXfer+0x43e>
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	3b01      	subs	r3, #1
 800e310:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	00db      	lsls	r3, r3, #3
 800e318:	4acc      	ldr	r2, [pc, #816]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e31a:	4694      	mov	ip, r2
 800e31c:	4463      	add	r3, ip
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e322:	069b      	lsls	r3, r3, #26
 800e324:	431a      	orrs	r2, r3
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	00db      	lsls	r3, r3, #3
 800e32c:	49c7      	ldr	r1, [pc, #796]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e32e:	468c      	mov	ip, r1
 800e330:	4463      	add	r3, ip
 800e332:	2180      	movs	r1, #128	@ 0x80
 800e334:	0609      	lsls	r1, r1, #24
 800e336:	430a      	orrs	r2, r1
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	e024      	b.n	800e386 <USB_EPStartXfer+0x4b2>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d120      	bne.n	800e386 <USB_EPStartXfer+0x4b2>
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	4ac0      	ldr	r2, [pc, #768]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e34c:	4694      	mov	ip, r2
 800e34e:	4463      	add	r3, ip
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	49bc      	ldr	r1, [pc, #752]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e35a:	468c      	mov	ip, r1
 800e35c:	4463      	add	r3, ip
 800e35e:	0412      	lsls	r2, r2, #16
 800e360:	0c12      	lsrs	r2, r2, #16
 800e362:	601a      	str	r2, [r3, #0]
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	4ab8      	ldr	r2, [pc, #736]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e36c:	4694      	mov	ip, r2
 800e36e:	4463      	add	r3, ip
 800e370:	6819      	ldr	r1, [r3, #0]
 800e372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e374:	041a      	lsls	r2, r3, #16
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	00db      	lsls	r3, r3, #3
 800e37c:	48b3      	ldr	r0, [pc, #716]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e37e:	4684      	mov	ip, r0
 800e380:	4463      	add	r3, ip
 800e382:	430a      	orrs	r2, r1
 800e384:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e386:	2016      	movs	r0, #22
 800e388:	183b      	adds	r3, r7, r0
 800e38a:	683a      	ldr	r2, [r7, #0]
 800e38c:	8912      	ldrh	r2, [r2, #8]
 800e38e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	6959      	ldr	r1, [r3, #20]
 800e394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e396:	b29c      	uxth	r4, r3
 800e398:	183b      	adds	r3, r7, r0
 800e39a:	881a      	ldrh	r2, [r3, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	0023      	movs	r3, r4
 800e3a0:	f000 fb3e 	bl	800ea20 <USB_WritePMA>
            ep->xfer_buff += len;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	695a      	ldr	r2, [r3, #20]
 800e3a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3aa:	18d2      	adds	r2, r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	6a1a      	ldr	r2, [r3, #32]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d906      	bls.n	800e3ca <USB_EPStartXfer+0x4f6>
            {
              ep->xfer_len_db -= len;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	6a1a      	ldr	r2, [r3, #32]
 800e3c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3c2:	1ad2      	subs	r2, r2, r3
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	621a      	str	r2, [r3, #32]
 800e3c8:	e005      	b.n	800e3d6 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	6a1b      	ldr	r3, [r3, #32]
 800e3ce:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	785b      	ldrb	r3, [r3, #1]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d162      	bne.n	800e4a4 <USB_EPStartXfer+0x5d0>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	00db      	lsls	r3, r3, #3
 800e3e4:	4a99      	ldr	r2, [pc, #612]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e3e6:	4694      	mov	ip, r2
 800e3e8:	4463      	add	r3, ip
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	00db      	lsls	r3, r3, #3
 800e3f2:	4996      	ldr	r1, [pc, #600]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e3f4:	468c      	mov	ip, r1
 800e3f6:	4463      	add	r3, ip
 800e3f8:	0192      	lsls	r2, r2, #6
 800e3fa:	0992      	lsrs	r2, r2, #6
 800e3fc:	605a      	str	r2, [r3, #4]
 800e3fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e400:	2b00      	cmp	r3, #0
 800e402:	d111      	bne.n	800e428 <USB_EPStartXfer+0x554>
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	00db      	lsls	r3, r3, #3
 800e40a:	4a90      	ldr	r2, [pc, #576]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e40c:	4694      	mov	ip, r2
 800e40e:	4463      	add	r3, ip
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	00db      	lsls	r3, r3, #3
 800e418:	498c      	ldr	r1, [pc, #560]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e41a:	468c      	mov	ip, r1
 800e41c:	4463      	add	r3, ip
 800e41e:	2180      	movs	r1, #128	@ 0x80
 800e420:	0609      	lsls	r1, r1, #24
 800e422:	430a      	orrs	r2, r1
 800e424:	605a      	str	r2, [r3, #4]
 800e426:	e062      	b.n	800e4ee <USB_EPStartXfer+0x61a>
 800e428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e42a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e42c:	d81b      	bhi.n	800e466 <USB_EPStartXfer+0x592>
 800e42e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e430:	085b      	lsrs	r3, r3, #1
 800e432:	637b      	str	r3, [r7, #52]	@ 0x34
 800e434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e436:	2201      	movs	r2, #1
 800e438:	4013      	ands	r3, r2
 800e43a:	d002      	beq.n	800e442 <USB_EPStartXfer+0x56e>
 800e43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e43e:	3301      	adds	r3, #1
 800e440:	637b      	str	r3, [r7, #52]	@ 0x34
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	4a80      	ldr	r2, [pc, #512]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e44a:	4694      	mov	ip, r2
 800e44c:	4463      	add	r3, ip
 800e44e:	6859      	ldr	r1, [r3, #4]
 800e450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e452:	069a      	lsls	r2, r3, #26
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	487c      	ldr	r0, [pc, #496]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e45c:	4684      	mov	ip, r0
 800e45e:	4463      	add	r3, ip
 800e460:	430a      	orrs	r2, r1
 800e462:	605a      	str	r2, [r3, #4]
 800e464:	e043      	b.n	800e4ee <USB_EPStartXfer+0x61a>
 800e466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e468:	095b      	lsrs	r3, r3, #5
 800e46a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e46e:	221f      	movs	r2, #31
 800e470:	4013      	ands	r3, r2
 800e472:	d102      	bne.n	800e47a <USB_EPStartXfer+0x5a6>
 800e474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e476:	3b01      	subs	r3, #1
 800e478:	637b      	str	r3, [r7, #52]	@ 0x34
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	00db      	lsls	r3, r3, #3
 800e480:	4a72      	ldr	r2, [pc, #456]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e482:	4694      	mov	ip, r2
 800e484:	4463      	add	r3, ip
 800e486:	685a      	ldr	r2, [r3, #4]
 800e488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48a:	069b      	lsls	r3, r3, #26
 800e48c:	431a      	orrs	r2, r3
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	496d      	ldr	r1, [pc, #436]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e496:	468c      	mov	ip, r1
 800e498:	4463      	add	r3, ip
 800e49a:	2180      	movs	r1, #128	@ 0x80
 800e49c:	0609      	lsls	r1, r1, #24
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	605a      	str	r2, [r3, #4]
 800e4a2:	e024      	b.n	800e4ee <USB_EPStartXfer+0x61a>
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	785b      	ldrb	r3, [r3, #1]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d120      	bne.n	800e4ee <USB_EPStartXfer+0x61a>
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	00db      	lsls	r3, r3, #3
 800e4b2:	4a66      	ldr	r2, [pc, #408]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e4b4:	4694      	mov	ip, r2
 800e4b6:	4463      	add	r3, ip
 800e4b8:	685a      	ldr	r2, [r3, #4]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	4962      	ldr	r1, [pc, #392]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e4c2:	468c      	mov	ip, r1
 800e4c4:	4463      	add	r3, ip
 800e4c6:	0412      	lsls	r2, r2, #16
 800e4c8:	0c12      	lsrs	r2, r2, #16
 800e4ca:	605a      	str	r2, [r3, #4]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	00db      	lsls	r3, r3, #3
 800e4d2:	4a5e      	ldr	r2, [pc, #376]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e4d4:	4694      	mov	ip, r2
 800e4d6:	4463      	add	r3, ip
 800e4d8:	6859      	ldr	r1, [r3, #4]
 800e4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4dc:	041a      	lsls	r2, r3, #16
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	00db      	lsls	r3, r3, #3
 800e4e4:	4859      	ldr	r0, [pc, #356]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e4e6:	4684      	mov	ip, r0
 800e4e8:	4463      	add	r3, ip
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e4ee:	2016      	movs	r0, #22
 800e4f0:	183b      	adds	r3, r7, r0
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	8952      	ldrh	r2, [r2, #10]
 800e4f6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	6959      	ldr	r1, [r3, #20]
 800e4fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4fe:	b29c      	uxth	r4, r3
 800e500:	183b      	adds	r3, r7, r0
 800e502:	881a      	ldrh	r2, [r3, #0]
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	0023      	movs	r3, r4
 800e508:	f000 fa8a 	bl	800ea20 <USB_WritePMA>
 800e50c:	e193      	b.n	800e836 <USB_EPStartXfer+0x962>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	647b      	str	r3, [r7, #68]	@ 0x44

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	18d3      	adds	r3, r2, r3
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a4b      	ldr	r2, [pc, #300]	@ (800e650 <USB_EPStartXfer+0x77c>)
 800e522:	4013      	ands	r3, r2
 800e524:	613b      	str	r3, [r7, #16]
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	18d3      	adds	r3, r2, r3
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	4948      	ldr	r1, [pc, #288]	@ (800e654 <USB_EPStartXfer+0x780>)
 800e534:	430a      	orrs	r2, r1
 800e536:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	00db      	lsls	r3, r3, #3
 800e53e:	4a43      	ldr	r2, [pc, #268]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e540:	4694      	mov	ip, r2
 800e542:	4463      	add	r3, ip
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	493f      	ldr	r1, [pc, #252]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e54e:	468c      	mov	ip, r1
 800e550:	4463      	add	r3, ip
 800e552:	0412      	lsls	r2, r2, #16
 800e554:	0c12      	lsrs	r2, r2, #16
 800e556:	601a      	str	r2, [r3, #0]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	4a3b      	ldr	r2, [pc, #236]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e560:	4694      	mov	ip, r2
 800e562:	4463      	add	r3, ip
 800e564:	6819      	ldr	r1, [r3, #0]
 800e566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e568:	041a      	lsls	r2, r3, #16
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	4836      	ldr	r0, [pc, #216]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e572:	4684      	mov	ip, r0
 800e574:	4463      	add	r3, ip
 800e576:	430a      	orrs	r2, r1
 800e578:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e57a:	2016      	movs	r0, #22
 800e57c:	183b      	adds	r3, r7, r0
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	8912      	ldrh	r2, [r2, #8]
 800e582:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	6959      	ldr	r1, [r3, #20]
 800e588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e58a:	b29c      	uxth	r4, r3
 800e58c:	183b      	adds	r3, r7, r0
 800e58e:	881a      	ldrh	r2, [r3, #0]
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	0023      	movs	r3, r4
 800e594:	f000 fa44 	bl	800ea20 <USB_WritePMA>
 800e598:	e14d      	b.n	800e836 <USB_EPStartXfer+0x962>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	6a1a      	ldr	r2, [r3, #32]
 800e59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5a0:	1ad2      	subs	r2, r2, r3
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	18d3      	adds	r3, r2, r3
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2240      	movs	r2, #64	@ 0x40
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	d100      	bne.n	800e5ba <USB_EPStartXfer+0x6e6>
 800e5b8:	e0a2      	b.n	800e700 <USB_EPStartXfer+0x82c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	785b      	ldrb	r3, [r3, #1]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d169      	bne.n	800e696 <USB_EPStartXfer+0x7c2>
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	00db      	lsls	r3, r3, #3
 800e5c8:	4a20      	ldr	r2, [pc, #128]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e5ca:	4694      	mov	ip, r2
 800e5cc:	4463      	add	r3, ip
 800e5ce:	685a      	ldr	r2, [r3, #4]
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	00db      	lsls	r3, r3, #3
 800e5d6:	491d      	ldr	r1, [pc, #116]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e5d8:	468c      	mov	ip, r1
 800e5da:	4463      	add	r3, ip
 800e5dc:	0192      	lsls	r2, r2, #6
 800e5de:	0992      	lsrs	r2, r2, #6
 800e5e0:	605a      	str	r2, [r3, #4]
 800e5e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d111      	bne.n	800e60c <USB_EPStartXfer+0x738>
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	00db      	lsls	r3, r3, #3
 800e5ee:	4a17      	ldr	r2, [pc, #92]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e5f0:	4694      	mov	ip, r2
 800e5f2:	4463      	add	r3, ip
 800e5f4:	685a      	ldr	r2, [r3, #4]
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	4913      	ldr	r1, [pc, #76]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e5fe:	468c      	mov	ip, r1
 800e600:	4463      	add	r3, ip
 800e602:	2180      	movs	r1, #128	@ 0x80
 800e604:	0609      	lsls	r1, r1, #24
 800e606:	430a      	orrs	r2, r1
 800e608:	605a      	str	r2, [r3, #4]
 800e60a:	e069      	b.n	800e6e0 <USB_EPStartXfer+0x80c>
 800e60c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e60e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e610:	d822      	bhi.n	800e658 <USB_EPStartXfer+0x784>
 800e612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e614:	085b      	lsrs	r3, r3, #1
 800e616:	633b      	str	r3, [r7, #48]	@ 0x30
 800e618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e61a:	2201      	movs	r2, #1
 800e61c:	4013      	ands	r3, r2
 800e61e:	d002      	beq.n	800e626 <USB_EPStartXfer+0x752>
 800e620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e622:	3301      	adds	r3, #1
 800e624:	633b      	str	r3, [r7, #48]	@ 0x30
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	00db      	lsls	r3, r3, #3
 800e62c:	4a07      	ldr	r2, [pc, #28]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e62e:	4694      	mov	ip, r2
 800e630:	4463      	add	r3, ip
 800e632:	6859      	ldr	r1, [r3, #4]
 800e634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e636:	069a      	lsls	r2, r3, #26
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	00db      	lsls	r3, r3, #3
 800e63e:	4803      	ldr	r0, [pc, #12]	@ (800e64c <USB_EPStartXfer+0x778>)
 800e640:	4684      	mov	ip, r0
 800e642:	4463      	add	r3, ip
 800e644:	430a      	orrs	r2, r1
 800e646:	605a      	str	r2, [r3, #4]
 800e648:	e04a      	b.n	800e6e0 <USB_EPStartXfer+0x80c>
 800e64a:	46c0      	nop			@ (mov r8, r8)
 800e64c:	40009800 	.word	0x40009800
 800e650:	07ff8e8f 	.word	0x07ff8e8f
 800e654:	00008080 	.word	0x00008080
 800e658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e65a:	095b      	lsrs	r3, r3, #5
 800e65c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e65e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e660:	221f      	movs	r2, #31
 800e662:	4013      	ands	r3, r2
 800e664:	d102      	bne.n	800e66c <USB_EPStartXfer+0x798>
 800e666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e668:	3b01      	subs	r3, #1
 800e66a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	00db      	lsls	r3, r3, #3
 800e672:	4ad3      	ldr	r2, [pc, #844]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e674:	4694      	mov	ip, r2
 800e676:	4463      	add	r3, ip
 800e678:	685a      	ldr	r2, [r3, #4]
 800e67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67c:	069b      	lsls	r3, r3, #26
 800e67e:	431a      	orrs	r2, r3
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	49ce      	ldr	r1, [pc, #824]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e688:	468c      	mov	ip, r1
 800e68a:	4463      	add	r3, ip
 800e68c:	2180      	movs	r1, #128	@ 0x80
 800e68e:	0609      	lsls	r1, r1, #24
 800e690:	430a      	orrs	r2, r1
 800e692:	605a      	str	r2, [r3, #4]
 800e694:	e024      	b.n	800e6e0 <USB_EPStartXfer+0x80c>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	785b      	ldrb	r3, [r3, #1]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d120      	bne.n	800e6e0 <USB_EPStartXfer+0x80c>
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	00db      	lsls	r3, r3, #3
 800e6a4:	4ac6      	ldr	r2, [pc, #792]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e6a6:	4694      	mov	ip, r2
 800e6a8:	4463      	add	r3, ip
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	00db      	lsls	r3, r3, #3
 800e6b2:	49c3      	ldr	r1, [pc, #780]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e6b4:	468c      	mov	ip, r1
 800e6b6:	4463      	add	r3, ip
 800e6b8:	0412      	lsls	r2, r2, #16
 800e6ba:	0c12      	lsrs	r2, r2, #16
 800e6bc:	605a      	str	r2, [r3, #4]
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	4abe      	ldr	r2, [pc, #760]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e6c6:	4694      	mov	ip, r2
 800e6c8:	4463      	add	r3, ip
 800e6ca:	6859      	ldr	r1, [r3, #4]
 800e6cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6ce:	041a      	lsls	r2, r3, #16
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	00db      	lsls	r3, r3, #3
 800e6d6:	48ba      	ldr	r0, [pc, #744]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e6d8:	4684      	mov	ip, r0
 800e6da:	4463      	add	r3, ip
 800e6dc:	430a      	orrs	r2, r1
 800e6de:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800e6e0:	2016      	movs	r0, #22
 800e6e2:	183b      	adds	r3, r7, r0
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	8952      	ldrh	r2, [r2, #10]
 800e6e8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	6959      	ldr	r1, [r3, #20]
 800e6ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6f0:	b29c      	uxth	r4, r3
 800e6f2:	183b      	adds	r3, r7, r0
 800e6f4:	881a      	ldrh	r2, [r3, #0]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	0023      	movs	r3, r4
 800e6fa:	f000 f991 	bl	800ea20 <USB_WritePMA>
 800e6fe:	e09a      	b.n	800e836 <USB_EPStartXfer+0x962>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	785b      	ldrb	r3, [r3, #1]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d162      	bne.n	800e7ce <USB_EPStartXfer+0x8fa>
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	00db      	lsls	r3, r3, #3
 800e70e:	4aac      	ldr	r2, [pc, #688]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e710:	4694      	mov	ip, r2
 800e712:	4463      	add	r3, ip
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	49a8      	ldr	r1, [pc, #672]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e71e:	468c      	mov	ip, r1
 800e720:	4463      	add	r3, ip
 800e722:	0192      	lsls	r2, r2, #6
 800e724:	0992      	lsrs	r2, r2, #6
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d111      	bne.n	800e752 <USB_EPStartXfer+0x87e>
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	00db      	lsls	r3, r3, #3
 800e734:	4aa2      	ldr	r2, [pc, #648]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e736:	4694      	mov	ip, r2
 800e738:	4463      	add	r3, ip
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	00db      	lsls	r3, r3, #3
 800e742:	499f      	ldr	r1, [pc, #636]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e744:	468c      	mov	ip, r1
 800e746:	4463      	add	r3, ip
 800e748:	2180      	movs	r1, #128	@ 0x80
 800e74a:	0609      	lsls	r1, r1, #24
 800e74c:	430a      	orrs	r2, r1
 800e74e:	601a      	str	r2, [r3, #0]
 800e750:	e062      	b.n	800e818 <USB_EPStartXfer+0x944>
 800e752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e754:	2b3e      	cmp	r3, #62	@ 0x3e
 800e756:	d81b      	bhi.n	800e790 <USB_EPStartXfer+0x8bc>
 800e758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e75a:	085b      	lsrs	r3, r3, #1
 800e75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e760:	2201      	movs	r2, #1
 800e762:	4013      	ands	r3, r2
 800e764:	d002      	beq.n	800e76c <USB_EPStartXfer+0x898>
 800e766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e768:	3301      	adds	r3, #1
 800e76a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	00db      	lsls	r3, r3, #3
 800e772:	4a93      	ldr	r2, [pc, #588]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e774:	4694      	mov	ip, r2
 800e776:	4463      	add	r3, ip
 800e778:	6819      	ldr	r1, [r3, #0]
 800e77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e77c:	069a      	lsls	r2, r3, #26
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	488e      	ldr	r0, [pc, #568]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e786:	4684      	mov	ip, r0
 800e788:	4463      	add	r3, ip
 800e78a:	430a      	orrs	r2, r1
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	e043      	b.n	800e818 <USB_EPStartXfer+0x944>
 800e790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e792:	095b      	lsrs	r3, r3, #5
 800e794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e798:	221f      	movs	r2, #31
 800e79a:	4013      	ands	r3, r2
 800e79c:	d102      	bne.n	800e7a4 <USB_EPStartXfer+0x8d0>
 800e79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	00db      	lsls	r3, r3, #3
 800e7aa:	4a85      	ldr	r2, [pc, #532]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e7ac:	4694      	mov	ip, r2
 800e7ae:	4463      	add	r3, ip
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b4:	069b      	lsls	r3, r3, #26
 800e7b6:	431a      	orrs	r2, r3
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	4980      	ldr	r1, [pc, #512]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e7c0:	468c      	mov	ip, r1
 800e7c2:	4463      	add	r3, ip
 800e7c4:	2180      	movs	r1, #128	@ 0x80
 800e7c6:	0609      	lsls	r1, r1, #24
 800e7c8:	430a      	orrs	r2, r1
 800e7ca:	601a      	str	r2, [r3, #0]
 800e7cc:	e024      	b.n	800e818 <USB_EPStartXfer+0x944>
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	785b      	ldrb	r3, [r3, #1]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d120      	bne.n	800e818 <USB_EPStartXfer+0x944>
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	4a78      	ldr	r2, [pc, #480]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e7de:	4694      	mov	ip, r2
 800e7e0:	4463      	add	r3, ip
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	00db      	lsls	r3, r3, #3
 800e7ea:	4975      	ldr	r1, [pc, #468]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e7ec:	468c      	mov	ip, r1
 800e7ee:	4463      	add	r3, ip
 800e7f0:	0412      	lsls	r2, r2, #16
 800e7f2:	0c12      	lsrs	r2, r2, #16
 800e7f4:	601a      	str	r2, [r3, #0]
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	4a70      	ldr	r2, [pc, #448]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e7fe:	4694      	mov	ip, r2
 800e800:	4463      	add	r3, ip
 800e802:	6819      	ldr	r1, [r3, #0]
 800e804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e806:	041a      	lsls	r2, r3, #16
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	00db      	lsls	r3, r3, #3
 800e80e:	486c      	ldr	r0, [pc, #432]	@ (800e9c0 <USB_EPStartXfer+0xaec>)
 800e810:	4684      	mov	ip, r0
 800e812:	4463      	add	r3, ip
 800e814:	430a      	orrs	r2, r1
 800e816:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e818:	2016      	movs	r0, #22
 800e81a:	183b      	adds	r3, r7, r0
 800e81c:	683a      	ldr	r2, [r7, #0]
 800e81e:	8912      	ldrh	r2, [r2, #8]
 800e820:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	6959      	ldr	r1, [r3, #20]
 800e826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e828:	b29c      	uxth	r4, r3
 800e82a:	183b      	adds	r3, r7, r0
 800e82c:	881a      	ldrh	r2, [r3, #0]
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	0023      	movs	r3, r4
 800e832:	f000 f8f5 	bl	800ea20 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	18d3      	adds	r3, r2, r3
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a60      	ldr	r2, [pc, #384]	@ (800e9c4 <USB_EPStartXfer+0xaf0>)
 800e844:	4013      	ands	r3, r2
 800e846:	60bb      	str	r3, [r7, #8]
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	2210      	movs	r2, #16
 800e84c:	4053      	eors	r3, r2
 800e84e:	60bb      	str	r3, [r7, #8]
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	2220      	movs	r2, #32
 800e854:	4053      	eors	r3, r2
 800e856:	60bb      	str	r3, [r7, #8]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	18d3      	adds	r3, r2, r3
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	4958      	ldr	r1, [pc, #352]	@ (800e9c8 <USB_EPStartXfer+0xaf4>)
 800e866:	430a      	orrs	r2, r1
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	e0a3      	b.n	800e9b4 <USB_EPStartXfer+0xae0>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	7b1b      	ldrb	r3, [r3, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d13e      	bne.n	800e8f2 <USB_EPStartXfer+0xa1e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d116      	bne.n	800e8aa <USB_EPStartXfer+0x9d6>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	78db      	ldrb	r3, [r3, #3]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d112      	bne.n	800e8aa <USB_EPStartXfer+0x9d6>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	18d3      	adds	r3, r2, r3
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a4e      	ldr	r2, [pc, #312]	@ (800e9cc <USB_EPStartXfer+0xaf8>)
 800e892:	4013      	ands	r3, r2
 800e894:	623b      	str	r3, [r7, #32]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	18d3      	adds	r3, r2, r3
 800e8a0:	6a3a      	ldr	r2, [r7, #32]
 800e8a2:	494b      	ldr	r1, [pc, #300]	@ (800e9d0 <USB_EPStartXfer+0xafc>)
 800e8a4:	430a      	orrs	r2, r1
 800e8a6:	601a      	str	r2, [r3, #0]
 800e8a8:	e011      	b.n	800e8ce <USB_EPStartXfer+0x9fa>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	18d3      	adds	r3, r2, r3
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a47      	ldr	r2, [pc, #284]	@ (800e9d4 <USB_EPStartXfer+0xb00>)
 800e8b8:	4013      	ands	r3, r2
 800e8ba:	61fb      	str	r3, [r7, #28]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	18d3      	adds	r3, r2, r3
 800e8c6:	69fa      	ldr	r2, [r7, #28]
 800e8c8:	493f      	ldr	r1, [pc, #252]	@ (800e9c8 <USB_EPStartXfer+0xaf4>)
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	601a      	str	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	699a      	ldr	r2, [r3, #24]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d907      	bls.n	800e8ea <USB_EPStartXfer+0xa16>
      {
        ep->xfer_len -= ep->maxpacket;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	699a      	ldr	r2, [r3, #24]
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	1ad2      	subs	r2, r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	619a      	str	r2, [r3, #24]
 800e8e8:	e048      	b.n	800e97c <USB_EPStartXfer+0xaa8>
      }
      else
      {
        ep->xfer_len = 0U;
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	619a      	str	r2, [r3, #24]
 800e8f0:	e044      	b.n	800e97c <USB_EPStartXfer+0xaa8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	78db      	ldrb	r3, [r3, #3]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d136      	bne.n	800e968 <USB_EPStartXfer+0xa94>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	69db      	ldr	r3, [r3, #28]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d03c      	beq.n	800e97c <USB_EPStartXfer+0xaa8>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	18d3      	adds	r3, r2, r3
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	212a      	movs	r1, #42	@ 0x2a
 800e910:	187b      	adds	r3, r7, r1
 800e912:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e914:	187b      	adds	r3, r7, r1
 800e916:	881a      	ldrh	r2, [r3, #0]
 800e918:	2380      	movs	r3, #128	@ 0x80
 800e91a:	01db      	lsls	r3, r3, #7
 800e91c:	4013      	ands	r3, r2
 800e91e:	d004      	beq.n	800e92a <USB_EPStartXfer+0xa56>
 800e920:	187b      	adds	r3, r7, r1
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	2240      	movs	r2, #64	@ 0x40
 800e926:	4013      	ands	r3, r2
 800e928:	d10b      	bne.n	800e942 <USB_EPStartXfer+0xa6e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e92a:	212a      	movs	r1, #42	@ 0x2a
 800e92c:	187b      	adds	r3, r7, r1
 800e92e:	881a      	ldrh	r2, [r3, #0]
 800e930:	2380      	movs	r3, #128	@ 0x80
 800e932:	01db      	lsls	r3, r3, #7
 800e934:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e936:	d121      	bne.n	800e97c <USB_EPStartXfer+0xaa8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e938:	187b      	adds	r3, r7, r1
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	2240      	movs	r2, #64	@ 0x40
 800e93e:	4013      	ands	r3, r2
 800e940:	d11c      	bne.n	800e97c <USB_EPStartXfer+0xaa8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	18d3      	adds	r3, r2, r3
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9cc <USB_EPStartXfer+0xaf8>)
 800e950:	4013      	ands	r3, r2
 800e952:	627b      	str	r3, [r7, #36]	@ 0x24
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	18d3      	adds	r3, r2, r3
 800e95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e960:	491d      	ldr	r1, [pc, #116]	@ (800e9d8 <USB_EPStartXfer+0xb04>)
 800e962:	430a      	orrs	r2, r1
 800e964:	601a      	str	r2, [r3, #0]
 800e966:	e009      	b.n	800e97c <USB_EPStartXfer+0xaa8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	78db      	ldrb	r3, [r3, #3]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d103      	bne.n	800e978 <USB_EPStartXfer+0xaa4>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	2200      	movs	r2, #0
 800e974:	619a      	str	r2, [r3, #24]
 800e976:	e001      	b.n	800e97c <USB_EPStartXfer+0xaa8>
      }
      else
      {
        return HAL_ERROR;
 800e978:	2301      	movs	r3, #1
 800e97a:	e01c      	b.n	800e9b6 <USB_EPStartXfer+0xae2>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	18d3      	adds	r3, r2, r3
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a14      	ldr	r2, [pc, #80]	@ (800e9dc <USB_EPStartXfer+0xb08>)
 800e98a:	4013      	ands	r3, r2
 800e98c:	61bb      	str	r3, [r7, #24]
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2280      	movs	r2, #128	@ 0x80
 800e992:	0152      	lsls	r2, r2, #5
 800e994:	4053      	eors	r3, r2
 800e996:	61bb      	str	r3, [r7, #24]
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	2280      	movs	r2, #128	@ 0x80
 800e99c:	0192      	lsls	r2, r2, #6
 800e99e:	4053      	eors	r3, r2
 800e9a0:	61bb      	str	r3, [r7, #24]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	18d3      	adds	r3, r2, r3
 800e9ac:	69ba      	ldr	r2, [r7, #24]
 800e9ae:	4906      	ldr	r1, [pc, #24]	@ (800e9c8 <USB_EPStartXfer+0xaf4>)
 800e9b0:	430a      	orrs	r2, r1
 800e9b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	0018      	movs	r0, r3
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	b013      	add	sp, #76	@ 0x4c
 800e9bc:	bd90      	pop	{r4, r7, pc}
 800e9be:	46c0      	nop			@ (mov r8, r8)
 800e9c0:	40009800 	.word	0x40009800
 800e9c4:	07ff8fbf 	.word	0x07ff8fbf
 800e9c8:	00008080 	.word	0x00008080
 800e9cc:	07ff8f8f 	.word	0x07ff8f8f
 800e9d0:	00008180 	.word	0x00008180
 800e9d4:	07ff8e8f 	.word	0x07ff8e8f
 800e9d8:	000080c0 	.word	0x000080c0
 800e9dc:	07ffbf8f 	.word	0x07ffbf8f

0800e9e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	000a      	movs	r2, r1
 800e9ea:	1cfb      	adds	r3, r7, #3
 800e9ec:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800e9ee:	1cfb      	adds	r3, r7, #3
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d102      	bne.n	800e9fc <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2280      	movs	r2, #128	@ 0x80
 800e9fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e9fc:	2300      	movs	r3, #0
}
 800e9fe:	0018      	movs	r0, r3
 800ea00:	46bd      	mov	sp, r7
 800ea02:	b002      	add	sp, #8
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ea14:	68fb      	ldr	r3, [r7, #12]
}
 800ea16:	0018      	movs	r0, r3
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	b004      	add	sp, #16
 800ea1c:	bd80      	pop	{r7, pc}
	...

0800ea20 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08a      	sub	sp, #40	@ 0x28
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	0019      	movs	r1, r3
 800ea2c:	1dbb      	adds	r3, r7, #6
 800ea2e:	801a      	strh	r2, [r3, #0]
 800ea30:	1d3b      	adds	r3, r7, #4
 800ea32:	1c0a      	adds	r2, r1, #0
 800ea34:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800ea36:	1d3b      	adds	r3, r7, #4
 800ea38:	881b      	ldrh	r3, [r3, #0]
 800ea3a:	3303      	adds	r3, #3
 800ea3c:	089b      	lsrs	r3, r3, #2
 800ea3e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800ea40:	2016      	movs	r0, #22
 800ea42:	183b      	adds	r3, r7, r0
 800ea44:	1d3a      	adds	r2, r7, #4
 800ea46:	8812      	ldrh	r2, [r2, #0]
 800ea48:	2103      	movs	r1, #3
 800ea4a:	400a      	ands	r2, r1
 800ea4c:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800ea52:	183b      	adds	r3, r7, r0
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <USB_WritePMA+0x40>
  {
    NbWords--;
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800ea60:	1dbb      	adds	r3, r7, #6
 800ea62:	881b      	ldrh	r3, [r3, #0]
 800ea64:	4a28      	ldr	r2, [pc, #160]	@ (800eb08 <USB_WritePMA+0xe8>)
 800ea66:	4694      	mov	ip, r2
 800ea68:	4463      	add	r3, ip
 800ea6a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	623b      	str	r3, [r7, #32]
 800ea70:	e01f      	b.n	800eab2 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	781a      	ldrb	r2, [r3, #0]
 800ea76:	7859      	ldrb	r1, [r3, #1]
 800ea78:	0209      	lsls	r1, r1, #8
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	7899      	ldrb	r1, [r3, #2]
 800ea7e:	0409      	lsls	r1, r1, #16
 800ea80:	430a      	orrs	r2, r1
 800ea82:	78db      	ldrb	r3, [r3, #3]
 800ea84:	061b      	lsls	r3, r3, #24
 800ea86:	4313      	orrs	r3, r2
 800ea88:	001a      	movs	r2, r3
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	3304      	adds	r3, #4
 800ea92:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	3301      	adds	r3, #1
 800ea98:	613b      	str	r3, [r7, #16]
    pBuf++;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	613b      	str	r3, [r7, #16]
    pBuf++;
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800eaac:	6a3b      	ldr	r3, [r7, #32]
 800eaae:	3b01      	subs	r3, #1
 800eab0:	623b      	str	r3, [r7, #32]
 800eab2:	6a3b      	ldr	r3, [r7, #32]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1dc      	bne.n	800ea72 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800eab8:	2316      	movs	r3, #22
 800eaba:	18fb      	adds	r3, r7, r3
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d01e      	beq.n	800eb00 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800eac2:	2300      	movs	r3, #0
 800eac4:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	001a      	movs	r2, r3
 800eacc:	6a3b      	ldr	r3, [r7, #32]
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	409a      	lsls	r2, r3
 800ead2:	0013      	movs	r3, r2
 800ead4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ead6:	4313      	orrs	r3, r2
 800ead8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	3301      	adds	r3, #1
 800eade:	623b      	str	r3, [r7, #32]
      pBuf++;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	3301      	adds	r3, #1
 800eae4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800eae6:	2116      	movs	r1, #22
 800eae8:	187b      	adds	r3, r7, r1
 800eaea:	881a      	ldrh	r2, [r3, #0]
 800eaec:	187b      	adds	r3, r7, r1
 800eaee:	3a01      	subs	r2, #1
 800eaf0:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800eaf2:	187b      	adds	r3, r7, r1
 800eaf4:	881b      	ldrh	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e5      	bne.n	800eac6 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eafe:	601a      	str	r2, [r3, #0]
  }
}
 800eb00:	46c0      	nop			@ (mov r8, r8)
 800eb02:	46bd      	mov	sp, r7
 800eb04:	b00a      	add	sp, #40	@ 0x28
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	40009800 	.word	0x40009800

0800eb0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eb0c:	b590      	push	{r4, r7, lr}
 800eb0e:	b08b      	sub	sp, #44	@ 0x2c
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	0019      	movs	r1, r3
 800eb18:	1dbb      	adds	r3, r7, #6
 800eb1a:	801a      	strh	r2, [r3, #0]
 800eb1c:	1d3b      	adds	r3, r7, #4
 800eb1e:	1c0a      	adds	r2, r1, #0
 800eb20:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800eb22:	1d3b      	adds	r3, r7, #4
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	3303      	adds	r3, #3
 800eb28:	089b      	lsrs	r3, r3, #2
 800eb2a:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800eb2c:	201a      	movs	r0, #26
 800eb2e:	183b      	adds	r3, r7, r0
 800eb30:	1d3a      	adds	r2, r7, #4
 800eb32:	8812      	ldrh	r2, [r2, #0]
 800eb34:	2103      	movs	r1, #3
 800eb36:	400a      	ands	r2, r1
 800eb38:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800eb3e:	1dbb      	adds	r3, r7, #6
 800eb40:	881b      	ldrh	r3, [r3, #0]
 800eb42:	4a39      	ldr	r2, [pc, #228]	@ (800ec28 <USB_ReadPMA+0x11c>)
 800eb44:	4694      	mov	ip, r2
 800eb46:	4463      	add	r3, ip
 800eb48:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800eb4a:	183b      	adds	r3, r7, r0
 800eb4c:	881b      	ldrh	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d002      	beq.n	800eb58 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	3b01      	subs	r3, #1
 800eb56:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb5c:	e03c      	b.n	800ebd8 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	21ff      	movs	r1, #255	@ 0xff
 800eb66:	4011      	ands	r1, r2
 800eb68:	000c      	movs	r4, r1
 800eb6a:	7819      	ldrb	r1, [r3, #0]
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	4001      	ands	r1, r0
 800eb70:	1c08      	adds	r0, r1, #0
 800eb72:	1c21      	adds	r1, r4, #0
 800eb74:	4301      	orrs	r1, r0
 800eb76:	7019      	strb	r1, [r3, #0]
 800eb78:	0a11      	lsrs	r1, r2, #8
 800eb7a:	20ff      	movs	r0, #255	@ 0xff
 800eb7c:	4001      	ands	r1, r0
 800eb7e:	000c      	movs	r4, r1
 800eb80:	7859      	ldrb	r1, [r3, #1]
 800eb82:	2000      	movs	r0, #0
 800eb84:	4001      	ands	r1, r0
 800eb86:	1c08      	adds	r0, r1, #0
 800eb88:	1c21      	adds	r1, r4, #0
 800eb8a:	4301      	orrs	r1, r0
 800eb8c:	7059      	strb	r1, [r3, #1]
 800eb8e:	0c11      	lsrs	r1, r2, #16
 800eb90:	20ff      	movs	r0, #255	@ 0xff
 800eb92:	4001      	ands	r1, r0
 800eb94:	000c      	movs	r4, r1
 800eb96:	7899      	ldrb	r1, [r3, #2]
 800eb98:	2000      	movs	r0, #0
 800eb9a:	4001      	ands	r1, r0
 800eb9c:	1c08      	adds	r0, r1, #0
 800eb9e:	1c21      	adds	r1, r4, #0
 800eba0:	4301      	orrs	r1, r0
 800eba2:	7099      	strb	r1, [r3, #2]
 800eba4:	0e10      	lsrs	r0, r2, #24
 800eba6:	78da      	ldrb	r2, [r3, #3]
 800eba8:	2100      	movs	r1, #0
 800ebaa:	400a      	ands	r2, r1
 800ebac:	1c11      	adds	r1, r2, #0
 800ebae:	1c02      	adds	r2, r0, #0
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	623b      	str	r3, [r7, #32]
    pBuf++;
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1bf      	bne.n	800eb5e <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800ebde:	231a      	movs	r3, #26
 800ebe0:	18fb      	adds	r3, r7, r3
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d01b      	beq.n	800ec20 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800ebe8:	6a3b      	ldr	r3, [r7, #32]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800ebee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	00db      	lsls	r3, r3, #3
 800ebf4:	693a      	ldr	r2, [r7, #16]
 800ebf6:	40da      	lsrs	r2, r3
 800ebf8:	0013      	movs	r3, r2
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	701a      	strb	r2, [r3, #0]
      count++;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec02:	3301      	adds	r3, #1
 800ec04:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800ec0c:	211a      	movs	r1, #26
 800ec0e:	187b      	adds	r3, r7, r1
 800ec10:	881a      	ldrh	r2, [r3, #0]
 800ec12:	187b      	adds	r3, r7, r1
 800ec14:	3a01      	subs	r2, #1
 800ec16:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800ec18:	187b      	adds	r3, r7, r1
 800ec1a:	881b      	ldrh	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1e6      	bne.n	800ebee <USB_ReadPMA+0xe2>
  }
}
 800ec20:	46c0      	nop			@ (mov r8, r8)
 800ec22:	46bd      	mov	sp, r7
 800ec24:	b00b      	add	sp, #44	@ 0x2c
 800ec26:	bd90      	pop	{r4, r7, pc}
 800ec28:	40009800 	.word	0x40009800

0800ec2c <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param  None
  * @retval int
  */
UINT MX_FileX_Init(void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
  UINT ret = FX_SUCCESS;
 800ec32:	2300      	movs	r3, #0
 800ec34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN MX_FileX_Init */

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 800ec36:	f000 f805 	bl	800ec44 <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 800ec3a:	687b      	ldr	r3, [r7, #4]
}
 800ec3c:	0018      	movs	r0, r3
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	b002      	add	sp, #8
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	af00      	add	r7, sp, #0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800ec48:	4b2c      	ldr	r3, [pc, #176]	@ (800ecfc <_fx_system_initialize+0xb8>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800ec4e:	4b2c      	ldr	r3, [pc, #176]	@ (800ed00 <_fx_system_initialize+0xbc>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800ec54:	4b2b      	ldr	r3, [pc, #172]	@ (800ed04 <_fx_system_initialize+0xc0>)
 800ec56:	4a2c      	ldr	r2, [pc, #176]	@ (800ed08 <_fx_system_initialize+0xc4>)
 800ec58:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800ec5a:	4b2c      	ldr	r3, [pc, #176]	@ (800ed0c <_fx_system_initialize+0xc8>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800ec60:	4b2b      	ldr	r3, [pc, #172]	@ (800ed10 <_fx_system_initialize+0xcc>)
 800ec62:	2280      	movs	r2, #128	@ 0x80
 800ec64:	0052      	lsls	r2, r2, #1
 800ec66:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800ec68:	4b2a      	ldr	r3, [pc, #168]	@ (800ed14 <_fx_system_initialize+0xd0>)
 800ec6a:	2210      	movs	r2, #16
 800ec6c:	601a      	str	r2, [r3, #0]
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800ec6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	22ff      	movs	r2, #255	@ 0xff
 800ec74:	0612      	lsls	r2, r2, #24
 800ec76:	431a      	orrs	r2, r3
 800ec78:	4b27      	ldr	r3, [pc, #156]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ec7a:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800ec7c:	4b26      	ldr	r3, [pc, #152]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	22ff      	movs	r2, #255	@ 0xff
 800ec82:	0412      	lsls	r2, r2, #16
 800ec84:	431a      	orrs	r2, r3
 800ec86:	4b24      	ldr	r3, [pc, #144]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ec88:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LAST_NAME_LEN & 0xFF)) << 24);
    }

#ifdef FX_NO_TIMER
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 10);
 800ec8a:	4b23      	ldr	r3, [pc, #140]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2280      	movs	r2, #128	@ 0x80
 800ec90:	00d2      	lsls	r2, r2, #3
 800ec92:	431a      	orrs	r2, r3
 800ec94:	4b20      	ldr	r3, [pc, #128]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ec96:	601a      	str	r2, [r3, #0]
#endif
#ifdef FX_SINGLE_THREAD
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 9);
 800ec98:	4b1f      	ldr	r3, [pc, #124]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2280      	movs	r2, #128	@ 0x80
 800ec9e:	0092      	lsls	r2, r2, #2
 800eca0:	431a      	orrs	r2, r3
 800eca2:	4b1d      	ldr	r3, [pc, #116]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800eca4:	601a      	str	r2, [r3, #0]
#endif
#ifdef FX_RENAME_PATH_INHERIT
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 3);
#endif
#ifdef FX_NO_LOCAL_PATH
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 2);
 800eca6:	4b1c      	ldr	r3, [pc, #112]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2204      	movs	r2, #4
 800ecac:	431a      	orrs	r2, r3
 800ecae:	4b1a      	ldr	r3, [pc, #104]	@ (800ed18 <_fx_system_initialize+0xd4>)
 800ecb0:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800ecb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ed1c <_fx_system_initialize+0xd8>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2280      	movs	r2, #128	@ 0x80
 800ecb8:	0452      	lsls	r2, r2, #17
 800ecba:	431a      	orrs	r2, r3
 800ecbc:	4b17      	ldr	r3, [pc, #92]	@ (800ed1c <_fx_system_initialize+0xd8>)
 800ecbe:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800ecc0:	4b16      	ldr	r3, [pc, #88]	@ (800ed1c <_fx_system_initialize+0xd8>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2280      	movs	r2, #128	@ 0x80
 800ecc6:	0212      	lsls	r2, r2, #8
 800ecc8:	431a      	orrs	r2, r3
 800ecca:	4b14      	ldr	r3, [pc, #80]	@ (800ed1c <_fx_system_initialize+0xd8>)
 800eccc:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800ecce:	4b13      	ldr	r3, [pc, #76]	@ (800ed1c <_fx_system_initialize+0xd8>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2210      	movs	r2, #16
 800ecd4:	431a      	orrs	r2, r3
 800ecd6:	4b11      	ldr	r3, [pc, #68]	@ (800ed1c <_fx_system_initialize+0xd8>)
 800ecd8:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800ecda:	4b11      	ldr	r3, [pc, #68]	@ (800ed20 <_fx_system_initialize+0xdc>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	22a0      	movs	r2, #160	@ 0xa0
 800ece0:	0312      	lsls	r2, r2, #12
 800ece2:	431a      	orrs	r2, r3
 800ece4:	4b0e      	ldr	r3, [pc, #56]	@ (800ed20 <_fx_system_initialize+0xdc>)
 800ece6:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800ece8:	4b0d      	ldr	r3, [pc, #52]	@ (800ed20 <_fx_system_initialize+0xdc>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	22fa      	movs	r2, #250	@ 0xfa
 800ecee:	0092      	lsls	r2, r2, #2
 800ecf0:	431a      	orrs	r2, r3
 800ecf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ed20 <_fx_system_initialize+0xdc>)
 800ecf4:	601a      	str	r2, [r3, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800ecf6:	46c0      	nop			@ (mov r8, r8)
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	20000748 	.word	0x20000748
 800ed00:	2000074c 	.word	0x2000074c
 800ed04:	20000750 	.word	0x20000750
 800ed08:	00004a21 	.word	0x00004a21
 800ed0c:	20000754 	.word	0x20000754
 800ed10:	20000758 	.word	0x20000758
 800ed14:	2000075c 	.word	0x2000075c
 800ed18:	20000760 	.word	0x20000760
 800ed1c:	20000764 	.word	0x20000764
 800ed20:	20000768 	.word	0x20000768

0800ed24 <__cvt>:
 800ed24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed26:	001f      	movs	r7, r3
 800ed28:	2300      	movs	r3, #0
 800ed2a:	0016      	movs	r6, r2
 800ed2c:	b08b      	sub	sp, #44	@ 0x2c
 800ed2e:	429f      	cmp	r7, r3
 800ed30:	da04      	bge.n	800ed3c <__cvt+0x18>
 800ed32:	2180      	movs	r1, #128	@ 0x80
 800ed34:	0609      	lsls	r1, r1, #24
 800ed36:	187b      	adds	r3, r7, r1
 800ed38:	001f      	movs	r7, r3
 800ed3a:	232d      	movs	r3, #45	@ 0x2d
 800ed3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ed3e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ed40:	7013      	strb	r3, [r2, #0]
 800ed42:	2320      	movs	r3, #32
 800ed44:	2203      	movs	r2, #3
 800ed46:	439d      	bics	r5, r3
 800ed48:	2d46      	cmp	r5, #70	@ 0x46
 800ed4a:	d007      	beq.n	800ed5c <__cvt+0x38>
 800ed4c:	002b      	movs	r3, r5
 800ed4e:	3b45      	subs	r3, #69	@ 0x45
 800ed50:	4259      	negs	r1, r3
 800ed52:	414b      	adcs	r3, r1
 800ed54:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ed56:	3a01      	subs	r2, #1
 800ed58:	18cb      	adds	r3, r1, r3
 800ed5a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed5c:	ab09      	add	r3, sp, #36	@ 0x24
 800ed5e:	9304      	str	r3, [sp, #16]
 800ed60:	ab08      	add	r3, sp, #32
 800ed62:	9303      	str	r3, [sp, #12]
 800ed64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed66:	9200      	str	r2, [sp, #0]
 800ed68:	9302      	str	r3, [sp, #8]
 800ed6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed6c:	0032      	movs	r2, r6
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	003b      	movs	r3, r7
 800ed72:	f000 febf 	bl	800faf4 <_dtoa_r>
 800ed76:	0004      	movs	r4, r0
 800ed78:	2d47      	cmp	r5, #71	@ 0x47
 800ed7a:	d11b      	bne.n	800edb4 <__cvt+0x90>
 800ed7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed7e:	07db      	lsls	r3, r3, #31
 800ed80:	d511      	bpl.n	800eda6 <__cvt+0x82>
 800ed82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed84:	18c3      	adds	r3, r0, r3
 800ed86:	9307      	str	r3, [sp, #28]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	0030      	movs	r0, r6
 800ed8e:	0039      	movs	r1, r7
 800ed90:	f7f1 fb5c 	bl	800044c <__aeabi_dcmpeq>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d001      	beq.n	800ed9c <__cvt+0x78>
 800ed98:	9b07      	ldr	r3, [sp, #28]
 800ed9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed9c:	2230      	movs	r2, #48	@ 0x30
 800ed9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eda0:	9907      	ldr	r1, [sp, #28]
 800eda2:	428b      	cmp	r3, r1
 800eda4:	d320      	bcc.n	800ede8 <__cvt+0xc4>
 800eda6:	0020      	movs	r0, r4
 800eda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800edac:	1b1b      	subs	r3, r3, r4
 800edae:	6013      	str	r3, [r2, #0]
 800edb0:	b00b      	add	sp, #44	@ 0x2c
 800edb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800edb6:	18c3      	adds	r3, r0, r3
 800edb8:	9307      	str	r3, [sp, #28]
 800edba:	2d46      	cmp	r5, #70	@ 0x46
 800edbc:	d1e4      	bne.n	800ed88 <__cvt+0x64>
 800edbe:	7803      	ldrb	r3, [r0, #0]
 800edc0:	2b30      	cmp	r3, #48	@ 0x30
 800edc2:	d10c      	bne.n	800edde <__cvt+0xba>
 800edc4:	2200      	movs	r2, #0
 800edc6:	2300      	movs	r3, #0
 800edc8:	0030      	movs	r0, r6
 800edca:	0039      	movs	r1, r7
 800edcc:	f7f1 fb3e 	bl	800044c <__aeabi_dcmpeq>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d104      	bne.n	800edde <__cvt+0xba>
 800edd4:	2301      	movs	r3, #1
 800edd6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800edd8:	1a9b      	subs	r3, r3, r2
 800edda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eddc:	6013      	str	r3, [r2, #0]
 800edde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ede0:	9a07      	ldr	r2, [sp, #28]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	18d3      	adds	r3, r2, r3
 800ede6:	e7ce      	b.n	800ed86 <__cvt+0x62>
 800ede8:	1c59      	adds	r1, r3, #1
 800edea:	9109      	str	r1, [sp, #36]	@ 0x24
 800edec:	701a      	strb	r2, [r3, #0]
 800edee:	e7d6      	b.n	800ed9e <__cvt+0x7a>

0800edf0 <__exponent>:
 800edf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edf2:	232b      	movs	r3, #43	@ 0x2b
 800edf4:	b085      	sub	sp, #20
 800edf6:	0005      	movs	r5, r0
 800edf8:	1e0c      	subs	r4, r1, #0
 800edfa:	7002      	strb	r2, [r0, #0]
 800edfc:	da01      	bge.n	800ee02 <__exponent+0x12>
 800edfe:	424c      	negs	r4, r1
 800ee00:	3302      	adds	r3, #2
 800ee02:	706b      	strb	r3, [r5, #1]
 800ee04:	2c09      	cmp	r4, #9
 800ee06:	dd2c      	ble.n	800ee62 <__exponent+0x72>
 800ee08:	ab02      	add	r3, sp, #8
 800ee0a:	1dde      	adds	r6, r3, #7
 800ee0c:	0020      	movs	r0, r4
 800ee0e:	210a      	movs	r1, #10
 800ee10:	f7f1 fb06 	bl	8000420 <__aeabi_idivmod>
 800ee14:	0037      	movs	r7, r6
 800ee16:	3130      	adds	r1, #48	@ 0x30
 800ee18:	3e01      	subs	r6, #1
 800ee1a:	0020      	movs	r0, r4
 800ee1c:	7031      	strb	r1, [r6, #0]
 800ee1e:	210a      	movs	r1, #10
 800ee20:	9401      	str	r4, [sp, #4]
 800ee22:	f7f1 fa17 	bl	8000254 <__divsi3>
 800ee26:	9b01      	ldr	r3, [sp, #4]
 800ee28:	0004      	movs	r4, r0
 800ee2a:	2b63      	cmp	r3, #99	@ 0x63
 800ee2c:	dcee      	bgt.n	800ee0c <__exponent+0x1c>
 800ee2e:	1eba      	subs	r2, r7, #2
 800ee30:	1ca8      	adds	r0, r5, #2
 800ee32:	0001      	movs	r1, r0
 800ee34:	0013      	movs	r3, r2
 800ee36:	3430      	adds	r4, #48	@ 0x30
 800ee38:	7014      	strb	r4, [r2, #0]
 800ee3a:	ac02      	add	r4, sp, #8
 800ee3c:	3407      	adds	r4, #7
 800ee3e:	429c      	cmp	r4, r3
 800ee40:	d80a      	bhi.n	800ee58 <__exponent+0x68>
 800ee42:	2300      	movs	r3, #0
 800ee44:	4294      	cmp	r4, r2
 800ee46:	d303      	bcc.n	800ee50 <__exponent+0x60>
 800ee48:	3309      	adds	r3, #9
 800ee4a:	aa02      	add	r2, sp, #8
 800ee4c:	189b      	adds	r3, r3, r2
 800ee4e:	1bdb      	subs	r3, r3, r7
 800ee50:	18c0      	adds	r0, r0, r3
 800ee52:	1b40      	subs	r0, r0, r5
 800ee54:	b005      	add	sp, #20
 800ee56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee58:	781c      	ldrb	r4, [r3, #0]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	700c      	strb	r4, [r1, #0]
 800ee5e:	3101      	adds	r1, #1
 800ee60:	e7eb      	b.n	800ee3a <__exponent+0x4a>
 800ee62:	2330      	movs	r3, #48	@ 0x30
 800ee64:	18e4      	adds	r4, r4, r3
 800ee66:	70ab      	strb	r3, [r5, #2]
 800ee68:	1d28      	adds	r0, r5, #4
 800ee6a:	70ec      	strb	r4, [r5, #3]
 800ee6c:	e7f1      	b.n	800ee52 <__exponent+0x62>
	...

0800ee70 <_printf_float>:
 800ee70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee72:	b097      	sub	sp, #92	@ 0x5c
 800ee74:	000d      	movs	r5, r1
 800ee76:	920a      	str	r2, [sp, #40]	@ 0x28
 800ee78:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800ee7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee7c:	9009      	str	r0, [sp, #36]	@ 0x24
 800ee7e:	f000 fd21 	bl	800f8c4 <_localeconv_r>
 800ee82:	6803      	ldr	r3, [r0, #0]
 800ee84:	0018      	movs	r0, r3
 800ee86:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee88:	f7f1 f93e 	bl	8000108 <strlen>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ee90:	9314      	str	r3, [sp, #80]	@ 0x50
 800ee92:	7e2b      	ldrb	r3, [r5, #24]
 800ee94:	2207      	movs	r2, #7
 800ee96:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee98:	682b      	ldr	r3, [r5, #0]
 800ee9a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ee9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	05c9      	lsls	r1, r1, #23
 800eea2:	d545      	bpl.n	800ef30 <_printf_float+0xc0>
 800eea4:	189b      	adds	r3, r3, r2
 800eea6:	4393      	bics	r3, r2
 800eea8:	001a      	movs	r2, r3
 800eeaa:	3208      	adds	r2, #8
 800eeac:	6022      	str	r2, [r4, #0]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	681e      	ldr	r6, [r3, #0]
 800eeb2:	685f      	ldr	r7, [r3, #4]
 800eeb4:	007b      	lsls	r3, r7, #1
 800eeb6:	085b      	lsrs	r3, r3, #1
 800eeb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800eeba:	9610      	str	r6, [sp, #64]	@ 0x40
 800eebc:	64ae      	str	r6, [r5, #72]	@ 0x48
 800eebe:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800eec0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eec2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eec4:	4ba7      	ldr	r3, [pc, #668]	@ (800f164 <_printf_float+0x2f4>)
 800eec6:	4252      	negs	r2, r2
 800eec8:	f7f4 fb6c 	bl	80035a4 <__aeabi_dcmpun>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d131      	bne.n	800ef34 <_printf_float+0xc4>
 800eed0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eed2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eed4:	2201      	movs	r2, #1
 800eed6:	4ba3      	ldr	r3, [pc, #652]	@ (800f164 <_printf_float+0x2f4>)
 800eed8:	4252      	negs	r2, r2
 800eeda:	f7f1 fac7 	bl	800046c <__aeabi_dcmple>
 800eede:	2800      	cmp	r0, #0
 800eee0:	d128      	bne.n	800ef34 <_printf_float+0xc4>
 800eee2:	2200      	movs	r2, #0
 800eee4:	2300      	movs	r3, #0
 800eee6:	0030      	movs	r0, r6
 800eee8:	0039      	movs	r1, r7
 800eeea:	f7f1 fab5 	bl	8000458 <__aeabi_dcmplt>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d003      	beq.n	800eefa <_printf_float+0x8a>
 800eef2:	002b      	movs	r3, r5
 800eef4:	222d      	movs	r2, #45	@ 0x2d
 800eef6:	3343      	adds	r3, #67	@ 0x43
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eefc:	4f9a      	ldr	r7, [pc, #616]	@ (800f168 <_printf_float+0x2f8>)
 800eefe:	2b47      	cmp	r3, #71	@ 0x47
 800ef00:	d800      	bhi.n	800ef04 <_printf_float+0x94>
 800ef02:	4f9a      	ldr	r7, [pc, #616]	@ (800f16c <_printf_float+0x2fc>)
 800ef04:	2303      	movs	r3, #3
 800ef06:	2400      	movs	r4, #0
 800ef08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef0a:	612b      	str	r3, [r5, #16]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	439a      	bics	r2, r3
 800ef10:	602a      	str	r2, [r5, #0]
 800ef12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef14:	0029      	movs	r1, r5
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef1c:	aa15      	add	r2, sp, #84	@ 0x54
 800ef1e:	f000 f9e5 	bl	800f2ec <_printf_common>
 800ef22:	3001      	adds	r0, #1
 800ef24:	d000      	beq.n	800ef28 <_printf_float+0xb8>
 800ef26:	e09e      	b.n	800f066 <_printf_float+0x1f6>
 800ef28:	2001      	movs	r0, #1
 800ef2a:	4240      	negs	r0, r0
 800ef2c:	b017      	add	sp, #92	@ 0x5c
 800ef2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef30:	3307      	adds	r3, #7
 800ef32:	e7b8      	b.n	800eea6 <_printf_float+0x36>
 800ef34:	0032      	movs	r2, r6
 800ef36:	003b      	movs	r3, r7
 800ef38:	0030      	movs	r0, r6
 800ef3a:	0039      	movs	r1, r7
 800ef3c:	f7f4 fb32 	bl	80035a4 <__aeabi_dcmpun>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d00b      	beq.n	800ef5c <_printf_float+0xec>
 800ef44:	2f00      	cmp	r7, #0
 800ef46:	da03      	bge.n	800ef50 <_printf_float+0xe0>
 800ef48:	002b      	movs	r3, r5
 800ef4a:	222d      	movs	r2, #45	@ 0x2d
 800ef4c:	3343      	adds	r3, #67	@ 0x43
 800ef4e:	701a      	strb	r2, [r3, #0]
 800ef50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef52:	4f87      	ldr	r7, [pc, #540]	@ (800f170 <_printf_float+0x300>)
 800ef54:	2b47      	cmp	r3, #71	@ 0x47
 800ef56:	d8d5      	bhi.n	800ef04 <_printf_float+0x94>
 800ef58:	4f86      	ldr	r7, [pc, #536]	@ (800f174 <_printf_float+0x304>)
 800ef5a:	e7d3      	b.n	800ef04 <_printf_float+0x94>
 800ef5c:	2220      	movs	r2, #32
 800ef5e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ef60:	686b      	ldr	r3, [r5, #4]
 800ef62:	4394      	bics	r4, r2
 800ef64:	1c5a      	adds	r2, r3, #1
 800ef66:	d146      	bne.n	800eff6 <_printf_float+0x186>
 800ef68:	3307      	adds	r3, #7
 800ef6a:	606b      	str	r3, [r5, #4]
 800ef6c:	2380      	movs	r3, #128	@ 0x80
 800ef6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef70:	00db      	lsls	r3, r3, #3
 800ef72:	4313      	orrs	r3, r2
 800ef74:	2200      	movs	r2, #0
 800ef76:	602b      	str	r3, [r5, #0]
 800ef78:	9206      	str	r2, [sp, #24]
 800ef7a:	aa14      	add	r2, sp, #80	@ 0x50
 800ef7c:	9205      	str	r2, [sp, #20]
 800ef7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef80:	a90a      	add	r1, sp, #40	@ 0x28
 800ef82:	9204      	str	r2, [sp, #16]
 800ef84:	aa13      	add	r2, sp, #76	@ 0x4c
 800ef86:	9203      	str	r2, [sp, #12]
 800ef88:	2223      	movs	r2, #35	@ 0x23
 800ef8a:	1852      	adds	r2, r2, r1
 800ef8c:	9202      	str	r2, [sp, #8]
 800ef8e:	9301      	str	r3, [sp, #4]
 800ef90:	686b      	ldr	r3, [r5, #4]
 800ef92:	0032      	movs	r2, r6
 800ef94:	9300      	str	r3, [sp, #0]
 800ef96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef98:	003b      	movs	r3, r7
 800ef9a:	f7ff fec3 	bl	800ed24 <__cvt>
 800ef9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800efa0:	0007      	movs	r7, r0
 800efa2:	2c47      	cmp	r4, #71	@ 0x47
 800efa4:	d12d      	bne.n	800f002 <_printf_float+0x192>
 800efa6:	1cd3      	adds	r3, r2, #3
 800efa8:	db02      	blt.n	800efb0 <_printf_float+0x140>
 800efaa:	686b      	ldr	r3, [r5, #4]
 800efac:	429a      	cmp	r2, r3
 800efae:	dd47      	ble.n	800f040 <_printf_float+0x1d0>
 800efb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800efb2:	3b02      	subs	r3, #2
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	930c      	str	r3, [sp, #48]	@ 0x30
 800efb8:	0028      	movs	r0, r5
 800efba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800efbc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800efbe:	3901      	subs	r1, #1
 800efc0:	3050      	adds	r0, #80	@ 0x50
 800efc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800efc4:	f7ff ff14 	bl	800edf0 <__exponent>
 800efc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800efca:	0004      	movs	r4, r0
 800efcc:	1813      	adds	r3, r2, r0
 800efce:	612b      	str	r3, [r5, #16]
 800efd0:	2a01      	cmp	r2, #1
 800efd2:	dc02      	bgt.n	800efda <_printf_float+0x16a>
 800efd4:	682a      	ldr	r2, [r5, #0]
 800efd6:	07d2      	lsls	r2, r2, #31
 800efd8:	d501      	bpl.n	800efde <_printf_float+0x16e>
 800efda:	3301      	adds	r3, #1
 800efdc:	612b      	str	r3, [r5, #16]
 800efde:	2323      	movs	r3, #35	@ 0x23
 800efe0:	aa0a      	add	r2, sp, #40	@ 0x28
 800efe2:	189b      	adds	r3, r3, r2
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d100      	bne.n	800efec <_printf_float+0x17c>
 800efea:	e792      	b.n	800ef12 <_printf_float+0xa2>
 800efec:	002b      	movs	r3, r5
 800efee:	222d      	movs	r2, #45	@ 0x2d
 800eff0:	3343      	adds	r3, #67	@ 0x43
 800eff2:	701a      	strb	r2, [r3, #0]
 800eff4:	e78d      	b.n	800ef12 <_printf_float+0xa2>
 800eff6:	2c47      	cmp	r4, #71	@ 0x47
 800eff8:	d1b8      	bne.n	800ef6c <_printf_float+0xfc>
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1b6      	bne.n	800ef6c <_printf_float+0xfc>
 800effe:	3301      	adds	r3, #1
 800f000:	e7b3      	b.n	800ef6a <_printf_float+0xfa>
 800f002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f004:	2b65      	cmp	r3, #101	@ 0x65
 800f006:	d9d7      	bls.n	800efb8 <_printf_float+0x148>
 800f008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f00a:	2b66      	cmp	r3, #102	@ 0x66
 800f00c:	d11a      	bne.n	800f044 <_printf_float+0x1d4>
 800f00e:	686b      	ldr	r3, [r5, #4]
 800f010:	2a00      	cmp	r2, #0
 800f012:	dd09      	ble.n	800f028 <_printf_float+0x1b8>
 800f014:	612a      	str	r2, [r5, #16]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d102      	bne.n	800f020 <_printf_float+0x1b0>
 800f01a:	6829      	ldr	r1, [r5, #0]
 800f01c:	07c9      	lsls	r1, r1, #31
 800f01e:	d50b      	bpl.n	800f038 <_printf_float+0x1c8>
 800f020:	3301      	adds	r3, #1
 800f022:	189b      	adds	r3, r3, r2
 800f024:	612b      	str	r3, [r5, #16]
 800f026:	e007      	b.n	800f038 <_printf_float+0x1c8>
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d103      	bne.n	800f034 <_printf_float+0x1c4>
 800f02c:	2201      	movs	r2, #1
 800f02e:	6829      	ldr	r1, [r5, #0]
 800f030:	4211      	tst	r1, r2
 800f032:	d000      	beq.n	800f036 <_printf_float+0x1c6>
 800f034:	1c9a      	adds	r2, r3, #2
 800f036:	612a      	str	r2, [r5, #16]
 800f038:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f03a:	2400      	movs	r4, #0
 800f03c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f03e:	e7ce      	b.n	800efde <_printf_float+0x16e>
 800f040:	2367      	movs	r3, #103	@ 0x67
 800f042:	930c      	str	r3, [sp, #48]	@ 0x30
 800f044:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f046:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f048:	4299      	cmp	r1, r3
 800f04a:	db06      	blt.n	800f05a <_printf_float+0x1ea>
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	6129      	str	r1, [r5, #16]
 800f050:	07db      	lsls	r3, r3, #31
 800f052:	d5f1      	bpl.n	800f038 <_printf_float+0x1c8>
 800f054:	3101      	adds	r1, #1
 800f056:	6129      	str	r1, [r5, #16]
 800f058:	e7ee      	b.n	800f038 <_printf_float+0x1c8>
 800f05a:	2201      	movs	r2, #1
 800f05c:	2900      	cmp	r1, #0
 800f05e:	dce0      	bgt.n	800f022 <_printf_float+0x1b2>
 800f060:	1892      	adds	r2, r2, r2
 800f062:	1a52      	subs	r2, r2, r1
 800f064:	e7dd      	b.n	800f022 <_printf_float+0x1b2>
 800f066:	682a      	ldr	r2, [r5, #0]
 800f068:	0553      	lsls	r3, r2, #21
 800f06a:	d408      	bmi.n	800f07e <_printf_float+0x20e>
 800f06c:	692b      	ldr	r3, [r5, #16]
 800f06e:	003a      	movs	r2, r7
 800f070:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f074:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f076:	47a0      	blx	r4
 800f078:	3001      	adds	r0, #1
 800f07a:	d129      	bne.n	800f0d0 <_printf_float+0x260>
 800f07c:	e754      	b.n	800ef28 <_printf_float+0xb8>
 800f07e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f080:	2b65      	cmp	r3, #101	@ 0x65
 800f082:	d800      	bhi.n	800f086 <_printf_float+0x216>
 800f084:	e0db      	b.n	800f23e <_printf_float+0x3ce>
 800f086:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f088:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f08a:	2200      	movs	r2, #0
 800f08c:	2300      	movs	r3, #0
 800f08e:	f7f1 f9dd 	bl	800044c <__aeabi_dcmpeq>
 800f092:	2800      	cmp	r0, #0
 800f094:	d033      	beq.n	800f0fe <_printf_float+0x28e>
 800f096:	2301      	movs	r3, #1
 800f098:	4a37      	ldr	r2, [pc, #220]	@ (800f178 <_printf_float+0x308>)
 800f09a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f09c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f09e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f0a0:	47a0      	blx	r4
 800f0a2:	3001      	adds	r0, #1
 800f0a4:	d100      	bne.n	800f0a8 <_printf_float+0x238>
 800f0a6:	e73f      	b.n	800ef28 <_printf_float+0xb8>
 800f0a8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f0aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f0ac:	42b3      	cmp	r3, r6
 800f0ae:	db02      	blt.n	800f0b6 <_printf_float+0x246>
 800f0b0:	682b      	ldr	r3, [r5, #0]
 800f0b2:	07db      	lsls	r3, r3, #31
 800f0b4:	d50c      	bpl.n	800f0d0 <_printf_float+0x260>
 800f0b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f0b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f0bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f0be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0c0:	47a0      	blx	r4
 800f0c2:	2400      	movs	r4, #0
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	d100      	bne.n	800f0ca <_printf_float+0x25a>
 800f0c8:	e72e      	b.n	800ef28 <_printf_float+0xb8>
 800f0ca:	1e73      	subs	r3, r6, #1
 800f0cc:	42a3      	cmp	r3, r4
 800f0ce:	dc0a      	bgt.n	800f0e6 <_printf_float+0x276>
 800f0d0:	682b      	ldr	r3, [r5, #0]
 800f0d2:	079b      	lsls	r3, r3, #30
 800f0d4:	d500      	bpl.n	800f0d8 <_printf_float+0x268>
 800f0d6:	e106      	b.n	800f2e6 <_printf_float+0x476>
 800f0d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f0da:	68e8      	ldr	r0, [r5, #12]
 800f0dc:	4298      	cmp	r0, r3
 800f0de:	db00      	blt.n	800f0e2 <_printf_float+0x272>
 800f0e0:	e724      	b.n	800ef2c <_printf_float+0xbc>
 800f0e2:	0018      	movs	r0, r3
 800f0e4:	e722      	b.n	800ef2c <_printf_float+0xbc>
 800f0e6:	002a      	movs	r2, r5
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f0ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f0f0:	321a      	adds	r2, #26
 800f0f2:	47b8      	blx	r7
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d100      	bne.n	800f0fa <_printf_float+0x28a>
 800f0f8:	e716      	b.n	800ef28 <_printf_float+0xb8>
 800f0fa:	3401      	adds	r4, #1
 800f0fc:	e7e5      	b.n	800f0ca <_printf_float+0x25a>
 800f0fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f100:	2b00      	cmp	r3, #0
 800f102:	dc3b      	bgt.n	800f17c <_printf_float+0x30c>
 800f104:	2301      	movs	r3, #1
 800f106:	4a1c      	ldr	r2, [pc, #112]	@ (800f178 <_printf_float+0x308>)
 800f108:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f10a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f10c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f10e:	47a0      	blx	r4
 800f110:	3001      	adds	r0, #1
 800f112:	d100      	bne.n	800f116 <_printf_float+0x2a6>
 800f114:	e708      	b.n	800ef28 <_printf_float+0xb8>
 800f116:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f118:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f11a:	4333      	orrs	r3, r6
 800f11c:	d102      	bne.n	800f124 <_printf_float+0x2b4>
 800f11e:	682b      	ldr	r3, [r5, #0]
 800f120:	07db      	lsls	r3, r3, #31
 800f122:	d5d5      	bpl.n	800f0d0 <_printf_float+0x260>
 800f124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f126:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f128:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f12c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f12e:	47a0      	blx	r4
 800f130:	2300      	movs	r3, #0
 800f132:	3001      	adds	r0, #1
 800f134:	d100      	bne.n	800f138 <_printf_float+0x2c8>
 800f136:	e6f7      	b.n	800ef28 <_printf_float+0xb8>
 800f138:	930c      	str	r3, [sp, #48]	@ 0x30
 800f13a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f13c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f13e:	425b      	negs	r3, r3
 800f140:	4293      	cmp	r3, r2
 800f142:	dc01      	bgt.n	800f148 <_printf_float+0x2d8>
 800f144:	0033      	movs	r3, r6
 800f146:	e792      	b.n	800f06e <_printf_float+0x1fe>
 800f148:	002a      	movs	r2, r5
 800f14a:	2301      	movs	r3, #1
 800f14c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f14e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f150:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f152:	321a      	adds	r2, #26
 800f154:	47a0      	blx	r4
 800f156:	3001      	adds	r0, #1
 800f158:	d100      	bne.n	800f15c <_printf_float+0x2ec>
 800f15a:	e6e5      	b.n	800ef28 <_printf_float+0xb8>
 800f15c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f15e:	3301      	adds	r3, #1
 800f160:	e7ea      	b.n	800f138 <_printf_float+0x2c8>
 800f162:	46c0      	nop			@ (mov r8, r8)
 800f164:	7fefffff 	.word	0x7fefffff
 800f168:	080121b8 	.word	0x080121b8
 800f16c:	080121b4 	.word	0x080121b4
 800f170:	080121c0 	.word	0x080121c0
 800f174:	080121bc 	.word	0x080121bc
 800f178:	080121c4 	.word	0x080121c4
 800f17c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f17e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f180:	930c      	str	r3, [sp, #48]	@ 0x30
 800f182:	429e      	cmp	r6, r3
 800f184:	dd00      	ble.n	800f188 <_printf_float+0x318>
 800f186:	001e      	movs	r6, r3
 800f188:	2e00      	cmp	r6, #0
 800f18a:	dc31      	bgt.n	800f1f0 <_printf_float+0x380>
 800f18c:	43f3      	mvns	r3, r6
 800f18e:	2400      	movs	r4, #0
 800f190:	17db      	asrs	r3, r3, #31
 800f192:	4033      	ands	r3, r6
 800f194:	930e      	str	r3, [sp, #56]	@ 0x38
 800f196:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f19a:	1af3      	subs	r3, r6, r3
 800f19c:	42a3      	cmp	r3, r4
 800f19e:	dc30      	bgt.n	800f202 <_printf_float+0x392>
 800f1a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f1a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	dc38      	bgt.n	800f21a <_printf_float+0x3aa>
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	07db      	lsls	r3, r3, #31
 800f1ac:	d435      	bmi.n	800f21a <_printf_float+0x3aa>
 800f1ae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f1b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f1b4:	1b9b      	subs	r3, r3, r6
 800f1b6:	1b14      	subs	r4, r2, r4
 800f1b8:	429c      	cmp	r4, r3
 800f1ba:	dd00      	ble.n	800f1be <_printf_float+0x34e>
 800f1bc:	001c      	movs	r4, r3
 800f1be:	2c00      	cmp	r4, #0
 800f1c0:	dc34      	bgt.n	800f22c <_printf_float+0x3bc>
 800f1c2:	43e3      	mvns	r3, r4
 800f1c4:	2600      	movs	r6, #0
 800f1c6:	17db      	asrs	r3, r3, #31
 800f1c8:	401c      	ands	r4, r3
 800f1ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f1cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	1b1b      	subs	r3, r3, r4
 800f1d2:	42b3      	cmp	r3, r6
 800f1d4:	dc00      	bgt.n	800f1d8 <_printf_float+0x368>
 800f1d6:	e77b      	b.n	800f0d0 <_printf_float+0x260>
 800f1d8:	002a      	movs	r2, r5
 800f1da:	2301      	movs	r3, #1
 800f1dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f1de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f1e2:	321a      	adds	r2, #26
 800f1e4:	47b8      	blx	r7
 800f1e6:	3001      	adds	r0, #1
 800f1e8:	d100      	bne.n	800f1ec <_printf_float+0x37c>
 800f1ea:	e69d      	b.n	800ef28 <_printf_float+0xb8>
 800f1ec:	3601      	adds	r6, #1
 800f1ee:	e7ec      	b.n	800f1ca <_printf_float+0x35a>
 800f1f0:	0033      	movs	r3, r6
 800f1f2:	003a      	movs	r2, r7
 800f1f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f1f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f1fa:	47a0      	blx	r4
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	d1c5      	bne.n	800f18c <_printf_float+0x31c>
 800f200:	e692      	b.n	800ef28 <_printf_float+0xb8>
 800f202:	002a      	movs	r2, r5
 800f204:	2301      	movs	r3, #1
 800f206:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f208:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f20a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f20c:	321a      	adds	r2, #26
 800f20e:	47b0      	blx	r6
 800f210:	3001      	adds	r0, #1
 800f212:	d100      	bne.n	800f216 <_printf_float+0x3a6>
 800f214:	e688      	b.n	800ef28 <_printf_float+0xb8>
 800f216:	3401      	adds	r4, #1
 800f218:	e7bd      	b.n	800f196 <_printf_float+0x326>
 800f21a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f21c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f21e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f220:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f222:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f224:	47a0      	blx	r4
 800f226:	3001      	adds	r0, #1
 800f228:	d1c1      	bne.n	800f1ae <_printf_float+0x33e>
 800f22a:	e67d      	b.n	800ef28 <_printf_float+0xb8>
 800f22c:	19ba      	adds	r2, r7, r6
 800f22e:	0023      	movs	r3, r4
 800f230:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f234:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f236:	47b0      	blx	r6
 800f238:	3001      	adds	r0, #1
 800f23a:	d1c2      	bne.n	800f1c2 <_printf_float+0x352>
 800f23c:	e674      	b.n	800ef28 <_printf_float+0xb8>
 800f23e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f240:	930c      	str	r3, [sp, #48]	@ 0x30
 800f242:	2b01      	cmp	r3, #1
 800f244:	dc02      	bgt.n	800f24c <_printf_float+0x3dc>
 800f246:	2301      	movs	r3, #1
 800f248:	421a      	tst	r2, r3
 800f24a:	d039      	beq.n	800f2c0 <_printf_float+0x450>
 800f24c:	2301      	movs	r3, #1
 800f24e:	003a      	movs	r2, r7
 800f250:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f254:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f256:	47b0      	blx	r6
 800f258:	3001      	adds	r0, #1
 800f25a:	d100      	bne.n	800f25e <_printf_float+0x3ee>
 800f25c:	e664      	b.n	800ef28 <_printf_float+0xb8>
 800f25e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f260:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f264:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f266:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f268:	47b0      	blx	r6
 800f26a:	3001      	adds	r0, #1
 800f26c:	d100      	bne.n	800f270 <_printf_float+0x400>
 800f26e:	e65b      	b.n	800ef28 <_printf_float+0xb8>
 800f270:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f272:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f276:	2200      	movs	r2, #0
 800f278:	3b01      	subs	r3, #1
 800f27a:	930c      	str	r3, [sp, #48]	@ 0x30
 800f27c:	2300      	movs	r3, #0
 800f27e:	f7f1 f8e5 	bl	800044c <__aeabi_dcmpeq>
 800f282:	2800      	cmp	r0, #0
 800f284:	d11a      	bne.n	800f2bc <_printf_float+0x44c>
 800f286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f288:	1c7a      	adds	r2, r7, #1
 800f28a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f28c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f28e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f290:	47b0      	blx	r6
 800f292:	3001      	adds	r0, #1
 800f294:	d10e      	bne.n	800f2b4 <_printf_float+0x444>
 800f296:	e647      	b.n	800ef28 <_printf_float+0xb8>
 800f298:	002a      	movs	r2, r5
 800f29a:	2301      	movs	r3, #1
 800f29c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f2a2:	321a      	adds	r2, #26
 800f2a4:	47b8      	blx	r7
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	d100      	bne.n	800f2ac <_printf_float+0x43c>
 800f2aa:	e63d      	b.n	800ef28 <_printf_float+0xb8>
 800f2ac:	3601      	adds	r6, #1
 800f2ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2b0:	429e      	cmp	r6, r3
 800f2b2:	dbf1      	blt.n	800f298 <_printf_float+0x428>
 800f2b4:	002a      	movs	r2, r5
 800f2b6:	0023      	movs	r3, r4
 800f2b8:	3250      	adds	r2, #80	@ 0x50
 800f2ba:	e6d9      	b.n	800f070 <_printf_float+0x200>
 800f2bc:	2600      	movs	r6, #0
 800f2be:	e7f6      	b.n	800f2ae <_printf_float+0x43e>
 800f2c0:	003a      	movs	r2, r7
 800f2c2:	e7e2      	b.n	800f28a <_printf_float+0x41a>
 800f2c4:	002a      	movs	r2, r5
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f2ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f2ce:	3219      	adds	r2, #25
 800f2d0:	47b0      	blx	r6
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	d100      	bne.n	800f2d8 <_printf_float+0x468>
 800f2d6:	e627      	b.n	800ef28 <_printf_float+0xb8>
 800f2d8:	3401      	adds	r4, #1
 800f2da:	68eb      	ldr	r3, [r5, #12]
 800f2dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f2de:	1a9b      	subs	r3, r3, r2
 800f2e0:	42a3      	cmp	r3, r4
 800f2e2:	dcef      	bgt.n	800f2c4 <_printf_float+0x454>
 800f2e4:	e6f8      	b.n	800f0d8 <_printf_float+0x268>
 800f2e6:	2400      	movs	r4, #0
 800f2e8:	e7f7      	b.n	800f2da <_printf_float+0x46a>
 800f2ea:	46c0      	nop			@ (mov r8, r8)

0800f2ec <_printf_common>:
 800f2ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2ee:	0016      	movs	r6, r2
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	688a      	ldr	r2, [r1, #8]
 800f2f4:	690b      	ldr	r3, [r1, #16]
 800f2f6:	000c      	movs	r4, r1
 800f2f8:	9000      	str	r0, [sp, #0]
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	da00      	bge.n	800f300 <_printf_common+0x14>
 800f2fe:	0013      	movs	r3, r2
 800f300:	0022      	movs	r2, r4
 800f302:	6033      	str	r3, [r6, #0]
 800f304:	3243      	adds	r2, #67	@ 0x43
 800f306:	7812      	ldrb	r2, [r2, #0]
 800f308:	2a00      	cmp	r2, #0
 800f30a:	d001      	beq.n	800f310 <_printf_common+0x24>
 800f30c:	3301      	adds	r3, #1
 800f30e:	6033      	str	r3, [r6, #0]
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	069b      	lsls	r3, r3, #26
 800f314:	d502      	bpl.n	800f31c <_printf_common+0x30>
 800f316:	6833      	ldr	r3, [r6, #0]
 800f318:	3302      	adds	r3, #2
 800f31a:	6033      	str	r3, [r6, #0]
 800f31c:	6822      	ldr	r2, [r4, #0]
 800f31e:	2306      	movs	r3, #6
 800f320:	0015      	movs	r5, r2
 800f322:	401d      	ands	r5, r3
 800f324:	421a      	tst	r2, r3
 800f326:	d027      	beq.n	800f378 <_printf_common+0x8c>
 800f328:	0023      	movs	r3, r4
 800f32a:	3343      	adds	r3, #67	@ 0x43
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	1e5a      	subs	r2, r3, #1
 800f330:	4193      	sbcs	r3, r2
 800f332:	6822      	ldr	r2, [r4, #0]
 800f334:	0692      	lsls	r2, r2, #26
 800f336:	d430      	bmi.n	800f39a <_printf_common+0xae>
 800f338:	0022      	movs	r2, r4
 800f33a:	9901      	ldr	r1, [sp, #4]
 800f33c:	9800      	ldr	r0, [sp, #0]
 800f33e:	9d08      	ldr	r5, [sp, #32]
 800f340:	3243      	adds	r2, #67	@ 0x43
 800f342:	47a8      	blx	r5
 800f344:	3001      	adds	r0, #1
 800f346:	d025      	beq.n	800f394 <_printf_common+0xa8>
 800f348:	2206      	movs	r2, #6
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	2500      	movs	r5, #0
 800f34e:	4013      	ands	r3, r2
 800f350:	2b04      	cmp	r3, #4
 800f352:	d105      	bne.n	800f360 <_printf_common+0x74>
 800f354:	6833      	ldr	r3, [r6, #0]
 800f356:	68e5      	ldr	r5, [r4, #12]
 800f358:	1aed      	subs	r5, r5, r3
 800f35a:	43eb      	mvns	r3, r5
 800f35c:	17db      	asrs	r3, r3, #31
 800f35e:	401d      	ands	r5, r3
 800f360:	68a3      	ldr	r3, [r4, #8]
 800f362:	6922      	ldr	r2, [r4, #16]
 800f364:	4293      	cmp	r3, r2
 800f366:	dd01      	ble.n	800f36c <_printf_common+0x80>
 800f368:	1a9b      	subs	r3, r3, r2
 800f36a:	18ed      	adds	r5, r5, r3
 800f36c:	2600      	movs	r6, #0
 800f36e:	42b5      	cmp	r5, r6
 800f370:	d120      	bne.n	800f3b4 <_printf_common+0xc8>
 800f372:	2000      	movs	r0, #0
 800f374:	e010      	b.n	800f398 <_printf_common+0xac>
 800f376:	3501      	adds	r5, #1
 800f378:	68e3      	ldr	r3, [r4, #12]
 800f37a:	6832      	ldr	r2, [r6, #0]
 800f37c:	1a9b      	subs	r3, r3, r2
 800f37e:	42ab      	cmp	r3, r5
 800f380:	ddd2      	ble.n	800f328 <_printf_common+0x3c>
 800f382:	0022      	movs	r2, r4
 800f384:	2301      	movs	r3, #1
 800f386:	9901      	ldr	r1, [sp, #4]
 800f388:	9800      	ldr	r0, [sp, #0]
 800f38a:	9f08      	ldr	r7, [sp, #32]
 800f38c:	3219      	adds	r2, #25
 800f38e:	47b8      	blx	r7
 800f390:	3001      	adds	r0, #1
 800f392:	d1f0      	bne.n	800f376 <_printf_common+0x8a>
 800f394:	2001      	movs	r0, #1
 800f396:	4240      	negs	r0, r0
 800f398:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f39a:	2030      	movs	r0, #48	@ 0x30
 800f39c:	18e1      	adds	r1, r4, r3
 800f39e:	3143      	adds	r1, #67	@ 0x43
 800f3a0:	7008      	strb	r0, [r1, #0]
 800f3a2:	0021      	movs	r1, r4
 800f3a4:	1c5a      	adds	r2, r3, #1
 800f3a6:	3145      	adds	r1, #69	@ 0x45
 800f3a8:	7809      	ldrb	r1, [r1, #0]
 800f3aa:	18a2      	adds	r2, r4, r2
 800f3ac:	3243      	adds	r2, #67	@ 0x43
 800f3ae:	3302      	adds	r3, #2
 800f3b0:	7011      	strb	r1, [r2, #0]
 800f3b2:	e7c1      	b.n	800f338 <_printf_common+0x4c>
 800f3b4:	0022      	movs	r2, r4
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	9901      	ldr	r1, [sp, #4]
 800f3ba:	9800      	ldr	r0, [sp, #0]
 800f3bc:	9f08      	ldr	r7, [sp, #32]
 800f3be:	321a      	adds	r2, #26
 800f3c0:	47b8      	blx	r7
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	d0e6      	beq.n	800f394 <_printf_common+0xa8>
 800f3c6:	3601      	adds	r6, #1
 800f3c8:	e7d1      	b.n	800f36e <_printf_common+0x82>
	...

0800f3cc <_printf_i>:
 800f3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ce:	b08b      	sub	sp, #44	@ 0x2c
 800f3d0:	9206      	str	r2, [sp, #24]
 800f3d2:	000a      	movs	r2, r1
 800f3d4:	3243      	adds	r2, #67	@ 0x43
 800f3d6:	9307      	str	r3, [sp, #28]
 800f3d8:	9005      	str	r0, [sp, #20]
 800f3da:	9203      	str	r2, [sp, #12]
 800f3dc:	7e0a      	ldrb	r2, [r1, #24]
 800f3de:	000c      	movs	r4, r1
 800f3e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3e2:	2a78      	cmp	r2, #120	@ 0x78
 800f3e4:	d809      	bhi.n	800f3fa <_printf_i+0x2e>
 800f3e6:	2a62      	cmp	r2, #98	@ 0x62
 800f3e8:	d80b      	bhi.n	800f402 <_printf_i+0x36>
 800f3ea:	2a00      	cmp	r2, #0
 800f3ec:	d100      	bne.n	800f3f0 <_printf_i+0x24>
 800f3ee:	e0ba      	b.n	800f566 <_printf_i+0x19a>
 800f3f0:	497a      	ldr	r1, [pc, #488]	@ (800f5dc <_printf_i+0x210>)
 800f3f2:	9104      	str	r1, [sp, #16]
 800f3f4:	2a58      	cmp	r2, #88	@ 0x58
 800f3f6:	d100      	bne.n	800f3fa <_printf_i+0x2e>
 800f3f8:	e08e      	b.n	800f518 <_printf_i+0x14c>
 800f3fa:	0025      	movs	r5, r4
 800f3fc:	3542      	adds	r5, #66	@ 0x42
 800f3fe:	702a      	strb	r2, [r5, #0]
 800f400:	e022      	b.n	800f448 <_printf_i+0x7c>
 800f402:	0010      	movs	r0, r2
 800f404:	3863      	subs	r0, #99	@ 0x63
 800f406:	2815      	cmp	r0, #21
 800f408:	d8f7      	bhi.n	800f3fa <_printf_i+0x2e>
 800f40a:	f7f0 fe8f 	bl	800012c <__gnu_thumb1_case_shi>
 800f40e:	0016      	.short	0x0016
 800f410:	fff6001f 	.word	0xfff6001f
 800f414:	fff6fff6 	.word	0xfff6fff6
 800f418:	001ffff6 	.word	0x001ffff6
 800f41c:	fff6fff6 	.word	0xfff6fff6
 800f420:	fff6fff6 	.word	0xfff6fff6
 800f424:	0036009f 	.word	0x0036009f
 800f428:	fff6007e 	.word	0xfff6007e
 800f42c:	00b0fff6 	.word	0x00b0fff6
 800f430:	0036fff6 	.word	0x0036fff6
 800f434:	fff6fff6 	.word	0xfff6fff6
 800f438:	0082      	.short	0x0082
 800f43a:	0025      	movs	r5, r4
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	3542      	adds	r5, #66	@ 0x42
 800f440:	1d11      	adds	r1, r2, #4
 800f442:	6019      	str	r1, [r3, #0]
 800f444:	6813      	ldr	r3, [r2, #0]
 800f446:	702b      	strb	r3, [r5, #0]
 800f448:	2301      	movs	r3, #1
 800f44a:	e09e      	b.n	800f58a <_printf_i+0x1be>
 800f44c:	6818      	ldr	r0, [r3, #0]
 800f44e:	6809      	ldr	r1, [r1, #0]
 800f450:	1d02      	adds	r2, r0, #4
 800f452:	060d      	lsls	r5, r1, #24
 800f454:	d50b      	bpl.n	800f46e <_printf_i+0xa2>
 800f456:	6806      	ldr	r6, [r0, #0]
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	2e00      	cmp	r6, #0
 800f45c:	da03      	bge.n	800f466 <_printf_i+0x9a>
 800f45e:	232d      	movs	r3, #45	@ 0x2d
 800f460:	9a03      	ldr	r2, [sp, #12]
 800f462:	4276      	negs	r6, r6
 800f464:	7013      	strb	r3, [r2, #0]
 800f466:	4b5d      	ldr	r3, [pc, #372]	@ (800f5dc <_printf_i+0x210>)
 800f468:	270a      	movs	r7, #10
 800f46a:	9304      	str	r3, [sp, #16]
 800f46c:	e018      	b.n	800f4a0 <_printf_i+0xd4>
 800f46e:	6806      	ldr	r6, [r0, #0]
 800f470:	601a      	str	r2, [r3, #0]
 800f472:	0649      	lsls	r1, r1, #25
 800f474:	d5f1      	bpl.n	800f45a <_printf_i+0x8e>
 800f476:	b236      	sxth	r6, r6
 800f478:	e7ef      	b.n	800f45a <_printf_i+0x8e>
 800f47a:	6808      	ldr	r0, [r1, #0]
 800f47c:	6819      	ldr	r1, [r3, #0]
 800f47e:	c940      	ldmia	r1!, {r6}
 800f480:	0605      	lsls	r5, r0, #24
 800f482:	d402      	bmi.n	800f48a <_printf_i+0xbe>
 800f484:	0640      	lsls	r0, r0, #25
 800f486:	d500      	bpl.n	800f48a <_printf_i+0xbe>
 800f488:	b2b6      	uxth	r6, r6
 800f48a:	6019      	str	r1, [r3, #0]
 800f48c:	4b53      	ldr	r3, [pc, #332]	@ (800f5dc <_printf_i+0x210>)
 800f48e:	270a      	movs	r7, #10
 800f490:	9304      	str	r3, [sp, #16]
 800f492:	2a6f      	cmp	r2, #111	@ 0x6f
 800f494:	d100      	bne.n	800f498 <_printf_i+0xcc>
 800f496:	3f02      	subs	r7, #2
 800f498:	0023      	movs	r3, r4
 800f49a:	2200      	movs	r2, #0
 800f49c:	3343      	adds	r3, #67	@ 0x43
 800f49e:	701a      	strb	r2, [r3, #0]
 800f4a0:	6863      	ldr	r3, [r4, #4]
 800f4a2:	60a3      	str	r3, [r4, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	db06      	blt.n	800f4b6 <_printf_i+0xea>
 800f4a8:	2104      	movs	r1, #4
 800f4aa:	6822      	ldr	r2, [r4, #0]
 800f4ac:	9d03      	ldr	r5, [sp, #12]
 800f4ae:	438a      	bics	r2, r1
 800f4b0:	6022      	str	r2, [r4, #0]
 800f4b2:	4333      	orrs	r3, r6
 800f4b4:	d00c      	beq.n	800f4d0 <_printf_i+0x104>
 800f4b6:	9d03      	ldr	r5, [sp, #12]
 800f4b8:	0030      	movs	r0, r6
 800f4ba:	0039      	movs	r1, r7
 800f4bc:	f7f0 fec6 	bl	800024c <__aeabi_uidivmod>
 800f4c0:	9b04      	ldr	r3, [sp, #16]
 800f4c2:	3d01      	subs	r5, #1
 800f4c4:	5c5b      	ldrb	r3, [r3, r1]
 800f4c6:	702b      	strb	r3, [r5, #0]
 800f4c8:	0033      	movs	r3, r6
 800f4ca:	0006      	movs	r6, r0
 800f4cc:	429f      	cmp	r7, r3
 800f4ce:	d9f3      	bls.n	800f4b8 <_printf_i+0xec>
 800f4d0:	2f08      	cmp	r7, #8
 800f4d2:	d109      	bne.n	800f4e8 <_printf_i+0x11c>
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	07db      	lsls	r3, r3, #31
 800f4d8:	d506      	bpl.n	800f4e8 <_printf_i+0x11c>
 800f4da:	6862      	ldr	r2, [r4, #4]
 800f4dc:	6923      	ldr	r3, [r4, #16]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	dc02      	bgt.n	800f4e8 <_printf_i+0x11c>
 800f4e2:	2330      	movs	r3, #48	@ 0x30
 800f4e4:	3d01      	subs	r5, #1
 800f4e6:	702b      	strb	r3, [r5, #0]
 800f4e8:	9b03      	ldr	r3, [sp, #12]
 800f4ea:	1b5b      	subs	r3, r3, r5
 800f4ec:	6123      	str	r3, [r4, #16]
 800f4ee:	9b07      	ldr	r3, [sp, #28]
 800f4f0:	0021      	movs	r1, r4
 800f4f2:	9300      	str	r3, [sp, #0]
 800f4f4:	9805      	ldr	r0, [sp, #20]
 800f4f6:	9b06      	ldr	r3, [sp, #24]
 800f4f8:	aa09      	add	r2, sp, #36	@ 0x24
 800f4fa:	f7ff fef7 	bl	800f2ec <_printf_common>
 800f4fe:	3001      	adds	r0, #1
 800f500:	d148      	bne.n	800f594 <_printf_i+0x1c8>
 800f502:	2001      	movs	r0, #1
 800f504:	4240      	negs	r0, r0
 800f506:	b00b      	add	sp, #44	@ 0x2c
 800f508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f50a:	2220      	movs	r2, #32
 800f50c:	6809      	ldr	r1, [r1, #0]
 800f50e:	430a      	orrs	r2, r1
 800f510:	6022      	str	r2, [r4, #0]
 800f512:	2278      	movs	r2, #120	@ 0x78
 800f514:	4932      	ldr	r1, [pc, #200]	@ (800f5e0 <_printf_i+0x214>)
 800f516:	9104      	str	r1, [sp, #16]
 800f518:	0021      	movs	r1, r4
 800f51a:	3145      	adds	r1, #69	@ 0x45
 800f51c:	700a      	strb	r2, [r1, #0]
 800f51e:	6819      	ldr	r1, [r3, #0]
 800f520:	6822      	ldr	r2, [r4, #0]
 800f522:	c940      	ldmia	r1!, {r6}
 800f524:	0610      	lsls	r0, r2, #24
 800f526:	d402      	bmi.n	800f52e <_printf_i+0x162>
 800f528:	0650      	lsls	r0, r2, #25
 800f52a:	d500      	bpl.n	800f52e <_printf_i+0x162>
 800f52c:	b2b6      	uxth	r6, r6
 800f52e:	6019      	str	r1, [r3, #0]
 800f530:	07d3      	lsls	r3, r2, #31
 800f532:	d502      	bpl.n	800f53a <_printf_i+0x16e>
 800f534:	2320      	movs	r3, #32
 800f536:	4313      	orrs	r3, r2
 800f538:	6023      	str	r3, [r4, #0]
 800f53a:	2e00      	cmp	r6, #0
 800f53c:	d001      	beq.n	800f542 <_printf_i+0x176>
 800f53e:	2710      	movs	r7, #16
 800f540:	e7aa      	b.n	800f498 <_printf_i+0xcc>
 800f542:	2220      	movs	r2, #32
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	4393      	bics	r3, r2
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	e7f8      	b.n	800f53e <_printf_i+0x172>
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	680d      	ldr	r5, [r1, #0]
 800f550:	1d10      	adds	r0, r2, #4
 800f552:	6949      	ldr	r1, [r1, #20]
 800f554:	6018      	str	r0, [r3, #0]
 800f556:	6813      	ldr	r3, [r2, #0]
 800f558:	062e      	lsls	r6, r5, #24
 800f55a:	d501      	bpl.n	800f560 <_printf_i+0x194>
 800f55c:	6019      	str	r1, [r3, #0]
 800f55e:	e002      	b.n	800f566 <_printf_i+0x19a>
 800f560:	066d      	lsls	r5, r5, #25
 800f562:	d5fb      	bpl.n	800f55c <_printf_i+0x190>
 800f564:	8019      	strh	r1, [r3, #0]
 800f566:	2300      	movs	r3, #0
 800f568:	9d03      	ldr	r5, [sp, #12]
 800f56a:	6123      	str	r3, [r4, #16]
 800f56c:	e7bf      	b.n	800f4ee <_printf_i+0x122>
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	1d11      	adds	r1, r2, #4
 800f572:	6019      	str	r1, [r3, #0]
 800f574:	6815      	ldr	r5, [r2, #0]
 800f576:	2100      	movs	r1, #0
 800f578:	0028      	movs	r0, r5
 800f57a:	6862      	ldr	r2, [r4, #4]
 800f57c:	f000 fa21 	bl	800f9c2 <memchr>
 800f580:	2800      	cmp	r0, #0
 800f582:	d001      	beq.n	800f588 <_printf_i+0x1bc>
 800f584:	1b40      	subs	r0, r0, r5
 800f586:	6060      	str	r0, [r4, #4]
 800f588:	6863      	ldr	r3, [r4, #4]
 800f58a:	6123      	str	r3, [r4, #16]
 800f58c:	2300      	movs	r3, #0
 800f58e:	9a03      	ldr	r2, [sp, #12]
 800f590:	7013      	strb	r3, [r2, #0]
 800f592:	e7ac      	b.n	800f4ee <_printf_i+0x122>
 800f594:	002a      	movs	r2, r5
 800f596:	6923      	ldr	r3, [r4, #16]
 800f598:	9906      	ldr	r1, [sp, #24]
 800f59a:	9805      	ldr	r0, [sp, #20]
 800f59c:	9d07      	ldr	r5, [sp, #28]
 800f59e:	47a8      	blx	r5
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d0ae      	beq.n	800f502 <_printf_i+0x136>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	079b      	lsls	r3, r3, #30
 800f5a8:	d415      	bmi.n	800f5d6 <_printf_i+0x20a>
 800f5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ac:	68e0      	ldr	r0, [r4, #12]
 800f5ae:	4298      	cmp	r0, r3
 800f5b0:	daa9      	bge.n	800f506 <_printf_i+0x13a>
 800f5b2:	0018      	movs	r0, r3
 800f5b4:	e7a7      	b.n	800f506 <_printf_i+0x13a>
 800f5b6:	0022      	movs	r2, r4
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	9906      	ldr	r1, [sp, #24]
 800f5bc:	9805      	ldr	r0, [sp, #20]
 800f5be:	9e07      	ldr	r6, [sp, #28]
 800f5c0:	3219      	adds	r2, #25
 800f5c2:	47b0      	blx	r6
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	d09c      	beq.n	800f502 <_printf_i+0x136>
 800f5c8:	3501      	adds	r5, #1
 800f5ca:	68e3      	ldr	r3, [r4, #12]
 800f5cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5ce:	1a9b      	subs	r3, r3, r2
 800f5d0:	42ab      	cmp	r3, r5
 800f5d2:	dcf0      	bgt.n	800f5b6 <_printf_i+0x1ea>
 800f5d4:	e7e9      	b.n	800f5aa <_printf_i+0x1de>
 800f5d6:	2500      	movs	r5, #0
 800f5d8:	e7f7      	b.n	800f5ca <_printf_i+0x1fe>
 800f5da:	46c0      	nop			@ (mov r8, r8)
 800f5dc:	080121c6 	.word	0x080121c6
 800f5e0:	080121d7 	.word	0x080121d7

0800f5e4 <std>:
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	b510      	push	{r4, lr}
 800f5e8:	0004      	movs	r4, r0
 800f5ea:	6003      	str	r3, [r0, #0]
 800f5ec:	6043      	str	r3, [r0, #4]
 800f5ee:	6083      	str	r3, [r0, #8]
 800f5f0:	8181      	strh	r1, [r0, #12]
 800f5f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f5f4:	81c2      	strh	r2, [r0, #14]
 800f5f6:	6103      	str	r3, [r0, #16]
 800f5f8:	6143      	str	r3, [r0, #20]
 800f5fa:	6183      	str	r3, [r0, #24]
 800f5fc:	0019      	movs	r1, r3
 800f5fe:	2208      	movs	r2, #8
 800f600:	305c      	adds	r0, #92	@ 0x5c
 800f602:	f000 f957 	bl	800f8b4 <memset>
 800f606:	4b0b      	ldr	r3, [pc, #44]	@ (800f634 <std+0x50>)
 800f608:	6224      	str	r4, [r4, #32]
 800f60a:	6263      	str	r3, [r4, #36]	@ 0x24
 800f60c:	4b0a      	ldr	r3, [pc, #40]	@ (800f638 <std+0x54>)
 800f60e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f610:	4b0a      	ldr	r3, [pc, #40]	@ (800f63c <std+0x58>)
 800f612:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f614:	4b0a      	ldr	r3, [pc, #40]	@ (800f640 <std+0x5c>)
 800f616:	6323      	str	r3, [r4, #48]	@ 0x30
 800f618:	4b0a      	ldr	r3, [pc, #40]	@ (800f644 <std+0x60>)
 800f61a:	429c      	cmp	r4, r3
 800f61c:	d005      	beq.n	800f62a <std+0x46>
 800f61e:	4b0a      	ldr	r3, [pc, #40]	@ (800f648 <std+0x64>)
 800f620:	429c      	cmp	r4, r3
 800f622:	d002      	beq.n	800f62a <std+0x46>
 800f624:	4b09      	ldr	r3, [pc, #36]	@ (800f64c <std+0x68>)
 800f626:	429c      	cmp	r4, r3
 800f628:	d103      	bne.n	800f632 <std+0x4e>
 800f62a:	0020      	movs	r0, r4
 800f62c:	3058      	adds	r0, #88	@ 0x58
 800f62e:	f000 f9c5 	bl	800f9bc <__retarget_lock_init_recursive>
 800f632:	bd10      	pop	{r4, pc}
 800f634:	0800f81d 	.word	0x0800f81d
 800f638:	0800f845 	.word	0x0800f845
 800f63c:	0800f87d 	.word	0x0800f87d
 800f640:	0800f8a9 	.word	0x0800f8a9
 800f644:	2000076c 	.word	0x2000076c
 800f648:	200007d4 	.word	0x200007d4
 800f64c:	2000083c 	.word	0x2000083c

0800f650 <stdio_exit_handler>:
 800f650:	b510      	push	{r4, lr}
 800f652:	4a03      	ldr	r2, [pc, #12]	@ (800f660 <stdio_exit_handler+0x10>)
 800f654:	4903      	ldr	r1, [pc, #12]	@ (800f664 <stdio_exit_handler+0x14>)
 800f656:	4804      	ldr	r0, [pc, #16]	@ (800f668 <stdio_exit_handler+0x18>)
 800f658:	f000 f86c 	bl	800f734 <_fwalk_sglue>
 800f65c:	bd10      	pop	{r4, pc}
 800f65e:	46c0      	nop			@ (mov r8, r8)
 800f660:	20000010 	.word	0x20000010
 800f664:	080113e1 	.word	0x080113e1
 800f668:	20000020 	.word	0x20000020

0800f66c <cleanup_stdio>:
 800f66c:	6841      	ldr	r1, [r0, #4]
 800f66e:	4b0b      	ldr	r3, [pc, #44]	@ (800f69c <cleanup_stdio+0x30>)
 800f670:	b510      	push	{r4, lr}
 800f672:	0004      	movs	r4, r0
 800f674:	4299      	cmp	r1, r3
 800f676:	d001      	beq.n	800f67c <cleanup_stdio+0x10>
 800f678:	f001 feb2 	bl	80113e0 <_fflush_r>
 800f67c:	68a1      	ldr	r1, [r4, #8]
 800f67e:	4b08      	ldr	r3, [pc, #32]	@ (800f6a0 <cleanup_stdio+0x34>)
 800f680:	4299      	cmp	r1, r3
 800f682:	d002      	beq.n	800f68a <cleanup_stdio+0x1e>
 800f684:	0020      	movs	r0, r4
 800f686:	f001 feab 	bl	80113e0 <_fflush_r>
 800f68a:	68e1      	ldr	r1, [r4, #12]
 800f68c:	4b05      	ldr	r3, [pc, #20]	@ (800f6a4 <cleanup_stdio+0x38>)
 800f68e:	4299      	cmp	r1, r3
 800f690:	d002      	beq.n	800f698 <cleanup_stdio+0x2c>
 800f692:	0020      	movs	r0, r4
 800f694:	f001 fea4 	bl	80113e0 <_fflush_r>
 800f698:	bd10      	pop	{r4, pc}
 800f69a:	46c0      	nop			@ (mov r8, r8)
 800f69c:	2000076c 	.word	0x2000076c
 800f6a0:	200007d4 	.word	0x200007d4
 800f6a4:	2000083c 	.word	0x2000083c

0800f6a8 <global_stdio_init.part.0>:
 800f6a8:	b510      	push	{r4, lr}
 800f6aa:	4b09      	ldr	r3, [pc, #36]	@ (800f6d0 <global_stdio_init.part.0+0x28>)
 800f6ac:	4a09      	ldr	r2, [pc, #36]	@ (800f6d4 <global_stdio_init.part.0+0x2c>)
 800f6ae:	2104      	movs	r1, #4
 800f6b0:	601a      	str	r2, [r3, #0]
 800f6b2:	4809      	ldr	r0, [pc, #36]	@ (800f6d8 <global_stdio_init.part.0+0x30>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f7ff ff95 	bl	800f5e4 <std>
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	2109      	movs	r1, #9
 800f6be:	4807      	ldr	r0, [pc, #28]	@ (800f6dc <global_stdio_init.part.0+0x34>)
 800f6c0:	f7ff ff90 	bl	800f5e4 <std>
 800f6c4:	2202      	movs	r2, #2
 800f6c6:	2112      	movs	r1, #18
 800f6c8:	4805      	ldr	r0, [pc, #20]	@ (800f6e0 <global_stdio_init.part.0+0x38>)
 800f6ca:	f7ff ff8b 	bl	800f5e4 <std>
 800f6ce:	bd10      	pop	{r4, pc}
 800f6d0:	200008a4 	.word	0x200008a4
 800f6d4:	0800f651 	.word	0x0800f651
 800f6d8:	2000076c 	.word	0x2000076c
 800f6dc:	200007d4 	.word	0x200007d4
 800f6e0:	2000083c 	.word	0x2000083c

0800f6e4 <__sfp_lock_acquire>:
 800f6e4:	b510      	push	{r4, lr}
 800f6e6:	4802      	ldr	r0, [pc, #8]	@ (800f6f0 <__sfp_lock_acquire+0xc>)
 800f6e8:	f000 f969 	bl	800f9be <__retarget_lock_acquire_recursive>
 800f6ec:	bd10      	pop	{r4, pc}
 800f6ee:	46c0      	nop			@ (mov r8, r8)
 800f6f0:	200008ad 	.word	0x200008ad

0800f6f4 <__sfp_lock_release>:
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	4802      	ldr	r0, [pc, #8]	@ (800f700 <__sfp_lock_release+0xc>)
 800f6f8:	f000 f962 	bl	800f9c0 <__retarget_lock_release_recursive>
 800f6fc:	bd10      	pop	{r4, pc}
 800f6fe:	46c0      	nop			@ (mov r8, r8)
 800f700:	200008ad 	.word	0x200008ad

0800f704 <__sinit>:
 800f704:	b510      	push	{r4, lr}
 800f706:	0004      	movs	r4, r0
 800f708:	f7ff ffec 	bl	800f6e4 <__sfp_lock_acquire>
 800f70c:	6a23      	ldr	r3, [r4, #32]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d002      	beq.n	800f718 <__sinit+0x14>
 800f712:	f7ff ffef 	bl	800f6f4 <__sfp_lock_release>
 800f716:	bd10      	pop	{r4, pc}
 800f718:	4b04      	ldr	r3, [pc, #16]	@ (800f72c <__sinit+0x28>)
 800f71a:	6223      	str	r3, [r4, #32]
 800f71c:	4b04      	ldr	r3, [pc, #16]	@ (800f730 <__sinit+0x2c>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1f6      	bne.n	800f712 <__sinit+0xe>
 800f724:	f7ff ffc0 	bl	800f6a8 <global_stdio_init.part.0>
 800f728:	e7f3      	b.n	800f712 <__sinit+0xe>
 800f72a:	46c0      	nop			@ (mov r8, r8)
 800f72c:	0800f66d 	.word	0x0800f66d
 800f730:	200008a4 	.word	0x200008a4

0800f734 <_fwalk_sglue>:
 800f734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f736:	0014      	movs	r4, r2
 800f738:	2600      	movs	r6, #0
 800f73a:	9000      	str	r0, [sp, #0]
 800f73c:	9101      	str	r1, [sp, #4]
 800f73e:	68a5      	ldr	r5, [r4, #8]
 800f740:	6867      	ldr	r7, [r4, #4]
 800f742:	3f01      	subs	r7, #1
 800f744:	d504      	bpl.n	800f750 <_fwalk_sglue+0x1c>
 800f746:	6824      	ldr	r4, [r4, #0]
 800f748:	2c00      	cmp	r4, #0
 800f74a:	d1f8      	bne.n	800f73e <_fwalk_sglue+0xa>
 800f74c:	0030      	movs	r0, r6
 800f74e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f750:	89ab      	ldrh	r3, [r5, #12]
 800f752:	2b01      	cmp	r3, #1
 800f754:	d908      	bls.n	800f768 <_fwalk_sglue+0x34>
 800f756:	220e      	movs	r2, #14
 800f758:	5eab      	ldrsh	r3, [r5, r2]
 800f75a:	3301      	adds	r3, #1
 800f75c:	d004      	beq.n	800f768 <_fwalk_sglue+0x34>
 800f75e:	0029      	movs	r1, r5
 800f760:	9800      	ldr	r0, [sp, #0]
 800f762:	9b01      	ldr	r3, [sp, #4]
 800f764:	4798      	blx	r3
 800f766:	4306      	orrs	r6, r0
 800f768:	3568      	adds	r5, #104	@ 0x68
 800f76a:	e7ea      	b.n	800f742 <_fwalk_sglue+0xe>

0800f76c <sniprintf>:
 800f76c:	b40c      	push	{r2, r3}
 800f76e:	b530      	push	{r4, r5, lr}
 800f770:	4b18      	ldr	r3, [pc, #96]	@ (800f7d4 <sniprintf+0x68>)
 800f772:	000c      	movs	r4, r1
 800f774:	681d      	ldr	r5, [r3, #0]
 800f776:	b09d      	sub	sp, #116	@ 0x74
 800f778:	2900      	cmp	r1, #0
 800f77a:	da08      	bge.n	800f78e <sniprintf+0x22>
 800f77c:	238b      	movs	r3, #139	@ 0x8b
 800f77e:	2001      	movs	r0, #1
 800f780:	602b      	str	r3, [r5, #0]
 800f782:	4240      	negs	r0, r0
 800f784:	b01d      	add	sp, #116	@ 0x74
 800f786:	bc30      	pop	{r4, r5}
 800f788:	bc08      	pop	{r3}
 800f78a:	b002      	add	sp, #8
 800f78c:	4718      	bx	r3
 800f78e:	2382      	movs	r3, #130	@ 0x82
 800f790:	466a      	mov	r2, sp
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	8293      	strh	r3, [r2, #20]
 800f796:	2300      	movs	r3, #0
 800f798:	9002      	str	r0, [sp, #8]
 800f79a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f79c:	9006      	str	r0, [sp, #24]
 800f79e:	4299      	cmp	r1, r3
 800f7a0:	d000      	beq.n	800f7a4 <sniprintf+0x38>
 800f7a2:	1e4b      	subs	r3, r1, #1
 800f7a4:	9304      	str	r3, [sp, #16]
 800f7a6:	9307      	str	r3, [sp, #28]
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	466a      	mov	r2, sp
 800f7ac:	425b      	negs	r3, r3
 800f7ae:	82d3      	strh	r3, [r2, #22]
 800f7b0:	0028      	movs	r0, r5
 800f7b2:	ab21      	add	r3, sp, #132	@ 0x84
 800f7b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f7b6:	a902      	add	r1, sp, #8
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	f001 fc8d 	bl	80110d8 <_svfiprintf_r>
 800f7be:	1c43      	adds	r3, r0, #1
 800f7c0:	da01      	bge.n	800f7c6 <sniprintf+0x5a>
 800f7c2:	238b      	movs	r3, #139	@ 0x8b
 800f7c4:	602b      	str	r3, [r5, #0]
 800f7c6:	2c00      	cmp	r4, #0
 800f7c8:	d0dc      	beq.n	800f784 <sniprintf+0x18>
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	9b02      	ldr	r3, [sp, #8]
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	e7d8      	b.n	800f784 <sniprintf+0x18>
 800f7d2:	46c0      	nop			@ (mov r8, r8)
 800f7d4:	2000001c 	.word	0x2000001c

0800f7d8 <siprintf>:
 800f7d8:	b40e      	push	{r1, r2, r3}
 800f7da:	b510      	push	{r4, lr}
 800f7dc:	2400      	movs	r4, #0
 800f7de:	490c      	ldr	r1, [pc, #48]	@ (800f810 <siprintf+0x38>)
 800f7e0:	b09d      	sub	sp, #116	@ 0x74
 800f7e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f7e4:	9002      	str	r0, [sp, #8]
 800f7e6:	9006      	str	r0, [sp, #24]
 800f7e8:	9107      	str	r1, [sp, #28]
 800f7ea:	9104      	str	r1, [sp, #16]
 800f7ec:	4809      	ldr	r0, [pc, #36]	@ (800f814 <siprintf+0x3c>)
 800f7ee:	490a      	ldr	r1, [pc, #40]	@ (800f818 <siprintf+0x40>)
 800f7f0:	cb04      	ldmia	r3!, {r2}
 800f7f2:	9105      	str	r1, [sp, #20]
 800f7f4:	6800      	ldr	r0, [r0, #0]
 800f7f6:	a902      	add	r1, sp, #8
 800f7f8:	9301      	str	r3, [sp, #4]
 800f7fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f7fc:	f001 fc6c 	bl	80110d8 <_svfiprintf_r>
 800f800:	9b02      	ldr	r3, [sp, #8]
 800f802:	701c      	strb	r4, [r3, #0]
 800f804:	b01d      	add	sp, #116	@ 0x74
 800f806:	bc10      	pop	{r4}
 800f808:	bc08      	pop	{r3}
 800f80a:	b003      	add	sp, #12
 800f80c:	4718      	bx	r3
 800f80e:	46c0      	nop			@ (mov r8, r8)
 800f810:	7fffffff 	.word	0x7fffffff
 800f814:	2000001c 	.word	0x2000001c
 800f818:	ffff0208 	.word	0xffff0208

0800f81c <__sread>:
 800f81c:	b570      	push	{r4, r5, r6, lr}
 800f81e:	000c      	movs	r4, r1
 800f820:	250e      	movs	r5, #14
 800f822:	5f49      	ldrsh	r1, [r1, r5]
 800f824:	f000 f878 	bl	800f918 <_read_r>
 800f828:	2800      	cmp	r0, #0
 800f82a:	db03      	blt.n	800f834 <__sread+0x18>
 800f82c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f82e:	181b      	adds	r3, r3, r0
 800f830:	6563      	str	r3, [r4, #84]	@ 0x54
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	89a3      	ldrh	r3, [r4, #12]
 800f836:	4a02      	ldr	r2, [pc, #8]	@ (800f840 <__sread+0x24>)
 800f838:	4013      	ands	r3, r2
 800f83a:	81a3      	strh	r3, [r4, #12]
 800f83c:	e7f9      	b.n	800f832 <__sread+0x16>
 800f83e:	46c0      	nop			@ (mov r8, r8)
 800f840:	ffffefff 	.word	0xffffefff

0800f844 <__swrite>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	001f      	movs	r7, r3
 800f848:	898b      	ldrh	r3, [r1, #12]
 800f84a:	0005      	movs	r5, r0
 800f84c:	000c      	movs	r4, r1
 800f84e:	0016      	movs	r6, r2
 800f850:	05db      	lsls	r3, r3, #23
 800f852:	d505      	bpl.n	800f860 <__swrite+0x1c>
 800f854:	230e      	movs	r3, #14
 800f856:	5ec9      	ldrsh	r1, [r1, r3]
 800f858:	2200      	movs	r2, #0
 800f85a:	2302      	movs	r3, #2
 800f85c:	f000 f848 	bl	800f8f0 <_lseek_r>
 800f860:	89a3      	ldrh	r3, [r4, #12]
 800f862:	4a05      	ldr	r2, [pc, #20]	@ (800f878 <__swrite+0x34>)
 800f864:	0028      	movs	r0, r5
 800f866:	4013      	ands	r3, r2
 800f868:	81a3      	strh	r3, [r4, #12]
 800f86a:	0032      	movs	r2, r6
 800f86c:	230e      	movs	r3, #14
 800f86e:	5ee1      	ldrsh	r1, [r4, r3]
 800f870:	003b      	movs	r3, r7
 800f872:	f000 f865 	bl	800f940 <_write_r>
 800f876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f878:	ffffefff 	.word	0xffffefff

0800f87c <__sseek>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	000c      	movs	r4, r1
 800f880:	250e      	movs	r5, #14
 800f882:	5f49      	ldrsh	r1, [r1, r5]
 800f884:	f000 f834 	bl	800f8f0 <_lseek_r>
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	1c42      	adds	r2, r0, #1
 800f88c:	d103      	bne.n	800f896 <__sseek+0x1a>
 800f88e:	4a05      	ldr	r2, [pc, #20]	@ (800f8a4 <__sseek+0x28>)
 800f890:	4013      	ands	r3, r2
 800f892:	81a3      	strh	r3, [r4, #12]
 800f894:	bd70      	pop	{r4, r5, r6, pc}
 800f896:	2280      	movs	r2, #128	@ 0x80
 800f898:	0152      	lsls	r2, r2, #5
 800f89a:	4313      	orrs	r3, r2
 800f89c:	81a3      	strh	r3, [r4, #12]
 800f89e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8a0:	e7f8      	b.n	800f894 <__sseek+0x18>
 800f8a2:	46c0      	nop			@ (mov r8, r8)
 800f8a4:	ffffefff 	.word	0xffffefff

0800f8a8 <__sclose>:
 800f8a8:	b510      	push	{r4, lr}
 800f8aa:	230e      	movs	r3, #14
 800f8ac:	5ec9      	ldrsh	r1, [r1, r3]
 800f8ae:	f000 f80d 	bl	800f8cc <_close_r>
 800f8b2:	bd10      	pop	{r4, pc}

0800f8b4 <memset>:
 800f8b4:	0003      	movs	r3, r0
 800f8b6:	1882      	adds	r2, r0, r2
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d100      	bne.n	800f8be <memset+0xa>
 800f8bc:	4770      	bx	lr
 800f8be:	7019      	strb	r1, [r3, #0]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	e7f9      	b.n	800f8b8 <memset+0x4>

0800f8c4 <_localeconv_r>:
 800f8c4:	4800      	ldr	r0, [pc, #0]	@ (800f8c8 <_localeconv_r+0x4>)
 800f8c6:	4770      	bx	lr
 800f8c8:	2000015c 	.word	0x2000015c

0800f8cc <_close_r>:
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	b570      	push	{r4, r5, r6, lr}
 800f8d0:	4d06      	ldr	r5, [pc, #24]	@ (800f8ec <_close_r+0x20>)
 800f8d2:	0004      	movs	r4, r0
 800f8d4:	0008      	movs	r0, r1
 800f8d6:	602b      	str	r3, [r5, #0]
 800f8d8:	f7f5 ff96 	bl	8005808 <_close>
 800f8dc:	1c43      	adds	r3, r0, #1
 800f8de:	d103      	bne.n	800f8e8 <_close_r+0x1c>
 800f8e0:	682b      	ldr	r3, [r5, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d000      	beq.n	800f8e8 <_close_r+0x1c>
 800f8e6:	6023      	str	r3, [r4, #0]
 800f8e8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ea:	46c0      	nop			@ (mov r8, r8)
 800f8ec:	200008a8 	.word	0x200008a8

0800f8f0 <_lseek_r>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	0004      	movs	r4, r0
 800f8f4:	0008      	movs	r0, r1
 800f8f6:	0011      	movs	r1, r2
 800f8f8:	001a      	movs	r2, r3
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	4d05      	ldr	r5, [pc, #20]	@ (800f914 <_lseek_r+0x24>)
 800f8fe:	602b      	str	r3, [r5, #0]
 800f900:	f7f5 ffa3 	bl	800584a <_lseek>
 800f904:	1c43      	adds	r3, r0, #1
 800f906:	d103      	bne.n	800f910 <_lseek_r+0x20>
 800f908:	682b      	ldr	r3, [r5, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d000      	beq.n	800f910 <_lseek_r+0x20>
 800f90e:	6023      	str	r3, [r4, #0]
 800f910:	bd70      	pop	{r4, r5, r6, pc}
 800f912:	46c0      	nop			@ (mov r8, r8)
 800f914:	200008a8 	.word	0x200008a8

0800f918 <_read_r>:
 800f918:	b570      	push	{r4, r5, r6, lr}
 800f91a:	0004      	movs	r4, r0
 800f91c:	0008      	movs	r0, r1
 800f91e:	0011      	movs	r1, r2
 800f920:	001a      	movs	r2, r3
 800f922:	2300      	movs	r3, #0
 800f924:	4d05      	ldr	r5, [pc, #20]	@ (800f93c <_read_r+0x24>)
 800f926:	602b      	str	r3, [r5, #0]
 800f928:	f7f5 ff35 	bl	8005796 <_read>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d103      	bne.n	800f938 <_read_r+0x20>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d000      	beq.n	800f938 <_read_r+0x20>
 800f936:	6023      	str	r3, [r4, #0]
 800f938:	bd70      	pop	{r4, r5, r6, pc}
 800f93a:	46c0      	nop			@ (mov r8, r8)
 800f93c:	200008a8 	.word	0x200008a8

0800f940 <_write_r>:
 800f940:	b570      	push	{r4, r5, r6, lr}
 800f942:	0004      	movs	r4, r0
 800f944:	0008      	movs	r0, r1
 800f946:	0011      	movs	r1, r2
 800f948:	001a      	movs	r2, r3
 800f94a:	2300      	movs	r3, #0
 800f94c:	4d05      	ldr	r5, [pc, #20]	@ (800f964 <_write_r+0x24>)
 800f94e:	602b      	str	r3, [r5, #0]
 800f950:	f7f5 ff3e 	bl	80057d0 <_write>
 800f954:	1c43      	adds	r3, r0, #1
 800f956:	d103      	bne.n	800f960 <_write_r+0x20>
 800f958:	682b      	ldr	r3, [r5, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d000      	beq.n	800f960 <_write_r+0x20>
 800f95e:	6023      	str	r3, [r4, #0]
 800f960:	bd70      	pop	{r4, r5, r6, pc}
 800f962:	46c0      	nop			@ (mov r8, r8)
 800f964:	200008a8 	.word	0x200008a8

0800f968 <__errno>:
 800f968:	4b01      	ldr	r3, [pc, #4]	@ (800f970 <__errno+0x8>)
 800f96a:	6818      	ldr	r0, [r3, #0]
 800f96c:	4770      	bx	lr
 800f96e:	46c0      	nop			@ (mov r8, r8)
 800f970:	2000001c 	.word	0x2000001c

0800f974 <__libc_init_array>:
 800f974:	b570      	push	{r4, r5, r6, lr}
 800f976:	2600      	movs	r6, #0
 800f978:	4c0c      	ldr	r4, [pc, #48]	@ (800f9ac <__libc_init_array+0x38>)
 800f97a:	4d0d      	ldr	r5, [pc, #52]	@ (800f9b0 <__libc_init_array+0x3c>)
 800f97c:	1b64      	subs	r4, r4, r5
 800f97e:	10a4      	asrs	r4, r4, #2
 800f980:	42a6      	cmp	r6, r4
 800f982:	d109      	bne.n	800f998 <__libc_init_array+0x24>
 800f984:	2600      	movs	r6, #0
 800f986:	f002 fa53 	bl	8011e30 <_init>
 800f98a:	4c0a      	ldr	r4, [pc, #40]	@ (800f9b4 <__libc_init_array+0x40>)
 800f98c:	4d0a      	ldr	r5, [pc, #40]	@ (800f9b8 <__libc_init_array+0x44>)
 800f98e:	1b64      	subs	r4, r4, r5
 800f990:	10a4      	asrs	r4, r4, #2
 800f992:	42a6      	cmp	r6, r4
 800f994:	d105      	bne.n	800f9a2 <__libc_init_array+0x2e>
 800f996:	bd70      	pop	{r4, r5, r6, pc}
 800f998:	00b3      	lsls	r3, r6, #2
 800f99a:	58eb      	ldr	r3, [r5, r3]
 800f99c:	4798      	blx	r3
 800f99e:	3601      	adds	r6, #1
 800f9a0:	e7ee      	b.n	800f980 <__libc_init_array+0xc>
 800f9a2:	00b3      	lsls	r3, r6, #2
 800f9a4:	58eb      	ldr	r3, [r5, r3]
 800f9a6:	4798      	blx	r3
 800f9a8:	3601      	adds	r6, #1
 800f9aa:	e7f2      	b.n	800f992 <__libc_init_array+0x1e>
 800f9ac:	08012534 	.word	0x08012534
 800f9b0:	08012534 	.word	0x08012534
 800f9b4:	08012538 	.word	0x08012538
 800f9b8:	08012534 	.word	0x08012534

0800f9bc <__retarget_lock_init_recursive>:
 800f9bc:	4770      	bx	lr

0800f9be <__retarget_lock_acquire_recursive>:
 800f9be:	4770      	bx	lr

0800f9c0 <__retarget_lock_release_recursive>:
 800f9c0:	4770      	bx	lr

0800f9c2 <memchr>:
 800f9c2:	b2c9      	uxtb	r1, r1
 800f9c4:	1882      	adds	r2, r0, r2
 800f9c6:	4290      	cmp	r0, r2
 800f9c8:	d101      	bne.n	800f9ce <memchr+0xc>
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	4770      	bx	lr
 800f9ce:	7803      	ldrb	r3, [r0, #0]
 800f9d0:	428b      	cmp	r3, r1
 800f9d2:	d0fb      	beq.n	800f9cc <memchr+0xa>
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	e7f6      	b.n	800f9c6 <memchr+0x4>

0800f9d8 <memcpy>:
 800f9d8:	2300      	movs	r3, #0
 800f9da:	b510      	push	{r4, lr}
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d100      	bne.n	800f9e2 <memcpy+0xa>
 800f9e0:	bd10      	pop	{r4, pc}
 800f9e2:	5ccc      	ldrb	r4, [r1, r3]
 800f9e4:	54c4      	strb	r4, [r0, r3]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	e7f8      	b.n	800f9dc <memcpy+0x4>

0800f9ea <quorem>:
 800f9ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ec:	6903      	ldr	r3, [r0, #16]
 800f9ee:	690c      	ldr	r4, [r1, #16]
 800f9f0:	b089      	sub	sp, #36	@ 0x24
 800f9f2:	9003      	str	r0, [sp, #12]
 800f9f4:	9106      	str	r1, [sp, #24]
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	42a3      	cmp	r3, r4
 800f9fa:	db63      	blt.n	800fac4 <quorem+0xda>
 800f9fc:	000b      	movs	r3, r1
 800f9fe:	3c01      	subs	r4, #1
 800fa00:	3314      	adds	r3, #20
 800fa02:	00a5      	lsls	r5, r4, #2
 800fa04:	9304      	str	r3, [sp, #16]
 800fa06:	195b      	adds	r3, r3, r5
 800fa08:	9305      	str	r3, [sp, #20]
 800fa0a:	9b03      	ldr	r3, [sp, #12]
 800fa0c:	3314      	adds	r3, #20
 800fa0e:	9301      	str	r3, [sp, #4]
 800fa10:	195d      	adds	r5, r3, r5
 800fa12:	9b05      	ldr	r3, [sp, #20]
 800fa14:	682f      	ldr	r7, [r5, #0]
 800fa16:	681e      	ldr	r6, [r3, #0]
 800fa18:	0038      	movs	r0, r7
 800fa1a:	3601      	adds	r6, #1
 800fa1c:	0031      	movs	r1, r6
 800fa1e:	f7f0 fb8f 	bl	8000140 <__udivsi3>
 800fa22:	9002      	str	r0, [sp, #8]
 800fa24:	42b7      	cmp	r7, r6
 800fa26:	d327      	bcc.n	800fa78 <quorem+0x8e>
 800fa28:	9b04      	ldr	r3, [sp, #16]
 800fa2a:	2700      	movs	r7, #0
 800fa2c:	469c      	mov	ip, r3
 800fa2e:	9e01      	ldr	r6, [sp, #4]
 800fa30:	9707      	str	r7, [sp, #28]
 800fa32:	4662      	mov	r2, ip
 800fa34:	ca08      	ldmia	r2!, {r3}
 800fa36:	6830      	ldr	r0, [r6, #0]
 800fa38:	4694      	mov	ip, r2
 800fa3a:	9a02      	ldr	r2, [sp, #8]
 800fa3c:	b299      	uxth	r1, r3
 800fa3e:	4351      	muls	r1, r2
 800fa40:	0c1b      	lsrs	r3, r3, #16
 800fa42:	4353      	muls	r3, r2
 800fa44:	19c9      	adds	r1, r1, r7
 800fa46:	0c0a      	lsrs	r2, r1, #16
 800fa48:	189b      	adds	r3, r3, r2
 800fa4a:	b289      	uxth	r1, r1
 800fa4c:	b282      	uxth	r2, r0
 800fa4e:	1a52      	subs	r2, r2, r1
 800fa50:	9907      	ldr	r1, [sp, #28]
 800fa52:	0c1f      	lsrs	r7, r3, #16
 800fa54:	1852      	adds	r2, r2, r1
 800fa56:	0c00      	lsrs	r0, r0, #16
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	1411      	asrs	r1, r2, #16
 800fa5c:	1ac3      	subs	r3, r0, r3
 800fa5e:	185b      	adds	r3, r3, r1
 800fa60:	1419      	asrs	r1, r3, #16
 800fa62:	b292      	uxth	r2, r2
 800fa64:	041b      	lsls	r3, r3, #16
 800fa66:	431a      	orrs	r2, r3
 800fa68:	9b05      	ldr	r3, [sp, #20]
 800fa6a:	9107      	str	r1, [sp, #28]
 800fa6c:	c604      	stmia	r6!, {r2}
 800fa6e:	4563      	cmp	r3, ip
 800fa70:	d2df      	bcs.n	800fa32 <quorem+0x48>
 800fa72:	682b      	ldr	r3, [r5, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d02b      	beq.n	800fad0 <quorem+0xe6>
 800fa78:	9906      	ldr	r1, [sp, #24]
 800fa7a:	9803      	ldr	r0, [sp, #12]
 800fa7c:	f001 f9b6 	bl	8010dec <__mcmp>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	db1e      	blt.n	800fac2 <quorem+0xd8>
 800fa84:	2600      	movs	r6, #0
 800fa86:	9d01      	ldr	r5, [sp, #4]
 800fa88:	9904      	ldr	r1, [sp, #16]
 800fa8a:	c901      	ldmia	r1!, {r0}
 800fa8c:	682b      	ldr	r3, [r5, #0]
 800fa8e:	b287      	uxth	r7, r0
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	1bd2      	subs	r2, r2, r7
 800fa94:	1992      	adds	r2, r2, r6
 800fa96:	0c00      	lsrs	r0, r0, #16
 800fa98:	0c1b      	lsrs	r3, r3, #16
 800fa9a:	1a1b      	subs	r3, r3, r0
 800fa9c:	1410      	asrs	r0, r2, #16
 800fa9e:	181b      	adds	r3, r3, r0
 800faa0:	141e      	asrs	r6, r3, #16
 800faa2:	b292      	uxth	r2, r2
 800faa4:	041b      	lsls	r3, r3, #16
 800faa6:	431a      	orrs	r2, r3
 800faa8:	9b05      	ldr	r3, [sp, #20]
 800faaa:	c504      	stmia	r5!, {r2}
 800faac:	428b      	cmp	r3, r1
 800faae:	d2ec      	bcs.n	800fa8a <quorem+0xa0>
 800fab0:	9a01      	ldr	r2, [sp, #4]
 800fab2:	00a3      	lsls	r3, r4, #2
 800fab4:	18d3      	adds	r3, r2, r3
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	2a00      	cmp	r2, #0
 800faba:	d014      	beq.n	800fae6 <quorem+0xfc>
 800fabc:	9b02      	ldr	r3, [sp, #8]
 800fabe:	3301      	adds	r3, #1
 800fac0:	9302      	str	r3, [sp, #8]
 800fac2:	9802      	ldr	r0, [sp, #8]
 800fac4:	b009      	add	sp, #36	@ 0x24
 800fac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fac8:	682b      	ldr	r3, [r5, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d104      	bne.n	800fad8 <quorem+0xee>
 800face:	3c01      	subs	r4, #1
 800fad0:	9b01      	ldr	r3, [sp, #4]
 800fad2:	3d04      	subs	r5, #4
 800fad4:	42ab      	cmp	r3, r5
 800fad6:	d3f7      	bcc.n	800fac8 <quorem+0xde>
 800fad8:	9b03      	ldr	r3, [sp, #12]
 800fada:	611c      	str	r4, [r3, #16]
 800fadc:	e7cc      	b.n	800fa78 <quorem+0x8e>
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	2a00      	cmp	r2, #0
 800fae2:	d104      	bne.n	800faee <quorem+0x104>
 800fae4:	3c01      	subs	r4, #1
 800fae6:	9a01      	ldr	r2, [sp, #4]
 800fae8:	3b04      	subs	r3, #4
 800faea:	429a      	cmp	r2, r3
 800faec:	d3f7      	bcc.n	800fade <quorem+0xf4>
 800faee:	9b03      	ldr	r3, [sp, #12]
 800faf0:	611c      	str	r4, [r3, #16]
 800faf2:	e7e3      	b.n	800fabc <quorem+0xd2>

0800faf4 <_dtoa_r>:
 800faf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faf6:	0014      	movs	r4, r2
 800faf8:	001d      	movs	r5, r3
 800fafa:	69c6      	ldr	r6, [r0, #28]
 800fafc:	b09d      	sub	sp, #116	@ 0x74
 800fafe:	940a      	str	r4, [sp, #40]	@ 0x28
 800fb00:	950b      	str	r5, [sp, #44]	@ 0x2c
 800fb02:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800fb04:	9003      	str	r0, [sp, #12]
 800fb06:	2e00      	cmp	r6, #0
 800fb08:	d10f      	bne.n	800fb2a <_dtoa_r+0x36>
 800fb0a:	2010      	movs	r0, #16
 800fb0c:	f000 fe2c 	bl	8010768 <malloc>
 800fb10:	9b03      	ldr	r3, [sp, #12]
 800fb12:	1e02      	subs	r2, r0, #0
 800fb14:	61d8      	str	r0, [r3, #28]
 800fb16:	d104      	bne.n	800fb22 <_dtoa_r+0x2e>
 800fb18:	21ef      	movs	r1, #239	@ 0xef
 800fb1a:	4bc7      	ldr	r3, [pc, #796]	@ (800fe38 <_dtoa_r+0x344>)
 800fb1c:	48c7      	ldr	r0, [pc, #796]	@ (800fe3c <_dtoa_r+0x348>)
 800fb1e:	f001 fcaf 	bl	8011480 <__assert_func>
 800fb22:	6046      	str	r6, [r0, #4]
 800fb24:	6086      	str	r6, [r0, #8]
 800fb26:	6006      	str	r6, [r0, #0]
 800fb28:	60c6      	str	r6, [r0, #12]
 800fb2a:	9b03      	ldr	r3, [sp, #12]
 800fb2c:	69db      	ldr	r3, [r3, #28]
 800fb2e:	6819      	ldr	r1, [r3, #0]
 800fb30:	2900      	cmp	r1, #0
 800fb32:	d00b      	beq.n	800fb4c <_dtoa_r+0x58>
 800fb34:	685a      	ldr	r2, [r3, #4]
 800fb36:	2301      	movs	r3, #1
 800fb38:	4093      	lsls	r3, r2
 800fb3a:	604a      	str	r2, [r1, #4]
 800fb3c:	608b      	str	r3, [r1, #8]
 800fb3e:	9803      	ldr	r0, [sp, #12]
 800fb40:	f000 ff12 	bl	8010968 <_Bfree>
 800fb44:	2200      	movs	r2, #0
 800fb46:	9b03      	ldr	r3, [sp, #12]
 800fb48:	69db      	ldr	r3, [r3, #28]
 800fb4a:	601a      	str	r2, [r3, #0]
 800fb4c:	2d00      	cmp	r5, #0
 800fb4e:	da1e      	bge.n	800fb8e <_dtoa_r+0x9a>
 800fb50:	2301      	movs	r3, #1
 800fb52:	603b      	str	r3, [r7, #0]
 800fb54:	006b      	lsls	r3, r5, #1
 800fb56:	085b      	lsrs	r3, r3, #1
 800fb58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb5a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fb5c:	4bb8      	ldr	r3, [pc, #736]	@ (800fe40 <_dtoa_r+0x34c>)
 800fb5e:	4ab8      	ldr	r2, [pc, #736]	@ (800fe40 <_dtoa_r+0x34c>)
 800fb60:	403b      	ands	r3, r7
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d116      	bne.n	800fb94 <_dtoa_r+0xa0>
 800fb66:	4bb7      	ldr	r3, [pc, #732]	@ (800fe44 <_dtoa_r+0x350>)
 800fb68:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	033b      	lsls	r3, r7, #12
 800fb6e:	0b1b      	lsrs	r3, r3, #12
 800fb70:	4323      	orrs	r3, r4
 800fb72:	d101      	bne.n	800fb78 <_dtoa_r+0x84>
 800fb74:	f000 fd80 	bl	8010678 <_dtoa_r+0xb84>
 800fb78:	4bb3      	ldr	r3, [pc, #716]	@ (800fe48 <_dtoa_r+0x354>)
 800fb7a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fb7c:	9308      	str	r3, [sp, #32]
 800fb7e:	2a00      	cmp	r2, #0
 800fb80:	d002      	beq.n	800fb88 <_dtoa_r+0x94>
 800fb82:	4bb2      	ldr	r3, [pc, #712]	@ (800fe4c <_dtoa_r+0x358>)
 800fb84:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	9808      	ldr	r0, [sp, #32]
 800fb8a:	b01d      	add	sp, #116	@ 0x74
 800fb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb8e:	2300      	movs	r3, #0
 800fb90:	603b      	str	r3, [r7, #0]
 800fb92:	e7e2      	b.n	800fb5a <_dtoa_r+0x66>
 800fb94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb98:	9212      	str	r2, [sp, #72]	@ 0x48
 800fb9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb9c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fb9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fba0:	2200      	movs	r2, #0
 800fba2:	2300      	movs	r3, #0
 800fba4:	f7f0 fc52 	bl	800044c <__aeabi_dcmpeq>
 800fba8:	1e06      	subs	r6, r0, #0
 800fbaa:	d00b      	beq.n	800fbc4 <_dtoa_r+0xd0>
 800fbac:	2301      	movs	r3, #1
 800fbae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fbb0:	6013      	str	r3, [r2, #0]
 800fbb2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d002      	beq.n	800fbbe <_dtoa_r+0xca>
 800fbb8:	4ba5      	ldr	r3, [pc, #660]	@ (800fe50 <_dtoa_r+0x35c>)
 800fbba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fbbc:	6013      	str	r3, [r2, #0]
 800fbbe:	4ba5      	ldr	r3, [pc, #660]	@ (800fe54 <_dtoa_r+0x360>)
 800fbc0:	9308      	str	r3, [sp, #32]
 800fbc2:	e7e1      	b.n	800fb88 <_dtoa_r+0x94>
 800fbc4:	ab1a      	add	r3, sp, #104	@ 0x68
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	9803      	ldr	r0, [sp, #12]
 800fbce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fbd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fbd2:	f001 f9c1 	bl	8010f58 <__d2b>
 800fbd6:	007a      	lsls	r2, r7, #1
 800fbd8:	9005      	str	r0, [sp, #20]
 800fbda:	0d52      	lsrs	r2, r2, #21
 800fbdc:	d100      	bne.n	800fbe0 <_dtoa_r+0xec>
 800fbde:	e07b      	b.n	800fcd8 <_dtoa_r+0x1e4>
 800fbe0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fbe2:	9618      	str	r6, [sp, #96]	@ 0x60
 800fbe4:	0319      	lsls	r1, r3, #12
 800fbe6:	4b9c      	ldr	r3, [pc, #624]	@ (800fe58 <_dtoa_r+0x364>)
 800fbe8:	0b09      	lsrs	r1, r1, #12
 800fbea:	430b      	orrs	r3, r1
 800fbec:	499b      	ldr	r1, [pc, #620]	@ (800fe5c <_dtoa_r+0x368>)
 800fbee:	1857      	adds	r7, r2, r1
 800fbf0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fbf2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fbf4:	0019      	movs	r1, r3
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	4b99      	ldr	r3, [pc, #612]	@ (800fe60 <_dtoa_r+0x36c>)
 800fbfa:	f7f3 f8c9 	bl	8002d90 <__aeabi_dsub>
 800fbfe:	4a99      	ldr	r2, [pc, #612]	@ (800fe64 <_dtoa_r+0x370>)
 800fc00:	4b99      	ldr	r3, [pc, #612]	@ (800fe68 <_dtoa_r+0x374>)
 800fc02:	f7f2 fddf 	bl	80027c4 <__aeabi_dmul>
 800fc06:	4a99      	ldr	r2, [pc, #612]	@ (800fe6c <_dtoa_r+0x378>)
 800fc08:	4b99      	ldr	r3, [pc, #612]	@ (800fe70 <_dtoa_r+0x37c>)
 800fc0a:	f7f1 fddb 	bl	80017c4 <__aeabi_dadd>
 800fc0e:	0004      	movs	r4, r0
 800fc10:	0038      	movs	r0, r7
 800fc12:	000d      	movs	r5, r1
 800fc14:	f7f3 fd24 	bl	8003660 <__aeabi_i2d>
 800fc18:	4a96      	ldr	r2, [pc, #600]	@ (800fe74 <_dtoa_r+0x380>)
 800fc1a:	4b97      	ldr	r3, [pc, #604]	@ (800fe78 <_dtoa_r+0x384>)
 800fc1c:	f7f2 fdd2 	bl	80027c4 <__aeabi_dmul>
 800fc20:	0002      	movs	r2, r0
 800fc22:	000b      	movs	r3, r1
 800fc24:	0020      	movs	r0, r4
 800fc26:	0029      	movs	r1, r5
 800fc28:	f7f1 fdcc 	bl	80017c4 <__aeabi_dadd>
 800fc2c:	0004      	movs	r4, r0
 800fc2e:	000d      	movs	r5, r1
 800fc30:	f7f3 fcda 	bl	80035e8 <__aeabi_d2iz>
 800fc34:	2200      	movs	r2, #0
 800fc36:	9004      	str	r0, [sp, #16]
 800fc38:	2300      	movs	r3, #0
 800fc3a:	0020      	movs	r0, r4
 800fc3c:	0029      	movs	r1, r5
 800fc3e:	f7f0 fc0b 	bl	8000458 <__aeabi_dcmplt>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d00b      	beq.n	800fc5e <_dtoa_r+0x16a>
 800fc46:	9804      	ldr	r0, [sp, #16]
 800fc48:	f7f3 fd0a 	bl	8003660 <__aeabi_i2d>
 800fc4c:	002b      	movs	r3, r5
 800fc4e:	0022      	movs	r2, r4
 800fc50:	f7f0 fbfc 	bl	800044c <__aeabi_dcmpeq>
 800fc54:	4243      	negs	r3, r0
 800fc56:	4158      	adcs	r0, r3
 800fc58:	9b04      	ldr	r3, [sp, #16]
 800fc5a:	1a1b      	subs	r3, r3, r0
 800fc5c:	9304      	str	r3, [sp, #16]
 800fc5e:	2301      	movs	r3, #1
 800fc60:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc62:	9b04      	ldr	r3, [sp, #16]
 800fc64:	2b16      	cmp	r3, #22
 800fc66:	d810      	bhi.n	800fc8a <_dtoa_r+0x196>
 800fc68:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fc6a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fc6c:	9a04      	ldr	r2, [sp, #16]
 800fc6e:	4b83      	ldr	r3, [pc, #524]	@ (800fe7c <_dtoa_r+0x388>)
 800fc70:	00d2      	lsls	r2, r2, #3
 800fc72:	189b      	adds	r3, r3, r2
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	f7f0 fbee 	bl	8000458 <__aeabi_dcmplt>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d047      	beq.n	800fd10 <_dtoa_r+0x21c>
 800fc80:	9b04      	ldr	r3, [sp, #16]
 800fc82:	3b01      	subs	r3, #1
 800fc84:	9304      	str	r3, [sp, #16]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800fc8e:	9206      	str	r2, [sp, #24]
 800fc90:	1bdb      	subs	r3, r3, r7
 800fc92:	1e5a      	subs	r2, r3, #1
 800fc94:	d53e      	bpl.n	800fd14 <_dtoa_r+0x220>
 800fc96:	2201      	movs	r2, #1
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	9306      	str	r3, [sp, #24]
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800fca0:	9b04      	ldr	r3, [sp, #16]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	db38      	blt.n	800fd18 <_dtoa_r+0x224>
 800fca6:	9a04      	ldr	r2, [sp, #16]
 800fca8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcaa:	4694      	mov	ip, r2
 800fcac:	4463      	add	r3, ip
 800fcae:	930d      	str	r3, [sp, #52]	@ 0x34
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	9214      	str	r2, [sp, #80]	@ 0x50
 800fcb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fcb6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fcb8:	2401      	movs	r4, #1
 800fcba:	2b09      	cmp	r3, #9
 800fcbc:	d862      	bhi.n	800fd84 <_dtoa_r+0x290>
 800fcbe:	2b05      	cmp	r3, #5
 800fcc0:	dd02      	ble.n	800fcc8 <_dtoa_r+0x1d4>
 800fcc2:	2400      	movs	r4, #0
 800fcc4:	3b04      	subs	r3, #4
 800fcc6:	9322      	str	r3, [sp, #136]	@ 0x88
 800fcc8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fcca:	1e98      	subs	r0, r3, #2
 800fccc:	2803      	cmp	r0, #3
 800fcce:	d863      	bhi.n	800fd98 <_dtoa_r+0x2a4>
 800fcd0:	f7f0 fa22 	bl	8000118 <__gnu_thumb1_case_uqi>
 800fcd4:	2b385654 	.word	0x2b385654
 800fcd8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fcda:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800fcdc:	18f6      	adds	r6, r6, r3
 800fcde:	4b68      	ldr	r3, [pc, #416]	@ (800fe80 <_dtoa_r+0x38c>)
 800fce0:	18f2      	adds	r2, r6, r3
 800fce2:	2a20      	cmp	r2, #32
 800fce4:	dd0f      	ble.n	800fd06 <_dtoa_r+0x212>
 800fce6:	2340      	movs	r3, #64	@ 0x40
 800fce8:	1a9b      	subs	r3, r3, r2
 800fcea:	409f      	lsls	r7, r3
 800fcec:	4b65      	ldr	r3, [pc, #404]	@ (800fe84 <_dtoa_r+0x390>)
 800fcee:	0038      	movs	r0, r7
 800fcf0:	18f3      	adds	r3, r6, r3
 800fcf2:	40dc      	lsrs	r4, r3
 800fcf4:	4320      	orrs	r0, r4
 800fcf6:	f7f3 fce1 	bl	80036bc <__aeabi_ui2d>
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	4b62      	ldr	r3, [pc, #392]	@ (800fe88 <_dtoa_r+0x394>)
 800fcfe:	1e77      	subs	r7, r6, #1
 800fd00:	18cb      	adds	r3, r1, r3
 800fd02:	9218      	str	r2, [sp, #96]	@ 0x60
 800fd04:	e776      	b.n	800fbf4 <_dtoa_r+0x100>
 800fd06:	2320      	movs	r3, #32
 800fd08:	0020      	movs	r0, r4
 800fd0a:	1a9b      	subs	r3, r3, r2
 800fd0c:	4098      	lsls	r0, r3
 800fd0e:	e7f2      	b.n	800fcf6 <_dtoa_r+0x202>
 800fd10:	9015      	str	r0, [sp, #84]	@ 0x54
 800fd12:	e7ba      	b.n	800fc8a <_dtoa_r+0x196>
 800fd14:	920d      	str	r2, [sp, #52]	@ 0x34
 800fd16:	e7c3      	b.n	800fca0 <_dtoa_r+0x1ac>
 800fd18:	9b06      	ldr	r3, [sp, #24]
 800fd1a:	9a04      	ldr	r2, [sp, #16]
 800fd1c:	1a9b      	subs	r3, r3, r2
 800fd1e:	9306      	str	r3, [sp, #24]
 800fd20:	4253      	negs	r3, r2
 800fd22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd24:	2300      	movs	r3, #0
 800fd26:	9314      	str	r3, [sp, #80]	@ 0x50
 800fd28:	e7c5      	b.n	800fcb6 <_dtoa_r+0x1c2>
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd30:	4694      	mov	ip, r2
 800fd32:	9b04      	ldr	r3, [sp, #16]
 800fd34:	4463      	add	r3, ip
 800fd36:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd38:	3301      	adds	r3, #1
 800fd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	dc08      	bgt.n	800fd52 <_dtoa_r+0x25e>
 800fd40:	2301      	movs	r3, #1
 800fd42:	e006      	b.n	800fd52 <_dtoa_r+0x25e>
 800fd44:	2301      	movs	r3, #1
 800fd46:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd48:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	dd28      	ble.n	800fda0 <_dtoa_r+0x2ac>
 800fd4e:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd50:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd52:	9a03      	ldr	r2, [sp, #12]
 800fd54:	2100      	movs	r1, #0
 800fd56:	69d0      	ldr	r0, [r2, #28]
 800fd58:	2204      	movs	r2, #4
 800fd5a:	0015      	movs	r5, r2
 800fd5c:	3514      	adds	r5, #20
 800fd5e:	429d      	cmp	r5, r3
 800fd60:	d923      	bls.n	800fdaa <_dtoa_r+0x2b6>
 800fd62:	6041      	str	r1, [r0, #4]
 800fd64:	9803      	ldr	r0, [sp, #12]
 800fd66:	f000 fdbb 	bl	80108e0 <_Balloc>
 800fd6a:	9008      	str	r0, [sp, #32]
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d11f      	bne.n	800fdb0 <_dtoa_r+0x2bc>
 800fd70:	21b0      	movs	r1, #176	@ 0xb0
 800fd72:	4b46      	ldr	r3, [pc, #280]	@ (800fe8c <_dtoa_r+0x398>)
 800fd74:	4831      	ldr	r0, [pc, #196]	@ (800fe3c <_dtoa_r+0x348>)
 800fd76:	9a08      	ldr	r2, [sp, #32]
 800fd78:	31ff      	adds	r1, #255	@ 0xff
 800fd7a:	e6d0      	b.n	800fb1e <_dtoa_r+0x2a>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	e7e2      	b.n	800fd46 <_dtoa_r+0x252>
 800fd80:	2300      	movs	r3, #0
 800fd82:	e7d3      	b.n	800fd2c <_dtoa_r+0x238>
 800fd84:	2300      	movs	r3, #0
 800fd86:	9410      	str	r4, [sp, #64]	@ 0x40
 800fd88:	9322      	str	r3, [sp, #136]	@ 0x88
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd90:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd92:	3313      	adds	r3, #19
 800fd94:	9223      	str	r2, [sp, #140]	@ 0x8c
 800fd96:	e7dc      	b.n	800fd52 <_dtoa_r+0x25e>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd9c:	3b02      	subs	r3, #2
 800fd9e:	e7f5      	b.n	800fd8c <_dtoa_r+0x298>
 800fda0:	2301      	movs	r3, #1
 800fda2:	001a      	movs	r2, r3
 800fda4:	930e      	str	r3, [sp, #56]	@ 0x38
 800fda6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fda8:	e7f4      	b.n	800fd94 <_dtoa_r+0x2a0>
 800fdaa:	3101      	adds	r1, #1
 800fdac:	0052      	lsls	r2, r2, #1
 800fdae:	e7d4      	b.n	800fd5a <_dtoa_r+0x266>
 800fdb0:	9b03      	ldr	r3, [sp, #12]
 800fdb2:	9a08      	ldr	r2, [sp, #32]
 800fdb4:	69db      	ldr	r3, [r3, #28]
 800fdb6:	601a      	str	r2, [r3, #0]
 800fdb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdba:	2b0e      	cmp	r3, #14
 800fdbc:	d900      	bls.n	800fdc0 <_dtoa_r+0x2cc>
 800fdbe:	e0d6      	b.n	800ff6e <_dtoa_r+0x47a>
 800fdc0:	2c00      	cmp	r4, #0
 800fdc2:	d100      	bne.n	800fdc6 <_dtoa_r+0x2d2>
 800fdc4:	e0d3      	b.n	800ff6e <_dtoa_r+0x47a>
 800fdc6:	9b04      	ldr	r3, [sp, #16]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	dd63      	ble.n	800fe94 <_dtoa_r+0x3a0>
 800fdcc:	210f      	movs	r1, #15
 800fdce:	9a04      	ldr	r2, [sp, #16]
 800fdd0:	4b2a      	ldr	r3, [pc, #168]	@ (800fe7c <_dtoa_r+0x388>)
 800fdd2:	400a      	ands	r2, r1
 800fdd4:	00d2      	lsls	r2, r2, #3
 800fdd6:	189b      	adds	r3, r3, r2
 800fdd8:	681e      	ldr	r6, [r3, #0]
 800fdda:	685f      	ldr	r7, [r3, #4]
 800fddc:	9b04      	ldr	r3, [sp, #16]
 800fdde:	2402      	movs	r4, #2
 800fde0:	111d      	asrs	r5, r3, #4
 800fde2:	05db      	lsls	r3, r3, #23
 800fde4:	d50a      	bpl.n	800fdfc <_dtoa_r+0x308>
 800fde6:	4b2a      	ldr	r3, [pc, #168]	@ (800fe90 <_dtoa_r+0x39c>)
 800fde8:	400d      	ands	r5, r1
 800fdea:	6a1a      	ldr	r2, [r3, #32]
 800fdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fdf0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fdf2:	f7f2 f8ad 	bl	8001f50 <__aeabi_ddiv>
 800fdf6:	900a      	str	r0, [sp, #40]	@ 0x28
 800fdf8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fdfa:	3401      	adds	r4, #1
 800fdfc:	4b24      	ldr	r3, [pc, #144]	@ (800fe90 <_dtoa_r+0x39c>)
 800fdfe:	930c      	str	r3, [sp, #48]	@ 0x30
 800fe00:	2d00      	cmp	r5, #0
 800fe02:	d108      	bne.n	800fe16 <_dtoa_r+0x322>
 800fe04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fe06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe08:	0032      	movs	r2, r6
 800fe0a:	003b      	movs	r3, r7
 800fe0c:	f7f2 f8a0 	bl	8001f50 <__aeabi_ddiv>
 800fe10:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe12:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fe14:	e059      	b.n	800feca <_dtoa_r+0x3d6>
 800fe16:	2301      	movs	r3, #1
 800fe18:	421d      	tst	r5, r3
 800fe1a:	d009      	beq.n	800fe30 <_dtoa_r+0x33c>
 800fe1c:	18e4      	adds	r4, r4, r3
 800fe1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe20:	0030      	movs	r0, r6
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	0039      	movs	r1, r7
 800fe28:	f7f2 fccc 	bl	80027c4 <__aeabi_dmul>
 800fe2c:	0006      	movs	r6, r0
 800fe2e:	000f      	movs	r7, r1
 800fe30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe32:	106d      	asrs	r5, r5, #1
 800fe34:	3308      	adds	r3, #8
 800fe36:	e7e2      	b.n	800fdfe <_dtoa_r+0x30a>
 800fe38:	080121f5 	.word	0x080121f5
 800fe3c:	0801220c 	.word	0x0801220c
 800fe40:	7ff00000 	.word	0x7ff00000
 800fe44:	0000270f 	.word	0x0000270f
 800fe48:	080121f1 	.word	0x080121f1
 800fe4c:	080121f4 	.word	0x080121f4
 800fe50:	080121c5 	.word	0x080121c5
 800fe54:	080121c4 	.word	0x080121c4
 800fe58:	3ff00000 	.word	0x3ff00000
 800fe5c:	fffffc01 	.word	0xfffffc01
 800fe60:	3ff80000 	.word	0x3ff80000
 800fe64:	636f4361 	.word	0x636f4361
 800fe68:	3fd287a7 	.word	0x3fd287a7
 800fe6c:	8b60c8b3 	.word	0x8b60c8b3
 800fe70:	3fc68a28 	.word	0x3fc68a28
 800fe74:	509f79fb 	.word	0x509f79fb
 800fe78:	3fd34413 	.word	0x3fd34413
 800fe7c:	08012360 	.word	0x08012360
 800fe80:	00000432 	.word	0x00000432
 800fe84:	00000412 	.word	0x00000412
 800fe88:	fe100000 	.word	0xfe100000
 800fe8c:	08012264 	.word	0x08012264
 800fe90:	08012338 	.word	0x08012338
 800fe94:	9b04      	ldr	r3, [sp, #16]
 800fe96:	2402      	movs	r4, #2
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d016      	beq.n	800feca <_dtoa_r+0x3d6>
 800fe9c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fe9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fea0:	220f      	movs	r2, #15
 800fea2:	425d      	negs	r5, r3
 800fea4:	402a      	ands	r2, r5
 800fea6:	4bd5      	ldr	r3, [pc, #852]	@ (80101fc <_dtoa_r+0x708>)
 800fea8:	00d2      	lsls	r2, r2, #3
 800feaa:	189b      	adds	r3, r3, r2
 800feac:	681a      	ldr	r2, [r3, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	f7f2 fc88 	bl	80027c4 <__aeabi_dmul>
 800feb4:	2701      	movs	r7, #1
 800feb6:	2300      	movs	r3, #0
 800feb8:	900a      	str	r0, [sp, #40]	@ 0x28
 800feba:	910b      	str	r1, [sp, #44]	@ 0x2c
 800febc:	4ed0      	ldr	r6, [pc, #832]	@ (8010200 <_dtoa_r+0x70c>)
 800febe:	112d      	asrs	r5, r5, #4
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	d000      	beq.n	800fec6 <_dtoa_r+0x3d2>
 800fec4:	e095      	b.n	800fff2 <_dtoa_r+0x4fe>
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1a2      	bne.n	800fe10 <_dtoa_r+0x31c>
 800feca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fecc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fece:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d100      	bne.n	800fed6 <_dtoa_r+0x3e2>
 800fed4:	e098      	b.n	8010008 <_dtoa_r+0x514>
 800fed6:	2200      	movs	r2, #0
 800fed8:	0030      	movs	r0, r6
 800feda:	0039      	movs	r1, r7
 800fedc:	4bc9      	ldr	r3, [pc, #804]	@ (8010204 <_dtoa_r+0x710>)
 800fede:	f7f0 fabb 	bl	8000458 <__aeabi_dcmplt>
 800fee2:	2800      	cmp	r0, #0
 800fee4:	d100      	bne.n	800fee8 <_dtoa_r+0x3f4>
 800fee6:	e08f      	b.n	8010008 <_dtoa_r+0x514>
 800fee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feea:	2b00      	cmp	r3, #0
 800feec:	d100      	bne.n	800fef0 <_dtoa_r+0x3fc>
 800feee:	e08b      	b.n	8010008 <_dtoa_r+0x514>
 800fef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	dd37      	ble.n	800ff66 <_dtoa_r+0x472>
 800fef6:	9b04      	ldr	r3, [sp, #16]
 800fef8:	2200      	movs	r2, #0
 800fefa:	3b01      	subs	r3, #1
 800fefc:	930c      	str	r3, [sp, #48]	@ 0x30
 800fefe:	0030      	movs	r0, r6
 800ff00:	4bc1      	ldr	r3, [pc, #772]	@ (8010208 <_dtoa_r+0x714>)
 800ff02:	0039      	movs	r1, r7
 800ff04:	f7f2 fc5e 	bl	80027c4 <__aeabi_dmul>
 800ff08:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ff0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff0e:	3401      	adds	r4, #1
 800ff10:	0020      	movs	r0, r4
 800ff12:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff14:	f7f3 fba4 	bl	8003660 <__aeabi_i2d>
 800ff18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff1c:	f7f2 fc52 	bl	80027c4 <__aeabi_dmul>
 800ff20:	4bba      	ldr	r3, [pc, #744]	@ (801020c <_dtoa_r+0x718>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	f7f1 fc4e 	bl	80017c4 <__aeabi_dadd>
 800ff28:	4bb9      	ldr	r3, [pc, #740]	@ (8010210 <_dtoa_r+0x71c>)
 800ff2a:	0006      	movs	r6, r0
 800ff2c:	18cf      	adds	r7, r1, r3
 800ff2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d16d      	bne.n	8010010 <_dtoa_r+0x51c>
 800ff34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ff36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff38:	2200      	movs	r2, #0
 800ff3a:	4bb6      	ldr	r3, [pc, #728]	@ (8010214 <_dtoa_r+0x720>)
 800ff3c:	f7f2 ff28 	bl	8002d90 <__aeabi_dsub>
 800ff40:	0032      	movs	r2, r6
 800ff42:	003b      	movs	r3, r7
 800ff44:	0004      	movs	r4, r0
 800ff46:	000d      	movs	r5, r1
 800ff48:	f7f0 fa9a 	bl	8000480 <__aeabi_dcmpgt>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d000      	beq.n	800ff52 <_dtoa_r+0x45e>
 800ff50:	e2b6      	b.n	80104c0 <_dtoa_r+0x9cc>
 800ff52:	2180      	movs	r1, #128	@ 0x80
 800ff54:	0609      	lsls	r1, r1, #24
 800ff56:	187b      	adds	r3, r7, r1
 800ff58:	0032      	movs	r2, r6
 800ff5a:	0020      	movs	r0, r4
 800ff5c:	0029      	movs	r1, r5
 800ff5e:	f7f0 fa7b 	bl	8000458 <__aeabi_dcmplt>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d128      	bne.n	800ffb8 <_dtoa_r+0x4c4>
 800ff66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ff68:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ff6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff6c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ff6e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	da00      	bge.n	800ff76 <_dtoa_r+0x482>
 800ff74:	e174      	b.n	8010260 <_dtoa_r+0x76c>
 800ff76:	9a04      	ldr	r2, [sp, #16]
 800ff78:	2a0e      	cmp	r2, #14
 800ff7a:	dd00      	ble.n	800ff7e <_dtoa_r+0x48a>
 800ff7c:	e170      	b.n	8010260 <_dtoa_r+0x76c>
 800ff7e:	4b9f      	ldr	r3, [pc, #636]	@ (80101fc <_dtoa_r+0x708>)
 800ff80:	00d2      	lsls	r2, r2, #3
 800ff82:	189b      	adds	r3, r3, r2
 800ff84:	685c      	ldr	r4, [r3, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	9306      	str	r3, [sp, #24]
 800ff8a:	9407      	str	r4, [sp, #28]
 800ff8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	db00      	blt.n	800ff94 <_dtoa_r+0x4a0>
 800ff92:	e0e7      	b.n	8010164 <_dtoa_r+0x670>
 800ff94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	dd00      	ble.n	800ff9c <_dtoa_r+0x4a8>
 800ff9a:	e0e3      	b.n	8010164 <_dtoa_r+0x670>
 800ff9c:	d10c      	bne.n	800ffb8 <_dtoa_r+0x4c4>
 800ff9e:	9806      	ldr	r0, [sp, #24]
 800ffa0:	9907      	ldr	r1, [sp, #28]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	4b9b      	ldr	r3, [pc, #620]	@ (8010214 <_dtoa_r+0x720>)
 800ffa6:	f7f2 fc0d 	bl	80027c4 <__aeabi_dmul>
 800ffaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ffac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffae:	f7f0 fa71 	bl	8000494 <__aeabi_dcmpge>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d100      	bne.n	800ffb8 <_dtoa_r+0x4c4>
 800ffb6:	e286      	b.n	80104c6 <_dtoa_r+0x9d2>
 800ffb8:	2600      	movs	r6, #0
 800ffba:	0037      	movs	r7, r6
 800ffbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ffbe:	9c08      	ldr	r4, [sp, #32]
 800ffc0:	43db      	mvns	r3, r3
 800ffc2:	930c      	str	r3, [sp, #48]	@ 0x30
 800ffc4:	9704      	str	r7, [sp, #16]
 800ffc6:	2700      	movs	r7, #0
 800ffc8:	0031      	movs	r1, r6
 800ffca:	9803      	ldr	r0, [sp, #12]
 800ffcc:	f000 fccc 	bl	8010968 <_Bfree>
 800ffd0:	9b04      	ldr	r3, [sp, #16]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d100      	bne.n	800ffd8 <_dtoa_r+0x4e4>
 800ffd6:	e0bb      	b.n	8010150 <_dtoa_r+0x65c>
 800ffd8:	2f00      	cmp	r7, #0
 800ffda:	d005      	beq.n	800ffe8 <_dtoa_r+0x4f4>
 800ffdc:	429f      	cmp	r7, r3
 800ffde:	d003      	beq.n	800ffe8 <_dtoa_r+0x4f4>
 800ffe0:	0039      	movs	r1, r7
 800ffe2:	9803      	ldr	r0, [sp, #12]
 800ffe4:	f000 fcc0 	bl	8010968 <_Bfree>
 800ffe8:	9904      	ldr	r1, [sp, #16]
 800ffea:	9803      	ldr	r0, [sp, #12]
 800ffec:	f000 fcbc 	bl	8010968 <_Bfree>
 800fff0:	e0ae      	b.n	8010150 <_dtoa_r+0x65c>
 800fff2:	423d      	tst	r5, r7
 800fff4:	d005      	beq.n	8010002 <_dtoa_r+0x50e>
 800fff6:	6832      	ldr	r2, [r6, #0]
 800fff8:	6873      	ldr	r3, [r6, #4]
 800fffa:	f7f2 fbe3 	bl	80027c4 <__aeabi_dmul>
 800fffe:	003b      	movs	r3, r7
 8010000:	3401      	adds	r4, #1
 8010002:	106d      	asrs	r5, r5, #1
 8010004:	3608      	adds	r6, #8
 8010006:	e75b      	b.n	800fec0 <_dtoa_r+0x3cc>
 8010008:	9b04      	ldr	r3, [sp, #16]
 801000a:	930c      	str	r3, [sp, #48]	@ 0x30
 801000c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801000e:	e77f      	b.n	800ff10 <_dtoa_r+0x41c>
 8010010:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010012:	4b7a      	ldr	r3, [pc, #488]	@ (80101fc <_dtoa_r+0x708>)
 8010014:	3a01      	subs	r2, #1
 8010016:	00d2      	lsls	r2, r2, #3
 8010018:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801001a:	189b      	adds	r3, r3, r2
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	2900      	cmp	r1, #0
 8010022:	d04c      	beq.n	80100be <_dtoa_r+0x5ca>
 8010024:	2000      	movs	r0, #0
 8010026:	497c      	ldr	r1, [pc, #496]	@ (8010218 <_dtoa_r+0x724>)
 8010028:	f7f1 ff92 	bl	8001f50 <__aeabi_ddiv>
 801002c:	0032      	movs	r2, r6
 801002e:	003b      	movs	r3, r7
 8010030:	f7f2 feae 	bl	8002d90 <__aeabi_dsub>
 8010034:	9a08      	ldr	r2, [sp, #32]
 8010036:	0006      	movs	r6, r0
 8010038:	4694      	mov	ip, r2
 801003a:	000f      	movs	r7, r1
 801003c:	9b08      	ldr	r3, [sp, #32]
 801003e:	9316      	str	r3, [sp, #88]	@ 0x58
 8010040:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010042:	4463      	add	r3, ip
 8010044:	9311      	str	r3, [sp, #68]	@ 0x44
 8010046:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801004a:	f7f3 facd 	bl	80035e8 <__aeabi_d2iz>
 801004e:	0005      	movs	r5, r0
 8010050:	f7f3 fb06 	bl	8003660 <__aeabi_i2d>
 8010054:	0002      	movs	r2, r0
 8010056:	000b      	movs	r3, r1
 8010058:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801005a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801005c:	f7f2 fe98 	bl	8002d90 <__aeabi_dsub>
 8010060:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010062:	3530      	adds	r5, #48	@ 0x30
 8010064:	1c5c      	adds	r4, r3, #1
 8010066:	701d      	strb	r5, [r3, #0]
 8010068:	0032      	movs	r2, r6
 801006a:	003b      	movs	r3, r7
 801006c:	900a      	str	r0, [sp, #40]	@ 0x28
 801006e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010070:	f7f0 f9f2 	bl	8000458 <__aeabi_dcmplt>
 8010074:	2800      	cmp	r0, #0
 8010076:	d16b      	bne.n	8010150 <_dtoa_r+0x65c>
 8010078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801007a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801007c:	2000      	movs	r0, #0
 801007e:	4961      	ldr	r1, [pc, #388]	@ (8010204 <_dtoa_r+0x710>)
 8010080:	f7f2 fe86 	bl	8002d90 <__aeabi_dsub>
 8010084:	0032      	movs	r2, r6
 8010086:	003b      	movs	r3, r7
 8010088:	f7f0 f9e6 	bl	8000458 <__aeabi_dcmplt>
 801008c:	2800      	cmp	r0, #0
 801008e:	d000      	beq.n	8010092 <_dtoa_r+0x59e>
 8010090:	e0c6      	b.n	8010220 <_dtoa_r+0x72c>
 8010092:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010094:	42a3      	cmp	r3, r4
 8010096:	d100      	bne.n	801009a <_dtoa_r+0x5a6>
 8010098:	e765      	b.n	800ff66 <_dtoa_r+0x472>
 801009a:	2200      	movs	r2, #0
 801009c:	0030      	movs	r0, r6
 801009e:	0039      	movs	r1, r7
 80100a0:	4b59      	ldr	r3, [pc, #356]	@ (8010208 <_dtoa_r+0x714>)
 80100a2:	f7f2 fb8f 	bl	80027c4 <__aeabi_dmul>
 80100a6:	2200      	movs	r2, #0
 80100a8:	0006      	movs	r6, r0
 80100aa:	000f      	movs	r7, r1
 80100ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80100ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80100b0:	4b55      	ldr	r3, [pc, #340]	@ (8010208 <_dtoa_r+0x714>)
 80100b2:	f7f2 fb87 	bl	80027c4 <__aeabi_dmul>
 80100b6:	9416      	str	r4, [sp, #88]	@ 0x58
 80100b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80100ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80100bc:	e7c3      	b.n	8010046 <_dtoa_r+0x552>
 80100be:	0030      	movs	r0, r6
 80100c0:	0039      	movs	r1, r7
 80100c2:	f7f2 fb7f 	bl	80027c4 <__aeabi_dmul>
 80100c6:	9d08      	ldr	r5, [sp, #32]
 80100c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80100ca:	002b      	movs	r3, r5
 80100cc:	4694      	mov	ip, r2
 80100ce:	9016      	str	r0, [sp, #88]	@ 0x58
 80100d0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80100d2:	4463      	add	r3, ip
 80100d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80100d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80100d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80100da:	f7f3 fa85 	bl	80035e8 <__aeabi_d2iz>
 80100de:	0004      	movs	r4, r0
 80100e0:	f7f3 fabe 	bl	8003660 <__aeabi_i2d>
 80100e4:	000b      	movs	r3, r1
 80100e6:	0002      	movs	r2, r0
 80100e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80100ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80100ec:	f7f2 fe50 	bl	8002d90 <__aeabi_dsub>
 80100f0:	3430      	adds	r4, #48	@ 0x30
 80100f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80100f4:	702c      	strb	r4, [r5, #0]
 80100f6:	3501      	adds	r5, #1
 80100f8:	0006      	movs	r6, r0
 80100fa:	000f      	movs	r7, r1
 80100fc:	42ab      	cmp	r3, r5
 80100fe:	d12a      	bne.n	8010156 <_dtoa_r+0x662>
 8010100:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010102:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010104:	9b08      	ldr	r3, [sp, #32]
 8010106:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8010108:	469c      	mov	ip, r3
 801010a:	2200      	movs	r2, #0
 801010c:	4b42      	ldr	r3, [pc, #264]	@ (8010218 <_dtoa_r+0x724>)
 801010e:	4464      	add	r4, ip
 8010110:	f7f1 fb58 	bl	80017c4 <__aeabi_dadd>
 8010114:	0002      	movs	r2, r0
 8010116:	000b      	movs	r3, r1
 8010118:	0030      	movs	r0, r6
 801011a:	0039      	movs	r1, r7
 801011c:	f7f0 f9b0 	bl	8000480 <__aeabi_dcmpgt>
 8010120:	2800      	cmp	r0, #0
 8010122:	d000      	beq.n	8010126 <_dtoa_r+0x632>
 8010124:	e07c      	b.n	8010220 <_dtoa_r+0x72c>
 8010126:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010128:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801012a:	2000      	movs	r0, #0
 801012c:	493a      	ldr	r1, [pc, #232]	@ (8010218 <_dtoa_r+0x724>)
 801012e:	f7f2 fe2f 	bl	8002d90 <__aeabi_dsub>
 8010132:	0002      	movs	r2, r0
 8010134:	000b      	movs	r3, r1
 8010136:	0030      	movs	r0, r6
 8010138:	0039      	movs	r1, r7
 801013a:	f7f0 f98d 	bl	8000458 <__aeabi_dcmplt>
 801013e:	2800      	cmp	r0, #0
 8010140:	d100      	bne.n	8010144 <_dtoa_r+0x650>
 8010142:	e710      	b.n	800ff66 <_dtoa_r+0x472>
 8010144:	0023      	movs	r3, r4
 8010146:	3c01      	subs	r4, #1
 8010148:	7822      	ldrb	r2, [r4, #0]
 801014a:	2a30      	cmp	r2, #48	@ 0x30
 801014c:	d0fa      	beq.n	8010144 <_dtoa_r+0x650>
 801014e:	001c      	movs	r4, r3
 8010150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010152:	9304      	str	r3, [sp, #16]
 8010154:	e042      	b.n	80101dc <_dtoa_r+0x6e8>
 8010156:	2200      	movs	r2, #0
 8010158:	4b2b      	ldr	r3, [pc, #172]	@ (8010208 <_dtoa_r+0x714>)
 801015a:	f7f2 fb33 	bl	80027c4 <__aeabi_dmul>
 801015e:	900a      	str	r0, [sp, #40]	@ 0x28
 8010160:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010162:	e7b8      	b.n	80100d6 <_dtoa_r+0x5e2>
 8010164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010166:	9d08      	ldr	r5, [sp, #32]
 8010168:	3b01      	subs	r3, #1
 801016a:	195b      	adds	r3, r3, r5
 801016c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801016e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010170:	930a      	str	r3, [sp, #40]	@ 0x28
 8010172:	9a06      	ldr	r2, [sp, #24]
 8010174:	9b07      	ldr	r3, [sp, #28]
 8010176:	0030      	movs	r0, r6
 8010178:	0039      	movs	r1, r7
 801017a:	f7f1 fee9 	bl	8001f50 <__aeabi_ddiv>
 801017e:	f7f3 fa33 	bl	80035e8 <__aeabi_d2iz>
 8010182:	9009      	str	r0, [sp, #36]	@ 0x24
 8010184:	f7f3 fa6c 	bl	8003660 <__aeabi_i2d>
 8010188:	9a06      	ldr	r2, [sp, #24]
 801018a:	9b07      	ldr	r3, [sp, #28]
 801018c:	f7f2 fb1a 	bl	80027c4 <__aeabi_dmul>
 8010190:	0002      	movs	r2, r0
 8010192:	000b      	movs	r3, r1
 8010194:	0030      	movs	r0, r6
 8010196:	0039      	movs	r1, r7
 8010198:	f7f2 fdfa 	bl	8002d90 <__aeabi_dsub>
 801019c:	002b      	movs	r3, r5
 801019e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101a0:	3501      	adds	r5, #1
 80101a2:	3230      	adds	r2, #48	@ 0x30
 80101a4:	701a      	strb	r2, [r3, #0]
 80101a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80101a8:	002c      	movs	r4, r5
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d14b      	bne.n	8010246 <_dtoa_r+0x752>
 80101ae:	0002      	movs	r2, r0
 80101b0:	000b      	movs	r3, r1
 80101b2:	f7f1 fb07 	bl	80017c4 <__aeabi_dadd>
 80101b6:	9a06      	ldr	r2, [sp, #24]
 80101b8:	9b07      	ldr	r3, [sp, #28]
 80101ba:	0006      	movs	r6, r0
 80101bc:	000f      	movs	r7, r1
 80101be:	f7f0 f95f 	bl	8000480 <__aeabi_dcmpgt>
 80101c2:	2800      	cmp	r0, #0
 80101c4:	d12a      	bne.n	801021c <_dtoa_r+0x728>
 80101c6:	9a06      	ldr	r2, [sp, #24]
 80101c8:	9b07      	ldr	r3, [sp, #28]
 80101ca:	0030      	movs	r0, r6
 80101cc:	0039      	movs	r1, r7
 80101ce:	f7f0 f93d 	bl	800044c <__aeabi_dcmpeq>
 80101d2:	2800      	cmp	r0, #0
 80101d4:	d002      	beq.n	80101dc <_dtoa_r+0x6e8>
 80101d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101d8:	07dd      	lsls	r5, r3, #31
 80101da:	d41f      	bmi.n	801021c <_dtoa_r+0x728>
 80101dc:	9905      	ldr	r1, [sp, #20]
 80101de:	9803      	ldr	r0, [sp, #12]
 80101e0:	f000 fbc2 	bl	8010968 <_Bfree>
 80101e4:	2300      	movs	r3, #0
 80101e6:	7023      	strb	r3, [r4, #0]
 80101e8:	9b04      	ldr	r3, [sp, #16]
 80101ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80101ec:	3301      	adds	r3, #1
 80101ee:	6013      	str	r3, [r2, #0]
 80101f0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d100      	bne.n	80101f8 <_dtoa_r+0x704>
 80101f6:	e4c7      	b.n	800fb88 <_dtoa_r+0x94>
 80101f8:	601c      	str	r4, [r3, #0]
 80101fa:	e4c5      	b.n	800fb88 <_dtoa_r+0x94>
 80101fc:	08012360 	.word	0x08012360
 8010200:	08012338 	.word	0x08012338
 8010204:	3ff00000 	.word	0x3ff00000
 8010208:	40240000 	.word	0x40240000
 801020c:	401c0000 	.word	0x401c0000
 8010210:	fcc00000 	.word	0xfcc00000
 8010214:	40140000 	.word	0x40140000
 8010218:	3fe00000 	.word	0x3fe00000
 801021c:	9b04      	ldr	r3, [sp, #16]
 801021e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010220:	0023      	movs	r3, r4
 8010222:	001c      	movs	r4, r3
 8010224:	3b01      	subs	r3, #1
 8010226:	781a      	ldrb	r2, [r3, #0]
 8010228:	2a39      	cmp	r2, #57	@ 0x39
 801022a:	d108      	bne.n	801023e <_dtoa_r+0x74a>
 801022c:	9a08      	ldr	r2, [sp, #32]
 801022e:	429a      	cmp	r2, r3
 8010230:	d1f7      	bne.n	8010222 <_dtoa_r+0x72e>
 8010232:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010234:	9908      	ldr	r1, [sp, #32]
 8010236:	3201      	adds	r2, #1
 8010238:	920c      	str	r2, [sp, #48]	@ 0x30
 801023a:	2230      	movs	r2, #48	@ 0x30
 801023c:	700a      	strb	r2, [r1, #0]
 801023e:	781a      	ldrb	r2, [r3, #0]
 8010240:	3201      	adds	r2, #1
 8010242:	701a      	strb	r2, [r3, #0]
 8010244:	e784      	b.n	8010150 <_dtoa_r+0x65c>
 8010246:	2200      	movs	r2, #0
 8010248:	4bc6      	ldr	r3, [pc, #792]	@ (8010564 <_dtoa_r+0xa70>)
 801024a:	f7f2 fabb 	bl	80027c4 <__aeabi_dmul>
 801024e:	2200      	movs	r2, #0
 8010250:	2300      	movs	r3, #0
 8010252:	0006      	movs	r6, r0
 8010254:	000f      	movs	r7, r1
 8010256:	f7f0 f8f9 	bl	800044c <__aeabi_dcmpeq>
 801025a:	2800      	cmp	r0, #0
 801025c:	d089      	beq.n	8010172 <_dtoa_r+0x67e>
 801025e:	e7bd      	b.n	80101dc <_dtoa_r+0x6e8>
 8010260:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010262:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010264:	9c06      	ldr	r4, [sp, #24]
 8010266:	2f00      	cmp	r7, #0
 8010268:	d014      	beq.n	8010294 <_dtoa_r+0x7a0>
 801026a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801026c:	2a01      	cmp	r2, #1
 801026e:	dd00      	ble.n	8010272 <_dtoa_r+0x77e>
 8010270:	e0e4      	b.n	801043c <_dtoa_r+0x948>
 8010272:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010274:	2a00      	cmp	r2, #0
 8010276:	d100      	bne.n	801027a <_dtoa_r+0x786>
 8010278:	e0da      	b.n	8010430 <_dtoa_r+0x93c>
 801027a:	4abb      	ldr	r2, [pc, #748]	@ (8010568 <_dtoa_r+0xa74>)
 801027c:	189b      	adds	r3, r3, r2
 801027e:	9a06      	ldr	r2, [sp, #24]
 8010280:	2101      	movs	r1, #1
 8010282:	18d2      	adds	r2, r2, r3
 8010284:	9206      	str	r2, [sp, #24]
 8010286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010288:	9803      	ldr	r0, [sp, #12]
 801028a:	18d3      	adds	r3, r2, r3
 801028c:	930d      	str	r3, [sp, #52]	@ 0x34
 801028e:	f000 fc23 	bl	8010ad8 <__i2b>
 8010292:	0007      	movs	r7, r0
 8010294:	2c00      	cmp	r4, #0
 8010296:	d00e      	beq.n	80102b6 <_dtoa_r+0x7c2>
 8010298:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801029a:	2b00      	cmp	r3, #0
 801029c:	dd0b      	ble.n	80102b6 <_dtoa_r+0x7c2>
 801029e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80102a0:	0023      	movs	r3, r4
 80102a2:	4294      	cmp	r4, r2
 80102a4:	dd00      	ble.n	80102a8 <_dtoa_r+0x7b4>
 80102a6:	0013      	movs	r3, r2
 80102a8:	9a06      	ldr	r2, [sp, #24]
 80102aa:	1ae4      	subs	r4, r4, r3
 80102ac:	1ad2      	subs	r2, r2, r3
 80102ae:	9206      	str	r2, [sp, #24]
 80102b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80102b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d021      	beq.n	8010300 <_dtoa_r+0x80c>
 80102bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d100      	bne.n	80102c4 <_dtoa_r+0x7d0>
 80102c2:	e0d3      	b.n	801046c <_dtoa_r+0x978>
 80102c4:	9e05      	ldr	r6, [sp, #20]
 80102c6:	2d00      	cmp	r5, #0
 80102c8:	d014      	beq.n	80102f4 <_dtoa_r+0x800>
 80102ca:	0039      	movs	r1, r7
 80102cc:	002a      	movs	r2, r5
 80102ce:	9803      	ldr	r0, [sp, #12]
 80102d0:	f000 fcc4 	bl	8010c5c <__pow5mult>
 80102d4:	9a05      	ldr	r2, [sp, #20]
 80102d6:	0001      	movs	r1, r0
 80102d8:	0007      	movs	r7, r0
 80102da:	9803      	ldr	r0, [sp, #12]
 80102dc:	f000 fc14 	bl	8010b08 <__multiply>
 80102e0:	0006      	movs	r6, r0
 80102e2:	9905      	ldr	r1, [sp, #20]
 80102e4:	9803      	ldr	r0, [sp, #12]
 80102e6:	f000 fb3f 	bl	8010968 <_Bfree>
 80102ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102ec:	9605      	str	r6, [sp, #20]
 80102ee:	1b5b      	subs	r3, r3, r5
 80102f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102f2:	d005      	beq.n	8010300 <_dtoa_r+0x80c>
 80102f4:	0031      	movs	r1, r6
 80102f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80102f8:	9803      	ldr	r0, [sp, #12]
 80102fa:	f000 fcaf 	bl	8010c5c <__pow5mult>
 80102fe:	9005      	str	r0, [sp, #20]
 8010300:	2101      	movs	r1, #1
 8010302:	9803      	ldr	r0, [sp, #12]
 8010304:	f000 fbe8 	bl	8010ad8 <__i2b>
 8010308:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801030a:	0006      	movs	r6, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d100      	bne.n	8010312 <_dtoa_r+0x81e>
 8010310:	e1bc      	b.n	801068c <_dtoa_r+0xb98>
 8010312:	001a      	movs	r2, r3
 8010314:	0001      	movs	r1, r0
 8010316:	9803      	ldr	r0, [sp, #12]
 8010318:	f000 fca0 	bl	8010c5c <__pow5mult>
 801031c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801031e:	0006      	movs	r6, r0
 8010320:	2500      	movs	r5, #0
 8010322:	2b01      	cmp	r3, #1
 8010324:	dc16      	bgt.n	8010354 <_dtoa_r+0x860>
 8010326:	2500      	movs	r5, #0
 8010328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801032a:	42ab      	cmp	r3, r5
 801032c:	d10e      	bne.n	801034c <_dtoa_r+0x858>
 801032e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010330:	031b      	lsls	r3, r3, #12
 8010332:	42ab      	cmp	r3, r5
 8010334:	d10a      	bne.n	801034c <_dtoa_r+0x858>
 8010336:	4b8d      	ldr	r3, [pc, #564]	@ (801056c <_dtoa_r+0xa78>)
 8010338:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801033a:	4213      	tst	r3, r2
 801033c:	d006      	beq.n	801034c <_dtoa_r+0x858>
 801033e:	9b06      	ldr	r3, [sp, #24]
 8010340:	3501      	adds	r5, #1
 8010342:	3301      	adds	r3, #1
 8010344:	9306      	str	r3, [sp, #24]
 8010346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010348:	3301      	adds	r3, #1
 801034a:	930d      	str	r3, [sp, #52]	@ 0x34
 801034c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801034e:	2001      	movs	r0, #1
 8010350:	2b00      	cmp	r3, #0
 8010352:	d008      	beq.n	8010366 <_dtoa_r+0x872>
 8010354:	6933      	ldr	r3, [r6, #16]
 8010356:	3303      	adds	r3, #3
 8010358:	009b      	lsls	r3, r3, #2
 801035a:	18f3      	adds	r3, r6, r3
 801035c:	6858      	ldr	r0, [r3, #4]
 801035e:	f000 fb6b 	bl	8010a38 <__hi0bits>
 8010362:	2320      	movs	r3, #32
 8010364:	1a18      	subs	r0, r3, r0
 8010366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010368:	1818      	adds	r0, r3, r0
 801036a:	0002      	movs	r2, r0
 801036c:	231f      	movs	r3, #31
 801036e:	401a      	ands	r2, r3
 8010370:	4218      	tst	r0, r3
 8010372:	d100      	bne.n	8010376 <_dtoa_r+0x882>
 8010374:	e081      	b.n	801047a <_dtoa_r+0x986>
 8010376:	3301      	adds	r3, #1
 8010378:	1a9b      	subs	r3, r3, r2
 801037a:	2b04      	cmp	r3, #4
 801037c:	dd79      	ble.n	8010472 <_dtoa_r+0x97e>
 801037e:	231c      	movs	r3, #28
 8010380:	1a9b      	subs	r3, r3, r2
 8010382:	9a06      	ldr	r2, [sp, #24]
 8010384:	18e4      	adds	r4, r4, r3
 8010386:	18d2      	adds	r2, r2, r3
 8010388:	9206      	str	r2, [sp, #24]
 801038a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801038c:	18d3      	adds	r3, r2, r3
 801038e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010390:	9b06      	ldr	r3, [sp, #24]
 8010392:	2b00      	cmp	r3, #0
 8010394:	dd05      	ble.n	80103a2 <_dtoa_r+0x8ae>
 8010396:	001a      	movs	r2, r3
 8010398:	9905      	ldr	r1, [sp, #20]
 801039a:	9803      	ldr	r0, [sp, #12]
 801039c:	f000 fcba 	bl	8010d14 <__lshift>
 80103a0:	9005      	str	r0, [sp, #20]
 80103a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	dd05      	ble.n	80103b4 <_dtoa_r+0x8c0>
 80103a8:	0031      	movs	r1, r6
 80103aa:	001a      	movs	r2, r3
 80103ac:	9803      	ldr	r0, [sp, #12]
 80103ae:	f000 fcb1 	bl	8010d14 <__lshift>
 80103b2:	0006      	movs	r6, r0
 80103b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d061      	beq.n	801047e <_dtoa_r+0x98a>
 80103ba:	0031      	movs	r1, r6
 80103bc:	9805      	ldr	r0, [sp, #20]
 80103be:	f000 fd15 	bl	8010dec <__mcmp>
 80103c2:	2800      	cmp	r0, #0
 80103c4:	da5b      	bge.n	801047e <_dtoa_r+0x98a>
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	220a      	movs	r2, #10
 80103ca:	3b01      	subs	r3, #1
 80103cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80103ce:	9905      	ldr	r1, [sp, #20]
 80103d0:	2300      	movs	r3, #0
 80103d2:	9803      	ldr	r0, [sp, #12]
 80103d4:	f000 faec 	bl	80109b0 <__multadd>
 80103d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80103da:	9005      	str	r0, [sp, #20]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d100      	bne.n	80103e2 <_dtoa_r+0x8ee>
 80103e0:	e15b      	b.n	801069a <_dtoa_r+0xba6>
 80103e2:	2300      	movs	r3, #0
 80103e4:	0039      	movs	r1, r7
 80103e6:	220a      	movs	r2, #10
 80103e8:	9803      	ldr	r0, [sp, #12]
 80103ea:	f000 fae1 	bl	80109b0 <__multadd>
 80103ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103f0:	0007      	movs	r7, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	dc4d      	bgt.n	8010492 <_dtoa_r+0x99e>
 80103f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80103f8:	2b02      	cmp	r3, #2
 80103fa:	dd46      	ble.n	801048a <_dtoa_r+0x996>
 80103fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d000      	beq.n	8010404 <_dtoa_r+0x910>
 8010402:	e5db      	b.n	800ffbc <_dtoa_r+0x4c8>
 8010404:	0031      	movs	r1, r6
 8010406:	2205      	movs	r2, #5
 8010408:	9803      	ldr	r0, [sp, #12]
 801040a:	f000 fad1 	bl	80109b0 <__multadd>
 801040e:	0006      	movs	r6, r0
 8010410:	0001      	movs	r1, r0
 8010412:	9805      	ldr	r0, [sp, #20]
 8010414:	f000 fcea 	bl	8010dec <__mcmp>
 8010418:	2800      	cmp	r0, #0
 801041a:	dc00      	bgt.n	801041e <_dtoa_r+0x92a>
 801041c:	e5ce      	b.n	800ffbc <_dtoa_r+0x4c8>
 801041e:	9b08      	ldr	r3, [sp, #32]
 8010420:	9a08      	ldr	r2, [sp, #32]
 8010422:	1c5c      	adds	r4, r3, #1
 8010424:	2331      	movs	r3, #49	@ 0x31
 8010426:	7013      	strb	r3, [r2, #0]
 8010428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801042a:	3301      	adds	r3, #1
 801042c:	930c      	str	r3, [sp, #48]	@ 0x30
 801042e:	e5c9      	b.n	800ffc4 <_dtoa_r+0x4d0>
 8010430:	2336      	movs	r3, #54	@ 0x36
 8010432:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010434:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010436:	1a9b      	subs	r3, r3, r2
 8010438:	9c06      	ldr	r4, [sp, #24]
 801043a:	e720      	b.n	801027e <_dtoa_r+0x78a>
 801043c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801043e:	1e5d      	subs	r5, r3, #1
 8010440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010442:	42ab      	cmp	r3, r5
 8010444:	db08      	blt.n	8010458 <_dtoa_r+0x964>
 8010446:	1b5d      	subs	r5, r3, r5
 8010448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044a:	2b00      	cmp	r3, #0
 801044c:	daf4      	bge.n	8010438 <_dtoa_r+0x944>
 801044e:	9b06      	ldr	r3, [sp, #24]
 8010450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010452:	1a9c      	subs	r4, r3, r2
 8010454:	2300      	movs	r3, #0
 8010456:	e712      	b.n	801027e <_dtoa_r+0x78a>
 8010458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801045a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801045c:	1aeb      	subs	r3, r5, r3
 801045e:	18d3      	adds	r3, r2, r3
 8010460:	9314      	str	r3, [sp, #80]	@ 0x50
 8010462:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010464:	9c06      	ldr	r4, [sp, #24]
 8010466:	2500      	movs	r5, #0
 8010468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801046a:	e708      	b.n	801027e <_dtoa_r+0x78a>
 801046c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801046e:	9905      	ldr	r1, [sp, #20]
 8010470:	e742      	b.n	80102f8 <_dtoa_r+0x804>
 8010472:	2b04      	cmp	r3, #4
 8010474:	d08c      	beq.n	8010390 <_dtoa_r+0x89c>
 8010476:	331c      	adds	r3, #28
 8010478:	e783      	b.n	8010382 <_dtoa_r+0x88e>
 801047a:	0013      	movs	r3, r2
 801047c:	e7fb      	b.n	8010476 <_dtoa_r+0x982>
 801047e:	9b04      	ldr	r3, [sp, #16]
 8010480:	930c      	str	r3, [sp, #48]	@ 0x30
 8010482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010484:	930e      	str	r3, [sp, #56]	@ 0x38
 8010486:	2b00      	cmp	r3, #0
 8010488:	ddb5      	ble.n	80103f6 <_dtoa_r+0x902>
 801048a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801048c:	2b00      	cmp	r3, #0
 801048e:	d100      	bne.n	8010492 <_dtoa_r+0x99e>
 8010490:	e107      	b.n	80106a2 <_dtoa_r+0xbae>
 8010492:	2c00      	cmp	r4, #0
 8010494:	dd05      	ble.n	80104a2 <_dtoa_r+0x9ae>
 8010496:	0039      	movs	r1, r7
 8010498:	0022      	movs	r2, r4
 801049a:	9803      	ldr	r0, [sp, #12]
 801049c:	f000 fc3a 	bl	8010d14 <__lshift>
 80104a0:	0007      	movs	r7, r0
 80104a2:	9704      	str	r7, [sp, #16]
 80104a4:	2d00      	cmp	r5, #0
 80104a6:	d020      	beq.n	80104ea <_dtoa_r+0x9f6>
 80104a8:	6879      	ldr	r1, [r7, #4]
 80104aa:	9803      	ldr	r0, [sp, #12]
 80104ac:	f000 fa18 	bl	80108e0 <_Balloc>
 80104b0:	1e04      	subs	r4, r0, #0
 80104b2:	d10c      	bne.n	80104ce <_dtoa_r+0x9da>
 80104b4:	0022      	movs	r2, r4
 80104b6:	4b2e      	ldr	r3, [pc, #184]	@ (8010570 <_dtoa_r+0xa7c>)
 80104b8:	482e      	ldr	r0, [pc, #184]	@ (8010574 <_dtoa_r+0xa80>)
 80104ba:	492f      	ldr	r1, [pc, #188]	@ (8010578 <_dtoa_r+0xa84>)
 80104bc:	f7ff fb2f 	bl	800fb1e <_dtoa_r+0x2a>
 80104c0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80104c2:	0037      	movs	r7, r6
 80104c4:	e7ab      	b.n	801041e <_dtoa_r+0x92a>
 80104c6:	9b04      	ldr	r3, [sp, #16]
 80104c8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80104ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80104cc:	e7f9      	b.n	80104c2 <_dtoa_r+0x9ce>
 80104ce:	0039      	movs	r1, r7
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	310c      	adds	r1, #12
 80104d4:	3202      	adds	r2, #2
 80104d6:	0092      	lsls	r2, r2, #2
 80104d8:	300c      	adds	r0, #12
 80104da:	f7ff fa7d 	bl	800f9d8 <memcpy>
 80104de:	2201      	movs	r2, #1
 80104e0:	0021      	movs	r1, r4
 80104e2:	9803      	ldr	r0, [sp, #12]
 80104e4:	f000 fc16 	bl	8010d14 <__lshift>
 80104e8:	9004      	str	r0, [sp, #16]
 80104ea:	9b08      	ldr	r3, [sp, #32]
 80104ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104ee:	9306      	str	r3, [sp, #24]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	189b      	adds	r3, r3, r2
 80104f4:	2201      	movs	r2, #1
 80104f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104fa:	4013      	ands	r3, r2
 80104fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80104fe:	0031      	movs	r1, r6
 8010500:	9805      	ldr	r0, [sp, #20]
 8010502:	f7ff fa72 	bl	800f9ea <quorem>
 8010506:	0039      	movs	r1, r7
 8010508:	0005      	movs	r5, r0
 801050a:	900a      	str	r0, [sp, #40]	@ 0x28
 801050c:	9805      	ldr	r0, [sp, #20]
 801050e:	f000 fc6d 	bl	8010dec <__mcmp>
 8010512:	9a04      	ldr	r2, [sp, #16]
 8010514:	900d      	str	r0, [sp, #52]	@ 0x34
 8010516:	0031      	movs	r1, r6
 8010518:	9803      	ldr	r0, [sp, #12]
 801051a:	f000 fc83 	bl	8010e24 <__mdiff>
 801051e:	2201      	movs	r2, #1
 8010520:	68c3      	ldr	r3, [r0, #12]
 8010522:	0004      	movs	r4, r0
 8010524:	3530      	adds	r5, #48	@ 0x30
 8010526:	9209      	str	r2, [sp, #36]	@ 0x24
 8010528:	2b00      	cmp	r3, #0
 801052a:	d104      	bne.n	8010536 <_dtoa_r+0xa42>
 801052c:	0001      	movs	r1, r0
 801052e:	9805      	ldr	r0, [sp, #20]
 8010530:	f000 fc5c 	bl	8010dec <__mcmp>
 8010534:	9009      	str	r0, [sp, #36]	@ 0x24
 8010536:	0021      	movs	r1, r4
 8010538:	9803      	ldr	r0, [sp, #12]
 801053a:	f000 fa15 	bl	8010968 <_Bfree>
 801053e:	9b06      	ldr	r3, [sp, #24]
 8010540:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010542:	1c5c      	adds	r4, r3, #1
 8010544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010546:	4313      	orrs	r3, r2
 8010548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801054a:	4313      	orrs	r3, r2
 801054c:	d116      	bne.n	801057c <_dtoa_r+0xa88>
 801054e:	2d39      	cmp	r5, #57	@ 0x39
 8010550:	d02f      	beq.n	80105b2 <_dtoa_r+0xabe>
 8010552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010554:	2b00      	cmp	r3, #0
 8010556:	dd01      	ble.n	801055c <_dtoa_r+0xa68>
 8010558:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801055a:	3531      	adds	r5, #49	@ 0x31
 801055c:	9b06      	ldr	r3, [sp, #24]
 801055e:	701d      	strb	r5, [r3, #0]
 8010560:	e532      	b.n	800ffc8 <_dtoa_r+0x4d4>
 8010562:	46c0      	nop			@ (mov r8, r8)
 8010564:	40240000 	.word	0x40240000
 8010568:	00000433 	.word	0x00000433
 801056c:	7ff00000 	.word	0x7ff00000
 8010570:	08012264 	.word	0x08012264
 8010574:	0801220c 	.word	0x0801220c
 8010578:	000002ef 	.word	0x000002ef
 801057c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801057e:	2b00      	cmp	r3, #0
 8010580:	db04      	blt.n	801058c <_dtoa_r+0xa98>
 8010582:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010584:	4313      	orrs	r3, r2
 8010586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010588:	4313      	orrs	r3, r2
 801058a:	d11e      	bne.n	80105ca <_dtoa_r+0xad6>
 801058c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801058e:	2b00      	cmp	r3, #0
 8010590:	dde4      	ble.n	801055c <_dtoa_r+0xa68>
 8010592:	9905      	ldr	r1, [sp, #20]
 8010594:	2201      	movs	r2, #1
 8010596:	9803      	ldr	r0, [sp, #12]
 8010598:	f000 fbbc 	bl	8010d14 <__lshift>
 801059c:	0031      	movs	r1, r6
 801059e:	9005      	str	r0, [sp, #20]
 80105a0:	f000 fc24 	bl	8010dec <__mcmp>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	dc02      	bgt.n	80105ae <_dtoa_r+0xaba>
 80105a8:	d1d8      	bne.n	801055c <_dtoa_r+0xa68>
 80105aa:	07eb      	lsls	r3, r5, #31
 80105ac:	d5d6      	bpl.n	801055c <_dtoa_r+0xa68>
 80105ae:	2d39      	cmp	r5, #57	@ 0x39
 80105b0:	d1d2      	bne.n	8010558 <_dtoa_r+0xa64>
 80105b2:	2339      	movs	r3, #57	@ 0x39
 80105b4:	9a06      	ldr	r2, [sp, #24]
 80105b6:	7013      	strb	r3, [r2, #0]
 80105b8:	0023      	movs	r3, r4
 80105ba:	001c      	movs	r4, r3
 80105bc:	3b01      	subs	r3, #1
 80105be:	781a      	ldrb	r2, [r3, #0]
 80105c0:	2a39      	cmp	r2, #57	@ 0x39
 80105c2:	d050      	beq.n	8010666 <_dtoa_r+0xb72>
 80105c4:	3201      	adds	r2, #1
 80105c6:	701a      	strb	r2, [r3, #0]
 80105c8:	e4fe      	b.n	800ffc8 <_dtoa_r+0x4d4>
 80105ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dd03      	ble.n	80105d8 <_dtoa_r+0xae4>
 80105d0:	2d39      	cmp	r5, #57	@ 0x39
 80105d2:	d0ee      	beq.n	80105b2 <_dtoa_r+0xabe>
 80105d4:	3501      	adds	r5, #1
 80105d6:	e7c1      	b.n	801055c <_dtoa_r+0xa68>
 80105d8:	9b06      	ldr	r3, [sp, #24]
 80105da:	9a06      	ldr	r2, [sp, #24]
 80105dc:	701d      	strb	r5, [r3, #0]
 80105de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d02b      	beq.n	801063c <_dtoa_r+0xb48>
 80105e4:	2300      	movs	r3, #0
 80105e6:	220a      	movs	r2, #10
 80105e8:	9905      	ldr	r1, [sp, #20]
 80105ea:	9803      	ldr	r0, [sp, #12]
 80105ec:	f000 f9e0 	bl	80109b0 <__multadd>
 80105f0:	9b04      	ldr	r3, [sp, #16]
 80105f2:	9005      	str	r0, [sp, #20]
 80105f4:	429f      	cmp	r7, r3
 80105f6:	d109      	bne.n	801060c <_dtoa_r+0xb18>
 80105f8:	0039      	movs	r1, r7
 80105fa:	2300      	movs	r3, #0
 80105fc:	220a      	movs	r2, #10
 80105fe:	9803      	ldr	r0, [sp, #12]
 8010600:	f000 f9d6 	bl	80109b0 <__multadd>
 8010604:	0007      	movs	r7, r0
 8010606:	9004      	str	r0, [sp, #16]
 8010608:	9406      	str	r4, [sp, #24]
 801060a:	e778      	b.n	80104fe <_dtoa_r+0xa0a>
 801060c:	0039      	movs	r1, r7
 801060e:	2300      	movs	r3, #0
 8010610:	220a      	movs	r2, #10
 8010612:	9803      	ldr	r0, [sp, #12]
 8010614:	f000 f9cc 	bl	80109b0 <__multadd>
 8010618:	2300      	movs	r3, #0
 801061a:	0007      	movs	r7, r0
 801061c:	220a      	movs	r2, #10
 801061e:	9904      	ldr	r1, [sp, #16]
 8010620:	9803      	ldr	r0, [sp, #12]
 8010622:	f000 f9c5 	bl	80109b0 <__multadd>
 8010626:	9004      	str	r0, [sp, #16]
 8010628:	e7ee      	b.n	8010608 <_dtoa_r+0xb14>
 801062a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801062c:	2401      	movs	r4, #1
 801062e:	2b00      	cmp	r3, #0
 8010630:	dd00      	ble.n	8010634 <_dtoa_r+0xb40>
 8010632:	001c      	movs	r4, r3
 8010634:	9704      	str	r7, [sp, #16]
 8010636:	2700      	movs	r7, #0
 8010638:	9b08      	ldr	r3, [sp, #32]
 801063a:	191c      	adds	r4, r3, r4
 801063c:	9905      	ldr	r1, [sp, #20]
 801063e:	2201      	movs	r2, #1
 8010640:	9803      	ldr	r0, [sp, #12]
 8010642:	f000 fb67 	bl	8010d14 <__lshift>
 8010646:	0031      	movs	r1, r6
 8010648:	9005      	str	r0, [sp, #20]
 801064a:	f000 fbcf 	bl	8010dec <__mcmp>
 801064e:	2800      	cmp	r0, #0
 8010650:	dcb2      	bgt.n	80105b8 <_dtoa_r+0xac4>
 8010652:	d101      	bne.n	8010658 <_dtoa_r+0xb64>
 8010654:	07ed      	lsls	r5, r5, #31
 8010656:	d4af      	bmi.n	80105b8 <_dtoa_r+0xac4>
 8010658:	0023      	movs	r3, r4
 801065a:	001c      	movs	r4, r3
 801065c:	3b01      	subs	r3, #1
 801065e:	781a      	ldrb	r2, [r3, #0]
 8010660:	2a30      	cmp	r2, #48	@ 0x30
 8010662:	d0fa      	beq.n	801065a <_dtoa_r+0xb66>
 8010664:	e4b0      	b.n	800ffc8 <_dtoa_r+0x4d4>
 8010666:	9a08      	ldr	r2, [sp, #32]
 8010668:	429a      	cmp	r2, r3
 801066a:	d1a6      	bne.n	80105ba <_dtoa_r+0xac6>
 801066c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801066e:	3301      	adds	r3, #1
 8010670:	930c      	str	r3, [sp, #48]	@ 0x30
 8010672:	2331      	movs	r3, #49	@ 0x31
 8010674:	7013      	strb	r3, [r2, #0]
 8010676:	e4a7      	b.n	800ffc8 <_dtoa_r+0x4d4>
 8010678:	4b14      	ldr	r3, [pc, #80]	@ (80106cc <_dtoa_r+0xbd8>)
 801067a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801067c:	9308      	str	r3, [sp, #32]
 801067e:	4b14      	ldr	r3, [pc, #80]	@ (80106d0 <_dtoa_r+0xbdc>)
 8010680:	2a00      	cmp	r2, #0
 8010682:	d001      	beq.n	8010688 <_dtoa_r+0xb94>
 8010684:	f7ff fa7e 	bl	800fb84 <_dtoa_r+0x90>
 8010688:	f7ff fa7e 	bl	800fb88 <_dtoa_r+0x94>
 801068c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801068e:	2b01      	cmp	r3, #1
 8010690:	dc00      	bgt.n	8010694 <_dtoa_r+0xba0>
 8010692:	e648      	b.n	8010326 <_dtoa_r+0x832>
 8010694:	2001      	movs	r0, #1
 8010696:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010698:	e665      	b.n	8010366 <_dtoa_r+0x872>
 801069a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801069c:	2b00      	cmp	r3, #0
 801069e:	dc00      	bgt.n	80106a2 <_dtoa_r+0xbae>
 80106a0:	e6a9      	b.n	80103f6 <_dtoa_r+0x902>
 80106a2:	2400      	movs	r4, #0
 80106a4:	0031      	movs	r1, r6
 80106a6:	9805      	ldr	r0, [sp, #20]
 80106a8:	f7ff f99f 	bl	800f9ea <quorem>
 80106ac:	9b08      	ldr	r3, [sp, #32]
 80106ae:	3030      	adds	r0, #48	@ 0x30
 80106b0:	5518      	strb	r0, [r3, r4]
 80106b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106b4:	3401      	adds	r4, #1
 80106b6:	0005      	movs	r5, r0
 80106b8:	42a3      	cmp	r3, r4
 80106ba:	ddb6      	ble.n	801062a <_dtoa_r+0xb36>
 80106bc:	2300      	movs	r3, #0
 80106be:	220a      	movs	r2, #10
 80106c0:	9905      	ldr	r1, [sp, #20]
 80106c2:	9803      	ldr	r0, [sp, #12]
 80106c4:	f000 f974 	bl	80109b0 <__multadd>
 80106c8:	9005      	str	r0, [sp, #20]
 80106ca:	e7eb      	b.n	80106a4 <_dtoa_r+0xbb0>
 80106cc:	080121e8 	.word	0x080121e8
 80106d0:	080121f0 	.word	0x080121f0

080106d4 <_free_r>:
 80106d4:	b570      	push	{r4, r5, r6, lr}
 80106d6:	0005      	movs	r5, r0
 80106d8:	1e0c      	subs	r4, r1, #0
 80106da:	d010      	beq.n	80106fe <_free_r+0x2a>
 80106dc:	3c04      	subs	r4, #4
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	da00      	bge.n	80106e6 <_free_r+0x12>
 80106e4:	18e4      	adds	r4, r4, r3
 80106e6:	0028      	movs	r0, r5
 80106e8:	f000 f8ea 	bl	80108c0 <__malloc_lock>
 80106ec:	4a1d      	ldr	r2, [pc, #116]	@ (8010764 <_free_r+0x90>)
 80106ee:	6813      	ldr	r3, [r2, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d105      	bne.n	8010700 <_free_r+0x2c>
 80106f4:	6063      	str	r3, [r4, #4]
 80106f6:	6014      	str	r4, [r2, #0]
 80106f8:	0028      	movs	r0, r5
 80106fa:	f000 f8e9 	bl	80108d0 <__malloc_unlock>
 80106fe:	bd70      	pop	{r4, r5, r6, pc}
 8010700:	42a3      	cmp	r3, r4
 8010702:	d908      	bls.n	8010716 <_free_r+0x42>
 8010704:	6820      	ldr	r0, [r4, #0]
 8010706:	1821      	adds	r1, r4, r0
 8010708:	428b      	cmp	r3, r1
 801070a:	d1f3      	bne.n	80106f4 <_free_r+0x20>
 801070c:	6819      	ldr	r1, [r3, #0]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	1809      	adds	r1, r1, r0
 8010712:	6021      	str	r1, [r4, #0]
 8010714:	e7ee      	b.n	80106f4 <_free_r+0x20>
 8010716:	001a      	movs	r2, r3
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <_free_r+0x4e>
 801071e:	42a3      	cmp	r3, r4
 8010720:	d9f9      	bls.n	8010716 <_free_r+0x42>
 8010722:	6811      	ldr	r1, [r2, #0]
 8010724:	1850      	adds	r0, r2, r1
 8010726:	42a0      	cmp	r0, r4
 8010728:	d10b      	bne.n	8010742 <_free_r+0x6e>
 801072a:	6820      	ldr	r0, [r4, #0]
 801072c:	1809      	adds	r1, r1, r0
 801072e:	1850      	adds	r0, r2, r1
 8010730:	6011      	str	r1, [r2, #0]
 8010732:	4283      	cmp	r3, r0
 8010734:	d1e0      	bne.n	80106f8 <_free_r+0x24>
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	1841      	adds	r1, r0, r1
 801073c:	6011      	str	r1, [r2, #0]
 801073e:	6053      	str	r3, [r2, #4]
 8010740:	e7da      	b.n	80106f8 <_free_r+0x24>
 8010742:	42a0      	cmp	r0, r4
 8010744:	d902      	bls.n	801074c <_free_r+0x78>
 8010746:	230c      	movs	r3, #12
 8010748:	602b      	str	r3, [r5, #0]
 801074a:	e7d5      	b.n	80106f8 <_free_r+0x24>
 801074c:	6820      	ldr	r0, [r4, #0]
 801074e:	1821      	adds	r1, r4, r0
 8010750:	428b      	cmp	r3, r1
 8010752:	d103      	bne.n	801075c <_free_r+0x88>
 8010754:	6819      	ldr	r1, [r3, #0]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	1809      	adds	r1, r1, r0
 801075a:	6021      	str	r1, [r4, #0]
 801075c:	6063      	str	r3, [r4, #4]
 801075e:	6054      	str	r4, [r2, #4]
 8010760:	e7ca      	b.n	80106f8 <_free_r+0x24>
 8010762:	46c0      	nop			@ (mov r8, r8)
 8010764:	200008b4 	.word	0x200008b4

08010768 <malloc>:
 8010768:	b510      	push	{r4, lr}
 801076a:	4b03      	ldr	r3, [pc, #12]	@ (8010778 <malloc+0x10>)
 801076c:	0001      	movs	r1, r0
 801076e:	6818      	ldr	r0, [r3, #0]
 8010770:	f000 f826 	bl	80107c0 <_malloc_r>
 8010774:	bd10      	pop	{r4, pc}
 8010776:	46c0      	nop			@ (mov r8, r8)
 8010778:	2000001c 	.word	0x2000001c

0801077c <sbrk_aligned>:
 801077c:	b570      	push	{r4, r5, r6, lr}
 801077e:	4e0f      	ldr	r6, [pc, #60]	@ (80107bc <sbrk_aligned+0x40>)
 8010780:	000d      	movs	r5, r1
 8010782:	6831      	ldr	r1, [r6, #0]
 8010784:	0004      	movs	r4, r0
 8010786:	2900      	cmp	r1, #0
 8010788:	d102      	bne.n	8010790 <sbrk_aligned+0x14>
 801078a:	f000 fe67 	bl	801145c <_sbrk_r>
 801078e:	6030      	str	r0, [r6, #0]
 8010790:	0029      	movs	r1, r5
 8010792:	0020      	movs	r0, r4
 8010794:	f000 fe62 	bl	801145c <_sbrk_r>
 8010798:	1c43      	adds	r3, r0, #1
 801079a:	d103      	bne.n	80107a4 <sbrk_aligned+0x28>
 801079c:	2501      	movs	r5, #1
 801079e:	426d      	negs	r5, r5
 80107a0:	0028      	movs	r0, r5
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	2303      	movs	r3, #3
 80107a6:	1cc5      	adds	r5, r0, #3
 80107a8:	439d      	bics	r5, r3
 80107aa:	42a8      	cmp	r0, r5
 80107ac:	d0f8      	beq.n	80107a0 <sbrk_aligned+0x24>
 80107ae:	1a29      	subs	r1, r5, r0
 80107b0:	0020      	movs	r0, r4
 80107b2:	f000 fe53 	bl	801145c <_sbrk_r>
 80107b6:	3001      	adds	r0, #1
 80107b8:	d1f2      	bne.n	80107a0 <sbrk_aligned+0x24>
 80107ba:	e7ef      	b.n	801079c <sbrk_aligned+0x20>
 80107bc:	200008b0 	.word	0x200008b0

080107c0 <_malloc_r>:
 80107c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107c2:	2203      	movs	r2, #3
 80107c4:	1ccb      	adds	r3, r1, #3
 80107c6:	4393      	bics	r3, r2
 80107c8:	3308      	adds	r3, #8
 80107ca:	0005      	movs	r5, r0
 80107cc:	001f      	movs	r7, r3
 80107ce:	2b0c      	cmp	r3, #12
 80107d0:	d234      	bcs.n	801083c <_malloc_r+0x7c>
 80107d2:	270c      	movs	r7, #12
 80107d4:	42b9      	cmp	r1, r7
 80107d6:	d833      	bhi.n	8010840 <_malloc_r+0x80>
 80107d8:	0028      	movs	r0, r5
 80107da:	f000 f871 	bl	80108c0 <__malloc_lock>
 80107de:	4e37      	ldr	r6, [pc, #220]	@ (80108bc <_malloc_r+0xfc>)
 80107e0:	6833      	ldr	r3, [r6, #0]
 80107e2:	001c      	movs	r4, r3
 80107e4:	2c00      	cmp	r4, #0
 80107e6:	d12f      	bne.n	8010848 <_malloc_r+0x88>
 80107e8:	0039      	movs	r1, r7
 80107ea:	0028      	movs	r0, r5
 80107ec:	f7ff ffc6 	bl	801077c <sbrk_aligned>
 80107f0:	0004      	movs	r4, r0
 80107f2:	1c43      	adds	r3, r0, #1
 80107f4:	d15f      	bne.n	80108b6 <_malloc_r+0xf6>
 80107f6:	6834      	ldr	r4, [r6, #0]
 80107f8:	9400      	str	r4, [sp, #0]
 80107fa:	9b00      	ldr	r3, [sp, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d14a      	bne.n	8010896 <_malloc_r+0xd6>
 8010800:	2c00      	cmp	r4, #0
 8010802:	d052      	beq.n	80108aa <_malloc_r+0xea>
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	0028      	movs	r0, r5
 8010808:	18e3      	adds	r3, r4, r3
 801080a:	9900      	ldr	r1, [sp, #0]
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	f000 fe25 	bl	801145c <_sbrk_r>
 8010812:	9b01      	ldr	r3, [sp, #4]
 8010814:	4283      	cmp	r3, r0
 8010816:	d148      	bne.n	80108aa <_malloc_r+0xea>
 8010818:	6823      	ldr	r3, [r4, #0]
 801081a:	0028      	movs	r0, r5
 801081c:	1aff      	subs	r7, r7, r3
 801081e:	0039      	movs	r1, r7
 8010820:	f7ff ffac 	bl	801077c <sbrk_aligned>
 8010824:	3001      	adds	r0, #1
 8010826:	d040      	beq.n	80108aa <_malloc_r+0xea>
 8010828:	6823      	ldr	r3, [r4, #0]
 801082a:	19db      	adds	r3, r3, r7
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	6833      	ldr	r3, [r6, #0]
 8010830:	685a      	ldr	r2, [r3, #4]
 8010832:	2a00      	cmp	r2, #0
 8010834:	d133      	bne.n	801089e <_malloc_r+0xde>
 8010836:	9b00      	ldr	r3, [sp, #0]
 8010838:	6033      	str	r3, [r6, #0]
 801083a:	e019      	b.n	8010870 <_malloc_r+0xb0>
 801083c:	2b00      	cmp	r3, #0
 801083e:	dac9      	bge.n	80107d4 <_malloc_r+0x14>
 8010840:	230c      	movs	r3, #12
 8010842:	602b      	str	r3, [r5, #0]
 8010844:	2000      	movs	r0, #0
 8010846:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010848:	6821      	ldr	r1, [r4, #0]
 801084a:	1bc9      	subs	r1, r1, r7
 801084c:	d420      	bmi.n	8010890 <_malloc_r+0xd0>
 801084e:	290b      	cmp	r1, #11
 8010850:	d90a      	bls.n	8010868 <_malloc_r+0xa8>
 8010852:	19e2      	adds	r2, r4, r7
 8010854:	6027      	str	r7, [r4, #0]
 8010856:	42a3      	cmp	r3, r4
 8010858:	d104      	bne.n	8010864 <_malloc_r+0xa4>
 801085a:	6032      	str	r2, [r6, #0]
 801085c:	6863      	ldr	r3, [r4, #4]
 801085e:	6011      	str	r1, [r2, #0]
 8010860:	6053      	str	r3, [r2, #4]
 8010862:	e005      	b.n	8010870 <_malloc_r+0xb0>
 8010864:	605a      	str	r2, [r3, #4]
 8010866:	e7f9      	b.n	801085c <_malloc_r+0x9c>
 8010868:	6862      	ldr	r2, [r4, #4]
 801086a:	42a3      	cmp	r3, r4
 801086c:	d10e      	bne.n	801088c <_malloc_r+0xcc>
 801086e:	6032      	str	r2, [r6, #0]
 8010870:	0028      	movs	r0, r5
 8010872:	f000 f82d 	bl	80108d0 <__malloc_unlock>
 8010876:	0020      	movs	r0, r4
 8010878:	2207      	movs	r2, #7
 801087a:	300b      	adds	r0, #11
 801087c:	1d23      	adds	r3, r4, #4
 801087e:	4390      	bics	r0, r2
 8010880:	1ac2      	subs	r2, r0, r3
 8010882:	4298      	cmp	r0, r3
 8010884:	d0df      	beq.n	8010846 <_malloc_r+0x86>
 8010886:	1a1b      	subs	r3, r3, r0
 8010888:	50a3      	str	r3, [r4, r2]
 801088a:	e7dc      	b.n	8010846 <_malloc_r+0x86>
 801088c:	605a      	str	r2, [r3, #4]
 801088e:	e7ef      	b.n	8010870 <_malloc_r+0xb0>
 8010890:	0023      	movs	r3, r4
 8010892:	6864      	ldr	r4, [r4, #4]
 8010894:	e7a6      	b.n	80107e4 <_malloc_r+0x24>
 8010896:	9c00      	ldr	r4, [sp, #0]
 8010898:	6863      	ldr	r3, [r4, #4]
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	e7ad      	b.n	80107fa <_malloc_r+0x3a>
 801089e:	001a      	movs	r2, r3
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	42a3      	cmp	r3, r4
 80108a4:	d1fb      	bne.n	801089e <_malloc_r+0xde>
 80108a6:	2300      	movs	r3, #0
 80108a8:	e7da      	b.n	8010860 <_malloc_r+0xa0>
 80108aa:	230c      	movs	r3, #12
 80108ac:	0028      	movs	r0, r5
 80108ae:	602b      	str	r3, [r5, #0]
 80108b0:	f000 f80e 	bl	80108d0 <__malloc_unlock>
 80108b4:	e7c6      	b.n	8010844 <_malloc_r+0x84>
 80108b6:	6007      	str	r7, [r0, #0]
 80108b8:	e7da      	b.n	8010870 <_malloc_r+0xb0>
 80108ba:	46c0      	nop			@ (mov r8, r8)
 80108bc:	200008b4 	.word	0x200008b4

080108c0 <__malloc_lock>:
 80108c0:	b510      	push	{r4, lr}
 80108c2:	4802      	ldr	r0, [pc, #8]	@ (80108cc <__malloc_lock+0xc>)
 80108c4:	f7ff f87b 	bl	800f9be <__retarget_lock_acquire_recursive>
 80108c8:	bd10      	pop	{r4, pc}
 80108ca:	46c0      	nop			@ (mov r8, r8)
 80108cc:	200008ac 	.word	0x200008ac

080108d0 <__malloc_unlock>:
 80108d0:	b510      	push	{r4, lr}
 80108d2:	4802      	ldr	r0, [pc, #8]	@ (80108dc <__malloc_unlock+0xc>)
 80108d4:	f7ff f874 	bl	800f9c0 <__retarget_lock_release_recursive>
 80108d8:	bd10      	pop	{r4, pc}
 80108da:	46c0      	nop			@ (mov r8, r8)
 80108dc:	200008ac 	.word	0x200008ac

080108e0 <_Balloc>:
 80108e0:	b570      	push	{r4, r5, r6, lr}
 80108e2:	69c5      	ldr	r5, [r0, #28]
 80108e4:	0006      	movs	r6, r0
 80108e6:	000c      	movs	r4, r1
 80108e8:	2d00      	cmp	r5, #0
 80108ea:	d10e      	bne.n	801090a <_Balloc+0x2a>
 80108ec:	2010      	movs	r0, #16
 80108ee:	f7ff ff3b 	bl	8010768 <malloc>
 80108f2:	1e02      	subs	r2, r0, #0
 80108f4:	61f0      	str	r0, [r6, #28]
 80108f6:	d104      	bne.n	8010902 <_Balloc+0x22>
 80108f8:	216b      	movs	r1, #107	@ 0x6b
 80108fa:	4b19      	ldr	r3, [pc, #100]	@ (8010960 <_Balloc+0x80>)
 80108fc:	4819      	ldr	r0, [pc, #100]	@ (8010964 <_Balloc+0x84>)
 80108fe:	f000 fdbf 	bl	8011480 <__assert_func>
 8010902:	6045      	str	r5, [r0, #4]
 8010904:	6085      	str	r5, [r0, #8]
 8010906:	6005      	str	r5, [r0, #0]
 8010908:	60c5      	str	r5, [r0, #12]
 801090a:	69f5      	ldr	r5, [r6, #28]
 801090c:	68eb      	ldr	r3, [r5, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d013      	beq.n	801093a <_Balloc+0x5a>
 8010912:	69f3      	ldr	r3, [r6, #28]
 8010914:	00a2      	lsls	r2, r4, #2
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	189b      	adds	r3, r3, r2
 801091a:	6818      	ldr	r0, [r3, #0]
 801091c:	2800      	cmp	r0, #0
 801091e:	d118      	bne.n	8010952 <_Balloc+0x72>
 8010920:	2101      	movs	r1, #1
 8010922:	000d      	movs	r5, r1
 8010924:	40a5      	lsls	r5, r4
 8010926:	1d6a      	adds	r2, r5, #5
 8010928:	0030      	movs	r0, r6
 801092a:	0092      	lsls	r2, r2, #2
 801092c:	f000 fdc6 	bl	80114bc <_calloc_r>
 8010930:	2800      	cmp	r0, #0
 8010932:	d00c      	beq.n	801094e <_Balloc+0x6e>
 8010934:	6044      	str	r4, [r0, #4]
 8010936:	6085      	str	r5, [r0, #8]
 8010938:	e00d      	b.n	8010956 <_Balloc+0x76>
 801093a:	2221      	movs	r2, #33	@ 0x21
 801093c:	2104      	movs	r1, #4
 801093e:	0030      	movs	r0, r6
 8010940:	f000 fdbc 	bl	80114bc <_calloc_r>
 8010944:	69f3      	ldr	r3, [r6, #28]
 8010946:	60e8      	str	r0, [r5, #12]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1e1      	bne.n	8010912 <_Balloc+0x32>
 801094e:	2000      	movs	r0, #0
 8010950:	bd70      	pop	{r4, r5, r6, pc}
 8010952:	6802      	ldr	r2, [r0, #0]
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	2300      	movs	r3, #0
 8010958:	6103      	str	r3, [r0, #16]
 801095a:	60c3      	str	r3, [r0, #12]
 801095c:	e7f8      	b.n	8010950 <_Balloc+0x70>
 801095e:	46c0      	nop			@ (mov r8, r8)
 8010960:	080121f5 	.word	0x080121f5
 8010964:	08012275 	.word	0x08012275

08010968 <_Bfree>:
 8010968:	b570      	push	{r4, r5, r6, lr}
 801096a:	69c6      	ldr	r6, [r0, #28]
 801096c:	0005      	movs	r5, r0
 801096e:	000c      	movs	r4, r1
 8010970:	2e00      	cmp	r6, #0
 8010972:	d10e      	bne.n	8010992 <_Bfree+0x2a>
 8010974:	2010      	movs	r0, #16
 8010976:	f7ff fef7 	bl	8010768 <malloc>
 801097a:	1e02      	subs	r2, r0, #0
 801097c:	61e8      	str	r0, [r5, #28]
 801097e:	d104      	bne.n	801098a <_Bfree+0x22>
 8010980:	218f      	movs	r1, #143	@ 0x8f
 8010982:	4b09      	ldr	r3, [pc, #36]	@ (80109a8 <_Bfree+0x40>)
 8010984:	4809      	ldr	r0, [pc, #36]	@ (80109ac <_Bfree+0x44>)
 8010986:	f000 fd7b 	bl	8011480 <__assert_func>
 801098a:	6046      	str	r6, [r0, #4]
 801098c:	6086      	str	r6, [r0, #8]
 801098e:	6006      	str	r6, [r0, #0]
 8010990:	60c6      	str	r6, [r0, #12]
 8010992:	2c00      	cmp	r4, #0
 8010994:	d007      	beq.n	80109a6 <_Bfree+0x3e>
 8010996:	69eb      	ldr	r3, [r5, #28]
 8010998:	6862      	ldr	r2, [r4, #4]
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	0092      	lsls	r2, r2, #2
 801099e:	189b      	adds	r3, r3, r2
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	6022      	str	r2, [r4, #0]
 80109a4:	601c      	str	r4, [r3, #0]
 80109a6:	bd70      	pop	{r4, r5, r6, pc}
 80109a8:	080121f5 	.word	0x080121f5
 80109ac:	08012275 	.word	0x08012275

080109b0 <__multadd>:
 80109b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109b2:	000f      	movs	r7, r1
 80109b4:	9001      	str	r0, [sp, #4]
 80109b6:	000c      	movs	r4, r1
 80109b8:	001e      	movs	r6, r3
 80109ba:	2000      	movs	r0, #0
 80109bc:	690d      	ldr	r5, [r1, #16]
 80109be:	3714      	adds	r7, #20
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	3001      	adds	r0, #1
 80109c4:	b299      	uxth	r1, r3
 80109c6:	4351      	muls	r1, r2
 80109c8:	0c1b      	lsrs	r3, r3, #16
 80109ca:	4353      	muls	r3, r2
 80109cc:	1989      	adds	r1, r1, r6
 80109ce:	0c0e      	lsrs	r6, r1, #16
 80109d0:	199b      	adds	r3, r3, r6
 80109d2:	0c1e      	lsrs	r6, r3, #16
 80109d4:	b289      	uxth	r1, r1
 80109d6:	041b      	lsls	r3, r3, #16
 80109d8:	185b      	adds	r3, r3, r1
 80109da:	c708      	stmia	r7!, {r3}
 80109dc:	4285      	cmp	r5, r0
 80109de:	dcef      	bgt.n	80109c0 <__multadd+0x10>
 80109e0:	2e00      	cmp	r6, #0
 80109e2:	d022      	beq.n	8010a2a <__multadd+0x7a>
 80109e4:	68a3      	ldr	r3, [r4, #8]
 80109e6:	42ab      	cmp	r3, r5
 80109e8:	dc19      	bgt.n	8010a1e <__multadd+0x6e>
 80109ea:	6861      	ldr	r1, [r4, #4]
 80109ec:	9801      	ldr	r0, [sp, #4]
 80109ee:	3101      	adds	r1, #1
 80109f0:	f7ff ff76 	bl	80108e0 <_Balloc>
 80109f4:	1e07      	subs	r7, r0, #0
 80109f6:	d105      	bne.n	8010a04 <__multadd+0x54>
 80109f8:	003a      	movs	r2, r7
 80109fa:	21ba      	movs	r1, #186	@ 0xba
 80109fc:	4b0c      	ldr	r3, [pc, #48]	@ (8010a30 <__multadd+0x80>)
 80109fe:	480d      	ldr	r0, [pc, #52]	@ (8010a34 <__multadd+0x84>)
 8010a00:	f000 fd3e 	bl	8011480 <__assert_func>
 8010a04:	0021      	movs	r1, r4
 8010a06:	6922      	ldr	r2, [r4, #16]
 8010a08:	310c      	adds	r1, #12
 8010a0a:	3202      	adds	r2, #2
 8010a0c:	0092      	lsls	r2, r2, #2
 8010a0e:	300c      	adds	r0, #12
 8010a10:	f7fe ffe2 	bl	800f9d8 <memcpy>
 8010a14:	0021      	movs	r1, r4
 8010a16:	9801      	ldr	r0, [sp, #4]
 8010a18:	f7ff ffa6 	bl	8010968 <_Bfree>
 8010a1c:	003c      	movs	r4, r7
 8010a1e:	1d2b      	adds	r3, r5, #4
 8010a20:	009b      	lsls	r3, r3, #2
 8010a22:	18e3      	adds	r3, r4, r3
 8010a24:	3501      	adds	r5, #1
 8010a26:	605e      	str	r6, [r3, #4]
 8010a28:	6125      	str	r5, [r4, #16]
 8010a2a:	0020      	movs	r0, r4
 8010a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010a2e:	46c0      	nop			@ (mov r8, r8)
 8010a30:	08012264 	.word	0x08012264
 8010a34:	08012275 	.word	0x08012275

08010a38 <__hi0bits>:
 8010a38:	2280      	movs	r2, #128	@ 0x80
 8010a3a:	0003      	movs	r3, r0
 8010a3c:	0252      	lsls	r2, r2, #9
 8010a3e:	2000      	movs	r0, #0
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d201      	bcs.n	8010a48 <__hi0bits+0x10>
 8010a44:	041b      	lsls	r3, r3, #16
 8010a46:	3010      	adds	r0, #16
 8010a48:	2280      	movs	r2, #128	@ 0x80
 8010a4a:	0452      	lsls	r2, r2, #17
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d201      	bcs.n	8010a54 <__hi0bits+0x1c>
 8010a50:	3008      	adds	r0, #8
 8010a52:	021b      	lsls	r3, r3, #8
 8010a54:	2280      	movs	r2, #128	@ 0x80
 8010a56:	0552      	lsls	r2, r2, #21
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d201      	bcs.n	8010a60 <__hi0bits+0x28>
 8010a5c:	3004      	adds	r0, #4
 8010a5e:	011b      	lsls	r3, r3, #4
 8010a60:	2280      	movs	r2, #128	@ 0x80
 8010a62:	05d2      	lsls	r2, r2, #23
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d201      	bcs.n	8010a6c <__hi0bits+0x34>
 8010a68:	3002      	adds	r0, #2
 8010a6a:	009b      	lsls	r3, r3, #2
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	db03      	blt.n	8010a78 <__hi0bits+0x40>
 8010a70:	3001      	adds	r0, #1
 8010a72:	4213      	tst	r3, r2
 8010a74:	d100      	bne.n	8010a78 <__hi0bits+0x40>
 8010a76:	2020      	movs	r0, #32
 8010a78:	4770      	bx	lr

08010a7a <__lo0bits>:
 8010a7a:	6803      	ldr	r3, [r0, #0]
 8010a7c:	0001      	movs	r1, r0
 8010a7e:	2207      	movs	r2, #7
 8010a80:	0018      	movs	r0, r3
 8010a82:	4010      	ands	r0, r2
 8010a84:	4213      	tst	r3, r2
 8010a86:	d00d      	beq.n	8010aa4 <__lo0bits+0x2a>
 8010a88:	3a06      	subs	r2, #6
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	4213      	tst	r3, r2
 8010a8e:	d105      	bne.n	8010a9c <__lo0bits+0x22>
 8010a90:	3002      	adds	r0, #2
 8010a92:	4203      	tst	r3, r0
 8010a94:	d003      	beq.n	8010a9e <__lo0bits+0x24>
 8010a96:	40d3      	lsrs	r3, r2
 8010a98:	0010      	movs	r0, r2
 8010a9a:	600b      	str	r3, [r1, #0]
 8010a9c:	4770      	bx	lr
 8010a9e:	089b      	lsrs	r3, r3, #2
 8010aa0:	600b      	str	r3, [r1, #0]
 8010aa2:	e7fb      	b.n	8010a9c <__lo0bits+0x22>
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	2a00      	cmp	r2, #0
 8010aa8:	d101      	bne.n	8010aae <__lo0bits+0x34>
 8010aaa:	2010      	movs	r0, #16
 8010aac:	0c1b      	lsrs	r3, r3, #16
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	2a00      	cmp	r2, #0
 8010ab2:	d101      	bne.n	8010ab8 <__lo0bits+0x3e>
 8010ab4:	3008      	adds	r0, #8
 8010ab6:	0a1b      	lsrs	r3, r3, #8
 8010ab8:	071a      	lsls	r2, r3, #28
 8010aba:	d101      	bne.n	8010ac0 <__lo0bits+0x46>
 8010abc:	3004      	adds	r0, #4
 8010abe:	091b      	lsrs	r3, r3, #4
 8010ac0:	079a      	lsls	r2, r3, #30
 8010ac2:	d101      	bne.n	8010ac8 <__lo0bits+0x4e>
 8010ac4:	3002      	adds	r0, #2
 8010ac6:	089b      	lsrs	r3, r3, #2
 8010ac8:	07da      	lsls	r2, r3, #31
 8010aca:	d4e9      	bmi.n	8010aa0 <__lo0bits+0x26>
 8010acc:	3001      	adds	r0, #1
 8010ace:	085b      	lsrs	r3, r3, #1
 8010ad0:	d1e6      	bne.n	8010aa0 <__lo0bits+0x26>
 8010ad2:	2020      	movs	r0, #32
 8010ad4:	e7e2      	b.n	8010a9c <__lo0bits+0x22>
	...

08010ad8 <__i2b>:
 8010ad8:	b510      	push	{r4, lr}
 8010ada:	000c      	movs	r4, r1
 8010adc:	2101      	movs	r1, #1
 8010ade:	f7ff feff 	bl	80108e0 <_Balloc>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d107      	bne.n	8010af6 <__i2b+0x1e>
 8010ae6:	2146      	movs	r1, #70	@ 0x46
 8010ae8:	4c05      	ldr	r4, [pc, #20]	@ (8010b00 <__i2b+0x28>)
 8010aea:	0002      	movs	r2, r0
 8010aec:	4b05      	ldr	r3, [pc, #20]	@ (8010b04 <__i2b+0x2c>)
 8010aee:	0020      	movs	r0, r4
 8010af0:	31ff      	adds	r1, #255	@ 0xff
 8010af2:	f000 fcc5 	bl	8011480 <__assert_func>
 8010af6:	2301      	movs	r3, #1
 8010af8:	6144      	str	r4, [r0, #20]
 8010afa:	6103      	str	r3, [r0, #16]
 8010afc:	bd10      	pop	{r4, pc}
 8010afe:	46c0      	nop			@ (mov r8, r8)
 8010b00:	08012275 	.word	0x08012275
 8010b04:	08012264 	.word	0x08012264

08010b08 <__multiply>:
 8010b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b0a:	0014      	movs	r4, r2
 8010b0c:	690a      	ldr	r2, [r1, #16]
 8010b0e:	6923      	ldr	r3, [r4, #16]
 8010b10:	000d      	movs	r5, r1
 8010b12:	b089      	sub	sp, #36	@ 0x24
 8010b14:	429a      	cmp	r2, r3
 8010b16:	db02      	blt.n	8010b1e <__multiply+0x16>
 8010b18:	0023      	movs	r3, r4
 8010b1a:	000c      	movs	r4, r1
 8010b1c:	001d      	movs	r5, r3
 8010b1e:	6927      	ldr	r7, [r4, #16]
 8010b20:	692e      	ldr	r6, [r5, #16]
 8010b22:	6861      	ldr	r1, [r4, #4]
 8010b24:	19bb      	adds	r3, r7, r6
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	68a3      	ldr	r3, [r4, #8]
 8010b2a:	19ba      	adds	r2, r7, r6
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	da00      	bge.n	8010b32 <__multiply+0x2a>
 8010b30:	3101      	adds	r1, #1
 8010b32:	f7ff fed5 	bl	80108e0 <_Balloc>
 8010b36:	4684      	mov	ip, r0
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d106      	bne.n	8010b4a <__multiply+0x42>
 8010b3c:	21b1      	movs	r1, #177	@ 0xb1
 8010b3e:	4662      	mov	r2, ip
 8010b40:	4b44      	ldr	r3, [pc, #272]	@ (8010c54 <__multiply+0x14c>)
 8010b42:	4845      	ldr	r0, [pc, #276]	@ (8010c58 <__multiply+0x150>)
 8010b44:	0049      	lsls	r1, r1, #1
 8010b46:	f000 fc9b 	bl	8011480 <__assert_func>
 8010b4a:	0002      	movs	r2, r0
 8010b4c:	19bb      	adds	r3, r7, r6
 8010b4e:	3214      	adds	r2, #20
 8010b50:	009b      	lsls	r3, r3, #2
 8010b52:	18d3      	adds	r3, r2, r3
 8010b54:	9301      	str	r3, [sp, #4]
 8010b56:	2100      	movs	r1, #0
 8010b58:	0013      	movs	r3, r2
 8010b5a:	9801      	ldr	r0, [sp, #4]
 8010b5c:	4283      	cmp	r3, r0
 8010b5e:	d328      	bcc.n	8010bb2 <__multiply+0xaa>
 8010b60:	0023      	movs	r3, r4
 8010b62:	00bf      	lsls	r7, r7, #2
 8010b64:	3314      	adds	r3, #20
 8010b66:	9304      	str	r3, [sp, #16]
 8010b68:	3514      	adds	r5, #20
 8010b6a:	19db      	adds	r3, r3, r7
 8010b6c:	00b6      	lsls	r6, r6, #2
 8010b6e:	9302      	str	r3, [sp, #8]
 8010b70:	19ab      	adds	r3, r5, r6
 8010b72:	9307      	str	r3, [sp, #28]
 8010b74:	2304      	movs	r3, #4
 8010b76:	9305      	str	r3, [sp, #20]
 8010b78:	0023      	movs	r3, r4
 8010b7a:	9902      	ldr	r1, [sp, #8]
 8010b7c:	3315      	adds	r3, #21
 8010b7e:	4299      	cmp	r1, r3
 8010b80:	d305      	bcc.n	8010b8e <__multiply+0x86>
 8010b82:	1b0c      	subs	r4, r1, r4
 8010b84:	3c15      	subs	r4, #21
 8010b86:	08a4      	lsrs	r4, r4, #2
 8010b88:	3401      	adds	r4, #1
 8010b8a:	00a3      	lsls	r3, r4, #2
 8010b8c:	9305      	str	r3, [sp, #20]
 8010b8e:	9b07      	ldr	r3, [sp, #28]
 8010b90:	429d      	cmp	r5, r3
 8010b92:	d310      	bcc.n	8010bb6 <__multiply+0xae>
 8010b94:	9b00      	ldr	r3, [sp, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	dd05      	ble.n	8010ba6 <__multiply+0x9e>
 8010b9a:	9b01      	ldr	r3, [sp, #4]
 8010b9c:	3b04      	subs	r3, #4
 8010b9e:	9301      	str	r3, [sp, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d052      	beq.n	8010c4c <__multiply+0x144>
 8010ba6:	4663      	mov	r3, ip
 8010ba8:	4660      	mov	r0, ip
 8010baa:	9a00      	ldr	r2, [sp, #0]
 8010bac:	611a      	str	r2, [r3, #16]
 8010bae:	b009      	add	sp, #36	@ 0x24
 8010bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bb2:	c302      	stmia	r3!, {r1}
 8010bb4:	e7d1      	b.n	8010b5a <__multiply+0x52>
 8010bb6:	682c      	ldr	r4, [r5, #0]
 8010bb8:	b2a4      	uxth	r4, r4
 8010bba:	2c00      	cmp	r4, #0
 8010bbc:	d01f      	beq.n	8010bfe <__multiply+0xf6>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	0017      	movs	r7, r2
 8010bc2:	9e04      	ldr	r6, [sp, #16]
 8010bc4:	9303      	str	r3, [sp, #12]
 8010bc6:	ce08      	ldmia	r6!, {r3}
 8010bc8:	6839      	ldr	r1, [r7, #0]
 8010bca:	9306      	str	r3, [sp, #24]
 8010bcc:	466b      	mov	r3, sp
 8010bce:	8b1b      	ldrh	r3, [r3, #24]
 8010bd0:	b288      	uxth	r0, r1
 8010bd2:	4363      	muls	r3, r4
 8010bd4:	181b      	adds	r3, r3, r0
 8010bd6:	9803      	ldr	r0, [sp, #12]
 8010bd8:	0c09      	lsrs	r1, r1, #16
 8010bda:	181b      	adds	r3, r3, r0
 8010bdc:	9806      	ldr	r0, [sp, #24]
 8010bde:	0c00      	lsrs	r0, r0, #16
 8010be0:	4360      	muls	r0, r4
 8010be2:	1840      	adds	r0, r0, r1
 8010be4:	0c19      	lsrs	r1, r3, #16
 8010be6:	1841      	adds	r1, r0, r1
 8010be8:	0c08      	lsrs	r0, r1, #16
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	0409      	lsls	r1, r1, #16
 8010bee:	4319      	orrs	r1, r3
 8010bf0:	9b02      	ldr	r3, [sp, #8]
 8010bf2:	9003      	str	r0, [sp, #12]
 8010bf4:	c702      	stmia	r7!, {r1}
 8010bf6:	42b3      	cmp	r3, r6
 8010bf8:	d8e5      	bhi.n	8010bc6 <__multiply+0xbe>
 8010bfa:	9b05      	ldr	r3, [sp, #20]
 8010bfc:	50d0      	str	r0, [r2, r3]
 8010bfe:	682c      	ldr	r4, [r5, #0]
 8010c00:	0c24      	lsrs	r4, r4, #16
 8010c02:	d020      	beq.n	8010c46 <__multiply+0x13e>
 8010c04:	2100      	movs	r1, #0
 8010c06:	0010      	movs	r0, r2
 8010c08:	6813      	ldr	r3, [r2, #0]
 8010c0a:	9e04      	ldr	r6, [sp, #16]
 8010c0c:	9103      	str	r1, [sp, #12]
 8010c0e:	6831      	ldr	r1, [r6, #0]
 8010c10:	6807      	ldr	r7, [r0, #0]
 8010c12:	b289      	uxth	r1, r1
 8010c14:	4361      	muls	r1, r4
 8010c16:	0c3f      	lsrs	r7, r7, #16
 8010c18:	19c9      	adds	r1, r1, r7
 8010c1a:	9f03      	ldr	r7, [sp, #12]
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	19c9      	adds	r1, r1, r7
 8010c20:	040f      	lsls	r7, r1, #16
 8010c22:	431f      	orrs	r7, r3
 8010c24:	6007      	str	r7, [r0, #0]
 8010c26:	ce80      	ldmia	r6!, {r7}
 8010c28:	6843      	ldr	r3, [r0, #4]
 8010c2a:	0c3f      	lsrs	r7, r7, #16
 8010c2c:	4367      	muls	r7, r4
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	0c09      	lsrs	r1, r1, #16
 8010c32:	18fb      	adds	r3, r7, r3
 8010c34:	185b      	adds	r3, r3, r1
 8010c36:	0c19      	lsrs	r1, r3, #16
 8010c38:	9103      	str	r1, [sp, #12]
 8010c3a:	9902      	ldr	r1, [sp, #8]
 8010c3c:	3004      	adds	r0, #4
 8010c3e:	42b1      	cmp	r1, r6
 8010c40:	d8e5      	bhi.n	8010c0e <__multiply+0x106>
 8010c42:	9905      	ldr	r1, [sp, #20]
 8010c44:	5053      	str	r3, [r2, r1]
 8010c46:	3504      	adds	r5, #4
 8010c48:	3204      	adds	r2, #4
 8010c4a:	e7a0      	b.n	8010b8e <__multiply+0x86>
 8010c4c:	9b00      	ldr	r3, [sp, #0]
 8010c4e:	3b01      	subs	r3, #1
 8010c50:	9300      	str	r3, [sp, #0]
 8010c52:	e79f      	b.n	8010b94 <__multiply+0x8c>
 8010c54:	08012264 	.word	0x08012264
 8010c58:	08012275 	.word	0x08012275

08010c5c <__pow5mult>:
 8010c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c5e:	2303      	movs	r3, #3
 8010c60:	0015      	movs	r5, r2
 8010c62:	0007      	movs	r7, r0
 8010c64:	000e      	movs	r6, r1
 8010c66:	401a      	ands	r2, r3
 8010c68:	421d      	tst	r5, r3
 8010c6a:	d008      	beq.n	8010c7e <__pow5mult+0x22>
 8010c6c:	4925      	ldr	r1, [pc, #148]	@ (8010d04 <__pow5mult+0xa8>)
 8010c6e:	3a01      	subs	r2, #1
 8010c70:	0092      	lsls	r2, r2, #2
 8010c72:	5852      	ldr	r2, [r2, r1]
 8010c74:	2300      	movs	r3, #0
 8010c76:	0031      	movs	r1, r6
 8010c78:	f7ff fe9a 	bl	80109b0 <__multadd>
 8010c7c:	0006      	movs	r6, r0
 8010c7e:	10ad      	asrs	r5, r5, #2
 8010c80:	d03d      	beq.n	8010cfe <__pow5mult+0xa2>
 8010c82:	69fc      	ldr	r4, [r7, #28]
 8010c84:	2c00      	cmp	r4, #0
 8010c86:	d10f      	bne.n	8010ca8 <__pow5mult+0x4c>
 8010c88:	2010      	movs	r0, #16
 8010c8a:	f7ff fd6d 	bl	8010768 <malloc>
 8010c8e:	1e02      	subs	r2, r0, #0
 8010c90:	61f8      	str	r0, [r7, #28]
 8010c92:	d105      	bne.n	8010ca0 <__pow5mult+0x44>
 8010c94:	21b4      	movs	r1, #180	@ 0xb4
 8010c96:	4b1c      	ldr	r3, [pc, #112]	@ (8010d08 <__pow5mult+0xac>)
 8010c98:	481c      	ldr	r0, [pc, #112]	@ (8010d0c <__pow5mult+0xb0>)
 8010c9a:	31ff      	adds	r1, #255	@ 0xff
 8010c9c:	f000 fbf0 	bl	8011480 <__assert_func>
 8010ca0:	6044      	str	r4, [r0, #4]
 8010ca2:	6084      	str	r4, [r0, #8]
 8010ca4:	6004      	str	r4, [r0, #0]
 8010ca6:	60c4      	str	r4, [r0, #12]
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	689c      	ldr	r4, [r3, #8]
 8010cac:	9301      	str	r3, [sp, #4]
 8010cae:	2c00      	cmp	r4, #0
 8010cb0:	d108      	bne.n	8010cc4 <__pow5mult+0x68>
 8010cb2:	0038      	movs	r0, r7
 8010cb4:	4916      	ldr	r1, [pc, #88]	@ (8010d10 <__pow5mult+0xb4>)
 8010cb6:	f7ff ff0f 	bl	8010ad8 <__i2b>
 8010cba:	9b01      	ldr	r3, [sp, #4]
 8010cbc:	0004      	movs	r4, r0
 8010cbe:	6098      	str	r0, [r3, #8]
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	6003      	str	r3, [r0, #0]
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	421d      	tst	r5, r3
 8010cc8:	d00a      	beq.n	8010ce0 <__pow5mult+0x84>
 8010cca:	0031      	movs	r1, r6
 8010ccc:	0022      	movs	r2, r4
 8010cce:	0038      	movs	r0, r7
 8010cd0:	f7ff ff1a 	bl	8010b08 <__multiply>
 8010cd4:	0031      	movs	r1, r6
 8010cd6:	9001      	str	r0, [sp, #4]
 8010cd8:	0038      	movs	r0, r7
 8010cda:	f7ff fe45 	bl	8010968 <_Bfree>
 8010cde:	9e01      	ldr	r6, [sp, #4]
 8010ce0:	106d      	asrs	r5, r5, #1
 8010ce2:	d00c      	beq.n	8010cfe <__pow5mult+0xa2>
 8010ce4:	6820      	ldr	r0, [r4, #0]
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	d107      	bne.n	8010cfa <__pow5mult+0x9e>
 8010cea:	0022      	movs	r2, r4
 8010cec:	0021      	movs	r1, r4
 8010cee:	0038      	movs	r0, r7
 8010cf0:	f7ff ff0a 	bl	8010b08 <__multiply>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	6020      	str	r0, [r4, #0]
 8010cf8:	6003      	str	r3, [r0, #0]
 8010cfa:	0004      	movs	r4, r0
 8010cfc:	e7e2      	b.n	8010cc4 <__pow5mult+0x68>
 8010cfe:	0030      	movs	r0, r6
 8010d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010d02:	46c0      	nop			@ (mov r8, r8)
 8010d04:	08012328 	.word	0x08012328
 8010d08:	080121f5 	.word	0x080121f5
 8010d0c:	08012275 	.word	0x08012275
 8010d10:	00000271 	.word	0x00000271

08010d14 <__lshift>:
 8010d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d16:	000c      	movs	r4, r1
 8010d18:	0016      	movs	r6, r2
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	1157      	asrs	r7, r2, #5
 8010d1e:	b085      	sub	sp, #20
 8010d20:	18fb      	adds	r3, r7, r3
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	3301      	adds	r3, #1
 8010d26:	9300      	str	r3, [sp, #0]
 8010d28:	6849      	ldr	r1, [r1, #4]
 8010d2a:	68a3      	ldr	r3, [r4, #8]
 8010d2c:	9002      	str	r0, [sp, #8]
 8010d2e:	9a00      	ldr	r2, [sp, #0]
 8010d30:	4293      	cmp	r3, r2
 8010d32:	db10      	blt.n	8010d56 <__lshift+0x42>
 8010d34:	9802      	ldr	r0, [sp, #8]
 8010d36:	f7ff fdd3 	bl	80108e0 <_Balloc>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	0001      	movs	r1, r0
 8010d3e:	0005      	movs	r5, r0
 8010d40:	001a      	movs	r2, r3
 8010d42:	3114      	adds	r1, #20
 8010d44:	4298      	cmp	r0, r3
 8010d46:	d10c      	bne.n	8010d62 <__lshift+0x4e>
 8010d48:	21ef      	movs	r1, #239	@ 0xef
 8010d4a:	002a      	movs	r2, r5
 8010d4c:	4b25      	ldr	r3, [pc, #148]	@ (8010de4 <__lshift+0xd0>)
 8010d4e:	4826      	ldr	r0, [pc, #152]	@ (8010de8 <__lshift+0xd4>)
 8010d50:	0049      	lsls	r1, r1, #1
 8010d52:	f000 fb95 	bl	8011480 <__assert_func>
 8010d56:	3101      	adds	r1, #1
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	e7e8      	b.n	8010d2e <__lshift+0x1a>
 8010d5c:	0098      	lsls	r0, r3, #2
 8010d5e:	500a      	str	r2, [r1, r0]
 8010d60:	3301      	adds	r3, #1
 8010d62:	42bb      	cmp	r3, r7
 8010d64:	dbfa      	blt.n	8010d5c <__lshift+0x48>
 8010d66:	43fb      	mvns	r3, r7
 8010d68:	17db      	asrs	r3, r3, #31
 8010d6a:	401f      	ands	r7, r3
 8010d6c:	00bf      	lsls	r7, r7, #2
 8010d6e:	0023      	movs	r3, r4
 8010d70:	201f      	movs	r0, #31
 8010d72:	19c9      	adds	r1, r1, r7
 8010d74:	0037      	movs	r7, r6
 8010d76:	6922      	ldr	r2, [r4, #16]
 8010d78:	3314      	adds	r3, #20
 8010d7a:	0092      	lsls	r2, r2, #2
 8010d7c:	189a      	adds	r2, r3, r2
 8010d7e:	4007      	ands	r7, r0
 8010d80:	4206      	tst	r6, r0
 8010d82:	d029      	beq.n	8010dd8 <__lshift+0xc4>
 8010d84:	3001      	adds	r0, #1
 8010d86:	1bc0      	subs	r0, r0, r7
 8010d88:	9003      	str	r0, [sp, #12]
 8010d8a:	468c      	mov	ip, r1
 8010d8c:	2000      	movs	r0, #0
 8010d8e:	681e      	ldr	r6, [r3, #0]
 8010d90:	40be      	lsls	r6, r7
 8010d92:	4306      	orrs	r6, r0
 8010d94:	4660      	mov	r0, ip
 8010d96:	c040      	stmia	r0!, {r6}
 8010d98:	4684      	mov	ip, r0
 8010d9a:	9e03      	ldr	r6, [sp, #12]
 8010d9c:	cb01      	ldmia	r3!, {r0}
 8010d9e:	40f0      	lsrs	r0, r6
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d8f4      	bhi.n	8010d8e <__lshift+0x7a>
 8010da4:	0026      	movs	r6, r4
 8010da6:	3615      	adds	r6, #21
 8010da8:	2304      	movs	r3, #4
 8010daa:	42b2      	cmp	r2, r6
 8010dac:	d304      	bcc.n	8010db8 <__lshift+0xa4>
 8010dae:	1b13      	subs	r3, r2, r4
 8010db0:	3b15      	subs	r3, #21
 8010db2:	089b      	lsrs	r3, r3, #2
 8010db4:	3301      	adds	r3, #1
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	50c8      	str	r0, [r1, r3]
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d002      	beq.n	8010dc4 <__lshift+0xb0>
 8010dbe:	9b01      	ldr	r3, [sp, #4]
 8010dc0:	3302      	adds	r3, #2
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	9b00      	ldr	r3, [sp, #0]
 8010dc6:	9802      	ldr	r0, [sp, #8]
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	0021      	movs	r1, r4
 8010dcc:	612b      	str	r3, [r5, #16]
 8010dce:	f7ff fdcb 	bl	8010968 <_Bfree>
 8010dd2:	0028      	movs	r0, r5
 8010dd4:	b005      	add	sp, #20
 8010dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd8:	cb01      	ldmia	r3!, {r0}
 8010dda:	c101      	stmia	r1!, {r0}
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d8fb      	bhi.n	8010dd8 <__lshift+0xc4>
 8010de0:	e7f0      	b.n	8010dc4 <__lshift+0xb0>
 8010de2:	46c0      	nop			@ (mov r8, r8)
 8010de4:	08012264 	.word	0x08012264
 8010de8:	08012275 	.word	0x08012275

08010dec <__mcmp>:
 8010dec:	b530      	push	{r4, r5, lr}
 8010dee:	690b      	ldr	r3, [r1, #16]
 8010df0:	6904      	ldr	r4, [r0, #16]
 8010df2:	0002      	movs	r2, r0
 8010df4:	1ae0      	subs	r0, r4, r3
 8010df6:	429c      	cmp	r4, r3
 8010df8:	d10f      	bne.n	8010e1a <__mcmp+0x2e>
 8010dfa:	3214      	adds	r2, #20
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	3114      	adds	r1, #20
 8010e00:	0014      	movs	r4, r2
 8010e02:	18c9      	adds	r1, r1, r3
 8010e04:	18d2      	adds	r2, r2, r3
 8010e06:	3a04      	subs	r2, #4
 8010e08:	3904      	subs	r1, #4
 8010e0a:	6815      	ldr	r5, [r2, #0]
 8010e0c:	680b      	ldr	r3, [r1, #0]
 8010e0e:	429d      	cmp	r5, r3
 8010e10:	d004      	beq.n	8010e1c <__mcmp+0x30>
 8010e12:	2001      	movs	r0, #1
 8010e14:	429d      	cmp	r5, r3
 8010e16:	d200      	bcs.n	8010e1a <__mcmp+0x2e>
 8010e18:	3802      	subs	r0, #2
 8010e1a:	bd30      	pop	{r4, r5, pc}
 8010e1c:	4294      	cmp	r4, r2
 8010e1e:	d3f2      	bcc.n	8010e06 <__mcmp+0x1a>
 8010e20:	e7fb      	b.n	8010e1a <__mcmp+0x2e>
	...

08010e24 <__mdiff>:
 8010e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e26:	000c      	movs	r4, r1
 8010e28:	b087      	sub	sp, #28
 8010e2a:	9000      	str	r0, [sp, #0]
 8010e2c:	0011      	movs	r1, r2
 8010e2e:	0020      	movs	r0, r4
 8010e30:	0017      	movs	r7, r2
 8010e32:	f7ff ffdb 	bl	8010dec <__mcmp>
 8010e36:	1e05      	subs	r5, r0, #0
 8010e38:	d110      	bne.n	8010e5c <__mdiff+0x38>
 8010e3a:	0001      	movs	r1, r0
 8010e3c:	9800      	ldr	r0, [sp, #0]
 8010e3e:	f7ff fd4f 	bl	80108e0 <_Balloc>
 8010e42:	1e02      	subs	r2, r0, #0
 8010e44:	d104      	bne.n	8010e50 <__mdiff+0x2c>
 8010e46:	4b40      	ldr	r3, [pc, #256]	@ (8010f48 <__mdiff+0x124>)
 8010e48:	4840      	ldr	r0, [pc, #256]	@ (8010f4c <__mdiff+0x128>)
 8010e4a:	4941      	ldr	r1, [pc, #260]	@ (8010f50 <__mdiff+0x12c>)
 8010e4c:	f000 fb18 	bl	8011480 <__assert_func>
 8010e50:	2301      	movs	r3, #1
 8010e52:	6145      	str	r5, [r0, #20]
 8010e54:	6103      	str	r3, [r0, #16]
 8010e56:	0010      	movs	r0, r2
 8010e58:	b007      	add	sp, #28
 8010e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e5c:	2600      	movs	r6, #0
 8010e5e:	42b0      	cmp	r0, r6
 8010e60:	da03      	bge.n	8010e6a <__mdiff+0x46>
 8010e62:	0023      	movs	r3, r4
 8010e64:	003c      	movs	r4, r7
 8010e66:	001f      	movs	r7, r3
 8010e68:	3601      	adds	r6, #1
 8010e6a:	6861      	ldr	r1, [r4, #4]
 8010e6c:	9800      	ldr	r0, [sp, #0]
 8010e6e:	f7ff fd37 	bl	80108e0 <_Balloc>
 8010e72:	1e02      	subs	r2, r0, #0
 8010e74:	d103      	bne.n	8010e7e <__mdiff+0x5a>
 8010e76:	4b34      	ldr	r3, [pc, #208]	@ (8010f48 <__mdiff+0x124>)
 8010e78:	4834      	ldr	r0, [pc, #208]	@ (8010f4c <__mdiff+0x128>)
 8010e7a:	4936      	ldr	r1, [pc, #216]	@ (8010f54 <__mdiff+0x130>)
 8010e7c:	e7e6      	b.n	8010e4c <__mdiff+0x28>
 8010e7e:	6923      	ldr	r3, [r4, #16]
 8010e80:	3414      	adds	r4, #20
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	18e3      	adds	r3, r4, r3
 8010e88:	0021      	movs	r1, r4
 8010e8a:	9401      	str	r4, [sp, #4]
 8010e8c:	003c      	movs	r4, r7
 8010e8e:	9302      	str	r3, [sp, #8]
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	3414      	adds	r4, #20
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	18e3      	adds	r3, r4, r3
 8010e98:	9303      	str	r3, [sp, #12]
 8010e9a:	0003      	movs	r3, r0
 8010e9c:	60c6      	str	r6, [r0, #12]
 8010e9e:	468c      	mov	ip, r1
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	3314      	adds	r3, #20
 8010ea4:	9304      	str	r3, [sp, #16]
 8010ea6:	9305      	str	r3, [sp, #20]
 8010ea8:	4663      	mov	r3, ip
 8010eaa:	cb20      	ldmia	r3!, {r5}
 8010eac:	b2a9      	uxth	r1, r5
 8010eae:	000e      	movs	r6, r1
 8010eb0:	469c      	mov	ip, r3
 8010eb2:	cc08      	ldmia	r4!, {r3}
 8010eb4:	0c2d      	lsrs	r5, r5, #16
 8010eb6:	b299      	uxth	r1, r3
 8010eb8:	1a71      	subs	r1, r6, r1
 8010eba:	1809      	adds	r1, r1, r0
 8010ebc:	0c1b      	lsrs	r3, r3, #16
 8010ebe:	1408      	asrs	r0, r1, #16
 8010ec0:	1aeb      	subs	r3, r5, r3
 8010ec2:	181b      	adds	r3, r3, r0
 8010ec4:	1418      	asrs	r0, r3, #16
 8010ec6:	b289      	uxth	r1, r1
 8010ec8:	041b      	lsls	r3, r3, #16
 8010eca:	4319      	orrs	r1, r3
 8010ecc:	9b05      	ldr	r3, [sp, #20]
 8010ece:	c302      	stmia	r3!, {r1}
 8010ed0:	9305      	str	r3, [sp, #20]
 8010ed2:	9b03      	ldr	r3, [sp, #12]
 8010ed4:	42a3      	cmp	r3, r4
 8010ed6:	d8e7      	bhi.n	8010ea8 <__mdiff+0x84>
 8010ed8:	0039      	movs	r1, r7
 8010eda:	9c03      	ldr	r4, [sp, #12]
 8010edc:	3115      	adds	r1, #21
 8010ede:	2304      	movs	r3, #4
 8010ee0:	428c      	cmp	r4, r1
 8010ee2:	d304      	bcc.n	8010eee <__mdiff+0xca>
 8010ee4:	1be3      	subs	r3, r4, r7
 8010ee6:	3b15      	subs	r3, #21
 8010ee8:	089b      	lsrs	r3, r3, #2
 8010eea:	3301      	adds	r3, #1
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	9901      	ldr	r1, [sp, #4]
 8010ef0:	18cd      	adds	r5, r1, r3
 8010ef2:	9904      	ldr	r1, [sp, #16]
 8010ef4:	002e      	movs	r6, r5
 8010ef6:	18cb      	adds	r3, r1, r3
 8010ef8:	001f      	movs	r7, r3
 8010efa:	9902      	ldr	r1, [sp, #8]
 8010efc:	428e      	cmp	r6, r1
 8010efe:	d311      	bcc.n	8010f24 <__mdiff+0x100>
 8010f00:	9c02      	ldr	r4, [sp, #8]
 8010f02:	1ee9      	subs	r1, r5, #3
 8010f04:	2000      	movs	r0, #0
 8010f06:	428c      	cmp	r4, r1
 8010f08:	d304      	bcc.n	8010f14 <__mdiff+0xf0>
 8010f0a:	0021      	movs	r1, r4
 8010f0c:	3103      	adds	r1, #3
 8010f0e:	1b49      	subs	r1, r1, r5
 8010f10:	0889      	lsrs	r1, r1, #2
 8010f12:	0088      	lsls	r0, r1, #2
 8010f14:	181b      	adds	r3, r3, r0
 8010f16:	3b04      	subs	r3, #4
 8010f18:	6819      	ldr	r1, [r3, #0]
 8010f1a:	2900      	cmp	r1, #0
 8010f1c:	d010      	beq.n	8010f40 <__mdiff+0x11c>
 8010f1e:	9b00      	ldr	r3, [sp, #0]
 8010f20:	6113      	str	r3, [r2, #16]
 8010f22:	e798      	b.n	8010e56 <__mdiff+0x32>
 8010f24:	4684      	mov	ip, r0
 8010f26:	ce02      	ldmia	r6!, {r1}
 8010f28:	b288      	uxth	r0, r1
 8010f2a:	4460      	add	r0, ip
 8010f2c:	1400      	asrs	r0, r0, #16
 8010f2e:	0c0c      	lsrs	r4, r1, #16
 8010f30:	1904      	adds	r4, r0, r4
 8010f32:	4461      	add	r1, ip
 8010f34:	1420      	asrs	r0, r4, #16
 8010f36:	b289      	uxth	r1, r1
 8010f38:	0424      	lsls	r4, r4, #16
 8010f3a:	4321      	orrs	r1, r4
 8010f3c:	c702      	stmia	r7!, {r1}
 8010f3e:	e7dc      	b.n	8010efa <__mdiff+0xd6>
 8010f40:	9900      	ldr	r1, [sp, #0]
 8010f42:	3901      	subs	r1, #1
 8010f44:	9100      	str	r1, [sp, #0]
 8010f46:	e7e6      	b.n	8010f16 <__mdiff+0xf2>
 8010f48:	08012264 	.word	0x08012264
 8010f4c:	08012275 	.word	0x08012275
 8010f50:	00000237 	.word	0x00000237
 8010f54:	00000245 	.word	0x00000245

08010f58 <__d2b>:
 8010f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f5a:	2101      	movs	r1, #1
 8010f5c:	0016      	movs	r6, r2
 8010f5e:	001f      	movs	r7, r3
 8010f60:	f7ff fcbe 	bl	80108e0 <_Balloc>
 8010f64:	1e04      	subs	r4, r0, #0
 8010f66:	d105      	bne.n	8010f74 <__d2b+0x1c>
 8010f68:	0022      	movs	r2, r4
 8010f6a:	4b25      	ldr	r3, [pc, #148]	@ (8011000 <__d2b+0xa8>)
 8010f6c:	4825      	ldr	r0, [pc, #148]	@ (8011004 <__d2b+0xac>)
 8010f6e:	4926      	ldr	r1, [pc, #152]	@ (8011008 <__d2b+0xb0>)
 8010f70:	f000 fa86 	bl	8011480 <__assert_func>
 8010f74:	033b      	lsls	r3, r7, #12
 8010f76:	007d      	lsls	r5, r7, #1
 8010f78:	0b1b      	lsrs	r3, r3, #12
 8010f7a:	0d6d      	lsrs	r5, r5, #21
 8010f7c:	d002      	beq.n	8010f84 <__d2b+0x2c>
 8010f7e:	2280      	movs	r2, #128	@ 0x80
 8010f80:	0352      	lsls	r2, r2, #13
 8010f82:	4313      	orrs	r3, r2
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	2e00      	cmp	r6, #0
 8010f88:	d025      	beq.n	8010fd6 <__d2b+0x7e>
 8010f8a:	4668      	mov	r0, sp
 8010f8c:	9600      	str	r6, [sp, #0]
 8010f8e:	f7ff fd74 	bl	8010a7a <__lo0bits>
 8010f92:	9b01      	ldr	r3, [sp, #4]
 8010f94:	9900      	ldr	r1, [sp, #0]
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d01b      	beq.n	8010fd2 <__d2b+0x7a>
 8010f9a:	2220      	movs	r2, #32
 8010f9c:	001e      	movs	r6, r3
 8010f9e:	1a12      	subs	r2, r2, r0
 8010fa0:	4096      	lsls	r6, r2
 8010fa2:	0032      	movs	r2, r6
 8010fa4:	40c3      	lsrs	r3, r0
 8010fa6:	430a      	orrs	r2, r1
 8010fa8:	6162      	str	r2, [r4, #20]
 8010faa:	9301      	str	r3, [sp, #4]
 8010fac:	9e01      	ldr	r6, [sp, #4]
 8010fae:	61a6      	str	r6, [r4, #24]
 8010fb0:	1e73      	subs	r3, r6, #1
 8010fb2:	419e      	sbcs	r6, r3
 8010fb4:	3601      	adds	r6, #1
 8010fb6:	6126      	str	r6, [r4, #16]
 8010fb8:	2d00      	cmp	r5, #0
 8010fba:	d014      	beq.n	8010fe6 <__d2b+0x8e>
 8010fbc:	2635      	movs	r6, #53	@ 0x35
 8010fbe:	4b13      	ldr	r3, [pc, #76]	@ (801100c <__d2b+0xb4>)
 8010fc0:	18ed      	adds	r5, r5, r3
 8010fc2:	9b08      	ldr	r3, [sp, #32]
 8010fc4:	182d      	adds	r5, r5, r0
 8010fc6:	601d      	str	r5, [r3, #0]
 8010fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fca:	1a36      	subs	r6, r6, r0
 8010fcc:	601e      	str	r6, [r3, #0]
 8010fce:	0020      	movs	r0, r4
 8010fd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010fd2:	6161      	str	r1, [r4, #20]
 8010fd4:	e7ea      	b.n	8010fac <__d2b+0x54>
 8010fd6:	a801      	add	r0, sp, #4
 8010fd8:	f7ff fd4f 	bl	8010a7a <__lo0bits>
 8010fdc:	9b01      	ldr	r3, [sp, #4]
 8010fde:	2601      	movs	r6, #1
 8010fe0:	6163      	str	r3, [r4, #20]
 8010fe2:	3020      	adds	r0, #32
 8010fe4:	e7e7      	b.n	8010fb6 <__d2b+0x5e>
 8010fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8011010 <__d2b+0xb8>)
 8010fe8:	18c0      	adds	r0, r0, r3
 8010fea:	9b08      	ldr	r3, [sp, #32]
 8010fec:	6018      	str	r0, [r3, #0]
 8010fee:	4b09      	ldr	r3, [pc, #36]	@ (8011014 <__d2b+0xbc>)
 8010ff0:	18f3      	adds	r3, r6, r3
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	18e3      	adds	r3, r4, r3
 8010ff6:	6958      	ldr	r0, [r3, #20]
 8010ff8:	f7ff fd1e 	bl	8010a38 <__hi0bits>
 8010ffc:	0176      	lsls	r6, r6, #5
 8010ffe:	e7e3      	b.n	8010fc8 <__d2b+0x70>
 8011000:	08012264 	.word	0x08012264
 8011004:	08012275 	.word	0x08012275
 8011008:	0000030f 	.word	0x0000030f
 801100c:	fffffbcd 	.word	0xfffffbcd
 8011010:	fffffbce 	.word	0xfffffbce
 8011014:	3fffffff 	.word	0x3fffffff

08011018 <__ssputs_r>:
 8011018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801101a:	688e      	ldr	r6, [r1, #8]
 801101c:	b085      	sub	sp, #20
 801101e:	001f      	movs	r7, r3
 8011020:	000c      	movs	r4, r1
 8011022:	680b      	ldr	r3, [r1, #0]
 8011024:	9002      	str	r0, [sp, #8]
 8011026:	9203      	str	r2, [sp, #12]
 8011028:	42be      	cmp	r6, r7
 801102a:	d830      	bhi.n	801108e <__ssputs_r+0x76>
 801102c:	210c      	movs	r1, #12
 801102e:	5e62      	ldrsh	r2, [r4, r1]
 8011030:	2190      	movs	r1, #144	@ 0x90
 8011032:	00c9      	lsls	r1, r1, #3
 8011034:	420a      	tst	r2, r1
 8011036:	d028      	beq.n	801108a <__ssputs_r+0x72>
 8011038:	2003      	movs	r0, #3
 801103a:	6921      	ldr	r1, [r4, #16]
 801103c:	1a5b      	subs	r3, r3, r1
 801103e:	9301      	str	r3, [sp, #4]
 8011040:	6963      	ldr	r3, [r4, #20]
 8011042:	4343      	muls	r3, r0
 8011044:	9801      	ldr	r0, [sp, #4]
 8011046:	0fdd      	lsrs	r5, r3, #31
 8011048:	18ed      	adds	r5, r5, r3
 801104a:	1c7b      	adds	r3, r7, #1
 801104c:	181b      	adds	r3, r3, r0
 801104e:	106d      	asrs	r5, r5, #1
 8011050:	42ab      	cmp	r3, r5
 8011052:	d900      	bls.n	8011056 <__ssputs_r+0x3e>
 8011054:	001d      	movs	r5, r3
 8011056:	0552      	lsls	r2, r2, #21
 8011058:	d528      	bpl.n	80110ac <__ssputs_r+0x94>
 801105a:	0029      	movs	r1, r5
 801105c:	9802      	ldr	r0, [sp, #8]
 801105e:	f7ff fbaf 	bl	80107c0 <_malloc_r>
 8011062:	1e06      	subs	r6, r0, #0
 8011064:	d02c      	beq.n	80110c0 <__ssputs_r+0xa8>
 8011066:	9a01      	ldr	r2, [sp, #4]
 8011068:	6921      	ldr	r1, [r4, #16]
 801106a:	f7fe fcb5 	bl	800f9d8 <memcpy>
 801106e:	89a2      	ldrh	r2, [r4, #12]
 8011070:	4b18      	ldr	r3, [pc, #96]	@ (80110d4 <__ssputs_r+0xbc>)
 8011072:	401a      	ands	r2, r3
 8011074:	2380      	movs	r3, #128	@ 0x80
 8011076:	4313      	orrs	r3, r2
 8011078:	81a3      	strh	r3, [r4, #12]
 801107a:	9b01      	ldr	r3, [sp, #4]
 801107c:	6126      	str	r6, [r4, #16]
 801107e:	18f6      	adds	r6, r6, r3
 8011080:	6026      	str	r6, [r4, #0]
 8011082:	003e      	movs	r6, r7
 8011084:	6165      	str	r5, [r4, #20]
 8011086:	1aed      	subs	r5, r5, r3
 8011088:	60a5      	str	r5, [r4, #8]
 801108a:	42be      	cmp	r6, r7
 801108c:	d900      	bls.n	8011090 <__ssputs_r+0x78>
 801108e:	003e      	movs	r6, r7
 8011090:	0032      	movs	r2, r6
 8011092:	9903      	ldr	r1, [sp, #12]
 8011094:	6820      	ldr	r0, [r4, #0]
 8011096:	f000 f9ce 	bl	8011436 <memmove>
 801109a:	2000      	movs	r0, #0
 801109c:	68a3      	ldr	r3, [r4, #8]
 801109e:	1b9b      	subs	r3, r3, r6
 80110a0:	60a3      	str	r3, [r4, #8]
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	199b      	adds	r3, r3, r6
 80110a6:	6023      	str	r3, [r4, #0]
 80110a8:	b005      	add	sp, #20
 80110aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ac:	002a      	movs	r2, r5
 80110ae:	9802      	ldr	r0, [sp, #8]
 80110b0:	f000 fa43 	bl	801153a <_realloc_r>
 80110b4:	1e06      	subs	r6, r0, #0
 80110b6:	d1e0      	bne.n	801107a <__ssputs_r+0x62>
 80110b8:	6921      	ldr	r1, [r4, #16]
 80110ba:	9802      	ldr	r0, [sp, #8]
 80110bc:	f7ff fb0a 	bl	80106d4 <_free_r>
 80110c0:	230c      	movs	r3, #12
 80110c2:	2001      	movs	r0, #1
 80110c4:	9a02      	ldr	r2, [sp, #8]
 80110c6:	4240      	negs	r0, r0
 80110c8:	6013      	str	r3, [r2, #0]
 80110ca:	89a2      	ldrh	r2, [r4, #12]
 80110cc:	3334      	adds	r3, #52	@ 0x34
 80110ce:	4313      	orrs	r3, r2
 80110d0:	81a3      	strh	r3, [r4, #12]
 80110d2:	e7e9      	b.n	80110a8 <__ssputs_r+0x90>
 80110d4:	fffffb7f 	.word	0xfffffb7f

080110d8 <_svfiprintf_r>:
 80110d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110da:	b0a1      	sub	sp, #132	@ 0x84
 80110dc:	9003      	str	r0, [sp, #12]
 80110de:	001d      	movs	r5, r3
 80110e0:	898b      	ldrh	r3, [r1, #12]
 80110e2:	000f      	movs	r7, r1
 80110e4:	0016      	movs	r6, r2
 80110e6:	061b      	lsls	r3, r3, #24
 80110e8:	d511      	bpl.n	801110e <_svfiprintf_r+0x36>
 80110ea:	690b      	ldr	r3, [r1, #16]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d10e      	bne.n	801110e <_svfiprintf_r+0x36>
 80110f0:	2140      	movs	r1, #64	@ 0x40
 80110f2:	f7ff fb65 	bl	80107c0 <_malloc_r>
 80110f6:	6038      	str	r0, [r7, #0]
 80110f8:	6138      	str	r0, [r7, #16]
 80110fa:	2800      	cmp	r0, #0
 80110fc:	d105      	bne.n	801110a <_svfiprintf_r+0x32>
 80110fe:	230c      	movs	r3, #12
 8011100:	9a03      	ldr	r2, [sp, #12]
 8011102:	6013      	str	r3, [r2, #0]
 8011104:	2001      	movs	r0, #1
 8011106:	4240      	negs	r0, r0
 8011108:	e0cf      	b.n	80112aa <_svfiprintf_r+0x1d2>
 801110a:	2340      	movs	r3, #64	@ 0x40
 801110c:	617b      	str	r3, [r7, #20]
 801110e:	2300      	movs	r3, #0
 8011110:	ac08      	add	r4, sp, #32
 8011112:	6163      	str	r3, [r4, #20]
 8011114:	3320      	adds	r3, #32
 8011116:	7663      	strb	r3, [r4, #25]
 8011118:	3310      	adds	r3, #16
 801111a:	76a3      	strb	r3, [r4, #26]
 801111c:	9507      	str	r5, [sp, #28]
 801111e:	0035      	movs	r5, r6
 8011120:	782b      	ldrb	r3, [r5, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d001      	beq.n	801112a <_svfiprintf_r+0x52>
 8011126:	2b25      	cmp	r3, #37	@ 0x25
 8011128:	d148      	bne.n	80111bc <_svfiprintf_r+0xe4>
 801112a:	1bab      	subs	r3, r5, r6
 801112c:	9305      	str	r3, [sp, #20]
 801112e:	42b5      	cmp	r5, r6
 8011130:	d00b      	beq.n	801114a <_svfiprintf_r+0x72>
 8011132:	0032      	movs	r2, r6
 8011134:	0039      	movs	r1, r7
 8011136:	9803      	ldr	r0, [sp, #12]
 8011138:	f7ff ff6e 	bl	8011018 <__ssputs_r>
 801113c:	3001      	adds	r0, #1
 801113e:	d100      	bne.n	8011142 <_svfiprintf_r+0x6a>
 8011140:	e0ae      	b.n	80112a0 <_svfiprintf_r+0x1c8>
 8011142:	6963      	ldr	r3, [r4, #20]
 8011144:	9a05      	ldr	r2, [sp, #20]
 8011146:	189b      	adds	r3, r3, r2
 8011148:	6163      	str	r3, [r4, #20]
 801114a:	782b      	ldrb	r3, [r5, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d100      	bne.n	8011152 <_svfiprintf_r+0x7a>
 8011150:	e0a6      	b.n	80112a0 <_svfiprintf_r+0x1c8>
 8011152:	2201      	movs	r2, #1
 8011154:	2300      	movs	r3, #0
 8011156:	4252      	negs	r2, r2
 8011158:	6062      	str	r2, [r4, #4]
 801115a:	a904      	add	r1, sp, #16
 801115c:	3254      	adds	r2, #84	@ 0x54
 801115e:	1852      	adds	r2, r2, r1
 8011160:	1c6e      	adds	r6, r5, #1
 8011162:	6023      	str	r3, [r4, #0]
 8011164:	60e3      	str	r3, [r4, #12]
 8011166:	60a3      	str	r3, [r4, #8]
 8011168:	7013      	strb	r3, [r2, #0]
 801116a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801116c:	4b54      	ldr	r3, [pc, #336]	@ (80112c0 <_svfiprintf_r+0x1e8>)
 801116e:	2205      	movs	r2, #5
 8011170:	0018      	movs	r0, r3
 8011172:	7831      	ldrb	r1, [r6, #0]
 8011174:	9305      	str	r3, [sp, #20]
 8011176:	f7fe fc24 	bl	800f9c2 <memchr>
 801117a:	1c75      	adds	r5, r6, #1
 801117c:	2800      	cmp	r0, #0
 801117e:	d11f      	bne.n	80111c0 <_svfiprintf_r+0xe8>
 8011180:	6822      	ldr	r2, [r4, #0]
 8011182:	06d3      	lsls	r3, r2, #27
 8011184:	d504      	bpl.n	8011190 <_svfiprintf_r+0xb8>
 8011186:	2353      	movs	r3, #83	@ 0x53
 8011188:	a904      	add	r1, sp, #16
 801118a:	185b      	adds	r3, r3, r1
 801118c:	2120      	movs	r1, #32
 801118e:	7019      	strb	r1, [r3, #0]
 8011190:	0713      	lsls	r3, r2, #28
 8011192:	d504      	bpl.n	801119e <_svfiprintf_r+0xc6>
 8011194:	2353      	movs	r3, #83	@ 0x53
 8011196:	a904      	add	r1, sp, #16
 8011198:	185b      	adds	r3, r3, r1
 801119a:	212b      	movs	r1, #43	@ 0x2b
 801119c:	7019      	strb	r1, [r3, #0]
 801119e:	7833      	ldrb	r3, [r6, #0]
 80111a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80111a2:	d016      	beq.n	80111d2 <_svfiprintf_r+0xfa>
 80111a4:	0035      	movs	r5, r6
 80111a6:	2100      	movs	r1, #0
 80111a8:	200a      	movs	r0, #10
 80111aa:	68e3      	ldr	r3, [r4, #12]
 80111ac:	782a      	ldrb	r2, [r5, #0]
 80111ae:	1c6e      	adds	r6, r5, #1
 80111b0:	3a30      	subs	r2, #48	@ 0x30
 80111b2:	2a09      	cmp	r2, #9
 80111b4:	d950      	bls.n	8011258 <_svfiprintf_r+0x180>
 80111b6:	2900      	cmp	r1, #0
 80111b8:	d111      	bne.n	80111de <_svfiprintf_r+0x106>
 80111ba:	e017      	b.n	80111ec <_svfiprintf_r+0x114>
 80111bc:	3501      	adds	r5, #1
 80111be:	e7af      	b.n	8011120 <_svfiprintf_r+0x48>
 80111c0:	9b05      	ldr	r3, [sp, #20]
 80111c2:	6822      	ldr	r2, [r4, #0]
 80111c4:	1ac0      	subs	r0, r0, r3
 80111c6:	2301      	movs	r3, #1
 80111c8:	4083      	lsls	r3, r0
 80111ca:	4313      	orrs	r3, r2
 80111cc:	002e      	movs	r6, r5
 80111ce:	6023      	str	r3, [r4, #0]
 80111d0:	e7cc      	b.n	801116c <_svfiprintf_r+0x94>
 80111d2:	9b07      	ldr	r3, [sp, #28]
 80111d4:	1d19      	adds	r1, r3, #4
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	9107      	str	r1, [sp, #28]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	db01      	blt.n	80111e2 <_svfiprintf_r+0x10a>
 80111de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111e0:	e004      	b.n	80111ec <_svfiprintf_r+0x114>
 80111e2:	425b      	negs	r3, r3
 80111e4:	60e3      	str	r3, [r4, #12]
 80111e6:	2302      	movs	r3, #2
 80111e8:	4313      	orrs	r3, r2
 80111ea:	6023      	str	r3, [r4, #0]
 80111ec:	782b      	ldrb	r3, [r5, #0]
 80111ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80111f0:	d10c      	bne.n	801120c <_svfiprintf_r+0x134>
 80111f2:	786b      	ldrb	r3, [r5, #1]
 80111f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80111f6:	d134      	bne.n	8011262 <_svfiprintf_r+0x18a>
 80111f8:	9b07      	ldr	r3, [sp, #28]
 80111fa:	3502      	adds	r5, #2
 80111fc:	1d1a      	adds	r2, r3, #4
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	9207      	str	r2, [sp, #28]
 8011202:	2b00      	cmp	r3, #0
 8011204:	da01      	bge.n	801120a <_svfiprintf_r+0x132>
 8011206:	2301      	movs	r3, #1
 8011208:	425b      	negs	r3, r3
 801120a:	9309      	str	r3, [sp, #36]	@ 0x24
 801120c:	4e2d      	ldr	r6, [pc, #180]	@ (80112c4 <_svfiprintf_r+0x1ec>)
 801120e:	2203      	movs	r2, #3
 8011210:	0030      	movs	r0, r6
 8011212:	7829      	ldrb	r1, [r5, #0]
 8011214:	f7fe fbd5 	bl	800f9c2 <memchr>
 8011218:	2800      	cmp	r0, #0
 801121a:	d006      	beq.n	801122a <_svfiprintf_r+0x152>
 801121c:	2340      	movs	r3, #64	@ 0x40
 801121e:	1b80      	subs	r0, r0, r6
 8011220:	4083      	lsls	r3, r0
 8011222:	6822      	ldr	r2, [r4, #0]
 8011224:	3501      	adds	r5, #1
 8011226:	4313      	orrs	r3, r2
 8011228:	6023      	str	r3, [r4, #0]
 801122a:	7829      	ldrb	r1, [r5, #0]
 801122c:	2206      	movs	r2, #6
 801122e:	4826      	ldr	r0, [pc, #152]	@ (80112c8 <_svfiprintf_r+0x1f0>)
 8011230:	1c6e      	adds	r6, r5, #1
 8011232:	7621      	strb	r1, [r4, #24]
 8011234:	f7fe fbc5 	bl	800f9c2 <memchr>
 8011238:	2800      	cmp	r0, #0
 801123a:	d038      	beq.n	80112ae <_svfiprintf_r+0x1d6>
 801123c:	4b23      	ldr	r3, [pc, #140]	@ (80112cc <_svfiprintf_r+0x1f4>)
 801123e:	2b00      	cmp	r3, #0
 8011240:	d122      	bne.n	8011288 <_svfiprintf_r+0x1b0>
 8011242:	2207      	movs	r2, #7
 8011244:	9b07      	ldr	r3, [sp, #28]
 8011246:	3307      	adds	r3, #7
 8011248:	4393      	bics	r3, r2
 801124a:	3308      	adds	r3, #8
 801124c:	9307      	str	r3, [sp, #28]
 801124e:	6963      	ldr	r3, [r4, #20]
 8011250:	9a04      	ldr	r2, [sp, #16]
 8011252:	189b      	adds	r3, r3, r2
 8011254:	6163      	str	r3, [r4, #20]
 8011256:	e762      	b.n	801111e <_svfiprintf_r+0x46>
 8011258:	4343      	muls	r3, r0
 801125a:	0035      	movs	r5, r6
 801125c:	2101      	movs	r1, #1
 801125e:	189b      	adds	r3, r3, r2
 8011260:	e7a4      	b.n	80111ac <_svfiprintf_r+0xd4>
 8011262:	2300      	movs	r3, #0
 8011264:	200a      	movs	r0, #10
 8011266:	0019      	movs	r1, r3
 8011268:	3501      	adds	r5, #1
 801126a:	6063      	str	r3, [r4, #4]
 801126c:	782a      	ldrb	r2, [r5, #0]
 801126e:	1c6e      	adds	r6, r5, #1
 8011270:	3a30      	subs	r2, #48	@ 0x30
 8011272:	2a09      	cmp	r2, #9
 8011274:	d903      	bls.n	801127e <_svfiprintf_r+0x1a6>
 8011276:	2b00      	cmp	r3, #0
 8011278:	d0c8      	beq.n	801120c <_svfiprintf_r+0x134>
 801127a:	9109      	str	r1, [sp, #36]	@ 0x24
 801127c:	e7c6      	b.n	801120c <_svfiprintf_r+0x134>
 801127e:	4341      	muls	r1, r0
 8011280:	0035      	movs	r5, r6
 8011282:	2301      	movs	r3, #1
 8011284:	1889      	adds	r1, r1, r2
 8011286:	e7f1      	b.n	801126c <_svfiprintf_r+0x194>
 8011288:	aa07      	add	r2, sp, #28
 801128a:	9200      	str	r2, [sp, #0]
 801128c:	0021      	movs	r1, r4
 801128e:	003a      	movs	r2, r7
 8011290:	4b0f      	ldr	r3, [pc, #60]	@ (80112d0 <_svfiprintf_r+0x1f8>)
 8011292:	9803      	ldr	r0, [sp, #12]
 8011294:	f7fd fdec 	bl	800ee70 <_printf_float>
 8011298:	9004      	str	r0, [sp, #16]
 801129a:	9b04      	ldr	r3, [sp, #16]
 801129c:	3301      	adds	r3, #1
 801129e:	d1d6      	bne.n	801124e <_svfiprintf_r+0x176>
 80112a0:	89bb      	ldrh	r3, [r7, #12]
 80112a2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80112a4:	065b      	lsls	r3, r3, #25
 80112a6:	d500      	bpl.n	80112aa <_svfiprintf_r+0x1d2>
 80112a8:	e72c      	b.n	8011104 <_svfiprintf_r+0x2c>
 80112aa:	b021      	add	sp, #132	@ 0x84
 80112ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ae:	aa07      	add	r2, sp, #28
 80112b0:	9200      	str	r2, [sp, #0]
 80112b2:	0021      	movs	r1, r4
 80112b4:	003a      	movs	r2, r7
 80112b6:	4b06      	ldr	r3, [pc, #24]	@ (80112d0 <_svfiprintf_r+0x1f8>)
 80112b8:	9803      	ldr	r0, [sp, #12]
 80112ba:	f7fe f887 	bl	800f3cc <_printf_i>
 80112be:	e7eb      	b.n	8011298 <_svfiprintf_r+0x1c0>
 80112c0:	080122ce 	.word	0x080122ce
 80112c4:	080122d4 	.word	0x080122d4
 80112c8:	080122d8 	.word	0x080122d8
 80112cc:	0800ee71 	.word	0x0800ee71
 80112d0:	08011019 	.word	0x08011019

080112d4 <__sflush_r>:
 80112d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112d6:	220c      	movs	r2, #12
 80112d8:	5e8b      	ldrsh	r3, [r1, r2]
 80112da:	0005      	movs	r5, r0
 80112dc:	000c      	movs	r4, r1
 80112de:	071a      	lsls	r2, r3, #28
 80112e0:	d456      	bmi.n	8011390 <__sflush_r+0xbc>
 80112e2:	684a      	ldr	r2, [r1, #4]
 80112e4:	2a00      	cmp	r2, #0
 80112e6:	dc02      	bgt.n	80112ee <__sflush_r+0x1a>
 80112e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80112ea:	2a00      	cmp	r2, #0
 80112ec:	dd4e      	ble.n	801138c <__sflush_r+0xb8>
 80112ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80112f0:	2f00      	cmp	r7, #0
 80112f2:	d04b      	beq.n	801138c <__sflush_r+0xb8>
 80112f4:	2200      	movs	r2, #0
 80112f6:	2080      	movs	r0, #128	@ 0x80
 80112f8:	682e      	ldr	r6, [r5, #0]
 80112fa:	602a      	str	r2, [r5, #0]
 80112fc:	001a      	movs	r2, r3
 80112fe:	0140      	lsls	r0, r0, #5
 8011300:	6a21      	ldr	r1, [r4, #32]
 8011302:	4002      	ands	r2, r0
 8011304:	4203      	tst	r3, r0
 8011306:	d033      	beq.n	8011370 <__sflush_r+0x9c>
 8011308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801130a:	89a3      	ldrh	r3, [r4, #12]
 801130c:	075b      	lsls	r3, r3, #29
 801130e:	d506      	bpl.n	801131e <__sflush_r+0x4a>
 8011310:	6863      	ldr	r3, [r4, #4]
 8011312:	1ad2      	subs	r2, r2, r3
 8011314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <__sflush_r+0x4a>
 801131a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801131c:	1ad2      	subs	r2, r2, r3
 801131e:	2300      	movs	r3, #0
 8011320:	0028      	movs	r0, r5
 8011322:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011324:	6a21      	ldr	r1, [r4, #32]
 8011326:	47b8      	blx	r7
 8011328:	89a2      	ldrh	r2, [r4, #12]
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	d106      	bne.n	801133c <__sflush_r+0x68>
 801132e:	6829      	ldr	r1, [r5, #0]
 8011330:	291d      	cmp	r1, #29
 8011332:	d846      	bhi.n	80113c2 <__sflush_r+0xee>
 8011334:	4b29      	ldr	r3, [pc, #164]	@ (80113dc <__sflush_r+0x108>)
 8011336:	40cb      	lsrs	r3, r1
 8011338:	07db      	lsls	r3, r3, #31
 801133a:	d542      	bpl.n	80113c2 <__sflush_r+0xee>
 801133c:	2300      	movs	r3, #0
 801133e:	6063      	str	r3, [r4, #4]
 8011340:	6923      	ldr	r3, [r4, #16]
 8011342:	6023      	str	r3, [r4, #0]
 8011344:	04d2      	lsls	r2, r2, #19
 8011346:	d505      	bpl.n	8011354 <__sflush_r+0x80>
 8011348:	1c43      	adds	r3, r0, #1
 801134a:	d102      	bne.n	8011352 <__sflush_r+0x7e>
 801134c:	682b      	ldr	r3, [r5, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d100      	bne.n	8011354 <__sflush_r+0x80>
 8011352:	6560      	str	r0, [r4, #84]	@ 0x54
 8011354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011356:	602e      	str	r6, [r5, #0]
 8011358:	2900      	cmp	r1, #0
 801135a:	d017      	beq.n	801138c <__sflush_r+0xb8>
 801135c:	0023      	movs	r3, r4
 801135e:	3344      	adds	r3, #68	@ 0x44
 8011360:	4299      	cmp	r1, r3
 8011362:	d002      	beq.n	801136a <__sflush_r+0x96>
 8011364:	0028      	movs	r0, r5
 8011366:	f7ff f9b5 	bl	80106d4 <_free_r>
 801136a:	2300      	movs	r3, #0
 801136c:	6363      	str	r3, [r4, #52]	@ 0x34
 801136e:	e00d      	b.n	801138c <__sflush_r+0xb8>
 8011370:	2301      	movs	r3, #1
 8011372:	0028      	movs	r0, r5
 8011374:	47b8      	blx	r7
 8011376:	0002      	movs	r2, r0
 8011378:	1c43      	adds	r3, r0, #1
 801137a:	d1c6      	bne.n	801130a <__sflush_r+0x36>
 801137c:	682b      	ldr	r3, [r5, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d0c3      	beq.n	801130a <__sflush_r+0x36>
 8011382:	2b1d      	cmp	r3, #29
 8011384:	d001      	beq.n	801138a <__sflush_r+0xb6>
 8011386:	2b16      	cmp	r3, #22
 8011388:	d11a      	bne.n	80113c0 <__sflush_r+0xec>
 801138a:	602e      	str	r6, [r5, #0]
 801138c:	2000      	movs	r0, #0
 801138e:	e01e      	b.n	80113ce <__sflush_r+0xfa>
 8011390:	690e      	ldr	r6, [r1, #16]
 8011392:	2e00      	cmp	r6, #0
 8011394:	d0fa      	beq.n	801138c <__sflush_r+0xb8>
 8011396:	680f      	ldr	r7, [r1, #0]
 8011398:	600e      	str	r6, [r1, #0]
 801139a:	1bba      	subs	r2, r7, r6
 801139c:	9201      	str	r2, [sp, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	079b      	lsls	r3, r3, #30
 80113a2:	d100      	bne.n	80113a6 <__sflush_r+0xd2>
 80113a4:	694a      	ldr	r2, [r1, #20]
 80113a6:	60a2      	str	r2, [r4, #8]
 80113a8:	9b01      	ldr	r3, [sp, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	ddee      	ble.n	801138c <__sflush_r+0xb8>
 80113ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80113b0:	0032      	movs	r2, r6
 80113b2:	001f      	movs	r7, r3
 80113b4:	0028      	movs	r0, r5
 80113b6:	9b01      	ldr	r3, [sp, #4]
 80113b8:	6a21      	ldr	r1, [r4, #32]
 80113ba:	47b8      	blx	r7
 80113bc:	2800      	cmp	r0, #0
 80113be:	dc07      	bgt.n	80113d0 <__sflush_r+0xfc>
 80113c0:	89a2      	ldrh	r2, [r4, #12]
 80113c2:	2340      	movs	r3, #64	@ 0x40
 80113c4:	2001      	movs	r0, #1
 80113c6:	4313      	orrs	r3, r2
 80113c8:	b21b      	sxth	r3, r3
 80113ca:	81a3      	strh	r3, [r4, #12]
 80113cc:	4240      	negs	r0, r0
 80113ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80113d0:	9b01      	ldr	r3, [sp, #4]
 80113d2:	1836      	adds	r6, r6, r0
 80113d4:	1a1b      	subs	r3, r3, r0
 80113d6:	9301      	str	r3, [sp, #4]
 80113d8:	e7e6      	b.n	80113a8 <__sflush_r+0xd4>
 80113da:	46c0      	nop			@ (mov r8, r8)
 80113dc:	20400001 	.word	0x20400001

080113e0 <_fflush_r>:
 80113e0:	690b      	ldr	r3, [r1, #16]
 80113e2:	b570      	push	{r4, r5, r6, lr}
 80113e4:	0005      	movs	r5, r0
 80113e6:	000c      	movs	r4, r1
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d102      	bne.n	80113f2 <_fflush_r+0x12>
 80113ec:	2500      	movs	r5, #0
 80113ee:	0028      	movs	r0, r5
 80113f0:	bd70      	pop	{r4, r5, r6, pc}
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d004      	beq.n	8011400 <_fflush_r+0x20>
 80113f6:	6a03      	ldr	r3, [r0, #32]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d101      	bne.n	8011400 <_fflush_r+0x20>
 80113fc:	f7fe f982 	bl	800f704 <__sinit>
 8011400:	220c      	movs	r2, #12
 8011402:	5ea3      	ldrsh	r3, [r4, r2]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d0f1      	beq.n	80113ec <_fflush_r+0xc>
 8011408:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801140a:	07d2      	lsls	r2, r2, #31
 801140c:	d404      	bmi.n	8011418 <_fflush_r+0x38>
 801140e:	059b      	lsls	r3, r3, #22
 8011410:	d402      	bmi.n	8011418 <_fflush_r+0x38>
 8011412:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011414:	f7fe fad3 	bl	800f9be <__retarget_lock_acquire_recursive>
 8011418:	0028      	movs	r0, r5
 801141a:	0021      	movs	r1, r4
 801141c:	f7ff ff5a 	bl	80112d4 <__sflush_r>
 8011420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011422:	0005      	movs	r5, r0
 8011424:	07db      	lsls	r3, r3, #31
 8011426:	d4e2      	bmi.n	80113ee <_fflush_r+0xe>
 8011428:	89a3      	ldrh	r3, [r4, #12]
 801142a:	059b      	lsls	r3, r3, #22
 801142c:	d4df      	bmi.n	80113ee <_fflush_r+0xe>
 801142e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011430:	f7fe fac6 	bl	800f9c0 <__retarget_lock_release_recursive>
 8011434:	e7db      	b.n	80113ee <_fflush_r+0xe>

08011436 <memmove>:
 8011436:	b510      	push	{r4, lr}
 8011438:	4288      	cmp	r0, r1
 801143a:	d902      	bls.n	8011442 <memmove+0xc>
 801143c:	188b      	adds	r3, r1, r2
 801143e:	4298      	cmp	r0, r3
 8011440:	d308      	bcc.n	8011454 <memmove+0x1e>
 8011442:	2300      	movs	r3, #0
 8011444:	429a      	cmp	r2, r3
 8011446:	d007      	beq.n	8011458 <memmove+0x22>
 8011448:	5ccc      	ldrb	r4, [r1, r3]
 801144a:	54c4      	strb	r4, [r0, r3]
 801144c:	3301      	adds	r3, #1
 801144e:	e7f9      	b.n	8011444 <memmove+0xe>
 8011450:	5c8b      	ldrb	r3, [r1, r2]
 8011452:	5483      	strb	r3, [r0, r2]
 8011454:	3a01      	subs	r2, #1
 8011456:	d2fb      	bcs.n	8011450 <memmove+0x1a>
 8011458:	bd10      	pop	{r4, pc}
	...

0801145c <_sbrk_r>:
 801145c:	2300      	movs	r3, #0
 801145e:	b570      	push	{r4, r5, r6, lr}
 8011460:	4d06      	ldr	r5, [pc, #24]	@ (801147c <_sbrk_r+0x20>)
 8011462:	0004      	movs	r4, r0
 8011464:	0008      	movs	r0, r1
 8011466:	602b      	str	r3, [r5, #0]
 8011468:	f7f4 f9fa 	bl	8005860 <_sbrk>
 801146c:	1c43      	adds	r3, r0, #1
 801146e:	d103      	bne.n	8011478 <_sbrk_r+0x1c>
 8011470:	682b      	ldr	r3, [r5, #0]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d000      	beq.n	8011478 <_sbrk_r+0x1c>
 8011476:	6023      	str	r3, [r4, #0]
 8011478:	bd70      	pop	{r4, r5, r6, pc}
 801147a:	46c0      	nop			@ (mov r8, r8)
 801147c:	200008a8 	.word	0x200008a8

08011480 <__assert_func>:
 8011480:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011482:	0014      	movs	r4, r2
 8011484:	001a      	movs	r2, r3
 8011486:	4b09      	ldr	r3, [pc, #36]	@ (80114ac <__assert_func+0x2c>)
 8011488:	0005      	movs	r5, r0
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	000e      	movs	r6, r1
 801148e:	68d8      	ldr	r0, [r3, #12]
 8011490:	4b07      	ldr	r3, [pc, #28]	@ (80114b0 <__assert_func+0x30>)
 8011492:	2c00      	cmp	r4, #0
 8011494:	d101      	bne.n	801149a <__assert_func+0x1a>
 8011496:	4b07      	ldr	r3, [pc, #28]	@ (80114b4 <__assert_func+0x34>)
 8011498:	001c      	movs	r4, r3
 801149a:	4907      	ldr	r1, [pc, #28]	@ (80114b8 <__assert_func+0x38>)
 801149c:	9301      	str	r3, [sp, #4]
 801149e:	9402      	str	r4, [sp, #8]
 80114a0:	002b      	movs	r3, r5
 80114a2:	9600      	str	r6, [sp, #0]
 80114a4:	f000 f886 	bl	80115b4 <fiprintf>
 80114a8:	f000 f894 	bl	80115d4 <abort>
 80114ac:	2000001c 	.word	0x2000001c
 80114b0:	080122e9 	.word	0x080122e9
 80114b4:	08012324 	.word	0x08012324
 80114b8:	080122f6 	.word	0x080122f6

080114bc <_calloc_r>:
 80114bc:	b570      	push	{r4, r5, r6, lr}
 80114be:	0c0b      	lsrs	r3, r1, #16
 80114c0:	0c15      	lsrs	r5, r2, #16
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d11e      	bne.n	8011504 <_calloc_r+0x48>
 80114c6:	2d00      	cmp	r5, #0
 80114c8:	d10c      	bne.n	80114e4 <_calloc_r+0x28>
 80114ca:	b289      	uxth	r1, r1
 80114cc:	b294      	uxth	r4, r2
 80114ce:	434c      	muls	r4, r1
 80114d0:	0021      	movs	r1, r4
 80114d2:	f7ff f975 	bl	80107c0 <_malloc_r>
 80114d6:	1e05      	subs	r5, r0, #0
 80114d8:	d01b      	beq.n	8011512 <_calloc_r+0x56>
 80114da:	0022      	movs	r2, r4
 80114dc:	2100      	movs	r1, #0
 80114de:	f7fe f9e9 	bl	800f8b4 <memset>
 80114e2:	e016      	b.n	8011512 <_calloc_r+0x56>
 80114e4:	1c2b      	adds	r3, r5, #0
 80114e6:	1c0c      	adds	r4, r1, #0
 80114e8:	b289      	uxth	r1, r1
 80114ea:	b292      	uxth	r2, r2
 80114ec:	434a      	muls	r2, r1
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	b2a1      	uxth	r1, r4
 80114f2:	4359      	muls	r1, r3
 80114f4:	0c14      	lsrs	r4, r2, #16
 80114f6:	190c      	adds	r4, r1, r4
 80114f8:	0c23      	lsrs	r3, r4, #16
 80114fa:	d107      	bne.n	801150c <_calloc_r+0x50>
 80114fc:	0424      	lsls	r4, r4, #16
 80114fe:	b292      	uxth	r2, r2
 8011500:	4314      	orrs	r4, r2
 8011502:	e7e5      	b.n	80114d0 <_calloc_r+0x14>
 8011504:	2d00      	cmp	r5, #0
 8011506:	d101      	bne.n	801150c <_calloc_r+0x50>
 8011508:	1c14      	adds	r4, r2, #0
 801150a:	e7ed      	b.n	80114e8 <_calloc_r+0x2c>
 801150c:	230c      	movs	r3, #12
 801150e:	2500      	movs	r5, #0
 8011510:	6003      	str	r3, [r0, #0]
 8011512:	0028      	movs	r0, r5
 8011514:	bd70      	pop	{r4, r5, r6, pc}

08011516 <__ascii_mbtowc>:
 8011516:	b082      	sub	sp, #8
 8011518:	2900      	cmp	r1, #0
 801151a:	d100      	bne.n	801151e <__ascii_mbtowc+0x8>
 801151c:	a901      	add	r1, sp, #4
 801151e:	1e10      	subs	r0, r2, #0
 8011520:	d006      	beq.n	8011530 <__ascii_mbtowc+0x1a>
 8011522:	2b00      	cmp	r3, #0
 8011524:	d006      	beq.n	8011534 <__ascii_mbtowc+0x1e>
 8011526:	7813      	ldrb	r3, [r2, #0]
 8011528:	600b      	str	r3, [r1, #0]
 801152a:	7810      	ldrb	r0, [r2, #0]
 801152c:	1e43      	subs	r3, r0, #1
 801152e:	4198      	sbcs	r0, r3
 8011530:	b002      	add	sp, #8
 8011532:	4770      	bx	lr
 8011534:	2002      	movs	r0, #2
 8011536:	4240      	negs	r0, r0
 8011538:	e7fa      	b.n	8011530 <__ascii_mbtowc+0x1a>

0801153a <_realloc_r>:
 801153a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801153c:	0006      	movs	r6, r0
 801153e:	000c      	movs	r4, r1
 8011540:	0015      	movs	r5, r2
 8011542:	2900      	cmp	r1, #0
 8011544:	d105      	bne.n	8011552 <_realloc_r+0x18>
 8011546:	0011      	movs	r1, r2
 8011548:	f7ff f93a 	bl	80107c0 <_malloc_r>
 801154c:	0004      	movs	r4, r0
 801154e:	0020      	movs	r0, r4
 8011550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011552:	2a00      	cmp	r2, #0
 8011554:	d103      	bne.n	801155e <_realloc_r+0x24>
 8011556:	f7ff f8bd 	bl	80106d4 <_free_r>
 801155a:	002c      	movs	r4, r5
 801155c:	e7f7      	b.n	801154e <_realloc_r+0x14>
 801155e:	f000 f840 	bl	80115e2 <_malloc_usable_size_r>
 8011562:	0007      	movs	r7, r0
 8011564:	4285      	cmp	r5, r0
 8011566:	d802      	bhi.n	801156e <_realloc_r+0x34>
 8011568:	0843      	lsrs	r3, r0, #1
 801156a:	42ab      	cmp	r3, r5
 801156c:	d3ef      	bcc.n	801154e <_realloc_r+0x14>
 801156e:	0029      	movs	r1, r5
 8011570:	0030      	movs	r0, r6
 8011572:	f7ff f925 	bl	80107c0 <_malloc_r>
 8011576:	9001      	str	r0, [sp, #4]
 8011578:	2800      	cmp	r0, #0
 801157a:	d101      	bne.n	8011580 <_realloc_r+0x46>
 801157c:	9c01      	ldr	r4, [sp, #4]
 801157e:	e7e6      	b.n	801154e <_realloc_r+0x14>
 8011580:	002a      	movs	r2, r5
 8011582:	42bd      	cmp	r5, r7
 8011584:	d900      	bls.n	8011588 <_realloc_r+0x4e>
 8011586:	003a      	movs	r2, r7
 8011588:	0021      	movs	r1, r4
 801158a:	9801      	ldr	r0, [sp, #4]
 801158c:	f7fe fa24 	bl	800f9d8 <memcpy>
 8011590:	0021      	movs	r1, r4
 8011592:	0030      	movs	r0, r6
 8011594:	f7ff f89e 	bl	80106d4 <_free_r>
 8011598:	e7f0      	b.n	801157c <_realloc_r+0x42>

0801159a <__ascii_wctomb>:
 801159a:	0003      	movs	r3, r0
 801159c:	1e08      	subs	r0, r1, #0
 801159e:	d005      	beq.n	80115ac <__ascii_wctomb+0x12>
 80115a0:	2aff      	cmp	r2, #255	@ 0xff
 80115a2:	d904      	bls.n	80115ae <__ascii_wctomb+0x14>
 80115a4:	228a      	movs	r2, #138	@ 0x8a
 80115a6:	2001      	movs	r0, #1
 80115a8:	601a      	str	r2, [r3, #0]
 80115aa:	4240      	negs	r0, r0
 80115ac:	4770      	bx	lr
 80115ae:	2001      	movs	r0, #1
 80115b0:	700a      	strb	r2, [r1, #0]
 80115b2:	e7fb      	b.n	80115ac <__ascii_wctomb+0x12>

080115b4 <fiprintf>:
 80115b4:	b40e      	push	{r1, r2, r3}
 80115b6:	b517      	push	{r0, r1, r2, r4, lr}
 80115b8:	4c05      	ldr	r4, [pc, #20]	@ (80115d0 <fiprintf+0x1c>)
 80115ba:	ab05      	add	r3, sp, #20
 80115bc:	cb04      	ldmia	r3!, {r2}
 80115be:	0001      	movs	r1, r0
 80115c0:	6820      	ldr	r0, [r4, #0]
 80115c2:	9301      	str	r3, [sp, #4]
 80115c4:	f000 f83c 	bl	8011640 <_vfiprintf_r>
 80115c8:	bc1e      	pop	{r1, r2, r3, r4}
 80115ca:	bc08      	pop	{r3}
 80115cc:	b003      	add	sp, #12
 80115ce:	4718      	bx	r3
 80115d0:	2000001c 	.word	0x2000001c

080115d4 <abort>:
 80115d4:	2006      	movs	r0, #6
 80115d6:	b510      	push	{r4, lr}
 80115d8:	f000 fa18 	bl	8011a0c <raise>
 80115dc:	2001      	movs	r0, #1
 80115de:	f7f4 f8cd 	bl	800577c <_exit>

080115e2 <_malloc_usable_size_r>:
 80115e2:	1f0b      	subs	r3, r1, #4
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	1f18      	subs	r0, r3, #4
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	da01      	bge.n	80115f0 <_malloc_usable_size_r+0xe>
 80115ec:	580b      	ldr	r3, [r1, r0]
 80115ee:	18c0      	adds	r0, r0, r3
 80115f0:	4770      	bx	lr

080115f2 <__sfputc_r>:
 80115f2:	6893      	ldr	r3, [r2, #8]
 80115f4:	b510      	push	{r4, lr}
 80115f6:	3b01      	subs	r3, #1
 80115f8:	6093      	str	r3, [r2, #8]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	da04      	bge.n	8011608 <__sfputc_r+0x16>
 80115fe:	6994      	ldr	r4, [r2, #24]
 8011600:	42a3      	cmp	r3, r4
 8011602:	db07      	blt.n	8011614 <__sfputc_r+0x22>
 8011604:	290a      	cmp	r1, #10
 8011606:	d005      	beq.n	8011614 <__sfputc_r+0x22>
 8011608:	6813      	ldr	r3, [r2, #0]
 801160a:	1c58      	adds	r0, r3, #1
 801160c:	6010      	str	r0, [r2, #0]
 801160e:	7019      	strb	r1, [r3, #0]
 8011610:	0008      	movs	r0, r1
 8011612:	bd10      	pop	{r4, pc}
 8011614:	f000 f930 	bl	8011878 <__swbuf_r>
 8011618:	0001      	movs	r1, r0
 801161a:	e7f9      	b.n	8011610 <__sfputc_r+0x1e>

0801161c <__sfputs_r>:
 801161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161e:	0006      	movs	r6, r0
 8011620:	000f      	movs	r7, r1
 8011622:	0014      	movs	r4, r2
 8011624:	18d5      	adds	r5, r2, r3
 8011626:	42ac      	cmp	r4, r5
 8011628:	d101      	bne.n	801162e <__sfputs_r+0x12>
 801162a:	2000      	movs	r0, #0
 801162c:	e007      	b.n	801163e <__sfputs_r+0x22>
 801162e:	7821      	ldrb	r1, [r4, #0]
 8011630:	003a      	movs	r2, r7
 8011632:	0030      	movs	r0, r6
 8011634:	f7ff ffdd 	bl	80115f2 <__sfputc_r>
 8011638:	3401      	adds	r4, #1
 801163a:	1c43      	adds	r3, r0, #1
 801163c:	d1f3      	bne.n	8011626 <__sfputs_r+0xa>
 801163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011640 <_vfiprintf_r>:
 8011640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011642:	b0a1      	sub	sp, #132	@ 0x84
 8011644:	000f      	movs	r7, r1
 8011646:	0015      	movs	r5, r2
 8011648:	001e      	movs	r6, r3
 801164a:	9003      	str	r0, [sp, #12]
 801164c:	2800      	cmp	r0, #0
 801164e:	d004      	beq.n	801165a <_vfiprintf_r+0x1a>
 8011650:	6a03      	ldr	r3, [r0, #32]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d101      	bne.n	801165a <_vfiprintf_r+0x1a>
 8011656:	f7fe f855 	bl	800f704 <__sinit>
 801165a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801165c:	07db      	lsls	r3, r3, #31
 801165e:	d405      	bmi.n	801166c <_vfiprintf_r+0x2c>
 8011660:	89bb      	ldrh	r3, [r7, #12]
 8011662:	059b      	lsls	r3, r3, #22
 8011664:	d402      	bmi.n	801166c <_vfiprintf_r+0x2c>
 8011666:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011668:	f7fe f9a9 	bl	800f9be <__retarget_lock_acquire_recursive>
 801166c:	89bb      	ldrh	r3, [r7, #12]
 801166e:	071b      	lsls	r3, r3, #28
 8011670:	d502      	bpl.n	8011678 <_vfiprintf_r+0x38>
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d113      	bne.n	80116a0 <_vfiprintf_r+0x60>
 8011678:	0039      	movs	r1, r7
 801167a:	9803      	ldr	r0, [sp, #12]
 801167c:	f000 f93e 	bl	80118fc <__swsetup_r>
 8011680:	2800      	cmp	r0, #0
 8011682:	d00d      	beq.n	80116a0 <_vfiprintf_r+0x60>
 8011684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011686:	07db      	lsls	r3, r3, #31
 8011688:	d503      	bpl.n	8011692 <_vfiprintf_r+0x52>
 801168a:	2001      	movs	r0, #1
 801168c:	4240      	negs	r0, r0
 801168e:	b021      	add	sp, #132	@ 0x84
 8011690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011692:	89bb      	ldrh	r3, [r7, #12]
 8011694:	059b      	lsls	r3, r3, #22
 8011696:	d4f8      	bmi.n	801168a <_vfiprintf_r+0x4a>
 8011698:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801169a:	f7fe f991 	bl	800f9c0 <__retarget_lock_release_recursive>
 801169e:	e7f4      	b.n	801168a <_vfiprintf_r+0x4a>
 80116a0:	2300      	movs	r3, #0
 80116a2:	ac08      	add	r4, sp, #32
 80116a4:	6163      	str	r3, [r4, #20]
 80116a6:	3320      	adds	r3, #32
 80116a8:	7663      	strb	r3, [r4, #25]
 80116aa:	3310      	adds	r3, #16
 80116ac:	76a3      	strb	r3, [r4, #26]
 80116ae:	9607      	str	r6, [sp, #28]
 80116b0:	002e      	movs	r6, r5
 80116b2:	7833      	ldrb	r3, [r6, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d001      	beq.n	80116bc <_vfiprintf_r+0x7c>
 80116b8:	2b25      	cmp	r3, #37	@ 0x25
 80116ba:	d148      	bne.n	801174e <_vfiprintf_r+0x10e>
 80116bc:	1b73      	subs	r3, r6, r5
 80116be:	9305      	str	r3, [sp, #20]
 80116c0:	42ae      	cmp	r6, r5
 80116c2:	d00b      	beq.n	80116dc <_vfiprintf_r+0x9c>
 80116c4:	002a      	movs	r2, r5
 80116c6:	0039      	movs	r1, r7
 80116c8:	9803      	ldr	r0, [sp, #12]
 80116ca:	f7ff ffa7 	bl	801161c <__sfputs_r>
 80116ce:	3001      	adds	r0, #1
 80116d0:	d100      	bne.n	80116d4 <_vfiprintf_r+0x94>
 80116d2:	e0ae      	b.n	8011832 <_vfiprintf_r+0x1f2>
 80116d4:	6963      	ldr	r3, [r4, #20]
 80116d6:	9a05      	ldr	r2, [sp, #20]
 80116d8:	189b      	adds	r3, r3, r2
 80116da:	6163      	str	r3, [r4, #20]
 80116dc:	7833      	ldrb	r3, [r6, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d100      	bne.n	80116e4 <_vfiprintf_r+0xa4>
 80116e2:	e0a6      	b.n	8011832 <_vfiprintf_r+0x1f2>
 80116e4:	2201      	movs	r2, #1
 80116e6:	2300      	movs	r3, #0
 80116e8:	4252      	negs	r2, r2
 80116ea:	6062      	str	r2, [r4, #4]
 80116ec:	a904      	add	r1, sp, #16
 80116ee:	3254      	adds	r2, #84	@ 0x54
 80116f0:	1852      	adds	r2, r2, r1
 80116f2:	1c75      	adds	r5, r6, #1
 80116f4:	6023      	str	r3, [r4, #0]
 80116f6:	60e3      	str	r3, [r4, #12]
 80116f8:	60a3      	str	r3, [r4, #8]
 80116fa:	7013      	strb	r3, [r2, #0]
 80116fc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80116fe:	4b59      	ldr	r3, [pc, #356]	@ (8011864 <_vfiprintf_r+0x224>)
 8011700:	2205      	movs	r2, #5
 8011702:	0018      	movs	r0, r3
 8011704:	7829      	ldrb	r1, [r5, #0]
 8011706:	9305      	str	r3, [sp, #20]
 8011708:	f7fe f95b 	bl	800f9c2 <memchr>
 801170c:	1c6e      	adds	r6, r5, #1
 801170e:	2800      	cmp	r0, #0
 8011710:	d11f      	bne.n	8011752 <_vfiprintf_r+0x112>
 8011712:	6822      	ldr	r2, [r4, #0]
 8011714:	06d3      	lsls	r3, r2, #27
 8011716:	d504      	bpl.n	8011722 <_vfiprintf_r+0xe2>
 8011718:	2353      	movs	r3, #83	@ 0x53
 801171a:	a904      	add	r1, sp, #16
 801171c:	185b      	adds	r3, r3, r1
 801171e:	2120      	movs	r1, #32
 8011720:	7019      	strb	r1, [r3, #0]
 8011722:	0713      	lsls	r3, r2, #28
 8011724:	d504      	bpl.n	8011730 <_vfiprintf_r+0xf0>
 8011726:	2353      	movs	r3, #83	@ 0x53
 8011728:	a904      	add	r1, sp, #16
 801172a:	185b      	adds	r3, r3, r1
 801172c:	212b      	movs	r1, #43	@ 0x2b
 801172e:	7019      	strb	r1, [r3, #0]
 8011730:	782b      	ldrb	r3, [r5, #0]
 8011732:	2b2a      	cmp	r3, #42	@ 0x2a
 8011734:	d016      	beq.n	8011764 <_vfiprintf_r+0x124>
 8011736:	002e      	movs	r6, r5
 8011738:	2100      	movs	r1, #0
 801173a:	200a      	movs	r0, #10
 801173c:	68e3      	ldr	r3, [r4, #12]
 801173e:	7832      	ldrb	r2, [r6, #0]
 8011740:	1c75      	adds	r5, r6, #1
 8011742:	3a30      	subs	r2, #48	@ 0x30
 8011744:	2a09      	cmp	r2, #9
 8011746:	d950      	bls.n	80117ea <_vfiprintf_r+0x1aa>
 8011748:	2900      	cmp	r1, #0
 801174a:	d111      	bne.n	8011770 <_vfiprintf_r+0x130>
 801174c:	e017      	b.n	801177e <_vfiprintf_r+0x13e>
 801174e:	3601      	adds	r6, #1
 8011750:	e7af      	b.n	80116b2 <_vfiprintf_r+0x72>
 8011752:	9b05      	ldr	r3, [sp, #20]
 8011754:	6822      	ldr	r2, [r4, #0]
 8011756:	1ac0      	subs	r0, r0, r3
 8011758:	2301      	movs	r3, #1
 801175a:	4083      	lsls	r3, r0
 801175c:	4313      	orrs	r3, r2
 801175e:	0035      	movs	r5, r6
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	e7cc      	b.n	80116fe <_vfiprintf_r+0xbe>
 8011764:	9b07      	ldr	r3, [sp, #28]
 8011766:	1d19      	adds	r1, r3, #4
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	9107      	str	r1, [sp, #28]
 801176c:	2b00      	cmp	r3, #0
 801176e:	db01      	blt.n	8011774 <_vfiprintf_r+0x134>
 8011770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011772:	e004      	b.n	801177e <_vfiprintf_r+0x13e>
 8011774:	425b      	negs	r3, r3
 8011776:	60e3      	str	r3, [r4, #12]
 8011778:	2302      	movs	r3, #2
 801177a:	4313      	orrs	r3, r2
 801177c:	6023      	str	r3, [r4, #0]
 801177e:	7833      	ldrb	r3, [r6, #0]
 8011780:	2b2e      	cmp	r3, #46	@ 0x2e
 8011782:	d10c      	bne.n	801179e <_vfiprintf_r+0x15e>
 8011784:	7873      	ldrb	r3, [r6, #1]
 8011786:	2b2a      	cmp	r3, #42	@ 0x2a
 8011788:	d134      	bne.n	80117f4 <_vfiprintf_r+0x1b4>
 801178a:	9b07      	ldr	r3, [sp, #28]
 801178c:	3602      	adds	r6, #2
 801178e:	1d1a      	adds	r2, r3, #4
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	9207      	str	r2, [sp, #28]
 8011794:	2b00      	cmp	r3, #0
 8011796:	da01      	bge.n	801179c <_vfiprintf_r+0x15c>
 8011798:	2301      	movs	r3, #1
 801179a:	425b      	negs	r3, r3
 801179c:	9309      	str	r3, [sp, #36]	@ 0x24
 801179e:	4d32      	ldr	r5, [pc, #200]	@ (8011868 <_vfiprintf_r+0x228>)
 80117a0:	2203      	movs	r2, #3
 80117a2:	0028      	movs	r0, r5
 80117a4:	7831      	ldrb	r1, [r6, #0]
 80117a6:	f7fe f90c 	bl	800f9c2 <memchr>
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d006      	beq.n	80117bc <_vfiprintf_r+0x17c>
 80117ae:	2340      	movs	r3, #64	@ 0x40
 80117b0:	1b40      	subs	r0, r0, r5
 80117b2:	4083      	lsls	r3, r0
 80117b4:	6822      	ldr	r2, [r4, #0]
 80117b6:	3601      	adds	r6, #1
 80117b8:	4313      	orrs	r3, r2
 80117ba:	6023      	str	r3, [r4, #0]
 80117bc:	7831      	ldrb	r1, [r6, #0]
 80117be:	2206      	movs	r2, #6
 80117c0:	482a      	ldr	r0, [pc, #168]	@ (801186c <_vfiprintf_r+0x22c>)
 80117c2:	1c75      	adds	r5, r6, #1
 80117c4:	7621      	strb	r1, [r4, #24]
 80117c6:	f7fe f8fc 	bl	800f9c2 <memchr>
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d040      	beq.n	8011850 <_vfiprintf_r+0x210>
 80117ce:	4b28      	ldr	r3, [pc, #160]	@ (8011870 <_vfiprintf_r+0x230>)
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d122      	bne.n	801181a <_vfiprintf_r+0x1da>
 80117d4:	2207      	movs	r2, #7
 80117d6:	9b07      	ldr	r3, [sp, #28]
 80117d8:	3307      	adds	r3, #7
 80117da:	4393      	bics	r3, r2
 80117dc:	3308      	adds	r3, #8
 80117de:	9307      	str	r3, [sp, #28]
 80117e0:	6963      	ldr	r3, [r4, #20]
 80117e2:	9a04      	ldr	r2, [sp, #16]
 80117e4:	189b      	adds	r3, r3, r2
 80117e6:	6163      	str	r3, [r4, #20]
 80117e8:	e762      	b.n	80116b0 <_vfiprintf_r+0x70>
 80117ea:	4343      	muls	r3, r0
 80117ec:	002e      	movs	r6, r5
 80117ee:	2101      	movs	r1, #1
 80117f0:	189b      	adds	r3, r3, r2
 80117f2:	e7a4      	b.n	801173e <_vfiprintf_r+0xfe>
 80117f4:	2300      	movs	r3, #0
 80117f6:	200a      	movs	r0, #10
 80117f8:	0019      	movs	r1, r3
 80117fa:	3601      	adds	r6, #1
 80117fc:	6063      	str	r3, [r4, #4]
 80117fe:	7832      	ldrb	r2, [r6, #0]
 8011800:	1c75      	adds	r5, r6, #1
 8011802:	3a30      	subs	r2, #48	@ 0x30
 8011804:	2a09      	cmp	r2, #9
 8011806:	d903      	bls.n	8011810 <_vfiprintf_r+0x1d0>
 8011808:	2b00      	cmp	r3, #0
 801180a:	d0c8      	beq.n	801179e <_vfiprintf_r+0x15e>
 801180c:	9109      	str	r1, [sp, #36]	@ 0x24
 801180e:	e7c6      	b.n	801179e <_vfiprintf_r+0x15e>
 8011810:	4341      	muls	r1, r0
 8011812:	002e      	movs	r6, r5
 8011814:	2301      	movs	r3, #1
 8011816:	1889      	adds	r1, r1, r2
 8011818:	e7f1      	b.n	80117fe <_vfiprintf_r+0x1be>
 801181a:	aa07      	add	r2, sp, #28
 801181c:	9200      	str	r2, [sp, #0]
 801181e:	0021      	movs	r1, r4
 8011820:	003a      	movs	r2, r7
 8011822:	4b14      	ldr	r3, [pc, #80]	@ (8011874 <_vfiprintf_r+0x234>)
 8011824:	9803      	ldr	r0, [sp, #12]
 8011826:	f7fd fb23 	bl	800ee70 <_printf_float>
 801182a:	9004      	str	r0, [sp, #16]
 801182c:	9b04      	ldr	r3, [sp, #16]
 801182e:	3301      	adds	r3, #1
 8011830:	d1d6      	bne.n	80117e0 <_vfiprintf_r+0x1a0>
 8011832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011834:	07db      	lsls	r3, r3, #31
 8011836:	d405      	bmi.n	8011844 <_vfiprintf_r+0x204>
 8011838:	89bb      	ldrh	r3, [r7, #12]
 801183a:	059b      	lsls	r3, r3, #22
 801183c:	d402      	bmi.n	8011844 <_vfiprintf_r+0x204>
 801183e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011840:	f7fe f8be 	bl	800f9c0 <__retarget_lock_release_recursive>
 8011844:	89bb      	ldrh	r3, [r7, #12]
 8011846:	065b      	lsls	r3, r3, #25
 8011848:	d500      	bpl.n	801184c <_vfiprintf_r+0x20c>
 801184a:	e71e      	b.n	801168a <_vfiprintf_r+0x4a>
 801184c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801184e:	e71e      	b.n	801168e <_vfiprintf_r+0x4e>
 8011850:	aa07      	add	r2, sp, #28
 8011852:	9200      	str	r2, [sp, #0]
 8011854:	0021      	movs	r1, r4
 8011856:	003a      	movs	r2, r7
 8011858:	4b06      	ldr	r3, [pc, #24]	@ (8011874 <_vfiprintf_r+0x234>)
 801185a:	9803      	ldr	r0, [sp, #12]
 801185c:	f7fd fdb6 	bl	800f3cc <_printf_i>
 8011860:	e7e3      	b.n	801182a <_vfiprintf_r+0x1ea>
 8011862:	46c0      	nop			@ (mov r8, r8)
 8011864:	080122ce 	.word	0x080122ce
 8011868:	080122d4 	.word	0x080122d4
 801186c:	080122d8 	.word	0x080122d8
 8011870:	0800ee71 	.word	0x0800ee71
 8011874:	0801161d 	.word	0x0801161d

08011878 <__swbuf_r>:
 8011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187a:	0006      	movs	r6, r0
 801187c:	000d      	movs	r5, r1
 801187e:	0014      	movs	r4, r2
 8011880:	2800      	cmp	r0, #0
 8011882:	d004      	beq.n	801188e <__swbuf_r+0x16>
 8011884:	6a03      	ldr	r3, [r0, #32]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d101      	bne.n	801188e <__swbuf_r+0x16>
 801188a:	f7fd ff3b 	bl	800f704 <__sinit>
 801188e:	69a3      	ldr	r3, [r4, #24]
 8011890:	60a3      	str	r3, [r4, #8]
 8011892:	89a3      	ldrh	r3, [r4, #12]
 8011894:	071b      	lsls	r3, r3, #28
 8011896:	d502      	bpl.n	801189e <__swbuf_r+0x26>
 8011898:	6923      	ldr	r3, [r4, #16]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d109      	bne.n	80118b2 <__swbuf_r+0x3a>
 801189e:	0021      	movs	r1, r4
 80118a0:	0030      	movs	r0, r6
 80118a2:	f000 f82b 	bl	80118fc <__swsetup_r>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d003      	beq.n	80118b2 <__swbuf_r+0x3a>
 80118aa:	2501      	movs	r5, #1
 80118ac:	426d      	negs	r5, r5
 80118ae:	0028      	movs	r0, r5
 80118b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b2:	6923      	ldr	r3, [r4, #16]
 80118b4:	6820      	ldr	r0, [r4, #0]
 80118b6:	b2ef      	uxtb	r7, r5
 80118b8:	1ac0      	subs	r0, r0, r3
 80118ba:	6963      	ldr	r3, [r4, #20]
 80118bc:	b2ed      	uxtb	r5, r5
 80118be:	4283      	cmp	r3, r0
 80118c0:	dc05      	bgt.n	80118ce <__swbuf_r+0x56>
 80118c2:	0021      	movs	r1, r4
 80118c4:	0030      	movs	r0, r6
 80118c6:	f7ff fd8b 	bl	80113e0 <_fflush_r>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d1ed      	bne.n	80118aa <__swbuf_r+0x32>
 80118ce:	68a3      	ldr	r3, [r4, #8]
 80118d0:	3001      	adds	r0, #1
 80118d2:	3b01      	subs	r3, #1
 80118d4:	60a3      	str	r3, [r4, #8]
 80118d6:	6823      	ldr	r3, [r4, #0]
 80118d8:	1c5a      	adds	r2, r3, #1
 80118da:	6022      	str	r2, [r4, #0]
 80118dc:	701f      	strb	r7, [r3, #0]
 80118de:	6963      	ldr	r3, [r4, #20]
 80118e0:	4283      	cmp	r3, r0
 80118e2:	d004      	beq.n	80118ee <__swbuf_r+0x76>
 80118e4:	89a3      	ldrh	r3, [r4, #12]
 80118e6:	07db      	lsls	r3, r3, #31
 80118e8:	d5e1      	bpl.n	80118ae <__swbuf_r+0x36>
 80118ea:	2d0a      	cmp	r5, #10
 80118ec:	d1df      	bne.n	80118ae <__swbuf_r+0x36>
 80118ee:	0021      	movs	r1, r4
 80118f0:	0030      	movs	r0, r6
 80118f2:	f7ff fd75 	bl	80113e0 <_fflush_r>
 80118f6:	2800      	cmp	r0, #0
 80118f8:	d0d9      	beq.n	80118ae <__swbuf_r+0x36>
 80118fa:	e7d6      	b.n	80118aa <__swbuf_r+0x32>

080118fc <__swsetup_r>:
 80118fc:	4b2d      	ldr	r3, [pc, #180]	@ (80119b4 <__swsetup_r+0xb8>)
 80118fe:	b570      	push	{r4, r5, r6, lr}
 8011900:	0005      	movs	r5, r0
 8011902:	6818      	ldr	r0, [r3, #0]
 8011904:	000c      	movs	r4, r1
 8011906:	2800      	cmp	r0, #0
 8011908:	d004      	beq.n	8011914 <__swsetup_r+0x18>
 801190a:	6a03      	ldr	r3, [r0, #32]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d101      	bne.n	8011914 <__swsetup_r+0x18>
 8011910:	f7fd fef8 	bl	800f704 <__sinit>
 8011914:	220c      	movs	r2, #12
 8011916:	5ea3      	ldrsh	r3, [r4, r2]
 8011918:	071a      	lsls	r2, r3, #28
 801191a:	d423      	bmi.n	8011964 <__swsetup_r+0x68>
 801191c:	06da      	lsls	r2, r3, #27
 801191e:	d407      	bmi.n	8011930 <__swsetup_r+0x34>
 8011920:	2209      	movs	r2, #9
 8011922:	602a      	str	r2, [r5, #0]
 8011924:	2240      	movs	r2, #64	@ 0x40
 8011926:	2001      	movs	r0, #1
 8011928:	4313      	orrs	r3, r2
 801192a:	81a3      	strh	r3, [r4, #12]
 801192c:	4240      	negs	r0, r0
 801192e:	e03a      	b.n	80119a6 <__swsetup_r+0xaa>
 8011930:	075b      	lsls	r3, r3, #29
 8011932:	d513      	bpl.n	801195c <__swsetup_r+0x60>
 8011934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011936:	2900      	cmp	r1, #0
 8011938:	d008      	beq.n	801194c <__swsetup_r+0x50>
 801193a:	0023      	movs	r3, r4
 801193c:	3344      	adds	r3, #68	@ 0x44
 801193e:	4299      	cmp	r1, r3
 8011940:	d002      	beq.n	8011948 <__swsetup_r+0x4c>
 8011942:	0028      	movs	r0, r5
 8011944:	f7fe fec6 	bl	80106d4 <_free_r>
 8011948:	2300      	movs	r3, #0
 801194a:	6363      	str	r3, [r4, #52]	@ 0x34
 801194c:	2224      	movs	r2, #36	@ 0x24
 801194e:	89a3      	ldrh	r3, [r4, #12]
 8011950:	4393      	bics	r3, r2
 8011952:	81a3      	strh	r3, [r4, #12]
 8011954:	2300      	movs	r3, #0
 8011956:	6063      	str	r3, [r4, #4]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	6023      	str	r3, [r4, #0]
 801195c:	2308      	movs	r3, #8
 801195e:	89a2      	ldrh	r2, [r4, #12]
 8011960:	4313      	orrs	r3, r2
 8011962:	81a3      	strh	r3, [r4, #12]
 8011964:	6923      	ldr	r3, [r4, #16]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d10b      	bne.n	8011982 <__swsetup_r+0x86>
 801196a:	21a0      	movs	r1, #160	@ 0xa0
 801196c:	2280      	movs	r2, #128	@ 0x80
 801196e:	89a3      	ldrh	r3, [r4, #12]
 8011970:	0089      	lsls	r1, r1, #2
 8011972:	0092      	lsls	r2, r2, #2
 8011974:	400b      	ands	r3, r1
 8011976:	4293      	cmp	r3, r2
 8011978:	d003      	beq.n	8011982 <__swsetup_r+0x86>
 801197a:	0021      	movs	r1, r4
 801197c:	0028      	movs	r0, r5
 801197e:	f000 f88f 	bl	8011aa0 <__smakebuf_r>
 8011982:	220c      	movs	r2, #12
 8011984:	5ea3      	ldrsh	r3, [r4, r2]
 8011986:	2101      	movs	r1, #1
 8011988:	001a      	movs	r2, r3
 801198a:	400a      	ands	r2, r1
 801198c:	420b      	tst	r3, r1
 801198e:	d00b      	beq.n	80119a8 <__swsetup_r+0xac>
 8011990:	2200      	movs	r2, #0
 8011992:	60a2      	str	r2, [r4, #8]
 8011994:	6962      	ldr	r2, [r4, #20]
 8011996:	4252      	negs	r2, r2
 8011998:	61a2      	str	r2, [r4, #24]
 801199a:	2000      	movs	r0, #0
 801199c:	6922      	ldr	r2, [r4, #16]
 801199e:	4282      	cmp	r2, r0
 80119a0:	d101      	bne.n	80119a6 <__swsetup_r+0xaa>
 80119a2:	061a      	lsls	r2, r3, #24
 80119a4:	d4be      	bmi.n	8011924 <__swsetup_r+0x28>
 80119a6:	bd70      	pop	{r4, r5, r6, pc}
 80119a8:	0799      	lsls	r1, r3, #30
 80119aa:	d400      	bmi.n	80119ae <__swsetup_r+0xb2>
 80119ac:	6962      	ldr	r2, [r4, #20]
 80119ae:	60a2      	str	r2, [r4, #8]
 80119b0:	e7f3      	b.n	801199a <__swsetup_r+0x9e>
 80119b2:	46c0      	nop			@ (mov r8, r8)
 80119b4:	2000001c 	.word	0x2000001c

080119b8 <_raise_r>:
 80119b8:	b570      	push	{r4, r5, r6, lr}
 80119ba:	0004      	movs	r4, r0
 80119bc:	000d      	movs	r5, r1
 80119be:	291f      	cmp	r1, #31
 80119c0:	d904      	bls.n	80119cc <_raise_r+0x14>
 80119c2:	2316      	movs	r3, #22
 80119c4:	6003      	str	r3, [r0, #0]
 80119c6:	2001      	movs	r0, #1
 80119c8:	4240      	negs	r0, r0
 80119ca:	bd70      	pop	{r4, r5, r6, pc}
 80119cc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d004      	beq.n	80119dc <_raise_r+0x24>
 80119d2:	008a      	lsls	r2, r1, #2
 80119d4:	189b      	adds	r3, r3, r2
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	2a00      	cmp	r2, #0
 80119da:	d108      	bne.n	80119ee <_raise_r+0x36>
 80119dc:	0020      	movs	r0, r4
 80119de:	f000 f831 	bl	8011a44 <_getpid_r>
 80119e2:	002a      	movs	r2, r5
 80119e4:	0001      	movs	r1, r0
 80119e6:	0020      	movs	r0, r4
 80119e8:	f000 f81a 	bl	8011a20 <_kill_r>
 80119ec:	e7ed      	b.n	80119ca <_raise_r+0x12>
 80119ee:	2a01      	cmp	r2, #1
 80119f0:	d009      	beq.n	8011a06 <_raise_r+0x4e>
 80119f2:	1c51      	adds	r1, r2, #1
 80119f4:	d103      	bne.n	80119fe <_raise_r+0x46>
 80119f6:	2316      	movs	r3, #22
 80119f8:	6003      	str	r3, [r0, #0]
 80119fa:	2001      	movs	r0, #1
 80119fc:	e7e5      	b.n	80119ca <_raise_r+0x12>
 80119fe:	2100      	movs	r1, #0
 8011a00:	0028      	movs	r0, r5
 8011a02:	6019      	str	r1, [r3, #0]
 8011a04:	4790      	blx	r2
 8011a06:	2000      	movs	r0, #0
 8011a08:	e7df      	b.n	80119ca <_raise_r+0x12>
	...

08011a0c <raise>:
 8011a0c:	b510      	push	{r4, lr}
 8011a0e:	4b03      	ldr	r3, [pc, #12]	@ (8011a1c <raise+0x10>)
 8011a10:	0001      	movs	r1, r0
 8011a12:	6818      	ldr	r0, [r3, #0]
 8011a14:	f7ff ffd0 	bl	80119b8 <_raise_r>
 8011a18:	bd10      	pop	{r4, pc}
 8011a1a:	46c0      	nop			@ (mov r8, r8)
 8011a1c:	2000001c 	.word	0x2000001c

08011a20 <_kill_r>:
 8011a20:	2300      	movs	r3, #0
 8011a22:	b570      	push	{r4, r5, r6, lr}
 8011a24:	4d06      	ldr	r5, [pc, #24]	@ (8011a40 <_kill_r+0x20>)
 8011a26:	0004      	movs	r4, r0
 8011a28:	0008      	movs	r0, r1
 8011a2a:	0011      	movs	r1, r2
 8011a2c:	602b      	str	r3, [r5, #0]
 8011a2e:	f7f3 fe95 	bl	800575c <_kill>
 8011a32:	1c43      	adds	r3, r0, #1
 8011a34:	d103      	bne.n	8011a3e <_kill_r+0x1e>
 8011a36:	682b      	ldr	r3, [r5, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d000      	beq.n	8011a3e <_kill_r+0x1e>
 8011a3c:	6023      	str	r3, [r4, #0]
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}
 8011a40:	200008a8 	.word	0x200008a8

08011a44 <_getpid_r>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	f7f3 fe83 	bl	8005750 <_getpid>
 8011a4a:	bd10      	pop	{r4, pc}

08011a4c <__swhatbuf_r>:
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	000e      	movs	r6, r1
 8011a50:	001d      	movs	r5, r3
 8011a52:	230e      	movs	r3, #14
 8011a54:	5ec9      	ldrsh	r1, [r1, r3]
 8011a56:	0014      	movs	r4, r2
 8011a58:	b096      	sub	sp, #88	@ 0x58
 8011a5a:	2900      	cmp	r1, #0
 8011a5c:	da0c      	bge.n	8011a78 <__swhatbuf_r+0x2c>
 8011a5e:	89b2      	ldrh	r2, [r6, #12]
 8011a60:	2380      	movs	r3, #128	@ 0x80
 8011a62:	0011      	movs	r1, r2
 8011a64:	4019      	ands	r1, r3
 8011a66:	421a      	tst	r2, r3
 8011a68:	d114      	bne.n	8011a94 <__swhatbuf_r+0x48>
 8011a6a:	2380      	movs	r3, #128	@ 0x80
 8011a6c:	00db      	lsls	r3, r3, #3
 8011a6e:	2000      	movs	r0, #0
 8011a70:	6029      	str	r1, [r5, #0]
 8011a72:	6023      	str	r3, [r4, #0]
 8011a74:	b016      	add	sp, #88	@ 0x58
 8011a76:	bd70      	pop	{r4, r5, r6, pc}
 8011a78:	466a      	mov	r2, sp
 8011a7a:	f000 f853 	bl	8011b24 <_fstat_r>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	dbed      	blt.n	8011a5e <__swhatbuf_r+0x12>
 8011a82:	23f0      	movs	r3, #240	@ 0xf0
 8011a84:	9901      	ldr	r1, [sp, #4]
 8011a86:	021b      	lsls	r3, r3, #8
 8011a88:	4019      	ands	r1, r3
 8011a8a:	4b04      	ldr	r3, [pc, #16]	@ (8011a9c <__swhatbuf_r+0x50>)
 8011a8c:	18c9      	adds	r1, r1, r3
 8011a8e:	424b      	negs	r3, r1
 8011a90:	4159      	adcs	r1, r3
 8011a92:	e7ea      	b.n	8011a6a <__swhatbuf_r+0x1e>
 8011a94:	2100      	movs	r1, #0
 8011a96:	2340      	movs	r3, #64	@ 0x40
 8011a98:	e7e9      	b.n	8011a6e <__swhatbuf_r+0x22>
 8011a9a:	46c0      	nop			@ (mov r8, r8)
 8011a9c:	ffffe000 	.word	0xffffe000

08011aa0 <__smakebuf_r>:
 8011aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aa2:	2602      	movs	r6, #2
 8011aa4:	898b      	ldrh	r3, [r1, #12]
 8011aa6:	0005      	movs	r5, r0
 8011aa8:	000c      	movs	r4, r1
 8011aaa:	b085      	sub	sp, #20
 8011aac:	4233      	tst	r3, r6
 8011aae:	d007      	beq.n	8011ac0 <__smakebuf_r+0x20>
 8011ab0:	0023      	movs	r3, r4
 8011ab2:	3347      	adds	r3, #71	@ 0x47
 8011ab4:	6023      	str	r3, [r4, #0]
 8011ab6:	6123      	str	r3, [r4, #16]
 8011ab8:	2301      	movs	r3, #1
 8011aba:	6163      	str	r3, [r4, #20]
 8011abc:	b005      	add	sp, #20
 8011abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ac0:	ab03      	add	r3, sp, #12
 8011ac2:	aa02      	add	r2, sp, #8
 8011ac4:	f7ff ffc2 	bl	8011a4c <__swhatbuf_r>
 8011ac8:	9f02      	ldr	r7, [sp, #8]
 8011aca:	9001      	str	r0, [sp, #4]
 8011acc:	0039      	movs	r1, r7
 8011ace:	0028      	movs	r0, r5
 8011ad0:	f7fe fe76 	bl	80107c0 <_malloc_r>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	d108      	bne.n	8011aea <__smakebuf_r+0x4a>
 8011ad8:	220c      	movs	r2, #12
 8011ada:	5ea3      	ldrsh	r3, [r4, r2]
 8011adc:	059a      	lsls	r2, r3, #22
 8011ade:	d4ed      	bmi.n	8011abc <__smakebuf_r+0x1c>
 8011ae0:	2203      	movs	r2, #3
 8011ae2:	4393      	bics	r3, r2
 8011ae4:	431e      	orrs	r6, r3
 8011ae6:	81a6      	strh	r6, [r4, #12]
 8011ae8:	e7e2      	b.n	8011ab0 <__smakebuf_r+0x10>
 8011aea:	2380      	movs	r3, #128	@ 0x80
 8011aec:	89a2      	ldrh	r2, [r4, #12]
 8011aee:	6020      	str	r0, [r4, #0]
 8011af0:	4313      	orrs	r3, r2
 8011af2:	81a3      	strh	r3, [r4, #12]
 8011af4:	9b03      	ldr	r3, [sp, #12]
 8011af6:	6120      	str	r0, [r4, #16]
 8011af8:	6167      	str	r7, [r4, #20]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00c      	beq.n	8011b18 <__smakebuf_r+0x78>
 8011afe:	0028      	movs	r0, r5
 8011b00:	230e      	movs	r3, #14
 8011b02:	5ee1      	ldrsh	r1, [r4, r3]
 8011b04:	f000 f820 	bl	8011b48 <_isatty_r>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d005      	beq.n	8011b18 <__smakebuf_r+0x78>
 8011b0c:	2303      	movs	r3, #3
 8011b0e:	89a2      	ldrh	r2, [r4, #12]
 8011b10:	439a      	bics	r2, r3
 8011b12:	3b02      	subs	r3, #2
 8011b14:	4313      	orrs	r3, r2
 8011b16:	81a3      	strh	r3, [r4, #12]
 8011b18:	89a3      	ldrh	r3, [r4, #12]
 8011b1a:	9a01      	ldr	r2, [sp, #4]
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	81a3      	strh	r3, [r4, #12]
 8011b20:	e7cc      	b.n	8011abc <__smakebuf_r+0x1c>
	...

08011b24 <_fstat_r>:
 8011b24:	2300      	movs	r3, #0
 8011b26:	b570      	push	{r4, r5, r6, lr}
 8011b28:	4d06      	ldr	r5, [pc, #24]	@ (8011b44 <_fstat_r+0x20>)
 8011b2a:	0004      	movs	r4, r0
 8011b2c:	0008      	movs	r0, r1
 8011b2e:	0011      	movs	r1, r2
 8011b30:	602b      	str	r3, [r5, #0]
 8011b32:	f7f3 fe73 	bl	800581c <_fstat>
 8011b36:	1c43      	adds	r3, r0, #1
 8011b38:	d103      	bne.n	8011b42 <_fstat_r+0x1e>
 8011b3a:	682b      	ldr	r3, [r5, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d000      	beq.n	8011b42 <_fstat_r+0x1e>
 8011b40:	6023      	str	r3, [r4, #0]
 8011b42:	bd70      	pop	{r4, r5, r6, pc}
 8011b44:	200008a8 	.word	0x200008a8

08011b48 <_isatty_r>:
 8011b48:	2300      	movs	r3, #0
 8011b4a:	b570      	push	{r4, r5, r6, lr}
 8011b4c:	4d06      	ldr	r5, [pc, #24]	@ (8011b68 <_isatty_r+0x20>)
 8011b4e:	0004      	movs	r4, r0
 8011b50:	0008      	movs	r0, r1
 8011b52:	602b      	str	r3, [r5, #0]
 8011b54:	f7f3 fe70 	bl	8005838 <_isatty>
 8011b58:	1c43      	adds	r3, r0, #1
 8011b5a:	d103      	bne.n	8011b64 <_isatty_r+0x1c>
 8011b5c:	682b      	ldr	r3, [r5, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d000      	beq.n	8011b64 <_isatty_r+0x1c>
 8011b62:	6023      	str	r3, [r4, #0]
 8011b64:	bd70      	pop	{r4, r5, r6, pc}
 8011b66:	46c0      	nop			@ (mov r8, r8)
 8011b68:	200008a8 	.word	0x200008a8

08011b6c <logf>:
 8011b6c:	b570      	push	{r4, r5, r6, lr}
 8011b6e:	1c05      	adds	r5, r0, #0
 8011b70:	f000 f82c 	bl	8011bcc <__ieee754_logf>
 8011b74:	1c29      	adds	r1, r5, #0
 8011b76:	1c04      	adds	r4, r0, #0
 8011b78:	1c28      	adds	r0, r5, #0
 8011b7a:	f7ef fd57 	bl	800162c <__aeabi_fcmpun>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d110      	bne.n	8011ba4 <logf+0x38>
 8011b82:	2100      	movs	r1, #0
 8011b84:	1c28      	adds	r0, r5, #0
 8011b86:	f7ee fcb5 	bl	80004f4 <__aeabi_fcmpgt>
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d10a      	bne.n	8011ba4 <logf+0x38>
 8011b8e:	2100      	movs	r1, #0
 8011b90:	1c28      	adds	r0, r5, #0
 8011b92:	f7ee fc95 	bl	80004c0 <__aeabi_fcmpeq>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d006      	beq.n	8011ba8 <logf+0x3c>
 8011b9a:	f7fd fee5 	bl	800f968 <__errno>
 8011b9e:	2322      	movs	r3, #34	@ 0x22
 8011ba0:	4c06      	ldr	r4, [pc, #24]	@ (8011bbc <logf+0x50>)
 8011ba2:	6003      	str	r3, [r0, #0]
 8011ba4:	1c20      	adds	r0, r4, #0
 8011ba6:	bd70      	pop	{r4, r5, r6, pc}
 8011ba8:	f7fd fede 	bl	800f968 <__errno>
 8011bac:	2321      	movs	r3, #33	@ 0x21
 8011bae:	6003      	str	r3, [r0, #0]
 8011bb0:	4803      	ldr	r0, [pc, #12]	@ (8011bc0 <logf+0x54>)
 8011bb2:	f000 f807 	bl	8011bc4 <nanf>
 8011bb6:	1c04      	adds	r4, r0, #0
 8011bb8:	e7f4      	b.n	8011ba4 <logf+0x38>
 8011bba:	46c0      	nop			@ (mov r8, r8)
 8011bbc:	ff800000 	.word	0xff800000
 8011bc0:	08012324 	.word	0x08012324

08011bc4 <nanf>:
 8011bc4:	4800      	ldr	r0, [pc, #0]	@ (8011bc8 <nanf+0x4>)
 8011bc6:	4770      	bx	lr
 8011bc8:	7fc00000 	.word	0x7fc00000

08011bcc <__ieee754_logf>:
 8011bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bce:	0043      	lsls	r3, r0, #1
 8011bd0:	b085      	sub	sp, #20
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d106      	bne.n	8011be4 <__ieee754_logf+0x18>
 8011bd6:	20cc      	movs	r0, #204	@ 0xcc
 8011bd8:	2100      	movs	r1, #0
 8011bda:	0600      	lsls	r0, r0, #24
 8011bdc:	f7ee ff9a 	bl	8000b14 <__aeabi_fdiv>
 8011be0:	b005      	add	sp, #20
 8011be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011be4:	1e03      	subs	r3, r0, #0
 8011be6:	da04      	bge.n	8011bf2 <__ieee754_logf+0x26>
 8011be8:	1c01      	adds	r1, r0, #0
 8011bea:	f7ef fabb 	bl	8001164 <__aeabi_fsub>
 8011bee:	2100      	movs	r1, #0
 8011bf0:	e7f4      	b.n	8011bdc <__ieee754_logf+0x10>
 8011bf2:	21ff      	movs	r1, #255	@ 0xff
 8011bf4:	05c9      	lsls	r1, r1, #23
 8011bf6:	4288      	cmp	r0, r1
 8011bf8:	db03      	blt.n	8011c02 <__ieee754_logf+0x36>
 8011bfa:	1c01      	adds	r1, r0, #0
 8011bfc:	f7ee fd98 	bl	8000730 <__aeabi_fadd>
 8011c00:	e7ee      	b.n	8011be0 <__ieee754_logf+0x14>
 8011c02:	2280      	movs	r2, #128	@ 0x80
 8011c04:	2100      	movs	r1, #0
 8011c06:	0412      	lsls	r2, r2, #16
 8011c08:	4290      	cmp	r0, r2
 8011c0a:	da06      	bge.n	8011c1a <__ieee754_logf+0x4e>
 8011c0c:	2198      	movs	r1, #152	@ 0x98
 8011c0e:	05c9      	lsls	r1, r1, #23
 8011c10:	f7ef f94e 	bl	8000eb0 <__aeabi_fmul>
 8011c14:	2119      	movs	r1, #25
 8011c16:	0003      	movs	r3, r0
 8011c18:	4249      	negs	r1, r1
 8011c1a:	15da      	asrs	r2, r3, #23
 8011c1c:	3a7f      	subs	r2, #127	@ 0x7f
 8011c1e:	1852      	adds	r2, r2, r1
 8011c20:	2180      	movs	r1, #128	@ 0x80
 8011c22:	025b      	lsls	r3, r3, #9
 8011c24:	0a5e      	lsrs	r6, r3, #9
 8011c26:	4b74      	ldr	r3, [pc, #464]	@ (8011df8 <__ieee754_logf+0x22c>)
 8011c28:	20fe      	movs	r0, #254	@ 0xfe
 8011c2a:	0409      	lsls	r1, r1, #16
 8011c2c:	18f3      	adds	r3, r6, r3
 8011c2e:	400b      	ands	r3, r1
 8011c30:	21fe      	movs	r1, #254	@ 0xfe
 8011c32:	0580      	lsls	r0, r0, #22
 8011c34:	4058      	eors	r0, r3
 8011c36:	15dd      	asrs	r5, r3, #23
 8011c38:	4330      	orrs	r0, r6
 8011c3a:	0589      	lsls	r1, r1, #22
 8011c3c:	18ad      	adds	r5, r5, r2
 8011c3e:	f7ef fa91 	bl	8001164 <__aeabi_fsub>
 8011c42:	0032      	movs	r2, r6
 8011c44:	4b6d      	ldr	r3, [pc, #436]	@ (8011dfc <__ieee754_logf+0x230>)
 8011c46:	320f      	adds	r2, #15
 8011c48:	1c04      	adds	r4, r0, #0
 8011c4a:	421a      	tst	r2, r3
 8011c4c:	d145      	bne.n	8011cda <__ieee754_logf+0x10e>
 8011c4e:	2100      	movs	r1, #0
 8011c50:	f7ee fc36 	bl	80004c0 <__aeabi_fcmpeq>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d011      	beq.n	8011c7c <__ieee754_logf+0xb0>
 8011c58:	2000      	movs	r0, #0
 8011c5a:	2d00      	cmp	r5, #0
 8011c5c:	d0c0      	beq.n	8011be0 <__ieee754_logf+0x14>
 8011c5e:	0028      	movs	r0, r5
 8011c60:	f7ef fd1a 	bl	8001698 <__aeabi_i2f>
 8011c64:	4966      	ldr	r1, [pc, #408]	@ (8011e00 <__ieee754_logf+0x234>)
 8011c66:	1c04      	adds	r4, r0, #0
 8011c68:	f7ef f922 	bl	8000eb0 <__aeabi_fmul>
 8011c6c:	4965      	ldr	r1, [pc, #404]	@ (8011e04 <__ieee754_logf+0x238>)
 8011c6e:	1c05      	adds	r5, r0, #0
 8011c70:	1c20      	adds	r0, r4, #0
 8011c72:	f7ef f91d 	bl	8000eb0 <__aeabi_fmul>
 8011c76:	1c01      	adds	r1, r0, #0
 8011c78:	1c28      	adds	r0, r5, #0
 8011c7a:	e7bf      	b.n	8011bfc <__ieee754_logf+0x30>
 8011c7c:	4962      	ldr	r1, [pc, #392]	@ (8011e08 <__ieee754_logf+0x23c>)
 8011c7e:	1c20      	adds	r0, r4, #0
 8011c80:	f7ef f916 	bl	8000eb0 <__aeabi_fmul>
 8011c84:	1c01      	adds	r1, r0, #0
 8011c86:	20fc      	movs	r0, #252	@ 0xfc
 8011c88:	0580      	lsls	r0, r0, #22
 8011c8a:	f7ef fa6b 	bl	8001164 <__aeabi_fsub>
 8011c8e:	1c21      	adds	r1, r4, #0
 8011c90:	1c06      	adds	r6, r0, #0
 8011c92:	1c20      	adds	r0, r4, #0
 8011c94:	f7ef f90c 	bl	8000eb0 <__aeabi_fmul>
 8011c98:	1c01      	adds	r1, r0, #0
 8011c9a:	1c30      	adds	r0, r6, #0
 8011c9c:	f7ef f908 	bl	8000eb0 <__aeabi_fmul>
 8011ca0:	1c06      	adds	r6, r0, #0
 8011ca2:	2d00      	cmp	r5, #0
 8011ca4:	d101      	bne.n	8011caa <__ieee754_logf+0xde>
 8011ca6:	1c31      	adds	r1, r6, #0
 8011ca8:	e079      	b.n	8011d9e <__ieee754_logf+0x1d2>
 8011caa:	0028      	movs	r0, r5
 8011cac:	f7ef fcf4 	bl	8001698 <__aeabi_i2f>
 8011cb0:	4953      	ldr	r1, [pc, #332]	@ (8011e00 <__ieee754_logf+0x234>)
 8011cb2:	1c05      	adds	r5, r0, #0
 8011cb4:	f7ef f8fc 	bl	8000eb0 <__aeabi_fmul>
 8011cb8:	4952      	ldr	r1, [pc, #328]	@ (8011e04 <__ieee754_logf+0x238>)
 8011cba:	1c07      	adds	r7, r0, #0
 8011cbc:	1c28      	adds	r0, r5, #0
 8011cbe:	f7ef f8f7 	bl	8000eb0 <__aeabi_fmul>
 8011cc2:	1c01      	adds	r1, r0, #0
 8011cc4:	1c30      	adds	r0, r6, #0
 8011cc6:	f7ef fa4d 	bl	8001164 <__aeabi_fsub>
 8011cca:	1c21      	adds	r1, r4, #0
 8011ccc:	f7ef fa4a 	bl	8001164 <__aeabi_fsub>
 8011cd0:	1c01      	adds	r1, r0, #0
 8011cd2:	1c38      	adds	r0, r7, #0
 8011cd4:	f7ef fa46 	bl	8001164 <__aeabi_fsub>
 8011cd8:	e782      	b.n	8011be0 <__ieee754_logf+0x14>
 8011cda:	2180      	movs	r1, #128	@ 0x80
 8011cdc:	05c9      	lsls	r1, r1, #23
 8011cde:	f7ee fd27 	bl	8000730 <__aeabi_fadd>
 8011ce2:	1c01      	adds	r1, r0, #0
 8011ce4:	1c20      	adds	r0, r4, #0
 8011ce6:	f7ee ff15 	bl	8000b14 <__aeabi_fdiv>
 8011cea:	9000      	str	r0, [sp, #0]
 8011cec:	0028      	movs	r0, r5
 8011cee:	f7ef fcd3 	bl	8001698 <__aeabi_i2f>
 8011cf2:	9900      	ldr	r1, [sp, #0]
 8011cf4:	9001      	str	r0, [sp, #4]
 8011cf6:	1c08      	adds	r0, r1, #0
 8011cf8:	f7ef f8da 	bl	8000eb0 <__aeabi_fmul>
 8011cfc:	4b43      	ldr	r3, [pc, #268]	@ (8011e0c <__ieee754_logf+0x240>)
 8011cfe:	1c01      	adds	r1, r0, #0
 8011d00:	18f3      	adds	r3, r6, r3
 8011d02:	9303      	str	r3, [sp, #12]
 8011d04:	9002      	str	r0, [sp, #8]
 8011d06:	f7ef f8d3 	bl	8000eb0 <__aeabi_fmul>
 8011d0a:	4941      	ldr	r1, [pc, #260]	@ (8011e10 <__ieee754_logf+0x244>)
 8011d0c:	1c07      	adds	r7, r0, #0
 8011d0e:	f7ef f8cf 	bl	8000eb0 <__aeabi_fmul>
 8011d12:	4940      	ldr	r1, [pc, #256]	@ (8011e14 <__ieee754_logf+0x248>)
 8011d14:	f7ee fd0c 	bl	8000730 <__aeabi_fadd>
 8011d18:	1c39      	adds	r1, r7, #0
 8011d1a:	f7ef f8c9 	bl	8000eb0 <__aeabi_fmul>
 8011d1e:	493e      	ldr	r1, [pc, #248]	@ (8011e18 <__ieee754_logf+0x24c>)
 8011d20:	f7ee fd06 	bl	8000730 <__aeabi_fadd>
 8011d24:	1c39      	adds	r1, r7, #0
 8011d26:	f7ef f8c3 	bl	8000eb0 <__aeabi_fmul>
 8011d2a:	493c      	ldr	r1, [pc, #240]	@ (8011e1c <__ieee754_logf+0x250>)
 8011d2c:	f7ee fd00 	bl	8000730 <__aeabi_fadd>
 8011d30:	9902      	ldr	r1, [sp, #8]
 8011d32:	f7ef f8bd 	bl	8000eb0 <__aeabi_fmul>
 8011d36:	493a      	ldr	r1, [pc, #232]	@ (8011e20 <__ieee754_logf+0x254>)
 8011d38:	9002      	str	r0, [sp, #8]
 8011d3a:	1c38      	adds	r0, r7, #0
 8011d3c:	f7ef f8b8 	bl	8000eb0 <__aeabi_fmul>
 8011d40:	4938      	ldr	r1, [pc, #224]	@ (8011e24 <__ieee754_logf+0x258>)
 8011d42:	f7ee fcf5 	bl	8000730 <__aeabi_fadd>
 8011d46:	1c39      	adds	r1, r7, #0
 8011d48:	f7ef f8b2 	bl	8000eb0 <__aeabi_fmul>
 8011d4c:	4936      	ldr	r1, [pc, #216]	@ (8011e28 <__ieee754_logf+0x25c>)
 8011d4e:	f7ee fcef 	bl	8000730 <__aeabi_fadd>
 8011d52:	1c39      	adds	r1, r7, #0
 8011d54:	f7ef f8ac 	bl	8000eb0 <__aeabi_fmul>
 8011d58:	1c01      	adds	r1, r0, #0
 8011d5a:	9802      	ldr	r0, [sp, #8]
 8011d5c:	f7ee fce8 	bl	8000730 <__aeabi_fadd>
 8011d60:	4b32      	ldr	r3, [pc, #200]	@ (8011e2c <__ieee754_logf+0x260>)
 8011d62:	9a03      	ldr	r2, [sp, #12]
 8011d64:	1b9b      	subs	r3, r3, r6
 8011d66:	1c07      	adds	r7, r0, #0
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	dd2f      	ble.n	8011dce <__ieee754_logf+0x202>
 8011d6e:	21fc      	movs	r1, #252	@ 0xfc
 8011d70:	1c20      	adds	r0, r4, #0
 8011d72:	0589      	lsls	r1, r1, #22
 8011d74:	f7ef f89c 	bl	8000eb0 <__aeabi_fmul>
 8011d78:	1c21      	adds	r1, r4, #0
 8011d7a:	f7ef f899 	bl	8000eb0 <__aeabi_fmul>
 8011d7e:	1c01      	adds	r1, r0, #0
 8011d80:	1c06      	adds	r6, r0, #0
 8011d82:	1c38      	adds	r0, r7, #0
 8011d84:	f7ee fcd4 	bl	8000730 <__aeabi_fadd>
 8011d88:	9900      	ldr	r1, [sp, #0]
 8011d8a:	f7ef f891 	bl	8000eb0 <__aeabi_fmul>
 8011d8e:	1c07      	adds	r7, r0, #0
 8011d90:	2d00      	cmp	r5, #0
 8011d92:	d106      	bne.n	8011da2 <__ieee754_logf+0x1d6>
 8011d94:	1c01      	adds	r1, r0, #0
 8011d96:	1c30      	adds	r0, r6, #0
 8011d98:	f7ef f9e4 	bl	8001164 <__aeabi_fsub>
 8011d9c:	1c01      	adds	r1, r0, #0
 8011d9e:	1c20      	adds	r0, r4, #0
 8011da0:	e798      	b.n	8011cd4 <__ieee754_logf+0x108>
 8011da2:	4917      	ldr	r1, [pc, #92]	@ (8011e00 <__ieee754_logf+0x234>)
 8011da4:	9801      	ldr	r0, [sp, #4]
 8011da6:	f7ef f883 	bl	8000eb0 <__aeabi_fmul>
 8011daa:	4916      	ldr	r1, [pc, #88]	@ (8011e04 <__ieee754_logf+0x238>)
 8011dac:	1c05      	adds	r5, r0, #0
 8011dae:	9801      	ldr	r0, [sp, #4]
 8011db0:	f7ef f87e 	bl	8000eb0 <__aeabi_fmul>
 8011db4:	1c39      	adds	r1, r7, #0
 8011db6:	f7ee fcbb 	bl	8000730 <__aeabi_fadd>
 8011dba:	1c01      	adds	r1, r0, #0
 8011dbc:	1c30      	adds	r0, r6, #0
 8011dbe:	f7ef f9d1 	bl	8001164 <__aeabi_fsub>
 8011dc2:	1c21      	adds	r1, r4, #0
 8011dc4:	f7ef f9ce 	bl	8001164 <__aeabi_fsub>
 8011dc8:	1c01      	adds	r1, r0, #0
 8011dca:	1c28      	adds	r0, r5, #0
 8011dcc:	e782      	b.n	8011cd4 <__ieee754_logf+0x108>
 8011dce:	1c01      	adds	r1, r0, #0
 8011dd0:	1c20      	adds	r0, r4, #0
 8011dd2:	f7ef f9c7 	bl	8001164 <__aeabi_fsub>
 8011dd6:	9900      	ldr	r1, [sp, #0]
 8011dd8:	f7ef f86a 	bl	8000eb0 <__aeabi_fmul>
 8011ddc:	1c06      	adds	r6, r0, #0
 8011dde:	2d00      	cmp	r5, #0
 8011de0:	d100      	bne.n	8011de4 <__ieee754_logf+0x218>
 8011de2:	e760      	b.n	8011ca6 <__ieee754_logf+0xda>
 8011de4:	4906      	ldr	r1, [pc, #24]	@ (8011e00 <__ieee754_logf+0x234>)
 8011de6:	9801      	ldr	r0, [sp, #4]
 8011de8:	f7ef f862 	bl	8000eb0 <__aeabi_fmul>
 8011dec:	4905      	ldr	r1, [pc, #20]	@ (8011e04 <__ieee754_logf+0x238>)
 8011dee:	1c05      	adds	r5, r0, #0
 8011df0:	9801      	ldr	r0, [sp, #4]
 8011df2:	f7ef f85d 	bl	8000eb0 <__aeabi_fmul>
 8011df6:	e7e0      	b.n	8011dba <__ieee754_logf+0x1ee>
 8011df8:	004afb20 	.word	0x004afb20
 8011dfc:	007ffff0 	.word	0x007ffff0
 8011e00:	3f317180 	.word	0x3f317180
 8011e04:	3717f7d1 	.word	0x3717f7d1
 8011e08:	3eaaaaab 	.word	0x3eaaaaab
 8011e0c:	ffcf5c30 	.word	0xffcf5c30
 8011e10:	3e178897 	.word	0x3e178897
 8011e14:	3e3a3325 	.word	0x3e3a3325
 8011e18:	3e924925 	.word	0x3e924925
 8011e1c:	3f2aaaab 	.word	0x3f2aaaab
 8011e20:	3e1cd04f 	.word	0x3e1cd04f
 8011e24:	3e638e29 	.word	0x3e638e29
 8011e28:	3ecccccd 	.word	0x3ecccccd
 8011e2c:	0035c288 	.word	0x0035c288

08011e30 <_init>:
 8011e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e32:	46c0      	nop			@ (mov r8, r8)
 8011e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e36:	bc08      	pop	{r3}
 8011e38:	469e      	mov	lr, r3
 8011e3a:	4770      	bx	lr

08011e3c <_fini>:
 8011e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3e:	46c0      	nop			@ (mov r8, r8)
 8011e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e42:	bc08      	pop	{r3}
 8011e44:	469e      	mov	lr, r3
 8011e46:	4770      	bx	lr
